  struct s0 {
    var p0: [[Float]]
    var p1: [Float]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s2 {
    var p0: [[s1]]
    var p1: [s1]
    var p2: Float
    var p3: [s1]
  } in
  struct s3 {
    var p0: [[s0]]
    var p1: s0
  } in
  struct s4 {
    var p0: [[s1]]
    var p1: [s3]
  } in
  struct s5 {
    var p0: [s1]
    var p1: [s0]
  } in
  struct s7 {
    var p0: [s1]
    var p1: s4
    var p2: [[s5]]
  } in
  let noinline_f0: ([s5], [Float], [s3], s2, s2, [s7], Float) -> Float = (v0: [s5], v1: [Float], v2: [s3], v3: s2, v4: s2, v5: [s7], v6: Float) -> Float {
    let v8: s3 = v2[0] in
    var v12: s3 = v8 in
    let v16: [[s0]] = v12.p0 in
    v12.p0 = v16 in
    let v13: s0 = v12.p1 in
    var v25: [[s0]] = v16 in
    let v61: [Float] = v13.p1 in
    let v37: s0 = v12.p1 in
    let v69: [s0] = v16[0] in
    let v34: Float = v61[0] in
    v25[0] = v69 in
    v12.p1 = v37 in
    v12.p0 = v25 in
    v34
  } in
  fun loop(i: Int, v0: [s5], v1: [Float], v2: [s3], v3: s2, v4: s2, v5: [s7], v6: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4, v5, v6) in
      loop(i + 1, v0, v1, v2, v3, v4, v5, v6, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s5] = [s5([s1([s0([[0.0], [1.0]], [2.0])], s0([[3.0], [4.0]], [5.0]))], [s0([[6.0], [7.0]], [8.0]), s0([[9.0], [10.0]], [11.0]), s0([[12.0], [13.0]], [14.0])]), s5([s1([s0([[15.0], [16.0]], [17.0])], s0([[18.0], [19.0]], [20.0]))], [s0([[21.0], [22.0]], [23.0]), s0([[24.0], [25.0]], [26.0]), s0([[27.0], [28.0]], [29.0])]), s5([s1([s0([[30.0], [31.0]], [32.0])], s0([[33.0], [34.0]], [35.0]))], [s0([[36.0], [37.0]], [38.0]), s0([[39.0], [40.0]], [41.0]), s0([[42.0], [43.0]], [44.0])])] in
    let v1: [Float] = [45.0, 46.0, 47.0] in
    let v2: [s3] = [s3([[s0([[48.0], [49.0]], [50.0])]], s0([[51.0], [52.0]], [53.0])), s3([[s0([[54.0], [55.0]], [56.0])]], s0([[57.0], [58.0]], [59.0])), s3([[s0([[60.0], [61.0]], [62.0])]], s0([[63.0], [64.0]], [65.0]))] in
    let v3: s2 = s2([[s1([s0([[66.0], [67.0]], [68.0])], s0([[69.0], [70.0]], [71.0]))]], [s1([s0([[72.0], [73.0]], [74.0])], s0([[75.0], [76.0]], [77.0])), s1([s0([[78.0], [79.0]], [80.0])], s0([[81.0], [82.0]], [83.0])), s1([s0([[84.0], [85.0]], [86.0])], s0([[87.0], [88.0]], [89.0]))], 90.0, [s1([s0([[91.0], [92.0]], [93.0])], s0([[94.0], [95.0]], [96.0]))]) in
    let v4: s2 = s2([[s1([s0([[97.0], [98.0]], [99.0])], s0([[100.0], [101.0]], [102.0]))]], [s1([s0([[103.0], [104.0]], [105.0])], s0([[106.0], [107.0]], [108.0])), s1([s0([[109.0], [110.0]], [111.0])], s0([[112.0], [113.0]], [114.0])), s1([s0([[115.0], [116.0]], [117.0])], s0([[118.0], [119.0]], [120.0]))], 121.0, [s1([s0([[122.0], [123.0]], [124.0])], s0([[125.0], [126.0]], [127.0]))]) in
    let v5: [s7] = [s7([s1([s0([[128.0], [129.0]], [130.0])], s0([[131.0], [132.0]], [133.0]))], s4([[s1([s0([[134.0], [135.0]], [136.0])], s0([[137.0], [138.0]], [139.0]))]], [s3([[s0([[140.0], [141.0]], [142.0])]], s0([[143.0], [144.0]], [145.0])), s3([[s0([[146.0], [147.0]], [148.0])]], s0([[149.0], [150.0]], [151.0]))]), [[s5([s1([s0([[152.0], [153.0]], [154.0])], s0([[155.0], [156.0]], [157.0]))], [s0([[158.0], [159.0]], [160.0]), s0([[161.0], [162.0]], [163.0]), s0([[164.0], [165.0]], [166.0])])]])] in
    let v6: Float = 167.0 in
    let initialResult: Float = 167.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, v5, v6, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()