  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  let noinline_f0: ([s1], s0, Float) -> Float = (v0: [s1], v1: s0, v2: Float) -> Float {
    let v7: s1 = v0[0] in
    let v3: s0 = v7.p0 in
    var v6: Float = v2 in
    let v14: [[Float]] = v3.p1 in
    let v13: [[Float]] = v3.p0 in
    let v11: [Float] = v13[1] in
    var v19: [Float] = v11 in
    var v37: [[Float]] = v14 in
    v37[0] = v19 in
    v37[0] = v11 in
    let v18: [[Float]] = v1.p2 in
    var v25: [[Float]] = v18 in
    v19[0] = v6 in
    let v50: [Float] = v37[0] in
    let v21: [Float] = v25[0] in
    v37[0] = v21 in
    let v130: Float = v50[0] in
    v130
  } in
  fun loop(i: Int, v0: [s1], v1: s0, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1(s0([[0.0], [1.0], [2.0]], [[3.0]], [[4.0], [5.0]]), s0([[6.0], [7.0], [8.0]], [[9.0]], [[10.0], [11.0]])), s1(s0([[12.0], [13.0], [14.0]], [[15.0]], [[16.0], [17.0]]), s0([[18.0], [19.0], [20.0]], [[21.0]], [[22.0], [23.0]])), s1(s0([[24.0], [25.0], [26.0]], [[27.0]], [[28.0], [29.0]]), s0([[30.0], [31.0], [32.0]], [[33.0]], [[34.0], [35.0]]))] in
    let v1: s0 = s0([[36.0], [37.0], [38.0]], [[39.0]], [[40.0], [41.0]]) in
    let v2: Float = 42.0 in
    let initialResult: Float = 42.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()