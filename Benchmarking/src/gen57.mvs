  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
    var p3: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [[s0]]
    var p1: s1
  } in
  struct s4 {
    var p0: [[s1]]
    var p1: s2
  } in
  struct s6 {
    var p0: s0
    var p1: s1
  } in
  let noinline_f0: (s6, [Float], s2, [s4], [[Float]], s1, Float) -> Float = (v0: s6, v1: [Float], v2: s2, v3: [s4], v4: [[Float]], v5: s1, v6: Float) -> Float {
    let v13: Float = v6 / v6 in
    let v15: Float = v1[0] in
    var v14: [Float] = v1 in
    v14[0] = v6 in
    let v19: [Float] = v4[1] in
    v14[0] = v13 in
    let v28: Float = v19[0] in
    var v52: Float = v6 in
    v14[0] = v15 in
    let v41: Float = v14[0] in
    let v241: Float = v1[0] in
    v14[0] = v41 in
    let v160: Float = v28 - v241 in
    let v173: Float = v160 + v41 in
    v14[0] = v52 in
    v173
  } in
  fun loop(i: Int, v0: s6, v1: [Float], v2: s2, v3: [s4], v4: [[Float]], v5: s1, v6: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4, v5, v6) in
      loop(i + 1, v0, v1, v2, v3, v4, v5, v6, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s6 = s6(s0([[0.0], [1.0]], [[2.0]], [[3.0], [4.0]], [[5.0]]), s1(s0([[6.0], [7.0]], [[8.0]], [[9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0]], [[14.0]], [[15.0], [16.0]], [[17.0]]))) in
    let v1: [Float] = [18.0] in
    let v2: s2 = s2([[s0([[19.0], [20.0]], [[21.0]], [[22.0], [23.0]], [[24.0]])], [s0([[25.0], [26.0]], [[27.0]], [[28.0], [29.0]], [[30.0]])], [s0([[31.0], [32.0]], [[33.0]], [[34.0], [35.0]], [[36.0]])]], s1(s0([[37.0], [38.0]], [[39.0]], [[40.0], [41.0]], [[42.0]]), s0([[43.0], [44.0]], [[45.0]], [[46.0], [47.0]], [[48.0]]))) in
    let v3: [s4] = [s4([[s1(s0([[49.0], [50.0]], [[51.0]], [[52.0], [53.0]], [[54.0]]), s0([[55.0], [56.0]], [[57.0]], [[58.0], [59.0]], [[60.0]]))], [s1(s0([[61.0], [62.0]], [[63.0]], [[64.0], [65.0]], [[66.0]]), s0([[67.0], [68.0]], [[69.0]], [[70.0], [71.0]], [[72.0]]))], [s1(s0([[73.0], [74.0]], [[75.0]], [[76.0], [77.0]], [[78.0]]), s0([[79.0], [80.0]], [[81.0]], [[82.0], [83.0]], [[84.0]]))]], s2([[s0([[85.0], [86.0]], [[87.0]], [[88.0], [89.0]], [[90.0]])], [s0([[91.0], [92.0]], [[93.0]], [[94.0], [95.0]], [[96.0]])], [s0([[97.0], [98.0]], [[99.0]], [[100.0], [101.0]], [[102.0]])]], s1(s0([[103.0], [104.0]], [[105.0]], [[106.0], [107.0]], [[108.0]]), s0([[109.0], [110.0]], [[111.0]], [[112.0], [113.0]], [[114.0]]))))] in
    let v4: [[Float]] = [[115.0], [116.0]] in
    let v5: s1 = s1(s0([[117.0], [118.0]], [[119.0]], [[120.0], [121.0]], [[122.0]]), s0([[123.0], [124.0]], [[125.0]], [[126.0], [127.0]], [[128.0]])) in
    let v6: Float = 129.0 in
    let initialResult: Float = 129.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, v5, v6, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()