  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
  }
  struct s2 {
    var p0: [s0]
    var p1: [[s1]]
  }
  struct s6 {
    var p0: [Double]
    var p1: [s0]
    var p2: [[s2]]
    var p3: [[s0]]
    var p4: s1
  }
  struct s11 {
    var p0: [s1]
    var p1: s1
  }
  struct s12 {
    var p0: [s1]
    var p1: s6
  }
  @inline(never)
  func f0(_ v0: [s12], _ v1: Double) -> Double {
    var v3: [s12] = v0
    let v10: s12 = v3[1]
    let v9: s12 = v0[0]
    let v7: [s1] = v10.p0
    let v2: s1 = v7[1]
    v3[1] = v9
    let v22: s11 = s11(p0: v7, p1: v2)
    let v17: [s1] = v22.p0
    let v12: s6 = v9.p1
    var v19: s11 = v22
    v3[0] = v10
    let v15: s12 = v0[0]
    v3[0] = v15
    var v24: s12 = v9
    let v32: s1 = v7[0]
    v3[1] = v24
    let v45: [s1] = v10.p0
    let v34: [s0] = v2.p1
    let v29: s1 = v17[0]
    let v37: s12 = v0[2]
    let v59: s0 = v34[1]
    v19.p0 = v7
    v24.p1 = v12
    let v66: [[Double]] = v59.p0
    v3[2] = v37
    let v38: [s1] = v19.p0
    v19.p1 = v2
    v19.p1 = v29
    let v76: s1 = v45[0]
    let v54: [s1] = v10.p0
    v24.p0 = v38
    let v75: [Double] = v66[0]
    v19.p1 = v32
    let v70: Double = v75[0]
    let v55: s1 = v17[1]
    var v144: s1 = v76
    v19.p1 = v144
    v19.p1 = v55
    v24.p0 = v54
    return v70
  }
  func benchmark() {
    let v0: [s12] = [s12(p0: [s1(p0: [[s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0]])], [s0(p0: [[4.0], [5.0], [6.0]], p1: [[7.0]])], [s0(p0: [[8.0], [9.0], [10.0]], p1: [[11.0]])]], p1: [s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0]]), s0(p0: [[16.0], [17.0], [18.0]], p1: [[19.0]])]), s1(p0: [[s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0]])], [s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0]])], [s0(p0: [[28.0], [29.0], [30.0]], p1: [[31.0]])]], p1: [s0(p0: [[32.0], [33.0], [34.0]], p1: [[35.0]]), s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0]])])], p1: s6(p0: [40.0, 41.0], p1: [s0(p0: [[42.0], [43.0], [44.0]], p1: [[45.0]]), s0(p0: [[46.0], [47.0], [48.0]], p1: [[49.0]]), s0(p0: [[50.0], [51.0], [52.0]], p1: [[53.0]])], p2: [[s2(p0: [s0(p0: [[54.0], [55.0], [56.0]], p1: [[57.0]]), s0(p0: [[58.0], [59.0], [60.0]], p1: [[61.0]])], p1: [[s1(p0: [[s0(p0: [[62.0], [63.0], [64.0]], p1: [[65.0]])], [s0(p0: [[66.0], [67.0], [68.0]], p1: [[69.0]])], [s0(p0: [[70.0], [71.0], [72.0]], p1: [[73.0]])]], p1: [s0(p0: [[74.0], [75.0], [76.0]], p1: [[77.0]]), s0(p0: [[78.0], [79.0], [80.0]], p1: [[81.0]])])], [s1(p0: [[s0(p0: [[82.0], [83.0], [84.0]], p1: [[85.0]])], [s0(p0: [[86.0], [87.0], [88.0]], p1: [[89.0]])], [s0(p0: [[90.0], [91.0], [92.0]], p1: [[93.0]])]], p1: [s0(p0: [[94.0], [95.0], [96.0]], p1: [[97.0]]), s0(p0: [[98.0], [99.0], [100.0]], p1: [[101.0]])])]])]], p3: [[s0(p0: [[102.0], [103.0], [104.0]], p1: [[105.0]])], [s0(p0: [[106.0], [107.0], [108.0]], p1: [[109.0]])]], p4: s1(p0: [[s0(p0: [[110.0], [111.0], [112.0]], p1: [[113.0]])], [s0(p0: [[114.0], [115.0], [116.0]], p1: [[117.0]])], [s0(p0: [[118.0], [119.0], [120.0]], p1: [[121.0]])]], p1: [s0(p0: [[122.0], [123.0], [124.0]], p1: [[125.0]]), s0(p0: [[126.0], [127.0], [128.0]], p1: [[129.0]])]))), s12(p0: [s1(p0: [[s0(p0: [[130.0], [131.0], [132.0]], p1: [[133.0]])], [s0(p0: [[134.0], [135.0], [136.0]], p1: [[137.0]])], [s0(p0: [[138.0], [139.0], [140.0]], p1: [[141.0]])]], p1: [s0(p0: [[142.0], [143.0], [144.0]], p1: [[145.0]]), s0(p0: [[146.0], [147.0], [148.0]], p1: [[149.0]])]), s1(p0: [[s0(p0: [[150.0], [151.0], [152.0]], p1: [[153.0]])], [s0(p0: [[154.0], [155.0], [156.0]], p1: [[157.0]])], [s0(p0: [[158.0], [159.0], [160.0]], p1: [[161.0]])]], p1: [s0(p0: [[162.0], [163.0], [164.0]], p1: [[165.0]]), s0(p0: [[166.0], [167.0], [168.0]], p1: [[169.0]])])], p1: s6(p0: [170.0, 171.0], p1: [s0(p0: [[172.0], [173.0], [174.0]], p1: [[175.0]]), s0(p0: [[176.0], [177.0], [178.0]], p1: [[179.0]]), s0(p0: [[180.0], [181.0], [182.0]], p1: [[183.0]])], p2: [[s2(p0: [s0(p0: [[184.0], [185.0], [186.0]], p1: [[187.0]]), s0(p0: [[188.0], [189.0], [190.0]], p1: [[191.0]])], p1: [[s1(p0: [[s0(p0: [[192.0], [193.0], [194.0]], p1: [[195.0]])], [s0(p0: [[196.0], [197.0], [198.0]], p1: [[199.0]])], [s0(p0: [[200.0], [201.0], [202.0]], p1: [[203.0]])]], p1: [s0(p0: [[204.0], [205.0], [206.0]], p1: [[207.0]]), s0(p0: [[208.0], [209.0], [210.0]], p1: [[211.0]])])], [s1(p0: [[s0(p0: [[212.0], [213.0], [214.0]], p1: [[215.0]])], [s0(p0: [[216.0], [217.0], [218.0]], p1: [[219.0]])], [s0(p0: [[220.0], [221.0], [222.0]], p1: [[223.0]])]], p1: [s0(p0: [[224.0], [225.0], [226.0]], p1: [[227.0]]), s0(p0: [[228.0], [229.0], [230.0]], p1: [[231.0]])])]])]], p3: [[s0(p0: [[232.0], [233.0], [234.0]], p1: [[235.0]])], [s0(p0: [[236.0], [237.0], [238.0]], p1: [[239.0]])]], p4: s1(p0: [[s0(p0: [[240.0], [241.0], [242.0]], p1: [[243.0]])], [s0(p0: [[244.0], [245.0], [246.0]], p1: [[247.0]])], [s0(p0: [[248.0], [249.0], [250.0]], p1: [[251.0]])]], p1: [s0(p0: [[252.0], [253.0], [254.0]], p1: [[255.0]]), s0(p0: [[256.0], [257.0], [258.0]], p1: [[259.0]])]))), s12(p0: [s1(p0: [[s0(p0: [[260.0], [261.0], [262.0]], p1: [[263.0]])], [s0(p0: [[264.0], [265.0], [266.0]], p1: [[267.0]])], [s0(p0: [[268.0], [269.0], [270.0]], p1: [[271.0]])]], p1: [s0(p0: [[272.0], [273.0], [274.0]], p1: [[275.0]]), s0(p0: [[276.0], [277.0], [278.0]], p1: [[279.0]])]), s1(p0: [[s0(p0: [[280.0], [281.0], [282.0]], p1: [[283.0]])], [s0(p0: [[284.0], [285.0], [286.0]], p1: [[287.0]])], [s0(p0: [[288.0], [289.0], [290.0]], p1: [[291.0]])]], p1: [s0(p0: [[292.0], [293.0], [294.0]], p1: [[295.0]]), s0(p0: [[296.0], [297.0], [298.0]], p1: [[299.0]])])], p1: s6(p0: [300.0, 301.0], p1: [s0(p0: [[302.0], [303.0], [304.0]], p1: [[305.0]]), s0(p0: [[306.0], [307.0], [308.0]], p1: [[309.0]]), s0(p0: [[310.0], [311.0], [312.0]], p1: [[313.0]])], p2: [[s2(p0: [s0(p0: [[314.0], [315.0], [316.0]], p1: [[317.0]]), s0(p0: [[318.0], [319.0], [320.0]], p1: [[321.0]])], p1: [[s1(p0: [[s0(p0: [[322.0], [323.0], [324.0]], p1: [[325.0]])], [s0(p0: [[326.0], [327.0], [328.0]], p1: [[329.0]])], [s0(p0: [[330.0], [331.0], [332.0]], p1: [[333.0]])]], p1: [s0(p0: [[334.0], [335.0], [336.0]], p1: [[337.0]]), s0(p0: [[338.0], [339.0], [340.0]], p1: [[341.0]])])], [s1(p0: [[s0(p0: [[342.0], [343.0], [344.0]], p1: [[345.0]])], [s0(p0: [[346.0], [347.0], [348.0]], p1: [[349.0]])], [s0(p0: [[350.0], [351.0], [352.0]], p1: [[353.0]])]], p1: [s0(p0: [[354.0], [355.0], [356.0]], p1: [[357.0]]), s0(p0: [[358.0], [359.0], [360.0]], p1: [[361.0]])])]])]], p3: [[s0(p0: [[362.0], [363.0], [364.0]], p1: [[365.0]])], [s0(p0: [[366.0], [367.0], [368.0]], p1: [[369.0]])]], p4: s1(p0: [[s0(p0: [[370.0], [371.0], [372.0]], p1: [[373.0]])], [s0(p0: [[374.0], [375.0], [376.0]], p1: [[377.0]])], [s0(p0: [[378.0], [379.0], [380.0]], p1: [[381.0]])]], p1: [s0(p0: [[382.0], [383.0], [384.0]], p1: [[385.0]]), s0(p0: [[386.0], [387.0], [388.0]], p1: [[389.0]])])))]
    let v1: Double = 390.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 390.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
