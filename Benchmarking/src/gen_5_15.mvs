  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
    var p3: [Float]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  let f10: ([s0]) -> [s0] = (v0: [s0]) -> [s0] {
    let v4: s0 = v0[1] in
    var v6: [s0] = v0 in
    v6[2] = v4 in
    v6
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    let v4: [s0] = v0.p0 in
    let v10: s0 = v4[1] in
    let v16: s1 = s1(v4, v10) in
    let v15: [s0] = v16.p0 in
    let v49: [s0] = f10(v15) in
    let v30: s0 = v49[1] in
    let v34: [[Float]] = v30.p1 in
    let v36: [Float] = v34[0] in
    var v48: [Float] = v36 in
    let v59: Float = v48[0] in
    v59
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]], [[5.0], [6.0]], [7.0, 8.0, 9.0]), s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]], [[15.0], [16.0]], [17.0, 18.0, 19.0]), s0([[20.0], [21.0], [22.0]], [[23.0], [24.0]], [[25.0], [26.0]], [27.0, 28.0, 29.0])], s0([[30.0], [31.0], [32.0]], [[33.0], [34.0]], [[35.0], [36.0]], [37.0, 38.0, 39.0])) in
    let v1: Float = 40.0 in
    let initialResult: Float = 40.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()