  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: s0
  } in
  struct s3 {
    var p0: [s0]
    var p1: [s1]
  } in
  struct s4 {
    var p0: [s1]
    var p1: [[s0]]
  } in
  struct s7 {
    var p0: s3
    var p1: s4
  } in
  struct s8 {
    var p0: s2
    var p1: s2
  } in
  struct s9 {
    var p0: [[s0]]
    var p1: s3
  } in
  let f8: (s2) -> s2 = (v0: s2) -> s2 {
    var v6: s2 = v0 in
    let v5: s0 = v6.p1 in
    let v3: [s0] = v6.p0 in
    var v7: [s0] = v3 in
    var v4: s2 = v0 in
    let v12: s2 = s2(v3, v5) in
    var v2: s0 = v5 in
    v4 = v6 in
    let v11: s0 = v3[0] in
    var v15: s0 = v2 in
    v4.p1 = v5 in
    let v10: s0 = v7[0] in
    let v9: s0 = v3[1] in
    let v18: s0 = v4.p1 in
    let v21: [[Float]] = v11.p1 in
    v4.p1 = v2 in
    v6.p1 = v10 in
    var v13: s2 = v6 in
    v2 = v11 in
    var v27: [s0] = v7 in
    v4.p1 = v18 in
    var v16: s0 = v10 in
    let v30: [[Float]] = v2.p1 in
    let v90: [[Float]] = v10.p0 in
    v7[1] = v15 in
    let v67: s0 = s0(v90, v21) in
    v6.p1 = v11 in
    var v86: s2 = v6 in
    let v44: s0 = v12.p1 in
    let v40: [Float] = v30[0] in
    let v50: [[Float]] = v18.p1 in
    v6 = v86 in
    let v64: [s0] = v13.p0 in
    let v71: [[Float]] = v9.p1 in
    v7[1] = v44 in
    let v82: [s0] = v12.p0 in
    v6.p0 = v27 in
    let v52: s0 = v64[0] in
    v16.p1 = v50 in
    v6.p0 = v82 in
    v15.p0 = v71 in
    var v47: [[Float]] = v90 in
    let v73: [[Float]] = v52.p0 in
    v47[1] = v40 in
    let v53: [[Float]] = v16.p1 in
    v4 = v86 in
    v27[0] = v67 in
    v2.p1 = v47 in
    var v144: [s0] = v7 in
    let v216: [Float] = v73[1] in
    v2.p0 = v53 in
    v16.p1 = v30 in
    v47[0] = v216 in
    v15.p0 = v30 in
    v15.p1 = v50 in
    v15.p1 = v73 in
    v86.p0 = v144 in
    v12
  } in
  let noinline_f0: (s9, s2, s7, Float) -> Float = (v0: s9, v1: s2, v2: s7, v3: Float) -> Float {
    let v10: s2 = f8(v1) in
    let v16: s8 = s8(v1, v10) in
    let v22: s2 = v16.p1 in
    let v220: [s0] = v22.p0 in
    let v67: s0 = v220[0] in
    let v53: [[Float]] = v67.p0 in
    let v79: [Float] = v53[1] in
    var v206: [Float] = v79 in
    let v231: Float = v206[0] in
    v231
  } in
  fun loop(i: Int, v0: s9, v1: s2, v2: s7, v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s9 = s9([[s0([[0.0], [1.0]], [[2.0], [3.0]])]], s3([s0([[4.0], [5.0]], [[6.0], [7.0]]), s0([[8.0], [9.0]], [[10.0], [11.0]])], [s1(s0([[12.0], [13.0]], [[14.0], [15.0]]), s0([[16.0], [17.0]], [[18.0], [19.0]])), s1(s0([[20.0], [21.0]], [[22.0], [23.0]]), s0([[24.0], [25.0]], [[26.0], [27.0]]))])) in
    let v1: s2 = s2([s0([[28.0], [29.0]], [[30.0], [31.0]]), s0([[32.0], [33.0]], [[34.0], [35.0]])], s0([[36.0], [37.0]], [[38.0], [39.0]])) in
    let v2: s7 = s7(s3([s0([[40.0], [41.0]], [[42.0], [43.0]]), s0([[44.0], [45.0]], [[46.0], [47.0]])], [s1(s0([[48.0], [49.0]], [[50.0], [51.0]]), s0([[52.0], [53.0]], [[54.0], [55.0]])), s1(s0([[56.0], [57.0]], [[58.0], [59.0]]), s0([[60.0], [61.0]], [[62.0], [63.0]]))]), s4([s1(s0([[64.0], [65.0]], [[66.0], [67.0]]), s0([[68.0], [69.0]], [[70.0], [71.0]]))], [[s0([[72.0], [73.0]], [[74.0], [75.0]])], [s0([[76.0], [77.0]], [[78.0], [79.0]])]])) in
    let v3: Float = 80.0 in
    let initialResult: Float = 80.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()