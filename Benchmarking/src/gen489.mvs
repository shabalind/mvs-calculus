  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: Float
  } in
  struct s2 {
    var p0: [s0]
    var p1: [[s0]]
  } in
  struct s4 {
    var p0: s0
    var p1: [s1]
  } in
  struct s5 {
    var p0: [s2]
    var p1: s4
  } in
  let noinline_f0: (s4, s5, Float) -> Float = (v0: s4, v1: s5, v2: Float) -> Float {
    let v5: [s1] = v0.p1 in
    let v6: s0 = v0.p0 in
    let v10: s1 = v5[1] in
    var v16: s1 = v10 in
    let v9: [[Float]] = v6.p0 in
    let v28: Float = v16.p1 in
    var v31: Float = v28 in
    let v41: [Float] = v9[0] in
    let v80: [Float] = v9[0] in
    v16.p1 = v31 in
    let v69: Float = v80[0] in
    let v214: Float = v41[0] in
    let v91: Float = v28 - v69 in
    let v94: Float = v214 / v91 in
    v94
  } in
  fun loop(i: Int, v0: s4, v1: s5, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s4 = s4(s0([[0.0]], [[1.0]]), [s1([[s0([[2.0]], [[3.0]])]], 4.0), s1([[s0([[5.0]], [[6.0]])]], 7.0)]) in
    let v1: s5 = s5([s2([s0([[8.0]], [[9.0]]), s0([[10.0]], [[11.0]])], [[s0([[12.0]], [[13.0]])]])], s4(s0([[14.0]], [[15.0]]), [s1([[s0([[16.0]], [[17.0]])]], 18.0), s1([[s0([[19.0]], [[20.0]])]], 21.0)])) in
    let v2: Float = 22.0 in
    let initialResult: Float = 22.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()