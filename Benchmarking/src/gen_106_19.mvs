  let noinline_f0: ([[Float]], [Float], Float) -> Float = (v0: [[Float]], v1: [Float], v2: Float) -> Float {
    let v9: [Float] = v0[1] in
    var v4: [Float] = v1 in
    let v3: Float = v9[0] in
    let v11: Float = v2 * v3 in
    let v8: [Float] = v0[0] in
    var v13: Float = v2 in
    let v18: Float = v3 - v11 in
    var v20: [Float] = v1 in
    v4[0] = v3 in
    v20[2] = v11 in
    var v23: Float = v18 in
    let v45: Float = v20[0] in
    let v24: Float = v1[2] in
    v20[0] = v24 in
    let v46: Float = v8[0] in
    let v34: [[Float]] = [v1, v20, v20, v20, v4] in
    var v72: [[Float]] = v34 in
    var v43: Float = v23 in
    let v44: Float = v13 - v45 in
    v72[3] = v1 in
    v20[2] = v13 in
    v20[0] = v46 in
    let v57: [Float] = v72[0] in
    var v48: Float = v11 in
    var v81: Float = v48 in
    v4[2] = v11 in
    v20[0] = v81 in
    v4[1] = v44 in
    v20[1] = v43 in
    let v161: Float = v57[2] in
    v161
  } in
  fun loop(i: Int, v0: [[Float]], v1: [Float], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0], [1.0], [2.0]] in
    let v1: [Float] = [3.0, 4.0, 5.0] in
    let v2: Float = 6.0 in
    let initialResult: Float = 6.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()