  let noinline_f0: ([[Float]], [[Float]], Float) -> Float = (v0: [[Float]], v1: [[Float]], v2: Float) -> Float {
    var v4: Float = v2 in
    var v5: Float = v4 in
    v4 = v2 in
    let v22: Float = v4 + v5 in
    let v36: Float = v5 - v4 in
    v5 = v4 in
    var v27: Float = v22 in
    var v83: Float = v2 in
    let v34: Float = v27 - v83 in
    var v62: Float = v34 in
    v62 = v36 in
    v62
  } in
  fun loop(i: Int, v0: [[Float]], v1: [[Float]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0], [1.0]] in
    let v1: [[Float]] = [[2.0]] in
    let v2: Float = 3.0 in
    let initialResult: Float = 3.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()