  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s5 {
    var p0: s0
    var p1: s1
  } in
  let f62: (Float) -> Float = (v0: Float) -> Float {
    var v1: Float = v0 in
    var v4: Float = v1 in
    var v10: Float = v1 in
    var v15: Float = v4 in
    var v20: Float = v10 in
    var v11: Float = v0 in
    var v12: Float = v11 in
    let v30: [Float] = [v20, v12, v15] in
    v4 = v0 in
    let v21: Float = v30[1] in
    v21
  } in
  let noinline_f0: ([s0], s5, Float) -> Float = (v0: [s0], v1: s5, v2: Float) -> Float {
    var v5: Float = v2 in
    let v13: Float = v5 - v2 in
    var v8: Float = v5 in
    v5 = v8 in
    let v41: Float = v13 * v8 in
    let v81: Float = v41 + v8 in
    let v143: Float = f62(v81) in
    v5 = v81 in
    v143
  } in
  fun loop(i: Int, v0: [s0], v1: s5, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0]], [[2.0], [3.0]])] in
    let v1: s5 = s5(s0([[4.0], [5.0]], [[6.0], [7.0]]), s1([s0([[8.0], [9.0]], [[10.0], [11.0]]), s0([[12.0], [13.0]], [[14.0], [15.0]])], s0([[16.0], [17.0]], [[18.0], [19.0]]))) in
    let v2: Float = 20.0 in
    let initialResult: Float = 20.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()