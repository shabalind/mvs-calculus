  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
    var p3: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  let noinline_f0: ([s0], [s1], Float) -> Float = (v0: [s0], v1: [s1], v2: Float) -> Float {
    var v3: Float = v2 in
    let v8: s0 = v0[0] in
    let v4: [s0] = [v8] in
    let v6: s0 = v0[0] in
    var v16: Float = v3 in
    let v18: s0 = v4[0] in
    var v12: [s0] = v4 in
    v12[0] = v18 in
    let v45: s0 = v12[0] in
    let v20: [[Float]] = v45.p1 in
    let v26: [Float] = v20[2] in
    let v36: Float = v26[0] in
    v12[0] = v6 in
    let v88: Float = v36 / v16 in
    v88
  } in
  fun loop(i: Int, v0: [s0], v1: [s1], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0]], [[1.0], [2.0], [3.0]], [[4.0], [5.0]], [[6.0]]), s0([[7.0]], [[8.0], [9.0], [10.0]], [[11.0], [12.0]], [[13.0]])] in
    let v1: [s1] = [s1(s0([[14.0]], [[15.0], [16.0], [17.0]], [[18.0], [19.0]], [[20.0]]), s0([[21.0]], [[22.0], [23.0], [24.0]], [[25.0], [26.0]], [[27.0]])), s1(s0([[28.0]], [[29.0], [30.0], [31.0]], [[32.0], [33.0]], [[34.0]]), s0([[35.0]], [[36.0], [37.0], [38.0]], [[39.0], [40.0]], [[41.0]]))] in
    let v2: Float = 42.0 in
    let initialResult: Float = 42.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()