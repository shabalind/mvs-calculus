  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: s0
    var p1: s1
  } in
  struct s4 {
    var p0: [s0]
    var p1: s2
  } in
  let f49: (Float) -> Float = (v0: Float) -> Float {
    let v3: Float = v0 + v0 in
    var v5: Float = v3 in
    var v4: Float = v3 in
    v4 = v5 in
    var v7: Float = v0 in
    v4 = v5 in
    let v10: [Float] = [v4, v7, v7] in
    var v20: [Float] = v10 in
    let v32: Float = v20[2] in
    v32
  } in
  let noinline_f0: ([s4], Float) -> Float = (v0: [s4], v1: Float) -> Float {
    var v2: Float = v1 in
    let v20: Float = f49(v2) in
    let v17: Float = v20 / v1 in
    v17
  } in
  fun loop(i: Int, v0: [s4], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s4] = [s4([s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]], [[5.0]])], s2(s0([[6.0], [7.0]], [[8.0], [9.0], [10.0]], [[11.0]]), s1(s0([[12.0], [13.0]], [[14.0], [15.0], [16.0]], [[17.0]]), [[s0([[18.0], [19.0]], [[20.0], [21.0], [22.0]], [[23.0]])], [s0([[24.0], [25.0]], [[26.0], [27.0], [28.0]], [[29.0]])]])))] in
    let v1: Float = 30.0 in
    let initialResult: Float = 30.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()