  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: Float
    var p3: [[Float]]
    var p4: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [[s0]]
    var p1: s1
  } in
  let noinline_f0: ([[s2]], Float) -> Float = (v0: [[s2]], v1: Float) -> Float {
    var v8: [[s2]] = v0 in
    var v4: Float = v1 in
    var v5: [[s2]] = v0 in
    var v6: Float = v4 in
    let v2: [s2] = v0[0] in
    v5[0] = v2 in
    v5[0] = v2 in
    let v3: [s2] = v0[0] in
    let v9: [s2] = v8[0] in
    let v10: s2 = v9[0] in
    let v17: s1 = v10.p1 in
    let v12: s0 = v17.p1 in
    let v26: [[Float]] = v12.p1 in
    var v20: Float = v6 in
    v5[0] = v9 in
    let v21: s0 = v17.p0 in
    var v58: s0 = v12 in
    v58.p1 = v26 in
    let v65: [[Float]] = v21.p3 in
    let v36: [[Float]] = v58.p0 in
    let v45: [Float] = v36[0] in
    var v63: [Float] = v45 in
    let v75: Float = v1 + v20 in
    var v54: [[s2]] = v5 in
    v5[0] = v3 in
    v58.p2 = v75 in
    let v39: [s2] = v54[0] in
    v5[0] = v3 in
    v58.p2 = v20 in
    let v126: Float = v63[0] in
    v8[0] = v39 in
    v58.p3 = v65 in
    v5 = v0 in
    v126
  } in
  fun loop(i: Int, v0: [[s2]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s2]] = [[s2([[s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]], 5.0, [[6.0], [7.0], [8.0]], [[9.0], [10.0], [11.0]])]], s1(s0([[12.0], [13.0], [14.0]], [[15.0], [16.0]], 17.0, [[18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0]]), s0([[24.0], [25.0], [26.0]], [[27.0], [28.0]], 29.0, [[30.0], [31.0], [32.0]], [[33.0], [34.0], [35.0]])))]] in
    let v1: Float = 36.0 in
    let initialResult: Float = 36.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()