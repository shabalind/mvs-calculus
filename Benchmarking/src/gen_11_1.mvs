  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s2 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s3 {
    var p0: [s2]
    var p1: [s2]
  } in
  let f77: ([s0]) -> [s0] = (v0: [s0]) -> [s0] {
    let v6: s0 = v0[1] in
    var v3: s0 = v6 in
    let v4: s0 = v0[0] in
    v3 = v6 in
    var v7: [s0] = v0 in
    let v5: [s0] = [v6, v4, v4, v3, v6] in
    let v9: s0 = v5[0] in
    let v1: s0 = v5[0] in
    let v2: [[Float]] = v4.p1 in
    let v17: [[Float]] = v9.p0 in
    v3.p0 = v17 in
    v7[1] = v1 in
    v3 = v9 in
    v3.p1 = v2 in
    v3.p1 = v2 in
    v7[1] = v6 in
    v7
  } in
  let f64: (s0) -> s0 = (v0: s0) -> s0 {
    let v4: [[Float]] = v0.p1 in
    let v8: [[Float]] = v0.p0 in
    var v3: [[Float]] = v8 in
    let v7: [Float] = v4[1] in
    var v6: [Float] = v7 in
    let v1: [Float] = v3[0] in
    v3 = v8 in
    v6 = v1 in
    var v12: [[Float]] = v8 in
    v3[0] = v7 in
    let v15: [Float] = v12[0] in
    v3[0] = v15 in
    let v21: [[Float]] = v0.p1 in
    var v13: s0 = v0 in
    let v23: Float = v7[0] in
    v6[0] = v23 in
    let v19: [Float] = v21[0] in
    v6[0] = v23 in
    var v25: s0 = v13 in
    let v10: s0 = s0(v3, v21) in
    v3[0] = v6 in
    v3[0] = v7 in
    v3[0] = v15 in
    let v28: [s0] = [v0, v10, v0] in
    let v34: [s0] = f77(v28) in
    let v61: [[Float]] = v25.p0 in
    let v56: [Float] = v61[0] in
    var v50: [s0] = v34 in
    let v52: s0 = v50[1] in
    v12[0] = v56 in
    v3[0] = v19 in
    v52
  } in
  let noinline_f0: (s3, Float) -> Float = (v0: s3, v1: Float) -> Float {
    let v2: [s2] = v0.p0 in
    let v3: s2 = v2[0] in
    let v8: [s0] = v3.p0 in
    let v20: s0 = v8[1] in
    let v27: s0 = f64(v20) in
    let v52: [[Float]] = v27.p1 in
    var v64: [[Float]] = v52 in
    let v95: [Float] = v64[1] in
    let v100: Float = v95[0] in
    v100
  } in
  fun loop(i: Int, v0: s3, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3([s2([s0([[0.0]], [[1.0], [2.0]]), s0([[3.0]], [[4.0], [5.0]]), s0([[6.0]], [[7.0], [8.0]])], [s0([[9.0]], [[10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0]]), s0([[15.0]], [[16.0], [17.0]])])], [s2([s0([[18.0]], [[19.0], [20.0]]), s0([[21.0]], [[22.0], [23.0]]), s0([[24.0]], [[25.0], [26.0]])], [s0([[27.0]], [[28.0], [29.0]]), s0([[30.0]], [[31.0], [32.0]]), s0([[33.0]], [[34.0], [35.0]])])]) in
    let v1: Float = 36.0 in
    let initialResult: Float = 36.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()