  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: Double
    var p1: [[s0]]
  }
  struct s2 {
    var p0: s0
    var p1: s0
  }
  struct s3 {
    var p0: s1
    var p1: [s1]
  }
  struct s4 {
    var p0: s0
  }
  struct s5 {
    var p0: s4
    var p1: [s1]
  }
  struct s8 {
    var p0: [[s1]]
    var p1: s3
  }
  func f6(_ v0: s0) -> s0 {
    let v6: [[Double]] = v0.p1
    var v8: s0 = v0
    let v9: [[Double]] = v8.p1
    let v14: s2 = s2(p0: v8, p1: v8)
    let v19: s0 = v14.p0
    v8.p0 = v9
    var v24: [[Double]] = v9
    v8.p0 = v9
    let v18: [Double] = v24[2]
    var v10: s0 = v19
    var v23: [[Double]] = v6
    var v31: s0 = v10
    v31.p0 = v23
    v23[1] = v18
    v10.p1 = v23
    let v96: [Double] = v24[2]
    v23[1] = v96
    return v31
  }
  @inline(never)
  func f0(_ v0: [s8], _ v1: [s5], _ v2: s0, _ v3: Double) -> Double {
    let v8: s8 = v0[1]
    let v9: Double = v3 - v3
    let v7: s3 = v8.p1
    let v10: s0 = f6(v2)
    let v23: [[Double]] = v10.p0
    let v17: [Double] = v23[1]
    let v53: s1 = v7.p0
    var v24: s1 = v53
    v24.p0 = v9
    let v50: s1 = v7.p0
    v24.p0 = v3
    v24.p0 = v3
    let v72: Double = v17[0]
    v24.p0 = v9
    v24 = v50
    let v97: Double = v24.p0
    v24.p0 = v72
    return v97
  }
  func benchmark() {
    let v0: [s8] = [s8(p0: [[s1(p0: 0.0, p1: [[s0(p0: [[1.0], [2.0], [3.0]], p1: [[4.0], [5.0], [6.0]])]])], [s1(p0: 7.0, p1: [[s0(p0: [[8.0], [9.0], [10.0]], p1: [[11.0], [12.0], [13.0]])]])], [s1(p0: 14.0, p1: [[s0(p0: [[15.0], [16.0], [17.0]], p1: [[18.0], [19.0], [20.0]])]])]], p1: s3(p0: s1(p0: 21.0, p1: [[s0(p0: [[22.0], [23.0], [24.0]], p1: [[25.0], [26.0], [27.0]])]]), p1: [s1(p0: 28.0, p1: [[s0(p0: [[29.0], [30.0], [31.0]], p1: [[32.0], [33.0], [34.0]])]]), s1(p0: 35.0, p1: [[s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0], [40.0], [41.0]])]])])), s8(p0: [[s1(p0: 42.0, p1: [[s0(p0: [[43.0], [44.0], [45.0]], p1: [[46.0], [47.0], [48.0]])]])], [s1(p0: 49.0, p1: [[s0(p0: [[50.0], [51.0], [52.0]], p1: [[53.0], [54.0], [55.0]])]])], [s1(p0: 56.0, p1: [[s0(p0: [[57.0], [58.0], [59.0]], p1: [[60.0], [61.0], [62.0]])]])]], p1: s3(p0: s1(p0: 63.0, p1: [[s0(p0: [[64.0], [65.0], [66.0]], p1: [[67.0], [68.0], [69.0]])]]), p1: [s1(p0: 70.0, p1: [[s0(p0: [[71.0], [72.0], [73.0]], p1: [[74.0], [75.0], [76.0]])]]), s1(p0: 77.0, p1: [[s0(p0: [[78.0], [79.0], [80.0]], p1: [[81.0], [82.0], [83.0]])]])])), s8(p0: [[s1(p0: 84.0, p1: [[s0(p0: [[85.0], [86.0], [87.0]], p1: [[88.0], [89.0], [90.0]])]])], [s1(p0: 91.0, p1: [[s0(p0: [[92.0], [93.0], [94.0]], p1: [[95.0], [96.0], [97.0]])]])], [s1(p0: 98.0, p1: [[s0(p0: [[99.0], [100.0], [101.0]], p1: [[102.0], [103.0], [104.0]])]])]], p1: s3(p0: s1(p0: 105.0, p1: [[s0(p0: [[106.0], [107.0], [108.0]], p1: [[109.0], [110.0], [111.0]])]]), p1: [s1(p0: 112.0, p1: [[s0(p0: [[113.0], [114.0], [115.0]], p1: [[116.0], [117.0], [118.0]])]]), s1(p0: 119.0, p1: [[s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0], [124.0], [125.0]])]])]))]
    let v1: [s5] = [s5(p0: s4(p0: s0(p0: [[126.0], [127.0], [128.0]], p1: [[129.0], [130.0], [131.0]])), p1: [s1(p0: 132.0, p1: [[s0(p0: [[133.0], [134.0], [135.0]], p1: [[136.0], [137.0], [138.0]])]])])]
    let v2: s0 = s0(p0: [[139.0], [140.0], [141.0]], p1: [[142.0], [143.0], [144.0]])
    let v3: Double = 145.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 145.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
