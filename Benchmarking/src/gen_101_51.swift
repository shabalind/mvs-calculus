  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: s1
    var p1: s1
  }
  struct s3 {
    var p0: s2
    var p1: [[s1]]
  }
  struct s4 {
    var p0: [s1]
    var p1: Double
  }
  struct s5 {
    var p0: s0
    var p1: [[s1]]
  }
  func f36(_ v0: s4) -> s4 {
    var v12: s4 = v0
    return v12
  }
  @inline(never)
  func f0(_ v0: s4, _ v1: s3, _ v2: [s3], _ v3: [s5], _ v4: [[s1]], _ v5: Double) -> Double {
    let v10: Double = v0.p1
    var v41: s4 = v0
    v41.p1 = v10
    v41.p1 = v10
    let v27: [s1] = v0.p0
    let v48: [[s1]] = [v27, v27, v27, v27, v27]
    v41.p1 = v5
    let v32: s4 = f36(v41)
    v41.p1 = v10
    let v66: s4 = f36(v32)
    v41.p0 = v27
    let v44: [s1] = v48[3]
    let v71: Double = v66.p1
    v41.p0 = v44
    v41.p1 = v10
    return v71
  }
  func benchmark() {
    let v0: s4 = s4(p0: [s1(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0]]), p1: [s0(p0: [[3.0], [4.0]], p1: [[5.0]])]), s1(p0: s0(p0: [[6.0], [7.0]], p1: [[8.0]]), p1: [s0(p0: [[9.0], [10.0]], p1: [[11.0]])]), s1(p0: s0(p0: [[12.0], [13.0]], p1: [[14.0]]), p1: [s0(p0: [[15.0], [16.0]], p1: [[17.0]])])], p1: 18.0)
    let v1: s3 = s3(p0: s2(p0: s1(p0: s0(p0: [[19.0], [20.0]], p1: [[21.0]]), p1: [s0(p0: [[22.0], [23.0]], p1: [[24.0]])]), p1: s1(p0: s0(p0: [[25.0], [26.0]], p1: [[27.0]]), p1: [s0(p0: [[28.0], [29.0]], p1: [[30.0]])])), p1: [[s1(p0: s0(p0: [[31.0], [32.0]], p1: [[33.0]]), p1: [s0(p0: [[34.0], [35.0]], p1: [[36.0]])])], [s1(p0: s0(p0: [[37.0], [38.0]], p1: [[39.0]]), p1: [s0(p0: [[40.0], [41.0]], p1: [[42.0]])])], [s1(p0: s0(p0: [[43.0], [44.0]], p1: [[45.0]]), p1: [s0(p0: [[46.0], [47.0]], p1: [[48.0]])])]])
    let v2: [s3] = [s3(p0: s2(p0: s1(p0: s0(p0: [[49.0], [50.0]], p1: [[51.0]]), p1: [s0(p0: [[52.0], [53.0]], p1: [[54.0]])]), p1: s1(p0: s0(p0: [[55.0], [56.0]], p1: [[57.0]]), p1: [s0(p0: [[58.0], [59.0]], p1: [[60.0]])])), p1: [[s1(p0: s0(p0: [[61.0], [62.0]], p1: [[63.0]]), p1: [s0(p0: [[64.0], [65.0]], p1: [[66.0]])])], [s1(p0: s0(p0: [[67.0], [68.0]], p1: [[69.0]]), p1: [s0(p0: [[70.0], [71.0]], p1: [[72.0]])])], [s1(p0: s0(p0: [[73.0], [74.0]], p1: [[75.0]]), p1: [s0(p0: [[76.0], [77.0]], p1: [[78.0]])])]])]
    let v3: [s5] = [s5(p0: s0(p0: [[79.0], [80.0]], p1: [[81.0]]), p1: [[s1(p0: s0(p0: [[82.0], [83.0]], p1: [[84.0]]), p1: [s0(p0: [[85.0], [86.0]], p1: [[87.0]])])], [s1(p0: s0(p0: [[88.0], [89.0]], p1: [[90.0]]), p1: [s0(p0: [[91.0], [92.0]], p1: [[93.0]])])]]), s5(p0: s0(p0: [[94.0], [95.0]], p1: [[96.0]]), p1: [[s1(p0: s0(p0: [[97.0], [98.0]], p1: [[99.0]]), p1: [s0(p0: [[100.0], [101.0]], p1: [[102.0]])])], [s1(p0: s0(p0: [[103.0], [104.0]], p1: [[105.0]]), p1: [s0(p0: [[106.0], [107.0]], p1: [[108.0]])])]])]
    let v4: [[s1]] = [[s1(p0: s0(p0: [[109.0], [110.0]], p1: [[111.0]]), p1: [s0(p0: [[112.0], [113.0]], p1: [[114.0]])])], [s1(p0: s0(p0: [[115.0], [116.0]], p1: [[117.0]]), p1: [s0(p0: [[118.0], [119.0]], p1: [[120.0]])])], [s1(p0: s0(p0: [[121.0], [122.0]], p1: [[123.0]]), p1: [s0(p0: [[124.0], [125.0]], p1: [[126.0]])])]]
    let v5: Double = 127.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 127.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4, v5)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
