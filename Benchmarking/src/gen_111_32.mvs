  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s2 {
    var p0: s0
    var p1: s0
    var p2: [s0]
  } in
  let noinline_f0: ([[s2]], Float) -> Float = (v0: [[s2]], v1: Float) -> Float {
    let v4: [s2] = v0[0] in
    let v7: s2 = v4[0] in
    let v13: s0 = v7.p0 in
    let v35: [[Float]] = v13.p0 in
    let v30: [Float] = v35[0] in
    let v32: Float = v1 - v1 in
    var v29: [Float] = v30 in
    v29[0] = v32 in
    let v47: Float = v29[0] in
    var v55: Float = v47 in
    v55
  } in
  fun loop(i: Int, v0: [[s2]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s2]] = [[s2(s0([[0.0], [1.0], [2.0]], [[3.0]]), s0([[4.0], [5.0], [6.0]], [[7.0]]), [s0([[8.0], [9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0], [14.0]], [[15.0]])])]] in
    let v1: Float = 16.0 in
    let initialResult: Float = 16.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()