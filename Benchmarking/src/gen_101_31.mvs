  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s7 {
    var p0: [s1]
    var p1: [[s1]]
  } in
  let f88: ([s0]) -> [s0] = (v0: [s0]) -> [s0] {
    var v42: [s0] = v0 in
    let v44: s0 = v42[0] in
    v42[0] = v44 in
    v42
  } in
  let noinline_f0: ([[s0]], s7, Float) -> Float = (v0: [[s0]], v1: s7, v2: Float) -> Float {
    let v7: [s0] = v0[1] in
    let v22: [s0] = f88(v7) in
    let v59: s0 = v22[0] in
    let v160: [[Float]] = v59.p0 in
    let v45: [Float] = v160[2] in
    let v85: Float = v45[0] in
    var v98: Float = v85 in
    v98
  } in
  fun loop(i: Int, v0: [[s0]], v1: s7, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s0]] = [[s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]])], [s0([[6.0], [7.0], [8.0]], [[9.0], [10.0], [11.0]])]] in
    let v1: s7 = s7([s1(s0([[12.0], [13.0], [14.0]], [[15.0], [16.0], [17.0]]), s0([[18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0]]))], [[s1(s0([[24.0], [25.0], [26.0]], [[27.0], [28.0], [29.0]]), s0([[30.0], [31.0], [32.0]], [[33.0], [34.0], [35.0]]))]]) in
    let v2: Float = 36.0 in
    let initialResult: Float = 36.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()