  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s3 {
    var p0: [[s0]]
    var p1: [s0]
  }
  struct s4 {
    var p0: s3
  }
  struct s5 {
    var p0: [Double]
    var p1: s4
  }
  @inline(never)
  func f0(_ v0: [s5], _ v1: [[s0]], _ v2: [[s3]], _ v3: Double) -> Double {
    var v5: [s5] = v0
    v5 = v0
    let v22: s5 = v5[0]
    let v13: [Double] = v22.p0
    var v18: s5 = v22
    var v19: [Double] = v13
    let v41: Double = v13[1]
    v18.p0 = v13
    v18.p0 = v13
    v19[1] = v41
    var v43: s5 = v18
    v5[0] = v43
    var v96: [Double] = v19
    v18.p0 = v96
    v5 = v0
    let v145: s4 = v18.p1
    v43.p1 = v145
    v43.p1 = v145
    let v48: [Double] = v43.p0
    v5[0] = v43
    v18.p1 = v145
    let v71: Double = v48[0]
    v19[2] = v41
    return v71
  }
  func benchmark() {
    let v0: [s5] = [s5(p0: [0.0, 1.0, 2.0], p1: s4(p0: s3(p0: [[s0(p0: [[3.0], [4.0]], p1: [[5.0], [6.0], [7.0]])], [s0(p0: [[8.0], [9.0]], p1: [[10.0], [11.0], [12.0]])]], p1: [s0(p0: [[13.0], [14.0]], p1: [[15.0], [16.0], [17.0]])]))), s5(p0: [18.0, 19.0, 20.0], p1: s4(p0: s3(p0: [[s0(p0: [[21.0], [22.0]], p1: [[23.0], [24.0], [25.0]])], [s0(p0: [[26.0], [27.0]], p1: [[28.0], [29.0], [30.0]])]], p1: [s0(p0: [[31.0], [32.0]], p1: [[33.0], [34.0], [35.0]])])))]
    let v1: [[s0]] = [[s0(p0: [[36.0], [37.0]], p1: [[38.0], [39.0], [40.0]])], [s0(p0: [[41.0], [42.0]], p1: [[43.0], [44.0], [45.0]])], [s0(p0: [[46.0], [47.0]], p1: [[48.0], [49.0], [50.0]])]]
    let v2: [[s3]] = [[s3(p0: [[s0(p0: [[51.0], [52.0]], p1: [[53.0], [54.0], [55.0]])], [s0(p0: [[56.0], [57.0]], p1: [[58.0], [59.0], [60.0]])]], p1: [s0(p0: [[61.0], [62.0]], p1: [[63.0], [64.0], [65.0]])])], [s3(p0: [[s0(p0: [[66.0], [67.0]], p1: [[68.0], [69.0], [70.0]])], [s0(p0: [[71.0], [72.0]], p1: [[73.0], [74.0], [75.0]])]], p1: [s0(p0: [[76.0], [77.0]], p1: [[78.0], [79.0], [80.0]])])], [s3(p0: [[s0(p0: [[81.0], [82.0]], p1: [[83.0], [84.0], [85.0]])], [s0(p0: [[86.0], [87.0]], p1: [[88.0], [89.0], [90.0]])]], p1: [s0(p0: [[91.0], [92.0]], p1: [[93.0], [94.0], [95.0]])])]]
    let v3: Double = 96.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 96.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
