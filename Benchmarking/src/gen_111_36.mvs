  struct s0 {
    var p0: [[Float]]
    var p1: [Float]
  } in
  struct s1 {
    var p0: s0
    var p1: [Float]
  } in
  struct s2 {
    var p0: s1
    var p1: [s0]
  } in
  let noinline_f0: (s0, s2, Float) -> Float = (v0: s0, v1: s2, v2: Float) -> Float {
    let v9: [s0] = v1.p1 in
    let v13: s0 = v9[0] in
    let v27: [[Float]] = v13.p0 in
    let v14: [Float] = v27[0] in
    let v28: Float = v14[0] in
    let v77: [[Float]] = v13.p0 in
    let v167: [Float] = v77[2] in
    var v108: Float = v28 in
    let v72: Float = v167[0] in
    let v252: Float = v108 / v72 in
    v252
  } in
  fun loop(i: Int, v0: s0, v1: s2, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0], [2.0]], [3.0, 4.0, 5.0]) in
    let v1: s2 = s2(s1(s0([[6.0], [7.0], [8.0]], [9.0, 10.0, 11.0]), [12.0, 13.0]), [s0([[14.0], [15.0], [16.0]], [17.0, 18.0, 19.0])]) in
    let v2: Float = 20.0 in
    let initialResult: Float = 20.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()