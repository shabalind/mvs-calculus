  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s2 {
    var p0: s0
    var p1: s0
  } in
  struct s4 {
    var p0: [[s1]]
    var p1: s0
  } in
  struct s6 {
    var p0: [s4]
    var p1: s2
  } in
  let noinline_f0: (s6, s4, Float) -> Float = (v0: s6, v1: s4, v2: Float) -> Float {
    let v5: Float = v2 - v2 in
    let v14: s0 = v1.p1 in
    let v39: [[Float]] = v14.p1 in
    let v35: [Float] = v39[0] in
    let v30: [Float] = v39[0] in
    var v45: [[Float]] = v39 in
    let v75: Float = v2 + v5 in
    let v98: [Float] = v45[0] in
    var v63: [Float] = v35 in
    let v101: Float = v98[0] in
    var v136: Float = v101 in
    v45[0] = v30 in
    let v78: Float = v63[0] in
    v63[0] = v136 in
    v63[0] = v75 in
    v78
  } in
  fun loop(i: Int, v0: s6, v1: s4, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s6 = s6([s4([[s1([s0([[0.0], [1.0], [2.0]], [[3.0]])], [s0([[4.0], [5.0], [6.0]], [[7.0]])])], [s1([s0([[8.0], [9.0], [10.0]], [[11.0]])], [s0([[12.0], [13.0], [14.0]], [[15.0]])])]], s0([[16.0], [17.0], [18.0]], [[19.0]])), s4([[s1([s0([[20.0], [21.0], [22.0]], [[23.0]])], [s0([[24.0], [25.0], [26.0]], [[27.0]])])], [s1([s0([[28.0], [29.0], [30.0]], [[31.0]])], [s0([[32.0], [33.0], [34.0]], [[35.0]])])]], s0([[36.0], [37.0], [38.0]], [[39.0]]))], s2(s0([[40.0], [41.0], [42.0]], [[43.0]]), s0([[44.0], [45.0], [46.0]], [[47.0]]))) in
    let v1: s4 = s4([[s1([s0([[48.0], [49.0], [50.0]], [[51.0]])], [s0([[52.0], [53.0], [54.0]], [[55.0]])])], [s1([s0([[56.0], [57.0], [58.0]], [[59.0]])], [s0([[60.0], [61.0], [62.0]], [[63.0]])])]], s0([[64.0], [65.0], [66.0]], [[67.0]])) in
    let v2: Float = 68.0 in
    let initialResult: Float = 68.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()