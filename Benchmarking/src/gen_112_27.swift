  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: Double
  }
  struct s2 {
    var p0: s1
    var p1: [s1]
  }
  struct s3 {
    var p0: s2
    var p1: s2
    var p2: [[Double]]
  }
  struct s4 {
    var p0: [s1]
    var p1: s1
  }
  struct s5 {
    var p0: s3
    var p1: s4
    var p2: [s4]
  }
  struct s6 {
    var p0: [s1]
    var p1: s5
  }
  struct s7 {
    var p0: s6
    var p1: [s3]
  }
  struct s9 {
    var p0: [s3]
    var p1: s0
  }
  struct s12 {
    var p0: s9
    var p1: s9
  }
  func f33(_ v0: Double) -> Double {
    var v6: Double = v0
    var v1: Double = v6
    var v4: Double = v0
    let v3: Double = v0 + v6
    let v2: Double = v6 - v3
    var v12: Double = v1
    let v7: Double = v2 + v12
    var v14: Double = v3
    var v16: Double = v1
    var v18: Double = v3
    let v33: [Double] = [v16, v4, v14, v7, v18]
    var v19: [Double] = v33
    var v20: [Double] = v19
    let v24: Double = v20[2]
    return v24
  }
  @inline(never)
  func f0(_ v0: s7, _ v1: [s12], _ v2: [s7], _ v3: Double) -> Double {
    let v40: Double = f33(v3)
    return v40
  }
  func benchmark() {
    let v0: s7 = s7(p0: s6(p0: [s1(p0: [s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0]])], p1: 5.0), s1(p0: [s0(p0: [[6.0], [7.0], [8.0]], p1: [[9.0], [10.0]])], p1: 11.0), s1(p0: [s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0], [16.0]])], p1: 17.0)], p1: s5(p0: s3(p0: s2(p0: s1(p0: [s0(p0: [[18.0], [19.0], [20.0]], p1: [[21.0], [22.0]])], p1: 23.0), p1: [s1(p0: [s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0], [28.0]])], p1: 29.0)]), p1: s2(p0: s1(p0: [s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0]])], p1: 35.0), p1: [s1(p0: [s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0], [40.0]])], p1: 41.0)]), p2: [[42.0], [43.0], [44.0]]), p1: s4(p0: [s1(p0: [s0(p0: [[45.0], [46.0], [47.0]], p1: [[48.0], [49.0]])], p1: 50.0)], p1: s1(p0: [s0(p0: [[51.0], [52.0], [53.0]], p1: [[54.0], [55.0]])], p1: 56.0)), p2: [s4(p0: [s1(p0: [s0(p0: [[57.0], [58.0], [59.0]], p1: [[60.0], [61.0]])], p1: 62.0)], p1: s1(p0: [s0(p0: [[63.0], [64.0], [65.0]], p1: [[66.0], [67.0]])], p1: 68.0))])), p1: [s3(p0: s2(p0: s1(p0: [s0(p0: [[69.0], [70.0], [71.0]], p1: [[72.0], [73.0]])], p1: 74.0), p1: [s1(p0: [s0(p0: [[75.0], [76.0], [77.0]], p1: [[78.0], [79.0]])], p1: 80.0)]), p1: s2(p0: s1(p0: [s0(p0: [[81.0], [82.0], [83.0]], p1: [[84.0], [85.0]])], p1: 86.0), p1: [s1(p0: [s0(p0: [[87.0], [88.0], [89.0]], p1: [[90.0], [91.0]])], p1: 92.0)]), p2: [[93.0], [94.0], [95.0]])])
    let v1: [s12] = [s12(p0: s9(p0: [s3(p0: s2(p0: s1(p0: [s0(p0: [[96.0], [97.0], [98.0]], p1: [[99.0], [100.0]])], p1: 101.0), p1: [s1(p0: [s0(p0: [[102.0], [103.0], [104.0]], p1: [[105.0], [106.0]])], p1: 107.0)]), p1: s2(p0: s1(p0: [s0(p0: [[108.0], [109.0], [110.0]], p1: [[111.0], [112.0]])], p1: 113.0), p1: [s1(p0: [s0(p0: [[114.0], [115.0], [116.0]], p1: [[117.0], [118.0]])], p1: 119.0)]), p2: [[120.0], [121.0], [122.0]]), s3(p0: s2(p0: s1(p0: [s0(p0: [[123.0], [124.0], [125.0]], p1: [[126.0], [127.0]])], p1: 128.0), p1: [s1(p0: [s0(p0: [[129.0], [130.0], [131.0]], p1: [[132.0], [133.0]])], p1: 134.0)]), p1: s2(p0: s1(p0: [s0(p0: [[135.0], [136.0], [137.0]], p1: [[138.0], [139.0]])], p1: 140.0), p1: [s1(p0: [s0(p0: [[141.0], [142.0], [143.0]], p1: [[144.0], [145.0]])], p1: 146.0)]), p2: [[147.0], [148.0], [149.0]])], p1: s0(p0: [[150.0], [151.0], [152.0]], p1: [[153.0], [154.0]])), p1: s9(p0: [s3(p0: s2(p0: s1(p0: [s0(p0: [[155.0], [156.0], [157.0]], p1: [[158.0], [159.0]])], p1: 160.0), p1: [s1(p0: [s0(p0: [[161.0], [162.0], [163.0]], p1: [[164.0], [165.0]])], p1: 166.0)]), p1: s2(p0: s1(p0: [s0(p0: [[167.0], [168.0], [169.0]], p1: [[170.0], [171.0]])], p1: 172.0), p1: [s1(p0: [s0(p0: [[173.0], [174.0], [175.0]], p1: [[176.0], [177.0]])], p1: 178.0)]), p2: [[179.0], [180.0], [181.0]]), s3(p0: s2(p0: s1(p0: [s0(p0: [[182.0], [183.0], [184.0]], p1: [[185.0], [186.0]])], p1: 187.0), p1: [s1(p0: [s0(p0: [[188.0], [189.0], [190.0]], p1: [[191.0], [192.0]])], p1: 193.0)]), p1: s2(p0: s1(p0: [s0(p0: [[194.0], [195.0], [196.0]], p1: [[197.0], [198.0]])], p1: 199.0), p1: [s1(p0: [s0(p0: [[200.0], [201.0], [202.0]], p1: [[203.0], [204.0]])], p1: 205.0)]), p2: [[206.0], [207.0], [208.0]])], p1: s0(p0: [[209.0], [210.0], [211.0]], p1: [[212.0], [213.0]]))), s12(p0: s9(p0: [s3(p0: s2(p0: s1(p0: [s0(p0: [[214.0], [215.0], [216.0]], p1: [[217.0], [218.0]])], p1: 219.0), p1: [s1(p0: [s0(p0: [[220.0], [221.0], [222.0]], p1: [[223.0], [224.0]])], p1: 225.0)]), p1: s2(p0: s1(p0: [s0(p0: [[226.0], [227.0], [228.0]], p1: [[229.0], [230.0]])], p1: 231.0), p1: [s1(p0: [s0(p0: [[232.0], [233.0], [234.0]], p1: [[235.0], [236.0]])], p1: 237.0)]), p2: [[238.0], [239.0], [240.0]]), s3(p0: s2(p0: s1(p0: [s0(p0: [[241.0], [242.0], [243.0]], p1: [[244.0], [245.0]])], p1: 246.0), p1: [s1(p0: [s0(p0: [[247.0], [248.0], [249.0]], p1: [[250.0], [251.0]])], p1: 252.0)]), p1: s2(p0: s1(p0: [s0(p0: [[253.0], [254.0], [255.0]], p1: [[256.0], [257.0]])], p1: 258.0), p1: [s1(p0: [s0(p0: [[259.0], [260.0], [261.0]], p1: [[262.0], [263.0]])], p1: 264.0)]), p2: [[265.0], [266.0], [267.0]])], p1: s0(p0: [[268.0], [269.0], [270.0]], p1: [[271.0], [272.0]])), p1: s9(p0: [s3(p0: s2(p0: s1(p0: [s0(p0: [[273.0], [274.0], [275.0]], p1: [[276.0], [277.0]])], p1: 278.0), p1: [s1(p0: [s0(p0: [[279.0], [280.0], [281.0]], p1: [[282.0], [283.0]])], p1: 284.0)]), p1: s2(p0: s1(p0: [s0(p0: [[285.0], [286.0], [287.0]], p1: [[288.0], [289.0]])], p1: 290.0), p1: [s1(p0: [s0(p0: [[291.0], [292.0], [293.0]], p1: [[294.0], [295.0]])], p1: 296.0)]), p2: [[297.0], [298.0], [299.0]]), s3(p0: s2(p0: s1(p0: [s0(p0: [[300.0], [301.0], [302.0]], p1: [[303.0], [304.0]])], p1: 305.0), p1: [s1(p0: [s0(p0: [[306.0], [307.0], [308.0]], p1: [[309.0], [310.0]])], p1: 311.0)]), p1: s2(p0: s1(p0: [s0(p0: [[312.0], [313.0], [314.0]], p1: [[315.0], [316.0]])], p1: 317.0), p1: [s1(p0: [s0(p0: [[318.0], [319.0], [320.0]], p1: [[321.0], [322.0]])], p1: 323.0)]), p2: [[324.0], [325.0], [326.0]])], p1: s0(p0: [[327.0], [328.0], [329.0]], p1: [[330.0], [331.0]]))), s12(p0: s9(p0: [s3(p0: s2(p0: s1(p0: [s0(p0: [[332.0], [333.0], [334.0]], p1: [[335.0], [336.0]])], p1: 337.0), p1: [s1(p0: [s0(p0: [[338.0], [339.0], [340.0]], p1: [[341.0], [342.0]])], p1: 343.0)]), p1: s2(p0: s1(p0: [s0(p0: [[344.0], [345.0], [346.0]], p1: [[347.0], [348.0]])], p1: 349.0), p1: [s1(p0: [s0(p0: [[350.0], [351.0], [352.0]], p1: [[353.0], [354.0]])], p1: 355.0)]), p2: [[356.0], [357.0], [358.0]]), s3(p0: s2(p0: s1(p0: [s0(p0: [[359.0], [360.0], [361.0]], p1: [[362.0], [363.0]])], p1: 364.0), p1: [s1(p0: [s0(p0: [[365.0], [366.0], [367.0]], p1: [[368.0], [369.0]])], p1: 370.0)]), p1: s2(p0: s1(p0: [s0(p0: [[371.0], [372.0], [373.0]], p1: [[374.0], [375.0]])], p1: 376.0), p1: [s1(p0: [s0(p0: [[377.0], [378.0], [379.0]], p1: [[380.0], [381.0]])], p1: 382.0)]), p2: [[383.0], [384.0], [385.0]])], p1: s0(p0: [[386.0], [387.0], [388.0]], p1: [[389.0], [390.0]])), p1: s9(p0: [s3(p0: s2(p0: s1(p0: [s0(p0: [[391.0], [392.0], [393.0]], p1: [[394.0], [395.0]])], p1: 396.0), p1: [s1(p0: [s0(p0: [[397.0], [398.0], [399.0]], p1: [[400.0], [401.0]])], p1: 402.0)]), p1: s2(p0: s1(p0: [s0(p0: [[403.0], [404.0], [405.0]], p1: [[406.0], [407.0]])], p1: 408.0), p1: [s1(p0: [s0(p0: [[409.0], [410.0], [411.0]], p1: [[412.0], [413.0]])], p1: 414.0)]), p2: [[415.0], [416.0], [417.0]]), s3(p0: s2(p0: s1(p0: [s0(p0: [[418.0], [419.0], [420.0]], p1: [[421.0], [422.0]])], p1: 423.0), p1: [s1(p0: [s0(p0: [[424.0], [425.0], [426.0]], p1: [[427.0], [428.0]])], p1: 429.0)]), p1: s2(p0: s1(p0: [s0(p0: [[430.0], [431.0], [432.0]], p1: [[433.0], [434.0]])], p1: 435.0), p1: [s1(p0: [s0(p0: [[436.0], [437.0], [438.0]], p1: [[439.0], [440.0]])], p1: 441.0)]), p2: [[442.0], [443.0], [444.0]])], p1: s0(p0: [[445.0], [446.0], [447.0]], p1: [[448.0], [449.0]])))]
    let v2: [s7] = [s7(p0: s6(p0: [s1(p0: [s0(p0: [[450.0], [451.0], [452.0]], p1: [[453.0], [454.0]])], p1: 455.0), s1(p0: [s0(p0: [[456.0], [457.0], [458.0]], p1: [[459.0], [460.0]])], p1: 461.0), s1(p0: [s0(p0: [[462.0], [463.0], [464.0]], p1: [[465.0], [466.0]])], p1: 467.0)], p1: s5(p0: s3(p0: s2(p0: s1(p0: [s0(p0: [[468.0], [469.0], [470.0]], p1: [[471.0], [472.0]])], p1: 473.0), p1: [s1(p0: [s0(p0: [[474.0], [475.0], [476.0]], p1: [[477.0], [478.0]])], p1: 479.0)]), p1: s2(p0: s1(p0: [s0(p0: [[480.0], [481.0], [482.0]], p1: [[483.0], [484.0]])], p1: 485.0), p1: [s1(p0: [s0(p0: [[486.0], [487.0], [488.0]], p1: [[489.0], [490.0]])], p1: 491.0)]), p2: [[492.0], [493.0], [494.0]]), p1: s4(p0: [s1(p0: [s0(p0: [[495.0], [496.0], [497.0]], p1: [[498.0], [499.0]])], p1: 500.0)], p1: s1(p0: [s0(p0: [[501.0], [502.0], [503.0]], p1: [[504.0], [505.0]])], p1: 506.0)), p2: [s4(p0: [s1(p0: [s0(p0: [[507.0], [508.0], [509.0]], p1: [[510.0], [511.0]])], p1: 512.0)], p1: s1(p0: [s0(p0: [[513.0], [514.0], [515.0]], p1: [[516.0], [517.0]])], p1: 518.0))])), p1: [s3(p0: s2(p0: s1(p0: [s0(p0: [[519.0], [520.0], [521.0]], p1: [[522.0], [523.0]])], p1: 524.0), p1: [s1(p0: [s0(p0: [[525.0], [526.0], [527.0]], p1: [[528.0], [529.0]])], p1: 530.0)]), p1: s2(p0: s1(p0: [s0(p0: [[531.0], [532.0], [533.0]], p1: [[534.0], [535.0]])], p1: 536.0), p1: [s1(p0: [s0(p0: [[537.0], [538.0], [539.0]], p1: [[540.0], [541.0]])], p1: 542.0)]), p2: [[543.0], [544.0], [545.0]])]), s7(p0: s6(p0: [s1(p0: [s0(p0: [[546.0], [547.0], [548.0]], p1: [[549.0], [550.0]])], p1: 551.0), s1(p0: [s0(p0: [[552.0], [553.0], [554.0]], p1: [[555.0], [556.0]])], p1: 557.0), s1(p0: [s0(p0: [[558.0], [559.0], [560.0]], p1: [[561.0], [562.0]])], p1: 563.0)], p1: s5(p0: s3(p0: s2(p0: s1(p0: [s0(p0: [[564.0], [565.0], [566.0]], p1: [[567.0], [568.0]])], p1: 569.0), p1: [s1(p0: [s0(p0: [[570.0], [571.0], [572.0]], p1: [[573.0], [574.0]])], p1: 575.0)]), p1: s2(p0: s1(p0: [s0(p0: [[576.0], [577.0], [578.0]], p1: [[579.0], [580.0]])], p1: 581.0), p1: [s1(p0: [s0(p0: [[582.0], [583.0], [584.0]], p1: [[585.0], [586.0]])], p1: 587.0)]), p2: [[588.0], [589.0], [590.0]]), p1: s4(p0: [s1(p0: [s0(p0: [[591.0], [592.0], [593.0]], p1: [[594.0], [595.0]])], p1: 596.0)], p1: s1(p0: [s0(p0: [[597.0], [598.0], [599.0]], p1: [[600.0], [601.0]])], p1: 602.0)), p2: [s4(p0: [s1(p0: [s0(p0: [[603.0], [604.0], [605.0]], p1: [[606.0], [607.0]])], p1: 608.0)], p1: s1(p0: [s0(p0: [[609.0], [610.0], [611.0]], p1: [[612.0], [613.0]])], p1: 614.0))])), p1: [s3(p0: s2(p0: s1(p0: [s0(p0: [[615.0], [616.0], [617.0]], p1: [[618.0], [619.0]])], p1: 620.0), p1: [s1(p0: [s0(p0: [[621.0], [622.0], [623.0]], p1: [[624.0], [625.0]])], p1: 626.0)]), p1: s2(p0: s1(p0: [s0(p0: [[627.0], [628.0], [629.0]], p1: [[630.0], [631.0]])], p1: 632.0), p1: [s1(p0: [s0(p0: [[633.0], [634.0], [635.0]], p1: [[636.0], [637.0]])], p1: 638.0)]), p2: [[639.0], [640.0], [641.0]])])]
    let v3: Double = 642.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 642.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
