  struct s0 {
    var p0: [[Float]]
    var p1: Float
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  let noinline_f0: (s1, s1, Float) -> Float = (v0: s1, v1: s1, v2: Float) -> Float {
    let v11: [[s0]] = v1.p1 in
    let v15: [s0] = v11[1] in
    let v3: s0 = v15[0] in
    let v10: s0 = v15[0] in
    let v19: [[Float]] = v10.p0 in
    let v34: [Float] = v19[1] in
    let v29: Float = v34[0] in
    let v33: Float = v3.p1 in
    var v39: Float = v29 in
    let v75: Float = v33 - v39 in
    v75
  } in
  fun loop(i: Int, v0: s1, v1: s1, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1(s0([[0.0], [1.0]], 2.0), [[s0([[3.0], [4.0]], 5.0)], [s0([[6.0], [7.0]], 8.0)], [s0([[9.0], [10.0]], 11.0)]]) in
    let v1: s1 = s1(s0([[12.0], [13.0]], 14.0), [[s0([[15.0], [16.0]], 17.0)], [s0([[18.0], [19.0]], 20.0)], [s0([[21.0], [22.0]], 23.0)]]) in
    let v2: Float = 24.0 in
    let initialResult: Float = 24.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()