  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: s1
  } in
  let noinline_f0: ([s2], s1, [s0], Float) -> Float = (v0: [s2], v1: s1, v2: [s0], v3: Float) -> Float {
    let v7: s0 = v2[0] in
    var v6: Float = v3 in
    let v13: [[Float]] = v7.p0 in
    var v12: Float = v3 in
    let v18: [Float] = v13[0] in
    var v35: [Float] = v18 in
    var v45: [[Float]] = v13 in
    var v70: Float = v3 in
    var v33: Float = v70 in
    let v50: [Float] = v45[1] in
    v45[0] = v35 in
    v45 = v13 in
    v12 = v33 in
    let v106: Float = v50[0] in
    v35[0] = v12 in
    v35[0] = v6 in
    v35[0] = v12 in
    v106
  } in
  fun loop(i: Int, v0: [s2], v1: s1, v2: [s0], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2([s0([[0.0], [1.0]], [[2.0]]), s0([[3.0], [4.0]], [[5.0]])], s1(s0([[6.0], [7.0]], [[8.0]]), s0([[9.0], [10.0]], [[11.0]])))] in
    let v1: s1 = s1(s0([[12.0], [13.0]], [[14.0]]), s0([[15.0], [16.0]], [[17.0]])) in
    let v2: [s0] = [s0([[18.0], [19.0]], [[20.0]])] in
    let v3: Float = 21.0 in
    let initialResult: Float = 21.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()