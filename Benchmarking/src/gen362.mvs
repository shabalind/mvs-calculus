  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s3 {
    var p0: s0
    var p1: [[s1]]
  } in
  let noinline_f0: (s3, Float) -> Float = (v0: s3, v1: Float) -> Float {
    var v2: s3 = v0 in
    var v5: Float = v1 in
    var v3: s3 = v2 in
    let v7: Float = v1 - v5 in
    var v11: Float = v5 in
    let v6: s0 = v3.p0 in
    var v21: Float = v11 in
    let v25: [[Float]] = v6.p1 in
    let v16: [Float] = v25[1] in
    let v81: Float = v7 - v5 in
    var v62: [Float] = v16 in
    v11 = v5 in
    let v44: Float = v16[0] in
    v5 = v7 in
    v62[0] = v21 in
    let v99: Float = v44 - v81 in
    v62[0] = v11 in
    var v114: Float = v99 in
    let v170: Float = v62[0] in
    let v187: Float = v170 * v114 in
    v187
  } in
  fun loop(i: Int, v0: s3, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(s0([[0.0], [1.0]], [[2.0], [3.0]]), [[s1(s0([[4.0], [5.0]], [[6.0], [7.0]]), [s0([[8.0], [9.0]], [[10.0], [11.0]]), s0([[12.0], [13.0]], [[14.0], [15.0]])])], [s1(s0([[16.0], [17.0]], [[18.0], [19.0]]), [s0([[20.0], [21.0]], [[22.0], [23.0]]), s0([[24.0], [25.0]], [[26.0], [27.0]])])]]) in
    let v1: Float = 28.0 in
    let initialResult: Float = 28.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()