  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s3 {
    var p0: [s0]
    var p1: s1
  } in
  struct s4 {
    var p0: [[s3]]
    var p1: [s0]
  } in
  struct s5 {
    var p0: s0
    var p1: [s4]
  } in
  struct s6 {
    var p0: s5
    var p1: s1
  } in
  struct s7 {
    var p0: [s5]
    var p1: s5
  } in
  let f1: (s3) -> s3 = (v0: s3) -> s3 {
    let v30: [s0] = v0.p0 in
    var v28: s3 = v0 in
    let v58: [s0] = v28.p0 in
    var v27: s3 = v28 in
    v28.p0 = v30 in
    v27.p0 = v58 in
    v27
  } in
  let noinline_f0: (s3, Float, s6, [s7]) -> Float = (v0: s3, v1: Float, v2: s6, v3: [s7]) -> Float {
    let v5: s3 = f1(v0) in
    let v4: [s0] = v5.p0 in
    let v23: s0 = v4[0] in
    let v28: [[Float]] = v23.p1 in
    let v10: [[[Float]]] = [v28, v28, v28, v28, v28, v28] in
    let v32: [[Float]] = v10[5] in
    let v47: [Float] = v32[0] in
    let v54: Float = v47[0] in
    let v64: Float = v1 - v54 in
    v64
  } in
  fun loop(i: Int, v0: s3, v1: Float, v2: s6, v3: [s7], result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3([s0([[0.0], [1.0]], [[2.0]]), s0([[3.0], [4.0]], [[5.0]]), s0([[6.0], [7.0]], [[8.0]])], s1(s0([[9.0], [10.0]], [[11.0]]), [[s0([[12.0], [13.0]], [[14.0]])], [s0([[15.0], [16.0]], [[17.0]])]])) in
    let v1: Float = 18.0 in
    let v2: s6 = s6(s5(s0([[19.0], [20.0]], [[21.0]]), [s4([[s3([s0([[22.0], [23.0]], [[24.0]]), s0([[25.0], [26.0]], [[27.0]]), s0([[28.0], [29.0]], [[30.0]])], s1(s0([[31.0], [32.0]], [[33.0]]), [[s0([[34.0], [35.0]], [[36.0]])], [s0([[37.0], [38.0]], [[39.0]])]]))], [s3([s0([[40.0], [41.0]], [[42.0]]), s0([[43.0], [44.0]], [[45.0]]), s0([[46.0], [47.0]], [[48.0]])], s1(s0([[49.0], [50.0]], [[51.0]]), [[s0([[52.0], [53.0]], [[54.0]])], [s0([[55.0], [56.0]], [[57.0]])]]))]], [s0([[58.0], [59.0]], [[60.0]]), s0([[61.0], [62.0]], [[63.0]])])]), s1(s0([[64.0], [65.0]], [[66.0]]), [[s0([[67.0], [68.0]], [[69.0]])], [s0([[70.0], [71.0]], [[72.0]])]])) in
    let v3: [s7] = [s7([s5(s0([[73.0], [74.0]], [[75.0]]), [s4([[s3([s0([[76.0], [77.0]], [[78.0]]), s0([[79.0], [80.0]], [[81.0]]), s0([[82.0], [83.0]], [[84.0]])], s1(s0([[85.0], [86.0]], [[87.0]]), [[s0([[88.0], [89.0]], [[90.0]])], [s0([[91.0], [92.0]], [[93.0]])]]))], [s3([s0([[94.0], [95.0]], [[96.0]]), s0([[97.0], [98.0]], [[99.0]]), s0([[100.0], [101.0]], [[102.0]])], s1(s0([[103.0], [104.0]], [[105.0]]), [[s0([[106.0], [107.0]], [[108.0]])], [s0([[109.0], [110.0]], [[111.0]])]]))]], [s0([[112.0], [113.0]], [[114.0]]), s0([[115.0], [116.0]], [[117.0]])])]), s5(s0([[118.0], [119.0]], [[120.0]]), [s4([[s3([s0([[121.0], [122.0]], [[123.0]]), s0([[124.0], [125.0]], [[126.0]]), s0([[127.0], [128.0]], [[129.0]])], s1(s0([[130.0], [131.0]], [[132.0]]), [[s0([[133.0], [134.0]], [[135.0]])], [s0([[136.0], [137.0]], [[138.0]])]]))], [s3([s0([[139.0], [140.0]], [[141.0]]), s0([[142.0], [143.0]], [[144.0]]), s0([[145.0], [146.0]], [[147.0]])], s1(s0([[148.0], [149.0]], [[150.0]]), [[s0([[151.0], [152.0]], [[153.0]])], [s0([[154.0], [155.0]], [[156.0]])]]))]], [s0([[157.0], [158.0]], [[159.0]]), s0([[160.0], [161.0]], [[162.0]])])]), s5(s0([[163.0], [164.0]], [[165.0]]), [s4([[s3([s0([[166.0], [167.0]], [[168.0]]), s0([[169.0], [170.0]], [[171.0]]), s0([[172.0], [173.0]], [[174.0]])], s1(s0([[175.0], [176.0]], [[177.0]]), [[s0([[178.0], [179.0]], [[180.0]])], [s0([[181.0], [182.0]], [[183.0]])]]))], [s3([s0([[184.0], [185.0]], [[186.0]]), s0([[187.0], [188.0]], [[189.0]]), s0([[190.0], [191.0]], [[192.0]])], s1(s0([[193.0], [194.0]], [[195.0]]), [[s0([[196.0], [197.0]], [[198.0]])], [s0([[199.0], [200.0]], [[201.0]])]]))]], [s0([[202.0], [203.0]], [[204.0]]), s0([[205.0], [206.0]], [[207.0]])])])], s5(s0([[208.0], [209.0]], [[210.0]]), [s4([[s3([s0([[211.0], [212.0]], [[213.0]]), s0([[214.0], [215.0]], [[216.0]]), s0([[217.0], [218.0]], [[219.0]])], s1(s0([[220.0], [221.0]], [[222.0]]), [[s0([[223.0], [224.0]], [[225.0]])], [s0([[226.0], [227.0]], [[228.0]])]]))], [s3([s0([[229.0], [230.0]], [[231.0]]), s0([[232.0], [233.0]], [[234.0]]), s0([[235.0], [236.0]], [[237.0]])], s1(s0([[238.0], [239.0]], [[240.0]]), [[s0([[241.0], [242.0]], [[243.0]])], [s0([[244.0], [245.0]], [[246.0]])]]))]], [s0([[247.0], [248.0]], [[249.0]]), s0([[250.0], [251.0]], [[252.0]])])])), s7([s5(s0([[253.0], [254.0]], [[255.0]]), [s4([[s3([s0([[256.0], [257.0]], [[258.0]]), s0([[259.0], [260.0]], [[261.0]]), s0([[262.0], [263.0]], [[264.0]])], s1(s0([[265.0], [266.0]], [[267.0]]), [[s0([[268.0], [269.0]], [[270.0]])], [s0([[271.0], [272.0]], [[273.0]])]]))], [s3([s0([[274.0], [275.0]], [[276.0]]), s0([[277.0], [278.0]], [[279.0]]), s0([[280.0], [281.0]], [[282.0]])], s1(s0([[283.0], [284.0]], [[285.0]]), [[s0([[286.0], [287.0]], [[288.0]])], [s0([[289.0], [290.0]], [[291.0]])]]))]], [s0([[292.0], [293.0]], [[294.0]]), s0([[295.0], [296.0]], [[297.0]])])]), s5(s0([[298.0], [299.0]], [[300.0]]), [s4([[s3([s0([[301.0], [302.0]], [[303.0]]), s0([[304.0], [305.0]], [[306.0]]), s0([[307.0], [308.0]], [[309.0]])], s1(s0([[310.0], [311.0]], [[312.0]]), [[s0([[313.0], [314.0]], [[315.0]])], [s0([[316.0], [317.0]], [[318.0]])]]))], [s3([s0([[319.0], [320.0]], [[321.0]]), s0([[322.0], [323.0]], [[324.0]]), s0([[325.0], [326.0]], [[327.0]])], s1(s0([[328.0], [329.0]], [[330.0]]), [[s0([[331.0], [332.0]], [[333.0]])], [s0([[334.0], [335.0]], [[336.0]])]]))]], [s0([[337.0], [338.0]], [[339.0]]), s0([[340.0], [341.0]], [[342.0]])])]), s5(s0([[343.0], [344.0]], [[345.0]]), [s4([[s3([s0([[346.0], [347.0]], [[348.0]]), s0([[349.0], [350.0]], [[351.0]]), s0([[352.0], [353.0]], [[354.0]])], s1(s0([[355.0], [356.0]], [[357.0]]), [[s0([[358.0], [359.0]], [[360.0]])], [s0([[361.0], [362.0]], [[363.0]])]]))], [s3([s0([[364.0], [365.0]], [[366.0]]), s0([[367.0], [368.0]], [[369.0]]), s0([[370.0], [371.0]], [[372.0]])], s1(s0([[373.0], [374.0]], [[375.0]]), [[s0([[376.0], [377.0]], [[378.0]])], [s0([[379.0], [380.0]], [[381.0]])]]))]], [s0([[382.0], [383.0]], [[384.0]]), s0([[385.0], [386.0]], [[387.0]])])])], s5(s0([[388.0], [389.0]], [[390.0]]), [s4([[s3([s0([[391.0], [392.0]], [[393.0]]), s0([[394.0], [395.0]], [[396.0]]), s0([[397.0], [398.0]], [[399.0]])], s1(s0([[400.0], [401.0]], [[402.0]]), [[s0([[403.0], [404.0]], [[405.0]])], [s0([[406.0], [407.0]], [[408.0]])]]))], [s3([s0([[409.0], [410.0]], [[411.0]]), s0([[412.0], [413.0]], [[414.0]]), s0([[415.0], [416.0]], [[417.0]])], s1(s0([[418.0], [419.0]], [[420.0]]), [[s0([[421.0], [422.0]], [[423.0]])], [s0([[424.0], [425.0]], [[426.0]])]]))]], [s0([[427.0], [428.0]], [[429.0]]), s0([[430.0], [431.0]], [[432.0]])])])), s7([s5(s0([[433.0], [434.0]], [[435.0]]), [s4([[s3([s0([[436.0], [437.0]], [[438.0]]), s0([[439.0], [440.0]], [[441.0]]), s0([[442.0], [443.0]], [[444.0]])], s1(s0([[445.0], [446.0]], [[447.0]]), [[s0([[448.0], [449.0]], [[450.0]])], [s0([[451.0], [452.0]], [[453.0]])]]))], [s3([s0([[454.0], [455.0]], [[456.0]]), s0([[457.0], [458.0]], [[459.0]]), s0([[460.0], [461.0]], [[462.0]])], s1(s0([[463.0], [464.0]], [[465.0]]), [[s0([[466.0], [467.0]], [[468.0]])], [s0([[469.0], [470.0]], [[471.0]])]]))]], [s0([[472.0], [473.0]], [[474.0]]), s0([[475.0], [476.0]], [[477.0]])])]), s5(s0([[478.0], [479.0]], [[480.0]]), [s4([[s3([s0([[481.0], [482.0]], [[483.0]]), s0([[484.0], [485.0]], [[486.0]]), s0([[487.0], [488.0]], [[489.0]])], s1(s0([[490.0], [491.0]], [[492.0]]), [[s0([[493.0], [494.0]], [[495.0]])], [s0([[496.0], [497.0]], [[498.0]])]]))], [s3([s0([[499.0], [500.0]], [[501.0]]), s0([[502.0], [503.0]], [[504.0]]), s0([[505.0], [506.0]], [[507.0]])], s1(s0([[508.0], [509.0]], [[510.0]]), [[s0([[511.0], [512.0]], [[513.0]])], [s0([[514.0], [515.0]], [[516.0]])]]))]], [s0([[517.0], [518.0]], [[519.0]]), s0([[520.0], [521.0]], [[522.0]])])]), s5(s0([[523.0], [524.0]], [[525.0]]), [s4([[s3([s0([[526.0], [527.0]], [[528.0]]), s0([[529.0], [530.0]], [[531.0]]), s0([[532.0], [533.0]], [[534.0]])], s1(s0([[535.0], [536.0]], [[537.0]]), [[s0([[538.0], [539.0]], [[540.0]])], [s0([[541.0], [542.0]], [[543.0]])]]))], [s3([s0([[544.0], [545.0]], [[546.0]]), s0([[547.0], [548.0]], [[549.0]]), s0([[550.0], [551.0]], [[552.0]])], s1(s0([[553.0], [554.0]], [[555.0]]), [[s0([[556.0], [557.0]], [[558.0]])], [s0([[559.0], [560.0]], [[561.0]])]]))]], [s0([[562.0], [563.0]], [[564.0]]), s0([[565.0], [566.0]], [[567.0]])])])], s5(s0([[568.0], [569.0]], [[570.0]]), [s4([[s3([s0([[571.0], [572.0]], [[573.0]]), s0([[574.0], [575.0]], [[576.0]]), s0([[577.0], [578.0]], [[579.0]])], s1(s0([[580.0], [581.0]], [[582.0]]), [[s0([[583.0], [584.0]], [[585.0]])], [s0([[586.0], [587.0]], [[588.0]])]]))], [s3([s0([[589.0], [590.0]], [[591.0]]), s0([[592.0], [593.0]], [[594.0]]), s0([[595.0], [596.0]], [[597.0]])], s1(s0([[598.0], [599.0]], [[600.0]]), [[s0([[601.0], [602.0]], [[603.0]])], [s0([[604.0], [605.0]], [[606.0]])]]))]], [s0([[607.0], [608.0]], [[609.0]]), s0([[610.0], [611.0]], [[612.0]])])]))] in
    let initialResult: Float = [s7([s5(s0([[73.0], [74.0]], [[75.0]]), [s4([[s3([s0([[76.0], [77.0]], [[78.0]]), s0([[79.0], [80.0]], [[81.0]]), s0([[82.0], [83.0]], [[84.0]])], s1(s0([[85.0], [86.0]], [[87.0]]), [[s0([[88.0], [89.0]], [[90.0]])], [s0([[91.0], [92.0]], [[93.0]])]]))], [s3([s0([[94.0], [95.0]], [[96.0]]), s0([[97.0], [98.0]], [[99.0]]), s0([[100.0], [101.0]], [[102.0]])], s1(s0([[103.0], [104.0]], [[105.0]]), [[s0([[106.0], [107.0]], [[108.0]])], [s0([[109.0], [110.0]], [[111.0]])]]))]], [s0([[112.0], [113.0]], [[114.0]]), s0([[115.0], [116.0]], [[117.0]])])]), s5(s0([[118.0], [119.0]], [[120.0]]), [s4([[s3([s0([[121.0], [122.0]], [[123.0]]), s0([[124.0], [125.0]], [[126.0]]), s0([[127.0], [128.0]], [[129.0]])], s1(s0([[130.0], [131.0]], [[132.0]]), [[s0([[133.0], [134.0]], [[135.0]])], [s0([[136.0], [137.0]], [[138.0]])]]))], [s3([s0([[139.0], [140.0]], [[141.0]]), s0([[142.0], [143.0]], [[144.0]]), s0([[145.0], [146.0]], [[147.0]])], s1(s0([[148.0], [149.0]], [[150.0]]), [[s0([[151.0], [152.0]], [[153.0]])], [s0([[154.0], [155.0]], [[156.0]])]]))]], [s0([[157.0], [158.0]], [[159.0]]), s0([[160.0], [161.0]], [[162.0]])])]), s5(s0([[163.0], [164.0]], [[165.0]]), [s4([[s3([s0([[166.0], [167.0]], [[168.0]]), s0([[169.0], [170.0]], [[171.0]]), s0([[172.0], [173.0]], [[174.0]])], s1(s0([[175.0], [176.0]], [[177.0]]), [[s0([[178.0], [179.0]], [[180.0]])], [s0([[181.0], [182.0]], [[183.0]])]]))], [s3([s0([[184.0], [185.0]], [[186.0]]), s0([[187.0], [188.0]], [[189.0]]), s0([[190.0], [191.0]], [[192.0]])], s1(s0([[193.0], [194.0]], [[195.0]]), [[s0([[196.0], [197.0]], [[198.0]])], [s0([[199.0], [200.0]], [[201.0]])]]))]], [s0([[202.0], [203.0]], [[204.0]]), s0([[205.0], [206.0]], [[207.0]])])])], s5(s0([[208.0], [209.0]], [[210.0]]), [s4([[s3([s0([[211.0], [212.0]], [[213.0]]), s0([[214.0], [215.0]], [[216.0]]), s0([[217.0], [218.0]], [[219.0]])], s1(s0([[220.0], [221.0]], [[222.0]]), [[s0([[223.0], [224.0]], [[225.0]])], [s0([[226.0], [227.0]], [[228.0]])]]))], [s3([s0([[229.0], [230.0]], [[231.0]]), s0([[232.0], [233.0]], [[234.0]]), s0([[235.0], [236.0]], [[237.0]])], s1(s0([[238.0], [239.0]], [[240.0]]), [[s0([[241.0], [242.0]], [[243.0]])], [s0([[244.0], [245.0]], [[246.0]])]]))]], [s0([[247.0], [248.0]], [[249.0]]), s0([[250.0], [251.0]], [[252.0]])])])), s7([s5(s0([[253.0], [254.0]], [[255.0]]), [s4([[s3([s0([[256.0], [257.0]], [[258.0]]), s0([[259.0], [260.0]], [[261.0]]), s0([[262.0], [263.0]], [[264.0]])], s1(s0([[265.0], [266.0]], [[267.0]]), [[s0([[268.0], [269.0]], [[270.0]])], [s0([[271.0], [272.0]], [[273.0]])]]))], [s3([s0([[274.0], [275.0]], [[276.0]]), s0([[277.0], [278.0]], [[279.0]]), s0([[280.0], [281.0]], [[282.0]])], s1(s0([[283.0], [284.0]], [[285.0]]), [[s0([[286.0], [287.0]], [[288.0]])], [s0([[289.0], [290.0]], [[291.0]])]]))]], [s0([[292.0], [293.0]], [[294.0]]), s0([[295.0], [296.0]], [[297.0]])])]), s5(s0([[298.0], [299.0]], [[300.0]]), [s4([[s3([s0([[301.0], [302.0]], [[303.0]]), s0([[304.0], [305.0]], [[306.0]]), s0([[307.0], [308.0]], [[309.0]])], s1(s0([[310.0], [311.0]], [[312.0]]), [[s0([[313.0], [314.0]], [[315.0]])], [s0([[316.0], [317.0]], [[318.0]])]]))], [s3([s0([[319.0], [320.0]], [[321.0]]), s0([[322.0], [323.0]], [[324.0]]), s0([[325.0], [326.0]], [[327.0]])], s1(s0([[328.0], [329.0]], [[330.0]]), [[s0([[331.0], [332.0]], [[333.0]])], [s0([[334.0], [335.0]], [[336.0]])]]))]], [s0([[337.0], [338.0]], [[339.0]]), s0([[340.0], [341.0]], [[342.0]])])]), s5(s0([[343.0], [344.0]], [[345.0]]), [s4([[s3([s0([[346.0], [347.0]], [[348.0]]), s0([[349.0], [350.0]], [[351.0]]), s0([[352.0], [353.0]], [[354.0]])], s1(s0([[355.0], [356.0]], [[357.0]]), [[s0([[358.0], [359.0]], [[360.0]])], [s0([[361.0], [362.0]], [[363.0]])]]))], [s3([s0([[364.0], [365.0]], [[366.0]]), s0([[367.0], [368.0]], [[369.0]]), s0([[370.0], [371.0]], [[372.0]])], s1(s0([[373.0], [374.0]], [[375.0]]), [[s0([[376.0], [377.0]], [[378.0]])], [s0([[379.0], [380.0]], [[381.0]])]]))]], [s0([[382.0], [383.0]], [[384.0]]), s0([[385.0], [386.0]], [[387.0]])])])], s5(s0([[388.0], [389.0]], [[390.0]]), [s4([[s3([s0([[391.0], [392.0]], [[393.0]]), s0([[394.0], [395.0]], [[396.0]]), s0([[397.0], [398.0]], [[399.0]])], s1(s0([[400.0], [401.0]], [[402.0]]), [[s0([[403.0], [404.0]], [[405.0]])], [s0([[406.0], [407.0]], [[408.0]])]]))], [s3([s0([[409.0], [410.0]], [[411.0]]), s0([[412.0], [413.0]], [[414.0]]), s0([[415.0], [416.0]], [[417.0]])], s1(s0([[418.0], [419.0]], [[420.0]]), [[s0([[421.0], [422.0]], [[423.0]])], [s0([[424.0], [425.0]], [[426.0]])]]))]], [s0([[427.0], [428.0]], [[429.0]]), s0([[430.0], [431.0]], [[432.0]])])])), s7([s5(s0([[433.0], [434.0]], [[435.0]]), [s4([[s3([s0([[436.0], [437.0]], [[438.0]]), s0([[439.0], [440.0]], [[441.0]]), s0([[442.0], [443.0]], [[444.0]])], s1(s0([[445.0], [446.0]], [[447.0]]), [[s0([[448.0], [449.0]], [[450.0]])], [s0([[451.0], [452.0]], [[453.0]])]]))], [s3([s0([[454.0], [455.0]], [[456.0]]), s0([[457.0], [458.0]], [[459.0]]), s0([[460.0], [461.0]], [[462.0]])], s1(s0([[463.0], [464.0]], [[465.0]]), [[s0([[466.0], [467.0]], [[468.0]])], [s0([[469.0], [470.0]], [[471.0]])]]))]], [s0([[472.0], [473.0]], [[474.0]]), s0([[475.0], [476.0]], [[477.0]])])]), s5(s0([[478.0], [479.0]], [[480.0]]), [s4([[s3([s0([[481.0], [482.0]], [[483.0]]), s0([[484.0], [485.0]], [[486.0]]), s0([[487.0], [488.0]], [[489.0]])], s1(s0([[490.0], [491.0]], [[492.0]]), [[s0([[493.0], [494.0]], [[495.0]])], [s0([[496.0], [497.0]], [[498.0]])]]))], [s3([s0([[499.0], [500.0]], [[501.0]]), s0([[502.0], [503.0]], [[504.0]]), s0([[505.0], [506.0]], [[507.0]])], s1(s0([[508.0], [509.0]], [[510.0]]), [[s0([[511.0], [512.0]], [[513.0]])], [s0([[514.0], [515.0]], [[516.0]])]]))]], [s0([[517.0], [518.0]], [[519.0]]), s0([[520.0], [521.0]], [[522.0]])])]), s5(s0([[523.0], [524.0]], [[525.0]]), [s4([[s3([s0([[526.0], [527.0]], [[528.0]]), s0([[529.0], [530.0]], [[531.0]]), s0([[532.0], [533.0]], [[534.0]])], s1(s0([[535.0], [536.0]], [[537.0]]), [[s0([[538.0], [539.0]], [[540.0]])], [s0([[541.0], [542.0]], [[543.0]])]]))], [s3([s0([[544.0], [545.0]], [[546.0]]), s0([[547.0], [548.0]], [[549.0]]), s0([[550.0], [551.0]], [[552.0]])], s1(s0([[553.0], [554.0]], [[555.0]]), [[s0([[556.0], [557.0]], [[558.0]])], [s0([[559.0], [560.0]], [[561.0]])]]))]], [s0([[562.0], [563.0]], [[564.0]]), s0([[565.0], [566.0]], [[567.0]])])])], s5(s0([[568.0], [569.0]], [[570.0]]), [s4([[s3([s0([[571.0], [572.0]], [[573.0]]), s0([[574.0], [575.0]], [[576.0]]), s0([[577.0], [578.0]], [[579.0]])], s1(s0([[580.0], [581.0]], [[582.0]]), [[s0([[583.0], [584.0]], [[585.0]])], [s0([[586.0], [587.0]], [[588.0]])]]))], [s3([s0([[589.0], [590.0]], [[591.0]]), s0([[592.0], [593.0]], [[594.0]]), s0([[595.0], [596.0]], [[597.0]])], s1(s0([[598.0], [599.0]], [[600.0]]), [[s0([[601.0], [602.0]], [[603.0]])], [s0([[604.0], [605.0]], [[606.0]])]]))]], [s0([[607.0], [608.0]], [[609.0]]), s0([[610.0], [611.0]], [[612.0]])])]))] in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()