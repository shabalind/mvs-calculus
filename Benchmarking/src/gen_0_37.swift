  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
  }
  struct s1 {
    var p0: [[s0]]
    var p1: [[s0]]
  }
  struct s2 {
    var p0: s1
    var p1: [s0]
  }
  struct s3 {
    var p0: [s2]
    var p1: [s0]
  }
  struct s4 {
    var p0: s1
    var p1: [s2]
    var p2: s1
  }
  struct s5 {
    var p0: s3
  }
  struct s6 {
    var p0: s3
    var p1: s4
  }
  @inline(never)
  func f0(_ v0: [s5], _ v1: [[s2]], _ v2: [s6], _ v3: Double) -> Double {
    let v8: s5 = v0[2]
    let v12: s3 = v8.p0
    let v31: [s0] = v12.p1
    let v41: s0 = v31[1]
    let v28: [[Double]] = v41.p0
    let v29: [Double] = v28[2]
    let v51: [Double] = v28[0]
    let v48: Double = v51[0]
    let v105: Double = v29[0]
    let v240: Double = v105 + v48
    return v240
  }
  func benchmark() {
    let v0: [s5] = [s5(p0: s3(p0: [s2(p0: s1(p0: [[s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0]], p2: [[4.0]])]], p1: [[s0(p0: [[5.0], [6.0], [7.0]], p1: [[8.0]], p2: [[9.0]])]]), p1: [s0(p0: [[10.0], [11.0], [12.0]], p1: [[13.0]], p2: [[14.0]]), s0(p0: [[15.0], [16.0], [17.0]], p1: [[18.0]], p2: [[19.0]])]), s2(p0: s1(p0: [[s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0]], p2: [[24.0]])]], p1: [[s0(p0: [[25.0], [26.0], [27.0]], p1: [[28.0]], p2: [[29.0]])]]), p1: [s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0]], p2: [[34.0]]), s0(p0: [[35.0], [36.0], [37.0]], p1: [[38.0]], p2: [[39.0]])]), s2(p0: s1(p0: [[s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0]], p2: [[44.0]])]], p1: [[s0(p0: [[45.0], [46.0], [47.0]], p1: [[48.0]], p2: [[49.0]])]]), p1: [s0(p0: [[50.0], [51.0], [52.0]], p1: [[53.0]], p2: [[54.0]]), s0(p0: [[55.0], [56.0], [57.0]], p1: [[58.0]], p2: [[59.0]])])], p1: [s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0]], p2: [[64.0]]), s0(p0: [[65.0], [66.0], [67.0]], p1: [[68.0]], p2: [[69.0]]), s0(p0: [[70.0], [71.0], [72.0]], p1: [[73.0]], p2: [[74.0]])])), s5(p0: s3(p0: [s2(p0: s1(p0: [[s0(p0: [[75.0], [76.0], [77.0]], p1: [[78.0]], p2: [[79.0]])]], p1: [[s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0]], p2: [[84.0]])]]), p1: [s0(p0: [[85.0], [86.0], [87.0]], p1: [[88.0]], p2: [[89.0]]), s0(p0: [[90.0], [91.0], [92.0]], p1: [[93.0]], p2: [[94.0]])]), s2(p0: s1(p0: [[s0(p0: [[95.0], [96.0], [97.0]], p1: [[98.0]], p2: [[99.0]])]], p1: [[s0(p0: [[100.0], [101.0], [102.0]], p1: [[103.0]], p2: [[104.0]])]]), p1: [s0(p0: [[105.0], [106.0], [107.0]], p1: [[108.0]], p2: [[109.0]]), s0(p0: [[110.0], [111.0], [112.0]], p1: [[113.0]], p2: [[114.0]])]), s2(p0: s1(p0: [[s0(p0: [[115.0], [116.0], [117.0]], p1: [[118.0]], p2: [[119.0]])]], p1: [[s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0]], p2: [[124.0]])]]), p1: [s0(p0: [[125.0], [126.0], [127.0]], p1: [[128.0]], p2: [[129.0]]), s0(p0: [[130.0], [131.0], [132.0]], p1: [[133.0]], p2: [[134.0]])])], p1: [s0(p0: [[135.0], [136.0], [137.0]], p1: [[138.0]], p2: [[139.0]]), s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0]], p2: [[144.0]]), s0(p0: [[145.0], [146.0], [147.0]], p1: [[148.0]], p2: [[149.0]])])), s5(p0: s3(p0: [s2(p0: s1(p0: [[s0(p0: [[150.0], [151.0], [152.0]], p1: [[153.0]], p2: [[154.0]])]], p1: [[s0(p0: [[155.0], [156.0], [157.0]], p1: [[158.0]], p2: [[159.0]])]]), p1: [s0(p0: [[160.0], [161.0], [162.0]], p1: [[163.0]], p2: [[164.0]]), s0(p0: [[165.0], [166.0], [167.0]], p1: [[168.0]], p2: [[169.0]])]), s2(p0: s1(p0: [[s0(p0: [[170.0], [171.0], [172.0]], p1: [[173.0]], p2: [[174.0]])]], p1: [[s0(p0: [[175.0], [176.0], [177.0]], p1: [[178.0]], p2: [[179.0]])]]), p1: [s0(p0: [[180.0], [181.0], [182.0]], p1: [[183.0]], p2: [[184.0]]), s0(p0: [[185.0], [186.0], [187.0]], p1: [[188.0]], p2: [[189.0]])]), s2(p0: s1(p0: [[s0(p0: [[190.0], [191.0], [192.0]], p1: [[193.0]], p2: [[194.0]])]], p1: [[s0(p0: [[195.0], [196.0], [197.0]], p1: [[198.0]], p2: [[199.0]])]]), p1: [s0(p0: [[200.0], [201.0], [202.0]], p1: [[203.0]], p2: [[204.0]]), s0(p0: [[205.0], [206.0], [207.0]], p1: [[208.0]], p2: [[209.0]])])], p1: [s0(p0: [[210.0], [211.0], [212.0]], p1: [[213.0]], p2: [[214.0]]), s0(p0: [[215.0], [216.0], [217.0]], p1: [[218.0]], p2: [[219.0]]), s0(p0: [[220.0], [221.0], [222.0]], p1: [[223.0]], p2: [[224.0]])]))]
    let v1: [[s2]] = [[s2(p0: s1(p0: [[s0(p0: [[225.0], [226.0], [227.0]], p1: [[228.0]], p2: [[229.0]])]], p1: [[s0(p0: [[230.0], [231.0], [232.0]], p1: [[233.0]], p2: [[234.0]])]]), p1: [s0(p0: [[235.0], [236.0], [237.0]], p1: [[238.0]], p2: [[239.0]]), s0(p0: [[240.0], [241.0], [242.0]], p1: [[243.0]], p2: [[244.0]])])], [s2(p0: s1(p0: [[s0(p0: [[245.0], [246.0], [247.0]], p1: [[248.0]], p2: [[249.0]])]], p1: [[s0(p0: [[250.0], [251.0], [252.0]], p1: [[253.0]], p2: [[254.0]])]]), p1: [s0(p0: [[255.0], [256.0], [257.0]], p1: [[258.0]], p2: [[259.0]]), s0(p0: [[260.0], [261.0], [262.0]], p1: [[263.0]], p2: [[264.0]])])], [s2(p0: s1(p0: [[s0(p0: [[265.0], [266.0], [267.0]], p1: [[268.0]], p2: [[269.0]])]], p1: [[s0(p0: [[270.0], [271.0], [272.0]], p1: [[273.0]], p2: [[274.0]])]]), p1: [s0(p0: [[275.0], [276.0], [277.0]], p1: [[278.0]], p2: [[279.0]]), s0(p0: [[280.0], [281.0], [282.0]], p1: [[283.0]], p2: [[284.0]])])]]
    let v2: [s6] = [s6(p0: s3(p0: [s2(p0: s1(p0: [[s0(p0: [[285.0], [286.0], [287.0]], p1: [[288.0]], p2: [[289.0]])]], p1: [[s0(p0: [[290.0], [291.0], [292.0]], p1: [[293.0]], p2: [[294.0]])]]), p1: [s0(p0: [[295.0], [296.0], [297.0]], p1: [[298.0]], p2: [[299.0]]), s0(p0: [[300.0], [301.0], [302.0]], p1: [[303.0]], p2: [[304.0]])]), s2(p0: s1(p0: [[s0(p0: [[305.0], [306.0], [307.0]], p1: [[308.0]], p2: [[309.0]])]], p1: [[s0(p0: [[310.0], [311.0], [312.0]], p1: [[313.0]], p2: [[314.0]])]]), p1: [s0(p0: [[315.0], [316.0], [317.0]], p1: [[318.0]], p2: [[319.0]]), s0(p0: [[320.0], [321.0], [322.0]], p1: [[323.0]], p2: [[324.0]])]), s2(p0: s1(p0: [[s0(p0: [[325.0], [326.0], [327.0]], p1: [[328.0]], p2: [[329.0]])]], p1: [[s0(p0: [[330.0], [331.0], [332.0]], p1: [[333.0]], p2: [[334.0]])]]), p1: [s0(p0: [[335.0], [336.0], [337.0]], p1: [[338.0]], p2: [[339.0]]), s0(p0: [[340.0], [341.0], [342.0]], p1: [[343.0]], p2: [[344.0]])])], p1: [s0(p0: [[345.0], [346.0], [347.0]], p1: [[348.0]], p2: [[349.0]]), s0(p0: [[350.0], [351.0], [352.0]], p1: [[353.0]], p2: [[354.0]]), s0(p0: [[355.0], [356.0], [357.0]], p1: [[358.0]], p2: [[359.0]])]), p1: s4(p0: s1(p0: [[s0(p0: [[360.0], [361.0], [362.0]], p1: [[363.0]], p2: [[364.0]])]], p1: [[s0(p0: [[365.0], [366.0], [367.0]], p1: [[368.0]], p2: [[369.0]])]]), p1: [s2(p0: s1(p0: [[s0(p0: [[370.0], [371.0], [372.0]], p1: [[373.0]], p2: [[374.0]])]], p1: [[s0(p0: [[375.0], [376.0], [377.0]], p1: [[378.0]], p2: [[379.0]])]]), p1: [s0(p0: [[380.0], [381.0], [382.0]], p1: [[383.0]], p2: [[384.0]]), s0(p0: [[385.0], [386.0], [387.0]], p1: [[388.0]], p2: [[389.0]])]), s2(p0: s1(p0: [[s0(p0: [[390.0], [391.0], [392.0]], p1: [[393.0]], p2: [[394.0]])]], p1: [[s0(p0: [[395.0], [396.0], [397.0]], p1: [[398.0]], p2: [[399.0]])]]), p1: [s0(p0: [[400.0], [401.0], [402.0]], p1: [[403.0]], p2: [[404.0]]), s0(p0: [[405.0], [406.0], [407.0]], p1: [[408.0]], p2: [[409.0]])])], p2: s1(p0: [[s0(p0: [[410.0], [411.0], [412.0]], p1: [[413.0]], p2: [[414.0]])]], p1: [[s0(p0: [[415.0], [416.0], [417.0]], p1: [[418.0]], p2: [[419.0]])]])))]
    let v3: Double = 420.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 420.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
