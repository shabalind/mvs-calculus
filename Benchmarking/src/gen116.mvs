  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  let f21: ([[Float]]) -> [[Float]] = (v0: [[Float]]) -> [[Float]] {
    var v5: [[Float]] = v0 in
    let v7: [Float] = v5[0] in
    let v1: [Float] = v5[0] in
    var v3: [Float] = v7 in
    let v6: [Float] = v5[0] in
    v5[0] = v3 in
    let v4: Float = v3[0] in
    var v8: Float = v4 in
    let v12: [Float] = v5[0] in
    v5[0] = v7 in
    let v9: [Float] = v0[0] in
    v5[0] = v12 in
    let v11: [Float] = v5[0] in
    let v16: [Float] = v0[0] in
    let v17: Float = v16[0] in
    let v13: Float = v9[0] in
    let v23: Float = v12[0] in
    var v18: Float = v17 in
    v5[0] = v1 in
    var v33: [Float] = v6 in
    v3[0] = v13 in
    var v30: [Float] = v11 in
    let v31: Float = v23 / v13 in
    var v46: [[Float]] = v5 in
    let v34: Float = v7[0] in
    v46 = v5 in
    v30[0] = v34 in
    v3[0] = v18 in
    v46[0] = v30 in
    v5[0] = v33 in
    v33[0] = v31 in
    var v50: [[Float]] = v46 in
    v33[0] = v8 in
    v50
  } in
  let f20: (s0, s1) -> s0 = (v0: s0, v1: s1) -> s0 {
    let v3: [[Float]] = v0.p1 in
    let v2: s0 = v1.p1 in
    var v5: [[Float]] = v3 in
    let v4: s0 = v1.p0 in
    let v7: [Float] = v3[0] in
    let v10: [[Float]] = v4.p1 in
    var v6: [[Float]] = v10 in
    let v8: s0 = v1.p1 in
    let v9: [Float] = v6[0] in
    v6[0] = v7 in
    var v14: [[Float]] = v5 in
    v6 = v10 in
    let v12: [Float] = v14[0] in
    var v19: s1 = v1 in
    v6[1] = v9 in
    let v15: s0 = v19.p0 in
    v5[0] = v9 in
    var v16: s0 = v2 in
    v19.p0 = v16 in
    v6[1] = v9 in
    v6[0] = v12 in
    var v28: s0 = v0 in
    v16.p1 = v14 in
    v19.p0 = v4 in
    var v35: s1 = v19 in
    let v33: [[Float]] = v8.p2 in
    v19.p0 = v0 in
    let v51: [[Float]] = f21(v33) in
    v6[1] = v9 in
    let v46: s0 = v35.p1 in
    let v43: [[Float]] = v46.p2 in
    let v106: [[Float]] = f21(v43) in
    let v89: s0 = v35.p1 in
    let v37: [Float] = v5[0] in
    let v146: [[Float]] = f21(v51) in
    let v98: [[Float]] = v15.p1 in
    let v77: [[Float]] = f21(v146) in
    v14[0] = v37 in
    v35.p0 = v15 in
    v16.p2 = v77 in
    var v109: s1 = v35 in
    v16.p2 = v106 in
    let v80: s0 = v109.p0 in
    v109.p1 = v89 in
    var v113: [[Float]] = v98 in
    v28.p1 = v113 in
    v109.p0 = v8 in
    v19.p1 = v28 in
    v80
  } in
  let f19: (s0) -> s0 = (v0: s0) -> s0 {
    let v1: s1 = s1(v0, v0) in
    let v2: s0 = f20(v0, v1) in
    let v11: s0 = f20(v2, v1) in
    let v13: s0 = f20(v11, v1) in
    let v14: s0 = f20(v13, v1) in
    v14
  } in
  let noinline_f0: (s1, s0, Float) -> Float = (v0: s1, v1: s0, v2: Float) -> Float {
    let v7: s0 = v0.p0 in
    let v10: s0 = f19(v1) in
    let v3: s0 = f20(v10, v0) in
    let v6: [s0] = [v3, v1, v7, v1] in
    var v39: Float = v2 in
    let v26: s0 = v6[0] in
    let v21: [[Float]] = v26.p0 in
    var v34: [[Float]] = v21 in
    let v58: [Float] = v34[1] in
    var v33: [Float] = v58 in
    v34[2] = v58 in
    let v75: Float = v33[0] in
    let v244: Float = v75 / v39 in
    v244
  } in
  fun loop(i: Int, v0: s1, v1: s0, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1(s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]], [[5.0]]), s0([[6.0], [7.0], [8.0]], [[9.0], [10.0]], [[11.0]])) in
    let v1: s0 = s0([[12.0], [13.0], [14.0]], [[15.0], [16.0]], [[17.0]]) in
    let v2: Float = 18.0 in
    let initialResult: Float = 18.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()