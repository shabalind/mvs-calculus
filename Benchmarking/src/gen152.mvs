  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: Float
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: s0
    var p1: s0
  } in
  struct s3 {
    var p0: s1
    var p1: [s1]
  } in
  struct s4 {
    var p0: s0
  } in
  struct s5 {
    var p0: s4
    var p1: [s1]
  } in
  struct s8 {
    var p0: [[s1]]
    var p1: s3
  } in
  let f6: (s0) -> s0 = (v0: s0) -> s0 {
    let v6: [[Float]] = v0.p1 in
    var v8: s0 = v0 in
    let v9: [[Float]] = v8.p1 in
    let v14: s2 = s2(v8, v8) in
    let v19: s0 = v14.p0 in
    v8.p0 = v9 in
    var v24: [[Float]] = v9 in
    v8.p0 = v9 in
    let v18: [Float] = v24[2] in
    var v10: s0 = v19 in
    var v23: [[Float]] = v6 in
    var v31: s0 = v10 in
    v31.p0 = v23 in
    v23[1] = v18 in
    v10.p1 = v23 in
    let v96: [Float] = v24[2] in
    v23[1] = v96 in
    v31
  } in
  let noinline_f0: ([s8], [s5], s0, Float) -> Float = (v0: [s8], v1: [s5], v2: s0, v3: Float) -> Float {
    let v8: s8 = v0[1] in
    let v9: Float = v3 - v3 in
    let v7: s3 = v8.p1 in
    let v10: s0 = f6(v2) in
    let v23: [[Float]] = v10.p0 in
    let v17: [Float] = v23[1] in
    let v53: s1 = v7.p0 in
    var v24: s1 = v53 in
    v24.p0 = v9 in
    let v50: s1 = v7.p0 in
    v24.p0 = v3 in
    v24.p0 = v3 in
    let v72: Float = v17[0] in
    v24.p0 = v9 in
    v24 = v50 in
    let v97: Float = v24.p0 in
    v24.p0 = v72 in
    v97
  } in
  fun loop(i: Int, v0: [s8], v1: [s5], v2: s0, v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s8] = [s8([[s1(0.0, [[s0([[1.0], [2.0], [3.0]], [[4.0], [5.0], [6.0]])]])], [s1(7.0, [[s0([[8.0], [9.0], [10.0]], [[11.0], [12.0], [13.0]])]])], [s1(14.0, [[s0([[15.0], [16.0], [17.0]], [[18.0], [19.0], [20.0]])]])]], s3(s1(21.0, [[s0([[22.0], [23.0], [24.0]], [[25.0], [26.0], [27.0]])]]), [s1(28.0, [[s0([[29.0], [30.0], [31.0]], [[32.0], [33.0], [34.0]])]]), s1(35.0, [[s0([[36.0], [37.0], [38.0]], [[39.0], [40.0], [41.0]])]])])), s8([[s1(42.0, [[s0([[43.0], [44.0], [45.0]], [[46.0], [47.0], [48.0]])]])], [s1(49.0, [[s0([[50.0], [51.0], [52.0]], [[53.0], [54.0], [55.0]])]])], [s1(56.0, [[s0([[57.0], [58.0], [59.0]], [[60.0], [61.0], [62.0]])]])]], s3(s1(63.0, [[s0([[64.0], [65.0], [66.0]], [[67.0], [68.0], [69.0]])]]), [s1(70.0, [[s0([[71.0], [72.0], [73.0]], [[74.0], [75.0], [76.0]])]]), s1(77.0, [[s0([[78.0], [79.0], [80.0]], [[81.0], [82.0], [83.0]])]])])), s8([[s1(84.0, [[s0([[85.0], [86.0], [87.0]], [[88.0], [89.0], [90.0]])]])], [s1(91.0, [[s0([[92.0], [93.0], [94.0]], [[95.0], [96.0], [97.0]])]])], [s1(98.0, [[s0([[99.0], [100.0], [101.0]], [[102.0], [103.0], [104.0]])]])]], s3(s1(105.0, [[s0([[106.0], [107.0], [108.0]], [[109.0], [110.0], [111.0]])]]), [s1(112.0, [[s0([[113.0], [114.0], [115.0]], [[116.0], [117.0], [118.0]])]]), s1(119.0, [[s0([[120.0], [121.0], [122.0]], [[123.0], [124.0], [125.0]])]])]))] in
    let v1: [s5] = [s5(s4(s0([[126.0], [127.0], [128.0]], [[129.0], [130.0], [131.0]])), [s1(132.0, [[s0([[133.0], [134.0], [135.0]], [[136.0], [137.0], [138.0]])]])])] in
    let v2: s0 = s0([[139.0], [140.0], [141.0]], [[142.0], [143.0], [144.0]]) in
    let v3: Float = 145.0 in
    let initialResult: Float = 145.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()