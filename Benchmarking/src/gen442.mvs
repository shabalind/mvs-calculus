  struct s0 {
    var p0: [[Float]]
    var p1: [Float]
  } in
  let noinline_f0: ([s0], [s0], Float) -> Float = (v0: [s0], v1: [s0], v2: Float) -> Float {
    let v8: s0 = v0[1] in
    var v6: s0 = v8 in
    let v5: [Float] = v6.p1 in
    let v11: [Float] = v6.p1 in
    let v3: Float = v5[1] in
    let v12: [Float] = v8.p1 in
    let v9: [Float] = v6.p1 in
    v6.p1 = v9 in
    let v19: s0 = v0[2] in
    let v20: Float = v3 * v3 in
    let v16: s0 = v1[1] in
    v6.p1 = v12 in
    v6.p1 = v11 in
    let v42: [Float] = v16.p1 in
    v6.p1 = v42 in
    let v35: [[Float]] = v19.p0 in
    v6.p0 = v35 in
    v20
  } in
  fun loop(i: Int, v0: [s0], v1: [s0], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0], [2.0]], [3.0, 4.0]), s0([[5.0], [6.0], [7.0]], [8.0, 9.0]), s0([[10.0], [11.0], [12.0]], [13.0, 14.0])] in
    let v1: [s0] = [s0([[15.0], [16.0], [17.0]], [18.0, 19.0]), s0([[20.0], [21.0], [22.0]], [23.0, 24.0]), s0([[25.0], [26.0], [27.0]], [28.0, 29.0])] in
    let v2: Float = 30.0 in
    let initialResult: Float = 30.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()