  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s2 {
    var p0: [[s0]]
    var p1: s1
  } in
  struct s7 {
    var p0: s2
    var p1: [[s1]]
  } in
  let f25: (s0) -> s0 = (v0: s0) -> s0 {
    var v2: s0 = v0 in
    v2 = v0 in
    var v6: s0 = v0 in
    var v5: s0 = v2 in
    var v1: s0 = v6 in
    v6 = v1 in
    let v4: [[Float]] = v5.p1 in
    let v3: [Float] = v4[0] in
    let v8: Float = v3[0] in
    let v15: [Float] = v4[0] in
    var v7: [Float] = v3 in
    let v10: Float = v15[0] in
    v7[0] = v10 in
    v7[0] = v8 in
    let v23: [Float] = v4[0] in
    v7[0] = v10 in
    var v9: [[Float]] = v4 in
    v9[0] = v23 in
    let v13: [[Float]] = v5.p0 in
    var v22: s0 = v1 in
    var v17: s0 = v2 in
    v9[0] = v15 in
    v9[0] = v15 in
    var v31: [[Float]] = v13 in
    v22.p0 = v31 in
    let v42: [[Float]] = v22.p1 in
    var v18: s0 = v17 in
    var v14: [[Float]] = v31 in
    let v37: [Float] = v42[0] in
    v31[0] = v7 in
    v9[0] = v7 in
    v9[0] = v7 in
    v18.p0 = v14 in
    v31[1] = v37 in
    v17.p1 = v9 in
    v18
  } in
  let f24: (s0) -> s0 = (v0: s0) -> s0 {
    let v2: s0 = f25(v0) in
    let v3: [[Float]] = v2.p1 in
    let v7: [[Float]] = v2.p1 in
    let v5: [Float] = v3[0] in
    let v6: s0 = f25(v2) in
    var v11: [[Float]] = v7 in
    let v10: [Float] = v7[0] in
    var v14: [[Float]] = v7 in
    v14[0] = v10 in
    let v43: [Float] = v3[0] in
    let v52: s0 = f25(v2) in
    v11[0] = v10 in
    var v13: [[Float]] = v11 in
    let v36: [[Float]] = v0.p1 in
    var v23: [Float] = v43 in
    var v22: [[Float]] = v14 in
    let v99: s0 = f25(v6) in
    var v26: [Float] = v10 in
    let v25: s0 = f25(v52) in
    let v18: [[Float]] = v99.p0 in
    let v40: [[Float]] = v0.p0 in
    var v50: s0 = v0 in
    v50.p0 = v18 in
    let v30: [Float] = v18[1] in
    v50.p1 = v36 in
    v11[0] = v5 in
    v13[0] = v23 in
    v50.p0 = v40 in
    let v27: [[Float]] = v2.p1 in
    v50.p1 = v13 in
    let v77: s0 = f25(v25) in
    let v87: s0 = f25(v77) in
    v50.p1 = v7 in
    v22[0] = v30 in
    let v37: [[Float]] = v87.p1 in
    let v67: s0 = f25(v50) in
    let v49: [[Float]] = v77.p1 in
    let v101: s0 = f25(v67) in
    v50.p1 = v36 in
    v50.p1 = v27 in
    v11[0] = v5 in
    v14[0] = v5 in
    v50.p1 = v13 in
    v50.p1 = v49 in
    var v85: s0 = v101 in
    v14[0] = v23 in
    v22[0] = v5 in
    let v125: s0 = f25(v85) in
    let v65: Float = v10[0] in
    let v100: [[Float]] = v25.p0 in
    v26[0] = v65 in
    v50.p1 = v37 in
    v85.p1 = v22 in
    v13[0] = v26 in
    v50.p0 = v100 in
    v125
  } in
  let f16: (s0) -> s0 = (v0: s0) -> s0 {
    var v3: s0 = v0 in
    let v5: [[Float]] = v0.p0 in
    let v6: s0 = f25(v0) in
    v3.p0 = v5 in
    let v18: s0 = f25(v0) in
    let v11: [[Float]] = v3.p1 in
    var v25: s0 = v6 in
    let v14: s0 = f24(v25) in
    let v17: [[Float]] = v18.p0 in
    v3.p0 = v17 in
    var v34: s0 = v3 in
    let v72: s0 = f24(v14) in
    let v40: s0 = f24(v14) in
    v34.p1 = v11 in
    let v41: [[Float]] = v72.p0 in
    v34.p1 = v11 in
    v3.p0 = v41 in
    let v28: [[Float]] = v6.p1 in
    v3.p1 = v28 in
    let v24: [[Float]] = v40.p1 in
    v25.p1 = v28 in
    v25.p1 = v24 in
    v34
  } in
  let noinline_f0: (s7, s0, Float) -> Float = (v0: s7, v1: s0, v2: Float) -> Float {
    let v4: [[Float]] = v1.p1 in
    let v6: [Float] = v4[0] in
    let v10: s0 = f16(v1) in
    let v15: [Float] = v4[0] in
    let v80: [Float] = v4[0] in
    let v41: Float = v15[0] in
    var v38: [Float] = v6 in
    let v30: [[Float]] = v10.p0 in
    let v54: Float = v38[0] in
    var v52: [[Float]] = v30 in
    var v81: Float = v2 in
    let v177: [Float] = v52[0] in
    v52[1] = v38 in
    var v116: [Float] = v38 in
    v38 = v116 in
    v52[1] = v80 in
    v38[0] = v54 in
    let v144: [Float] = [v2, v41, v54, v81] in
    let v270: Float = v144[2] in
    v38 = v177 in
    v270
  } in
  fun loop(i: Int, v0: s7, v1: s0, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s7 = s7(s2([[s0([[0.0], [1.0]], [[2.0]])], [s0([[3.0], [4.0]], [[5.0]])]], s1([s0([[6.0], [7.0]], [[8.0]]), s0([[9.0], [10.0]], [[11.0]])], [s0([[12.0], [13.0]], [[14.0]])])), [[s1([s0([[15.0], [16.0]], [[17.0]]), s0([[18.0], [19.0]], [[20.0]])], [s0([[21.0], [22.0]], [[23.0]])])], [s1([s0([[24.0], [25.0]], [[26.0]]), s0([[27.0], [28.0]], [[29.0]])], [s0([[30.0], [31.0]], [[32.0]])])], [s1([s0([[33.0], [34.0]], [[35.0]]), s0([[36.0], [37.0]], [[38.0]])], [s0([[39.0], [40.0]], [[41.0]])])]]) in
    let v1: s0 = s0([[42.0], [43.0]], [[44.0]]) in
    let v2: Float = 45.0 in
    let initialResult: Float = 45.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()