  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  let f23: (Float) -> Float = (v0: Float) -> Float {
    var v7: Float = v0 in
    var v5: Float = v0 in
    var v2: Float = v5 in
    var v1: Float = v2 in
    var v6: Float = v7 in
    let v4: Float = v6 / v7 in
    var v8: Float = v4 in
    var v19: Float = v4 in
    v6 = v1 in
    let v15: Float = v8 / v19 in
    let v9: [Float] = [v1, v6, v15, v19, v8, v1, v0] in
    var v35: [Float] = v9 in
    let v13: Float = v35[1] in
    let v25: [Float] = [v1] in
    let v31: Float = v25[0] in
    let v24: [[Float]] = [v35, v35] in
    v35[6] = v13 in
    let v49: [Float] = v24[1] in
    var v12: [Float] = v25 in
    v35[5] = v4 in
    let v75: Float = v12[0] in
    let v43: Float = v49[1] in
    v7 = v31 in
    v35[3] = v75 in
    v43
  } in
  let noinline_f0: ([s1], s0, Float) -> Float = (v0: [s1], v1: s0, v2: Float) -> Float {
    var v36: Float = v2 in
    var v22: Float = v36 in
    let v15: Float = f23(v2) in
    let v40: Float = f23(v15) in
    let v25: Float = f23(v40) in
    let v28: Float = v2 / v22 in
    let v42: Float = v28 + v25 in
    v36 = v28 in
    v42
  } in
  fun loop(i: Int, v0: [s1], v1: s0, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1([s0([[0.0]], [[1.0]])], s0([[2.0]], [[3.0]]))] in
    let v1: s0 = s0([[4.0]], [[5.0]]) in
    let v2: Float = 6.0 in
    let initialResult: Float = 6.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()