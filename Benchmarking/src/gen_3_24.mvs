  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  let noinline_f0: ([[s1]], [[s0]], Float) -> Float = (v0: [[s1]], v1: [[s0]], v2: Float) -> Float {
    var v8: [[s0]] = v1 in
    let v4: [s0] = v8[1] in
    let v6: s0 = v4[0] in
    let v17: [s0] = v8[0] in
    let v12: [[Float]] = v6.p0 in
    let v5: [s0] = v1[1] in
    let v14: [Float] = v12[0] in
    v8[0] = v5 in
    v8[1] = v17 in
    let v34: Float = v14[0] in
    v8[1] = v5 in
    v34
  } in
  fun loop(i: Int, v0: [[s1]], v1: [[s0]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s1]] = [[s1(s0([[0.0]], [[1.0], [2.0]]), s0([[3.0]], [[4.0], [5.0]]))], [s1(s0([[6.0]], [[7.0], [8.0]]), s0([[9.0]], [[10.0], [11.0]]))]] in
    let v1: [[s0]] = [[s0([[12.0]], [[13.0], [14.0]])], [s0([[15.0]], [[16.0], [17.0]])]] in
    let v2: Float = 18.0 in
    let initialResult: Float = 18.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()