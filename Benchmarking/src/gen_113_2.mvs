  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
    var p2: [s0]
  } in
  struct s2 {
    var p0: [s0]
    var p1: s1
  } in
  let f37: (s0, s0) -> s0 = (v0: s0, v1: s0) -> s0 {
    let v3: [[Float]] = v1.p1 in
    let v4: [[Float]] = v0.p1 in
    let v7: [[Float]] = v1.p0 in
    var v6: [[Float]] = v7 in
    let v8: [Float] = v6[0] in
    let v2: [[Float]] = v0.p1 in
    let v13: s0 = s0(v7, v2) in
    var v5: [Float] = v8 in
    let v9: Float = v8[0] in
    let v15: [Float] = v7[0] in
    v6[0] = v5 in
    let v16: [[Float]] = v0.p0 in
    v6[0] = v15 in
    let v20: Float = v8[0] in
    let v12: [Float] = v7[0] in
    var v23: [[Float]] = v2 in
    var v10: [[Float]] = v3 in
    let v21: s0 = s0(v16, v2) in
    v23 = v2 in
    var v25: [[Float]] = v10 in
    var v18: Float = v9 in
    let v14: [[Float]] = v13.p0 in
    let v42: Float = v15[0] in
    v6[0] = v12 in
    var v19: [[Float]] = v7 in
    let v17: [Float] = v10[2] in
    let v50: [Float] = v16[0] in
    let v27: Float = v20 + v18 in
    v10 = v23 in
    var v35: [[Float]] = v14 in
    let v31: [[Float]] = v0.p1 in
    let v39: [[Float]] = v21.p1 in
    let v30: s0 = s0(v19, v4) in
    var v72: Float = v18 in
    var v49: [[Float]] = v35 in
    let v38: [[[Float]]] = [v23, v23, v25, v10, v39, v31, v2] in
    var v56: Float = v27 in
    let v54: [Float] = [v56, v72, v27, v56, v9] in
    let v32: [[Float]] = v38[6] in
    var v46: Float = v42 in
    let v115: [[[Float]]] = [v49, v6] in
    var v37: s0 = v21 in
    v37.p1 = v23 in
    let v41: s0 = s0(v16, v32) in
    var v128: s0 = v30 in
    v37.p1 = v4 in
    let v67: s0 = s0(v14, v32) in
    var v95: Float = v46 in
    v37.p1 = v3 in
    let v152: [[Float]] = v13.p0 in
    let v71: [[Float]] = v115[1] in
    v128.p1 = v3 in
    v128.p0 = v71 in
    let v80: [s0] = [v30, v21, v128, v1, v21] in
    v128.p1 = v3 in
    v128.p0 = v152 in
    let v92: [[Float]] = v37.p1 in
    let v184: [Float] = v92[1] in
    v35[0] = v17 in
    let v83: [[Float]] = v115[1] in
    v19[0] = v5 in
    let v113: [[Float]] = v37.p0 in
    let v63: s0 = s0(v83, v2) in
    v128 = v67 in
    v37.p0 = v14 in
    v128.p0 = v19 in
    let v82: s0 = v80[4] in
    v128.p0 = v152 in
    let v77: [s0] = [v0, v63, v1, v30, v67, v41, v67] in
    var v94: [Float] = v54 in
    v49[0] = v184 in
    var v121: [s0] = v77 in
    v37.p1 = v2 in
    let v86: [Float] = v14[0] in
    v128.p0 = v113 in
    var v166: [s0] = v121 in
    v25[0] = v50 in
    v166[3] = v13 in
    var v244: [[Float]] = v4 in
    v128.p1 = v92 in
    let v230: Float = v94[4] in
    v5[0] = v230 in
    let v191: s0 = v166[3] in
    v5[0] = v95 in
    v19 = v113 in
    v128.p1 = v244 in
    v23[1] = v8 in
    let v132: [[Float]] = v82.p0 in
    v37.p0 = v132 in
    v5 = v86 in
    v191
  } in
  let f2: (s0, Float) -> Float = (v0: s0, v1: Float) -> Float {
    var v7: s0 = v0 in
    let v3: s0 = f37(v7, v7) in
    var v5: Float = v1 in
    var v6: Float = v1 in
    var v9: s0 = v7 in
    let v2: s0 = f37(v9, v7) in
    var v17: s0 = v3 in
    let v10: [[Float]] = v17.p1 in
    let v14: [Float] = v10[0] in
    let v34: [[Float]] = v2.p0 in
    let v16: Float = v14[0] in
    let v20: Float = v14[0] in
    let v21: Float = v14[0] in
    var v69: [[Float]] = v10 in
    v7 = v9 in
    let v46: [Float] = [v16, v20, v6, v1, v5, v6, v21] in
    var v24: [Float] = v46 in
    v17.p1 = v69 in
    v17.p0 = v34 in
    v17.p1 = v69 in
    v24[0] = v1 in
    let v26: Float = v24[3] in
    v26
  } in
  let noinline_f0: (s2, [s1], s0, [s2], Float) -> Float = (v0: s2, v1: [s1], v2: s0, v3: [s2], v4: Float) -> Float {
    let v16: s1 = v0.p1 in
    let v20: s0 = v16.p1 in
    let v29: [[Float]] = v20.p1 in
    let v43: [Float] = v29[2] in
    let v58: Float = v43[0] in
    let v84: Float = f2(v2, v58) in
    v84
  } in
  fun loop(i: Int, v0: s2, v1: [s1], v2: s0, v3: [s2], v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2([s0([[0.0]], [[1.0], [2.0], [3.0]])], s1(s0([[4.0]], [[5.0], [6.0], [7.0]]), s0([[8.0]], [[9.0], [10.0], [11.0]]), [s0([[12.0]], [[13.0], [14.0], [15.0]]), s0([[16.0]], [[17.0], [18.0], [19.0]]), s0([[20.0]], [[21.0], [22.0], [23.0]])])) in
    let v1: [s1] = [s1(s0([[24.0]], [[25.0], [26.0], [27.0]]), s0([[28.0]], [[29.0], [30.0], [31.0]]), [s0([[32.0]], [[33.0], [34.0], [35.0]]), s0([[36.0]], [[37.0], [38.0], [39.0]]), s0([[40.0]], [[41.0], [42.0], [43.0]])]), s1(s0([[44.0]], [[45.0], [46.0], [47.0]]), s0([[48.0]], [[49.0], [50.0], [51.0]]), [s0([[52.0]], [[53.0], [54.0], [55.0]]), s0([[56.0]], [[57.0], [58.0], [59.0]]), s0([[60.0]], [[61.0], [62.0], [63.0]])]), s1(s0([[64.0]], [[65.0], [66.0], [67.0]]), s0([[68.0]], [[69.0], [70.0], [71.0]]), [s0([[72.0]], [[73.0], [74.0], [75.0]]), s0([[76.0]], [[77.0], [78.0], [79.0]]), s0([[80.0]], [[81.0], [82.0], [83.0]])])] in
    let v2: s0 = s0([[84.0]], [[85.0], [86.0], [87.0]]) in
    let v3: [s2] = [s2([s0([[88.0]], [[89.0], [90.0], [91.0]])], s1(s0([[92.0]], [[93.0], [94.0], [95.0]]), s0([[96.0]], [[97.0], [98.0], [99.0]]), [s0([[100.0]], [[101.0], [102.0], [103.0]]), s0([[104.0]], [[105.0], [106.0], [107.0]]), s0([[108.0]], [[109.0], [110.0], [111.0]])])), s2([s0([[112.0]], [[113.0], [114.0], [115.0]])], s1(s0([[116.0]], [[117.0], [118.0], [119.0]]), s0([[120.0]], [[121.0], [122.0], [123.0]]), [s0([[124.0]], [[125.0], [126.0], [127.0]]), s0([[128.0]], [[129.0], [130.0], [131.0]]), s0([[132.0]], [[133.0], [134.0], [135.0]])]))] in
    let v4: Float = 136.0 in
    let initialResult: Float = 136.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()