  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s1]
    var p1: s0
  } in
  let f62: ([s2]) -> [s2] = (v0: [s2]) -> [s2] {
    v0
  } in
  let noinline_f0: ([[s2]], Float) -> Float = (v0: [[s2]], v1: Float) -> Float {
    var v5: Float = v1 in
    let v2: [Float] = [v1, v5, v1, v5] in
    let v10: Float = v2[0] in
    var v8: Float = v10 in
    let v17: [s2] = v0[0] in
    let v28: [s2] = f62(v17) in
    let v14: s2 = v28[0] in
    let v16: s0 = v14.p1 in
    let v29: [[Float]] = v16.p1 in
    let v40: [Float] = v29[0] in
    let v107: Float = v40[0] in
    let v94: Float = v8 / v107 in
    v94
  } in
  fun loop(i: Int, v0: [[s2]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s2]] = [[s2([s1(s0([[0.0]], [[1.0], [2.0]]), s0([[3.0]], [[4.0], [5.0]]))], s0([[6.0]], [[7.0], [8.0]]))]] in
    let v1: Float = 9.0 in
    let initialResult: Float = 9.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()