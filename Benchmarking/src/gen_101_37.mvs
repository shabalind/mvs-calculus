  struct s0 {
    var p0: [Float]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s2 {
    var p0: [[s1]]
    var p1: [s0]
  } in
  struct s4 {
    var p0: [[s0]]
    var p1: [[s0]]
  } in
  struct s7 {
    var p0: [[s4]]
    var p1: s1
  } in
  let noinline_f0: ([s2], s7, Float) -> Float = (v0: [s2], v1: s7, v2: Float) -> Float {
    let v4: s2 = v0[0] in
    let v13: [s0] = v4.p1 in
    let v5: s0 = v13[0] in
    let v11: [Float] = v5.p0 in
    let v24: Float = v11[0] in
    let v23: [Float] = v5.p0 in
    let v36: Float = v24 - v2 in
    let v71: Float = v36 / v24 in
    let v35: Float = v23[0] in
    let v45: Float = v35 - v71 in
    let v380: Float = v45 + v71 in
    v380
  } in
  fun loop(i: Int, v0: [s2], v1: s7, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2([[s1([s0([0.0], [[1.0]]), s0([2.0], [[3.0]])], [s0([4.0], [[5.0]]), s0([6.0], [[7.0]])])]], [s0([8.0], [[9.0]]), s0([10.0], [[11.0]]), s0([12.0], [[13.0]])])] in
    let v1: s7 = s7([[s4([[s0([14.0], [[15.0]])]], [[s0([16.0], [[17.0]])]])], [s4([[s0([18.0], [[19.0]])]], [[s0([20.0], [[21.0]])]])], [s4([[s0([22.0], [[23.0]])]], [[s0([24.0], [[25.0]])]])]], s1([s0([26.0], [[27.0]]), s0([28.0], [[29.0]])], [s0([30.0], [[31.0]]), s0([32.0], [[33.0]])])) in
    let v2: Float = 34.0 in
    let initialResult: Float = 34.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()