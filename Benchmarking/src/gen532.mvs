  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s4 {
    var p0: [[s0]]
    var p1: [[s0]]
  } in
  struct s7 {
    var p0: s0
    var p1: s0
  } in
  struct s8 {
    var p0: s4
    var p1: [s7]
  } in
  let f2: (Float) -> Float = (v0: Float) -> Float {
    var v3: Float = v0 in
    var v6: Float = v3 in
    var v4: Float = v6 in
    var v7: Float = v0 in
    var v5: Float = v3 in
    var v11: Float = v0 in
    var v8: Float = v4 in
    let v2: [Float] = [v5, v3, v4, v8, v3, v7] in
    let v1: Float = v11 * v8 in
    let v10: Float = v2[0] in
    let v12: Float = v2[5] in
    let v9: Float = v2[2] in
    var v17: Float = v9 in
    let v16: [[Float]] = [v2, v2] in
    let v19: [Float] = [v12, v6, v17] in
    var v43: Float = v1 in
    var v22: [Float] = v2 in
    let v35: [Float] = v16[1] in
    let v20: [Float] = v16[1] in
    v22[4] = v12 in
    var v25: [Float] = v19 in
    let v37: Float = v25[2] in
    var v34: [Float] = v22 in
    var v61: Float = v1 in
    var v45: Float = v37 in
    var v40: [Float] = v20 in
    var v76: [Float] = v2 in
    var v39: Float = v43 in
    v34 = v22 in
    v76 = v35 in
    let v63: Float = v17 / v39 in
    let v50: Float = v34[3] in
    v40[2] = v12 in
    v34[3] = v3 in
    let v67: Float = v76[2] in
    let v83: Float = v50 / v67 in
    v22[4] = v63 in
    v17 = v45 in
    v34 = v40 in
    let v131: Float = v83 / v10 in
    v5 = v0 in
    v40[0] = v61 in
    v34[1] = v3 in
    v131
  } in
  let noinline_f0: ([s8], Float) -> Float = (v0: [s8], v1: Float) -> Float {
    var v3: Float = v1 in
    let v7: Float = f2(v1) in
    let v5: [Float] = [v1, v7, v1, v1, v3] in
    let v24: Float = v5[3] in
    let v57: Float = f2(v3) in
    v3 = v57 in
    v24
  } in
  fun loop(i: Int, v0: [s8], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s8] = [s8(s4([[s0([[0.0]], [[1.0], [2.0], [3.0]])], [s0([[4.0]], [[5.0], [6.0], [7.0]])], [s0([[8.0]], [[9.0], [10.0], [11.0]])]], [[s0([[12.0]], [[13.0], [14.0], [15.0]])], [s0([[16.0]], [[17.0], [18.0], [19.0]])], [s0([[20.0]], [[21.0], [22.0], [23.0]])]]), [s7(s0([[24.0]], [[25.0], [26.0], [27.0]]), s0([[28.0]], [[29.0], [30.0], [31.0]])), s7(s0([[32.0]], [[33.0], [34.0], [35.0]]), s0([[36.0]], [[37.0], [38.0], [39.0]]))]), s8(s4([[s0([[40.0]], [[41.0], [42.0], [43.0]])], [s0([[44.0]], [[45.0], [46.0], [47.0]])], [s0([[48.0]], [[49.0], [50.0], [51.0]])]], [[s0([[52.0]], [[53.0], [54.0], [55.0]])], [s0([[56.0]], [[57.0], [58.0], [59.0]])], [s0([[60.0]], [[61.0], [62.0], [63.0]])]]), [s7(s0([[64.0]], [[65.0], [66.0], [67.0]]), s0([[68.0]], [[69.0], [70.0], [71.0]])), s7(s0([[72.0]], [[73.0], [74.0], [75.0]]), s0([[76.0]], [[77.0], [78.0], [79.0]]))])] in
    let v1: Float = 80.0 in
    let initialResult: Float = 80.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()