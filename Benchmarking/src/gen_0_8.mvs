  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: [[s0]]
  } in
  let f108: ([Float]) -> [Float] = (v0: [Float]) -> [Float] {
    let v4: Float = v0[1] in
    var v2: Float = v4 in
    var v7: Float = v2 in
    var v5: [Float] = v0 in
    var v11: [Float] = v5 in
    v5[0] = v4 in
    let v18: Float = v0[0] in
    v11[1] = v4 in
    let v13: Float = v18 - v4 in
    let v10: [Float] = [v13, v18] in
    var v14: [Float] = v5 in
    var v22: [Float] = v5 in
    let v12: [[Float]] = [v14, v11, v11, v5, v14, v5] in
    let v20: Float = v10[0] in
    let v30: Float = v22[0] in
    let v32: [[[Float]]] = [v12, v12, v12, v12, v12] in
    var v43: [[[Float]]] = v32 in
    var v57: Float = v30 in
    var v58: Float = v57 in
    v5[0] = v7 in
    let v40: [[Float]] = v43[0] in
    v5[0] = v20 in
    let v85: [Float] = v40[2] in
    v11[1] = v58 in
    v85
  } in
  let f106: (Float) -> Float = (v0: Float) -> Float {
    var v7: Float = v0 in
    var v3: Float = v7 in
    var v4: Float = v7 in
    var v6: Float = v0 in
    var v8: Float = v0 in
    var v10: Float = v8 in
    let v11: [Float] = [v6, v3, v4] in
    let v5: Float = v11[2] in
    let v1: [Float] = f108(v11) in
    var v13: [Float] = v1 in
    let v22: [Float] = f108(v13) in
    v4 = v10 in
    let v64: [Float] = f108(v1) in
    v13[1] = v5 in
    let v20: [Float] = f108(v22) in
    let v43: [Float] = f108(v22) in
    let v48: [Float] = f108(v11) in
    let v31: [Float] = f108(v64) in
    var v38: Float = v8 in
    let v51: Float = v20[0] in
    v8 = v38 in
    let v32: Float = v31[2] in
    let v19: Float = v43[2] in
    let v34: Float = v1[0] in
    v13[1] = v0 in
    var v97: Float = v10 in
    let v41: [Float] = f108(v48) in
    v8 = v32 in
    var v140: Float = v10 in
    let v85: [Float] = [v34, v19, v32, v97, v140, v51, v6] in
    var v42: [Float] = v85 in
    v42 = v85 in
    let v103: Float = v41[1] in
    let v81: Float = v42[4] in
    var v87: [Float] = v85 in
    var v100: [Float] = v87 in
    v13[2] = v103 in
    v100[2] = v81 in
    let v105: Float = v100[5] in
    v105
  } in
  let noinline_f0: ([[s1]], Float) -> Float = (v0: [[s1]], v1: Float) -> Float {
    let v2: Float = f106(v1) in
    let v6: [Float] = [v2] in
    let v13: Float = f106(v2) in
    var v20: Float = v1 in
    let v10: Float = f106(v13) in
    let v14: Float = v10 * v13 in
    let v21: Float = f106(v20) in
    var v15: [Float] = v6 in
    let v23: Float = f106(v2) in
    v15[0] = v21 in
    v15 = v6 in
    var v30: Float = v14 in
    var v59: Float = v10 in
    v15[0] = v13 in
    var v40: [Float] = v15 in
    v20 = v21 in
    var v192: Float = v10 in
    var v101: [Float] = v40 in
    v101[0] = v30 in
    v40 = v15 in
    v40[0] = v59 in
    v101[0] = v23 in
    v40[0] = v30 in
    v15[0] = v14 in
    v15[0] = v30 in
    v20 = v192 in
    let v224: Float = v101[0] in
    v224
  } in
  fun loop(i: Int, v0: [[s1]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s1]] = [[s1([[s0([[0.0], [1.0]], [[2.0], [3.0]])], [s0([[4.0], [5.0]], [[6.0], [7.0]])]], [[s0([[8.0], [9.0]], [[10.0], [11.0]])]])], [s1([[s0([[12.0], [13.0]], [[14.0], [15.0]])], [s0([[16.0], [17.0]], [[18.0], [19.0]])]], [[s0([[20.0], [21.0]], [[22.0], [23.0]])]])], [s1([[s0([[24.0], [25.0]], [[26.0], [27.0]])], [s0([[28.0], [29.0]], [[30.0], [31.0]])]], [[s0([[32.0], [33.0]], [[34.0], [35.0]])]])]] in
    let v1: Float = 36.0 in
    let initialResult: Float = 36.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()