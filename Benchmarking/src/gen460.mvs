  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: s1
  } in
  let noinline_f0: (s2, Float) -> Float = (v0: s2, v1: Float) -> Float {
    let v3: [s0] = v0.p0 in
    let v21: s0 = v3[0] in
    let v13: [[Float]] = v21.p1 in
    let v17: [Float] = v13[0] in
    var v30: Float = v1 in
    let v51: Float = v17[0] in
    let v96: [Float] = v13[0] in
    var v75: [Float] = v96 in
    v75[0] = v30 in
    let v116: Float = v75[0] in
    v75[0] = v51 in
    var v162: Float = v116 in
    v162
  } in
  fun loop(i: Int, v0: s2, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2([s0([[0.0], [1.0]], [[2.0]])], s1(s0([[3.0], [4.0]], [[5.0]]), s0([[6.0], [7.0]], [[8.0]]))) in
    let v1: Float = 9.0 in
    let initialResult: Float = 9.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()