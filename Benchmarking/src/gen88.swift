  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: [s1]
    var p1: [[s0]]
  }
  @inline(never)
  func f0(_ v0: [[s2]], _ v1: s1, _ v2: Double) -> Double {
    let v4: [s0] = v1.p1
    let v6: s0 = v1.p0
    let v3: s0 = v4[0]
    var v8: s1 = v1
    let v15: s0 = v8.p0
    v8.p1 = v4
    let v18: [[Double]] = v6.p0
    var v19: s0 = v3
    var v31: s0 = v6
    var v24: [[Double]] = v18
    let v27: [[Double]] = v15.p0
    let v62: [Double] = v27[0]
    let v43: [Double] = v27[1]
    v8.p0 = v19
    v8.p0 = v31
    var v47: [Double] = v43
    v31.p0 = v24
    v47[0] = v2
    v24 = v18
    v8.p0 = v6
    var v84: [Double] = v47
    let v70: Double = v84[0]
    v24[1] = v62
    return v70
  }
  func benchmark() {
    let v0: [[s2]] = [[s2(p0: [s1(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0]], p2: [[3.0], [4.0], [5.0]]), p1: [s0(p0: [[6.0], [7.0]], p1: [[8.0]], p2: [[9.0], [10.0], [11.0]])]), s1(p0: s0(p0: [[12.0], [13.0]], p1: [[14.0]], p2: [[15.0], [16.0], [17.0]]), p1: [s0(p0: [[18.0], [19.0]], p1: [[20.0]], p2: [[21.0], [22.0], [23.0]])])], p1: [[s0(p0: [[24.0], [25.0]], p1: [[26.0]], p2: [[27.0], [28.0], [29.0]])], [s0(p0: [[30.0], [31.0]], p1: [[32.0]], p2: [[33.0], [34.0], [35.0]])], [s0(p0: [[36.0], [37.0]], p1: [[38.0]], p2: [[39.0], [40.0], [41.0]])]])], [s2(p0: [s1(p0: s0(p0: [[42.0], [43.0]], p1: [[44.0]], p2: [[45.0], [46.0], [47.0]]), p1: [s0(p0: [[48.0], [49.0]], p1: [[50.0]], p2: [[51.0], [52.0], [53.0]])]), s1(p0: s0(p0: [[54.0], [55.0]], p1: [[56.0]], p2: [[57.0], [58.0], [59.0]]), p1: [s0(p0: [[60.0], [61.0]], p1: [[62.0]], p2: [[63.0], [64.0], [65.0]])])], p1: [[s0(p0: [[66.0], [67.0]], p1: [[68.0]], p2: [[69.0], [70.0], [71.0]])], [s0(p0: [[72.0], [73.0]], p1: [[74.0]], p2: [[75.0], [76.0], [77.0]])], [s0(p0: [[78.0], [79.0]], p1: [[80.0]], p2: [[81.0], [82.0], [83.0]])]])]]
    let v1: s1 = s1(p0: s0(p0: [[84.0], [85.0]], p1: [[86.0]], p2: [[87.0], [88.0], [89.0]]), p1: [s0(p0: [[90.0], [91.0]], p1: [[92.0]], p2: [[93.0], [94.0], [95.0]])])
    let v2: Double = 96.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 96.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
