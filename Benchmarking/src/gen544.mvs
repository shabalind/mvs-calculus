  let noinline_f0: ([[Float]], [[Float]], [[Float]], [[Float]], [[Float]], [Float], Float, [[Float]]) -> Float = (v0: [[Float]], v1: [[Float]], v2: [[Float]], v3: [[Float]], v4: [[Float]], v5: [Float], v6: Float, v7: [[Float]]) -> Float {
    let v11: [Float] = v1[1] in
    let v20: [Float] = v2[0] in
    var v12: Float = v6 in
    let v15: Float = v11[0] in
    let v9: Float = v20[0] in
    let v13: Float = v20[0] in
    let v59: [Float] = [v13, v15, v9, v6, v12] in
    let v77: Float = v11[0] in
    v12 = v77 in
    let v132: [[Float]] = [v59, v59] in
    let v105: [Float] = v132[0] in
    let v154: Float = v105[3] in
    v154
  } in
  fun loop(i: Int, v0: [[Float]], v1: [[Float]], v2: [[Float]], v3: [[Float]], v4: [[Float]], v5: [Float], v6: Float, v7: [[Float]], result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4, v5, v6, v7) in
      loop(i + 1, v0, v1, v2, v3, v4, v5, v6, v7, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0]] in
    let v1: [[Float]] = [[1.0], [2.0], [3.0]] in
    let v2: [[Float]] = [[4.0]] in
    let v3: [[Float]] = [[5.0], [6.0], [7.0]] in
    let v4: [[Float]] = [[8.0], [9.0], [10.0]] in
    let v5: [Float] = [11.0] in
    let v6: Float = 12.0 in
    let v7: [[Float]] = [[13.0]] in
    let initialResult: Float = [[13.0]] in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, v5, v6, v7, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()