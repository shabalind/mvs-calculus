  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s2 {
    var p0: [[s0]]
    var p1: s0
  } in
  struct s3 {
    var p0: [s0]
    var p1: s2
  } in
  let f80: ([s0]) -> [s0] = (v0: [s0]) -> [s0] {
    let v2: [[s0]] = [v0] in
    var v8: [[s0]] = v2 in
    var v9: [[s0]] = v8 in
    let v38: [s0] = v9[0] in
    v9 = v8 in
    v8[0] = v0 in
    v8[0] = v38 in
    v9 = v8 in
    v8[0] = v0 in
    let v49: [s0] = v8[0] in
    v49
  } in
  let f57: (Float, s1) -> Float = (v0: Float, v1: s1) -> Float {
    let v5: [s0] = v1.p1 in
    let v4: [s0] = f80(v5) in
    let v9: s0 = v5[0] in
    let v13: s0 = v4[1] in
    let v26: [[Float]] = v9.p0 in
    let v57: [[Float]] = v13.p0 in
    var v51: [[Float]] = v57 in
    let v43: [[[Float]]] = [v57, v51, v26, v51] in
    let v124: [[Float]] = v43[2] in
    let v82: [Float] = v124[0] in
    let v120: Float = v82[0] in
    v120
  } in
  let noinline_f0: (s1, s3, Float) -> Float = (v0: s1, v1: s3, v2: Float) -> Float {
    let v3: Float = f57(v2, v0) in
    var v7: Float = v2 in
    v7 = v3 in
    var v39: Float = v7 in
    v39
  } in
  fun loop(i: Int, v0: s1, v1: s3, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([s0([[0.0]], [[1.0], [2.0]]), s0([[3.0]], [[4.0], [5.0]]), s0([[6.0]], [[7.0], [8.0]])], [s0([[9.0]], [[10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0]])]) in
    let v1: s3 = s3([s0([[15.0]], [[16.0], [17.0]])], s2([[s0([[18.0]], [[19.0], [20.0]])]], s0([[21.0]], [[22.0], [23.0]]))) in
    let v2: Float = 24.0 in
    let initialResult: Float = 24.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()