  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  let f29: ([s1]) -> [s1] = (v0: [s1]) -> [s1] {
    var v7: [s1] = v0 in
    v7
  } in
  let f23: ([s1]) -> [s1] = (v0: [s1]) -> [s1] {
    let v7: [s1] = f29(v0) in
    let v1: s1 = v7[0] in
    var v15: [s1] = v7 in
    v15[0] = v1 in
    var v50: [s1] = v15 in
    v15 = v50 in
    v15
  } in
  let noinline_f0: ([s1], Float) -> Float = (v0: [s1], v1: Float) -> Float {
    let v7: [s1] = f23(v0) in
    let v2: s1 = v7[0] in
    let v8: [s0] = v2.p0 in
    let v5: s0 = v8[1] in
    let v9: Float = v1 / v1 in
    let v10: [[Float]] = v5.p1 in
    let v18: [Float] = v10[2] in
    let v27: Float = v18[0] in
    let v146: Float = v9 + v27 in
    v146
  } in
  fun loop(i: Int, v0: [s1], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1([s0([[0.0]], [[1.0], [2.0], [3.0]]), s0([[4.0]], [[5.0], [6.0], [7.0]]), s0([[8.0]], [[9.0], [10.0], [11.0]])], s0([[12.0]], [[13.0], [14.0], [15.0]]))] in
    let v1: Float = 16.0 in
    let initialResult: Float = 16.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()