  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: [s0]
  } in
  let noinline_f0: (s1, [s2], s2, s1, Float) -> Float = (v0: s1, v1: [s2], v2: s2, v3: s1, v4: Float) -> Float {
    let v8: s0 = v3.p1 in
    var v5: s0 = v8 in
    var v7: s0 = v5 in
    let v31: [[Float]] = v7.p1 in
    v5.p1 = v31 in
    var v33: [[Float]] = v31 in
    var v46: [[Float]] = v31 in
    let v53: [Float] = v33[0] in
    v46[0] = v53 in
    let v23: [Float] = v46[0] in
    v33[0] = v23 in
    var v90: [[Float]] = v33 in
    v90[0] = v53 in
    v90[0] = v53 in
    var v96: [[Float]] = v90 in
    v33[0] = v53 in
    v5.p1 = v31 in
    let v87: [Float] = v96[0] in
    v46[0] = v53 in
    let v171: Float = v87[0] in
    v171
  } in
  fun loop(i: Int, v0: s1, v1: [s2], v2: s2, v3: s1, v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1(s0([[0.0]], [[1.0], [2.0]]), s0([[3.0]], [[4.0], [5.0]])) in
    let v1: [s2] = [s2([s0([[6.0]], [[7.0], [8.0]]), s0([[9.0]], [[10.0], [11.0]])], [s0([[12.0]], [[13.0], [14.0]]), s0([[15.0]], [[16.0], [17.0]])]), s2([s0([[18.0]], [[19.0], [20.0]]), s0([[21.0]], [[22.0], [23.0]])], [s0([[24.0]], [[25.0], [26.0]]), s0([[27.0]], [[28.0], [29.0]])]), s2([s0([[30.0]], [[31.0], [32.0]]), s0([[33.0]], [[34.0], [35.0]])], [s0([[36.0]], [[37.0], [38.0]]), s0([[39.0]], [[40.0], [41.0]])])] in
    let v2: s2 = s2([s0([[42.0]], [[43.0], [44.0]]), s0([[45.0]], [[46.0], [47.0]])], [s0([[48.0]], [[49.0], [50.0]]), s0([[51.0]], [[52.0], [53.0]])]) in
    let v3: s1 = s1(s0([[54.0]], [[55.0], [56.0]]), s0([[57.0]], [[58.0], [59.0]])) in
    let v4: Float = 60.0 in
    let initialResult: Float = 60.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()