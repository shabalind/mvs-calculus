  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
  } in
  struct s2 {
    var p0: s1
    var p1: s0
  } in
  struct s3 {
    var p0: [s2]
    var p1: [s1]
  } in
  struct s4 {
    var p0: s2
    var p1: s1
  } in
  struct s5 {
    var p0: [[s4]]
    var p1: [s3]
  } in
  struct s6 {
    var p0: [[s1]]
    var p1: [[s1]]
    var p2: s2
  } in
  struct s8 {
    var p0: [[s3]]
    var p1: [s3]
  } in
  struct s9 {
    var p0: s0
  } in
  struct s11 {
    var p0: s5
    var p1: s9
  } in
  let f46: (Float) -> Float = (v0: Float) -> Float {
    var v7: Float = v0 in
    var v5: Float = v7 in
    let v4: Float = v7 - v5 in
    var v8: Float = v4 in
    v8 = v7 in
    v8
  } in
  let noinline_f0: ([s5], [s11], s6, s8, Float) -> Float = (v0: [s5], v1: [s11], v2: s6, v3: s8, v4: Float) -> Float {
    let v17: Float = f46(v4) in
    let v53: Float = f46(v17) in
    let v140: Float = f46(v53) in
    v140
  } in
  fun loop(i: Int, v0: [s5], v1: [s11], v2: s6, v3: s8, v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s5] = [s5([[s4(s2(s1(s0([[0.0]], [[1.0]])), s0([[2.0]], [[3.0]])), s1(s0([[4.0]], [[5.0]])))]], [s3([s2(s1(s0([[6.0]], [[7.0]])), s0([[8.0]], [[9.0]]))], [s1(s0([[10.0]], [[11.0]])), s1(s0([[12.0]], [[13.0]])), s1(s0([[14.0]], [[15.0]]))])]), s5([[s4(s2(s1(s0([[16.0]], [[17.0]])), s0([[18.0]], [[19.0]])), s1(s0([[20.0]], [[21.0]])))]], [s3([s2(s1(s0([[22.0]], [[23.0]])), s0([[24.0]], [[25.0]]))], [s1(s0([[26.0]], [[27.0]])), s1(s0([[28.0]], [[29.0]])), s1(s0([[30.0]], [[31.0]]))])])] in
    let v1: [s11] = [s11(s5([[s4(s2(s1(s0([[32.0]], [[33.0]])), s0([[34.0]], [[35.0]])), s1(s0([[36.0]], [[37.0]])))]], [s3([s2(s1(s0([[38.0]], [[39.0]])), s0([[40.0]], [[41.0]]))], [s1(s0([[42.0]], [[43.0]])), s1(s0([[44.0]], [[45.0]])), s1(s0([[46.0]], [[47.0]]))])]), s9(s0([[48.0]], [[49.0]]))), s11(s5([[s4(s2(s1(s0([[50.0]], [[51.0]])), s0([[52.0]], [[53.0]])), s1(s0([[54.0]], [[55.0]])))]], [s3([s2(s1(s0([[56.0]], [[57.0]])), s0([[58.0]], [[59.0]]))], [s1(s0([[60.0]], [[61.0]])), s1(s0([[62.0]], [[63.0]])), s1(s0([[64.0]], [[65.0]]))])]), s9(s0([[66.0]], [[67.0]])))] in
    let v2: s6 = s6([[s1(s0([[68.0]], [[69.0]]))], [s1(s0([[70.0]], [[71.0]]))]], [[s1(s0([[72.0]], [[73.0]]))]], s2(s1(s0([[74.0]], [[75.0]])), s0([[76.0]], [[77.0]]))) in
    let v3: s8 = s8([[s3([s2(s1(s0([[78.0]], [[79.0]])), s0([[80.0]], [[81.0]]))], [s1(s0([[82.0]], [[83.0]])), s1(s0([[84.0]], [[85.0]])), s1(s0([[86.0]], [[87.0]]))])], [s3([s2(s1(s0([[88.0]], [[89.0]])), s0([[90.0]], [[91.0]]))], [s1(s0([[92.0]], [[93.0]])), s1(s0([[94.0]], [[95.0]])), s1(s0([[96.0]], [[97.0]]))])], [s3([s2(s1(s0([[98.0]], [[99.0]])), s0([[100.0]], [[101.0]]))], [s1(s0([[102.0]], [[103.0]])), s1(s0([[104.0]], [[105.0]])), s1(s0([[106.0]], [[107.0]]))])]], [s3([s2(s1(s0([[108.0]], [[109.0]])), s0([[110.0]], [[111.0]]))], [s1(s0([[112.0]], [[113.0]])), s1(s0([[114.0]], [[115.0]])), s1(s0([[116.0]], [[117.0]]))]), s3([s2(s1(s0([[118.0]], [[119.0]])), s0([[120.0]], [[121.0]]))], [s1(s0([[122.0]], [[123.0]])), s1(s0([[124.0]], [[125.0]])), s1(s0([[126.0]], [[127.0]]))]), s3([s2(s1(s0([[128.0]], [[129.0]])), s0([[130.0]], [[131.0]]))], [s1(s0([[132.0]], [[133.0]])), s1(s0([[134.0]], [[135.0]])), s1(s0([[136.0]], [[137.0]]))])]) in
    let v4: Float = 138.0 in
    let initialResult: Float = 138.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()