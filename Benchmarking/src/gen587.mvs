  let f16: ([[Float]]) -> [[Float]] = (v0: [[Float]]) -> [[Float]] {
    let v3: [Float] = v0[1] in
    var v2: [[Float]] = v0 in
    v2[0] = v3 in
    let v8: [Float] = v2[1] in
    v2[0] = v8 in
    var v15: [[Float]] = v2 in
    var v23: [[Float]] = v15 in
    let v29: [Float] = v15[0] in
    v2 = v15 in
    var v38: [[Float]] = v23 in
    v38[1] = v29 in
    v38
  } in
  let f14: ([[Float]]) -> [[Float]] = (v0: [[Float]]) -> [[Float]] {
    let v5: [[Float]] = f16(v0) in
    let v7: [[Float]] = f16(v0) in
    var v9: [[Float]] = v7 in
    var v3: [[Float]] = v5 in
    let v11: [Float] = v9[1] in
    let v6: [[Float]] = f16(v3) in
    let v8: [Float] = v0[1] in
    let v1: [[Float]] = [v11, v11, v11, v8, v11] in
    var v25: [[Float]] = v6 in
    var v17: [[Float]] = v1 in
    v17[3] = v8 in
    var v14: [Float] = v11 in
    var v38: [[Float]] = v25 in
    let v32: [Float] = v17[2] in
    let v69: [[Float]] = f16(v38) in
    v17[2] = v14 in
    v38[1] = v32 in
    v69
  } in
  let noinline_f0: (Float, [[Float]]) -> Float = (v0: Float, v1: [[Float]]) -> Float {
    let v7: [Float] = v1[1] in
    var v9: Float = v0 in
    var v5: [Float] = v7 in
    var v8: Float = v9 in
    v5[0] = v0 in
    let v11: [[Float]] = f14(v1) in
    v8 = v9 in
    v5[0] = v0 in
    let v24: Float = v5[0] in
    let v17: [Float] = v11[0] in
    let v12: Float = v17[0] in
    let v34: [Float] = [v12, v24, v8, v24, v9] in
    let v80: Float = v34[4] in
    var v42: [Float] = v34 in
    var v86: [Float] = v34 in
    var v52: [Float] = v86 in
    let v121: [[Float]] = [v52, v52, v52, v42] in
    let v254: Float = v34[1] in
    let v122: [Float] = v121[3] in
    v5[0] = v80 in
    v86[3] = v254 in
    let v139: Float = v122[2] in
    v5[0] = v80 in
    v139
  } in
  fun loop(i: Int, v0: Float, v1: [[Float]], result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: Float = 0.0 in
    let v1: [[Float]] = [[1.0], [2.0]] in
    let initialResult: Float = [[1.0], [2.0]] in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()