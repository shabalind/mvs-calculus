  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: ([s0], Float) -> Float = (v0: [s0], v1: Float) -> Float {
    let v7: s0 = v0[0] in
    var v13: Float = v1 in
    let v9: [[Float]] = v7.p0 in
    let v20: [Float] = v9[1] in
    v13 = v1 in
    let v41: [Float] = [v13, v1] in
    var v49: [Float] = v41 in
    let v37: Float = v1 + v13 in
    var v118: [Float] = v49 in
    let v127: Float = v20[0] in
    v118[1] = v127 in
    var v128: [Float] = v118 in
    let v179: Float = v128[0] in
    v118[1] = v37 in
    v179
  } in
  fun loop(i: Int, v0: [s0], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]])] in
    let v1: Float = 5.0 in
    let initialResult: Float = 5.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()