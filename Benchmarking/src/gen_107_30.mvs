  let noinline_f0: ([[Float]], [[Float]], Float) -> Float = (v0: [[Float]], v1: [[Float]], v2: Float) -> Float {
    let v5: [Float] = v0[1] in
    let v8: [Float] = v0[0] in
    let v25: Float = v5[0] in
    let v31: Float = v2 - v25 in
    let v36: Float = v8[0] in
    let v42: Float = v5[0] in
    let v34: [Float] = [v25, v31, v36] in
    var v62: [Float] = v34 in
    let v78: Float = v62[2] in
    let v134: Float = v34[2] in
    var v87: Float = v78 in
    let v122: Float = v134 * v42 in
    let v288: Float = v122 + v87 in
    v288
  } in
  fun loop(i: Int, v0: [[Float]], v1: [[Float]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0], [1.0]] in
    let v1: [[Float]] = [[2.0]] in
    let v2: Float = 3.0 in
    let initialResult: Float = 3.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()