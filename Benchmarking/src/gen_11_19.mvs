  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s2 {
    var p0: s0
    var p1: s0
  } in
  struct s3 {
    var p0: [s2]
    var p1: [s2]
  } in
  struct s5 {
    var p0: s3
    var p1: [s0]
  } in
  let f14: (Float) -> Float = (v0: Float) -> Float {
    var v7: Float = v0 in
    var v6: Float = v7 in
    var v4: Float = v7 in
    var v5: Float = v0 in
    v5 = v4 in
    v4 = v6 in
    var v11: Float = v5 in
    var v3: Float = v11 in
    v4 = v7 in
    var v9: Float = v7 in
    var v15: Float = v9 in
    let v16: Float = v6 * v15 in
    var v1: Float = v11 in
    v9 = v3 in
    let v31: [Float] = [v1] in
    v11 = v16 in
    var v58: [Float] = v31 in
    v58[0] = v15 in
    let v36: Float = v58[0] in
    let v42: Float = v58[0] in
    v58[0] = v3 in
    v58[0] = v36 in
    v58[0] = v7 in
    v58[0] = v9 in
    var v38: [Float] = v58 in
    var v81: Float = v42 in
    let v69: [[Float]] = [v38] in
    var v79: [[Float]] = v69 in
    v38[0] = v81 in
    var v138: [[Float]] = v79 in
    let v68: [Float] = v79[0] in
    v38[0] = v36 in
    v138[0] = v68 in
    let v108: [Float] = v138[0] in
    let v176: Float = v108[0] in
    v176
  } in
  let noinline_f0: ([s5], [s0], [s2], Float) -> Float = (v0: [s5], v1: [s0], v2: [s2], v3: Float) -> Float {
    let v5: Float = f14(v3) in
    var v13: [s2] = v2 in
    let v16: s2 = v13[0] in
    v13[1] = v16 in
    let v17: s0 = v16.p1 in
    let v10: s0 = v16.p1 in
    let v14: s2 = s2(v17, v17) in
    v13[0] = v14 in
    let v26: [[Float]] = v10.p0 in
    let v19: [Float] = v26[1] in
    v13[0] = v16 in
    let v31: Float = v19[0] in
    let v49: Float = v5 + v31 in
    v49
  } in
  fun loop(i: Int, v0: [s5], v1: [s0], v2: [s2], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s5] = [s5(s3([s2(s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]), s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]]))], [s2(s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]]), s0([[15.0], [16.0], [17.0]], [[18.0], [19.0]]))]), [s0([[20.0], [21.0], [22.0]], [[23.0], [24.0]]), s0([[25.0], [26.0], [27.0]], [[28.0], [29.0]]), s0([[30.0], [31.0], [32.0]], [[33.0], [34.0]])]), s5(s3([s2(s0([[35.0], [36.0], [37.0]], [[38.0], [39.0]]), s0([[40.0], [41.0], [42.0]], [[43.0], [44.0]]))], [s2(s0([[45.0], [46.0], [47.0]], [[48.0], [49.0]]), s0([[50.0], [51.0], [52.0]], [[53.0], [54.0]]))]), [s0([[55.0], [56.0], [57.0]], [[58.0], [59.0]]), s0([[60.0], [61.0], [62.0]], [[63.0], [64.0]]), s0([[65.0], [66.0], [67.0]], [[68.0], [69.0]])]), s5(s3([s2(s0([[70.0], [71.0], [72.0]], [[73.0], [74.0]]), s0([[75.0], [76.0], [77.0]], [[78.0], [79.0]]))], [s2(s0([[80.0], [81.0], [82.0]], [[83.0], [84.0]]), s0([[85.0], [86.0], [87.0]], [[88.0], [89.0]]))]), [s0([[90.0], [91.0], [92.0]], [[93.0], [94.0]]), s0([[95.0], [96.0], [97.0]], [[98.0], [99.0]]), s0([[100.0], [101.0], [102.0]], [[103.0], [104.0]])])] in
    let v1: [s0] = [s0([[105.0], [106.0], [107.0]], [[108.0], [109.0]]), s0([[110.0], [111.0], [112.0]], [[113.0], [114.0]])] in
    let v2: [s2] = [s2(s0([[115.0], [116.0], [117.0]], [[118.0], [119.0]]), s0([[120.0], [121.0], [122.0]], [[123.0], [124.0]])), s2(s0([[125.0], [126.0], [127.0]], [[128.0], [129.0]]), s0([[130.0], [131.0], [132.0]], [[133.0], [134.0]]))] in
    let v3: Float = 135.0 in
    let initialResult: Float = 135.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()