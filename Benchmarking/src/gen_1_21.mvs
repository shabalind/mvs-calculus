  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s3 {
    var p0: [[s0]]
    var p1: [s0]
    var p2: [s0]
  } in
  struct s4 {
    var p0: s3
    var p1: s0
  } in
  struct s7 {
    var p0: s1
    var p1: s4
  } in
  struct s8 {
    var p0: [s7]
    var p1: s7
  } in
  let f22: (Float) -> Float = (v0: Float) -> Float {
    var v5: Float = v0 in
    var v1: Float = v5 in
    var v2: Float = v5 in
    let v7: Float = v2 - v0 in
    var v6: Float = v7 in
    var v3: Float = v5 in
    var v11: Float = v2 in
    var v27: Float = v2 in
    let v18: [Float] = [v3, v2, v27, v0] in
    var v15: [Float] = v18 in
    v15[3] = v7 in
    v15[0] = v6 in
    v15[0] = v27 in
    var v52: [Float] = v15 in
    v52[0] = v11 in
    v27 = v5 in
    v52[0] = v5 in
    v52[2] = v1 in
    let v76: Float = v52[2] in
    v76
  } in
  let noinline_f0: (s8, Float) -> Float = (v0: s8, v1: Float) -> Float {
    var v8: Float = v1 in
    let v2: Float = f22(v8) in
    let v23: Float = f22(v2) in
    let v17: Float = f22(v8) in
    let v22: Float = f22(v1) in
    let v27: Float = v23 + v17 in
    var v24: Float = v1 in
    let v33: Float = f22(v17) in
    let v53: Float = v24 + v33 in
    v8 = v23 in
    let v75: Float = f22(v22) in
    let v100: Float = v53 / v75 in
    let v309: Float = v27 - v100 in
    v309
  } in
  fun loop(i: Int, v0: s8, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s8 = s8([s7(s1([s0([[0.0], [1.0]], [[2.0], [3.0]]), s0([[4.0], [5.0]], [[6.0], [7.0]]), s0([[8.0], [9.0]], [[10.0], [11.0]])], s0([[12.0], [13.0]], [[14.0], [15.0]])), s4(s3([[s0([[16.0], [17.0]], [[18.0], [19.0]])]], [s0([[20.0], [21.0]], [[22.0], [23.0]])], [s0([[24.0], [25.0]], [[26.0], [27.0]]), s0([[28.0], [29.0]], [[30.0], [31.0]])]), s0([[32.0], [33.0]], [[34.0], [35.0]]))), s7(s1([s0([[36.0], [37.0]], [[38.0], [39.0]]), s0([[40.0], [41.0]], [[42.0], [43.0]]), s0([[44.0], [45.0]], [[46.0], [47.0]])], s0([[48.0], [49.0]], [[50.0], [51.0]])), s4(s3([[s0([[52.0], [53.0]], [[54.0], [55.0]])]], [s0([[56.0], [57.0]], [[58.0], [59.0]])], [s0([[60.0], [61.0]], [[62.0], [63.0]]), s0([[64.0], [65.0]], [[66.0], [67.0]])]), s0([[68.0], [69.0]], [[70.0], [71.0]]))), s7(s1([s0([[72.0], [73.0]], [[74.0], [75.0]]), s0([[76.0], [77.0]], [[78.0], [79.0]]), s0([[80.0], [81.0]], [[82.0], [83.0]])], s0([[84.0], [85.0]], [[86.0], [87.0]])), s4(s3([[s0([[88.0], [89.0]], [[90.0], [91.0]])]], [s0([[92.0], [93.0]], [[94.0], [95.0]])], [s0([[96.0], [97.0]], [[98.0], [99.0]]), s0([[100.0], [101.0]], [[102.0], [103.0]])]), s0([[104.0], [105.0]], [[106.0], [107.0]])))], s7(s1([s0([[108.0], [109.0]], [[110.0], [111.0]]), s0([[112.0], [113.0]], [[114.0], [115.0]]), s0([[116.0], [117.0]], [[118.0], [119.0]])], s0([[120.0], [121.0]], [[122.0], [123.0]])), s4(s3([[s0([[124.0], [125.0]], [[126.0], [127.0]])]], [s0([[128.0], [129.0]], [[130.0], [131.0]])], [s0([[132.0], [133.0]], [[134.0], [135.0]]), s0([[136.0], [137.0]], [[138.0], [139.0]])]), s0([[140.0], [141.0]], [[142.0], [143.0]])))) in
    let v1: Float = 144.0 in
    let initialResult: Float = 144.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()