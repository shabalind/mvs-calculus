  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
    var p2: s0
  } in
  let f2: ([Float]) -> [Float] = (v0: [Float]) -> [Float] {
    var v2: [Float] = v0 in
    let v5: Float = v2[0] in
    var v1: Float = v5 in
    let v3: [[Float]] = [v0, v0] in
    v2[0] = v1 in
    v2[0] = v5 in
    var v9: Float = v1 in
    var v6: [Float] = v0 in
    v6[0] = v9 in
    v6[0] = v1 in
    var v8: [[Float]] = v3 in
    let v11: Float = v2[0] in
    let v22: [[Float]] = [v0, v6] in
    var v21: [[Float]] = v3 in
    v2[0] = v1 in
    v21[0] = v6 in
    v8[1] = v0 in
    v8[1] = v2 in
    let v28: [Float] = v22[1] in
    var v48: [[Float]] = v8 in
    let v45: [Float] = v48[0] in
    v48[0] = v28 in
    v2[0] = v11 in
    v48 = v21 in
    v45
  } in
  let noinline_f0: ([s1], [[s0]], Float) -> Float = (v0: [s1], v1: [[s0]], v2: Float) -> Float {
    let v5: s1 = v0[0] in
    let v3: s0 = v5.p0 in
    let v14: [[Float]] = v3.p0 in
    let v49: [Float] = v14[0] in
    let v41: [Float] = f2(v49) in
    let v21: [Float] = f2(v41) in
    let v30: Float = v21[0] in
    v30
  } in
  fun loop(i: Int, v0: [s1], v1: [[s0]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1(s0([[0.0]], [[1.0], [2.0], [3.0]]), [[s0([[4.0]], [[5.0], [6.0], [7.0]])], [s0([[8.0]], [[9.0], [10.0], [11.0]])]], s0([[12.0]], [[13.0], [14.0], [15.0]]))] in
    let v1: [[s0]] = [[s0([[16.0]], [[17.0], [18.0], [19.0]])], [s0([[20.0]], [[21.0], [22.0], [23.0]])], [s0([[24.0]], [[25.0], [26.0], [27.0]])]] in
    let v2: Float = 28.0 in
    let initialResult: Float = 28.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()