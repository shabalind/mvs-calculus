  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s3 {
    var p0: s0
    var p1: [s0]
  } in
  let f2: (s3) -> s3 = (v0: s3) -> s3 {
    var v5: s3 = v0 in
    var v3: s3 = v5 in
    let v4: [s0] = v3.p1 in
    let v6: s0 = v5.p0 in
    let v10: [[Float]] = v6.p0 in
    var v8: s3 = v3 in
    v3.p1 = v4 in
    let v7: s0 = v4[0] in
    v3.p1 = v4 in
    var v2: s3 = v8 in
    let v1: s0 = v4[1] in
    v2.p0 = v1 in
    let v13: [[Float]] = v7.p0 in
    var v15: [[Float]] = v10 in
    var v22: s0 = v7 in
    v15 = v13 in
    let v19: [s0] = v3.p1 in
    let v17: [s0] = v5.p1 in
    let v18: s0 = v8.p0 in
    let v12: [Float] = v13[1] in
    let v14: [Float] = v13[0] in
    v3.p0 = v18 in
    v22.p0 = v15 in
    let v20: [Float] = v10[0] in
    v15[0] = v14 in
    v15[1] = v20 in
    v15[0] = v14 in
    v3.p1 = v17 in
    v15[0] = v14 in
    v2.p0 = v22 in
    v15[1] = v12 in
    v15[1] = v12 in
    let v44: [s0] = v3.p1 in
    let v50: s0 = v19[1] in
    v22.p0 = v15 in
    v8.p1 = v44 in
    v8.p0 = v50 in
    v2
  } in
  let noinline_f0: (s3, [s3], Float) -> Float = (v0: s3, v1: [s3], v2: Float) -> Float {
    let v5: s3 = v1[0] in
    let v7: s3 = f2(v0) in
    var v4: s3 = v7 in
    let v9: s3 = f2(v4) in
    var v6: s3 = v0 in
    var v13: [s3] = v1 in
    let v18: [s0] = v5.p1 in
    v6.p1 = v18 in
    let v12: s3 = f2(v9) in
    v4.p1 = v18 in
    let v27: s3 = v13[0] in
    v13[0] = v4 in
    var v14: s3 = v0 in
    v13[0] = v0 in
    let v22: s3 = f2(v7) in
    let v38: [s0] = v6.p1 in
    let v11: [s0] = v12.p1 in
    let v20: s0 = v9.p0 in
    let v28: [[Float]] = v20.p0 in
    let v35: s0 = v11[1] in
    let v25: s3 = f2(v14) in
    let v23: s0 = v14.p0 in
    let v48: s0 = v38[0] in
    v14.p0 = v48 in
    v13[0] = v6 in
    v6.p0 = v23 in
    v4.p1 = v38 in
    let v33: s3 = f2(v22) in
    let v30: [s0] = v25.p1 in
    let v26: s3 = f2(v6) in
    let v41: s3 = f2(v26) in
    let v139: [Float] = v28[1] in
    let v64: [s0] = v27.p1 in
    let v49: [s0] = v0.p1 in
    v4.p0 = v48 in
    let v88: s3 = f2(v41) in
    v6.p1 = v30 in
    let v62: Float = v139[0] in
    let v81: s3 = f2(v33) in
    v4.p1 = v49 in
    let v148: s3 = f2(v88) in
    v6.p0 = v35 in
    v13[0] = v9 in
    var v122: s3 = v81 in
    v4.p1 = v64 in
    v13[0] = v122 in
    v13[0] = v148 in
    v6.p0 = v35 in
    v62
  } in
  fun loop(i: Int, v0: s3, v1: [s3], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(s0([[0.0], [1.0]], [[2.0]]), [s0([[3.0], [4.0]], [[5.0]]), s0([[6.0], [7.0]], [[8.0]])]) in
    let v1: [s3] = [s3(s0([[9.0], [10.0]], [[11.0]]), [s0([[12.0], [13.0]], [[14.0]]), s0([[15.0], [16.0]], [[17.0]])])] in
    let v2: Float = 18.0 in
    let initialResult: Float = 18.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()