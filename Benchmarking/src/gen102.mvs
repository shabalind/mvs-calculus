  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  let noinline_f0: (s1, s0, s1, s0, Float) -> Float = (v0: s1, v1: s0, v2: s1, v3: s0, v4: Float) -> Float {
    var v18: Float = v4 in
    v18 = v4 in
    let v12: [Float] = [v4, v18, v4, v18] in
    let v17: Float = v12[2] in
    var v34: Float = v18 in
    let v90: Float = v12[0] in
    var v63: [Float] = v12 in
    v63[0] = v90 in
    var v155: [Float] = v63 in
    let v183: Float = v155[3] in
    v63[1] = v34 in
    let v192: Float = v183 / v17 in
    v192
  } in
  fun loop(i: Int, v0: s1, v1: s0, v2: s1, v3: s0, v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([s0([[0.0]], [[1.0]]), s0([[2.0]], [[3.0]])], s0([[4.0]], [[5.0]])) in
    let v1: s0 = s0([[6.0]], [[7.0]]) in
    let v2: s1 = s1([s0([[8.0]], [[9.0]]), s0([[10.0]], [[11.0]])], s0([[12.0]], [[13.0]])) in
    let v3: s0 = s0([[14.0]], [[15.0]]) in
    let v4: Float = 16.0 in
    let initialResult: Float = 16.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()