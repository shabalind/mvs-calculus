  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: [[s0]]
  } in
  let noinline_f0: ([[s1]], [s1], s0, [s1], Float, s1) -> Float = (v0: [[s1]], v1: [s1], v2: s0, v3: [s1], v4: Float, v5: s1) -> Float {
    let v11: [[s0]] = v5.p1 in
    let v18: [s0] = v11[1] in
    let v21: [[Float]] = v2.p1 in
    var v27: Float = v4 in
    let v25: s0 = v18[0] in
    let v29: [Float] = v21[0] in
    let v33: [[Float]] = v25.p0 in
    var v46: [[Float]] = v33 in
    let v38: [Float] = v46[0] in
    v46[0] = v29 in
    var v104: [Float] = v38 in
    let v233: Float = v104[0] in
    v104[0] = v27 in
    v233
  } in
  fun loop(i: Int, v0: [[s1]], v1: [s1], v2: s0, v3: [s1], v4: Float, v5: s1, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4, v5) in
      loop(i + 1, v0, v1, v2, v3, v4, v5, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s1]] = [[s1([[s0([[0.0]], [[1.0]])], [s0([[2.0]], [[3.0]])]], [[s0([[4.0]], [[5.0]])], [s0([[6.0]], [[7.0]])]])]] in
    let v1: [s1] = [s1([[s0([[8.0]], [[9.0]])], [s0([[10.0]], [[11.0]])]], [[s0([[12.0]], [[13.0]])], [s0([[14.0]], [[15.0]])]])] in
    let v2: s0 = s0([[16.0]], [[17.0]]) in
    let v3: [s1] = [s1([[s0([[18.0]], [[19.0]])], [s0([[20.0]], [[21.0]])]], [[s0([[22.0]], [[23.0]])], [s0([[24.0]], [[25.0]])]]), s1([[s0([[26.0]], [[27.0]])], [s0([[28.0]], [[29.0]])]], [[s0([[30.0]], [[31.0]])], [s0([[32.0]], [[33.0]])]]), s1([[s0([[34.0]], [[35.0]])], [s0([[36.0]], [[37.0]])]], [[s0([[38.0]], [[39.0]])], [s0([[40.0]], [[41.0]])]])] in
    let v4: Float = 42.0 in
    let v5: s1 = s1([[s0([[43.0]], [[44.0]])], [s0([[45.0]], [[46.0]])]], [[s0([[47.0]], [[48.0]])], [s0([[49.0]], [[50.0]])]]) in
    let initialResult: Float = s1([[s0([[43.0]], [[44.0]])], [s0([[45.0]], [[46.0]])]], [[s0([[47.0]], [[48.0]])], [s0([[49.0]], [[50.0]])]]) in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, v5, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()