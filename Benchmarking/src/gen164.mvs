  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s4 {
    var p0: Float
    var p1: s1
  } in
  let f55: (s0) -> s0 = (v0: s0) -> s0 {
    var v4: s0 = v0 in
    let v6: [[Float]] = v4.p0 in
    var v1: s0 = v4 in
    v1.p0 = v6 in
    let v10: [[Float]] = v1.p0 in
    v1 = v4 in
    let v5: [[Float]] = v4.p1 in
    let v15: [[Float]] = v1.p0 in
    v1.p1 = v5 in
    let v24: [s0] = [v0, v0, v1, v1, v1, v1, v1] in
    let v23: s0 = v24[6] in
    let v25: [[s0]] = [v24] in
    let v22: [[Float]] = v0.p0 in
    v1.p0 = v22 in
    v4.p1 = v6 in
    let v47: [s0] = v25[0] in
    v4.p0 = v6 in
    let v34: [[Float]] = v1.p1 in
    let v68: [[[s0]]] = [v25, v25, v25] in
    var v45: [s0] = v47 in
    var v48: [s0] = v45 in
    let v33: [[s0]] = v68[0] in
    var v43: [[s0]] = v33 in
    v4.p1 = v10 in
    v1.p0 = v15 in
    var v82: s0 = v23 in
    v45[4] = v82 in
    let v60: [[Float]] = v82.p0 in
    v43[0] = v48 in
    var v93: [[s0]] = v43 in
    v82.p0 = v60 in
    let v66: [s0] = v93[0] in
    v1.p0 = v34 in
    let v89: s0 = v66[1] in
    v4.p0 = v34 in
    v89
  } in
  let f17: (s0) -> s0 = (v0: s0) -> s0 {
    let v8: s0 = f55(v0) in
    let v12: s0 = f55(v8) in
    let v13: [s0] = [v12, v12, v0, v0, v12, v8, v12] in
    let v22: s0 = v13[1] in
    let v18: s0 = v13[1] in
    let v50: s0 = v13[4] in
    let v21: [s0] = [v12, v0, v50, v22, v18] in
    let v83: s0 = v21[1] in
    v83
  } in
  let noinline_f0: (s0, s0, s4, s4, Float) -> Float = (v0: s0, v1: s0, v2: s4, v3: s4, v4: Float) -> Float {
    let v5: s0 = f17(v0) in
    let v8: Float = v2.p0 in
    let v9: Float = v4 - v8 in
    let v16: [[Float]] = v5.p1 in
    let v14: [Float] = v16[2] in
    var v69: [Float] = v14 in
    let v52: Float = v69[0] in
    let v137: Float = v52 + v9 in
    v137
  } in
  fun loop(i: Int, v0: s0, v1: s0, v2: s4, v3: s4, v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]]) in
    let v1: s0 = s0([[6.0], [7.0], [8.0]], [[9.0], [10.0], [11.0]]) in
    let v2: s4 = s4(12.0, s1([s0([[13.0], [14.0], [15.0]], [[16.0], [17.0], [18.0]]), s0([[19.0], [20.0], [21.0]], [[22.0], [23.0], [24.0]]), s0([[25.0], [26.0], [27.0]], [[28.0], [29.0], [30.0]])], s0([[31.0], [32.0], [33.0]], [[34.0], [35.0], [36.0]]))) in
    let v3: s4 = s4(37.0, s1([s0([[38.0], [39.0], [40.0]], [[41.0], [42.0], [43.0]]), s0([[44.0], [45.0], [46.0]], [[47.0], [48.0], [49.0]]), s0([[50.0], [51.0], [52.0]], [[53.0], [54.0], [55.0]])], s0([[56.0], [57.0], [58.0]], [[59.0], [60.0], [61.0]]))) in
    let v4: Float = 62.0 in
    let initialResult: Float = 62.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()