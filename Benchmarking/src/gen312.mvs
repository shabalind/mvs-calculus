  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [[s1]]
    var p1: [[s0]]
  } in
  let f35: (Float) -> Float = (v0: Float) -> Float {
    var v6: Float = v0 in
    var v4: Float = v6 in
    v6 = v4 in
    var v2: Float = v6 in
    var v5: Float = v2 in
    var v7: Float = v5 in
    var v1: Float = v2 in
    v1 = v0 in
    var v16: Float = v1 in
    var v10: Float = v7 in
    var v9: Float = v1 in
    var v15: Float = v9 in
    var v30: Float = v6 in
    var v18: Float = v5 in
    var v35: Float = v18 in
    let v14: [Float] = [v10, v2, v30, v16, v35, v0, v5] in
    var v25: [Float] = v14 in
    var v20: [Float] = v25 in
    var v24: [Float] = v25 in
    let v39: Float = v14[6] in
    v24[6] = v30 in
    let v27: Float = v24[0] in
    v20[4] = v27 in
    var v122: [Float] = v25 in
    v122[2] = v27 in
    var v52: Float = v7 in
    let v58: [[Float]] = [v25, v14, v20, v122] in
    let v118: [Float] = v58[3] in
    v122[4] = v39 in
    var v85: Float = v2 in
    let v67: [[Float]] = [v118, v20] in
    v20[0] = v15 in
    v122[6] = v1 in
    v30 = v52 in
    let v172: [Float] = v67[1] in
    v24[0] = v18 in
    v1 = v85 in
    let v114: Float = v172[1] in
    v122[2] = v1 in
    v122[1] = v1 in
    v114
  } in
  let noinline_f0: ([s2], [[s0]], [s0], s2, Float) -> Float = (v0: [s2], v1: [[s0]], v2: [s0], v3: s2, v4: Float) -> Float {
    let v9: Float = f35(v4) in
    var v28: Float = v4 in
    let v27: Float = v28 * v9 in
    v27
  } in
  fun loop(i: Int, v0: [s2], v1: [[s0]], v2: [s0], v3: s2, v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2([[s1(s0([[0.0]], [[1.0]]), s0([[2.0]], [[3.0]]))], [s1(s0([[4.0]], [[5.0]]), s0([[6.0]], [[7.0]]))], [s1(s0([[8.0]], [[9.0]]), s0([[10.0]], [[11.0]]))]], [[s0([[12.0]], [[13.0]])], [s0([[14.0]], [[15.0]])], [s0([[16.0]], [[17.0]])]]), s2([[s1(s0([[18.0]], [[19.0]]), s0([[20.0]], [[21.0]]))], [s1(s0([[22.0]], [[23.0]]), s0([[24.0]], [[25.0]]))], [s1(s0([[26.0]], [[27.0]]), s0([[28.0]], [[29.0]]))]], [[s0([[30.0]], [[31.0]])], [s0([[32.0]], [[33.0]])], [s0([[34.0]], [[35.0]])]]), s2([[s1(s0([[36.0]], [[37.0]]), s0([[38.0]], [[39.0]]))], [s1(s0([[40.0]], [[41.0]]), s0([[42.0]], [[43.0]]))], [s1(s0([[44.0]], [[45.0]]), s0([[46.0]], [[47.0]]))]], [[s0([[48.0]], [[49.0]])], [s0([[50.0]], [[51.0]])], [s0([[52.0]], [[53.0]])]])] in
    let v1: [[s0]] = [[s0([[54.0]], [[55.0]])]] in
    let v2: [s0] = [s0([[56.0]], [[57.0]]), s0([[58.0]], [[59.0]])] in
    let v3: s2 = s2([[s1(s0([[60.0]], [[61.0]]), s0([[62.0]], [[63.0]]))], [s1(s0([[64.0]], [[65.0]]), s0([[66.0]], [[67.0]]))], [s1(s0([[68.0]], [[69.0]]), s0([[70.0]], [[71.0]]))]], [[s0([[72.0]], [[73.0]])], [s0([[74.0]], [[75.0]])], [s0([[76.0]], [[77.0]])]]) in
    let v4: Float = 78.0 in
    let initialResult: Float = 78.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()