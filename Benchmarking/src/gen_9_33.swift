  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
  }
  struct s2 {
    var p0: s0
    var p1: s0
  }
  struct s3 {
    var p0: [[s2]]
    var p1: s2
  }
  struct s6 {
    var p0: s3
    var p1: [s2]
  }
  @inline(never)
  func f0(_ v0: s6, _ v1: s3, _ v2: Double) -> Double {
    let v8: s2 = v1.p1
    let v16: s0 = v8.p0
    let v24: [[Double]] = v16.p1
    var v31: [[Double]] = v24
    let v19: [Double] = v24[0]
    v31[0] = v19
    let v49: [Double] = v31[0]
    let v78: Double = v49[0]
    let v75: Double = v19[0]
    let v38: Double = v75 * v78
    let v85: Double = v75 * v38
    return v85
  }
  func benchmark() {
    let v0: s6 = s6(p0: s3(p0: [[s2(p0: s0(p0: [[0.0]], p1: [[1.0]], p2: [[2.0], [3.0], [4.0]], p3: [[5.0], [6.0]]), p1: s0(p0: [[7.0]], p1: [[8.0]], p2: [[9.0], [10.0], [11.0]], p3: [[12.0], [13.0]]))], [s2(p0: s0(p0: [[14.0]], p1: [[15.0]], p2: [[16.0], [17.0], [18.0]], p3: [[19.0], [20.0]]), p1: s0(p0: [[21.0]], p1: [[22.0]], p2: [[23.0], [24.0], [25.0]], p3: [[26.0], [27.0]]))], [s2(p0: s0(p0: [[28.0]], p1: [[29.0]], p2: [[30.0], [31.0], [32.0]], p3: [[33.0], [34.0]]), p1: s0(p0: [[35.0]], p1: [[36.0]], p2: [[37.0], [38.0], [39.0]], p3: [[40.0], [41.0]]))]], p1: s2(p0: s0(p0: [[42.0]], p1: [[43.0]], p2: [[44.0], [45.0], [46.0]], p3: [[47.0], [48.0]]), p1: s0(p0: [[49.0]], p1: [[50.0]], p2: [[51.0], [52.0], [53.0]], p3: [[54.0], [55.0]]))), p1: [s2(p0: s0(p0: [[56.0]], p1: [[57.0]], p2: [[58.0], [59.0], [60.0]], p3: [[61.0], [62.0]]), p1: s0(p0: [[63.0]], p1: [[64.0]], p2: [[65.0], [66.0], [67.0]], p3: [[68.0], [69.0]])), s2(p0: s0(p0: [[70.0]], p1: [[71.0]], p2: [[72.0], [73.0], [74.0]], p3: [[75.0], [76.0]]), p1: s0(p0: [[77.0]], p1: [[78.0]], p2: [[79.0], [80.0], [81.0]], p3: [[82.0], [83.0]])), s2(p0: s0(p0: [[84.0]], p1: [[85.0]], p2: [[86.0], [87.0], [88.0]], p3: [[89.0], [90.0]]), p1: s0(p0: [[91.0]], p1: [[92.0]], p2: [[93.0], [94.0], [95.0]], p3: [[96.0], [97.0]]))])
    let v1: s3 = s3(p0: [[s2(p0: s0(p0: [[98.0]], p1: [[99.0]], p2: [[100.0], [101.0], [102.0]], p3: [[103.0], [104.0]]), p1: s0(p0: [[105.0]], p1: [[106.0]], p2: [[107.0], [108.0], [109.0]], p3: [[110.0], [111.0]]))], [s2(p0: s0(p0: [[112.0]], p1: [[113.0]], p2: [[114.0], [115.0], [116.0]], p3: [[117.0], [118.0]]), p1: s0(p0: [[119.0]], p1: [[120.0]], p2: [[121.0], [122.0], [123.0]], p3: [[124.0], [125.0]]))], [s2(p0: s0(p0: [[126.0]], p1: [[127.0]], p2: [[128.0], [129.0], [130.0]], p3: [[131.0], [132.0]]), p1: s0(p0: [[133.0]], p1: [[134.0]], p2: [[135.0], [136.0], [137.0]], p3: [[138.0], [139.0]]))]], p1: s2(p0: s0(p0: [[140.0]], p1: [[141.0]], p2: [[142.0], [143.0], [144.0]], p3: [[145.0], [146.0]]), p1: s0(p0: [[147.0]], p1: [[148.0]], p2: [[149.0], [150.0], [151.0]], p3: [[152.0], [153.0]])))
    let v2: Double = 154.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 154.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
