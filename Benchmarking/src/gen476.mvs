  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: (s0, [[s0]], Float) -> Float = (v0: s0, v1: [[s0]], v2: Float) -> Float {
    var v6: Float = v2 in
    let v9: Float = v2 + v6 in
    var v5: Float = v2 in
    v6 = v5 in
    v6 = v9 in
    v5 = v2 in
    let v7: [Float] = [v6, v2, v2, v5, v5] in
    var v16: [Float] = v7 in
    v16[4] = v9 in
    v16[4] = v5 in
    var v44: Float = v5 in
    v16[2] = v44 in
    v16[0] = v5 in
    var v48: [Float] = v16 in
    v48[3] = v2 in
    let v72: Float = v48[3] in
    v72
  } in
  fun loop(i: Int, v0: s0, v1: [[s0]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0]], [[2.0]]) in
    let v1: [[s0]] = [[s0([[3.0], [4.0]], [[5.0]])]] in
    let v2: Float = 6.0 in
    let initialResult: Float = 6.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()