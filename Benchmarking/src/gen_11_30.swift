  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
  }
  struct s2 {
    var p0: [s1]
    var p1: s1
  }
  struct s4 {
    var p0: s2
    var p1: [s0]
  }
  struct s5 {
    var p0: [s0]
    var p1: [[s1]]
  }
  func f6(_ v0: s1) -> s1 {
    let v30: [s1] = [v0, v0, v0, v0, v0]
    var v109: [s1] = v30
    let v114: [[s1]] = [v109, v109, v30, v109, v30, v30, v30]
    v109[3] = v0
    let v96: [s1] = v114[6]
    let v78: s1 = v96[1]
    return v78
  }
  @inline(never)
  func f0(_ v0: s5, _ v1: [[s4]], _ v2: Double) -> Double {
    let v3: [[s1]] = v0.p1
    let v13: [s1] = v3[1]
    let v8: Double = v2 / v2
    let v14: s1 = v13[0]
    let v22: s1 = f6(v14)
    let v27: [s0] = v22.p1
    let v32: s0 = v27[0]
    let v36: [[Double]] = v32.p1
    let v73: [Double] = v36[1]
    let v174: Double = v73[0]
    var v102: Double = v8
    let v122: Double = v174 * v102
    return v122
  }
  func benchmark() {
    let v0: s5 = s5(p0: [s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0], [5.0]]), s0(p0: [[6.0], [7.0], [8.0]], p1: [[9.0], [10.0], [11.0]]), s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0], [16.0], [17.0]])], p1: [[s1(p0: [[s0(p0: [[18.0], [19.0], [20.0]], p1: [[21.0], [22.0], [23.0]])], [s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0], [28.0], [29.0]])], [s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0], [35.0]])]], p1: [s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0], [40.0], [41.0]]), s0(p0: [[42.0], [43.0], [44.0]], p1: [[45.0], [46.0], [47.0]])])], [s1(p0: [[s0(p0: [[48.0], [49.0], [50.0]], p1: [[51.0], [52.0], [53.0]])], [s0(p0: [[54.0], [55.0], [56.0]], p1: [[57.0], [58.0], [59.0]])], [s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0], [64.0], [65.0]])]], p1: [s0(p0: [[66.0], [67.0], [68.0]], p1: [[69.0], [70.0], [71.0]]), s0(p0: [[72.0], [73.0], [74.0]], p1: [[75.0], [76.0], [77.0]])])]])
    let v1: [[s4]] = [[s4(p0: s2(p0: [s1(p0: [[s0(p0: [[78.0], [79.0], [80.0]], p1: [[81.0], [82.0], [83.0]])], [s0(p0: [[84.0], [85.0], [86.0]], p1: [[87.0], [88.0], [89.0]])], [s0(p0: [[90.0], [91.0], [92.0]], p1: [[93.0], [94.0], [95.0]])]], p1: [s0(p0: [[96.0], [97.0], [98.0]], p1: [[99.0], [100.0], [101.0]]), s0(p0: [[102.0], [103.0], [104.0]], p1: [[105.0], [106.0], [107.0]])])], p1: s1(p0: [[s0(p0: [[108.0], [109.0], [110.0]], p1: [[111.0], [112.0], [113.0]])], [s0(p0: [[114.0], [115.0], [116.0]], p1: [[117.0], [118.0], [119.0]])], [s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0], [124.0], [125.0]])]], p1: [s0(p0: [[126.0], [127.0], [128.0]], p1: [[129.0], [130.0], [131.0]]), s0(p0: [[132.0], [133.0], [134.0]], p1: [[135.0], [136.0], [137.0]])])), p1: [s0(p0: [[138.0], [139.0], [140.0]], p1: [[141.0], [142.0], [143.0]]), s0(p0: [[144.0], [145.0], [146.0]], p1: [[147.0], [148.0], [149.0]]), s0(p0: [[150.0], [151.0], [152.0]], p1: [[153.0], [154.0], [155.0]])])], [s4(p0: s2(p0: [s1(p0: [[s0(p0: [[156.0], [157.0], [158.0]], p1: [[159.0], [160.0], [161.0]])], [s0(p0: [[162.0], [163.0], [164.0]], p1: [[165.0], [166.0], [167.0]])], [s0(p0: [[168.0], [169.0], [170.0]], p1: [[171.0], [172.0], [173.0]])]], p1: [s0(p0: [[174.0], [175.0], [176.0]], p1: [[177.0], [178.0], [179.0]]), s0(p0: [[180.0], [181.0], [182.0]], p1: [[183.0], [184.0], [185.0]])])], p1: s1(p0: [[s0(p0: [[186.0], [187.0], [188.0]], p1: [[189.0], [190.0], [191.0]])], [s0(p0: [[192.0], [193.0], [194.0]], p1: [[195.0], [196.0], [197.0]])], [s0(p0: [[198.0], [199.0], [200.0]], p1: [[201.0], [202.0], [203.0]])]], p1: [s0(p0: [[204.0], [205.0], [206.0]], p1: [[207.0], [208.0], [209.0]]), s0(p0: [[210.0], [211.0], [212.0]], p1: [[213.0], [214.0], [215.0]])])), p1: [s0(p0: [[216.0], [217.0], [218.0]], p1: [[219.0], [220.0], [221.0]]), s0(p0: [[222.0], [223.0], [224.0]], p1: [[225.0], [226.0], [227.0]]), s0(p0: [[228.0], [229.0], [230.0]], p1: [[231.0], [232.0], [233.0]])])]]
    let v2: Double = 234.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 234.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
