  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
    var p2: [[s0]]
    var p3: [[s0]]
  } in
  struct s2 {
    var p0: s1
    var p1: [s0]
  } in
  let noinline_f0: (s2, Float) -> Float = (v0: s2, v1: Float) -> Float {
    let v2: s1 = v0.p0 in
    let v7: [s0] = v2.p0 in
    var v11: [s0] = v7 in
    var v4: [s0] = v11 in
    let v8: s0 = v11[2] in
    v4[2] = v8 in
    let v9: s0 = v4[1] in
    let v18: [[Float]] = v9.p1 in
    v11[1] = v8 in
    let v22: [Float] = v18[0] in
    let v35: [[Float]] = v9.p0 in
    v4 = v11 in
    var v16: s0 = v9 in
    let v23: Float = v22[0] in
    let v19: [Float] = v35[1] in
    let v27: Float = v22[0] in
    let v34: Float = v19[0] in
    v11[0] = v16 in
    let v29: [s0] = v2.p1 in
    let v46: s0 = v29[1] in
    var v57: [s0] = v4 in
    v11[2] = v46 in
    let v117: Float = v23 - v34 in
    v4 = v57 in
    v57[1] = v8 in
    let v188: Float = v117 - v27 in
    v16.p0 = v35 in
    v188
  } in
  fun loop(i: Int, v0: s2, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(s1([s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]), s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]]), s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]])], [s0([[15.0], [16.0]], [[17.0], [18.0], [19.0]]), s0([[20.0], [21.0]], [[22.0], [23.0], [24.0]])], [[s0([[25.0], [26.0]], [[27.0], [28.0], [29.0]])], [s0([[30.0], [31.0]], [[32.0], [33.0], [34.0]])], [s0([[35.0], [36.0]], [[37.0], [38.0], [39.0]])]], [[s0([[40.0], [41.0]], [[42.0], [43.0], [44.0]])]]), [s0([[45.0], [46.0]], [[47.0], [48.0], [49.0]])]) in
    let v1: Float = 50.0 in
    let initialResult: Float = 50.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()