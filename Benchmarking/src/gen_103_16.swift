  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
    var p2: s0
  }
  struct s2 {
    var p0: [[s1]]
    var p1: s0
  }
  struct s4 {
    var p0: [[s1]]
    var p1: [[Double]]
  }
  struct s5 {
    var p0: s0
    var p1: [[s4]]
  }
  struct s7 {
    var p0: s5
    var p1: s4
  }
  struct s8 {
    var p0: s7
    var p1: [s5]
    var p2: s0
  }
  struct s9 {
    var p0: [s2]
    var p1: s8
  }
  @inline(never)
  func f0(_ v0: [s9], _ v1: Double) -> Double {
    let v5: Double = v1 / v1
    var v15: Double = v1
    let v27: [Double] = [v15, v15, v15, v15, v5, v5]
    var v19: [Double] = v27
    let v33: Double = v19[3]
    v19[5] = v5
    let v99: Double = v33 / v33
    let v66: Double = v27[3]
    var v248: Double = v66
    let v82: Double = v99 - v248
    return v82
  }
  func benchmark() {
    let v0: [s9] = [s9(p0: [s2(p0: [[s1(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0]]), p1: s0(p0: [[3.0], [4.0]], p1: [[5.0]]), p2: s0(p0: [[6.0], [7.0]], p1: [[8.0]]))], [s1(p0: s0(p0: [[9.0], [10.0]], p1: [[11.0]]), p1: s0(p0: [[12.0], [13.0]], p1: [[14.0]]), p2: s0(p0: [[15.0], [16.0]], p1: [[17.0]]))], [s1(p0: s0(p0: [[18.0], [19.0]], p1: [[20.0]]), p1: s0(p0: [[21.0], [22.0]], p1: [[23.0]]), p2: s0(p0: [[24.0], [25.0]], p1: [[26.0]]))]], p1: s0(p0: [[27.0], [28.0]], p1: [[29.0]])), s2(p0: [[s1(p0: s0(p0: [[30.0], [31.0]], p1: [[32.0]]), p1: s0(p0: [[33.0], [34.0]], p1: [[35.0]]), p2: s0(p0: [[36.0], [37.0]], p1: [[38.0]]))], [s1(p0: s0(p0: [[39.0], [40.0]], p1: [[41.0]]), p1: s0(p0: [[42.0], [43.0]], p1: [[44.0]]), p2: s0(p0: [[45.0], [46.0]], p1: [[47.0]]))], [s1(p0: s0(p0: [[48.0], [49.0]], p1: [[50.0]]), p1: s0(p0: [[51.0], [52.0]], p1: [[53.0]]), p2: s0(p0: [[54.0], [55.0]], p1: [[56.0]]))]], p1: s0(p0: [[57.0], [58.0]], p1: [[59.0]])), s2(p0: [[s1(p0: s0(p0: [[60.0], [61.0]], p1: [[62.0]]), p1: s0(p0: [[63.0], [64.0]], p1: [[65.0]]), p2: s0(p0: [[66.0], [67.0]], p1: [[68.0]]))], [s1(p0: s0(p0: [[69.0], [70.0]], p1: [[71.0]]), p1: s0(p0: [[72.0], [73.0]], p1: [[74.0]]), p2: s0(p0: [[75.0], [76.0]], p1: [[77.0]]))], [s1(p0: s0(p0: [[78.0], [79.0]], p1: [[80.0]]), p1: s0(p0: [[81.0], [82.0]], p1: [[83.0]]), p2: s0(p0: [[84.0], [85.0]], p1: [[86.0]]))]], p1: s0(p0: [[87.0], [88.0]], p1: [[89.0]]))], p1: s8(p0: s7(p0: s5(p0: s0(p0: [[90.0], [91.0]], p1: [[92.0]]), p1: [[s4(p0: [[s1(p0: s0(p0: [[93.0], [94.0]], p1: [[95.0]]), p1: s0(p0: [[96.0], [97.0]], p1: [[98.0]]), p2: s0(p0: [[99.0], [100.0]], p1: [[101.0]]))]], p1: [[102.0], [103.0], [104.0]])], [s4(p0: [[s1(p0: s0(p0: [[105.0], [106.0]], p1: [[107.0]]), p1: s0(p0: [[108.0], [109.0]], p1: [[110.0]]), p2: s0(p0: [[111.0], [112.0]], p1: [[113.0]]))]], p1: [[114.0], [115.0], [116.0]])], [s4(p0: [[s1(p0: s0(p0: [[117.0], [118.0]], p1: [[119.0]]), p1: s0(p0: [[120.0], [121.0]], p1: [[122.0]]), p2: s0(p0: [[123.0], [124.0]], p1: [[125.0]]))]], p1: [[126.0], [127.0], [128.0]])]]), p1: s4(p0: [[s1(p0: s0(p0: [[129.0], [130.0]], p1: [[131.0]]), p1: s0(p0: [[132.0], [133.0]], p1: [[134.0]]), p2: s0(p0: [[135.0], [136.0]], p1: [[137.0]]))]], p1: [[138.0], [139.0], [140.0]])), p1: [s5(p0: s0(p0: [[141.0], [142.0]], p1: [[143.0]]), p1: [[s4(p0: [[s1(p0: s0(p0: [[144.0], [145.0]], p1: [[146.0]]), p1: s0(p0: [[147.0], [148.0]], p1: [[149.0]]), p2: s0(p0: [[150.0], [151.0]], p1: [[152.0]]))]], p1: [[153.0], [154.0], [155.0]])], [s4(p0: [[s1(p0: s0(p0: [[156.0], [157.0]], p1: [[158.0]]), p1: s0(p0: [[159.0], [160.0]], p1: [[161.0]]), p2: s0(p0: [[162.0], [163.0]], p1: [[164.0]]))]], p1: [[165.0], [166.0], [167.0]])], [s4(p0: [[s1(p0: s0(p0: [[168.0], [169.0]], p1: [[170.0]]), p1: s0(p0: [[171.0], [172.0]], p1: [[173.0]]), p2: s0(p0: [[174.0], [175.0]], p1: [[176.0]]))]], p1: [[177.0], [178.0], [179.0]])]])], p2: s0(p0: [[180.0], [181.0]], p1: [[182.0]])))]
    let v1: Double = 183.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 183.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
