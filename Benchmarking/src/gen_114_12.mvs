  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s2 {
    var p0: [s0]
    var p1: [s0]
  } in
  let noinline_f0: ([s2], Float) -> Float = (v0: [s2], v1: Float) -> Float {
    let v2: s2 = v0[1] in
    let v3: [s0] = v2.p1 in
    let v10: s0 = v3[2] in
    let v23: [[Float]] = v10.p0 in
    let v37: [[Float]] = v10.p0 in
    let v16: s0 = v3[1] in
    var v20: s0 = v16 in
    let v24: [Float] = v23[0] in
    var v28: s0 = v16 in
    var v25: [[Float]] = v23 in
    v25[0] = v24 in
    let v21: [Float] = v37[0] in
    v28.p0 = v37 in
    let v30: [[Float]] = v20.p0 in
    var v34: s0 = v20 in
    let v65: [[Float]] = v28.p1 in
    v25[0] = v21 in
    let v26: [[Float]] = v10.p0 in
    let v46: [[Float]] = v20.p0 in
    v34.p1 = v65 in
    let v75: [[Float]] = v20.p1 in
    let v64: [Float] = v65[0] in
    v34.p1 = v65 in
    v28.p0 = v23 in
    let v136: [[Float]] = v34.p1 in
    v28.p0 = v46 in
    v20.p1 = v136 in
    v34.p0 = v26 in
    let v84: [[Float]] = v16.p1 in
    var v69: [[Float]] = v30 in
    v20.p0 = v25 in
    let v95: [Float] = v37[0] in
    v20.p1 = v84 in
    v20.p0 = v69 in
    let v120: Float = v64[0] in
    v28.p1 = v65 in
    v28.p1 = v75 in
    v69[0] = v95 in
    v120
  } in
  fun loop(i: Int, v0: [s2], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2([s0([[0.0]], [[1.0], [2.0]]), s0([[3.0]], [[4.0], [5.0]]), s0([[6.0]], [[7.0], [8.0]])], [s0([[9.0]], [[10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0]]), s0([[15.0]], [[16.0], [17.0]])]), s2([s0([[18.0]], [[19.0], [20.0]]), s0([[21.0]], [[22.0], [23.0]]), s0([[24.0]], [[25.0], [26.0]])], [s0([[27.0]], [[28.0], [29.0]]), s0([[30.0]], [[31.0], [32.0]]), s0([[33.0]], [[34.0], [35.0]])])] in
    let v1: Float = 36.0 in
    let initialResult: Float = 36.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()