  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let f41: (Float, [Float]) -> [Float] = (v0: Float, v1: [Float]) -> [Float] {
    var v3: Float = v0 in
    var v20: [Float] = v1 in
    v3 = v0 in
    v20[0] = v3 in
    v20
  } in
  let noinline_f0: ([Float], [s0], Float) -> Float = (v0: [Float], v1: [s0], v2: Float) -> Float {
    let v3: s0 = v1[0] in
    let v7: [[Float]] = v3.p0 in
    let v5: Float = v0[1] in
    let v18: [Float] = v7[0] in
    let v16: [Float] = f41(v5, v18) in
    let v73: Float = v16[0] in
    v73
  } in
  fun loop(i: Int, v0: [Float], v1: [s0], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [Float] = [0.0, 1.0, 2.0] in
    let v1: [s0] = [s0([[3.0], [4.0], [5.0]], [[6.0], [7.0], [8.0]])] in
    let v2: Float = 9.0 in
    let initialResult: Float = 9.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()