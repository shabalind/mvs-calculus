  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s1
    var p1: s1
  } in
  struct s4 {
    var p0: [s2]
    var p1: s2
  } in
  let f24: (s1) -> s1 = (v0: s1) -> s1 {
    let v6: s0 = v0.p0 in
    let v7: [[Float]] = v6.p1 in
    var v5: s1 = v0 in
    v5 = v0 in
    let v11: [[Float]] = v6.p0 in
    v5.p1 = v6 in
    let v42: s0 = s0(v11, v7) in
    v5.p1 = v42 in
    v5
  } in
  let f17: (s2) -> s2 = (v0: s2) -> s2 {
    var v6: s2 = v0 in
    var v2: s2 = v6 in
    v6 = v2 in
    var v5: s2 = v0 in
    let v4: s1 = v6.p1 in
    var v1: s1 = v4 in
    let v3: s1 = f24(v4) in
    let v10: s1 = f24(v4) in
    var v7: s1 = v10 in
    var v18: s2 = v2 in
    v18.p1 = v4 in
    v6.p1 = v1 in
    let v11: s1 = v18.p1 in
    let v12: s1 = f24(v7) in
    let v15: s1 = f24(v3) in
    let v14: s1 = v2.p0 in
    v2.p0 = v12 in
    var v16: s1 = v1 in
    v6.p1 = v14 in
    let v20: s0 = v7.p0 in
    let v24: s0 = v16.p0 in
    v16.p0 = v24 in
    v7.p0 = v20 in
    v16 = v11 in
    let v50: s1 = f24(v11) in
    v16.p1 = v24 in
    v1.p0 = v24 in
    let v78: s1 = v5.p0 in
    let v67: s0 = v50.p1 in
    let v58: s2 = s2(v50, v78) in
    v18.p0 = v4 in
    var v91: s2 = v58 in
    v16.p0 = v67 in
    let v81: s0 = v15.p1 in
    v16.p1 = v81 in
    v91
  } in
  let noinline_f0: (s4, Float) -> Float = (v0: s4, v1: Float) -> Float {
    let v5: s2 = v0.p1 in
    let v2: s2 = f17(v5) in
    var v7: Float = v1 in
    let v4: s1 = v2.p1 in
    let v3: s1 = f24(v4) in
    let v25: s0 = v3.p0 in
    var v53: s0 = v25 in
    let v16: [[Float]] = v53.p1 in
    let v32: [Float] = v16[0] in
    let v35: [[Float]] = v53.p1 in
    var v68: [Float] = v32 in
    var v50: [[Float]] = v35 in
    v53.p1 = v50 in
    v53.p1 = v16 in
    v68[0] = v7 in
    let v93: Float = v68[0] in
    v93
  } in
  fun loop(i: Int, v0: s4, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s4 = s4([s2(s1(s0([[0.0], [1.0]], [[2.0]]), s0([[3.0], [4.0]], [[5.0]])), s1(s0([[6.0], [7.0]], [[8.0]]), s0([[9.0], [10.0]], [[11.0]]))), s2(s1(s0([[12.0], [13.0]], [[14.0]]), s0([[15.0], [16.0]], [[17.0]])), s1(s0([[18.0], [19.0]], [[20.0]]), s0([[21.0], [22.0]], [[23.0]]))), s2(s1(s0([[24.0], [25.0]], [[26.0]]), s0([[27.0], [28.0]], [[29.0]])), s1(s0([[30.0], [31.0]], [[32.0]]), s0([[33.0], [34.0]], [[35.0]])))], s2(s1(s0([[36.0], [37.0]], [[38.0]]), s0([[39.0], [40.0]], [[41.0]])), s1(s0([[42.0], [43.0]], [[44.0]]), s0([[45.0], [46.0]], [[47.0]])))) in
    let v1: Float = 48.0 in
    let initialResult: Float = 48.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()