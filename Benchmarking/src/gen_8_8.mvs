  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[Float]]
    var p1: s0
  } in
  struct s2 {
    var p0: [[s0]]
    var p1: [s0]
  } in
  struct s3 {
    var p0: [s1]
    var p1: s2
  } in
  let f88: (s2) -> s2 = (v0: s2) -> s2 {
    let v2: [[s0]] = v0.p0 in
    var v12: s2 = v0 in
    v12.p0 = v2 in
    var v72: s2 = v12 in
    v72
  } in
  let f86: ([[s0]]) -> [[s0]] = (v0: [[s0]]) -> [[s0]] {
    let v5: [s0] = v0[1] in
    var v7: [[s0]] = v0 in
    v7 = v0 in
    v7[2] = v5 in
    var v3: [s0] = v5 in
    v7[1] = v5 in
    v7[1] = v5 in
    v7[0] = v5 in
    v7[0] = v3 in
    v7[1] = v3 in
    var v109: [[s0]] = v7 in
    var v116: [[s0]] = v109 in
    v116
  } in
  let f77: (s2) -> s2 = (v0: s2) -> s2 {
    var v7: s2 = v0 in
    var v6: s2 = v0 in
    let v4: [[s0]] = v6.p0 in
    let v8: [[s0]] = v7.p0 in
    let v3: [s0] = v4[0] in
    v6.p0 = v8 in
    v7.p0 = v8 in
    v7.p0 = v8 in
    let v1: [[s0]] = v6.p0 in
    let v10: s2 = f88(v6) in
    var v9: [s0] = v3 in
    var v18: s2 = v6 in
    let v16: [s0] = v18.p1 in
    v6.p0 = v1 in
    var v22: s2 = v6 in
    v6 = v10 in
    var v25: [s0] = v16 in
    v6.p1 = v25 in
    let v21: s0 = v9[0] in
    let v23: [s0] = v18.p1 in
    v25[0] = v21 in
    var v17: [s0] = v16 in
    v22.p1 = v23 in
    v22.p1 = v17 in
    v22.p1 = v17 in
    v22
  } in
  let f63: ([[s0]]) -> [[s0]] = (v0: [[s0]]) -> [[s0]] {
    let v6: [[s0]] = f86(v0) in
    let v1: [[s0]] = f86(v0) in
    let v3: [s0] = v0[2] in
    var v11: [[s0]] = v1 in
    var v12: [s0] = v3 in
    v11[2] = v12 in
    let v17: [[s0]] = f86(v11) in
    let v15: [s0] = v6[2] in
    v11[2] = v12 in
    let v48: [[s0]] = f86(v17) in
    let v155: [[s0]] = f86(v48) in
    v11[2] = v15 in
    v155
  } in
  let f52: (s2) -> s2 = (v0: s2) -> s2 {
    var v5: s2 = v0 in
    let v1: [[s0]] = v0.p0 in
    var v3: [[s0]] = v1 in
    let v9: s2 = f77(v5) in
    let v6: [s0] = v9.p1 in
    let v7: s2 = s2(v3, v6) in
    var v14: [[s0]] = v1 in
    let v11: s2 = f77(v7) in
    let v16: [[s0]] = f63(v14) in
    v5.p0 = v14 in
    v5.p0 = v16 in
    v11
  } in
  let noinline_f0: (s3, [s3], s3, Float) -> Float = (v0: s3, v1: [s3], v2: s3, v3: Float) -> Float {
    let v5: s2 = v0.p1 in
    let v4: s2 = f88(v5) in
    let v16: s2 = f52(v4) in
    let v58: [s0] = v16.p1 in
    let v46: s0 = v58[1] in
    var v40: s0 = v46 in
    let v18: [[Float]] = v40.p1 in
    let v31: [Float] = v18[0] in
    let v50: Float = v31[0] in
    v40 = v46 in
    v50
  } in
  fun loop(i: Int, v0: s3, v1: [s3], v2: s3, v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3([s1([[0.0], [1.0]], s0([[2.0], [3.0], [4.0]], [[5.0]])), s1([[6.0], [7.0]], s0([[8.0], [9.0], [10.0]], [[11.0]]))], s2([[s0([[12.0], [13.0], [14.0]], [[15.0]])], [s0([[16.0], [17.0], [18.0]], [[19.0]])], [s0([[20.0], [21.0], [22.0]], [[23.0]])]], [s0([[24.0], [25.0], [26.0]], [[27.0]]), s0([[28.0], [29.0], [30.0]], [[31.0]])])) in
    let v1: [s3] = [s3([s1([[32.0], [33.0]], s0([[34.0], [35.0], [36.0]], [[37.0]])), s1([[38.0], [39.0]], s0([[40.0], [41.0], [42.0]], [[43.0]]))], s2([[s0([[44.0], [45.0], [46.0]], [[47.0]])], [s0([[48.0], [49.0], [50.0]], [[51.0]])], [s0([[52.0], [53.0], [54.0]], [[55.0]])]], [s0([[56.0], [57.0], [58.0]], [[59.0]]), s0([[60.0], [61.0], [62.0]], [[63.0]])]))] in
    let v2: s3 = s3([s1([[64.0], [65.0]], s0([[66.0], [67.0], [68.0]], [[69.0]])), s1([[70.0], [71.0]], s0([[72.0], [73.0], [74.0]], [[75.0]]))], s2([[s0([[76.0], [77.0], [78.0]], [[79.0]])], [s0([[80.0], [81.0], [82.0]], [[83.0]])], [s0([[84.0], [85.0], [86.0]], [[87.0]])]], [s0([[88.0], [89.0], [90.0]], [[91.0]]), s0([[92.0], [93.0], [94.0]], [[95.0]])])) in
    let v3: Float = 96.0 in
    let initialResult: Float = 96.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()