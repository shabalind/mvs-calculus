  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: (s0, [s0], Float) -> Float = (v0: s0, v1: [s0], v2: Float) -> Float {
    let v9: [[Float]] = v0.p0 in
    var v5: Float = v2 in
    let v4: [Float] = v9[0] in
    var v32: Float = v5 in
    let v25: Float = v2 / v32 in
    let v37: Float = v4[0] in
    var v20: [Float] = v4 in
    v20 = v4 in
    v32 = v37 in
    v20[0] = v25 in
    var v54: [Float] = v20 in
    let v56: Float = v54[0] in
    v54[0] = v25 in
    var v129: Float = v56 in
    v129
  } in
  fun loop(i: Int, v0: s0, v1: [s0], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0]], [[1.0], [2.0], [3.0]]) in
    let v1: [s0] = [s0([[4.0]], [[5.0], [6.0], [7.0]]), s0([[8.0]], [[9.0], [10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0], [15.0]])] in
    let v2: Float = 16.0 in
    let initialResult: Float = 16.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()