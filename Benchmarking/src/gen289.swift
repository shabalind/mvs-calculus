  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: s1
  }
  struct s4 {
    var p0: s0
  }
  struct s5 {
    var p0: s4
    var p1: [s0]
  }
  struct s6 {
    var p0: s5
    var p1: s5
  }
  @inline(never)
  func f0(_ v0: [s2], _ v1: [s6], _ v2: Double) -> Double {
    let v13: s2 = v0[0]
    let v12: s1 = v13.p0
    let v17: Double = v2 + v2
    let v43: [s0] = v12.p1
    let v71: s0 = v43[1]
    var v49: Double = v17
    v49 = v17
    var v141: Double = v49
    let v66: Double = v49 + v141
    let v90: [[Double]] = v71.p0
    let v160: [Double] = v90[1]
    let v106: Double = v160[0]
    v141 = v106
    return v66
  }
  func benchmark() {
    let v0: [s2] = [s2(p0: s1(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0], [4.0]]), p1: [s0(p0: [[5.0], [6.0]], p1: [[7.0], [8.0], [9.0]]), s0(p0: [[10.0], [11.0]], p1: [[12.0], [13.0], [14.0]]), s0(p0: [[15.0], [16.0]], p1: [[17.0], [18.0], [19.0]])]))]
    let v1: [s6] = [s6(p0: s5(p0: s4(p0: s0(p0: [[20.0], [21.0]], p1: [[22.0], [23.0], [24.0]])), p1: [s0(p0: [[25.0], [26.0]], p1: [[27.0], [28.0], [29.0]]), s0(p0: [[30.0], [31.0]], p1: [[32.0], [33.0], [34.0]])]), p1: s5(p0: s4(p0: s0(p0: [[35.0], [36.0]], p1: [[37.0], [38.0], [39.0]])), p1: [s0(p0: [[40.0], [41.0]], p1: [[42.0], [43.0], [44.0]]), s0(p0: [[45.0], [46.0]], p1: [[47.0], [48.0], [49.0]])])), s6(p0: s5(p0: s4(p0: s0(p0: [[50.0], [51.0]], p1: [[52.0], [53.0], [54.0]])), p1: [s0(p0: [[55.0], [56.0]], p1: [[57.0], [58.0], [59.0]]), s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0], [64.0]])]), p1: s5(p0: s4(p0: s0(p0: [[65.0], [66.0]], p1: [[67.0], [68.0], [69.0]])), p1: [s0(p0: [[70.0], [71.0]], p1: [[72.0], [73.0], [74.0]]), s0(p0: [[75.0], [76.0]], p1: [[77.0], [78.0], [79.0]])])), s6(p0: s5(p0: s4(p0: s0(p0: [[80.0], [81.0]], p1: [[82.0], [83.0], [84.0]])), p1: [s0(p0: [[85.0], [86.0]], p1: [[87.0], [88.0], [89.0]]), s0(p0: [[90.0], [91.0]], p1: [[92.0], [93.0], [94.0]])]), p1: s5(p0: s4(p0: s0(p0: [[95.0], [96.0]], p1: [[97.0], [98.0], [99.0]])), p1: [s0(p0: [[100.0], [101.0]], p1: [[102.0], [103.0], [104.0]]), s0(p0: [[105.0], [106.0]], p1: [[107.0], [108.0], [109.0]])]))]
    let v2: Double = 110.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 110.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
