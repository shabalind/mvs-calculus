  struct s0 {
    var p0: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s2 {
    var p0: [s0]
    var p1: [[s1]]
  } in
  struct s3 {
    var p0: s2
    var p1: [s0]
  } in
  let f71: ([Float]) -> [Float] = (v0: [Float]) -> [Float] {
    let v6: Float = v0[0] in
    var v7: Float = v6 in
    var v4: [Float] = v0 in
    v4[0] = v6 in
    let v1: Float = v4[0] in
    let v10: Float = v4[0] in
    v4[0] = v10 in
    var v8: [Float] = v4 in
    var v5: [Float] = v8 in
    let v2: [Float] = [v10, v10, v1, v1] in
    let v9: Float = v7 * v1 in
    let v12: Float = v8[0] in
    var v15: [Float] = v4 in
    let v16: Float = v5[0] in
    let v24: Float = v2[0] in
    let v22: Float = v2[2] in
    let v36: Float = v2[1] in
    var v21: [Float] = v0 in
    var v29: [Float] = v4 in
    v8[0] = v24 in
    v4[0] = v7 in
    let v46: Float = v21[0] in
    let v26: [Float] = [v16, v36, v7, v46] in
    let v54: Float = v26[3] in
    v5[0] = v24 in
    v29[0] = v36 in
    v4[0] = v54 in
    v21[0] = v22 in
    var v53: Float = v54 in
    let v30: Float = v2[1] in
    var v34: [Float] = v26 in
    var v55: [Float] = v26 in
    var v39: [Float] = v55 in
    let v49: Float = v4[0] in
    v55[0] = v49 in
    let v76: Float = v15[0] in
    let v40: Float = v30 * v22 in
    let v47: [[Float]] = [v2, v2, v34, v39, v55, v39] in
    v8[0] = v40 in
    var v35: [Float] = v21 in
    v34[2] = v12 in
    let v59: [Float] = v47[5] in
    var v92: [Float] = v29 in
    v8[0] = v53 in
    v35[0] = v53 in
    let v72: Float = v59[3] in
    v92[0] = v72 in
    v4[0] = v9 in
    v92[0] = v76 in
    var v135: [Float] = v92 in
    v35 = v135 in
    v15[0] = v46 in
    v35
  } in
  let f49: ([Float]) -> [Float] = (v0: [Float]) -> [Float] {
    var v8: [Float] = v0 in
    var v2: [Float] = v0 in
    let v6: Float = v2[2] in
    let v1: Float = v2[0] in
    v2[1] = v6 in
    var v18: [Float] = v8 in
    var v15: Float = v1 in
    let v14: Float = v8[1] in
    v8[0] = v14 in
    v8[2] = v15 in
    var v22: [Float] = v18 in
    var v17: [Float] = v22 in
    v17[2] = v1 in
    v17
  } in
  let noinline_f0: (s3, Float) -> Float = (v0: s3, v1: Float) -> Float {
    var v2: Float = v1 in
    let v4: [s0] = v0.p1 in
    let v7: Float = v1 * v1 in
    let v9: [Float] = [v2, v1, v7] in
    let v6: [Float] = f49(v9) in
    var v3: [Float] = v9 in
    let v14: s0 = v4[0] in
    let v10: [[Float]] = v14.p0 in
    v3[0] = v2 in
    let v19: [Float] = v10[0] in
    v3 = v6 in
    let v24: Float = v19[0] in
    let v33: Float = v3[2] in
    let v54: [Float] = f49(v3) in
    var v57: [Float] = v19 in
    let v25: [Float] = f71(v57) in
    v3[2] = v7 in
    let v175: [Float] = f71(v25) in
    v57[0] = v33 in
    var v63: Float = v7 in
    let v60: Float = v54[2] in
    let v120: Float = v24 / v60 in
    v57[0] = v63 in
    let v52: Float = v175[0] in
    v3[2] = v7 in
    let v133: Float = v120 / v52 in
    v133
  } in
  fun loop(i: Int, v0: s3, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(s2([s0([[0.0], [1.0]])], [[s1([s0([[2.0], [3.0]])], [s0([[4.0], [5.0]])])], [s1([s0([[6.0], [7.0]])], [s0([[8.0], [9.0]])])], [s1([s0([[10.0], [11.0]])], [s0([[12.0], [13.0]])])]]), [s0([[14.0], [15.0]]), s0([[16.0], [17.0]])]) in
    let v1: Float = 18.0 in
    let initialResult: Float = 18.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()