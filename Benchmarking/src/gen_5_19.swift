  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: s0
  }
  struct s2 {
    var p0: s1
    var p1: [s0]
  }
  struct s3 {
    var p0: s0
    var p1: [s2]
  }
  struct s6 {
    var p0: s3
    var p1: [[s3]]
  }
  func f6(_ v0: Double) -> Double {
    var v2: Double = v0
    var v7: Double = v0
    v7 = v0
    let v3: Double = v7 * v0
    var v4: Double = v3
    var v1: Double = v2
    var v5: Double = v2
    let v11: [Double] = [v5, v0, v4, v1, v1, v1, v4]
    let v6: Double = v11[5]
    return v6
  }
  @inline(never)
  func f0(_ v0: [[s2]], _ v1: [s6], _ v2: [s3], _ v3: Double) -> Double {
    let v4: Double = f6(v3)
    let v17: Double = v3 + v4
    return v17
  }
  func benchmark() {
    let v0: [[s2]] = [[s2(p0: s1(p0: [s0(p0: [[0.0]], p1: [[1.0], [2.0], [3.0]], p2: [[4.0]]), s0(p0: [[5.0]], p1: [[6.0], [7.0], [8.0]], p2: [[9.0]]), s0(p0: [[10.0]], p1: [[11.0], [12.0], [13.0]], p2: [[14.0]])], p1: s0(p0: [[15.0]], p1: [[16.0], [17.0], [18.0]], p2: [[19.0]])), p1: [s0(p0: [[20.0]], p1: [[21.0], [22.0], [23.0]], p2: [[24.0]])])]]
    let v1: [s6] = [s6(p0: s3(p0: s0(p0: [[25.0]], p1: [[26.0], [27.0], [28.0]], p2: [[29.0]]), p1: [s2(p0: s1(p0: [s0(p0: [[30.0]], p1: [[31.0], [32.0], [33.0]], p2: [[34.0]]), s0(p0: [[35.0]], p1: [[36.0], [37.0], [38.0]], p2: [[39.0]]), s0(p0: [[40.0]], p1: [[41.0], [42.0], [43.0]], p2: [[44.0]])], p1: s0(p0: [[45.0]], p1: [[46.0], [47.0], [48.0]], p2: [[49.0]])), p1: [s0(p0: [[50.0]], p1: [[51.0], [52.0], [53.0]], p2: [[54.0]])]), s2(p0: s1(p0: [s0(p0: [[55.0]], p1: [[56.0], [57.0], [58.0]], p2: [[59.0]]), s0(p0: [[60.0]], p1: [[61.0], [62.0], [63.0]], p2: [[64.0]]), s0(p0: [[65.0]], p1: [[66.0], [67.0], [68.0]], p2: [[69.0]])], p1: s0(p0: [[70.0]], p1: [[71.0], [72.0], [73.0]], p2: [[74.0]])), p1: [s0(p0: [[75.0]], p1: [[76.0], [77.0], [78.0]], p2: [[79.0]])]), s2(p0: s1(p0: [s0(p0: [[80.0]], p1: [[81.0], [82.0], [83.0]], p2: [[84.0]]), s0(p0: [[85.0]], p1: [[86.0], [87.0], [88.0]], p2: [[89.0]]), s0(p0: [[90.0]], p1: [[91.0], [92.0], [93.0]], p2: [[94.0]])], p1: s0(p0: [[95.0]], p1: [[96.0], [97.0], [98.0]], p2: [[99.0]])), p1: [s0(p0: [[100.0]], p1: [[101.0], [102.0], [103.0]], p2: [[104.0]])])]), p1: [[s3(p0: s0(p0: [[105.0]], p1: [[106.0], [107.0], [108.0]], p2: [[109.0]]), p1: [s2(p0: s1(p0: [s0(p0: [[110.0]], p1: [[111.0], [112.0], [113.0]], p2: [[114.0]]), s0(p0: [[115.0]], p1: [[116.0], [117.0], [118.0]], p2: [[119.0]]), s0(p0: [[120.0]], p1: [[121.0], [122.0], [123.0]], p2: [[124.0]])], p1: s0(p0: [[125.0]], p1: [[126.0], [127.0], [128.0]], p2: [[129.0]])), p1: [s0(p0: [[130.0]], p1: [[131.0], [132.0], [133.0]], p2: [[134.0]])]), s2(p0: s1(p0: [s0(p0: [[135.0]], p1: [[136.0], [137.0], [138.0]], p2: [[139.0]]), s0(p0: [[140.0]], p1: [[141.0], [142.0], [143.0]], p2: [[144.0]]), s0(p0: [[145.0]], p1: [[146.0], [147.0], [148.0]], p2: [[149.0]])], p1: s0(p0: [[150.0]], p1: [[151.0], [152.0], [153.0]], p2: [[154.0]])), p1: [s0(p0: [[155.0]], p1: [[156.0], [157.0], [158.0]], p2: [[159.0]])]), s2(p0: s1(p0: [s0(p0: [[160.0]], p1: [[161.0], [162.0], [163.0]], p2: [[164.0]]), s0(p0: [[165.0]], p1: [[166.0], [167.0], [168.0]], p2: [[169.0]]), s0(p0: [[170.0]], p1: [[171.0], [172.0], [173.0]], p2: [[174.0]])], p1: s0(p0: [[175.0]], p1: [[176.0], [177.0], [178.0]], p2: [[179.0]])), p1: [s0(p0: [[180.0]], p1: [[181.0], [182.0], [183.0]], p2: [[184.0]])])])], [s3(p0: s0(p0: [[185.0]], p1: [[186.0], [187.0], [188.0]], p2: [[189.0]]), p1: [s2(p0: s1(p0: [s0(p0: [[190.0]], p1: [[191.0], [192.0], [193.0]], p2: [[194.0]]), s0(p0: [[195.0]], p1: [[196.0], [197.0], [198.0]], p2: [[199.0]]), s0(p0: [[200.0]], p1: [[201.0], [202.0], [203.0]], p2: [[204.0]])], p1: s0(p0: [[205.0]], p1: [[206.0], [207.0], [208.0]], p2: [[209.0]])), p1: [s0(p0: [[210.0]], p1: [[211.0], [212.0], [213.0]], p2: [[214.0]])]), s2(p0: s1(p0: [s0(p0: [[215.0]], p1: [[216.0], [217.0], [218.0]], p2: [[219.0]]), s0(p0: [[220.0]], p1: [[221.0], [222.0], [223.0]], p2: [[224.0]]), s0(p0: [[225.0]], p1: [[226.0], [227.0], [228.0]], p2: [[229.0]])], p1: s0(p0: [[230.0]], p1: [[231.0], [232.0], [233.0]], p2: [[234.0]])), p1: [s0(p0: [[235.0]], p1: [[236.0], [237.0], [238.0]], p2: [[239.0]])]), s2(p0: s1(p0: [s0(p0: [[240.0]], p1: [[241.0], [242.0], [243.0]], p2: [[244.0]]), s0(p0: [[245.0]], p1: [[246.0], [247.0], [248.0]], p2: [[249.0]]), s0(p0: [[250.0]], p1: [[251.0], [252.0], [253.0]], p2: [[254.0]])], p1: s0(p0: [[255.0]], p1: [[256.0], [257.0], [258.0]], p2: [[259.0]])), p1: [s0(p0: [[260.0]], p1: [[261.0], [262.0], [263.0]], p2: [[264.0]])])])]])]
    let v2: [s3] = [s3(p0: s0(p0: [[265.0]], p1: [[266.0], [267.0], [268.0]], p2: [[269.0]]), p1: [s2(p0: s1(p0: [s0(p0: [[270.0]], p1: [[271.0], [272.0], [273.0]], p2: [[274.0]]), s0(p0: [[275.0]], p1: [[276.0], [277.0], [278.0]], p2: [[279.0]]), s0(p0: [[280.0]], p1: [[281.0], [282.0], [283.0]], p2: [[284.0]])], p1: s0(p0: [[285.0]], p1: [[286.0], [287.0], [288.0]], p2: [[289.0]])), p1: [s0(p0: [[290.0]], p1: [[291.0], [292.0], [293.0]], p2: [[294.0]])]), s2(p0: s1(p0: [s0(p0: [[295.0]], p1: [[296.0], [297.0], [298.0]], p2: [[299.0]]), s0(p0: [[300.0]], p1: [[301.0], [302.0], [303.0]], p2: [[304.0]]), s0(p0: [[305.0]], p1: [[306.0], [307.0], [308.0]], p2: [[309.0]])], p1: s0(p0: [[310.0]], p1: [[311.0], [312.0], [313.0]], p2: [[314.0]])), p1: [s0(p0: [[315.0]], p1: [[316.0], [317.0], [318.0]], p2: [[319.0]])]), s2(p0: s1(p0: [s0(p0: [[320.0]], p1: [[321.0], [322.0], [323.0]], p2: [[324.0]]), s0(p0: [[325.0]], p1: [[326.0], [327.0], [328.0]], p2: [[329.0]]), s0(p0: [[330.0]], p1: [[331.0], [332.0], [333.0]], p2: [[334.0]])], p1: s0(p0: [[335.0]], p1: [[336.0], [337.0], [338.0]], p2: [[339.0]])), p1: [s0(p0: [[340.0]], p1: [[341.0], [342.0], [343.0]], p2: [[344.0]])])]), s3(p0: s0(p0: [[345.0]], p1: [[346.0], [347.0], [348.0]], p2: [[349.0]]), p1: [s2(p0: s1(p0: [s0(p0: [[350.0]], p1: [[351.0], [352.0], [353.0]], p2: [[354.0]]), s0(p0: [[355.0]], p1: [[356.0], [357.0], [358.0]], p2: [[359.0]]), s0(p0: [[360.0]], p1: [[361.0], [362.0], [363.0]], p2: [[364.0]])], p1: s0(p0: [[365.0]], p1: [[366.0], [367.0], [368.0]], p2: [[369.0]])), p1: [s0(p0: [[370.0]], p1: [[371.0], [372.0], [373.0]], p2: [[374.0]])]), s2(p0: s1(p0: [s0(p0: [[375.0]], p1: [[376.0], [377.0], [378.0]], p2: [[379.0]]), s0(p0: [[380.0]], p1: [[381.0], [382.0], [383.0]], p2: [[384.0]]), s0(p0: [[385.0]], p1: [[386.0], [387.0], [388.0]], p2: [[389.0]])], p1: s0(p0: [[390.0]], p1: [[391.0], [392.0], [393.0]], p2: [[394.0]])), p1: [s0(p0: [[395.0]], p1: [[396.0], [397.0], [398.0]], p2: [[399.0]])]), s2(p0: s1(p0: [s0(p0: [[400.0]], p1: [[401.0], [402.0], [403.0]], p2: [[404.0]]), s0(p0: [[405.0]], p1: [[406.0], [407.0], [408.0]], p2: [[409.0]]), s0(p0: [[410.0]], p1: [[411.0], [412.0], [413.0]], p2: [[414.0]])], p1: s0(p0: [[415.0]], p1: [[416.0], [417.0], [418.0]], p2: [[419.0]])), p1: [s0(p0: [[420.0]], p1: [[421.0], [422.0], [423.0]], p2: [[424.0]])])])]
    let v3: Double = 425.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 425.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
