  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s3 {
    var p0: [[s1]]
    var p1: s1
  } in
  let f38: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    let v7: s0 = v0.p1 in
    let v2: [s0] = [v7, v7, v7, v7, v7, v7, v7] in
    let v9: s0 = v2[1] in
    let v5: [Float] = [v1, v1, v1, v1, v1] in
    let v4: [[Float]] = v9.p0 in
    let v24: Float = v5[3] in
    let v22: [Float] = v4[1] in
    let v72: Float = v22[0] in
    var v82: Float = v72 in
    v82 = v24 in
    v82
  } in
  let noinline_f0: (s1, s3, Float) -> Float = (v0: s1, v1: s3, v2: Float) -> Float {
    let v3: s0 = v0.p1 in
    let v7: [s0] = [v3, v3, v3, v3, v3, v3, v3] in
    let v11: s1 = s1(v3, v3) in
    var v18: s0 = v3 in
    let v16: s0 = v7[2] in
    let v19: [[Float]] = v18.p0 in
    v18 = v16 in
    let v17: [Float] = v19[1] in
    let v23: Float = f38(v11, v2) in
    let v84: Float = v17[0] in
    let v40: Float = v84 - v23 in
    v18.p0 = v19 in
    v40
  } in
  fun loop(i: Int, v0: s1, v1: s3, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1(s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]), s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]])) in
    let v1: s3 = s3([[s1(s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]]), s0([[15.0], [16.0]], [[17.0], [18.0], [19.0]]))], [s1(s0([[20.0], [21.0]], [[22.0], [23.0], [24.0]]), s0([[25.0], [26.0]], [[27.0], [28.0], [29.0]]))], [s1(s0([[30.0], [31.0]], [[32.0], [33.0], [34.0]]), s0([[35.0], [36.0]], [[37.0], [38.0], [39.0]]))]], s1(s0([[40.0], [41.0]], [[42.0], [43.0], [44.0]]), s0([[45.0], [46.0]], [[47.0], [48.0], [49.0]]))) in
    let v2: Float = 50.0 in
    let initialResult: Float = 50.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()