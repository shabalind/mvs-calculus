  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let f67: (Float) -> Float = (v0: Float) -> Float {
    let v2: Float = v0 * v0 in
    let v3: [Float] = [v2, v2, v2, v2, v2] in
    let v19: Float = v3[0] in
    v19
  } in
  let noinline_f0: (s0, [s0], Float) -> Float = (v0: s0, v1: [s0], v2: Float) -> Float {
    let v4: Float = f67(v2) in
    let v7: s0 = v1[0] in
    let v12: Float = f67(v4) in
    let v9: [[Float]] = v7.p0 in
    let v11: [Float] = [v12, v12, v12, v2, v4] in
    let v13: [Float] = v9[0] in
    let v14: Float = v13[0] in
    let v34: Float = v11[2] in
    let v64: Float = v34 * v34 in
    let v57: Float = v14 - v64 in
    v57
  } in
  fun loop(i: Int, v0: s0, v1: [s0], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0]], [[1.0]]) in
    let v1: [s0] = [s0([[2.0]], [[3.0]]), s0([[4.0]], [[5.0]]), s0([[6.0]], [[7.0]])] in
    let v2: Float = 8.0 in
    let initialResult: Float = 8.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()