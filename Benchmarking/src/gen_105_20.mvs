  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  let f59: (Float) -> Float = (v0: Float) -> Float {
    var v4: Float = v0 in
    var v1: Float = v0 in
    var v18: Float = v4 in
    var v21: Float = v1 in
    let v40: [Float] = [v18] in
    var v22: [Float] = v40 in
    var v33: [Float] = v22 in
    v22[0] = v21 in
    let v39: Float = v33[0] in
    v39
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    var v5: Float = v1 in
    v5 = v1 in
    v5 = v1 in
    let v16: Float = f59(v5) in
    var v35: Float = v16 in
    let v54: Float = v35 - v35 in
    v35 = v16 in
    v5 = v35 in
    let v140: Float = v54 - v1 in
    v140
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1(s0([[0.0]], [[1.0]]), [[s0([[2.0]], [[3.0]])], [s0([[4.0]], [[5.0]])]]) in
    let v1: Float = 6.0 in
    let initialResult: Float = 6.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()