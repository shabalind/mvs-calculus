  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
    var p2: s0
    var p3: s0
  } in
  let noinline_f0: ([s1], Float) -> Float = (v0: [s1], v1: Float) -> Float {
    let v3: s1 = v0[0] in
    let v4: s0 = v3.p2 in
    var v7: s0 = v4 in
    let v15: [[Float]] = v4.p0 in
    var v22: [[Float]] = v15 in
    v7.p1 = v22 in
    let v41: [[Float]] = v7.p0 in
    let v28: [[Float]] = v7.p1 in
    let v17: [[Float]] = v7.p1 in
    let v16: [Float] = v22[0] in
    v7.p1 = v17 in
    v22[0] = v16 in
    var v36: [[Float]] = v15 in
    let v37: [Float] = v28[0] in
    v22[0] = v37 in
    let v39: s0 = s0(v36, v17) in
    v7 = v39 in
    v7.p1 = v41 in
    let v72: Float = v16[0] in
    v72
  } in
  fun loop(i: Int, v0: [s1], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1([s0([[0.0]], [[1.0]]), s0([[2.0]], [[3.0]]), s0([[4.0]], [[5.0]])], [[s0([[6.0]], [[7.0]])]], s0([[8.0]], [[9.0]]), s0([[10.0]], [[11.0]])), s1([s0([[12.0]], [[13.0]]), s0([[14.0]], [[15.0]]), s0([[16.0]], [[17.0]])], [[s0([[18.0]], [[19.0]])]], s0([[20.0]], [[21.0]]), s0([[22.0]], [[23.0]]))] in
    let v1: Float = 24.0 in
    let initialResult: Float = 24.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()