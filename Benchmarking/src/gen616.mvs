  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
    var p2: s0
    var p3: [s0]
  } in
  let noinline_f0: (s1, [s1], Float) -> Float = (v0: s1, v1: [s1], v2: Float) -> Float {
    let v8: s1 = v1[2] in
    let v4: s1 = v1[1] in
    var v5: s1 = v4 in
    let v9: s0 = v5.p1 in
    v5.p2 = v9 in
    v5 = v8 in
    let v11: [[Float]] = v9.p0 in
    v5.p2 = v9 in
    var v17: Float = v2 in
    let v13: [Float] = v11[0] in
    var v25: Float = v17 in
    let v14: [Float] = v11[0] in
    let v27: Float = v13[0] in
    var v22: [Float] = v14 in
    let v41: Float = v22[0] in
    let v29: Float = v27 + v25 in
    v5.p2 = v9 in
    let v48: Float = v29 - v41 in
    v48
  } in
  fun loop(i: Int, v0: s1, v1: [s1], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1(s0([[0.0]], [[1.0], [2.0], [3.0]]), s0([[4.0]], [[5.0], [6.0], [7.0]]), s0([[8.0]], [[9.0], [10.0], [11.0]]), [s0([[12.0]], [[13.0], [14.0], [15.0]]), s0([[16.0]], [[17.0], [18.0], [19.0]]), s0([[20.0]], [[21.0], [22.0], [23.0]])]) in
    let v1: [s1] = [s1(s0([[24.0]], [[25.0], [26.0], [27.0]]), s0([[28.0]], [[29.0], [30.0], [31.0]]), s0([[32.0]], [[33.0], [34.0], [35.0]]), [s0([[36.0]], [[37.0], [38.0], [39.0]]), s0([[40.0]], [[41.0], [42.0], [43.0]]), s0([[44.0]], [[45.0], [46.0], [47.0]])]), s1(s0([[48.0]], [[49.0], [50.0], [51.0]]), s0([[52.0]], [[53.0], [54.0], [55.0]]), s0([[56.0]], [[57.0], [58.0], [59.0]]), [s0([[60.0]], [[61.0], [62.0], [63.0]]), s0([[64.0]], [[65.0], [66.0], [67.0]]), s0([[68.0]], [[69.0], [70.0], [71.0]])]), s1(s0([[72.0]], [[73.0], [74.0], [75.0]]), s0([[76.0]], [[77.0], [78.0], [79.0]]), s0([[80.0]], [[81.0], [82.0], [83.0]]), [s0([[84.0]], [[85.0], [86.0], [87.0]]), s0([[88.0]], [[89.0], [90.0], [91.0]]), s0([[92.0]], [[93.0], [94.0], [95.0]])])] in
    let v2: Float = 96.0 in
    let initialResult: Float = 96.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()