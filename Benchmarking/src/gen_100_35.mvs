  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s5 {
    var p0: [s0]
  } in
  let noinline_f0: (s5, Float) -> Float = (v0: s5, v1: Float) -> Float {
    let v4: [s0] = v0.p0 in
    let v7: [s0] = v0.p0 in
    let v6: s0 = v4[0] in
    let v24: s0 = v7[1] in
    let v19: [[Float]] = v24.p0 in
    let v14: [[Float]] = v6.p0 in
    let v30: [Float] = v19[0] in
    var v51: [[Float]] = v14 in
    let v60: [Float] = v51[0] in
    v51[0] = v30 in
    let v81: Float = v60[0] in
    v81
  } in
  fun loop(i: Int, v0: s5, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s5 = s5([s0([[0.0]], [[1.0], [2.0], [3.0]]), s0([[4.0]], [[5.0], [6.0], [7.0]]), s0([[8.0]], [[9.0], [10.0], [11.0]])]) in
    let v1: Float = 12.0 in
    let initialResult: Float = 12.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()