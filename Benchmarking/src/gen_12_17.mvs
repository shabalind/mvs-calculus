  struct s0 {
    var p0: [Float]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
    var p2: s0
    var p3: [Float]
  } in
  let f5: (Float) -> Float = (v0: Float) -> Float {
    let v1: Float = v0 + v0 in
    var v7: Float = v1 in
    var v2: Float = v1 in
    var v10: Float = v0 in
    var v15: Float = v7 in
    var v4: Float = v15 in
    var v24: Float = v1 in
    let v6: [Float] = [v1, v24, v0, v10, v1, v0, v4] in
    let v16: Float = v6[3] in
    let v21: Float = v6[4] in
    var v13: [Float] = v6 in
    v13[5] = v21 in
    let v28: [Float] = [v2] in
    let v42: [[Float]] = [v28] in
    let v14: Float = v13[0] in
    let v30: [Float] = v42[0] in
    v13[4] = v14 in
    v13[5] = v4 in
    var v66: [Float] = v13 in
    var v44: Float = v16 in
    v66[5] = v14 in
    let v46: Float = v66[6] in
    let v95: Float = v66[6] in
    v13[4] = v24 in
    v13[0] = v44 in
    v13[4] = v21 in
    let v98: [Float] = v42[0] in
    var v55: [Float] = v98 in
    v55[0] = v95 in
    let v191: Float = v30[0] in
    v55 = v28 in
    let v78: Float = v55[0] in
    v13[3] = v95 in
    v55[0] = v46 in
    v66[1] = v10 in
    v66[4] = v191 in
    v78
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    let v4: Float = f5(v1) in
    let v21: Float = f5(v1) in
    let v49: Float = v21 - v4 in
    let v54: Float = f5(v49) in
    v54
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([s0([0.0], [[1.0], [2.0], [3.0]])], [[s0([4.0], [[5.0], [6.0], [7.0]])], [s0([8.0], [[9.0], [10.0], [11.0]])], [s0([12.0], [[13.0], [14.0], [15.0]])]], s0([16.0], [[17.0], [18.0], [19.0]]), [20.0, 21.0, 22.0]) in
    let v1: Float = 23.0 in
    let initialResult: Float = 23.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()