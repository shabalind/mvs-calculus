  let f66: (Float) -> Float = (v0: Float) -> Float {
    let v3: [Float] = [v0, v0, v0, v0, v0, v0] in
    let v2: [Float] = [v0, v0, v0, v0, v0, v0, v0] in
    var v4: [Float] = v3 in
    var v1: Float = v0 in
    let v7: Float = v2[6] in
    let v11: Float = v7 * v7 in
    let v13: Float = v2[6] in
    let v6: [Float] = [v11, v13, v1, v11] in
    var v9: [Float] = v6 in
    var v19: [Float] = v2 in
    var v22: [Float] = v4 in
    var v20: [Float] = v19 in
    var v29: [Float] = v6 in
    let v24: Float = v20[4] in
    var v21: Float = v1 in
    let v28: Float = v0 - v24 in
    let v56: Float = v29[2] in
    let v14: Float = v19[2] in
    var v34: [Float] = v29 in
    let v67: Float = v20[6] in
    var v47: Float = v7 in
    var v37: [Float] = v6 in
    let v61: Float = v3[2] in
    v19[1] = v47 in
    let v31: Float = v20[3] in
    let v43: [[Float]] = [v3, v22] in
    let v69: Float = v20[1] in
    v4[1] = v61 in
    var v40: [Float] = v9 in
    v1 = v67 in
    var v46: [Float] = v29 in
    v34[2] = v28 in
    v9[0] = v1 in
    var v53: [Float] = v19 in
    v20[0] = v14 in
    var v42: [Float] = v2 in
    v40 = v46 in
    let v106: Float = v2[2] in
    var v64: [Float] = v42 in
    var v118: [Float] = v64 in
    var v60: [[Float]] = v43 in
    v64[4] = v21 in
    v60[0] = v22 in
    var v63: [Float] = v118 in
    v63[3] = v106 in
    v42[5] = v7 in
    let v128: [Float] = v60[1] in
    v22[4] = v106 in
    v4[5] = v56 in
    v34 = v37 in
    v4[5] = v69 in
    v34[3] = v13 in
    let v77: Float = v128[0] in
    var v171: [Float] = v34 in
    let v135: Float = v63[2] in
    let v121: Float = v19[1] in
    v20 = v118 in
    v19[1] = v121 in
    v53[5] = v135 in
    v171[1] = v77 in
    let v80: Float = v53[6] in
    v34 = v40 in
    v37[1] = v31 in
    let v152: Float = v171[0] in
    v42[6] = v80 in
    v152
  } in
  let f7: ([Float]) -> [Float] = (v0: [Float]) -> [Float] {
    let v4: Float = v0[0] in
    var v6: [Float] = v0 in
    v6 = v0 in
    v6[0] = v4 in
    v6[0] = v4 in
    let v2: Float = f66(v4) in
    v6[0] = v2 in
    var v1: [Float] = v0 in
    let v7: Float = f66(v4) in
    let v3: Float = v6[0] in
    v1[0] = v3 in
    let v11: Float = f66(v7) in
    v1[0] = v11 in
    let v9: Float = v0[0] in
    v6 = v1 in
    v6[0] = v2 in
    let v13: Float = v1[0] in
    v1 = v0 in
    v1[0] = v11 in
    v6[0] = v11 in
    let v15: Float = f66(v13) in
    var v18: Float = v9 in
    v1[0] = v18 in
    v1[0] = v13 in
    v6[0] = v9 in
    var v60: [Float] = v1 in
    v6[0] = v15 in
    v60
  } in
  let noinline_f0: ([[Float]], Float) -> Float = (v0: [[Float]], v1: Float) -> Float {
    let v2: [Float] = v0[1] in
    let v3: [Float] = f7(v2) in
    var v11: [Float] = v3 in
    let v12: Float = v11[0] in
    v12
  } in
  fun loop(i: Int, v0: [[Float]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0], [1.0]] in
    let v1: Float = 2.0 in
    let initialResult: Float = 2.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()