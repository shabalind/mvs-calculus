  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: s1
    var p2: [s0]
  } in
  let noinline_f0: ([[s1]], s2, Float) -> Float = (v0: [[s1]], v1: s2, v2: Float) -> Float {
    let v5: [s0] = v1.p0 in
    let v7: s0 = v5[0] in
    let v11: [[Float]] = v7.p0 in
    let v26: [Float] = [v2, v2, v2] in
    let v23: [Float] = v11[1] in
    var v25: [Float] = v26 in
    v25[2] = v2 in
    v25[0] = v2 in
    let v20: [s1] = v0[0] in
    let v53: Float = v23[0] in
    let v37: Float = v53 / v53 in
    let v36: s1 = v20[0] in
    let v46: s0 = v36.p0 in
    v25 = v26 in
    v25[2] = v37 in
    let v100: [[Float]] = v46.p1 in
    let v114: Float = v25[0] in
    let v119: [Float] = v100[0] in
    let v64: Float = v119[0] in
    let v158: Float = v114 / v64 in
    v158
  } in
  fun loop(i: Int, v0: [[s1]], v1: s2, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s1]] = [[s1(s0([[0.0], [1.0]], [[2.0]]))], [s1(s0([[3.0], [4.0]], [[5.0]]))]] in
    let v1: s2 = s2([s0([[6.0], [7.0]], [[8.0]])], s1(s0([[9.0], [10.0]], [[11.0]])), [s0([[12.0], [13.0]], [[14.0]]), s0([[15.0], [16.0]], [[17.0]])]) in
    let v2: Float = 18.0 in
    let initialResult: Float = 18.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()