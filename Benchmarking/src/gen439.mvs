  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
    var p2: [s0]
    var p3: [s0]
    var p4: s0
  } in
  struct s3 {
    var p0: s0
    var p1: [s1]
  } in
  struct s4 {
    var p0: [[s1]]
    var p1: [s3]
  } in
  let f31: (s4) -> s4 = (v0: s4) -> s4 {
    var v4: s4 = v0 in
    v4
  } in
  let noinline_f0: ([s4], Float) -> Float = (v0: [s4], v1: Float) -> Float {
    let v2: s4 = v0[0] in
    let v8: s4 = f31(v2) in
    let v3: [[s1]] = v8.p0 in
    let v16: [s1] = v3[0] in
    let v58: s1 = v16[0] in
    let v54: s0 = v58.p1 in
    let v55: [[Float]] = v54.p1 in
    let v37: [Float] = v55[0] in
    let v59: Float = v37[0] in
    v59
  } in
  fun loop(i: Int, v0: [s4], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s4] = [s4([[s1(s0([[0.0]], [[1.0]]), s0([[2.0]], [[3.0]]), [s0([[4.0]], [[5.0]]), s0([[6.0]], [[7.0]]), s0([[8.0]], [[9.0]])], [s0([[10.0]], [[11.0]]), s0([[12.0]], [[13.0]])], s0([[14.0]], [[15.0]]))]], [s3(s0([[16.0]], [[17.0]]), [s1(s0([[18.0]], [[19.0]]), s0([[20.0]], [[21.0]]), [s0([[22.0]], [[23.0]]), s0([[24.0]], [[25.0]]), s0([[26.0]], [[27.0]])], [s0([[28.0]], [[29.0]]), s0([[30.0]], [[31.0]])], s0([[32.0]], [[33.0]]))])])] in
    let v1: Float = 34.0 in
    let initialResult: Float = 34.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()