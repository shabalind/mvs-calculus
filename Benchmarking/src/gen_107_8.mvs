  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  } in
  struct s3 {
    var p0: [s0]
    var p1: [s1]
  } in
  struct s4 {
    var p0: [s3]
    var p1: [s1]
  } in
  struct s6 {
    var p0: s4
    var p1: s4
  } in
  struct s11 {
    var p0: [s1]
    var p1: s6
  } in
  let noinline_f0: (s11, Float) -> Float = (v0: s11, v1: Float) -> Float {
    let v4: s6 = v0.p1 in
    let v3: s4 = v4.p1 in
    var v6: s4 = v3 in
    let v5: [s1] = v0.p0 in
    var v10: [s1] = v5 in
    var v11: [s1] = v5 in
    let v25: s1 = v10[0] in
    let v9: s1 = v11[0] in
    v11[0] = v9 in
    let v27: s1 = v10[0] in
    let v23: [[s0]] = v9.p0 in
    v11[0] = v27 in
    var v30: s1 = v9 in
    v10[0] = v27 in
    v10[0] = v25 in
    let v20: s1 = v11[0] in
    let v29: [s0] = v23[0] in
    v11[0] = v27 in
    let v22: s0 = v29[0] in
    v10[0] = v27 in
    let v43: [[Float]] = v22.p1 in
    v30.p1 = v22 in
    let v81: [s1] = v6.p1 in
    let v56: [Float] = v43[0] in
    var v21: s1 = v30 in
    v11[0] = v21 in
    let v83: Float = v56[0] in
    v10[0] = v20 in
    v10[0] = v27 in
    let v52: s1 = v81[0] in
    v11[0] = v9 in
    v30 = v52 in
    v83
  } in
  fun loop(i: Int, v0: s11, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s11 = s11([s1([[s0([[0.0], [1.0]], [[2.0]])]], s0([[3.0], [4.0]], [[5.0]]))], s6(s4([s3([s0([[6.0], [7.0]], [[8.0]]), s0([[9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0]], [[14.0]])], [s1([[s0([[15.0], [16.0]], [[17.0]])]], s0([[18.0], [19.0]], [[20.0]]))]), s3([s0([[21.0], [22.0]], [[23.0]]), s0([[24.0], [25.0]], [[26.0]]), s0([[27.0], [28.0]], [[29.0]])], [s1([[s0([[30.0], [31.0]], [[32.0]])]], s0([[33.0], [34.0]], [[35.0]]))]), s3([s0([[36.0], [37.0]], [[38.0]]), s0([[39.0], [40.0]], [[41.0]]), s0([[42.0], [43.0]], [[44.0]])], [s1([[s0([[45.0], [46.0]], [[47.0]])]], s0([[48.0], [49.0]], [[50.0]]))])], [s1([[s0([[51.0], [52.0]], [[53.0]])]], s0([[54.0], [55.0]], [[56.0]])), s1([[s0([[57.0], [58.0]], [[59.0]])]], s0([[60.0], [61.0]], [[62.0]]))]), s4([s3([s0([[63.0], [64.0]], [[65.0]]), s0([[66.0], [67.0]], [[68.0]]), s0([[69.0], [70.0]], [[71.0]])], [s1([[s0([[72.0], [73.0]], [[74.0]])]], s0([[75.0], [76.0]], [[77.0]]))]), s3([s0([[78.0], [79.0]], [[80.0]]), s0([[81.0], [82.0]], [[83.0]]), s0([[84.0], [85.0]], [[86.0]])], [s1([[s0([[87.0], [88.0]], [[89.0]])]], s0([[90.0], [91.0]], [[92.0]]))]), s3([s0([[93.0], [94.0]], [[95.0]]), s0([[96.0], [97.0]], [[98.0]]), s0([[99.0], [100.0]], [[101.0]])], [s1([[s0([[102.0], [103.0]], [[104.0]])]], s0([[105.0], [106.0]], [[107.0]]))])], [s1([[s0([[108.0], [109.0]], [[110.0]])]], s0([[111.0], [112.0]], [[113.0]])), s1([[s0([[114.0], [115.0]], [[116.0]])]], s0([[117.0], [118.0]], [[119.0]]))]))) in
    let v1: Float = 120.0 in
    let initialResult: Float = 120.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()