  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s7 {
    var p0: [s1]
    var p1: s0
  } in
  let noinline_f0: ([[s1]], [[s7]], Float) -> Float = (v0: [[s1]], v1: [[s7]], v2: Float) -> Float {
    let v12: [s1] = v0[0] in
    let v7: s1 = v12[0] in
    let v8: [s0] = v7.p0 in
    let v15: s0 = v8[1] in
    let v9: s1 = s1(v8, v15) in
    let v14: [s0] = v9.p0 in
    let v39: s0 = v14[1] in
    let v48: [[Float]] = v39.p1 in
    let v58: [Float] = v48[0] in
    let v202: Float = v58[0] in
    v202
  } in
  fun loop(i: Int, v0: [[s1]], v1: [[s7]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s1]] = [[s1([s0([[0.0], [1.0], [2.0]], [[3.0]]), s0([[4.0], [5.0], [6.0]], [[7.0]])], s0([[8.0], [9.0], [10.0]], [[11.0]]))]] in
    let v1: [[s7]] = [[s7([s1([s0([[12.0], [13.0], [14.0]], [[15.0]]), s0([[16.0], [17.0], [18.0]], [[19.0]])], s0([[20.0], [21.0], [22.0]], [[23.0]])), s1([s0([[24.0], [25.0], [26.0]], [[27.0]]), s0([[28.0], [29.0], [30.0]], [[31.0]])], s0([[32.0], [33.0], [34.0]], [[35.0]]))], s0([[36.0], [37.0], [38.0]], [[39.0]]))]] in
    let v2: Float = 40.0 in
    let initialResult: Float = 40.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()