  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: [s1]
    var p1: s1
    var p2: Double
  }
  struct s3 {
    var p0: [[s0]]
    var p1: [[s2]]
  }
  struct s4 {
    var p0: [s3]
    var p1: [s3]
  }
  struct s8 {
    var p0: [s2]
    var p1: s4
    var p2: s1
  }
  func f31(_ v0: s2, _ v1: s2) -> s2 {
    let v10: [s2] = [v0, v0]
    var v30: [s2] = v10
    let v54: s2 = v30[1]
    let v55: s2 = v10[1]
    v30[1] = v55
    return v54
  }
  @inline(never)
  func f0(_ v0: [s8], _ v1: Double) -> Double {
    let v9: s8 = v0[1]
    let v11: [s2] = v9.p0
    let v35: s2 = v11[0]
    let v15: s2 = f31(v35, v35)
    let v25: s2 = f31(v15, v15)
    let v29: Double = v25.p2
    return v29
  }
  func benchmark() {
    let v0: [s8] = [s8(p0: [s2(p0: [s1(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0], [4.0]]), p1: s0(p0: [[5.0], [6.0]], p1: [[7.0], [8.0], [9.0]])), s1(p0: s0(p0: [[10.0], [11.0]], p1: [[12.0], [13.0], [14.0]]), p1: s0(p0: [[15.0], [16.0]], p1: [[17.0], [18.0], [19.0]])), s1(p0: s0(p0: [[20.0], [21.0]], p1: [[22.0], [23.0], [24.0]]), p1: s0(p0: [[25.0], [26.0]], p1: [[27.0], [28.0], [29.0]]))], p1: s1(p0: s0(p0: [[30.0], [31.0]], p1: [[32.0], [33.0], [34.0]]), p1: s0(p0: [[35.0], [36.0]], p1: [[37.0], [38.0], [39.0]])), p2: 40.0)], p1: s4(p0: [s3(p0: [[s0(p0: [[41.0], [42.0]], p1: [[43.0], [44.0], [45.0]])], [s0(p0: [[46.0], [47.0]], p1: [[48.0], [49.0], [50.0]])]], p1: [[s2(p0: [s1(p0: s0(p0: [[51.0], [52.0]], p1: [[53.0], [54.0], [55.0]]), p1: s0(p0: [[56.0], [57.0]], p1: [[58.0], [59.0], [60.0]])), s1(p0: s0(p0: [[61.0], [62.0]], p1: [[63.0], [64.0], [65.0]]), p1: s0(p0: [[66.0], [67.0]], p1: [[68.0], [69.0], [70.0]])), s1(p0: s0(p0: [[71.0], [72.0]], p1: [[73.0], [74.0], [75.0]]), p1: s0(p0: [[76.0], [77.0]], p1: [[78.0], [79.0], [80.0]]))], p1: s1(p0: s0(p0: [[81.0], [82.0]], p1: [[83.0], [84.0], [85.0]]), p1: s0(p0: [[86.0], [87.0]], p1: [[88.0], [89.0], [90.0]])), p2: 91.0)]]), s3(p0: [[s0(p0: [[92.0], [93.0]], p1: [[94.0], [95.0], [96.0]])], [s0(p0: [[97.0], [98.0]], p1: [[99.0], [100.0], [101.0]])]], p1: [[s2(p0: [s1(p0: s0(p0: [[102.0], [103.0]], p1: [[104.0], [105.0], [106.0]]), p1: s0(p0: [[107.0], [108.0]], p1: [[109.0], [110.0], [111.0]])), s1(p0: s0(p0: [[112.0], [113.0]], p1: [[114.0], [115.0], [116.0]]), p1: s0(p0: [[117.0], [118.0]], p1: [[119.0], [120.0], [121.0]])), s1(p0: s0(p0: [[122.0], [123.0]], p1: [[124.0], [125.0], [126.0]]), p1: s0(p0: [[127.0], [128.0]], p1: [[129.0], [130.0], [131.0]]))], p1: s1(p0: s0(p0: [[132.0], [133.0]], p1: [[134.0], [135.0], [136.0]]), p1: s0(p0: [[137.0], [138.0]], p1: [[139.0], [140.0], [141.0]])), p2: 142.0)]])], p1: [s3(p0: [[s0(p0: [[143.0], [144.0]], p1: [[145.0], [146.0], [147.0]])], [s0(p0: [[148.0], [149.0]], p1: [[150.0], [151.0], [152.0]])]], p1: [[s2(p0: [s1(p0: s0(p0: [[153.0], [154.0]], p1: [[155.0], [156.0], [157.0]]), p1: s0(p0: [[158.0], [159.0]], p1: [[160.0], [161.0], [162.0]])), s1(p0: s0(p0: [[163.0], [164.0]], p1: [[165.0], [166.0], [167.0]]), p1: s0(p0: [[168.0], [169.0]], p1: [[170.0], [171.0], [172.0]])), s1(p0: s0(p0: [[173.0], [174.0]], p1: [[175.0], [176.0], [177.0]]), p1: s0(p0: [[178.0], [179.0]], p1: [[180.0], [181.0], [182.0]]))], p1: s1(p0: s0(p0: [[183.0], [184.0]], p1: [[185.0], [186.0], [187.0]]), p1: s0(p0: [[188.0], [189.0]], p1: [[190.0], [191.0], [192.0]])), p2: 193.0)]]), s3(p0: [[s0(p0: [[194.0], [195.0]], p1: [[196.0], [197.0], [198.0]])], [s0(p0: [[199.0], [200.0]], p1: [[201.0], [202.0], [203.0]])]], p1: [[s2(p0: [s1(p0: s0(p0: [[204.0], [205.0]], p1: [[206.0], [207.0], [208.0]]), p1: s0(p0: [[209.0], [210.0]], p1: [[211.0], [212.0], [213.0]])), s1(p0: s0(p0: [[214.0], [215.0]], p1: [[216.0], [217.0], [218.0]]), p1: s0(p0: [[219.0], [220.0]], p1: [[221.0], [222.0], [223.0]])), s1(p0: s0(p0: [[224.0], [225.0]], p1: [[226.0], [227.0], [228.0]]), p1: s0(p0: [[229.0], [230.0]], p1: [[231.0], [232.0], [233.0]]))], p1: s1(p0: s0(p0: [[234.0], [235.0]], p1: [[236.0], [237.0], [238.0]]), p1: s0(p0: [[239.0], [240.0]], p1: [[241.0], [242.0], [243.0]])), p2: 244.0)]])]), p2: s1(p0: s0(p0: [[245.0], [246.0]], p1: [[247.0], [248.0], [249.0]]), p1: s0(p0: [[250.0], [251.0]], p1: [[252.0], [253.0], [254.0]]))), s8(p0: [s2(p0: [s1(p0: s0(p0: [[255.0], [256.0]], p1: [[257.0], [258.0], [259.0]]), p1: s0(p0: [[260.0], [261.0]], p1: [[262.0], [263.0], [264.0]])), s1(p0: s0(p0: [[265.0], [266.0]], p1: [[267.0], [268.0], [269.0]]), p1: s0(p0: [[270.0], [271.0]], p1: [[272.0], [273.0], [274.0]])), s1(p0: s0(p0: [[275.0], [276.0]], p1: [[277.0], [278.0], [279.0]]), p1: s0(p0: [[280.0], [281.0]], p1: [[282.0], [283.0], [284.0]]))], p1: s1(p0: s0(p0: [[285.0], [286.0]], p1: [[287.0], [288.0], [289.0]]), p1: s0(p0: [[290.0], [291.0]], p1: [[292.0], [293.0], [294.0]])), p2: 295.0)], p1: s4(p0: [s3(p0: [[s0(p0: [[296.0], [297.0]], p1: [[298.0], [299.0], [300.0]])], [s0(p0: [[301.0], [302.0]], p1: [[303.0], [304.0], [305.0]])]], p1: [[s2(p0: [s1(p0: s0(p0: [[306.0], [307.0]], p1: [[308.0], [309.0], [310.0]]), p1: s0(p0: [[311.0], [312.0]], p1: [[313.0], [314.0], [315.0]])), s1(p0: s0(p0: [[316.0], [317.0]], p1: [[318.0], [319.0], [320.0]]), p1: s0(p0: [[321.0], [322.0]], p1: [[323.0], [324.0], [325.0]])), s1(p0: s0(p0: [[326.0], [327.0]], p1: [[328.0], [329.0], [330.0]]), p1: s0(p0: [[331.0], [332.0]], p1: [[333.0], [334.0], [335.0]]))], p1: s1(p0: s0(p0: [[336.0], [337.0]], p1: [[338.0], [339.0], [340.0]]), p1: s0(p0: [[341.0], [342.0]], p1: [[343.0], [344.0], [345.0]])), p2: 346.0)]]), s3(p0: [[s0(p0: [[347.0], [348.0]], p1: [[349.0], [350.0], [351.0]])], [s0(p0: [[352.0], [353.0]], p1: [[354.0], [355.0], [356.0]])]], p1: [[s2(p0: [s1(p0: s0(p0: [[357.0], [358.0]], p1: [[359.0], [360.0], [361.0]]), p1: s0(p0: [[362.0], [363.0]], p1: [[364.0], [365.0], [366.0]])), s1(p0: s0(p0: [[367.0], [368.0]], p1: [[369.0], [370.0], [371.0]]), p1: s0(p0: [[372.0], [373.0]], p1: [[374.0], [375.0], [376.0]])), s1(p0: s0(p0: [[377.0], [378.0]], p1: [[379.0], [380.0], [381.0]]), p1: s0(p0: [[382.0], [383.0]], p1: [[384.0], [385.0], [386.0]]))], p1: s1(p0: s0(p0: [[387.0], [388.0]], p1: [[389.0], [390.0], [391.0]]), p1: s0(p0: [[392.0], [393.0]], p1: [[394.0], [395.0], [396.0]])), p2: 397.0)]])], p1: [s3(p0: [[s0(p0: [[398.0], [399.0]], p1: [[400.0], [401.0], [402.0]])], [s0(p0: [[403.0], [404.0]], p1: [[405.0], [406.0], [407.0]])]], p1: [[s2(p0: [s1(p0: s0(p0: [[408.0], [409.0]], p1: [[410.0], [411.0], [412.0]]), p1: s0(p0: [[413.0], [414.0]], p1: [[415.0], [416.0], [417.0]])), s1(p0: s0(p0: [[418.0], [419.0]], p1: [[420.0], [421.0], [422.0]]), p1: s0(p0: [[423.0], [424.0]], p1: [[425.0], [426.0], [427.0]])), s1(p0: s0(p0: [[428.0], [429.0]], p1: [[430.0], [431.0], [432.0]]), p1: s0(p0: [[433.0], [434.0]], p1: [[435.0], [436.0], [437.0]]))], p1: s1(p0: s0(p0: [[438.0], [439.0]], p1: [[440.0], [441.0], [442.0]]), p1: s0(p0: [[443.0], [444.0]], p1: [[445.0], [446.0], [447.0]])), p2: 448.0)]]), s3(p0: [[s0(p0: [[449.0], [450.0]], p1: [[451.0], [452.0], [453.0]])], [s0(p0: [[454.0], [455.0]], p1: [[456.0], [457.0], [458.0]])]], p1: [[s2(p0: [s1(p0: s0(p0: [[459.0], [460.0]], p1: [[461.0], [462.0], [463.0]]), p1: s0(p0: [[464.0], [465.0]], p1: [[466.0], [467.0], [468.0]])), s1(p0: s0(p0: [[469.0], [470.0]], p1: [[471.0], [472.0], [473.0]]), p1: s0(p0: [[474.0], [475.0]], p1: [[476.0], [477.0], [478.0]])), s1(p0: s0(p0: [[479.0], [480.0]], p1: [[481.0], [482.0], [483.0]]), p1: s0(p0: [[484.0], [485.0]], p1: [[486.0], [487.0], [488.0]]))], p1: s1(p0: s0(p0: [[489.0], [490.0]], p1: [[491.0], [492.0], [493.0]]), p1: s0(p0: [[494.0], [495.0]], p1: [[496.0], [497.0], [498.0]])), p2: 499.0)]])]), p2: s1(p0: s0(p0: [[500.0], [501.0]], p1: [[502.0], [503.0], [504.0]]), p1: s0(p0: [[505.0], [506.0]], p1: [[507.0], [508.0], [509.0]])))]
    let v1: Double = 510.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 510.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
