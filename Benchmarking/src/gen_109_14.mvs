  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let f3: ([s0]) -> [s0] = (v0: [s0]) -> [s0] {
    let v4: [[s0]] = [v0, v0, v0, v0, v0, v0] in
    var v18: [[s0]] = v4 in
    let v40: [s0] = v18[2] in
    let v43: [s0] = v18[1] in
    v18[4] = v43 in
    v18[3] = v0 in
    v18[2] = v40 in
    var v48: [s0] = v43 in
    v48
  } in
  let noinline_f0: ([s0], Float) -> Float = (v0: [s0], v1: Float) -> Float {
    let v2: [s0] = f3(v0) in
    let v4: s0 = v2[0] in
    let v6: s0 = v0[0] in
    let v13: [[Float]] = v4.p1 in
    let v33: [Float] = v13[0] in
    let v14: Float = v33[0] in
    let v43: [[Float]] = v6.p1 in
    let v26: [Float] = v43[1] in
    let v23: Float = v26[0] in
    var v73: Float = v14 in
    v73 = v23 in
    v73
  } in
  fun loop(i: Int, v0: [s0], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0]], [[1.0], [2.0]])] in
    let v1: Float = 3.0 in
    let initialResult: Float = 3.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()