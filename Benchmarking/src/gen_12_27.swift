  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
  }
  struct s2 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s3 {
    var p0: [[s0]]
    var p1: [[s1]]
  }
  struct s4 {
    var p0: s2
    var p1: s2
  }
  @inline(never)
  func f0(_ v0: [[s3]], _ v1: [[s4]], _ v2: Double) -> Double {
    let v10: [s3] = v0[0]
    let v23: s3 = v10[0]
    let v17: [[s1]] = v23.p1
    let v25: [s1] = v17[2]
    let v27: s1 = v25[0]
    let v45: [s0] = v27.p0
    let v49: s0 = v45[0]
    let v71: [[Double]] = v49.p0
    let v60: [Double] = v71[2]
    let v51: Double = v60[0]
    return v51
  }
  func benchmark() {
    let v0: [[s3]] = [[s3(p0: [[s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0]], p2: [[4.0], [5.0], [6.0]], p3: [[7.0]])], [s0(p0: [[8.0], [9.0], [10.0]], p1: [[11.0]], p2: [[12.0], [13.0], [14.0]], p3: [[15.0]])]], p1: [[s1(p0: [s0(p0: [[16.0], [17.0], [18.0]], p1: [[19.0]], p2: [[20.0], [21.0], [22.0]], p3: [[23.0]]), s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0]], p2: [[28.0], [29.0], [30.0]], p3: [[31.0]]), s0(p0: [[32.0], [33.0], [34.0]], p1: [[35.0]], p2: [[36.0], [37.0], [38.0]], p3: [[39.0]])], p1: [[s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0]], p2: [[44.0], [45.0], [46.0]], p3: [[47.0]])]])], [s1(p0: [s0(p0: [[48.0], [49.0], [50.0]], p1: [[51.0]], p2: [[52.0], [53.0], [54.0]], p3: [[55.0]]), s0(p0: [[56.0], [57.0], [58.0]], p1: [[59.0]], p2: [[60.0], [61.0], [62.0]], p3: [[63.0]]), s0(p0: [[64.0], [65.0], [66.0]], p1: [[67.0]], p2: [[68.0], [69.0], [70.0]], p3: [[71.0]])], p1: [[s0(p0: [[72.0], [73.0], [74.0]], p1: [[75.0]], p2: [[76.0], [77.0], [78.0]], p3: [[79.0]])]])], [s1(p0: [s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0]], p2: [[84.0], [85.0], [86.0]], p3: [[87.0]]), s0(p0: [[88.0], [89.0], [90.0]], p1: [[91.0]], p2: [[92.0], [93.0], [94.0]], p3: [[95.0]]), s0(p0: [[96.0], [97.0], [98.0]], p1: [[99.0]], p2: [[100.0], [101.0], [102.0]], p3: [[103.0]])], p1: [[s0(p0: [[104.0], [105.0], [106.0]], p1: [[107.0]], p2: [[108.0], [109.0], [110.0]], p3: [[111.0]])]])]])]]
    let v1: [[s4]] = [[s4(p0: s2(p0: [s0(p0: [[112.0], [113.0], [114.0]], p1: [[115.0]], p2: [[116.0], [117.0], [118.0]], p3: [[119.0]])], p1: [s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0]], p2: [[124.0], [125.0], [126.0]], p3: [[127.0]]), s0(p0: [[128.0], [129.0], [130.0]], p1: [[131.0]], p2: [[132.0], [133.0], [134.0]], p3: [[135.0]]), s0(p0: [[136.0], [137.0], [138.0]], p1: [[139.0]], p2: [[140.0], [141.0], [142.0]], p3: [[143.0]])]), p1: s2(p0: [s0(p0: [[144.0], [145.0], [146.0]], p1: [[147.0]], p2: [[148.0], [149.0], [150.0]], p3: [[151.0]])], p1: [s0(p0: [[152.0], [153.0], [154.0]], p1: [[155.0]], p2: [[156.0], [157.0], [158.0]], p3: [[159.0]]), s0(p0: [[160.0], [161.0], [162.0]], p1: [[163.0]], p2: [[164.0], [165.0], [166.0]], p3: [[167.0]]), s0(p0: [[168.0], [169.0], [170.0]], p1: [[171.0]], p2: [[172.0], [173.0], [174.0]], p3: [[175.0]])]))], [s4(p0: s2(p0: [s0(p0: [[176.0], [177.0], [178.0]], p1: [[179.0]], p2: [[180.0], [181.0], [182.0]], p3: [[183.0]])], p1: [s0(p0: [[184.0], [185.0], [186.0]], p1: [[187.0]], p2: [[188.0], [189.0], [190.0]], p3: [[191.0]]), s0(p0: [[192.0], [193.0], [194.0]], p1: [[195.0]], p2: [[196.0], [197.0], [198.0]], p3: [[199.0]]), s0(p0: [[200.0], [201.0], [202.0]], p1: [[203.0]], p2: [[204.0], [205.0], [206.0]], p3: [[207.0]])]), p1: s2(p0: [s0(p0: [[208.0], [209.0], [210.0]], p1: [[211.0]], p2: [[212.0], [213.0], [214.0]], p3: [[215.0]])], p1: [s0(p0: [[216.0], [217.0], [218.0]], p1: [[219.0]], p2: [[220.0], [221.0], [222.0]], p3: [[223.0]]), s0(p0: [[224.0], [225.0], [226.0]], p1: [[227.0]], p2: [[228.0], [229.0], [230.0]], p3: [[231.0]]), s0(p0: [[232.0], [233.0], [234.0]], p1: [[235.0]], p2: [[236.0], [237.0], [238.0]], p3: [[239.0]])]))]]
    let v2: Double = 240.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 240.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
