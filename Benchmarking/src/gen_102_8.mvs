  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  let noinline_f0: (s0, [s0], Float) -> Float = (v0: s0, v1: [s0], v2: Float) -> Float {
    let v4: [[Float]] = v0.p0 in
    let v6: [[Float]] = v0.p2 in
    let v9: [Float] = v4[0] in
    let v24: [[Float]] = v0.p2 in
    let v10: [Float] = v6[1] in
    let v21: Float = v9[0] in
    let v23: Float = v10[0] in
    let v42: [Float] = v24[1] in
    let v59: Float = v42[0] in
    let v34: [Float] = [v21, v2, v21, v23, v59] in
    let v37: Float = v34[3] in
    v37
  } in
  fun loop(i: Int, v0: s0, v1: [s0], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0]], [[1.0], [2.0]], [[3.0], [4.0]]) in
    let v1: [s0] = [s0([[5.0]], [[6.0], [7.0]], [[8.0], [9.0]]), s0([[10.0]], [[11.0], [12.0]], [[13.0], [14.0]])] in
    let v2: Float = 15.0 in
    let initialResult: Float = 15.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()