  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  let noinline_f0: ([s1], Float) -> Float = (v0: [s1], v1: Float) -> Float {
    let v5: s1 = v0[0] in
    let v7: s0 = v5.p1 in
    var v10: Float = v1 in
    v10 = v1 in
    let v12: [[Float]] = v7.p0 in
    let v19: [Float] = v12[1] in
    let v32: Float = v19[0] in
    let v51: Float = v19[0] in
    let v55: [Float] = [v10, v32, v1, v32, v32, v51, v10] in
    var v62: [Float] = v55 in
    let v132: Float = v62[1] in
    var v145: Float = v132 in
    v62[3] = v32 in
    v145
  } in
  fun loop(i: Int, v0: [s1], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1([s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]), s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]])], s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]])), s1([s0([[15.0], [16.0]], [[17.0], [18.0], [19.0]]), s0([[20.0], [21.0]], [[22.0], [23.0], [24.0]])], s0([[25.0], [26.0]], [[27.0], [28.0], [29.0]]))] in
    let v1: Float = 30.0 in
    let initialResult: Float = 30.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()