  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: s0
    var p1: [[s1]]
  } in
  struct s4 {
    var p0: s2
    var p1: s0
  } in
  let f39: (Float) -> Float = (v0: Float) -> Float {
    var v1: Float = v0 in
    let v7: Float = v0 + v1 in
    var v8: Float = v1 in
    var v5: Float = v1 in
    var v3: Float = v1 in
    let v13: Float = v1 * v5 in
    var v9: Float = v0 in
    v5 = v8 in
    v3 = v8 in
    let v10: [Float] = [v7] in
    var v11: [Float] = v10 in
    v11[0] = v13 in
    let v17: Float = v11[0] in
    let v30: Float = v11[0] in
    v11[0] = v30 in
    v11[0] = v3 in
    var v14: Float = v8 in
    var v16: [Float] = v10 in
    v16[0] = v7 in
    let v36: Float = v10[0] in
    var v34: Float = v7 in
    var v24: Float = v9 in
    v16[0] = v14 in
    v16[0] = v17 in
    var v21: Float = v24 in
    let v70: Float = v16[0] in
    var v46: [Float] = v16 in
    let v59: [Float] = [v21, v30, v70, v1] in
    let v37: Float = v46[0] in
    v46[0] = v36 in
    var v71: [Float] = v59 in
    v16[0] = v36 in
    var v31: [Float] = v59 in
    var v55: Float = v24 in
    let v52: Float = v59[3] in
    v11[0] = v37 in
    let v26: Float = v71[3] in
    v16[0] = v34 in
    let v100: [[Float]] = [v31, v59, v31] in
    v46[0] = v52 in
    v31[3] = v3 in
    v71[3] = v3 in
    v11[0] = v55 in
    v16[0] = v13 in
    let v128: [Float] = v100[2] in
    v46[0] = v26 in
    let v136: Float = v128[0] in
    v5 = v52 in
    v136
  } in
  let noinline_f0: ([s4], Float) -> Float = (v0: [s4], v1: Float) -> Float {
    let v13: Float = v1 / v1 in
    let v4: Float = f39(v13) in
    var v76: Float = v4 in
    var v60: Float = v76 in
    v60
  } in
  fun loop(i: Int, v0: [s4], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s4] = [s4(s2(s0([[0.0]], [[1.0]], [[2.0], [3.0]]), [[s1([s0([[4.0]], [[5.0]], [[6.0], [7.0]])], [[s0([[8.0]], [[9.0]], [[10.0], [11.0]])]])], [s1([s0([[12.0]], [[13.0]], [[14.0], [15.0]])], [[s0([[16.0]], [[17.0]], [[18.0], [19.0]])]])], [s1([s0([[20.0]], [[21.0]], [[22.0], [23.0]])], [[s0([[24.0]], [[25.0]], [[26.0], [27.0]])]])]]), s0([[28.0]], [[29.0]], [[30.0], [31.0]]))] in
    let v1: Float = 32.0 in
    let initialResult: Float = 32.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()