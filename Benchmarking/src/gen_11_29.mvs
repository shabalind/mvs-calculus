  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  } in
  let noinline_f0: (s1, [s0], Float) -> Float = (v0: s1, v1: [s0], v2: Float) -> Float {
    let v6: s0 = v1[0] in
    let v3: [[Float]] = v6.p1 in
    let v9: [Float] = v3[0] in
    let v11: Float = v2 - v2 in
    let v47: Float = v9[0] in
    let v30: [Float] = v3[0] in
    let v70: Float = v30[0] in
    var v68: Float = v47 in
    let v96: [Float] = [v70, v11, v47, v47, v11, v47, v68] in
    let v133: Float = v96[6] in
    v133
  } in
  fun loop(i: Int, v0: s1, v1: [s0], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([[s0([[0.0]], [[1.0]])], [s0([[2.0]], [[3.0]])], [s0([[4.0]], [[5.0]])]], s0([[6.0]], [[7.0]])) in
    let v1: [s0] = [s0([[8.0]], [[9.0]]), s0([[10.0]], [[11.0]])] in
    let v2: Float = 12.0 in
    let initialResult: Float = 12.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()