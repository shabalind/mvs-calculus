  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: Float
  } in
  struct s2 {
    var p0: [[s0]]
    var p1: Float
  } in
  struct s9 {
    var p0: [s1]
    var p1: s2
  } in
  let noinline_f0: (s9, Float) -> Float = (v0: s9, v1: Float) -> Float {
    let v7: [s1] = v0.p0 in
    let v24: s1 = v7[0] in
    let v91: [[s0]] = v24.p0 in
    let v84: [s0] = v91[0] in
    let v104: s0 = v84[0] in
    let v49: [[Float]] = v104.p1 in
    let v97: [Float] = v49[1] in
    let v307: Float = v97[0] in
    var v122: Float = v307 in
    let v127: Float = v122 + v1 in
    v127
  } in
  fun loop(i: Int, v0: s9, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s9 = s9([s1([[s0([[0.0]], [[1.0], [2.0]])]], 3.0)], s2([[s0([[4.0]], [[5.0], [6.0]])], [s0([[7.0]], [[8.0], [9.0]])]], 10.0)) in
    let v1: Float = 11.0 in
    let initialResult: Float = 11.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()