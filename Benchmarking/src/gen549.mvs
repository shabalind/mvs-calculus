  struct s0 {
    var p0: [[Float]]
    var p1: [Float]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: s0
  } in
  struct s3 {
    var p0: [s1]
    var p1: s1
  } in
  let f93: ([Float]) -> [Float] = (v0: [Float]) -> [Float] {
    let v6: Float = v0[0] in
    let v4: Float = v6 * v6 in
    var v5: [Float] = v0 in
    v5[0] = v4 in
    v5
  } in
  let f89: (s0) -> s0 = (v0: s0) -> s0 {
    let v5: [[Float]] = v0.p0 in
    var v6: [[Float]] = v5 in
    let v2: [[Float]] = v0.p0 in
    let v7: [Float] = v5[1] in
    let v4: Float = v7[0] in
    var v10: [[Float]] = v2 in
    v10[0] = v7 in
    v10[1] = v7 in
    v10[0] = v7 in
    v6[1] = v7 in
    var v18: [Float] = v7 in
    let v3: [Float] = v0.p1 in
    v10[0] = v18 in
    v18[0] = v4 in
    let v13: [Float] = f93(v18) in
    let v31: [Float] = f93(v13) in
    let v26: [Float] = v6[0] in
    let v51: Float = v26[0] in
    v18[0] = v51 in
    let v65: s0 = s0(v10, v3) in
    v10[1] = v31 in
    v65
  } in
  let f6: (Float) -> Float = (v0: Float) -> Float {
    var v2: Float = v0 in
    var v5: Float = v0 in
    var v3: Float = v0 in
    var v9: Float = v5 in
    var v1: Float = v3 in
    var v6: Float = v0 in
    var v8: Float = v6 in
    let v18: Float = v8 * v2 in
    var v14: Float = v1 in
    let v17: [Float] = [v2, v2, v18, v14, v9] in
    var v16: [Float] = v17 in
    v16[4] = v9 in
    var v25: [Float] = v17 in
    let v40: Float = v17[1] in
    let v12: Float = v25[1] in
    var v31: [Float] = v17 in
    let v22: [[Float]] = [v17, v17, v31, v25] in
    var v41: [[Float]] = v22 in
    v16[4] = v6 in
    var v27: Float = v5 in
    v41[3] = v16 in
    let v26: [Float] = v41[3] in
    let v60: [Float] = v41[2] in
    var v38: [Float] = v60 in
    v38[1] = v0 in
    var v28: [[Float]] = v41 in
    var v47: [[Float]] = v22 in
    let v65: [Float] = v47[0] in
    let v43: Float = v38[3] in
    let v52: [Float] = v28[0] in
    var v34: Float = v12 in
    var v51: [Float] = v16 in
    var v56: [Float] = v60 in
    let v121: Float = v52[4] in
    var v54: Float = v40 in
    v25[3] = v43 in
    v51[1] = v34 in
    v25[3] = v27 in
    v41[0] = v65 in
    v56[2] = v18 in
    var v61: Float = v40 in
    v41[0] = v26 in
    let v106: Float = v121 + v27 in
    v25[4] = v12 in
    v16[0] = v54 in
    v47[3] = v51 in
    v28[2] = v38 in
    v41[3] = v56 in
    v25[4] = v61 in
    v106
  } in
  let noinline_f0: ([[s3]], [[s2]], [[s2]], s0, Float) -> Float = (v0: [[s3]], v1: [[s2]], v2: [[s2]], v3: s0, v4: Float) -> Float {
    let v6: [s0] = [v3, v3, v3, v3, v3, v3] in
    let v7: Float = f6(v4) in
    let v13: s0 = f89(v3) in
    let v10: s0 = v6[4] in
    let v28: s0 = f89(v13) in
    let v37: [[Float]] = v28.p0 in
    let v31: [Float] = v37[1] in
    let v25: [Float] = v10.p1 in
    var v23: [Float] = v31 in
    let v59: Float = v7 - v4 in
    v23[0] = v4 in
    let v41: Float = v23[0] in
    let v55: Float = v25[1] in
    var v108: Float = v55 in
    let v102: Float = v59 - v108 in
    v108 = v41 in
    v23[0] = v102 in
    let v467: Float = v55 - v102 in
    v467
  } in
  fun loop(i: Int, v0: [[s3]], v1: [[s2]], v2: [[s2]], v3: s0, v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s3]] = [[s3([s1([[s0([[0.0], [1.0]], [2.0, 3.0, 4.0])], [s0([[5.0], [6.0]], [7.0, 8.0, 9.0])], [s0([[10.0], [11.0]], [12.0, 13.0, 14.0])]], s0([[15.0], [16.0]], [17.0, 18.0, 19.0])), s1([[s0([[20.0], [21.0]], [22.0, 23.0, 24.0])], [s0([[25.0], [26.0]], [27.0, 28.0, 29.0])], [s0([[30.0], [31.0]], [32.0, 33.0, 34.0])]], s0([[35.0], [36.0]], [37.0, 38.0, 39.0]))], s1([[s0([[40.0], [41.0]], [42.0, 43.0, 44.0])], [s0([[45.0], [46.0]], [47.0, 48.0, 49.0])], [s0([[50.0], [51.0]], [52.0, 53.0, 54.0])]], s0([[55.0], [56.0]], [57.0, 58.0, 59.0])))]] in
    let v1: [[s2]] = [[s2([s0([[60.0], [61.0]], [62.0, 63.0, 64.0]), s0([[65.0], [66.0]], [67.0, 68.0, 69.0])], s0([[70.0], [71.0]], [72.0, 73.0, 74.0]))], [s2([s0([[75.0], [76.0]], [77.0, 78.0, 79.0]), s0([[80.0], [81.0]], [82.0, 83.0, 84.0])], s0([[85.0], [86.0]], [87.0, 88.0, 89.0]))]] in
    let v2: [[s2]] = [[s2([s0([[90.0], [91.0]], [92.0, 93.0, 94.0]), s0([[95.0], [96.0]], [97.0, 98.0, 99.0])], s0([[100.0], [101.0]], [102.0, 103.0, 104.0]))], [s2([s0([[105.0], [106.0]], [107.0, 108.0, 109.0]), s0([[110.0], [111.0]], [112.0, 113.0, 114.0])], s0([[115.0], [116.0]], [117.0, 118.0, 119.0]))], [s2([s0([[120.0], [121.0]], [122.0, 123.0, 124.0]), s0([[125.0], [126.0]], [127.0, 128.0, 129.0])], s0([[130.0], [131.0]], [132.0, 133.0, 134.0]))]] in
    let v3: s0 = s0([[135.0], [136.0]], [137.0, 138.0, 139.0]) in
    let v4: Float = 140.0 in
    let initialResult: Float = 140.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()