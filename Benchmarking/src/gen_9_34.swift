  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: s0
    var p1: [s1]
  }
  struct s3 {
    var p0: [[s2]]
    var p1: s0
  }
  struct s4 {
    var p0: [[s0]]
    var p1: s3
  }
  struct s5 {
    var p0: [Double]
    var p1: [[s2]]
  }
  struct s6 {
    var p0: s1
    var p1: [Double]
  }
  struct s7 {
    var p0: [s4]
    var p1: s0
    var p2: [[s5]]
  }
  struct s8 {
    var p0: [s0]
    var p1: s1
  }
  struct s9 {
    var p0: s6
    var p1: [[s3]]
    var p2: s7
  }
  struct s10 {
    var p0: [[s1]]
    var p1: [s1]
    var p2: s6
    var p3: s7
  }
  struct s11 {
    var p0: [s8]
    var p1: s10
  }
  func f15(_ v0: Double) -> Double {
    var v7: Double = v0
    v7 = v0
    var v6: Double = v7
    var v2: Double = v7
    var v5: Double = v6
    var v1: Double = v0
    v6 = v1
    var v18: Double = v1
    var v11: Double = v18
    var v3: Double = v6
    var v8: Double = v5
    var v30: Double = v5
    var v13: Double = v7
    var v14: Double = v18
    var v9: Double = v1
    var v20: Double = v3
    var v44: Double = v30
    var v19: Double = v2
    v18 = v13
    var v17: Double = v1
    var v15: Double = v8
    var v25: Double = v44
    var v26: Double = v11
    v26 = v6
    let v21: Double = v6 + v14
    var v29: Double = v15
    var v34: Double = v14
    v34 = v26
    let v41: [Double] = [v19, v14, v20, v21, v17, v34]
    var v22: [Double] = v41
    let v39: Double = v41[4]
    v6 = v25
    v17 = v34
    var v48: [Double] = v22
    let v102: Double = v48[2]
    var v40: Double = v8
    var v54: Double = v1
    var v247: Double = v18
    v34 = v54
    let v61: [Double] = [v247, v102, v5, v34, v29]
    var v151: [Double] = v61
    var v85: [Double] = v61
    var v57: [Double] = v85
    v57[0] = v9
    v151[2] = v39
    var v71: [Double] = v57
    var v95: [Double] = v151
    var v137: [Double] = v71
    let v109: [[Double]] = [v85, v137, v61, v57, v95]
    var v190: [[Double]] = v109
    var v123: [[Double]] = v190
    var v136: [[Double]] = v123
    let v196: [Double] = v136[4]
    let v171: Double = v196[1]
    let v89: Double = v171 * v40
    return v89
  }
  @inline(never)
  func f0(_ v0: s9, _ v1: [s3], _ v2: s9, _ v3: s0, _ v4: [s8], _ v5: s11, _ v6: Double) -> Double {
    let v7: Double = f15(v6)
    let v14: Double = f15(v7)
    let v9: Double = f15(v14)
    return v9
  }
  func benchmark() {
    let v0: s9 = s9(p0: s6(p0: s1(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0]]), p1: [s0(p0: [[3.0], [4.0]], p1: [[5.0]])]), p1: [6.0, 7.0]), p1: [[s3(p0: [[s2(p0: s0(p0: [[8.0], [9.0]], p1: [[10.0]]), p1: [s1(p0: s0(p0: [[11.0], [12.0]], p1: [[13.0]]), p1: [s0(p0: [[14.0], [15.0]], p1: [[16.0]])]), s1(p0: s0(p0: [[17.0], [18.0]], p1: [[19.0]]), p1: [s0(p0: [[20.0], [21.0]], p1: [[22.0]])])])], [s2(p0: s0(p0: [[23.0], [24.0]], p1: [[25.0]]), p1: [s1(p0: s0(p0: [[26.0], [27.0]], p1: [[28.0]]), p1: [s0(p0: [[29.0], [30.0]], p1: [[31.0]])]), s1(p0: s0(p0: [[32.0], [33.0]], p1: [[34.0]]), p1: [s0(p0: [[35.0], [36.0]], p1: [[37.0]])])])], [s2(p0: s0(p0: [[38.0], [39.0]], p1: [[40.0]]), p1: [s1(p0: s0(p0: [[41.0], [42.0]], p1: [[43.0]]), p1: [s0(p0: [[44.0], [45.0]], p1: [[46.0]])]), s1(p0: s0(p0: [[47.0], [48.0]], p1: [[49.0]]), p1: [s0(p0: [[50.0], [51.0]], p1: [[52.0]])])])]], p1: s0(p0: [[53.0], [54.0]], p1: [[55.0]]))], [s3(p0: [[s2(p0: s0(p0: [[56.0], [57.0]], p1: [[58.0]]), p1: [s1(p0: s0(p0: [[59.0], [60.0]], p1: [[61.0]]), p1: [s0(p0: [[62.0], [63.0]], p1: [[64.0]])]), s1(p0: s0(p0: [[65.0], [66.0]], p1: [[67.0]]), p1: [s0(p0: [[68.0], [69.0]], p1: [[70.0]])])])], [s2(p0: s0(p0: [[71.0], [72.0]], p1: [[73.0]]), p1: [s1(p0: s0(p0: [[74.0], [75.0]], p1: [[76.0]]), p1: [s0(p0: [[77.0], [78.0]], p1: [[79.0]])]), s1(p0: s0(p0: [[80.0], [81.0]], p1: [[82.0]]), p1: [s0(p0: [[83.0], [84.0]], p1: [[85.0]])])])], [s2(p0: s0(p0: [[86.0], [87.0]], p1: [[88.0]]), p1: [s1(p0: s0(p0: [[89.0], [90.0]], p1: [[91.0]]), p1: [s0(p0: [[92.0], [93.0]], p1: [[94.0]])]), s1(p0: s0(p0: [[95.0], [96.0]], p1: [[97.0]]), p1: [s0(p0: [[98.0], [99.0]], p1: [[100.0]])])])]], p1: s0(p0: [[101.0], [102.0]], p1: [[103.0]]))], [s3(p0: [[s2(p0: s0(p0: [[104.0], [105.0]], p1: [[106.0]]), p1: [s1(p0: s0(p0: [[107.0], [108.0]], p1: [[109.0]]), p1: [s0(p0: [[110.0], [111.0]], p1: [[112.0]])]), s1(p0: s0(p0: [[113.0], [114.0]], p1: [[115.0]]), p1: [s0(p0: [[116.0], [117.0]], p1: [[118.0]])])])], [s2(p0: s0(p0: [[119.0], [120.0]], p1: [[121.0]]), p1: [s1(p0: s0(p0: [[122.0], [123.0]], p1: [[124.0]]), p1: [s0(p0: [[125.0], [126.0]], p1: [[127.0]])]), s1(p0: s0(p0: [[128.0], [129.0]], p1: [[130.0]]), p1: [s0(p0: [[131.0], [132.0]], p1: [[133.0]])])])], [s2(p0: s0(p0: [[134.0], [135.0]], p1: [[136.0]]), p1: [s1(p0: s0(p0: [[137.0], [138.0]], p1: [[139.0]]), p1: [s0(p0: [[140.0], [141.0]], p1: [[142.0]])]), s1(p0: s0(p0: [[143.0], [144.0]], p1: [[145.0]]), p1: [s0(p0: [[146.0], [147.0]], p1: [[148.0]])])])]], p1: s0(p0: [[149.0], [150.0]], p1: [[151.0]]))]], p2: s7(p0: [s4(p0: [[s0(p0: [[152.0], [153.0]], p1: [[154.0]])], [s0(p0: [[155.0], [156.0]], p1: [[157.0]])], [s0(p0: [[158.0], [159.0]], p1: [[160.0]])]], p1: s3(p0: [[s2(p0: s0(p0: [[161.0], [162.0]], p1: [[163.0]]), p1: [s1(p0: s0(p0: [[164.0], [165.0]], p1: [[166.0]]), p1: [s0(p0: [[167.0], [168.0]], p1: [[169.0]])]), s1(p0: s0(p0: [[170.0], [171.0]], p1: [[172.0]]), p1: [s0(p0: [[173.0], [174.0]], p1: [[175.0]])])])], [s2(p0: s0(p0: [[176.0], [177.0]], p1: [[178.0]]), p1: [s1(p0: s0(p0: [[179.0], [180.0]], p1: [[181.0]]), p1: [s0(p0: [[182.0], [183.0]], p1: [[184.0]])]), s1(p0: s0(p0: [[185.0], [186.0]], p1: [[187.0]]), p1: [s0(p0: [[188.0], [189.0]], p1: [[190.0]])])])], [s2(p0: s0(p0: [[191.0], [192.0]], p1: [[193.0]]), p1: [s1(p0: s0(p0: [[194.0], [195.0]], p1: [[196.0]]), p1: [s0(p0: [[197.0], [198.0]], p1: [[199.0]])]), s1(p0: s0(p0: [[200.0], [201.0]], p1: [[202.0]]), p1: [s0(p0: [[203.0], [204.0]], p1: [[205.0]])])])]], p1: s0(p0: [[206.0], [207.0]], p1: [[208.0]])))], p1: s0(p0: [[209.0], [210.0]], p1: [[211.0]]), p2: [[s5(p0: [212.0], p1: [[s2(p0: s0(p0: [[213.0], [214.0]], p1: [[215.0]]), p1: [s1(p0: s0(p0: [[216.0], [217.0]], p1: [[218.0]]), p1: [s0(p0: [[219.0], [220.0]], p1: [[221.0]])]), s1(p0: s0(p0: [[222.0], [223.0]], p1: [[224.0]]), p1: [s0(p0: [[225.0], [226.0]], p1: [[227.0]])])])]])], [s5(p0: [228.0], p1: [[s2(p0: s0(p0: [[229.0], [230.0]], p1: [[231.0]]), p1: [s1(p0: s0(p0: [[232.0], [233.0]], p1: [[234.0]]), p1: [s0(p0: [[235.0], [236.0]], p1: [[237.0]])]), s1(p0: s0(p0: [[238.0], [239.0]], p1: [[240.0]]), p1: [s0(p0: [[241.0], [242.0]], p1: [[243.0]])])])]])], [s5(p0: [244.0], p1: [[s2(p0: s0(p0: [[245.0], [246.0]], p1: [[247.0]]), p1: [s1(p0: s0(p0: [[248.0], [249.0]], p1: [[250.0]]), p1: [s0(p0: [[251.0], [252.0]], p1: [[253.0]])]), s1(p0: s0(p0: [[254.0], [255.0]], p1: [[256.0]]), p1: [s0(p0: [[257.0], [258.0]], p1: [[259.0]])])])]])]]))
    let v1: [s3] = [s3(p0: [[s2(p0: s0(p0: [[260.0], [261.0]], p1: [[262.0]]), p1: [s1(p0: s0(p0: [[263.0], [264.0]], p1: [[265.0]]), p1: [s0(p0: [[266.0], [267.0]], p1: [[268.0]])]), s1(p0: s0(p0: [[269.0], [270.0]], p1: [[271.0]]), p1: [s0(p0: [[272.0], [273.0]], p1: [[274.0]])])])], [s2(p0: s0(p0: [[275.0], [276.0]], p1: [[277.0]]), p1: [s1(p0: s0(p0: [[278.0], [279.0]], p1: [[280.0]]), p1: [s0(p0: [[281.0], [282.0]], p1: [[283.0]])]), s1(p0: s0(p0: [[284.0], [285.0]], p1: [[286.0]]), p1: [s0(p0: [[287.0], [288.0]], p1: [[289.0]])])])], [s2(p0: s0(p0: [[290.0], [291.0]], p1: [[292.0]]), p1: [s1(p0: s0(p0: [[293.0], [294.0]], p1: [[295.0]]), p1: [s0(p0: [[296.0], [297.0]], p1: [[298.0]])]), s1(p0: s0(p0: [[299.0], [300.0]], p1: [[301.0]]), p1: [s0(p0: [[302.0], [303.0]], p1: [[304.0]])])])]], p1: s0(p0: [[305.0], [306.0]], p1: [[307.0]])), s3(p0: [[s2(p0: s0(p0: [[308.0], [309.0]], p1: [[310.0]]), p1: [s1(p0: s0(p0: [[311.0], [312.0]], p1: [[313.0]]), p1: [s0(p0: [[314.0], [315.0]], p1: [[316.0]])]), s1(p0: s0(p0: [[317.0], [318.0]], p1: [[319.0]]), p1: [s0(p0: [[320.0], [321.0]], p1: [[322.0]])])])], [s2(p0: s0(p0: [[323.0], [324.0]], p1: [[325.0]]), p1: [s1(p0: s0(p0: [[326.0], [327.0]], p1: [[328.0]]), p1: [s0(p0: [[329.0], [330.0]], p1: [[331.0]])]), s1(p0: s0(p0: [[332.0], [333.0]], p1: [[334.0]]), p1: [s0(p0: [[335.0], [336.0]], p1: [[337.0]])])])], [s2(p0: s0(p0: [[338.0], [339.0]], p1: [[340.0]]), p1: [s1(p0: s0(p0: [[341.0], [342.0]], p1: [[343.0]]), p1: [s0(p0: [[344.0], [345.0]], p1: [[346.0]])]), s1(p0: s0(p0: [[347.0], [348.0]], p1: [[349.0]]), p1: [s0(p0: [[350.0], [351.0]], p1: [[352.0]])])])]], p1: s0(p0: [[353.0], [354.0]], p1: [[355.0]]))]
    let v2: s9 = s9(p0: s6(p0: s1(p0: s0(p0: [[356.0], [357.0]], p1: [[358.0]]), p1: [s0(p0: [[359.0], [360.0]], p1: [[361.0]])]), p1: [362.0, 363.0]), p1: [[s3(p0: [[s2(p0: s0(p0: [[364.0], [365.0]], p1: [[366.0]]), p1: [s1(p0: s0(p0: [[367.0], [368.0]], p1: [[369.0]]), p1: [s0(p0: [[370.0], [371.0]], p1: [[372.0]])]), s1(p0: s0(p0: [[373.0], [374.0]], p1: [[375.0]]), p1: [s0(p0: [[376.0], [377.0]], p1: [[378.0]])])])], [s2(p0: s0(p0: [[379.0], [380.0]], p1: [[381.0]]), p1: [s1(p0: s0(p0: [[382.0], [383.0]], p1: [[384.0]]), p1: [s0(p0: [[385.0], [386.0]], p1: [[387.0]])]), s1(p0: s0(p0: [[388.0], [389.0]], p1: [[390.0]]), p1: [s0(p0: [[391.0], [392.0]], p1: [[393.0]])])])], [s2(p0: s0(p0: [[394.0], [395.0]], p1: [[396.0]]), p1: [s1(p0: s0(p0: [[397.0], [398.0]], p1: [[399.0]]), p1: [s0(p0: [[400.0], [401.0]], p1: [[402.0]])]), s1(p0: s0(p0: [[403.0], [404.0]], p1: [[405.0]]), p1: [s0(p0: [[406.0], [407.0]], p1: [[408.0]])])])]], p1: s0(p0: [[409.0], [410.0]], p1: [[411.0]]))], [s3(p0: [[s2(p0: s0(p0: [[412.0], [413.0]], p1: [[414.0]]), p1: [s1(p0: s0(p0: [[415.0], [416.0]], p1: [[417.0]]), p1: [s0(p0: [[418.0], [419.0]], p1: [[420.0]])]), s1(p0: s0(p0: [[421.0], [422.0]], p1: [[423.0]]), p1: [s0(p0: [[424.0], [425.0]], p1: [[426.0]])])])], [s2(p0: s0(p0: [[427.0], [428.0]], p1: [[429.0]]), p1: [s1(p0: s0(p0: [[430.0], [431.0]], p1: [[432.0]]), p1: [s0(p0: [[433.0], [434.0]], p1: [[435.0]])]), s1(p0: s0(p0: [[436.0], [437.0]], p1: [[438.0]]), p1: [s0(p0: [[439.0], [440.0]], p1: [[441.0]])])])], [s2(p0: s0(p0: [[442.0], [443.0]], p1: [[444.0]]), p1: [s1(p0: s0(p0: [[445.0], [446.0]], p1: [[447.0]]), p1: [s0(p0: [[448.0], [449.0]], p1: [[450.0]])]), s1(p0: s0(p0: [[451.0], [452.0]], p1: [[453.0]]), p1: [s0(p0: [[454.0], [455.0]], p1: [[456.0]])])])]], p1: s0(p0: [[457.0], [458.0]], p1: [[459.0]]))], [s3(p0: [[s2(p0: s0(p0: [[460.0], [461.0]], p1: [[462.0]]), p1: [s1(p0: s0(p0: [[463.0], [464.0]], p1: [[465.0]]), p1: [s0(p0: [[466.0], [467.0]], p1: [[468.0]])]), s1(p0: s0(p0: [[469.0], [470.0]], p1: [[471.0]]), p1: [s0(p0: [[472.0], [473.0]], p1: [[474.0]])])])], [s2(p0: s0(p0: [[475.0], [476.0]], p1: [[477.0]]), p1: [s1(p0: s0(p0: [[478.0], [479.0]], p1: [[480.0]]), p1: [s0(p0: [[481.0], [482.0]], p1: [[483.0]])]), s1(p0: s0(p0: [[484.0], [485.0]], p1: [[486.0]]), p1: [s0(p0: [[487.0], [488.0]], p1: [[489.0]])])])], [s2(p0: s0(p0: [[490.0], [491.0]], p1: [[492.0]]), p1: [s1(p0: s0(p0: [[493.0], [494.0]], p1: [[495.0]]), p1: [s0(p0: [[496.0], [497.0]], p1: [[498.0]])]), s1(p0: s0(p0: [[499.0], [500.0]], p1: [[501.0]]), p1: [s0(p0: [[502.0], [503.0]], p1: [[504.0]])])])]], p1: s0(p0: [[505.0], [506.0]], p1: [[507.0]]))]], p2: s7(p0: [s4(p0: [[s0(p0: [[508.0], [509.0]], p1: [[510.0]])], [s0(p0: [[511.0], [512.0]], p1: [[513.0]])], [s0(p0: [[514.0], [515.0]], p1: [[516.0]])]], p1: s3(p0: [[s2(p0: s0(p0: [[517.0], [518.0]], p1: [[519.0]]), p1: [s1(p0: s0(p0: [[520.0], [521.0]], p1: [[522.0]]), p1: [s0(p0: [[523.0], [524.0]], p1: [[525.0]])]), s1(p0: s0(p0: [[526.0], [527.0]], p1: [[528.0]]), p1: [s0(p0: [[529.0], [530.0]], p1: [[531.0]])])])], [s2(p0: s0(p0: [[532.0], [533.0]], p1: [[534.0]]), p1: [s1(p0: s0(p0: [[535.0], [536.0]], p1: [[537.0]]), p1: [s0(p0: [[538.0], [539.0]], p1: [[540.0]])]), s1(p0: s0(p0: [[541.0], [542.0]], p1: [[543.0]]), p1: [s0(p0: [[544.0], [545.0]], p1: [[546.0]])])])], [s2(p0: s0(p0: [[547.0], [548.0]], p1: [[549.0]]), p1: [s1(p0: s0(p0: [[550.0], [551.0]], p1: [[552.0]]), p1: [s0(p0: [[553.0], [554.0]], p1: [[555.0]])]), s1(p0: s0(p0: [[556.0], [557.0]], p1: [[558.0]]), p1: [s0(p0: [[559.0], [560.0]], p1: [[561.0]])])])]], p1: s0(p0: [[562.0], [563.0]], p1: [[564.0]])))], p1: s0(p0: [[565.0], [566.0]], p1: [[567.0]]), p2: [[s5(p0: [568.0], p1: [[s2(p0: s0(p0: [[569.0], [570.0]], p1: [[571.0]]), p1: [s1(p0: s0(p0: [[572.0], [573.0]], p1: [[574.0]]), p1: [s0(p0: [[575.0], [576.0]], p1: [[577.0]])]), s1(p0: s0(p0: [[578.0], [579.0]], p1: [[580.0]]), p1: [s0(p0: [[581.0], [582.0]], p1: [[583.0]])])])]])], [s5(p0: [584.0], p1: [[s2(p0: s0(p0: [[585.0], [586.0]], p1: [[587.0]]), p1: [s1(p0: s0(p0: [[588.0], [589.0]], p1: [[590.0]]), p1: [s0(p0: [[591.0], [592.0]], p1: [[593.0]])]), s1(p0: s0(p0: [[594.0], [595.0]], p1: [[596.0]]), p1: [s0(p0: [[597.0], [598.0]], p1: [[599.0]])])])]])], [s5(p0: [600.0], p1: [[s2(p0: s0(p0: [[601.0], [602.0]], p1: [[603.0]]), p1: [s1(p0: s0(p0: [[604.0], [605.0]], p1: [[606.0]]), p1: [s0(p0: [[607.0], [608.0]], p1: [[609.0]])]), s1(p0: s0(p0: [[610.0], [611.0]], p1: [[612.0]]), p1: [s0(p0: [[613.0], [614.0]], p1: [[615.0]])])])]])]]))
    let v3: s0 = s0(p0: [[616.0], [617.0]], p1: [[618.0]])
    let v4: [s8] = [s8(p0: [s0(p0: [[619.0], [620.0]], p1: [[621.0]]), s0(p0: [[622.0], [623.0]], p1: [[624.0]]), s0(p0: [[625.0], [626.0]], p1: [[627.0]])], p1: s1(p0: s0(p0: [[628.0], [629.0]], p1: [[630.0]]), p1: [s0(p0: [[631.0], [632.0]], p1: [[633.0]])]))]
    let v5: s11 = s11(p0: [s8(p0: [s0(p0: [[634.0], [635.0]], p1: [[636.0]]), s0(p0: [[637.0], [638.0]], p1: [[639.0]]), s0(p0: [[640.0], [641.0]], p1: [[642.0]])], p1: s1(p0: s0(p0: [[643.0], [644.0]], p1: [[645.0]]), p1: [s0(p0: [[646.0], [647.0]], p1: [[648.0]])])), s8(p0: [s0(p0: [[649.0], [650.0]], p1: [[651.0]]), s0(p0: [[652.0], [653.0]], p1: [[654.0]]), s0(p0: [[655.0], [656.0]], p1: [[657.0]])], p1: s1(p0: s0(p0: [[658.0], [659.0]], p1: [[660.0]]), p1: [s0(p0: [[661.0], [662.0]], p1: [[663.0]])]))], p1: s10(p0: [[s1(p0: s0(p0: [[664.0], [665.0]], p1: [[666.0]]), p1: [s0(p0: [[667.0], [668.0]], p1: [[669.0]])])]], p1: [s1(p0: s0(p0: [[670.0], [671.0]], p1: [[672.0]]), p1: [s0(p0: [[673.0], [674.0]], p1: [[675.0]])]), s1(p0: s0(p0: [[676.0], [677.0]], p1: [[678.0]]), p1: [s0(p0: [[679.0], [680.0]], p1: [[681.0]])])], p2: s6(p0: s1(p0: s0(p0: [[682.0], [683.0]], p1: [[684.0]]), p1: [s0(p0: [[685.0], [686.0]], p1: [[687.0]])]), p1: [688.0, 689.0]), p3: s7(p0: [s4(p0: [[s0(p0: [[690.0], [691.0]], p1: [[692.0]])], [s0(p0: [[693.0], [694.0]], p1: [[695.0]])], [s0(p0: [[696.0], [697.0]], p1: [[698.0]])]], p1: s3(p0: [[s2(p0: s0(p0: [[699.0], [700.0]], p1: [[701.0]]), p1: [s1(p0: s0(p0: [[702.0], [703.0]], p1: [[704.0]]), p1: [s0(p0: [[705.0], [706.0]], p1: [[707.0]])]), s1(p0: s0(p0: [[708.0], [709.0]], p1: [[710.0]]), p1: [s0(p0: [[711.0], [712.0]], p1: [[713.0]])])])], [s2(p0: s0(p0: [[714.0], [715.0]], p1: [[716.0]]), p1: [s1(p0: s0(p0: [[717.0], [718.0]], p1: [[719.0]]), p1: [s0(p0: [[720.0], [721.0]], p1: [[722.0]])]), s1(p0: s0(p0: [[723.0], [724.0]], p1: [[725.0]]), p1: [s0(p0: [[726.0], [727.0]], p1: [[728.0]])])])], [s2(p0: s0(p0: [[729.0], [730.0]], p1: [[731.0]]), p1: [s1(p0: s0(p0: [[732.0], [733.0]], p1: [[734.0]]), p1: [s0(p0: [[735.0], [736.0]], p1: [[737.0]])]), s1(p0: s0(p0: [[738.0], [739.0]], p1: [[740.0]]), p1: [s0(p0: [[741.0], [742.0]], p1: [[743.0]])])])]], p1: s0(p0: [[744.0], [745.0]], p1: [[746.0]])))], p1: s0(p0: [[747.0], [748.0]], p1: [[749.0]]), p2: [[s5(p0: [750.0], p1: [[s2(p0: s0(p0: [[751.0], [752.0]], p1: [[753.0]]), p1: [s1(p0: s0(p0: [[754.0], [755.0]], p1: [[756.0]]), p1: [s0(p0: [[757.0], [758.0]], p1: [[759.0]])]), s1(p0: s0(p0: [[760.0], [761.0]], p1: [[762.0]]), p1: [s0(p0: [[763.0], [764.0]], p1: [[765.0]])])])]])], [s5(p0: [766.0], p1: [[s2(p0: s0(p0: [[767.0], [768.0]], p1: [[769.0]]), p1: [s1(p0: s0(p0: [[770.0], [771.0]], p1: [[772.0]]), p1: [s0(p0: [[773.0], [774.0]], p1: [[775.0]])]), s1(p0: s0(p0: [[776.0], [777.0]], p1: [[778.0]]), p1: [s0(p0: [[779.0], [780.0]], p1: [[781.0]])])])]])], [s5(p0: [782.0], p1: [[s2(p0: s0(p0: [[783.0], [784.0]], p1: [[785.0]]), p1: [s1(p0: s0(p0: [[786.0], [787.0]], p1: [[788.0]]), p1: [s0(p0: [[789.0], [790.0]], p1: [[791.0]])]), s1(p0: s0(p0: [[792.0], [793.0]], p1: [[794.0]]), p1: [s0(p0: [[795.0], [796.0]], p1: [[797.0]])])])]])]])))
    let v6: Double = 798.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 798.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4, v5, v6)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
