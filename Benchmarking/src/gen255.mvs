  struct s0 {
    var p0: [[Float]]
    var p1: Float
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: [Float]
    var p1: s1
    var p2: [s1]
  } in
  struct s3 {
    var p0: [s2]
    var p1: [[s2]]
  } in
  struct s4 {
    var p0: [s2]
    var p1: [s1]
  } in
  struct s5 {
    var p0: [s1]
    var p1: [s2]
  } in
  struct s6 {
    var p0: s3
  } in
  struct s8 {
    var p0: s3
    var p1: [[s6]]
  } in
  struct s9 {
    var p0: s2
    var p1: s5
  } in
  let f5: (s0) -> s0 = (v0: s0) -> s0 {
    var v1: s0 = v0 in
    var v6: s0 = v0 in
    var v4: s0 = v0 in
    var v3: s0 = v1 in
    var v8: s0 = v0 in
    let v2: Float = v6.p1 in
    v4.p1 = v2 in
    var v9: s0 = v8 in
    v6.p1 = v2 in
    v9 = v3 in
    let v12: Float = v1.p1 in
    var v5: Float = v2 in
    var v16: s0 = v3 in
    let v14: [s0] = [v16] in
    let v19: Float = v8.p1 in
    var v30: s0 = v0 in
    var v10: [s0] = v14 in
    v30.p1 = v12 in
    v10[0] = v3 in
    let v25: s0 = v10[0] in
    let v17: Float = v5 + v2 in
    let v20: s0 = v14[0] in
    let v37: Float = v6.p1 in
    let v52: [Float] = [v5, v17, v19, v2, v37] in
    v16.p1 = v2 in
    v6 = v4 in
    var v36: [s0] = v10 in
    v16.p1 = v5 in
    let v28: Float = v3.p1 in
    v30.p1 = v37 in
    v36[0] = v3 in
    v36[0] = v16 in
    v16.p1 = v2 in
    let v22: Float = v52[1] in
    v10[0] = v25 in
    let v24: [[Float]] = v20.p0 in
    v36[0] = v9 in
    let v55: s0 = v36[0] in
    let v80: [[Float]] = v0.p0 in
    v36 = v10 in
    v4.p0 = v80 in
    v30 = v16 in
    let v48: [[Float]] = v3.p0 in
    v30.p0 = v24 in
    v9.p0 = v80 in
    v1.p1 = v22 in
    var v103: s0 = v55 in
    v1 = v30 in
    let v65: Float = v16.p1 in
    v1.p1 = v28 in
    v1.p1 = v65 in
    let v93: [[Float]] = v0.p0 in
    v8.p0 = v24 in
    v9.p0 = v93 in
    v1.p0 = v48 in
    v1.p0 = v93 in
    v103
  } in
  let noinline_f0: ([s4], s0, [s5], s2, s9, [s1], s8, s2, Float) -> Float = (v0: [s4], v1: s0, v2: [s5], v3: s2, v4: s9, v5: [s1], v6: s8, v7: s2, v8: Float) -> Float {
    let v33: s0 = f5(v1) in
    let v99: Float = v33.p1 in
    v99
  } in
  fun loop(i: Int, v0: [s4], v1: s0, v2: [s5], v3: s2, v4: s9, v5: [s1], v6: s8, v7: s2, v8: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4, v5, v6, v7, v8) in
      loop(i + 1, v0, v1, v2, v3, v4, v5, v6, v7, v8, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s4] = [s4([s2([0.0, 1.0], s1(s0([[2.0], [3.0]], 4.0), [s0([[5.0], [6.0]], 7.0), s0([[8.0], [9.0]], 10.0), s0([[11.0], [12.0]], 13.0)]), [s1(s0([[14.0], [15.0]], 16.0), [s0([[17.0], [18.0]], 19.0), s0([[20.0], [21.0]], 22.0), s0([[23.0], [24.0]], 25.0)]), s1(s0([[26.0], [27.0]], 28.0), [s0([[29.0], [30.0]], 31.0), s0([[32.0], [33.0]], 34.0), s0([[35.0], [36.0]], 37.0)])])], [s1(s0([[38.0], [39.0]], 40.0), [s0([[41.0], [42.0]], 43.0), s0([[44.0], [45.0]], 46.0), s0([[47.0], [48.0]], 49.0)]), s1(s0([[50.0], [51.0]], 52.0), [s0([[53.0], [54.0]], 55.0), s0([[56.0], [57.0]], 58.0), s0([[59.0], [60.0]], 61.0)]), s1(s0([[62.0], [63.0]], 64.0), [s0([[65.0], [66.0]], 67.0), s0([[68.0], [69.0]], 70.0), s0([[71.0], [72.0]], 73.0)])]), s4([s2([74.0, 75.0], s1(s0([[76.0], [77.0]], 78.0), [s0([[79.0], [80.0]], 81.0), s0([[82.0], [83.0]], 84.0), s0([[85.0], [86.0]], 87.0)]), [s1(s0([[88.0], [89.0]], 90.0), [s0([[91.0], [92.0]], 93.0), s0([[94.0], [95.0]], 96.0), s0([[97.0], [98.0]], 99.0)]), s1(s0([[100.0], [101.0]], 102.0), [s0([[103.0], [104.0]], 105.0), s0([[106.0], [107.0]], 108.0), s0([[109.0], [110.0]], 111.0)])])], [s1(s0([[112.0], [113.0]], 114.0), [s0([[115.0], [116.0]], 117.0), s0([[118.0], [119.0]], 120.0), s0([[121.0], [122.0]], 123.0)]), s1(s0([[124.0], [125.0]], 126.0), [s0([[127.0], [128.0]], 129.0), s0([[130.0], [131.0]], 132.0), s0([[133.0], [134.0]], 135.0)]), s1(s0([[136.0], [137.0]], 138.0), [s0([[139.0], [140.0]], 141.0), s0([[142.0], [143.0]], 144.0), s0([[145.0], [146.0]], 147.0)])])] in
    let v1: s0 = s0([[148.0], [149.0]], 150.0) in
    let v2: [s5] = [s5([s1(s0([[151.0], [152.0]], 153.0), [s0([[154.0], [155.0]], 156.0), s0([[157.0], [158.0]], 159.0), s0([[160.0], [161.0]], 162.0)]), s1(s0([[163.0], [164.0]], 165.0), [s0([[166.0], [167.0]], 168.0), s0([[169.0], [170.0]], 171.0), s0([[172.0], [173.0]], 174.0)]), s1(s0([[175.0], [176.0]], 177.0), [s0([[178.0], [179.0]], 180.0), s0([[181.0], [182.0]], 183.0), s0([[184.0], [185.0]], 186.0)])], [s2([187.0, 188.0], s1(s0([[189.0], [190.0]], 191.0), [s0([[192.0], [193.0]], 194.0), s0([[195.0], [196.0]], 197.0), s0([[198.0], [199.0]], 200.0)]), [s1(s0([[201.0], [202.0]], 203.0), [s0([[204.0], [205.0]], 206.0), s0([[207.0], [208.0]], 209.0), s0([[210.0], [211.0]], 212.0)]), s1(s0([[213.0], [214.0]], 215.0), [s0([[216.0], [217.0]], 218.0), s0([[219.0], [220.0]], 221.0), s0([[222.0], [223.0]], 224.0)])]), s2([225.0, 226.0], s1(s0([[227.0], [228.0]], 229.0), [s0([[230.0], [231.0]], 232.0), s0([[233.0], [234.0]], 235.0), s0([[236.0], [237.0]], 238.0)]), [s1(s0([[239.0], [240.0]], 241.0), [s0([[242.0], [243.0]], 244.0), s0([[245.0], [246.0]], 247.0), s0([[248.0], [249.0]], 250.0)]), s1(s0([[251.0], [252.0]], 253.0), [s0([[254.0], [255.0]], 256.0), s0([[257.0], [258.0]], 259.0), s0([[260.0], [261.0]], 262.0)])])]), s5([s1(s0([[263.0], [264.0]], 265.0), [s0([[266.0], [267.0]], 268.0), s0([[269.0], [270.0]], 271.0), s0([[272.0], [273.0]], 274.0)]), s1(s0([[275.0], [276.0]], 277.0), [s0([[278.0], [279.0]], 280.0), s0([[281.0], [282.0]], 283.0), s0([[284.0], [285.0]], 286.0)]), s1(s0([[287.0], [288.0]], 289.0), [s0([[290.0], [291.0]], 292.0), s0([[293.0], [294.0]], 295.0), s0([[296.0], [297.0]], 298.0)])], [s2([299.0, 300.0], s1(s0([[301.0], [302.0]], 303.0), [s0([[304.0], [305.0]], 306.0), s0([[307.0], [308.0]], 309.0), s0([[310.0], [311.0]], 312.0)]), [s1(s0([[313.0], [314.0]], 315.0), [s0([[316.0], [317.0]], 318.0), s0([[319.0], [320.0]], 321.0), s0([[322.0], [323.0]], 324.0)]), s1(s0([[325.0], [326.0]], 327.0), [s0([[328.0], [329.0]], 330.0), s0([[331.0], [332.0]], 333.0), s0([[334.0], [335.0]], 336.0)])]), s2([337.0, 338.0], s1(s0([[339.0], [340.0]], 341.0), [s0([[342.0], [343.0]], 344.0), s0([[345.0], [346.0]], 347.0), s0([[348.0], [349.0]], 350.0)]), [s1(s0([[351.0], [352.0]], 353.0), [s0([[354.0], [355.0]], 356.0), s0([[357.0], [358.0]], 359.0), s0([[360.0], [361.0]], 362.0)]), s1(s0([[363.0], [364.0]], 365.0), [s0([[366.0], [367.0]], 368.0), s0([[369.0], [370.0]], 371.0), s0([[372.0], [373.0]], 374.0)])])])] in
    let v3: s2 = s2([375.0, 376.0], s1(s0([[377.0], [378.0]], 379.0), [s0([[380.0], [381.0]], 382.0), s0([[383.0], [384.0]], 385.0), s0([[386.0], [387.0]], 388.0)]), [s1(s0([[389.0], [390.0]], 391.0), [s0([[392.0], [393.0]], 394.0), s0([[395.0], [396.0]], 397.0), s0([[398.0], [399.0]], 400.0)]), s1(s0([[401.0], [402.0]], 403.0), [s0([[404.0], [405.0]], 406.0), s0([[407.0], [408.0]], 409.0), s0([[410.0], [411.0]], 412.0)])]) in
    let v4: s9 = s9(s2([413.0, 414.0], s1(s0([[415.0], [416.0]], 417.0), [s0([[418.0], [419.0]], 420.0), s0([[421.0], [422.0]], 423.0), s0([[424.0], [425.0]], 426.0)]), [s1(s0([[427.0], [428.0]], 429.0), [s0([[430.0], [431.0]], 432.0), s0([[433.0], [434.0]], 435.0), s0([[436.0], [437.0]], 438.0)]), s1(s0([[439.0], [440.0]], 441.0), [s0([[442.0], [443.0]], 444.0), s0([[445.0], [446.0]], 447.0), s0([[448.0], [449.0]], 450.0)])]), s5([s1(s0([[451.0], [452.0]], 453.0), [s0([[454.0], [455.0]], 456.0), s0([[457.0], [458.0]], 459.0), s0([[460.0], [461.0]], 462.0)]), s1(s0([[463.0], [464.0]], 465.0), [s0([[466.0], [467.0]], 468.0), s0([[469.0], [470.0]], 471.0), s0([[472.0], [473.0]], 474.0)]), s1(s0([[475.0], [476.0]], 477.0), [s0([[478.0], [479.0]], 480.0), s0([[481.0], [482.0]], 483.0), s0([[484.0], [485.0]], 486.0)])], [s2([487.0, 488.0], s1(s0([[489.0], [490.0]], 491.0), [s0([[492.0], [493.0]], 494.0), s0([[495.0], [496.0]], 497.0), s0([[498.0], [499.0]], 500.0)]), [s1(s0([[501.0], [502.0]], 503.0), [s0([[504.0], [505.0]], 506.0), s0([[507.0], [508.0]], 509.0), s0([[510.0], [511.0]], 512.0)]), s1(s0([[513.0], [514.0]], 515.0), [s0([[516.0], [517.0]], 518.0), s0([[519.0], [520.0]], 521.0), s0([[522.0], [523.0]], 524.0)])]), s2([525.0, 526.0], s1(s0([[527.0], [528.0]], 529.0), [s0([[530.0], [531.0]], 532.0), s0([[533.0], [534.0]], 535.0), s0([[536.0], [537.0]], 538.0)]), [s1(s0([[539.0], [540.0]], 541.0), [s0([[542.0], [543.0]], 544.0), s0([[545.0], [546.0]], 547.0), s0([[548.0], [549.0]], 550.0)]), s1(s0([[551.0], [552.0]], 553.0), [s0([[554.0], [555.0]], 556.0), s0([[557.0], [558.0]], 559.0), s0([[560.0], [561.0]], 562.0)])])])) in
    let v5: [s1] = [s1(s0([[563.0], [564.0]], 565.0), [s0([[566.0], [567.0]], 568.0), s0([[569.0], [570.0]], 571.0), s0([[572.0], [573.0]], 574.0)]), s1(s0([[575.0], [576.0]], 577.0), [s0([[578.0], [579.0]], 580.0), s0([[581.0], [582.0]], 583.0), s0([[584.0], [585.0]], 586.0)])] in
    let v6: s8 = s8(s3([s2([587.0, 588.0], s1(s0([[589.0], [590.0]], 591.0), [s0([[592.0], [593.0]], 594.0), s0([[595.0], [596.0]], 597.0), s0([[598.0], [599.0]], 600.0)]), [s1(s0([[601.0], [602.0]], 603.0), [s0([[604.0], [605.0]], 606.0), s0([[607.0], [608.0]], 609.0), s0([[610.0], [611.0]], 612.0)]), s1(s0([[613.0], [614.0]], 615.0), [s0([[616.0], [617.0]], 618.0), s0([[619.0], [620.0]], 621.0), s0([[622.0], [623.0]], 624.0)])]), s2([625.0, 626.0], s1(s0([[627.0], [628.0]], 629.0), [s0([[630.0], [631.0]], 632.0), s0([[633.0], [634.0]], 635.0), s0([[636.0], [637.0]], 638.0)]), [s1(s0([[639.0], [640.0]], 641.0), [s0([[642.0], [643.0]], 644.0), s0([[645.0], [646.0]], 647.0), s0([[648.0], [649.0]], 650.0)]), s1(s0([[651.0], [652.0]], 653.0), [s0([[654.0], [655.0]], 656.0), s0([[657.0], [658.0]], 659.0), s0([[660.0], [661.0]], 662.0)])]), s2([663.0, 664.0], s1(s0([[665.0], [666.0]], 667.0), [s0([[668.0], [669.0]], 670.0), s0([[671.0], [672.0]], 673.0), s0([[674.0], [675.0]], 676.0)]), [s1(s0([[677.0], [678.0]], 679.0), [s0([[680.0], [681.0]], 682.0), s0([[683.0], [684.0]], 685.0), s0([[686.0], [687.0]], 688.0)]), s1(s0([[689.0], [690.0]], 691.0), [s0([[692.0], [693.0]], 694.0), s0([[695.0], [696.0]], 697.0), s0([[698.0], [699.0]], 700.0)])])], [[s2([701.0, 702.0], s1(s0([[703.0], [704.0]], 705.0), [s0([[706.0], [707.0]], 708.0), s0([[709.0], [710.0]], 711.0), s0([[712.0], [713.0]], 714.0)]), [s1(s0([[715.0], [716.0]], 717.0), [s0([[718.0], [719.0]], 720.0), s0([[721.0], [722.0]], 723.0), s0([[724.0], [725.0]], 726.0)]), s1(s0([[727.0], [728.0]], 729.0), [s0([[730.0], [731.0]], 732.0), s0([[733.0], [734.0]], 735.0), s0([[736.0], [737.0]], 738.0)])])]]), [[s6(s3([s2([739.0, 740.0], s1(s0([[741.0], [742.0]], 743.0), [s0([[744.0], [745.0]], 746.0), s0([[747.0], [748.0]], 749.0), s0([[750.0], [751.0]], 752.0)]), [s1(s0([[753.0], [754.0]], 755.0), [s0([[756.0], [757.0]], 758.0), s0([[759.0], [760.0]], 761.0), s0([[762.0], [763.0]], 764.0)]), s1(s0([[765.0], [766.0]], 767.0), [s0([[768.0], [769.0]], 770.0), s0([[771.0], [772.0]], 773.0), s0([[774.0], [775.0]], 776.0)])]), s2([777.0, 778.0], s1(s0([[779.0], [780.0]], 781.0), [s0([[782.0], [783.0]], 784.0), s0([[785.0], [786.0]], 787.0), s0([[788.0], [789.0]], 790.0)]), [s1(s0([[791.0], [792.0]], 793.0), [s0([[794.0], [795.0]], 796.0), s0([[797.0], [798.0]], 799.0), s0([[800.0], [801.0]], 802.0)]), s1(s0([[803.0], [804.0]], 805.0), [s0([[806.0], [807.0]], 808.0), s0([[809.0], [810.0]], 811.0), s0([[812.0], [813.0]], 814.0)])]), s2([815.0, 816.0], s1(s0([[817.0], [818.0]], 819.0), [s0([[820.0], [821.0]], 822.0), s0([[823.0], [824.0]], 825.0), s0([[826.0], [827.0]], 828.0)]), [s1(s0([[829.0], [830.0]], 831.0), [s0([[832.0], [833.0]], 834.0), s0([[835.0], [836.0]], 837.0), s0([[838.0], [839.0]], 840.0)]), s1(s0([[841.0], [842.0]], 843.0), [s0([[844.0], [845.0]], 846.0), s0([[847.0], [848.0]], 849.0), s0([[850.0], [851.0]], 852.0)])])], [[s2([853.0, 854.0], s1(s0([[855.0], [856.0]], 857.0), [s0([[858.0], [859.0]], 860.0), s0([[861.0], [862.0]], 863.0), s0([[864.0], [865.0]], 866.0)]), [s1(s0([[867.0], [868.0]], 869.0), [s0([[870.0], [871.0]], 872.0), s0([[873.0], [874.0]], 875.0), s0([[876.0], [877.0]], 878.0)]), s1(s0([[879.0], [880.0]], 881.0), [s0([[882.0], [883.0]], 884.0), s0([[885.0], [886.0]], 887.0), s0([[888.0], [889.0]], 890.0)])])]]))], [s6(s3([s2([891.0, 892.0], s1(s0([[893.0], [894.0]], 895.0), [s0([[896.0], [897.0]], 898.0), s0([[899.0], [900.0]], 901.0), s0([[902.0], [903.0]], 904.0)]), [s1(s0([[905.0], [906.0]], 907.0), [s0([[908.0], [909.0]], 910.0), s0([[911.0], [912.0]], 913.0), s0([[914.0], [915.0]], 916.0)]), s1(s0([[917.0], [918.0]], 919.0), [s0([[920.0], [921.0]], 922.0), s0([[923.0], [924.0]], 925.0), s0([[926.0], [927.0]], 928.0)])]), s2([929.0, 930.0], s1(s0([[931.0], [932.0]], 933.0), [s0([[934.0], [935.0]], 936.0), s0([[937.0], [938.0]], 939.0), s0([[940.0], [941.0]], 942.0)]), [s1(s0([[943.0], [944.0]], 945.0), [s0([[946.0], [947.0]], 948.0), s0([[949.0], [950.0]], 951.0), s0([[952.0], [953.0]], 954.0)]), s1(s0([[955.0], [956.0]], 957.0), [s0([[958.0], [959.0]], 960.0), s0([[961.0], [962.0]], 963.0), s0([[964.0], [965.0]], 966.0)])]), s2([967.0, 968.0], s1(s0([[969.0], [970.0]], 971.0), [s0([[972.0], [973.0]], 974.0), s0([[975.0], [976.0]], 977.0), s0([[978.0], [979.0]], 980.0)]), [s1(s0([[981.0], [982.0]], 983.0), [s0([[984.0], [985.0]], 986.0), s0([[987.0], [988.0]], 989.0), s0([[990.0], [991.0]], 992.0)]), s1(s0([[993.0], [994.0]], 995.0), [s0([[996.0], [997.0]], 998.0), s0([[999.0], [1000.0]], 1001.0), s0([[1002.0], [1003.0]], 1004.0)])])], [[s2([1005.0, 1006.0], s1(s0([[1007.0], [1008.0]], 1009.0), [s0([[1010.0], [1011.0]], 1012.0), s0([[1013.0], [1014.0]], 1015.0), s0([[1016.0], [1017.0]], 1018.0)]), [s1(s0([[1019.0], [1020.0]], 1021.0), [s0([[1022.0], [1023.0]], 1024.0), s0([[1025.0], [1026.0]], 1027.0), s0([[1028.0], [1029.0]], 1030.0)]), s1(s0([[1031.0], [1032.0]], 1033.0), [s0([[1034.0], [1035.0]], 1036.0), s0([[1037.0], [1038.0]], 1039.0), s0([[1040.0], [1041.0]], 1042.0)])])]]))], [s6(s3([s2([1043.0, 1044.0], s1(s0([[1045.0], [1046.0]], 1047.0), [s0([[1048.0], [1049.0]], 1050.0), s0([[1051.0], [1052.0]], 1053.0), s0([[1054.0], [1055.0]], 1056.0)]), [s1(s0([[1057.0], [1058.0]], 1059.0), [s0([[1060.0], [1061.0]], 1062.0), s0([[1063.0], [1064.0]], 1065.0), s0([[1066.0], [1067.0]], 1068.0)]), s1(s0([[1069.0], [1070.0]], 1071.0), [s0([[1072.0], [1073.0]], 1074.0), s0([[1075.0], [1076.0]], 1077.0), s0([[1078.0], [1079.0]], 1080.0)])]), s2([1081.0, 1082.0], s1(s0([[1083.0], [1084.0]], 1085.0), [s0([[1086.0], [1087.0]], 1088.0), s0([[1089.0], [1090.0]], 1091.0), s0([[1092.0], [1093.0]], 1094.0)]), [s1(s0([[1095.0], [1096.0]], 1097.0), [s0([[1098.0], [1099.0]], 1100.0), s0([[1101.0], [1102.0]], 1103.0), s0([[1104.0], [1105.0]], 1106.0)]), s1(s0([[1107.0], [1108.0]], 1109.0), [s0([[1110.0], [1111.0]], 1112.0), s0([[1113.0], [1114.0]], 1115.0), s0([[1116.0], [1117.0]], 1118.0)])]), s2([1119.0, 1120.0], s1(s0([[1121.0], [1122.0]], 1123.0), [s0([[1124.0], [1125.0]], 1126.0), s0([[1127.0], [1128.0]], 1129.0), s0([[1130.0], [1131.0]], 1132.0)]), [s1(s0([[1133.0], [1134.0]], 1135.0), [s0([[1136.0], [1137.0]], 1138.0), s0([[1139.0], [1140.0]], 1141.0), s0([[1142.0], [1143.0]], 1144.0)]), s1(s0([[1145.0], [1146.0]], 1147.0), [s0([[1148.0], [1149.0]], 1150.0), s0([[1151.0], [1152.0]], 1153.0), s0([[1154.0], [1155.0]], 1156.0)])])], [[s2([1157.0, 1158.0], s1(s0([[1159.0], [1160.0]], 1161.0), [s0([[1162.0], [1163.0]], 1164.0), s0([[1165.0], [1166.0]], 1167.0), s0([[1168.0], [1169.0]], 1170.0)]), [s1(s0([[1171.0], [1172.0]], 1173.0), [s0([[1174.0], [1175.0]], 1176.0), s0([[1177.0], [1178.0]], 1179.0), s0([[1180.0], [1181.0]], 1182.0)]), s1(s0([[1183.0], [1184.0]], 1185.0), [s0([[1186.0], [1187.0]], 1188.0), s0([[1189.0], [1190.0]], 1191.0), s0([[1192.0], [1193.0]], 1194.0)])])]]))]]) in
    let v7: s2 = s2([1195.0, 1196.0], s1(s0([[1197.0], [1198.0]], 1199.0), [s0([[1200.0], [1201.0]], 1202.0), s0([[1203.0], [1204.0]], 1205.0), s0([[1206.0], [1207.0]], 1208.0)]), [s1(s0([[1209.0], [1210.0]], 1211.0), [s0([[1212.0], [1213.0]], 1214.0), s0([[1215.0], [1216.0]], 1217.0), s0([[1218.0], [1219.0]], 1220.0)]), s1(s0([[1221.0], [1222.0]], 1223.0), [s0([[1224.0], [1225.0]], 1226.0), s0([[1227.0], [1228.0]], 1229.0), s0([[1230.0], [1231.0]], 1232.0)])]) in
    let v8: Float = 1233.0 in
    let initialResult: Float = 1233.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, v5, v6, v7, v8, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()