  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
    var p2: [[s0]]
  } in
  struct s2 {
    var p0: [s0]
    var p1: s0
  } in
  struct s3 {
    var p0: [s0]
    var p1: [[s0]]
  } in
  struct s4 {
    var p0: [s2]
    var p1: [[s0]]
  } in
  struct s5 {
    var p0: s4
    var p1: s3
    var p2: [s0]
  } in
  struct s6 {
    var p0: s0
  } in
  let f16: (s6) -> s6 = (v0: s6) -> s6 {
    let v2: [s6] = [v0, v0, v0, v0, v0, v0, v0] in
    let v11: s0 = v0.p0 in
    var v26: [s6] = v2 in
    let v23: s6 = v26[3] in
    let v31: s6 = v2[6] in
    var v43: [s6] = v2 in
    var v57: [s6] = v43 in
    v57[3] = v23 in
    let v74: s6 = v43[0] in
    let v69: s6 = v26[0] in
    v26[3] = v31 in
    let v58: s6 = v2[1] in
    let v53: s6 = s6(v11) in
    let v101: s6 = v57[1] in
    v26[4] = v69 in
    v43[2] = v53 in
    v26[3] = v74 in
    v43[1] = v58 in
    v101
  } in
  let f5: (s0) -> s0 = (v0: s0) -> s0 {
    let v6: [[Float]] = v0.p0 in
    var v5: s0 = v0 in
    let v2: [[Float]] = v0.p0 in
    var v3: [[Float]] = v2 in
    var v1: s0 = v5 in
    let v7: [[Float]] = v5.p1 in
    v1.p1 = v7 in
    var v9: [[Float]] = v6 in
    let v18: s6 = s6(v0) in
    let v30: [Float] = v7[0] in
    let v10: s6 = f16(v18) in
    let v11: [s6] = [v18, v10, v18, v10, v18, v18] in
    let v41: s0 = v10.p0 in
    let v47: s6 = v11[4] in
    let v25: s6 = v11[4] in
    var v17: s0 = v0 in
    v5.p0 = v2 in
    let v36: [[[Float]]] = [v3, v2, v2, v6, v6, v9] in
    let v29: [Float] = v6[0] in
    v3[1] = v29 in
    v3[2] = v30 in
    v9[2] = v29 in
    let v22: s0 = v25.p0 in
    let v67: s0 = v47.p0 in
    let v37: [Float] = v7[0] in
    v17.p0 = v9 in
    let v59: [[Float]] = v17.p1 in
    v9[0] = v29 in
    var v52: s0 = v67 in
    v3[2] = v37 in
    let v124: [[Float]] = v36[3] in
    let v87: [Float] = v59[0] in
    v52.p0 = v124 in
    let v106: [s0] = [v0, v1, v22, v41, v17, v52, v22] in
    v3[2] = v30 in
    let v79: s0 = v106[4] in
    v52.p0 = v9 in
    var v120: s0 = v79 in
    v3[1] = v87 in
    v120
  } in
  let noinline_f0: (s5, [s3], s1, Float) -> Float = (v0: s5, v1: [s3], v2: s1, v3: Float) -> Float {
    let v9: [s0] = v2.p0 in
    var v11: [s0] = v9 in
    let v20: s0 = v11[0] in
    let v16: s0 = f5(v20) in
    let v15: [[Float]] = v16.p1 in
    let v23: [Float] = v15[0] in
    v11[0] = v16 in
    let v47: Float = v23[0] in
    var v51: [Float] = v23 in
    let v77: Float = v51[0] in
    v51[0] = v47 in
    v77
  } in
  fun loop(i: Int, v0: s5, v1: [s3], v2: s1, v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s5 = s5(s4([s2([s0([[0.0], [1.0], [2.0]], [[3.0]])], s0([[4.0], [5.0], [6.0]], [[7.0]]))], [[s0([[8.0], [9.0], [10.0]], [[11.0]])], [s0([[12.0], [13.0], [14.0]], [[15.0]])], [s0([[16.0], [17.0], [18.0]], [[19.0]])]]), s3([s0([[20.0], [21.0], [22.0]], [[23.0]])], [[s0([[24.0], [25.0], [26.0]], [[27.0]])]]), [s0([[28.0], [29.0], [30.0]], [[31.0]]), s0([[32.0], [33.0], [34.0]], [[35.0]])]) in
    let v1: [s3] = [s3([s0([[36.0], [37.0], [38.0]], [[39.0]])], [[s0([[40.0], [41.0], [42.0]], [[43.0]])]]), s3([s0([[44.0], [45.0], [46.0]], [[47.0]])], [[s0([[48.0], [49.0], [50.0]], [[51.0]])]]), s3([s0([[52.0], [53.0], [54.0]], [[55.0]])], [[s0([[56.0], [57.0], [58.0]], [[59.0]])]])] in
    let v2: s1 = s1([s0([[60.0], [61.0], [62.0]], [[63.0]])], s0([[64.0], [65.0], [66.0]], [[67.0]]), [[s0([[68.0], [69.0], [70.0]], [[71.0]])]]) in
    let v3: Float = 72.0 in
    let initialResult: Float = 72.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()