  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [Double]
  }
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  }
  struct s2 {
    var p0: [s0]
    var p1: [s1]
    var p2: [s0]
    var p3: s0
    var p4: [[s0]]
  }
  struct s5 {
    var p0: s2
    var p1: [[s1]]
  }
  struct s6 {
    var p0: s1
    var p1: s5
  }
  func f52(_ v0: s0) -> s0 {
    let v2: [Double] = v0.p3
    let v6: Double = v2[1]
    var v5: Double = v6
    var v8: s0 = v0
    var v4: [Double] = v2
    let v3: Double = v4[2]
    var v10: Double = v6
    v4[1] = v10
    v4[1] = v5
    var v11: s0 = v0
    var v13: s0 = v0
    var v12: s0 = v8
    var v14: s0 = v8
    let v23: Double = v2[2]
    let v25: [[Double]] = v8.p1
    var v17: [[Double]] = v25
    let v19: [Double] = v25[1]
    let v16: [[Double]] = v11.p0
    var v42: [Double] = v19
    v17[1] = v42
    var v20: [[Double]] = v16
    var v18: [Double] = v42
    v11.p1 = v25
    v42[0] = v5
    let v22: [[Double]] = v14.p0
    let v27: [[[Double]]] = [v17]
    v4[1] = v3
    let v21: [[Double]] = v0.p1
    var v58: [[Double]] = v25
    v4[1] = v10
    v14.p1 = v17
    var v31: [Double] = v19
    v12.p0 = v20
    let v55: [Double] = v13.p3
    v20[0] = v42
    let v32: [[Double]] = v0.p2
    var v127: [[Double]] = v25
    v58[0] = v31
    let v36: [Double] = v32[1]
    let v30: [[Double]] = v13.p0
    var v98: [Double] = v4
    let v40: [[Double]] = v12.p1
    let v54: [[Double]] = v13.p2
    let v62: [Double] = v22[0]
    var v57: [[Double]] = v21
    v11.p3 = v55
    let v79: [[Double]] = v27[0]
    let v103: [[Double]] = v14.p0
    let v100: s0 = s0(p0: v103, p1: v54, p2: v40, p3: v4)
    let v75: [[Double]] = v13.p0
    v11.p0 = v20
    let v80: [[Double]] = v0.p2
    v8.p3 = v98
    let v118: [s0] = [v11, v12, v100, v14, v100]
    let v119: s0 = v118[0]
    let v122: [[Double]] = v0.p2
    let v68: s0 = v118[4]
    v13.p2 = v58
    v31[0] = v23
    let v161: [Double] = v68.p3
    v11.p0 = v75
    v13.p1 = v122
    let v108: [[Double]] = v119.p2
    v58[1] = v62
    let v84: [[Double]] = v13.p0
    let v60: s0 = s0(p0: v20, p1: v127, p2: v79, p3: v161)
    let v153: [Double] = v57[0]
    v20[0] = v18
    v8.p0 = v20
    v14.p2 = v54
    v12.p2 = v108
    v8.p0 = v30
    v58[1] = v36
    v14.p1 = v80
    v127[0] = v153
    v13.p0 = v84
    v20[0] = v31
    return v60
  }
  func f34(_ v0: s0) -> s0 {
    var v8: s0 = v0
    let v6: [[Double]] = v8.p1
    v8.p1 = v6
    var v1: s0 = v8
    let v4: [[Double]] = v0.p2
    v1.p1 = v6
    v8.p1 = v4
    var v7: s0 = v8
    let v9: s0 = f52(v1)
    let v14: s0 = f52(v7)
    let v13: s0 = f52(v8)
    let v18: [[Double]] = v7.p1
    let v23: [[Double]] = v13.p0
    let v34: [[Double]] = v9.p1
    let v28: s0 = f52(v14)
    let v48: [Double] = v28.p3
    var v73: [[Double]] = v23
    let v36: s0 = s0(p0: v73, p1: v18, p2: v34, p3: v48)
    return v36
  }
  func f22(_ v0: [s0]) -> [s0] {
    let v4: s0 = v0[0]
    let v1: s0 = v0[0]
    let v7: s0 = v0[0]
    let v11: s0 = f34(v4)
    var v10: [s0] = v0
    v10[0] = v7
    v10[0] = v11
    let v29: s0 = f52(v1)
    var v35: [s0] = v10
    v35[0] = v29
    v35[0] = v1
    return v35
  }
  @inline(never)
  func f0(_ v0: [s2], _ v1: s6, _ v2: [s0], _ v3: Double) -> Double {
    let v6: [s0] = f22(v2)
    let v5: s0 = v6[0]
    let v13: s0 = f52(v5)
    var v15: s0 = v13
    var v18: [s0] = v2
    v18[0] = v5
    v18 = v6
    v18[0] = v13
    let v41: s0 = v18[0]
    let v56: s0 = f52(v41)
    var v85: s0 = v15
    let v92: [[Double]] = v85.p0
    v15 = v13
    var v214: s0 = v56
    let v90: s0 = f34(v214)
    let v89: [[Double]] = v214.p2
    let v137: [Double] = v92[0]
    let v133: Double = v137[0]
    v214.p2 = v89
    let v105: [Double] = v214.p3
    let v129: Double = v3 - v133
    v15.p3 = v105
    v18[0] = v90
    return v129
  }
  func benchmark() {
    let v0: [s2] = [s2(p0: [s0(p0: [[0.0]], p1: [[1.0], [2.0]], p2: [[3.0], [4.0]], p3: [5.0, 6.0, 7.0]), s0(p0: [[8.0]], p1: [[9.0], [10.0]], p2: [[11.0], [12.0]], p3: [13.0, 14.0, 15.0])], p1: [s1(p0: [[s0(p0: [[16.0]], p1: [[17.0], [18.0]], p2: [[19.0], [20.0]], p3: [21.0, 22.0, 23.0])]], p1: s0(p0: [[24.0]], p1: [[25.0], [26.0]], p2: [[27.0], [28.0]], p3: [29.0, 30.0, 31.0]))], p2: [s0(p0: [[32.0]], p1: [[33.0], [34.0]], p2: [[35.0], [36.0]], p3: [37.0, 38.0, 39.0])], p3: s0(p0: [[40.0]], p1: [[41.0], [42.0]], p2: [[43.0], [44.0]], p3: [45.0, 46.0, 47.0]), p4: [[s0(p0: [[48.0]], p1: [[49.0], [50.0]], p2: [[51.0], [52.0]], p3: [53.0, 54.0, 55.0])], [s0(p0: [[56.0]], p1: [[57.0], [58.0]], p2: [[59.0], [60.0]], p3: [61.0, 62.0, 63.0])], [s0(p0: [[64.0]], p1: [[65.0], [66.0]], p2: [[67.0], [68.0]], p3: [69.0, 70.0, 71.0])]]), s2(p0: [s0(p0: [[72.0]], p1: [[73.0], [74.0]], p2: [[75.0], [76.0]], p3: [77.0, 78.0, 79.0]), s0(p0: [[80.0]], p1: [[81.0], [82.0]], p2: [[83.0], [84.0]], p3: [85.0, 86.0, 87.0])], p1: [s1(p0: [[s0(p0: [[88.0]], p1: [[89.0], [90.0]], p2: [[91.0], [92.0]], p3: [93.0, 94.0, 95.0])]], p1: s0(p0: [[96.0]], p1: [[97.0], [98.0]], p2: [[99.0], [100.0]], p3: [101.0, 102.0, 103.0]))], p2: [s0(p0: [[104.0]], p1: [[105.0], [106.0]], p2: [[107.0], [108.0]], p3: [109.0, 110.0, 111.0])], p3: s0(p0: [[112.0]], p1: [[113.0], [114.0]], p2: [[115.0], [116.0]], p3: [117.0, 118.0, 119.0]), p4: [[s0(p0: [[120.0]], p1: [[121.0], [122.0]], p2: [[123.0], [124.0]], p3: [125.0, 126.0, 127.0])], [s0(p0: [[128.0]], p1: [[129.0], [130.0]], p2: [[131.0], [132.0]], p3: [133.0, 134.0, 135.0])], [s0(p0: [[136.0]], p1: [[137.0], [138.0]], p2: [[139.0], [140.0]], p3: [141.0, 142.0, 143.0])]])]
    let v1: s6 = s6(p0: s1(p0: [[s0(p0: [[144.0]], p1: [[145.0], [146.0]], p2: [[147.0], [148.0]], p3: [149.0, 150.0, 151.0])]], p1: s0(p0: [[152.0]], p1: [[153.0], [154.0]], p2: [[155.0], [156.0]], p3: [157.0, 158.0, 159.0])), p1: s5(p0: s2(p0: [s0(p0: [[160.0]], p1: [[161.0], [162.0]], p2: [[163.0], [164.0]], p3: [165.0, 166.0, 167.0]), s0(p0: [[168.0]], p1: [[169.0], [170.0]], p2: [[171.0], [172.0]], p3: [173.0, 174.0, 175.0])], p1: [s1(p0: [[s0(p0: [[176.0]], p1: [[177.0], [178.0]], p2: [[179.0], [180.0]], p3: [181.0, 182.0, 183.0])]], p1: s0(p0: [[184.0]], p1: [[185.0], [186.0]], p2: [[187.0], [188.0]], p3: [189.0, 190.0, 191.0]))], p2: [s0(p0: [[192.0]], p1: [[193.0], [194.0]], p2: [[195.0], [196.0]], p3: [197.0, 198.0, 199.0])], p3: s0(p0: [[200.0]], p1: [[201.0], [202.0]], p2: [[203.0], [204.0]], p3: [205.0, 206.0, 207.0]), p4: [[s0(p0: [[208.0]], p1: [[209.0], [210.0]], p2: [[211.0], [212.0]], p3: [213.0, 214.0, 215.0])], [s0(p0: [[216.0]], p1: [[217.0], [218.0]], p2: [[219.0], [220.0]], p3: [221.0, 222.0, 223.0])], [s0(p0: [[224.0]], p1: [[225.0], [226.0]], p2: [[227.0], [228.0]], p3: [229.0, 230.0, 231.0])]]), p1: [[s1(p0: [[s0(p0: [[232.0]], p1: [[233.0], [234.0]], p2: [[235.0], [236.0]], p3: [237.0, 238.0, 239.0])]], p1: s0(p0: [[240.0]], p1: [[241.0], [242.0]], p2: [[243.0], [244.0]], p3: [245.0, 246.0, 247.0]))], [s1(p0: [[s0(p0: [[248.0]], p1: [[249.0], [250.0]], p2: [[251.0], [252.0]], p3: [253.0, 254.0, 255.0])]], p1: s0(p0: [[256.0]], p1: [[257.0], [258.0]], p2: [[259.0], [260.0]], p3: [261.0, 262.0, 263.0]))]]))
    let v2: [s0] = [s0(p0: [[264.0]], p1: [[265.0], [266.0]], p2: [[267.0], [268.0]], p3: [269.0, 270.0, 271.0])]
    let v3: Double = 272.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 272.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
