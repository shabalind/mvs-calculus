  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s2 {
    var p0: s0
    var p1: s1
  } in
  struct s3 {
    var p0: [s2]
    var p1: Float
    var p2: s0
    var p3: [s1]
  } in
  struct s4 {
    var p0: [s2]
    var p1: s0
  } in
  struct s5 {
    var p0: s3
    var p1: [[s2]]
  } in
  struct s7 {
    var p0: s1
    var p1: s2
  } in
  struct s10 {
    var p0: s4
    var p1: [s5]
  } in
  let f11: ([s5], Float) -> Float = (v0: [s5], v1: Float) -> Float {
    let v2: s5 = v0[0] in
    let v6: s3 = v2.p0 in
    let v19: s0 = v6.p2 in
    let v46: [[Float]] = v19.p0 in
    let v21: [Float] = v46[0] in
    let v43: [Float] = v46[0] in
    let v20: Float = v21[0] in
    let v45: Float = v43[0] in
    let v102: Float = v45 / v20 in
    v102
  } in
  let noinline_f0: (s10, [s7], Float) -> Float = (v0: s10, v1: [s7], v2: Float) -> Float {
    let v10: [s5] = v0.p1 in
    let v11: [s5] = v0.p1 in
    let v15: Float = v2 * v2 in
    let v37: Float = f11(v10, v15) in
    let v73: Float = f11(v11, v37) in
    let v62: Float = v73 - v73 in
    v62
  } in
  fun loop(i: Int, v0: s10, v1: [s7], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s10 = s10(s4([s2(s0([[0.0]], [[1.0], [2.0]]), s1([s0([[3.0]], [[4.0], [5.0]]), s0([[6.0]], [[7.0], [8.0]])], [s0([[9.0]], [[10.0], [11.0]])])), s2(s0([[12.0]], [[13.0], [14.0]]), s1([s0([[15.0]], [[16.0], [17.0]]), s0([[18.0]], [[19.0], [20.0]])], [s0([[21.0]], [[22.0], [23.0]])]))], s0([[24.0]], [[25.0], [26.0]])), [s5(s3([s2(s0([[27.0]], [[28.0], [29.0]]), s1([s0([[30.0]], [[31.0], [32.0]]), s0([[33.0]], [[34.0], [35.0]])], [s0([[36.0]], [[37.0], [38.0]])])), s2(s0([[39.0]], [[40.0], [41.0]]), s1([s0([[42.0]], [[43.0], [44.0]]), s0([[45.0]], [[46.0], [47.0]])], [s0([[48.0]], [[49.0], [50.0]])])), s2(s0([[51.0]], [[52.0], [53.0]]), s1([s0([[54.0]], [[55.0], [56.0]]), s0([[57.0]], [[58.0], [59.0]])], [s0([[60.0]], [[61.0], [62.0]])]))], 63.0, s0([[64.0]], [[65.0], [66.0]]), [s1([s0([[67.0]], [[68.0], [69.0]]), s0([[70.0]], [[71.0], [72.0]])], [s0([[73.0]], [[74.0], [75.0]])]), s1([s0([[76.0]], [[77.0], [78.0]]), s0([[79.0]], [[80.0], [81.0]])], [s0([[82.0]], [[83.0], [84.0]])])]), [[s2(s0([[85.0]], [[86.0], [87.0]]), s1([s0([[88.0]], [[89.0], [90.0]]), s0([[91.0]], [[92.0], [93.0]])], [s0([[94.0]], [[95.0], [96.0]])]))]]), s5(s3([s2(s0([[97.0]], [[98.0], [99.0]]), s1([s0([[100.0]], [[101.0], [102.0]]), s0([[103.0]], [[104.0], [105.0]])], [s0([[106.0]], [[107.0], [108.0]])])), s2(s0([[109.0]], [[110.0], [111.0]]), s1([s0([[112.0]], [[113.0], [114.0]]), s0([[115.0]], [[116.0], [117.0]])], [s0([[118.0]], [[119.0], [120.0]])])), s2(s0([[121.0]], [[122.0], [123.0]]), s1([s0([[124.0]], [[125.0], [126.0]]), s0([[127.0]], [[128.0], [129.0]])], [s0([[130.0]], [[131.0], [132.0]])]))], 133.0, s0([[134.0]], [[135.0], [136.0]]), [s1([s0([[137.0]], [[138.0], [139.0]]), s0([[140.0]], [[141.0], [142.0]])], [s0([[143.0]], [[144.0], [145.0]])]), s1([s0([[146.0]], [[147.0], [148.0]]), s0([[149.0]], [[150.0], [151.0]])], [s0([[152.0]], [[153.0], [154.0]])])]), [[s2(s0([[155.0]], [[156.0], [157.0]]), s1([s0([[158.0]], [[159.0], [160.0]]), s0([[161.0]], [[162.0], [163.0]])], [s0([[164.0]], [[165.0], [166.0]])]))]]), s5(s3([s2(s0([[167.0]], [[168.0], [169.0]]), s1([s0([[170.0]], [[171.0], [172.0]]), s0([[173.0]], [[174.0], [175.0]])], [s0([[176.0]], [[177.0], [178.0]])])), s2(s0([[179.0]], [[180.0], [181.0]]), s1([s0([[182.0]], [[183.0], [184.0]]), s0([[185.0]], [[186.0], [187.0]])], [s0([[188.0]], [[189.0], [190.0]])])), s2(s0([[191.0]], [[192.0], [193.0]]), s1([s0([[194.0]], [[195.0], [196.0]]), s0([[197.0]], [[198.0], [199.0]])], [s0([[200.0]], [[201.0], [202.0]])]))], 203.0, s0([[204.0]], [[205.0], [206.0]]), [s1([s0([[207.0]], [[208.0], [209.0]]), s0([[210.0]], [[211.0], [212.0]])], [s0([[213.0]], [[214.0], [215.0]])]), s1([s0([[216.0]], [[217.0], [218.0]]), s0([[219.0]], [[220.0], [221.0]])], [s0([[222.0]], [[223.0], [224.0]])])]), [[s2(s0([[225.0]], [[226.0], [227.0]]), s1([s0([[228.0]], [[229.0], [230.0]]), s0([[231.0]], [[232.0], [233.0]])], [s0([[234.0]], [[235.0], [236.0]])]))]])]) in
    let v1: [s7] = [s7(s1([s0([[237.0]], [[238.0], [239.0]]), s0([[240.0]], [[241.0], [242.0]])], [s0([[243.0]], [[244.0], [245.0]])]), s2(s0([[246.0]], [[247.0], [248.0]]), s1([s0([[249.0]], [[250.0], [251.0]]), s0([[252.0]], [[253.0], [254.0]])], [s0([[255.0]], [[256.0], [257.0]])]))), s7(s1([s0([[258.0]], [[259.0], [260.0]]), s0([[261.0]], [[262.0], [263.0]])], [s0([[264.0]], [[265.0], [266.0]])]), s2(s0([[267.0]], [[268.0], [269.0]]), s1([s0([[270.0]], [[271.0], [272.0]]), s0([[273.0]], [[274.0], [275.0]])], [s0([[276.0]], [[277.0], [278.0]])])))] in
    let v2: Float = 279.0 in
    let initialResult: Float = 279.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()