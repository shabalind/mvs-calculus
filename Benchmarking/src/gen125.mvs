  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let f44: ([Float]) -> [Float] = (v0: [Float]) -> [Float] {
    var v5: [Float] = v0 in
    var v6: [Float] = v0 in
    let v2: [[Float]] = [v5] in
    let v1: [Float] = v2[0] in
    var v3: [Float] = v6 in
    var v13: [[Float]] = v2 in
    v13[0] = v5 in
    v13[0] = v1 in
    v13[0] = v1 in
    v13[0] = v3 in
    let v23: [Float] = v2[0] in
    var v16: [Float] = v3 in
    v13[0] = v23 in
    let v21: Float = v16[0] in
    let v12: [Float] = v13[0] in
    v6[0] = v21 in
    v12
  } in
  let noinline_f0: (s0, [s0], Float) -> Float = (v0: s0, v1: [s0], v2: Float) -> Float {
    let v6: Float = v2 / v2 in
    let v8: s0 = v1[0] in
    let v10: s0 = v1[1] in
    let v44: [[Float]] = v8.p1 in
    let v58: [Float] = v44[0] in
    var v52: Float = v6 in
    let v62: [[Float]] = v10.p1 in
    let v66: [Float] = v62[0] in
    let v107: Float = v66[0] in
    let v57: [Float] = f44(v58) in
    let v65: Float = v52 - v107 in
    let v100: Float = v57[0] in
    let v138: Float = v100 / v65 in
    v138
  } in
  fun loop(i: Int, v0: s0, v1: [s0], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0]], [[2.0]]) in
    let v1: [s0] = [s0([[3.0], [4.0]], [[5.0]]), s0([[6.0], [7.0]], [[8.0]]), s0([[9.0], [10.0]], [[11.0]])] in
    let v2: Float = 12.0 in
    let initialResult: Float = 12.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()