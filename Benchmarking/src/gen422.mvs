  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s3 {
    var p0: [s0]
    var p1: s0
  } in
  struct s5 {
    var p0: s3
    var p1: [s1]
  } in
  struct s6 {
    var p0: [s5]
    var p1: Float
  } in
  let f32: (s5) -> s5 = (v0: s5) -> s5 {
    var v1: s5 = v0 in
    v1
  } in
  let noinline_f0: (s6, Float) -> Float = (v0: s6, v1: Float) -> Float {
    let v7: [s5] = v0.p0 in
    var v14: [s5] = v7 in
    let v13: s5 = v14[1] in
    v14[2] = v13 in
    let v11: s5 = f32(v13) in
    let v25: s6 = s6(v14, v1) in
    let v22: s5 = f32(v11) in
    v14[2] = v11 in
    v14[0] = v22 in
    let v72: Float = v25.p1 in
    v72
  } in
  fun loop(i: Int, v0: s6, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s6 = s6([s5(s3([s0([[0.0]], [[1.0]]), s0([[2.0]], [[3.0]])], s0([[4.0]], [[5.0]])), [s1(s0([[6.0]], [[7.0]]), s0([[8.0]], [[9.0]])), s1(s0([[10.0]], [[11.0]]), s0([[12.0]], [[13.0]])), s1(s0([[14.0]], [[15.0]]), s0([[16.0]], [[17.0]]))]), s5(s3([s0([[18.0]], [[19.0]]), s0([[20.0]], [[21.0]])], s0([[22.0]], [[23.0]])), [s1(s0([[24.0]], [[25.0]]), s0([[26.0]], [[27.0]])), s1(s0([[28.0]], [[29.0]]), s0([[30.0]], [[31.0]])), s1(s0([[32.0]], [[33.0]]), s0([[34.0]], [[35.0]]))]), s5(s3([s0([[36.0]], [[37.0]]), s0([[38.0]], [[39.0]])], s0([[40.0]], [[41.0]])), [s1(s0([[42.0]], [[43.0]]), s0([[44.0]], [[45.0]])), s1(s0([[46.0]], [[47.0]]), s0([[48.0]], [[49.0]])), s1(s0([[50.0]], [[51.0]]), s0([[52.0]], [[53.0]]))])], 54.0) in
    let v1: Float = 55.0 in
    let initialResult: Float = 55.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()