  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let f1: (s0) -> s0 = (v0: s0) -> s0 {
    var v1: s0 = v0 in
    let v6: [[Float]] = v1.p0 in
    let v5: [Float] = v6[1] in
    var v3: [[Float]] = v6 in
    let v7: [[Float]] = v0.p0 in
    let v4: [[Float]] = v1.p1 in
    let v8: [[Float]] = v0.p1 in
    let v9: [[Float]] = v0.p0 in
    let v11: [[[Float]]] = [v8, v4, v8, v8, v4, v8] in
    let v24: [[Float]] = v0.p1 in
    let v14: [[Float]] = v11[5] in
    let v23: [Float] = v6[0] in
    let v20: [[Float]] = v11[1] in
    let v35: [[Float]] = v1.p0 in
    var v39: [[Float]] = v35 in
    var v37: [[Float]] = v39 in
    let v58: s0 = s0(v9, v14) in
    v1.p1 = v24 in
    v1.p1 = v4 in
    let v34: [Float] = v9[1] in
    var v47: s0 = v0 in
    let v25: [[Float]] = v58.p1 in
    let v62: [[Float]] = v0.p0 in
    let v86: [[Float]] = v47.p0 in
    v3[0] = v23 in
    var v19: [[Float]] = v86 in
    var v57: s0 = v1 in
    var v63: s0 = v1 in
    v1.p0 = v19 in
    v63.p0 = v6 in
    let v32: [[Float]] = v58.p1 in
    v57.p0 = v7 in
    v37[0] = v34 in
    v57.p0 = v3 in
    v1.p1 = v25 in
    let v31: [[Float]] = v11[1] in
    let v33: [[Float]] = v63.p1 in
    let v75: s0 = s0(v39, v14) in
    v1.p0 = v7 in
    let v43: [[Float]] = v57.p0 in
    let v214: [[Float]] = v63.p1 in
    v63.p0 = v19 in
    v1.p0 = v62 in
    v47.p1 = v31 in
    var v68: s0 = v57 in
    let v95: [Float] = v32[0] in
    let v60: [[Float]] = v1.p1 in
    v57.p0 = v6 in
    v3[1] = v5 in
    v68.p1 = v214 in
    v57 = v75 in
    v68.p0 = v43 in
    v3[0] = v95 in
    v57.p0 = v37 in
    v1.p1 = v33 in
    v57.p1 = v60 in
    v47.p1 = v20 in
    v68.p1 = v20 in
    v68
  } in
  let noinline_f0: (s0, Float) -> Float = (v0: s0, v1: Float) -> Float {
    let v5: s0 = f1(v0) in
    let v11: [[Float]] = v5.p0 in
    let v13: [[Float]] = v5.p0 in
    var v20: [[Float]] = v11 in
    let v34: [Float] = v20[0] in
    v20 = v13 in
    let v59: Float = v34[0] in
    v59
  } in
  fun loop(i: Int, v0: s0, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0]], [[2.0]]) in
    let v1: Float = 3.0 in
    let initialResult: Float = 3.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()