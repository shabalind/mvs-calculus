  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: [s1]
    var p1: s0
    var p2: s0
    var p3: s0
  }
  struct s3 {
    var p0: [s2]
    var p1: [Double]
  }
  struct s4 {
    var p0: s0
    var p1: [s3]
  }
  struct s9 {
    var p0: [s2]
    var p1: [s4]
  }
  @inline(never)
  func f0(_ v0: s9, _ v1: Double) -> Double {
    let v3: [s4] = v0.p1
    let v5: s4 = v3[0]
    var v10: Double = v1
    let v6: Double = v10 - v1
    var v11: Double = v6
    let v2: [s3] = v5.p1
    let v13: s3 = v2[1]
    let v23: [Double] = v13.p1
    let v51: Double = v23[0]
    let v38: Double = v11 - v51
    return v38
  }
  func benchmark() {
    let v0: s9 = s9(p0: [s2(p0: [s1(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0]]), p1: s0(p0: [[4.0], [5.0]], p1: [[6.0], [7.0]])), s1(p0: s0(p0: [[8.0], [9.0]], p1: [[10.0], [11.0]]), p1: s0(p0: [[12.0], [13.0]], p1: [[14.0], [15.0]])), s1(p0: s0(p0: [[16.0], [17.0]], p1: [[18.0], [19.0]]), p1: s0(p0: [[20.0], [21.0]], p1: [[22.0], [23.0]]))], p1: s0(p0: [[24.0], [25.0]], p1: [[26.0], [27.0]]), p2: s0(p0: [[28.0], [29.0]], p1: [[30.0], [31.0]]), p3: s0(p0: [[32.0], [33.0]], p1: [[34.0], [35.0]])), s2(p0: [s1(p0: s0(p0: [[36.0], [37.0]], p1: [[38.0], [39.0]]), p1: s0(p0: [[40.0], [41.0]], p1: [[42.0], [43.0]])), s1(p0: s0(p0: [[44.0], [45.0]], p1: [[46.0], [47.0]]), p1: s0(p0: [[48.0], [49.0]], p1: [[50.0], [51.0]])), s1(p0: s0(p0: [[52.0], [53.0]], p1: [[54.0], [55.0]]), p1: s0(p0: [[56.0], [57.0]], p1: [[58.0], [59.0]]))], p1: s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0]]), p2: s0(p0: [[64.0], [65.0]], p1: [[66.0], [67.0]]), p3: s0(p0: [[68.0], [69.0]], p1: [[70.0], [71.0]]))], p1: [s4(p0: s0(p0: [[72.0], [73.0]], p1: [[74.0], [75.0]]), p1: [s3(p0: [s2(p0: [s1(p0: s0(p0: [[76.0], [77.0]], p1: [[78.0], [79.0]]), p1: s0(p0: [[80.0], [81.0]], p1: [[82.0], [83.0]])), s1(p0: s0(p0: [[84.0], [85.0]], p1: [[86.0], [87.0]]), p1: s0(p0: [[88.0], [89.0]], p1: [[90.0], [91.0]])), s1(p0: s0(p0: [[92.0], [93.0]], p1: [[94.0], [95.0]]), p1: s0(p0: [[96.0], [97.0]], p1: [[98.0], [99.0]]))], p1: s0(p0: [[100.0], [101.0]], p1: [[102.0], [103.0]]), p2: s0(p0: [[104.0], [105.0]], p1: [[106.0], [107.0]]), p3: s0(p0: [[108.0], [109.0]], p1: [[110.0], [111.0]]))], p1: [112.0]), s3(p0: [s2(p0: [s1(p0: s0(p0: [[113.0], [114.0]], p1: [[115.0], [116.0]]), p1: s0(p0: [[117.0], [118.0]], p1: [[119.0], [120.0]])), s1(p0: s0(p0: [[121.0], [122.0]], p1: [[123.0], [124.0]]), p1: s0(p0: [[125.0], [126.0]], p1: [[127.0], [128.0]])), s1(p0: s0(p0: [[129.0], [130.0]], p1: [[131.0], [132.0]]), p1: s0(p0: [[133.0], [134.0]], p1: [[135.0], [136.0]]))], p1: s0(p0: [[137.0], [138.0]], p1: [[139.0], [140.0]]), p2: s0(p0: [[141.0], [142.0]], p1: [[143.0], [144.0]]), p3: s0(p0: [[145.0], [146.0]], p1: [[147.0], [148.0]]))], p1: [149.0]), s3(p0: [s2(p0: [s1(p0: s0(p0: [[150.0], [151.0]], p1: [[152.0], [153.0]]), p1: s0(p0: [[154.0], [155.0]], p1: [[156.0], [157.0]])), s1(p0: s0(p0: [[158.0], [159.0]], p1: [[160.0], [161.0]]), p1: s0(p0: [[162.0], [163.0]], p1: [[164.0], [165.0]])), s1(p0: s0(p0: [[166.0], [167.0]], p1: [[168.0], [169.0]]), p1: s0(p0: [[170.0], [171.0]], p1: [[172.0], [173.0]]))], p1: s0(p0: [[174.0], [175.0]], p1: [[176.0], [177.0]]), p2: s0(p0: [[178.0], [179.0]], p1: [[180.0], [181.0]]), p3: s0(p0: [[182.0], [183.0]], p1: [[184.0], [185.0]]))], p1: [186.0])]), s4(p0: s0(p0: [[187.0], [188.0]], p1: [[189.0], [190.0]]), p1: [s3(p0: [s2(p0: [s1(p0: s0(p0: [[191.0], [192.0]], p1: [[193.0], [194.0]]), p1: s0(p0: [[195.0], [196.0]], p1: [[197.0], [198.0]])), s1(p0: s0(p0: [[199.0], [200.0]], p1: [[201.0], [202.0]]), p1: s0(p0: [[203.0], [204.0]], p1: [[205.0], [206.0]])), s1(p0: s0(p0: [[207.0], [208.0]], p1: [[209.0], [210.0]]), p1: s0(p0: [[211.0], [212.0]], p1: [[213.0], [214.0]]))], p1: s0(p0: [[215.0], [216.0]], p1: [[217.0], [218.0]]), p2: s0(p0: [[219.0], [220.0]], p1: [[221.0], [222.0]]), p3: s0(p0: [[223.0], [224.0]], p1: [[225.0], [226.0]]))], p1: [227.0]), s3(p0: [s2(p0: [s1(p0: s0(p0: [[228.0], [229.0]], p1: [[230.0], [231.0]]), p1: s0(p0: [[232.0], [233.0]], p1: [[234.0], [235.0]])), s1(p0: s0(p0: [[236.0], [237.0]], p1: [[238.0], [239.0]]), p1: s0(p0: [[240.0], [241.0]], p1: [[242.0], [243.0]])), s1(p0: s0(p0: [[244.0], [245.0]], p1: [[246.0], [247.0]]), p1: s0(p0: [[248.0], [249.0]], p1: [[250.0], [251.0]]))], p1: s0(p0: [[252.0], [253.0]], p1: [[254.0], [255.0]]), p2: s0(p0: [[256.0], [257.0]], p1: [[258.0], [259.0]]), p3: s0(p0: [[260.0], [261.0]], p1: [[262.0], [263.0]]))], p1: [264.0]), s3(p0: [s2(p0: [s1(p0: s0(p0: [[265.0], [266.0]], p1: [[267.0], [268.0]]), p1: s0(p0: [[269.0], [270.0]], p1: [[271.0], [272.0]])), s1(p0: s0(p0: [[273.0], [274.0]], p1: [[275.0], [276.0]]), p1: s0(p0: [[277.0], [278.0]], p1: [[279.0], [280.0]])), s1(p0: s0(p0: [[281.0], [282.0]], p1: [[283.0], [284.0]]), p1: s0(p0: [[285.0], [286.0]], p1: [[287.0], [288.0]]))], p1: s0(p0: [[289.0], [290.0]], p1: [[291.0], [292.0]]), p2: s0(p0: [[293.0], [294.0]], p1: [[295.0], [296.0]]), p3: s0(p0: [[297.0], [298.0]], p1: [[299.0], [300.0]]))], p1: [301.0])])])
    let v1: Double = 302.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 302.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
