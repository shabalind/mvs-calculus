  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s3 {
    var p0: [[s1]]
    var p1: [s0]
  } in
  struct s8 {
    var p0: s0
    var p1: [s3]
  } in
  let f21: (s0) -> s0 = (v0: s0) -> s0 {
    let v7: [[Float]] = v0.p0 in
    let v2: [[Float]] = v0.p1 in
    let v23: s0 = s0(v7, v2) in
    v23
  } in
  let noinline_f0: (s8, Float) -> Float = (v0: s8, v1: Float) -> Float {
    let v4: s0 = v0.p0 in
    var v13: s0 = v4 in
    let v7: s0 = f21(v4) in
    let v5: [[Float]] = v13.p1 in
    let v10: s0 = f21(v7) in
    v13 = v10 in
    let v15: [[[Float]]] = [v5, v5, v5, v5] in
    let v42: [[Float]] = v15[2] in
    let v26: [[Float]] = v10.p0 in
    let v36: [Float] = v42[1] in
    v13.p0 = v26 in
    var v19: [Float] = v36 in
    let v61: [[Float]] = v4.p0 in
    v13.p1 = v5 in
    v13.p0 = v61 in
    v13.p1 = v42 in
    let v158: Float = v19[0] in
    v158
  } in
  fun loop(i: Int, v0: s8, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s8 = s8(s0([[0.0]], [[1.0], [2.0]]), [s3([[s1([s0([[3.0]], [[4.0], [5.0]])], [s0([[6.0]], [[7.0], [8.0]]), s0([[9.0]], [[10.0], [11.0]])])]], [s0([[12.0]], [[13.0], [14.0]]), s0([[15.0]], [[16.0], [17.0]])]), s3([[s1([s0([[18.0]], [[19.0], [20.0]])], [s0([[21.0]], [[22.0], [23.0]]), s0([[24.0]], [[25.0], [26.0]])])]], [s0([[27.0]], [[28.0], [29.0]]), s0([[30.0]], [[31.0], [32.0]])])]) in
    let v1: Float = 33.0 in
    let initialResult: Float = 33.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()