  struct s0 {
    var p0: Float
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: s0
  } in
  struct s3 {
    var p0: s1
    var p1: [s1]
  } in
  struct s4 {
    var p0: s3
    var p1: s2
  } in
  struct s6 {
    var p0: s1
  } in
  struct s8 {
    var p0: [s1]
    var p1: [s1]
    var p2: s2
    var p3: [[s2]]
    var p4: s2
    var p5: s6
    var p6: Float
  } in
  let f88: (s2) -> s2 = (v0: s2) -> s2 {
    var v3: s2 = v0 in
    var v5: s2 = v3 in
    let v2: [s2] = [v3, v3] in
    let v6: [s2] = [v5, v0, v5, v3, v5, v0, v0] in
    v5 = v0 in
    var v1: [s2] = v6 in
    var v8: [s2] = v6 in
    let v7: [s0] = v3.p0 in
    let v14: s0 = v5.p1 in
    v8[5] = v5 in
    var v11: s2 = v5 in
    let v10: Float = v14.p0 in
    let v9: s2 = v2[1] in
    let v12: s0 = v7[1] in
    let v13: [[Float]] = v14.p1 in
    let v19: s0 = s0(v10, v13) in
    v8[2] = v0 in
    v1[0] = v11 in
    v8[4] = v3 in
    let v25: s2 = v6[0] in
    let v17: [s0] = v9.p0 in
    v1[4] = v0 in
    v5.p0 = v17 in
    let v24: s2 = s2(v7, v14) in
    v11.p0 = v7 in
    v8[5] = v25 in
    var v22: s2 = v24 in
    v3.p0 = v17 in
    var v21: [s2] = v1 in
    let v50: [s0] = v24.p0 in
    let v54: s2 = v8[1] in
    var v37: s2 = v54 in
    let v67: s0 = v50[1] in
    let v49: [s0] = v3.p0 in
    var v53: [s2] = v8 in
    v3.p1 = v12 in
    v3.p1 = v19 in
    var v31: s2 = v22 in
    v31.p0 = v49 in
    v37.p0 = v50 in
    v21 = v53 in
    v3.p0 = v50 in
    let v70: s2 = v21[0] in
    v11.p0 = v50 in
    v8[2] = v31 in
    v53[4] = v37 in
    v8[2] = v70 in
    v11.p1 = v67 in
    let v142: [s0] = v5.p0 in
    v3.p0 = v142 in
    v37
  } in
  let f36: (s0) -> s0 = (v0: s0) -> s0 {
    let v6: [[Float]] = v0.p1 in
    var v2: s0 = v0 in
    let v11: Float = v2.p0 in
    let v7: s0 = s0(v11, v6) in
    let v8: [[Float]] = v7.p1 in
    var v3: s0 = v2 in
    v2.p1 = v8 in
    let v22: [s0] = [v3, v2, v2, v2] in
    let v16: s0 = v22[3] in
    v16
  } in
  let f15: (s0, s4) -> s0 = (v0: s0, v1: s4) -> s0 {
    let v4: s0 = f36(v0) in
    let v2: s0 = f36(v4) in
    var v8: s0 = v2 in
    v8 = v2 in
    v8
  } in
  let f1: (s2) -> s2 = (v0: s2) -> s2 {
    var v5: s2 = v0 in
    let v11: s2 = f88(v5) in
    let v38: s2 = f88(v11) in
    v38
  } in
  let noinline_f0: ([s4], [s8], Float) -> Float = (v0: [s4], v1: [s8], v2: Float) -> Float {
    let v7: s4 = v0[0] in
    let v18: s4 = v0[0] in
    let v11: s2 = v7.p1 in
    let v13: s2 = f88(v11) in
    let v14: s2 = f1(v13) in
    let v23: s2 = f88(v14) in
    let v41: [s0] = v23.p0 in
    let v45: s0 = v41[1] in
    let v24: s0 = f15(v45, v18) in
    let v46: [[Float]] = v24.p1 in
    let v58: [Float] = v46[0] in
    let v88: Float = v58[0] in
    v88
  } in
  fun loop(i: Int, v0: [s4], v1: [s8], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s4] = [s4(s3(s1(s0(0.0, [[1.0]]), s0(2.0, [[3.0]])), [s1(s0(4.0, [[5.0]]), s0(6.0, [[7.0]]))]), s2([s0(8.0, [[9.0]]), s0(10.0, [[11.0]])], s0(12.0, [[13.0]]))), s4(s3(s1(s0(14.0, [[15.0]]), s0(16.0, [[17.0]])), [s1(s0(18.0, [[19.0]]), s0(20.0, [[21.0]]))]), s2([s0(22.0, [[23.0]]), s0(24.0, [[25.0]])], s0(26.0, [[27.0]])))] in
    let v1: [s8] = [s8([s1(s0(28.0, [[29.0]]), s0(30.0, [[31.0]])), s1(s0(32.0, [[33.0]]), s0(34.0, [[35.0]]))], [s1(s0(36.0, [[37.0]]), s0(38.0, [[39.0]])), s1(s0(40.0, [[41.0]]), s0(42.0, [[43.0]]))], s2([s0(44.0, [[45.0]]), s0(46.0, [[47.0]])], s0(48.0, [[49.0]])), [[s2([s0(50.0, [[51.0]]), s0(52.0, [[53.0]])], s0(54.0, [[55.0]]))], [s2([s0(56.0, [[57.0]]), s0(58.0, [[59.0]])], s0(60.0, [[61.0]]))], [s2([s0(62.0, [[63.0]]), s0(64.0, [[65.0]])], s0(66.0, [[67.0]]))]], s2([s0(68.0, [[69.0]]), s0(70.0, [[71.0]])], s0(72.0, [[73.0]])), s6(s1(s0(74.0, [[75.0]]), s0(76.0, [[77.0]]))), 78.0), s8([s1(s0(79.0, [[80.0]]), s0(81.0, [[82.0]])), s1(s0(83.0, [[84.0]]), s0(85.0, [[86.0]]))], [s1(s0(87.0, [[88.0]]), s0(89.0, [[90.0]])), s1(s0(91.0, [[92.0]]), s0(93.0, [[94.0]]))], s2([s0(95.0, [[96.0]]), s0(97.0, [[98.0]])], s0(99.0, [[100.0]])), [[s2([s0(101.0, [[102.0]]), s0(103.0, [[104.0]])], s0(105.0, [[106.0]]))], [s2([s0(107.0, [[108.0]]), s0(109.0, [[110.0]])], s0(111.0, [[112.0]]))], [s2([s0(113.0, [[114.0]]), s0(115.0, [[116.0]])], s0(117.0, [[118.0]]))]], s2([s0(119.0, [[120.0]]), s0(121.0, [[122.0]])], s0(123.0, [[124.0]])), s6(s1(s0(125.0, [[126.0]]), s0(127.0, [[128.0]]))), 129.0)] in
    let v2: Float = 130.0 in
    let initialResult: Float = 130.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()