  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [[s1]]
    var p1: [[s0]]
  } in
  struct s3 {
    var p0: [s1]
  } in
  struct s6 {
    var p0: s2
    var p1: [[s1]]
  } in
  struct s10 {
    var p0: s3
  } in
  struct s11 {
    var p0: Float
    var p1: [s6]
  } in
  let f13: (Float) -> Float = (v0: Float) -> Float {
    var v7: Float = v0 in
    var v4: Float = v7 in
    var v6: Float = v7 in
    let v3: [Float] = [v0, v7, v4, v0] in
    let v5: Float = v3[0] in
    let v9: Float = v3[3] in
    var v15: Float = v5 in
    var v20: [Float] = v3 in
    let v16: Float = v20[0] in
    v20[3] = v9 in
    v20[2] = v6 in
    v6 = v15 in
    v16
  } in
  let noinline_f0: (s11, s3, s10, Float) -> Float = (v0: s11, v1: s3, v2: s10, v3: Float) -> Float {
    let v8: Float = f13(v3) in
    let v10: Float = f13(v8) in
    var v14: s11 = v0 in
    v14 = v0 in
    v14.p0 = v10 in
    let v25: Float = v14.p0 in
    v25
  } in
  fun loop(i: Int, v0: s11, v1: s3, v2: s10, v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s11 = s11(0.0, [s6(s2([[s1(s0([[1.0], [2.0], [3.0]], [[4.0], [5.0], [6.0]]), s0([[7.0], [8.0], [9.0]], [[10.0], [11.0], [12.0]]))], [s1(s0([[13.0], [14.0], [15.0]], [[16.0], [17.0], [18.0]]), s0([[19.0], [20.0], [21.0]], [[22.0], [23.0], [24.0]]))]], [[s0([[25.0], [26.0], [27.0]], [[28.0], [29.0], [30.0]])], [s0([[31.0], [32.0], [33.0]], [[34.0], [35.0], [36.0]])], [s0([[37.0], [38.0], [39.0]], [[40.0], [41.0], [42.0]])]]), [[s1(s0([[43.0], [44.0], [45.0]], [[46.0], [47.0], [48.0]]), s0([[49.0], [50.0], [51.0]], [[52.0], [53.0], [54.0]]))], [s1(s0([[55.0], [56.0], [57.0]], [[58.0], [59.0], [60.0]]), s0([[61.0], [62.0], [63.0]], [[64.0], [65.0], [66.0]]))], [s1(s0([[67.0], [68.0], [69.0]], [[70.0], [71.0], [72.0]]), s0([[73.0], [74.0], [75.0]], [[76.0], [77.0], [78.0]]))]])]) in
    let v1: s3 = s3([s1(s0([[79.0], [80.0], [81.0]], [[82.0], [83.0], [84.0]]), s0([[85.0], [86.0], [87.0]], [[88.0], [89.0], [90.0]])), s1(s0([[91.0], [92.0], [93.0]], [[94.0], [95.0], [96.0]]), s0([[97.0], [98.0], [99.0]], [[100.0], [101.0], [102.0]]))]) in
    let v2: s10 = s10(s3([s1(s0([[103.0], [104.0], [105.0]], [[106.0], [107.0], [108.0]]), s0([[109.0], [110.0], [111.0]], [[112.0], [113.0], [114.0]])), s1(s0([[115.0], [116.0], [117.0]], [[118.0], [119.0], [120.0]]), s0([[121.0], [122.0], [123.0]], [[124.0], [125.0], [126.0]]))])) in
    let v3: Float = 127.0 in
    let initialResult: Float = 127.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()