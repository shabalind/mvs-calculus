  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: ([[s0]], Float) -> Float = (v0: [[s0]], v1: Float) -> Float {
    let v3: [s0] = v0[0] in
    let v2: s0 = v3[0] in
    let v5: [[Float]] = v2.p0 in
    let v18: [[Float]] = v2.p0 in
    let v17: s0 = v3[0] in
    let v38: [Float] = v18[0] in
    let v21: [Float] = v5[1] in
    let v20: [[Float]] = v17.p1 in
    var v39: [[Float]] = v20 in
    v39[0] = v21 in
    let v29: [Float] = v39[0] in
    v39[0] = v38 in
    let v111: Float = v29[0] in
    let v323: Float = v111 + v1 in
    v323
  } in
  fun loop(i: Int, v0: [[s0]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s0]] = [[s0([[0.0], [1.0]], [[2.0]])]] in
    let v1: Float = 3.0 in
    let initialResult: Float = 3.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()