  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  let f29: (s1) -> s1 = (v0: s1) -> s1 {
    var v7: s1 = v0 in
    var v1: s1 = v7 in
    var v5: s1 = v1 in
    let v2: s0 = v0.p1 in
    let v3: s0 = v5.p1 in
    var v6: s0 = v3 in
    let v10: [[Float]] = v2.p0 in
    v1.p1 = v6 in
    var v12: s0 = v3 in
    var v16: s0 = v12 in
    let v20: [[Float]] = v3.p1 in
    let v28: [[Float]] = v6.p1 in
    var v21: s1 = v7 in
    let v22: s1 = s1(v12, v16) in
    let v52: [[Float]] = v2.p1 in
    v5.p0 = v2 in
    let v31: s0 = v21.p1 in
    let v44: s0 = v0.p0 in
    let v37: [Float] = v52[0] in
    let v43: s0 = v22.p0 in
    var v23: [[Float]] = v10 in
    let v30: [[Float]] = v31.p0 in
    v23[0] = v37 in
    let v46: s0 = s0(v30, v20) in
    v21.p0 = v46 in
    var v32: s1 = v22 in
    let v51: [[Float]] = v44.p1 in
    let v72: s0 = v0.p0 in
    v21.p0 = v6 in
    v32.p1 = v31 in
    var v115: s0 = v46 in
    let v45: [[Float]] = v31.p1 in
    v7.p0 = v6 in
    let v129: [[Float]] = v43.p1 in
    let v79: [[[Float]]] = [v20, v28, v51, v129, v52, v45, v129] in
    v6 = v115 in
    v12.p1 = v52 in
    let v65: [[Float]] = v79[0] in
    v6.p0 = v23 in
    v115.p1 = v65 in
    v12 = v16 in
    v5.p1 = v72 in
    v5.p0 = v43 in
    v32
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    let v7: s1 = f29(v0) in
    let v3: s0 = v7.p0 in
    let v4: [Float] = [v1, v1, v1, v1] in
    let v2: Float = v4[1] in
    let v6: [[Float]] = v3.p1 in
    let v16: [Float] = v6[1] in
    var v74: [Float] = v16 in
    v74[0] = v2 in
    let v143: Float = v74[0] in
    v143
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1(s0([[0.0]], [[1.0], [2.0], [3.0]]), s0([[4.0]], [[5.0], [6.0], [7.0]])) in
    let v1: Float = 8.0 in
    let initialResult: Float = 8.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()