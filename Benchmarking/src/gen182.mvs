  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  } in
  struct s2 {
    var p0: s0
    var p1: [s1]
  } in
  struct s8 {
    var p0: s2
    var p1: [[s1]]
  } in
  struct s9 {
    var p0: [s0]
    var p1: s8
  } in
  let f11: (Float) -> Float = (v0: Float) -> Float {
    var v6: Float = v0 in
    var v1: Float = v6 in
    var v7: Float = v1 in
    var v9: Float = v0 in
    var v5: Float = v6 in
    var v10: Float = v6 in
    var v12: Float = v5 in
    var v8: Float = v10 in
    var v14: Float = v9 in
    var v17: Float = v7 in
    var v13: Float = v8 in
    let v25: [Float] = [v14, v17, v0, v12, v13, v17] in
    var v33: [Float] = v25 in
    let v22: [[Float]] = [v25, v33, v33] in
    let v52: [Float] = v22[0] in
    let v70: Float = v52[0] in
    v70
  } in
  let noinline_f0: ([s9], Float) -> Float = (v0: [s9], v1: Float) -> Float {
    var v5: Float = v1 in
    let v15: Float = f11(v5) in
    let v20: Float = f11(v1) in
    var v22: Float = v5 in
    let v54: Float = f11(v22) in
    let v29: Float = v1 + v20 in
    v22 = v15 in
    let v42: Float = f11(v54) in
    let v78: Float = f11(v42) in
    v22 = v29 in
    let v198: Float = f11(v78) in
    v198
  } in
  fun loop(i: Int, v0: [s9], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s9] = [s9([s0([[0.0], [1.0]], [[2.0], [3.0]]), s0([[4.0], [5.0]], [[6.0], [7.0]])], s8(s2(s0([[8.0], [9.0]], [[10.0], [11.0]]), [s1([[s0([[12.0], [13.0]], [[14.0], [15.0]])], [s0([[16.0], [17.0]], [[18.0], [19.0]])], [s0([[20.0], [21.0]], [[22.0], [23.0]])]], s0([[24.0], [25.0]], [[26.0], [27.0]])), s1([[s0([[28.0], [29.0]], [[30.0], [31.0]])], [s0([[32.0], [33.0]], [[34.0], [35.0]])], [s0([[36.0], [37.0]], [[38.0], [39.0]])]], s0([[40.0], [41.0]], [[42.0], [43.0]])), s1([[s0([[44.0], [45.0]], [[46.0], [47.0]])], [s0([[48.0], [49.0]], [[50.0], [51.0]])], [s0([[52.0], [53.0]], [[54.0], [55.0]])]], s0([[56.0], [57.0]], [[58.0], [59.0]]))]), [[s1([[s0([[60.0], [61.0]], [[62.0], [63.0]])], [s0([[64.0], [65.0]], [[66.0], [67.0]])], [s0([[68.0], [69.0]], [[70.0], [71.0]])]], s0([[72.0], [73.0]], [[74.0], [75.0]]))], [s1([[s0([[76.0], [77.0]], [[78.0], [79.0]])], [s0([[80.0], [81.0]], [[82.0], [83.0]])], [s0([[84.0], [85.0]], [[86.0], [87.0]])]], s0([[88.0], [89.0]], [[90.0], [91.0]]))]]))] in
    let v1: Float = 92.0 in
    let initialResult: Float = 92.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()