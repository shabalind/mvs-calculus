  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s4 {
    var p0: s1
  } in
  struct s9 {
    var p0: [[s1]]
    var p1: [s1]
  } in
  struct s11 {
    var p0: s9
    var p1: s4
  } in
  struct s12 {
    var p0: [[s4]]
    var p1: s9
  } in
  let f20: (Float) -> Float = (v0: Float) -> Float {
    var v5: Float = v0 in
    let v4: [Float] = [v0, v0] in
    var v1: Float = v5 in
    var v12: [Float] = v4 in
    let v9: Float = v4[1] in
    var v7: [Float] = v4 in
    v12[0] = v1 in
    var v25: [Float] = v7 in
    let v10: [[Float]] = [v25, v7, v12, v25] in
    var v17: [[Float]] = v10 in
    var v15: [[Float]] = v17 in
    v15[1] = v7 in
    v15 = v10 in
    var v41: [[Float]] = v17 in
    let v27: [Float] = v10[3] in
    v17[0] = v27 in
    var v46: [[Float]] = v41 in
    v15 = v46 in
    v25[0] = v9 in
    let v48: [Float] = v15[3] in
    v41[0] = v12 in
    v15[3] = v48 in
    let v47: Float = v48[0] in
    v47
  } in
  let noinline_f0: ([[s11]], s12, Float) -> Float = (v0: [[s11]], v1: s12, v2: Float) -> Float {
    let v11: Float = f20(v2) in
    let v15: Float = f20(v11) in
    let v20: Float = f20(v15) in
    v20
  } in
  fun loop(i: Int, v0: [[s11]], v1: s12, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s11]] = [[s11(s9([[s1([s0([[0.0], [1.0]], [[2.0]]), s0([[3.0], [4.0]], [[5.0]]), s0([[6.0], [7.0]], [[8.0]])], s0([[9.0], [10.0]], [[11.0]]))]], [s1([s0([[12.0], [13.0]], [[14.0]]), s0([[15.0], [16.0]], [[17.0]]), s0([[18.0], [19.0]], [[20.0]])], s0([[21.0], [22.0]], [[23.0]])), s1([s0([[24.0], [25.0]], [[26.0]]), s0([[27.0], [28.0]], [[29.0]]), s0([[30.0], [31.0]], [[32.0]])], s0([[33.0], [34.0]], [[35.0]]))]), s4(s1([s0([[36.0], [37.0]], [[38.0]]), s0([[39.0], [40.0]], [[41.0]]), s0([[42.0], [43.0]], [[44.0]])], s0([[45.0], [46.0]], [[47.0]]))))], [s11(s9([[s1([s0([[48.0], [49.0]], [[50.0]]), s0([[51.0], [52.0]], [[53.0]]), s0([[54.0], [55.0]], [[56.0]])], s0([[57.0], [58.0]], [[59.0]]))]], [s1([s0([[60.0], [61.0]], [[62.0]]), s0([[63.0], [64.0]], [[65.0]]), s0([[66.0], [67.0]], [[68.0]])], s0([[69.0], [70.0]], [[71.0]])), s1([s0([[72.0], [73.0]], [[74.0]]), s0([[75.0], [76.0]], [[77.0]]), s0([[78.0], [79.0]], [[80.0]])], s0([[81.0], [82.0]], [[83.0]]))]), s4(s1([s0([[84.0], [85.0]], [[86.0]]), s0([[87.0], [88.0]], [[89.0]]), s0([[90.0], [91.0]], [[92.0]])], s0([[93.0], [94.0]], [[95.0]]))))], [s11(s9([[s1([s0([[96.0], [97.0]], [[98.0]]), s0([[99.0], [100.0]], [[101.0]]), s0([[102.0], [103.0]], [[104.0]])], s0([[105.0], [106.0]], [[107.0]]))]], [s1([s0([[108.0], [109.0]], [[110.0]]), s0([[111.0], [112.0]], [[113.0]]), s0([[114.0], [115.0]], [[116.0]])], s0([[117.0], [118.0]], [[119.0]])), s1([s0([[120.0], [121.0]], [[122.0]]), s0([[123.0], [124.0]], [[125.0]]), s0([[126.0], [127.0]], [[128.0]])], s0([[129.0], [130.0]], [[131.0]]))]), s4(s1([s0([[132.0], [133.0]], [[134.0]]), s0([[135.0], [136.0]], [[137.0]]), s0([[138.0], [139.0]], [[140.0]])], s0([[141.0], [142.0]], [[143.0]]))))]] in
    let v1: s12 = s12([[s4(s1([s0([[144.0], [145.0]], [[146.0]]), s0([[147.0], [148.0]], [[149.0]]), s0([[150.0], [151.0]], [[152.0]])], s0([[153.0], [154.0]], [[155.0]])))], [s4(s1([s0([[156.0], [157.0]], [[158.0]]), s0([[159.0], [160.0]], [[161.0]]), s0([[162.0], [163.0]], [[164.0]])], s0([[165.0], [166.0]], [[167.0]])))]], s9([[s1([s0([[168.0], [169.0]], [[170.0]]), s0([[171.0], [172.0]], [[173.0]]), s0([[174.0], [175.0]], [[176.0]])], s0([[177.0], [178.0]], [[179.0]]))]], [s1([s0([[180.0], [181.0]], [[182.0]]), s0([[183.0], [184.0]], [[185.0]]), s0([[186.0], [187.0]], [[188.0]])], s0([[189.0], [190.0]], [[191.0]])), s1([s0([[192.0], [193.0]], [[194.0]]), s0([[195.0], [196.0]], [[197.0]]), s0([[198.0], [199.0]], [[200.0]])], s0([[201.0], [202.0]], [[203.0]]))])) in
    let v2: Float = 204.0 in
    let initialResult: Float = 204.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()