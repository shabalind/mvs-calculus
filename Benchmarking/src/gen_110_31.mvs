  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s3 {
    var p0: s0
    var p1: [[s0]]
  } in
  let noinline_f0: (s3, Float) -> Float = (v0: s3, v1: Float) -> Float {
    var v2: Float = v1 in
    let v7: Float = v1 * v2 in
    v2 = v1 in
    v2 = v7 in
    var v34: Float = v1 in
    let v58: Float = v7 - v34 in
    let v41: Float = v2 - v7 in
    var v202: Float = v58 in
    let v83: Float = v41 + v41 in
    let v63: Float = v83 - v202 in
    v63
  } in
  fun loop(i: Int, v0: s3, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(s0([[0.0]], [[1.0], [2.0]]), [[s0([[3.0]], [[4.0], [5.0]])], [s0([[6.0]], [[7.0], [8.0]])]]) in
    let v1: Float = 9.0 in
    let initialResult: Float = 9.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()