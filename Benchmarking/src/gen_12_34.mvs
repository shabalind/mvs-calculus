  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: [s1]
  } in
  let noinline_f0: (s2, Float) -> Float = (v0: s2, v1: Float) -> Float {
    var v8: Float = v1 in
    var v5: Float = v8 in
    let v17: Float = v8 * v8 in
    v8 = v17 in
    let v40: Float = v8 * v17 in
    let v41: [Float] = [v1, v40, v1, v1] in
    let v18: Float = v8 - v5 in
    var v16: [Float] = v41 in
    v16[3] = v18 in
    v16[1] = v18 in
    let v42: Float = v18 - v8 in
    v16[2] = v42 in
    v16[0] = v5 in
    v16[0] = v42 in
    v16[1] = v8 in
    v16 = v41 in
    v16[3] = v1 in
    v16[3] = v1 in
    var v65: Float = v18 in
    var v37: [Float] = v41 in
    v37[2] = v42 in
    v37 = v16 in
    v16[1] = v17 in
    v37[2] = v40 in
    v37[0] = v65 in
    v37[1] = v8 in
    let v82: Float = v37[1] in
    v82
  } in
  fun loop(i: Int, v0: s2, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2([s0([[0.0]], [[1.0], [2.0]])], [s1(s0([[3.0]], [[4.0], [5.0]]), s0([[6.0]], [[7.0], [8.0]])), s1(s0([[9.0]], [[10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0]])), s1(s0([[15.0]], [[16.0], [17.0]]), s0([[18.0]], [[19.0], [20.0]]))]) in
    let v1: Float = 21.0 in
    let initialResult: Float = 21.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()