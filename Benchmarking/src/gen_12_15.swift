  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s3 {
    var p0: [[s1]]
    var p1: [s1]
    var p2: [s1]
  }
  struct s5 {
    var p0: s0
    var p1: s1
  }
  struct s12 {
    var p0: [s5]
    var p1: [[s3]]
  }
  @inline(never)
  func f0(_ v0: [s12], _ v1: Double) -> Double {
    let v20: s12 = v0[1]
    let v21: [s5] = v20.p0
    let v35: s5 = v21[0]
    let v18: s1 = v35.p1
    var v16: s5 = v35
    let v22: s5 = v21[0]
    let v34: s0 = v22.p0
    var v28: s0 = v34
    var v41: s5 = v16
    let v50: s1 = v16.p1
    let v32: [s0] = v18.p1
    var v54: s1 = v50
    let v40: [s0] = v50.p1
    let v68: s0 = v41.p0
    v41.p0 = v28
    var v67: s0 = v28
    v54.p1 = v40
    v16.p0 = v67
    v16 = v41
    v16.p1 = v54
    v54.p1 = v32
    let v260: [[Double]] = v68.p0
    let v117: [Double] = v260[0]
    let v140: Double = v117[0]
    v28.p0 = v260
    v16.p1 = v18
    v16.p1 = v54
    return v140
  }
  func benchmark() {
    let v0: [s12] = [s12(p0: [s5(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0]]), p1: s1(p0: [s0(p0: [[3.0], [4.0]], p1: [[5.0]]), s0(p0: [[6.0], [7.0]], p1: [[8.0]])], p1: [s0(p0: [[9.0], [10.0]], p1: [[11.0]]), s0(p0: [[12.0], [13.0]], p1: [[14.0]]), s0(p0: [[15.0], [16.0]], p1: [[17.0]])]))], p1: [[s3(p0: [[s1(p0: [s0(p0: [[18.0], [19.0]], p1: [[20.0]]), s0(p0: [[21.0], [22.0]], p1: [[23.0]])], p1: [s0(p0: [[24.0], [25.0]], p1: [[26.0]]), s0(p0: [[27.0], [28.0]], p1: [[29.0]]), s0(p0: [[30.0], [31.0]], p1: [[32.0]])])], [s1(p0: [s0(p0: [[33.0], [34.0]], p1: [[35.0]]), s0(p0: [[36.0], [37.0]], p1: [[38.0]])], p1: [s0(p0: [[39.0], [40.0]], p1: [[41.0]]), s0(p0: [[42.0], [43.0]], p1: [[44.0]]), s0(p0: [[45.0], [46.0]], p1: [[47.0]])])]], p1: [s1(p0: [s0(p0: [[48.0], [49.0]], p1: [[50.0]]), s0(p0: [[51.0], [52.0]], p1: [[53.0]])], p1: [s0(p0: [[54.0], [55.0]], p1: [[56.0]]), s0(p0: [[57.0], [58.0]], p1: [[59.0]]), s0(p0: [[60.0], [61.0]], p1: [[62.0]])])], p2: [s1(p0: [s0(p0: [[63.0], [64.0]], p1: [[65.0]]), s0(p0: [[66.0], [67.0]], p1: [[68.0]])], p1: [s0(p0: [[69.0], [70.0]], p1: [[71.0]]), s0(p0: [[72.0], [73.0]], p1: [[74.0]]), s0(p0: [[75.0], [76.0]], p1: [[77.0]])]), s1(p0: [s0(p0: [[78.0], [79.0]], p1: [[80.0]]), s0(p0: [[81.0], [82.0]], p1: [[83.0]])], p1: [s0(p0: [[84.0], [85.0]], p1: [[86.0]]), s0(p0: [[87.0], [88.0]], p1: [[89.0]]), s0(p0: [[90.0], [91.0]], p1: [[92.0]])]), s1(p0: [s0(p0: [[93.0], [94.0]], p1: [[95.0]]), s0(p0: [[96.0], [97.0]], p1: [[98.0]])], p1: [s0(p0: [[99.0], [100.0]], p1: [[101.0]]), s0(p0: [[102.0], [103.0]], p1: [[104.0]]), s0(p0: [[105.0], [106.0]], p1: [[107.0]])])])]]), s12(p0: [s5(p0: s0(p0: [[108.0], [109.0]], p1: [[110.0]]), p1: s1(p0: [s0(p0: [[111.0], [112.0]], p1: [[113.0]]), s0(p0: [[114.0], [115.0]], p1: [[116.0]])], p1: [s0(p0: [[117.0], [118.0]], p1: [[119.0]]), s0(p0: [[120.0], [121.0]], p1: [[122.0]]), s0(p0: [[123.0], [124.0]], p1: [[125.0]])]))], p1: [[s3(p0: [[s1(p0: [s0(p0: [[126.0], [127.0]], p1: [[128.0]]), s0(p0: [[129.0], [130.0]], p1: [[131.0]])], p1: [s0(p0: [[132.0], [133.0]], p1: [[134.0]]), s0(p0: [[135.0], [136.0]], p1: [[137.0]]), s0(p0: [[138.0], [139.0]], p1: [[140.0]])])], [s1(p0: [s0(p0: [[141.0], [142.0]], p1: [[143.0]]), s0(p0: [[144.0], [145.0]], p1: [[146.0]])], p1: [s0(p0: [[147.0], [148.0]], p1: [[149.0]]), s0(p0: [[150.0], [151.0]], p1: [[152.0]]), s0(p0: [[153.0], [154.0]], p1: [[155.0]])])]], p1: [s1(p0: [s0(p0: [[156.0], [157.0]], p1: [[158.0]]), s0(p0: [[159.0], [160.0]], p1: [[161.0]])], p1: [s0(p0: [[162.0], [163.0]], p1: [[164.0]]), s0(p0: [[165.0], [166.0]], p1: [[167.0]]), s0(p0: [[168.0], [169.0]], p1: [[170.0]])])], p2: [s1(p0: [s0(p0: [[171.0], [172.0]], p1: [[173.0]]), s0(p0: [[174.0], [175.0]], p1: [[176.0]])], p1: [s0(p0: [[177.0], [178.0]], p1: [[179.0]]), s0(p0: [[180.0], [181.0]], p1: [[182.0]]), s0(p0: [[183.0], [184.0]], p1: [[185.0]])]), s1(p0: [s0(p0: [[186.0], [187.0]], p1: [[188.0]]), s0(p0: [[189.0], [190.0]], p1: [[191.0]])], p1: [s0(p0: [[192.0], [193.0]], p1: [[194.0]]), s0(p0: [[195.0], [196.0]], p1: [[197.0]]), s0(p0: [[198.0], [199.0]], p1: [[200.0]])]), s1(p0: [s0(p0: [[201.0], [202.0]], p1: [[203.0]]), s0(p0: [[204.0], [205.0]], p1: [[206.0]])], p1: [s0(p0: [[207.0], [208.0]], p1: [[209.0]]), s0(p0: [[210.0], [211.0]], p1: [[212.0]]), s0(p0: [[213.0], [214.0]], p1: [[215.0]])])])]])]
    let v1: Double = 216.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 216.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
