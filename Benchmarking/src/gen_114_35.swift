  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: s1
    var p1: s0
  }
  struct s3 {
    var p0: s1
    var p1: s0
  }
  struct s4 {
    var p0: s0
    var p1: s2
    var p2: [s1]
  }
  struct s5 {
    var p0: s1
    var p1: Double
    var p2: s2
  }
  struct s7 {
    var p0: [s4]
    var p1: [s5]
  }
  struct s9 {
    var p0: [[s5]]
    var p1: s3
  }
  struct s11 {
    var p0: [s9]
    var p1: [s5]
    var p2: [s7]
    var p3: [[s5]]
    var p4: s7
    var p5: s7
  }
  @inline(never)
  func f0(_ v0: s11, _ v1: Double) -> Double {
    var v7: s11 = v0
    let v3: [s5] = v7.p1
    let v5: [[s5]] = v7.p3
    let v8: s7 = v7.p4
    v7.p5 = v8
    v7.p1 = v3
    let v23: s5 = v3[0]
    v7.p4 = v8
    let v18: s1 = v23.p0
    let v42: [s0] = v18.p1
    v7.p3 = v5
    let v29: s0 = v42[1]
    let v44: s0 = v18.p0
    let v49: [[Double]] = v44.p1
    let v122: s0 = v42[0]
    var v84: s0 = v29
    let v60: [Double] = v49[0]
    let v135: [[Double]] = v84.p1
    v84 = v122
    let v116: [Double] = v135[0]
    let v217: Double = v60[0]
    let v176: Double = v116[0]
    let v140: Double = v176 / v217
    return v140
  }
  func benchmark() {
    let v0: s11 = s11(p0: [s9(p0: [[s5(p0: s1(p0: s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0]]), p1: [s0(p0: [[4.0], [5.0], [6.0]], p1: [[7.0]]), s0(p0: [[8.0], [9.0], [10.0]], p1: [[11.0]])]), p1: 12.0, p2: s2(p0: s1(p0: s0(p0: [[13.0], [14.0], [15.0]], p1: [[16.0]]), p1: [s0(p0: [[17.0], [18.0], [19.0]], p1: [[20.0]]), s0(p0: [[21.0], [22.0], [23.0]], p1: [[24.0]])]), p1: s0(p0: [[25.0], [26.0], [27.0]], p1: [[28.0]])))], [s5(p0: s1(p0: s0(p0: [[29.0], [30.0], [31.0]], p1: [[32.0]]), p1: [s0(p0: [[33.0], [34.0], [35.0]], p1: [[36.0]]), s0(p0: [[37.0], [38.0], [39.0]], p1: [[40.0]])]), p1: 41.0, p2: s2(p0: s1(p0: s0(p0: [[42.0], [43.0], [44.0]], p1: [[45.0]]), p1: [s0(p0: [[46.0], [47.0], [48.0]], p1: [[49.0]]), s0(p0: [[50.0], [51.0], [52.0]], p1: [[53.0]])]), p1: s0(p0: [[54.0], [55.0], [56.0]], p1: [[57.0]])))], [s5(p0: s1(p0: s0(p0: [[58.0], [59.0], [60.0]], p1: [[61.0]]), p1: [s0(p0: [[62.0], [63.0], [64.0]], p1: [[65.0]]), s0(p0: [[66.0], [67.0], [68.0]], p1: [[69.0]])]), p1: 70.0, p2: s2(p0: s1(p0: s0(p0: [[71.0], [72.0], [73.0]], p1: [[74.0]]), p1: [s0(p0: [[75.0], [76.0], [77.0]], p1: [[78.0]]), s0(p0: [[79.0], [80.0], [81.0]], p1: [[82.0]])]), p1: s0(p0: [[83.0], [84.0], [85.0]], p1: [[86.0]])))]], p1: s3(p0: s1(p0: s0(p0: [[87.0], [88.0], [89.0]], p1: [[90.0]]), p1: [s0(p0: [[91.0], [92.0], [93.0]], p1: [[94.0]]), s0(p0: [[95.0], [96.0], [97.0]], p1: [[98.0]])]), p1: s0(p0: [[99.0], [100.0], [101.0]], p1: [[102.0]])))], p1: [s5(p0: s1(p0: s0(p0: [[103.0], [104.0], [105.0]], p1: [[106.0]]), p1: [s0(p0: [[107.0], [108.0], [109.0]], p1: [[110.0]]), s0(p0: [[111.0], [112.0], [113.0]], p1: [[114.0]])]), p1: 115.0, p2: s2(p0: s1(p0: s0(p0: [[116.0], [117.0], [118.0]], p1: [[119.0]]), p1: [s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0]]), s0(p0: [[124.0], [125.0], [126.0]], p1: [[127.0]])]), p1: s0(p0: [[128.0], [129.0], [130.0]], p1: [[131.0]])))], p2: [s7(p0: [s4(p0: s0(p0: [[132.0], [133.0], [134.0]], p1: [[135.0]]), p1: s2(p0: s1(p0: s0(p0: [[136.0], [137.0], [138.0]], p1: [[139.0]]), p1: [s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0]]), s0(p0: [[144.0], [145.0], [146.0]], p1: [[147.0]])]), p1: s0(p0: [[148.0], [149.0], [150.0]], p1: [[151.0]])), p2: [s1(p0: s0(p0: [[152.0], [153.0], [154.0]], p1: [[155.0]]), p1: [s0(p0: [[156.0], [157.0], [158.0]], p1: [[159.0]]), s0(p0: [[160.0], [161.0], [162.0]], p1: [[163.0]])])]), s4(p0: s0(p0: [[164.0], [165.0], [166.0]], p1: [[167.0]]), p1: s2(p0: s1(p0: s0(p0: [[168.0], [169.0], [170.0]], p1: [[171.0]]), p1: [s0(p0: [[172.0], [173.0], [174.0]], p1: [[175.0]]), s0(p0: [[176.0], [177.0], [178.0]], p1: [[179.0]])]), p1: s0(p0: [[180.0], [181.0], [182.0]], p1: [[183.0]])), p2: [s1(p0: s0(p0: [[184.0], [185.0], [186.0]], p1: [[187.0]]), p1: [s0(p0: [[188.0], [189.0], [190.0]], p1: [[191.0]]), s0(p0: [[192.0], [193.0], [194.0]], p1: [[195.0]])])])], p1: [s5(p0: s1(p0: s0(p0: [[196.0], [197.0], [198.0]], p1: [[199.0]]), p1: [s0(p0: [[200.0], [201.0], [202.0]], p1: [[203.0]]), s0(p0: [[204.0], [205.0], [206.0]], p1: [[207.0]])]), p1: 208.0, p2: s2(p0: s1(p0: s0(p0: [[209.0], [210.0], [211.0]], p1: [[212.0]]), p1: [s0(p0: [[213.0], [214.0], [215.0]], p1: [[216.0]]), s0(p0: [[217.0], [218.0], [219.0]], p1: [[220.0]])]), p1: s0(p0: [[221.0], [222.0], [223.0]], p1: [[224.0]])))]), s7(p0: [s4(p0: s0(p0: [[225.0], [226.0], [227.0]], p1: [[228.0]]), p1: s2(p0: s1(p0: s0(p0: [[229.0], [230.0], [231.0]], p1: [[232.0]]), p1: [s0(p0: [[233.0], [234.0], [235.0]], p1: [[236.0]]), s0(p0: [[237.0], [238.0], [239.0]], p1: [[240.0]])]), p1: s0(p0: [[241.0], [242.0], [243.0]], p1: [[244.0]])), p2: [s1(p0: s0(p0: [[245.0], [246.0], [247.0]], p1: [[248.0]]), p1: [s0(p0: [[249.0], [250.0], [251.0]], p1: [[252.0]]), s0(p0: [[253.0], [254.0], [255.0]], p1: [[256.0]])])]), s4(p0: s0(p0: [[257.0], [258.0], [259.0]], p1: [[260.0]]), p1: s2(p0: s1(p0: s0(p0: [[261.0], [262.0], [263.0]], p1: [[264.0]]), p1: [s0(p0: [[265.0], [266.0], [267.0]], p1: [[268.0]]), s0(p0: [[269.0], [270.0], [271.0]], p1: [[272.0]])]), p1: s0(p0: [[273.0], [274.0], [275.0]], p1: [[276.0]])), p2: [s1(p0: s0(p0: [[277.0], [278.0], [279.0]], p1: [[280.0]]), p1: [s0(p0: [[281.0], [282.0], [283.0]], p1: [[284.0]]), s0(p0: [[285.0], [286.0], [287.0]], p1: [[288.0]])])])], p1: [s5(p0: s1(p0: s0(p0: [[289.0], [290.0], [291.0]], p1: [[292.0]]), p1: [s0(p0: [[293.0], [294.0], [295.0]], p1: [[296.0]]), s0(p0: [[297.0], [298.0], [299.0]], p1: [[300.0]])]), p1: 301.0, p2: s2(p0: s1(p0: s0(p0: [[302.0], [303.0], [304.0]], p1: [[305.0]]), p1: [s0(p0: [[306.0], [307.0], [308.0]], p1: [[309.0]]), s0(p0: [[310.0], [311.0], [312.0]], p1: [[313.0]])]), p1: s0(p0: [[314.0], [315.0], [316.0]], p1: [[317.0]])))]), s7(p0: [s4(p0: s0(p0: [[318.0], [319.0], [320.0]], p1: [[321.0]]), p1: s2(p0: s1(p0: s0(p0: [[322.0], [323.0], [324.0]], p1: [[325.0]]), p1: [s0(p0: [[326.0], [327.0], [328.0]], p1: [[329.0]]), s0(p0: [[330.0], [331.0], [332.0]], p1: [[333.0]])]), p1: s0(p0: [[334.0], [335.0], [336.0]], p1: [[337.0]])), p2: [s1(p0: s0(p0: [[338.0], [339.0], [340.0]], p1: [[341.0]]), p1: [s0(p0: [[342.0], [343.0], [344.0]], p1: [[345.0]]), s0(p0: [[346.0], [347.0], [348.0]], p1: [[349.0]])])]), s4(p0: s0(p0: [[350.0], [351.0], [352.0]], p1: [[353.0]]), p1: s2(p0: s1(p0: s0(p0: [[354.0], [355.0], [356.0]], p1: [[357.0]]), p1: [s0(p0: [[358.0], [359.0], [360.0]], p1: [[361.0]]), s0(p0: [[362.0], [363.0], [364.0]], p1: [[365.0]])]), p1: s0(p0: [[366.0], [367.0], [368.0]], p1: [[369.0]])), p2: [s1(p0: s0(p0: [[370.0], [371.0], [372.0]], p1: [[373.0]]), p1: [s0(p0: [[374.0], [375.0], [376.0]], p1: [[377.0]]), s0(p0: [[378.0], [379.0], [380.0]], p1: [[381.0]])])])], p1: [s5(p0: s1(p0: s0(p0: [[382.0], [383.0], [384.0]], p1: [[385.0]]), p1: [s0(p0: [[386.0], [387.0], [388.0]], p1: [[389.0]]), s0(p0: [[390.0], [391.0], [392.0]], p1: [[393.0]])]), p1: 394.0, p2: s2(p0: s1(p0: s0(p0: [[395.0], [396.0], [397.0]], p1: [[398.0]]), p1: [s0(p0: [[399.0], [400.0], [401.0]], p1: [[402.0]]), s0(p0: [[403.0], [404.0], [405.0]], p1: [[406.0]])]), p1: s0(p0: [[407.0], [408.0], [409.0]], p1: [[410.0]])))])], p3: [[s5(p0: s1(p0: s0(p0: [[411.0], [412.0], [413.0]], p1: [[414.0]]), p1: [s0(p0: [[415.0], [416.0], [417.0]], p1: [[418.0]]), s0(p0: [[419.0], [420.0], [421.0]], p1: [[422.0]])]), p1: 423.0, p2: s2(p0: s1(p0: s0(p0: [[424.0], [425.0], [426.0]], p1: [[427.0]]), p1: [s0(p0: [[428.0], [429.0], [430.0]], p1: [[431.0]]), s0(p0: [[432.0], [433.0], [434.0]], p1: [[435.0]])]), p1: s0(p0: [[436.0], [437.0], [438.0]], p1: [[439.0]])))], [s5(p0: s1(p0: s0(p0: [[440.0], [441.0], [442.0]], p1: [[443.0]]), p1: [s0(p0: [[444.0], [445.0], [446.0]], p1: [[447.0]]), s0(p0: [[448.0], [449.0], [450.0]], p1: [[451.0]])]), p1: 452.0, p2: s2(p0: s1(p0: s0(p0: [[453.0], [454.0], [455.0]], p1: [[456.0]]), p1: [s0(p0: [[457.0], [458.0], [459.0]], p1: [[460.0]]), s0(p0: [[461.0], [462.0], [463.0]], p1: [[464.0]])]), p1: s0(p0: [[465.0], [466.0], [467.0]], p1: [[468.0]])))]], p4: s7(p0: [s4(p0: s0(p0: [[469.0], [470.0], [471.0]], p1: [[472.0]]), p1: s2(p0: s1(p0: s0(p0: [[473.0], [474.0], [475.0]], p1: [[476.0]]), p1: [s0(p0: [[477.0], [478.0], [479.0]], p1: [[480.0]]), s0(p0: [[481.0], [482.0], [483.0]], p1: [[484.0]])]), p1: s0(p0: [[485.0], [486.0], [487.0]], p1: [[488.0]])), p2: [s1(p0: s0(p0: [[489.0], [490.0], [491.0]], p1: [[492.0]]), p1: [s0(p0: [[493.0], [494.0], [495.0]], p1: [[496.0]]), s0(p0: [[497.0], [498.0], [499.0]], p1: [[500.0]])])]), s4(p0: s0(p0: [[501.0], [502.0], [503.0]], p1: [[504.0]]), p1: s2(p0: s1(p0: s0(p0: [[505.0], [506.0], [507.0]], p1: [[508.0]]), p1: [s0(p0: [[509.0], [510.0], [511.0]], p1: [[512.0]]), s0(p0: [[513.0], [514.0], [515.0]], p1: [[516.0]])]), p1: s0(p0: [[517.0], [518.0], [519.0]], p1: [[520.0]])), p2: [s1(p0: s0(p0: [[521.0], [522.0], [523.0]], p1: [[524.0]]), p1: [s0(p0: [[525.0], [526.0], [527.0]], p1: [[528.0]]), s0(p0: [[529.0], [530.0], [531.0]], p1: [[532.0]])])])], p1: [s5(p0: s1(p0: s0(p0: [[533.0], [534.0], [535.0]], p1: [[536.0]]), p1: [s0(p0: [[537.0], [538.0], [539.0]], p1: [[540.0]]), s0(p0: [[541.0], [542.0], [543.0]], p1: [[544.0]])]), p1: 545.0, p2: s2(p0: s1(p0: s0(p0: [[546.0], [547.0], [548.0]], p1: [[549.0]]), p1: [s0(p0: [[550.0], [551.0], [552.0]], p1: [[553.0]]), s0(p0: [[554.0], [555.0], [556.0]], p1: [[557.0]])]), p1: s0(p0: [[558.0], [559.0], [560.0]], p1: [[561.0]])))]), p5: s7(p0: [s4(p0: s0(p0: [[562.0], [563.0], [564.0]], p1: [[565.0]]), p1: s2(p0: s1(p0: s0(p0: [[566.0], [567.0], [568.0]], p1: [[569.0]]), p1: [s0(p0: [[570.0], [571.0], [572.0]], p1: [[573.0]]), s0(p0: [[574.0], [575.0], [576.0]], p1: [[577.0]])]), p1: s0(p0: [[578.0], [579.0], [580.0]], p1: [[581.0]])), p2: [s1(p0: s0(p0: [[582.0], [583.0], [584.0]], p1: [[585.0]]), p1: [s0(p0: [[586.0], [587.0], [588.0]], p1: [[589.0]]), s0(p0: [[590.0], [591.0], [592.0]], p1: [[593.0]])])]), s4(p0: s0(p0: [[594.0], [595.0], [596.0]], p1: [[597.0]]), p1: s2(p0: s1(p0: s0(p0: [[598.0], [599.0], [600.0]], p1: [[601.0]]), p1: [s0(p0: [[602.0], [603.0], [604.0]], p1: [[605.0]]), s0(p0: [[606.0], [607.0], [608.0]], p1: [[609.0]])]), p1: s0(p0: [[610.0], [611.0], [612.0]], p1: [[613.0]])), p2: [s1(p0: s0(p0: [[614.0], [615.0], [616.0]], p1: [[617.0]]), p1: [s0(p0: [[618.0], [619.0], [620.0]], p1: [[621.0]]), s0(p0: [[622.0], [623.0], [624.0]], p1: [[625.0]])])])], p1: [s5(p0: s1(p0: s0(p0: [[626.0], [627.0], [628.0]], p1: [[629.0]]), p1: [s0(p0: [[630.0], [631.0], [632.0]], p1: [[633.0]]), s0(p0: [[634.0], [635.0], [636.0]], p1: [[637.0]])]), p1: 638.0, p2: s2(p0: s1(p0: s0(p0: [[639.0], [640.0], [641.0]], p1: [[642.0]]), p1: [s0(p0: [[643.0], [644.0], [645.0]], p1: [[646.0]]), s0(p0: [[647.0], [648.0], [649.0]], p1: [[650.0]])]), p1: s0(p0: [[651.0], [652.0], [653.0]], p1: [[654.0]])))]))
    let v1: Double = 655.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 655.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
