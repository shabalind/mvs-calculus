  struct s0 {
    var p0: [[Float]]
    var p1: [Float]
  } in
  struct s2 {
    var p0: s0
    var p1: s0
  } in
  let f33: (s0) -> s0 = (v0: s0) -> s0 {
    let v5: [Float] = v0.p1 in
    var v2: s0 = v0 in
    v2.p1 = v5 in
    v2.p1 = v5 in
    let v7: [Float] = v0.p1 in
    v2.p1 = v7 in
    v2.p1 = v5 in
    let v21: [[Float]] = v2.p0 in
    v2.p1 = v5 in
    v2 = v0 in
    let v15: [[Float]] = v0.p0 in
    let v16: [[Float]] = v2.p0 in
    let v12: [Float] = v0.p1 in
    let v18: s0 = s0(v16, v12) in
    v2.p0 = v21 in
    v2.p0 = v15 in
    v18
  } in
  let noinline_f0: ([s2], Float) -> Float = (v0: [s2], v1: Float) -> Float {
    let v2: s2 = v0[2] in
    let v6: s0 = v2.p1 in
    let v8: s0 = f33(v6) in
    let v11: [[Float]] = v8.p0 in
    let v32: [Float] = v11[0] in
    let v64: Float = v32[0] in
    var v85: Float = v64 in
    v85
  } in
  fun loop(i: Int, v0: [s2], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2(s0([[0.0]], [1.0, 2.0]), s0([[3.0]], [4.0, 5.0])), s2(s0([[6.0]], [7.0, 8.0]), s0([[9.0]], [10.0, 11.0])), s2(s0([[12.0]], [13.0, 14.0]), s0([[15.0]], [16.0, 17.0]))] in
    let v1: Float = 18.0 in
    let initialResult: Float = 18.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()