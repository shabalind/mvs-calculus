  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [[Float]]
    var p1: [[s0]]
  } in
  struct s3 {
    var p0: [[s0]]
    var p1: [[s1]]
  } in
  struct s4 {
    var p0: s0
    var p1: s1
  } in
  struct s5 {
    var p0: [s3]
    var p1: s1
    var p2: [[s0]]
  } in
  struct s6 {
    var p0: [[s0]]
    var p1: [s4]
    var p2: s0
  } in
  struct s10 {
    var p0: s5
    var p1: s6
  } in
  let f6: (s2) -> s2 = (v0: s2) -> s2 {
    var v6: s2 = v0 in
    var v3: s2 = v0 in
    var v1: s2 = v6 in
    let v5: [[s0]] = v3.p1 in
    v1.p1 = v5 in
    v1 = v0 in
    let v4: [[Float]] = v1.p0 in
    var v10: [[Float]] = v4 in
    let v38: [Float] = v4[1] in
    v10[0] = v38 in
    var v11: s2 = v0 in
    let v24: [[s0]] = v0.p1 in
    let v15: [[s0]] = v3.p1 in
    var v14: [[Float]] = v4 in
    v11.p0 = v14 in
    v14[1] = v38 in
    let v20: [[Float]] = v11.p0 in
    v6.p0 = v20 in
    v1.p0 = v14 in
    v1.p0 = v10 in
    var v22: s2 = v11 in
    v22.p1 = v15 in
    v22.p1 = v24 in
    v22
  } in
  let noinline_f0: (s10, [s2], Float) -> Float = (v0: s10, v1: [s2], v2: Float) -> Float {
    var v7: [s2] = v1 in
    v7 = v1 in
    var v5: Float = v2 in
    v7 = v1 in
    let v4: s2 = v7[0] in
    var v17: [s2] = v7 in
    let v10: s2 = f6(v4) in
    let v11: s2 = f6(v4) in
    v17[0] = v11 in
    let v14: s2 = f6(v10) in
    let v62: [[Float]] = v4.p0 in
    let v40: Float = v5 + v5 in
    v7 = v17 in
    let v46: s2 = v17[0] in
    let v39: s2 = f6(v10) in
    let v24: Float = v5 - v40 in
    v17[0] = v46 in
    let v31: [Float] = v62[0] in
    let v43: Float = v31[0] in
    let v79: s2 = f6(v11) in
    v17[0] = v39 in
    let v48: [s2] = [v4, v11, v39, v14, v79] in
    let v44: s2 = f6(v79) in
    let v63: Float = v31[0] in
    let v42: Float = v63 / v43 in
    var v61: [s2] = v48 in
    let v161: Float = v63 / v24 in
    v61[2] = v46 in
    let v174: s2 = v61[4] in
    let v172: Float = v40 * v42 in
    v7[0] = v10 in
    v61[1] = v10 in
    v61[3] = v79 in
    let v173: Float = v161 * v172 in
    v17[0] = v174 in
    v7[0] = v44 in
    v173
  } in
  fun loop(i: Int, v0: s10, v1: [s2], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s10 = s10(s5([s3([[s0([[0.0], [1.0], [2.0]], [[3.0]])], [s0([[4.0], [5.0], [6.0]], [[7.0]])]], [[s1(s0([[8.0], [9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0], [14.0]], [[15.0]]))], [s1(s0([[16.0], [17.0], [18.0]], [[19.0]]), s0([[20.0], [21.0], [22.0]], [[23.0]]))]]), s3([[s0([[24.0], [25.0], [26.0]], [[27.0]])], [s0([[28.0], [29.0], [30.0]], [[31.0]])]], [[s1(s0([[32.0], [33.0], [34.0]], [[35.0]]), s0([[36.0], [37.0], [38.0]], [[39.0]]))], [s1(s0([[40.0], [41.0], [42.0]], [[43.0]]), s0([[44.0], [45.0], [46.0]], [[47.0]]))]]), s3([[s0([[48.0], [49.0], [50.0]], [[51.0]])], [s0([[52.0], [53.0], [54.0]], [[55.0]])]], [[s1(s0([[56.0], [57.0], [58.0]], [[59.0]]), s0([[60.0], [61.0], [62.0]], [[63.0]]))], [s1(s0([[64.0], [65.0], [66.0]], [[67.0]]), s0([[68.0], [69.0], [70.0]], [[71.0]]))]])], s1(s0([[72.0], [73.0], [74.0]], [[75.0]]), s0([[76.0], [77.0], [78.0]], [[79.0]])), [[s0([[80.0], [81.0], [82.0]], [[83.0]])]]), s6([[s0([[84.0], [85.0], [86.0]], [[87.0]])], [s0([[88.0], [89.0], [90.0]], [[91.0]])], [s0([[92.0], [93.0], [94.0]], [[95.0]])]], [s4(s0([[96.0], [97.0], [98.0]], [[99.0]]), s1(s0([[100.0], [101.0], [102.0]], [[103.0]]), s0([[104.0], [105.0], [106.0]], [[107.0]]))), s4(s0([[108.0], [109.0], [110.0]], [[111.0]]), s1(s0([[112.0], [113.0], [114.0]], [[115.0]]), s0([[116.0], [117.0], [118.0]], [[119.0]]))), s4(s0([[120.0], [121.0], [122.0]], [[123.0]]), s1(s0([[124.0], [125.0], [126.0]], [[127.0]]), s0([[128.0], [129.0], [130.0]], [[131.0]])))], s0([[132.0], [133.0], [134.0]], [[135.0]]))) in
    let v1: [s2] = [s2([[136.0], [137.0], [138.0]], [[s0([[139.0], [140.0], [141.0]], [[142.0]])]])] in
    let v2: Float = 143.0 in
    let initialResult: Float = 143.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()