  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: s0
    var p1: [s0]
  }
  struct s4 {
    var p0: s2
    var p1: s1
  }
  struct s5 {
    var p0: [s1]
    var p1: s4
  }
  struct s6 {
    var p0: [s2]
    var p1: [[s4]]
    var p2: [s0]
    var p3: s4
    var p4: [s2]
    var p5: [[s4]]
  }
  struct s9 {
    var p0: [s6]
    var p1: s5
  }
  func f4(_ v0: Double) -> Double {
    var v1: Double = v0
    var v2: Double = v0
    let v6: Double = v1 + v0
    var v5: Double = v0
    let v4: [Double] = [v5]
    let v3: Double = v4[0]
    let v13: Double = v4[0]
    var v12: Double = v6
    let v21: [[Double]] = [v4, v4, v4, v4]
    var v16: Double = v12
    var v26: [Double] = v4
    v26[0] = v1
    var v15: [[Double]] = v21
    v15[2] = v4
    v26[0] = v3
    let v20: Double = v26[0]
    v15[2] = v26
    let v34: [Double] = v15[1]
    v1 = v2
    var v24: [[Double]] = v21
    var v22: [Double] = v34
    v26[0] = v20
    v26[0] = v16
    v24[1] = v22
    var v35: Double = v13
    v24[3] = v26
    let v23: [Double] = v24[3]
    var v54: [[Double]] = v15
    v54[0] = v23
    let v74: [Double] = v54[0]
    let v101: Double = v74[0]
    let v235: Double = v35 - v101
    return v235
  }
  @inline(never)
  func f0(_ v0: s9, _ v1: Double) -> Double {
    var v7: Double = v1
    let v17: Double = f4(v7)
    let v23: Double = f4(v1)
    let v33: Double = f4(v23)
    let v26: Double = f4(v17)
    let v14: Double = f4(v26)
    let v37: Double = v14 / v33
    let v46: Double = f4(v37)
    return v46
  }
  func benchmark() {
    let v0: s9 = s9(p0: [s6(p0: [s2(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0]]), p1: [s0(p0: [[4.0], [5.0]], p1: [[6.0], [7.0]])]), s2(p0: s0(p0: [[8.0], [9.0]], p1: [[10.0], [11.0]]), p1: [s0(p0: [[12.0], [13.0]], p1: [[14.0], [15.0]])]), s2(p0: s0(p0: [[16.0], [17.0]], p1: [[18.0], [19.0]]), p1: [s0(p0: [[20.0], [21.0]], p1: [[22.0], [23.0]])])], p1: [[s4(p0: s2(p0: s0(p0: [[24.0], [25.0]], p1: [[26.0], [27.0]]), p1: [s0(p0: [[28.0], [29.0]], p1: [[30.0], [31.0]])]), p1: s1(p0: s0(p0: [[32.0], [33.0]], p1: [[34.0], [35.0]]), p1: s0(p0: [[36.0], [37.0]], p1: [[38.0], [39.0]])))]], p2: [s0(p0: [[40.0], [41.0]], p1: [[42.0], [43.0]]), s0(p0: [[44.0], [45.0]], p1: [[46.0], [47.0]]), s0(p0: [[48.0], [49.0]], p1: [[50.0], [51.0]])], p3: s4(p0: s2(p0: s0(p0: [[52.0], [53.0]], p1: [[54.0], [55.0]]), p1: [s0(p0: [[56.0], [57.0]], p1: [[58.0], [59.0]])]), p1: s1(p0: s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0]]), p1: s0(p0: [[64.0], [65.0]], p1: [[66.0], [67.0]]))), p4: [s2(p0: s0(p0: [[68.0], [69.0]], p1: [[70.0], [71.0]]), p1: [s0(p0: [[72.0], [73.0]], p1: [[74.0], [75.0]])]), s2(p0: s0(p0: [[76.0], [77.0]], p1: [[78.0], [79.0]]), p1: [s0(p0: [[80.0], [81.0]], p1: [[82.0], [83.0]])]), s2(p0: s0(p0: [[84.0], [85.0]], p1: [[86.0], [87.0]]), p1: [s0(p0: [[88.0], [89.0]], p1: [[90.0], [91.0]])])], p5: [[s4(p0: s2(p0: s0(p0: [[92.0], [93.0]], p1: [[94.0], [95.0]]), p1: [s0(p0: [[96.0], [97.0]], p1: [[98.0], [99.0]])]), p1: s1(p0: s0(p0: [[100.0], [101.0]], p1: [[102.0], [103.0]]), p1: s0(p0: [[104.0], [105.0]], p1: [[106.0], [107.0]])))], [s4(p0: s2(p0: s0(p0: [[108.0], [109.0]], p1: [[110.0], [111.0]]), p1: [s0(p0: [[112.0], [113.0]], p1: [[114.0], [115.0]])]), p1: s1(p0: s0(p0: [[116.0], [117.0]], p1: [[118.0], [119.0]]), p1: s0(p0: [[120.0], [121.0]], p1: [[122.0], [123.0]])))], [s4(p0: s2(p0: s0(p0: [[124.0], [125.0]], p1: [[126.0], [127.0]]), p1: [s0(p0: [[128.0], [129.0]], p1: [[130.0], [131.0]])]), p1: s1(p0: s0(p0: [[132.0], [133.0]], p1: [[134.0], [135.0]]), p1: s0(p0: [[136.0], [137.0]], p1: [[138.0], [139.0]])))]]), s6(p0: [s2(p0: s0(p0: [[140.0], [141.0]], p1: [[142.0], [143.0]]), p1: [s0(p0: [[144.0], [145.0]], p1: [[146.0], [147.0]])]), s2(p0: s0(p0: [[148.0], [149.0]], p1: [[150.0], [151.0]]), p1: [s0(p0: [[152.0], [153.0]], p1: [[154.0], [155.0]])]), s2(p0: s0(p0: [[156.0], [157.0]], p1: [[158.0], [159.0]]), p1: [s0(p0: [[160.0], [161.0]], p1: [[162.0], [163.0]])])], p1: [[s4(p0: s2(p0: s0(p0: [[164.0], [165.0]], p1: [[166.0], [167.0]]), p1: [s0(p0: [[168.0], [169.0]], p1: [[170.0], [171.0]])]), p1: s1(p0: s0(p0: [[172.0], [173.0]], p1: [[174.0], [175.0]]), p1: s0(p0: [[176.0], [177.0]], p1: [[178.0], [179.0]])))]], p2: [s0(p0: [[180.0], [181.0]], p1: [[182.0], [183.0]]), s0(p0: [[184.0], [185.0]], p1: [[186.0], [187.0]]), s0(p0: [[188.0], [189.0]], p1: [[190.0], [191.0]])], p3: s4(p0: s2(p0: s0(p0: [[192.0], [193.0]], p1: [[194.0], [195.0]]), p1: [s0(p0: [[196.0], [197.0]], p1: [[198.0], [199.0]])]), p1: s1(p0: s0(p0: [[200.0], [201.0]], p1: [[202.0], [203.0]]), p1: s0(p0: [[204.0], [205.0]], p1: [[206.0], [207.0]]))), p4: [s2(p0: s0(p0: [[208.0], [209.0]], p1: [[210.0], [211.0]]), p1: [s0(p0: [[212.0], [213.0]], p1: [[214.0], [215.0]])]), s2(p0: s0(p0: [[216.0], [217.0]], p1: [[218.0], [219.0]]), p1: [s0(p0: [[220.0], [221.0]], p1: [[222.0], [223.0]])]), s2(p0: s0(p0: [[224.0], [225.0]], p1: [[226.0], [227.0]]), p1: [s0(p0: [[228.0], [229.0]], p1: [[230.0], [231.0]])])], p5: [[s4(p0: s2(p0: s0(p0: [[232.0], [233.0]], p1: [[234.0], [235.0]]), p1: [s0(p0: [[236.0], [237.0]], p1: [[238.0], [239.0]])]), p1: s1(p0: s0(p0: [[240.0], [241.0]], p1: [[242.0], [243.0]]), p1: s0(p0: [[244.0], [245.0]], p1: [[246.0], [247.0]])))], [s4(p0: s2(p0: s0(p0: [[248.0], [249.0]], p1: [[250.0], [251.0]]), p1: [s0(p0: [[252.0], [253.0]], p1: [[254.0], [255.0]])]), p1: s1(p0: s0(p0: [[256.0], [257.0]], p1: [[258.0], [259.0]]), p1: s0(p0: [[260.0], [261.0]], p1: [[262.0], [263.0]])))], [s4(p0: s2(p0: s0(p0: [[264.0], [265.0]], p1: [[266.0], [267.0]]), p1: [s0(p0: [[268.0], [269.0]], p1: [[270.0], [271.0]])]), p1: s1(p0: s0(p0: [[272.0], [273.0]], p1: [[274.0], [275.0]]), p1: s0(p0: [[276.0], [277.0]], p1: [[278.0], [279.0]])))]]), s6(p0: [s2(p0: s0(p0: [[280.0], [281.0]], p1: [[282.0], [283.0]]), p1: [s0(p0: [[284.0], [285.0]], p1: [[286.0], [287.0]])]), s2(p0: s0(p0: [[288.0], [289.0]], p1: [[290.0], [291.0]]), p1: [s0(p0: [[292.0], [293.0]], p1: [[294.0], [295.0]])]), s2(p0: s0(p0: [[296.0], [297.0]], p1: [[298.0], [299.0]]), p1: [s0(p0: [[300.0], [301.0]], p1: [[302.0], [303.0]])])], p1: [[s4(p0: s2(p0: s0(p0: [[304.0], [305.0]], p1: [[306.0], [307.0]]), p1: [s0(p0: [[308.0], [309.0]], p1: [[310.0], [311.0]])]), p1: s1(p0: s0(p0: [[312.0], [313.0]], p1: [[314.0], [315.0]]), p1: s0(p0: [[316.0], [317.0]], p1: [[318.0], [319.0]])))]], p2: [s0(p0: [[320.0], [321.0]], p1: [[322.0], [323.0]]), s0(p0: [[324.0], [325.0]], p1: [[326.0], [327.0]]), s0(p0: [[328.0], [329.0]], p1: [[330.0], [331.0]])], p3: s4(p0: s2(p0: s0(p0: [[332.0], [333.0]], p1: [[334.0], [335.0]]), p1: [s0(p0: [[336.0], [337.0]], p1: [[338.0], [339.0]])]), p1: s1(p0: s0(p0: [[340.0], [341.0]], p1: [[342.0], [343.0]]), p1: s0(p0: [[344.0], [345.0]], p1: [[346.0], [347.0]]))), p4: [s2(p0: s0(p0: [[348.0], [349.0]], p1: [[350.0], [351.0]]), p1: [s0(p0: [[352.0], [353.0]], p1: [[354.0], [355.0]])]), s2(p0: s0(p0: [[356.0], [357.0]], p1: [[358.0], [359.0]]), p1: [s0(p0: [[360.0], [361.0]], p1: [[362.0], [363.0]])]), s2(p0: s0(p0: [[364.0], [365.0]], p1: [[366.0], [367.0]]), p1: [s0(p0: [[368.0], [369.0]], p1: [[370.0], [371.0]])])], p5: [[s4(p0: s2(p0: s0(p0: [[372.0], [373.0]], p1: [[374.0], [375.0]]), p1: [s0(p0: [[376.0], [377.0]], p1: [[378.0], [379.0]])]), p1: s1(p0: s0(p0: [[380.0], [381.0]], p1: [[382.0], [383.0]]), p1: s0(p0: [[384.0], [385.0]], p1: [[386.0], [387.0]])))], [s4(p0: s2(p0: s0(p0: [[388.0], [389.0]], p1: [[390.0], [391.0]]), p1: [s0(p0: [[392.0], [393.0]], p1: [[394.0], [395.0]])]), p1: s1(p0: s0(p0: [[396.0], [397.0]], p1: [[398.0], [399.0]]), p1: s0(p0: [[400.0], [401.0]], p1: [[402.0], [403.0]])))], [s4(p0: s2(p0: s0(p0: [[404.0], [405.0]], p1: [[406.0], [407.0]]), p1: [s0(p0: [[408.0], [409.0]], p1: [[410.0], [411.0]])]), p1: s1(p0: s0(p0: [[412.0], [413.0]], p1: [[414.0], [415.0]]), p1: s0(p0: [[416.0], [417.0]], p1: [[418.0], [419.0]])))]])], p1: s5(p0: [s1(p0: s0(p0: [[420.0], [421.0]], p1: [[422.0], [423.0]]), p1: s0(p0: [[424.0], [425.0]], p1: [[426.0], [427.0]]))], p1: s4(p0: s2(p0: s0(p0: [[428.0], [429.0]], p1: [[430.0], [431.0]]), p1: [s0(p0: [[432.0], [433.0]], p1: [[434.0], [435.0]])]), p1: s1(p0: s0(p0: [[436.0], [437.0]], p1: [[438.0], [439.0]]), p1: s0(p0: [[440.0], [441.0]], p1: [[442.0], [443.0]])))))
    let v1: Double = 444.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 444.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
