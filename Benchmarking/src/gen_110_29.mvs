  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [[s1]]
    var p1: [s0]
  } in
  struct s3 {
    var p0: s2
    var p1: s2
    var p2: [[s0]]
    var p3: [[s1]]
  } in
  struct s4 {
    var p0: [[s0]]
    var p1: s1
    var p2: s1
    var p3: [[s1]]
    var p4: [[Float]]
  } in
  struct s5 {
    var p0: s4
    var p1: [[s2]]
  } in
  struct s7 {
    var p0: s5
    var p1: [s2]
  } in
  struct s8 {
    var p0: [[s5]]
    var p1: s4
  } in
  let f15: (Float) -> Float = (v0: Float) -> Float {
    var v4: Float = v0 in
    var v2: Float = v4 in
    var v5: Float = v2 in
    var v7: Float = v5 in
    let v9: [Float] = [v7, v7, v4, v0, v2, v2, v5] in
    var v23: [Float] = v9 in
    var v27: [Float] = v23 in
    var v13: [Float] = v27 in
    v13[3] = v5 in
    var v24: [Float] = v13 in
    v13 = v24 in
    let v51: Float = v13[0] in
    v51
  } in
  let noinline_f0: (s3, [s7], [s8], Float) -> Float = (v0: s3, v1: [s7], v2: [s8], v3: Float) -> Float {
    let v6: Float = f15(v3) in
    let v11: Float = f15(v6) in
    var v13: Float = v6 in
    let v36: Float = v13 / v11 in
    v36
  } in
  fun loop(i: Int, v0: s3, v1: [s7], v2: [s8], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(s2([[s1(s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]), s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]]))], [s1(s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]]), s0([[15.0], [16.0], [17.0]], [[18.0], [19.0]]))]], [s0([[20.0], [21.0], [22.0]], [[23.0], [24.0]])]), s2([[s1(s0([[25.0], [26.0], [27.0]], [[28.0], [29.0]]), s0([[30.0], [31.0], [32.0]], [[33.0], [34.0]]))], [s1(s0([[35.0], [36.0], [37.0]], [[38.0], [39.0]]), s0([[40.0], [41.0], [42.0]], [[43.0], [44.0]]))]], [s0([[45.0], [46.0], [47.0]], [[48.0], [49.0]])]), [[s0([[50.0], [51.0], [52.0]], [[53.0], [54.0]])]], [[s1(s0([[55.0], [56.0], [57.0]], [[58.0], [59.0]]), s0([[60.0], [61.0], [62.0]], [[63.0], [64.0]]))], [s1(s0([[65.0], [66.0], [67.0]], [[68.0], [69.0]]), s0([[70.0], [71.0], [72.0]], [[73.0], [74.0]]))], [s1(s0([[75.0], [76.0], [77.0]], [[78.0], [79.0]]), s0([[80.0], [81.0], [82.0]], [[83.0], [84.0]]))]]) in
    let v1: [s7] = [s7(s5(s4([[s0([[85.0], [86.0], [87.0]], [[88.0], [89.0]])]], s1(s0([[90.0], [91.0], [92.0]], [[93.0], [94.0]]), s0([[95.0], [96.0], [97.0]], [[98.0], [99.0]])), s1(s0([[100.0], [101.0], [102.0]], [[103.0], [104.0]]), s0([[105.0], [106.0], [107.0]], [[108.0], [109.0]])), [[s1(s0([[110.0], [111.0], [112.0]], [[113.0], [114.0]]), s0([[115.0], [116.0], [117.0]], [[118.0], [119.0]]))], [s1(s0([[120.0], [121.0], [122.0]], [[123.0], [124.0]]), s0([[125.0], [126.0], [127.0]], [[128.0], [129.0]]))]], [[130.0], [131.0], [132.0]]), [[s2([[s1(s0([[133.0], [134.0], [135.0]], [[136.0], [137.0]]), s0([[138.0], [139.0], [140.0]], [[141.0], [142.0]]))], [s1(s0([[143.0], [144.0], [145.0]], [[146.0], [147.0]]), s0([[148.0], [149.0], [150.0]], [[151.0], [152.0]]))]], [s0([[153.0], [154.0], [155.0]], [[156.0], [157.0]])])]]), [s2([[s1(s0([[158.0], [159.0], [160.0]], [[161.0], [162.0]]), s0([[163.0], [164.0], [165.0]], [[166.0], [167.0]]))], [s1(s0([[168.0], [169.0], [170.0]], [[171.0], [172.0]]), s0([[173.0], [174.0], [175.0]], [[176.0], [177.0]]))]], [s0([[178.0], [179.0], [180.0]], [[181.0], [182.0]])])]), s7(s5(s4([[s0([[183.0], [184.0], [185.0]], [[186.0], [187.0]])]], s1(s0([[188.0], [189.0], [190.0]], [[191.0], [192.0]]), s0([[193.0], [194.0], [195.0]], [[196.0], [197.0]])), s1(s0([[198.0], [199.0], [200.0]], [[201.0], [202.0]]), s0([[203.0], [204.0], [205.0]], [[206.0], [207.0]])), [[s1(s0([[208.0], [209.0], [210.0]], [[211.0], [212.0]]), s0([[213.0], [214.0], [215.0]], [[216.0], [217.0]]))], [s1(s0([[218.0], [219.0], [220.0]], [[221.0], [222.0]]), s0([[223.0], [224.0], [225.0]], [[226.0], [227.0]]))]], [[228.0], [229.0], [230.0]]), [[s2([[s1(s0([[231.0], [232.0], [233.0]], [[234.0], [235.0]]), s0([[236.0], [237.0], [238.0]], [[239.0], [240.0]]))], [s1(s0([[241.0], [242.0], [243.0]], [[244.0], [245.0]]), s0([[246.0], [247.0], [248.0]], [[249.0], [250.0]]))]], [s0([[251.0], [252.0], [253.0]], [[254.0], [255.0]])])]]), [s2([[s1(s0([[256.0], [257.0], [258.0]], [[259.0], [260.0]]), s0([[261.0], [262.0], [263.0]], [[264.0], [265.0]]))], [s1(s0([[266.0], [267.0], [268.0]], [[269.0], [270.0]]), s0([[271.0], [272.0], [273.0]], [[274.0], [275.0]]))]], [s0([[276.0], [277.0], [278.0]], [[279.0], [280.0]])])]), s7(s5(s4([[s0([[281.0], [282.0], [283.0]], [[284.0], [285.0]])]], s1(s0([[286.0], [287.0], [288.0]], [[289.0], [290.0]]), s0([[291.0], [292.0], [293.0]], [[294.0], [295.0]])), s1(s0([[296.0], [297.0], [298.0]], [[299.0], [300.0]]), s0([[301.0], [302.0], [303.0]], [[304.0], [305.0]])), [[s1(s0([[306.0], [307.0], [308.0]], [[309.0], [310.0]]), s0([[311.0], [312.0], [313.0]], [[314.0], [315.0]]))], [s1(s0([[316.0], [317.0], [318.0]], [[319.0], [320.0]]), s0([[321.0], [322.0], [323.0]], [[324.0], [325.0]]))]], [[326.0], [327.0], [328.0]]), [[s2([[s1(s0([[329.0], [330.0], [331.0]], [[332.0], [333.0]]), s0([[334.0], [335.0], [336.0]], [[337.0], [338.0]]))], [s1(s0([[339.0], [340.0], [341.0]], [[342.0], [343.0]]), s0([[344.0], [345.0], [346.0]], [[347.0], [348.0]]))]], [s0([[349.0], [350.0], [351.0]], [[352.0], [353.0]])])]]), [s2([[s1(s0([[354.0], [355.0], [356.0]], [[357.0], [358.0]]), s0([[359.0], [360.0], [361.0]], [[362.0], [363.0]]))], [s1(s0([[364.0], [365.0], [366.0]], [[367.0], [368.0]]), s0([[369.0], [370.0], [371.0]], [[372.0], [373.0]]))]], [s0([[374.0], [375.0], [376.0]], [[377.0], [378.0]])])])] in
    let v2: [s8] = [s8([[s5(s4([[s0([[379.0], [380.0], [381.0]], [[382.0], [383.0]])]], s1(s0([[384.0], [385.0], [386.0]], [[387.0], [388.0]]), s0([[389.0], [390.0], [391.0]], [[392.0], [393.0]])), s1(s0([[394.0], [395.0], [396.0]], [[397.0], [398.0]]), s0([[399.0], [400.0], [401.0]], [[402.0], [403.0]])), [[s1(s0([[404.0], [405.0], [406.0]], [[407.0], [408.0]]), s0([[409.0], [410.0], [411.0]], [[412.0], [413.0]]))], [s1(s0([[414.0], [415.0], [416.0]], [[417.0], [418.0]]), s0([[419.0], [420.0], [421.0]], [[422.0], [423.0]]))]], [[424.0], [425.0], [426.0]]), [[s2([[s1(s0([[427.0], [428.0], [429.0]], [[430.0], [431.0]]), s0([[432.0], [433.0], [434.0]], [[435.0], [436.0]]))], [s1(s0([[437.0], [438.0], [439.0]], [[440.0], [441.0]]), s0([[442.0], [443.0], [444.0]], [[445.0], [446.0]]))]], [s0([[447.0], [448.0], [449.0]], [[450.0], [451.0]])])]])], [s5(s4([[s0([[452.0], [453.0], [454.0]], [[455.0], [456.0]])]], s1(s0([[457.0], [458.0], [459.0]], [[460.0], [461.0]]), s0([[462.0], [463.0], [464.0]], [[465.0], [466.0]])), s1(s0([[467.0], [468.0], [469.0]], [[470.0], [471.0]]), s0([[472.0], [473.0], [474.0]], [[475.0], [476.0]])), [[s1(s0([[477.0], [478.0], [479.0]], [[480.0], [481.0]]), s0([[482.0], [483.0], [484.0]], [[485.0], [486.0]]))], [s1(s0([[487.0], [488.0], [489.0]], [[490.0], [491.0]]), s0([[492.0], [493.0], [494.0]], [[495.0], [496.0]]))]], [[497.0], [498.0], [499.0]]), [[s2([[s1(s0([[500.0], [501.0], [502.0]], [[503.0], [504.0]]), s0([[505.0], [506.0], [507.0]], [[508.0], [509.0]]))], [s1(s0([[510.0], [511.0], [512.0]], [[513.0], [514.0]]), s0([[515.0], [516.0], [517.0]], [[518.0], [519.0]]))]], [s0([[520.0], [521.0], [522.0]], [[523.0], [524.0]])])]])], [s5(s4([[s0([[525.0], [526.0], [527.0]], [[528.0], [529.0]])]], s1(s0([[530.0], [531.0], [532.0]], [[533.0], [534.0]]), s0([[535.0], [536.0], [537.0]], [[538.0], [539.0]])), s1(s0([[540.0], [541.0], [542.0]], [[543.0], [544.0]]), s0([[545.0], [546.0], [547.0]], [[548.0], [549.0]])), [[s1(s0([[550.0], [551.0], [552.0]], [[553.0], [554.0]]), s0([[555.0], [556.0], [557.0]], [[558.0], [559.0]]))], [s1(s0([[560.0], [561.0], [562.0]], [[563.0], [564.0]]), s0([[565.0], [566.0], [567.0]], [[568.0], [569.0]]))]], [[570.0], [571.0], [572.0]]), [[s2([[s1(s0([[573.0], [574.0], [575.0]], [[576.0], [577.0]]), s0([[578.0], [579.0], [580.0]], [[581.0], [582.0]]))], [s1(s0([[583.0], [584.0], [585.0]], [[586.0], [587.0]]), s0([[588.0], [589.0], [590.0]], [[591.0], [592.0]]))]], [s0([[593.0], [594.0], [595.0]], [[596.0], [597.0]])])]])]], s4([[s0([[598.0], [599.0], [600.0]], [[601.0], [602.0]])]], s1(s0([[603.0], [604.0], [605.0]], [[606.0], [607.0]]), s0([[608.0], [609.0], [610.0]], [[611.0], [612.0]])), s1(s0([[613.0], [614.0], [615.0]], [[616.0], [617.0]]), s0([[618.0], [619.0], [620.0]], [[621.0], [622.0]])), [[s1(s0([[623.0], [624.0], [625.0]], [[626.0], [627.0]]), s0([[628.0], [629.0], [630.0]], [[631.0], [632.0]]))], [s1(s0([[633.0], [634.0], [635.0]], [[636.0], [637.0]]), s0([[638.0], [639.0], [640.0]], [[641.0], [642.0]]))]], [[643.0], [644.0], [645.0]]))] in
    let v3: Float = 646.0 in
    let initialResult: Float = 646.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()