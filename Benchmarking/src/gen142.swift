  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s2 {
    var p0: s0
    var p1: s0
  }
  struct s3 {
    var p0: s0
    var p1: [[s0]]
    var p2: [[s2]]
  }
  struct s7 {
    var p0: s3
    var p1: [[s3]]
  }
  func f115(_ v0: s3) -> s3 {
    var v4: s3 = v0
    v4 = v0
    let v2: [[s2]] = v4.p2
    var v5: s3 = v4
    v5.p2 = v2
    v5.p2 = v2
    let v8: [s2] = v2[0]
    var v3: [[s2]] = v2
    var v1: s3 = v5
    v3[0] = v8
    let v10: [s2] = v2[2]
    v4.p2 = v3
    v3[2] = v10
    v5.p2 = v3
    v3[1] = v10
    let v7: [[s0]] = v5.p1
    v5.p2 = v2
    v1.p1 = v7
    let v9: [[s2]] = v5.p2
    let v27: [[s0]] = v5.p1
    var v12: [[s2]] = v9
    let v67: [s2] = v12[1]
    v1.p1 = v27
    v1.p1 = v7
    v3[1] = v67
    v12[0] = v10
    return v1
  }
  func f103(_ v0: s0) -> s0 {
    let v5: [[Double]] = v0.p0
    let v1: [[Double]] = v0.p1
    let v7: s2 = s2(p0: v0, p1: v0)
    var v4: s0 = v0
    var v3: s2 = v7
    v3.p0 = v0
    var v6: s2 = v7
    var v2: [[Double]] = v5
    let v19: [[Double]] = v4.p0
    var v10: s0 = v0
    let v15: [[Double]] = v10.p1
    let v12: [Double] = v1[2]
    v6.p1 = v10
    var v14: s0 = v10
    var v16: s2 = v7
    let v17: s0 = v7.p1
    let v35: s0 = v6.p1
    let v41: [[Double]] = v35.p0
    v14.p1 = v15
    let v25: s0 = v16.p0
    let v39: [Double] = v5[1]
    let v21: Double = v12[0]
    v4.p0 = v2
    v6 = v3
    let v34: s2 = s2(p0: v14, p1: v14)
    v14.p0 = v5
    v6.p0 = v25
    let v95: [Double] = v41[1]
    let v44: s0 = v7.p0
    v2[1] = v95
    v10 = v14
    var v60: s2 = v34
    var v101: Double = v21
    var v42: s0 = v44
    v6.p0 = v42
    v60.p0 = v4
    v4 = v17
    let v79: [[Double]] = v14.p1
    var v125: [Double] = v39
    v10.p0 = v19
    v2[0] = v125
    v4.p1 = v79
    let v85: s0 = v60.p1
    v125[0] = v101
    return v85
  }
  func f101(_ v0: s3, _ v1: [s7]) -> s3 {
    let v5: s3 = f115(v0)
    let v12: s3 = f115(v5)
    let v15: s3 = f115(v5)
    let v29: s0 = v5.p0
    let v21: [[s0]] = v12.p1
    let v28: s3 = f115(v12)
    let v24: [[Double]] = v29.p1
    var v54: [[Double]] = v24
    let v85: s3 = f115(v28)
    var v27: s3 = v15
    let v53: [Double] = v54[0]
    var v50: s0 = v29
    v50.p1 = v54
    v27.p0 = v50
    let v68: s0 = v85.p0
    v54[1] = v53
    v27.p0 = v68
    v27.p0 = v29
    v27.p1 = v21
    let v90: s3 = f115(v27)
    return v90
  }
  @inline(never)
  func f0(_ v0: [s7], _ v1: Double) -> Double {
    let v2: s7 = v0[1]
    let v6: s3 = v2.p0
    let v3: s3 = f101(v6, v0)
    let v10: s7 = v0[0]
    let v36: s3 = f101(v3, v0)
    let v27: s0 = v36.p0
    var v22: s0 = v27
    let v46: s0 = v6.p0
    let v26: [[Double]] = v46.p1
    v22.p1 = v26
    v22 = v27
    let v65: s0 = f103(v22)
    let v62: [[Double]] = v65.p1
    v22.p1 = v62
    let v53: s3 = v10.p0
    let v174: [[Double]] = v27.p1
    v22.p1 = v174
    let v111: [Double] = v62[0]
    let v90: Double = v111[0]
    let v119: s0 = v53.p0
    let v197: [[Double]] = v119.p1
    v22.p1 = v197
    v22.p1 = v174
    v22.p1 = v197
    return v90
  }
  func benchmark() {
    let v0: [s7] = [s7(p0: s3(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0], [4.0]]), p1: [[s0(p0: [[5.0], [6.0]], p1: [[7.0], [8.0], [9.0]])], [s0(p0: [[10.0], [11.0]], p1: [[12.0], [13.0], [14.0]])]], p2: [[s2(p0: s0(p0: [[15.0], [16.0]], p1: [[17.0], [18.0], [19.0]]), p1: s0(p0: [[20.0], [21.0]], p1: [[22.0], [23.0], [24.0]]))], [s2(p0: s0(p0: [[25.0], [26.0]], p1: [[27.0], [28.0], [29.0]]), p1: s0(p0: [[30.0], [31.0]], p1: [[32.0], [33.0], [34.0]]))], [s2(p0: s0(p0: [[35.0], [36.0]], p1: [[37.0], [38.0], [39.0]]), p1: s0(p0: [[40.0], [41.0]], p1: [[42.0], [43.0], [44.0]]))]]), p1: [[s3(p0: s0(p0: [[45.0], [46.0]], p1: [[47.0], [48.0], [49.0]]), p1: [[s0(p0: [[50.0], [51.0]], p1: [[52.0], [53.0], [54.0]])], [s0(p0: [[55.0], [56.0]], p1: [[57.0], [58.0], [59.0]])]], p2: [[s2(p0: s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0], [64.0]]), p1: s0(p0: [[65.0], [66.0]], p1: [[67.0], [68.0], [69.0]]))], [s2(p0: s0(p0: [[70.0], [71.0]], p1: [[72.0], [73.0], [74.0]]), p1: s0(p0: [[75.0], [76.0]], p1: [[77.0], [78.0], [79.0]]))], [s2(p0: s0(p0: [[80.0], [81.0]], p1: [[82.0], [83.0], [84.0]]), p1: s0(p0: [[85.0], [86.0]], p1: [[87.0], [88.0], [89.0]]))]])]]), s7(p0: s3(p0: s0(p0: [[90.0], [91.0]], p1: [[92.0], [93.0], [94.0]]), p1: [[s0(p0: [[95.0], [96.0]], p1: [[97.0], [98.0], [99.0]])], [s0(p0: [[100.0], [101.0]], p1: [[102.0], [103.0], [104.0]])]], p2: [[s2(p0: s0(p0: [[105.0], [106.0]], p1: [[107.0], [108.0], [109.0]]), p1: s0(p0: [[110.0], [111.0]], p1: [[112.0], [113.0], [114.0]]))], [s2(p0: s0(p0: [[115.0], [116.0]], p1: [[117.0], [118.0], [119.0]]), p1: s0(p0: [[120.0], [121.0]], p1: [[122.0], [123.0], [124.0]]))], [s2(p0: s0(p0: [[125.0], [126.0]], p1: [[127.0], [128.0], [129.0]]), p1: s0(p0: [[130.0], [131.0]], p1: [[132.0], [133.0], [134.0]]))]]), p1: [[s3(p0: s0(p0: [[135.0], [136.0]], p1: [[137.0], [138.0], [139.0]]), p1: [[s0(p0: [[140.0], [141.0]], p1: [[142.0], [143.0], [144.0]])], [s0(p0: [[145.0], [146.0]], p1: [[147.0], [148.0], [149.0]])]], p2: [[s2(p0: s0(p0: [[150.0], [151.0]], p1: [[152.0], [153.0], [154.0]]), p1: s0(p0: [[155.0], [156.0]], p1: [[157.0], [158.0], [159.0]]))], [s2(p0: s0(p0: [[160.0], [161.0]], p1: [[162.0], [163.0], [164.0]]), p1: s0(p0: [[165.0], [166.0]], p1: [[167.0], [168.0], [169.0]]))], [s2(p0: s0(p0: [[170.0], [171.0]], p1: [[172.0], [173.0], [174.0]]), p1: s0(p0: [[175.0], [176.0]], p1: [[177.0], [178.0], [179.0]]))]])]]), s7(p0: s3(p0: s0(p0: [[180.0], [181.0]], p1: [[182.0], [183.0], [184.0]]), p1: [[s0(p0: [[185.0], [186.0]], p1: [[187.0], [188.0], [189.0]])], [s0(p0: [[190.0], [191.0]], p1: [[192.0], [193.0], [194.0]])]], p2: [[s2(p0: s0(p0: [[195.0], [196.0]], p1: [[197.0], [198.0], [199.0]]), p1: s0(p0: [[200.0], [201.0]], p1: [[202.0], [203.0], [204.0]]))], [s2(p0: s0(p0: [[205.0], [206.0]], p1: [[207.0], [208.0], [209.0]]), p1: s0(p0: [[210.0], [211.0]], p1: [[212.0], [213.0], [214.0]]))], [s2(p0: s0(p0: [[215.0], [216.0]], p1: [[217.0], [218.0], [219.0]]), p1: s0(p0: [[220.0], [221.0]], p1: [[222.0], [223.0], [224.0]]))]]), p1: [[s3(p0: s0(p0: [[225.0], [226.0]], p1: [[227.0], [228.0], [229.0]]), p1: [[s0(p0: [[230.0], [231.0]], p1: [[232.0], [233.0], [234.0]])], [s0(p0: [[235.0], [236.0]], p1: [[237.0], [238.0], [239.0]])]], p2: [[s2(p0: s0(p0: [[240.0], [241.0]], p1: [[242.0], [243.0], [244.0]]), p1: s0(p0: [[245.0], [246.0]], p1: [[247.0], [248.0], [249.0]]))], [s2(p0: s0(p0: [[250.0], [251.0]], p1: [[252.0], [253.0], [254.0]]), p1: s0(p0: [[255.0], [256.0]], p1: [[257.0], [258.0], [259.0]]))], [s2(p0: s0(p0: [[260.0], [261.0]], p1: [[262.0], [263.0], [264.0]]), p1: s0(p0: [[265.0], [266.0]], p1: [[267.0], [268.0], [269.0]]))]])]])]
    let v1: Double = 270.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 270.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
