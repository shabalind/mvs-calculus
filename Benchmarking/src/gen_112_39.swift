  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: s1
    var p1: [[s1]]
  }
  struct s3 {
    var p0: Double
    var p1: [s0]
  }
  struct s5 {
    var p0: [s2]
    var p1: s3
  }
  struct s6 {
    var p0: s0
    var p1: [s0]
  }
  struct s8 {
    var p0: [[s3]]
    var p1: s5
  }
  struct s10 {
    var p0: [[s6]]
    var p1: s8
  }
  func f11(_ v0: s1) -> s1 {
    var v7: s1 = v0
    v7 = v0
    v7 = v0
    let v5: [s0] = v0.p1
    let v4: s0 = v5[0]
    var v6: s0 = v4
    v7.p1 = v5
    let v1: s0 = v7.p0
    var v2: s1 = v0
    v6 = v1
    v2.p0 = v6
    let v10: [s0] = v2.p1
    v7 = v0
    var v33: s1 = v2
    v2.p1 = v10
    v2.p1 = v10
    return v33
  }
  @inline(never)
  func f0(_ v0: s1, _ v1: [[s1]], _ v2: s10, _ v3: s3, _ v4: Double) -> Double {
    let v7: [s1] = v1[0]
    let v6: s1 = v7[0]
    let v10: s1 = f11(v6)
    var v13: s1 = v10
    let v16: s0 = v13.p0
    v13.p0 = v16
    v13 = v6
    let v31: [[Double]] = v16.p0
    let v47: [Double] = v31[0]
    let v25: s0 = s0(p0: v31, p1: v31)
    v13.p0 = v25
    let v51: Double = v47[0]
    return v51
  }
  func benchmark() {
    let v0: s1 = s1(p0: s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0], [5.0]]), p1: [s0(p0: [[6.0], [7.0], [8.0]], p1: [[9.0], [10.0], [11.0]]), s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0], [16.0], [17.0]])])
    let v1: [[s1]] = [[s1(p0: s0(p0: [[18.0], [19.0], [20.0]], p1: [[21.0], [22.0], [23.0]]), p1: [s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0], [28.0], [29.0]]), s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0], [35.0]])])]]
    let v2: s10 = s10(p0: [[s6(p0: s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0], [40.0], [41.0]]), p1: [s0(p0: [[42.0], [43.0], [44.0]], p1: [[45.0], [46.0], [47.0]]), s0(p0: [[48.0], [49.0], [50.0]], p1: [[51.0], [52.0], [53.0]]), s0(p0: [[54.0], [55.0], [56.0]], p1: [[57.0], [58.0], [59.0]])])], [s6(p0: s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0], [64.0], [65.0]]), p1: [s0(p0: [[66.0], [67.0], [68.0]], p1: [[69.0], [70.0], [71.0]]), s0(p0: [[72.0], [73.0], [74.0]], p1: [[75.0], [76.0], [77.0]]), s0(p0: [[78.0], [79.0], [80.0]], p1: [[81.0], [82.0], [83.0]])])], [s6(p0: s0(p0: [[84.0], [85.0], [86.0]], p1: [[87.0], [88.0], [89.0]]), p1: [s0(p0: [[90.0], [91.0], [92.0]], p1: [[93.0], [94.0], [95.0]]), s0(p0: [[96.0], [97.0], [98.0]], p1: [[99.0], [100.0], [101.0]]), s0(p0: [[102.0], [103.0], [104.0]], p1: [[105.0], [106.0], [107.0]])])]], p1: s8(p0: [[s3(p0: 108.0, p1: [s0(p0: [[109.0], [110.0], [111.0]], p1: [[112.0], [113.0], [114.0]]), s0(p0: [[115.0], [116.0], [117.0]], p1: [[118.0], [119.0], [120.0]])])]], p1: s5(p0: [s2(p0: s1(p0: s0(p0: [[121.0], [122.0], [123.0]], p1: [[124.0], [125.0], [126.0]]), p1: [s0(p0: [[127.0], [128.0], [129.0]], p1: [[130.0], [131.0], [132.0]]), s0(p0: [[133.0], [134.0], [135.0]], p1: [[136.0], [137.0], [138.0]])]), p1: [[s1(p0: s0(p0: [[139.0], [140.0], [141.0]], p1: [[142.0], [143.0], [144.0]]), p1: [s0(p0: [[145.0], [146.0], [147.0]], p1: [[148.0], [149.0], [150.0]]), s0(p0: [[151.0], [152.0], [153.0]], p1: [[154.0], [155.0], [156.0]])])], [s1(p0: s0(p0: [[157.0], [158.0], [159.0]], p1: [[160.0], [161.0], [162.0]]), p1: [s0(p0: [[163.0], [164.0], [165.0]], p1: [[166.0], [167.0], [168.0]]), s0(p0: [[169.0], [170.0], [171.0]], p1: [[172.0], [173.0], [174.0]])])]]), s2(p0: s1(p0: s0(p0: [[175.0], [176.0], [177.0]], p1: [[178.0], [179.0], [180.0]]), p1: [s0(p0: [[181.0], [182.0], [183.0]], p1: [[184.0], [185.0], [186.0]]), s0(p0: [[187.0], [188.0], [189.0]], p1: [[190.0], [191.0], [192.0]])]), p1: [[s1(p0: s0(p0: [[193.0], [194.0], [195.0]], p1: [[196.0], [197.0], [198.0]]), p1: [s0(p0: [[199.0], [200.0], [201.0]], p1: [[202.0], [203.0], [204.0]]), s0(p0: [[205.0], [206.0], [207.0]], p1: [[208.0], [209.0], [210.0]])])], [s1(p0: s0(p0: [[211.0], [212.0], [213.0]], p1: [[214.0], [215.0], [216.0]]), p1: [s0(p0: [[217.0], [218.0], [219.0]], p1: [[220.0], [221.0], [222.0]]), s0(p0: [[223.0], [224.0], [225.0]], p1: [[226.0], [227.0], [228.0]])])]]), s2(p0: s1(p0: s0(p0: [[229.0], [230.0], [231.0]], p1: [[232.0], [233.0], [234.0]]), p1: [s0(p0: [[235.0], [236.0], [237.0]], p1: [[238.0], [239.0], [240.0]]), s0(p0: [[241.0], [242.0], [243.0]], p1: [[244.0], [245.0], [246.0]])]), p1: [[s1(p0: s0(p0: [[247.0], [248.0], [249.0]], p1: [[250.0], [251.0], [252.0]]), p1: [s0(p0: [[253.0], [254.0], [255.0]], p1: [[256.0], [257.0], [258.0]]), s0(p0: [[259.0], [260.0], [261.0]], p1: [[262.0], [263.0], [264.0]])])], [s1(p0: s0(p0: [[265.0], [266.0], [267.0]], p1: [[268.0], [269.0], [270.0]]), p1: [s0(p0: [[271.0], [272.0], [273.0]], p1: [[274.0], [275.0], [276.0]]), s0(p0: [[277.0], [278.0], [279.0]], p1: [[280.0], [281.0], [282.0]])])]])], p1: s3(p0: 283.0, p1: [s0(p0: [[284.0], [285.0], [286.0]], p1: [[287.0], [288.0], [289.0]]), s0(p0: [[290.0], [291.0], [292.0]], p1: [[293.0], [294.0], [295.0]])]))))
    let v3: s3 = s3(p0: 296.0, p1: [s0(p0: [[297.0], [298.0], [299.0]], p1: [[300.0], [301.0], [302.0]]), s0(p0: [[303.0], [304.0], [305.0]], p1: [[306.0], [307.0], [308.0]])])
    let v4: Double = 309.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 309.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
