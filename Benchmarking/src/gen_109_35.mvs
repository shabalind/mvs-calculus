  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  } in
  struct s3 {
    var p0: s0
    var p1: s1
  } in
  let noinline_f0: ([s3], Float) -> Float = (v0: [s3], v1: Float) -> Float {
    let v4: s3 = v0[1] in
    let v3: s1 = v4.p1 in
    let v18: s0 = v3.p1 in
    let v10: [[Float]] = v18.p1 in
    let v23: s0 = v3.p1 in
    let v41: [[Float]] = v23.p0 in
    let v107: [[[Float]]] = [v10, v41] in
    var v98: [[[Float]]] = v107 in
    let v145: [[Float]] = v98[0] in
    let v138: [Float] = v145[0] in
    let v81: Float = v138[0] in
    v81
  } in
  fun loop(i: Int, v0: [s3], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s3] = [s3(s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]]), s1([[s0([[6.0], [7.0], [8.0]], [[9.0], [10.0], [11.0]])]], s0([[12.0], [13.0], [14.0]], [[15.0], [16.0], [17.0]]))), s3(s0([[18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0]]), s1([[s0([[24.0], [25.0], [26.0]], [[27.0], [28.0], [29.0]])]], s0([[30.0], [31.0], [32.0]], [[33.0], [34.0], [35.0]])))] in
    let v1: Float = 36.0 in
    let initialResult: Float = 36.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()