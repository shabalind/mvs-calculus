  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
  } in
  struct s2 {
    var p0: [s1]
    var p1: [[s1]]
  } in
  struct s3 {
    var p0: [s1]
    var p1: s2
    var p2: s2
  } in
  let f51: (s3) -> s3 = (v0: s3) -> s3 {
    let v6: s2 = v0.p1 in
    let v5: [s1] = v0.p0 in
    let v8: [s2] = [v6, v6, v6, v6, v6, v6] in
    let v13: [s1] = v6.p0 in
    let v33: s2 = v8[0] in
    let v23: s2 = v8[2] in
    let v34: s2 = v8[5] in
    let v46: [s1] = v0.p0 in
    let v49: [s1] = v34.p0 in
    var v26: [s2] = v8 in
    let v47: [[s1]] = [v46, v13, v13, v46, v5] in
    let v93: s2 = v26[1] in
    let v50: [s1] = v47[4] in
    var v39: [s1] = v50 in
    let v87: s3 = s3(v49, v33, v93) in
    v39 = v46 in
    var v139: s3 = v87 in
    v139.p0 = v39 in
    v26[3] = v23 in
    v139
  } in
  let f48: (Float) -> Float = (v0: Float) -> Float {
    var v1: Float = v0 in
    let v6: Float = v1 / v0 in
    v1 = v6 in
    var v5: Float = v0 in
    var v8: Float = v6 in
    let v3: Float = v5 - v8 in
    v1 = v8 in
    var v11: Float = v8 in
    var v12: Float = v11 in
    var v15: Float = v12 in
    var v49: Float = v6 in
    let v80: [Float] = [v15] in
    let v36: Float = v80[0] in
    let v38: [Float] = [v3, v49] in
    var v75: [Float] = v38 in
    let v99: [[Float]] = [v38, v38, v75, v38, v38] in
    let v68: [Float] = v99[4] in
    let v84: Float = v68[1] in
    v75[1] = v36 in
    v84
  } in
  let f41: (s2, s2) -> s2 = (v0: s2, v1: s2) -> s2 {
    let v5: [s1] = v1.p0 in
    let v10: s1 = v5[0] in
    var v3: [s1] = v5 in
    let v11: s3 = s3(v3, v1, v1) in
    let v18: s3 = f51(v11) in
    let v20: [[s0]] = v10.p0 in
    v3[0] = v10 in
    let v41: [s0] = v10.p1 in
    let v101: s3 = f51(v18) in
    let v44: s1 = s1(v20, v41) in
    let v208: s2 = v101.p1 in
    v3[0] = v44 in
    v208
  } in
  let noinline_f0: (s3, Float) -> Float = (v0: s3, v1: Float) -> Float {
    let v5: s2 = v0.p1 in
    let v7: Float = f48(v1) in
    let v3: s2 = f41(v5, v5) in
    let v4: s2 = f41(v5, v3) in
    let v10: s2 = f41(v4, v5) in
    var v24: Float = v1 in
    let v39: [s1] = v10.p0 in
    let v43: Float = f48(v24) in
    let v26: s1 = v39[0] in
    let v44: [s0] = v26.p1 in
    let v74: s0 = v44[1] in
    let v62: Float = f48(v43) in
    let v49: [[Float]] = v74.p1 in
    let v113: [Float] = v49[2] in
    var v172: [Float] = v113 in
    let v155: Float = v172[0] in
    v172[0] = v7 in
    let v118: Float = f48(v62) in
    v172[0] = v118 in
    v155
  } in
  fun loop(i: Int, v0: s3, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3([s1([[s0([[0.0]], [[1.0], [2.0], [3.0]])]], [s0([[4.0]], [[5.0], [6.0], [7.0]]), s0([[8.0]], [[9.0], [10.0], [11.0]])])], s2([s1([[s0([[12.0]], [[13.0], [14.0], [15.0]])]], [s0([[16.0]], [[17.0], [18.0], [19.0]]), s0([[20.0]], [[21.0], [22.0], [23.0]])])], [[s1([[s0([[24.0]], [[25.0], [26.0], [27.0]])]], [s0([[28.0]], [[29.0], [30.0], [31.0]]), s0([[32.0]], [[33.0], [34.0], [35.0]])])], [s1([[s0([[36.0]], [[37.0], [38.0], [39.0]])]], [s0([[40.0]], [[41.0], [42.0], [43.0]]), s0([[44.0]], [[45.0], [46.0], [47.0]])])], [s1([[s0([[48.0]], [[49.0], [50.0], [51.0]])]], [s0([[52.0]], [[53.0], [54.0], [55.0]]), s0([[56.0]], [[57.0], [58.0], [59.0]])])]]), s2([s1([[s0([[60.0]], [[61.0], [62.0], [63.0]])]], [s0([[64.0]], [[65.0], [66.0], [67.0]]), s0([[68.0]], [[69.0], [70.0], [71.0]])])], [[s1([[s0([[72.0]], [[73.0], [74.0], [75.0]])]], [s0([[76.0]], [[77.0], [78.0], [79.0]]), s0([[80.0]], [[81.0], [82.0], [83.0]])])], [s1([[s0([[84.0]], [[85.0], [86.0], [87.0]])]], [s0([[88.0]], [[89.0], [90.0], [91.0]]), s0([[92.0]], [[93.0], [94.0], [95.0]])])], [s1([[s0([[96.0]], [[97.0], [98.0], [99.0]])]], [s0([[100.0]], [[101.0], [102.0], [103.0]]), s0([[104.0]], [[105.0], [106.0], [107.0]])])]])) in
    let v1: Float = 108.0 in
    let initialResult: Float = 108.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()