  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: s0
    var p2: [[s0]]
    var p3: [s0]
    var p4: s0
    var p5: Double
  }
  struct s2 {
    var p0: [s0]
    var p1: s1
  }
  struct s3 {
    var p0: s0
    var p1: [s0]
  }
  struct s4 {
    var p0: s2
    var p1: s0
    var p2: [s3]
    var p3: [s0]
  }
  struct s6 {
    var p0: s0
    var p1: s0
  }
  func f83(_ v0: Double) -> Double {
    var v4: Double = v0
    var v1: Double = v0
    let v3: [Double] = [v4, v1, v4]
    let v5: Double = v3[2]
    let v8: Double = v3[0]
    var v10: [Double] = v3
    v10[0] = v8
    let v6: Double = v8 + v8
    var v9: [Double] = v10
    v9[0] = v1
    var v17: [Double] = v9
    let v16: Double = v17[0]
    v10[2] = v16
    let v7: Double = v9[2]
    let v18: Double = v16 / v6
    v17[2] = v7
    v10[1] = v5
    v10[1] = v0
    v10[0] = v16
    return v18
  }
  @inline(never)
  func f0(_ v0: [[s6]], _ v1: [s0], _ v2: s4, _ v3: s3, _ v4: Double) -> Double {
    let v17: Double = f83(v4)
    return v17
  }
  func benchmark() {
    let v0: [[s6]] = [[s6(p0: s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0], [5.0]]), p1: s0(p0: [[6.0], [7.0], [8.0]], p1: [[9.0], [10.0], [11.0]]))]]
    let v1: [s0] = [s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0], [16.0], [17.0]])]
    let v2: s4 = s4(p0: s2(p0: [s0(p0: [[18.0], [19.0], [20.0]], p1: [[21.0], [22.0], [23.0]]), s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0], [28.0], [29.0]])], p1: s1(p0: [s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0], [35.0]]), s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0], [40.0], [41.0]])], p1: s0(p0: [[42.0], [43.0], [44.0]], p1: [[45.0], [46.0], [47.0]]), p2: [[s0(p0: [[48.0], [49.0], [50.0]], p1: [[51.0], [52.0], [53.0]])], [s0(p0: [[54.0], [55.0], [56.0]], p1: [[57.0], [58.0], [59.0]])], [s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0], [64.0], [65.0]])]], p3: [s0(p0: [[66.0], [67.0], [68.0]], p1: [[69.0], [70.0], [71.0]]), s0(p0: [[72.0], [73.0], [74.0]], p1: [[75.0], [76.0], [77.0]])], p4: s0(p0: [[78.0], [79.0], [80.0]], p1: [[81.0], [82.0], [83.0]]), p5: 84.0)), p1: s0(p0: [[85.0], [86.0], [87.0]], p1: [[88.0], [89.0], [90.0]]), p2: [s3(p0: s0(p0: [[91.0], [92.0], [93.0]], p1: [[94.0], [95.0], [96.0]]), p1: [s0(p0: [[97.0], [98.0], [99.0]], p1: [[100.0], [101.0], [102.0]]), s0(p0: [[103.0], [104.0], [105.0]], p1: [[106.0], [107.0], [108.0]]), s0(p0: [[109.0], [110.0], [111.0]], p1: [[112.0], [113.0], [114.0]])]), s3(p0: s0(p0: [[115.0], [116.0], [117.0]], p1: [[118.0], [119.0], [120.0]]), p1: [s0(p0: [[121.0], [122.0], [123.0]], p1: [[124.0], [125.0], [126.0]]), s0(p0: [[127.0], [128.0], [129.0]], p1: [[130.0], [131.0], [132.0]]), s0(p0: [[133.0], [134.0], [135.0]], p1: [[136.0], [137.0], [138.0]])])], p3: [s0(p0: [[139.0], [140.0], [141.0]], p1: [[142.0], [143.0], [144.0]]), s0(p0: [[145.0], [146.0], [147.0]], p1: [[148.0], [149.0], [150.0]]), s0(p0: [[151.0], [152.0], [153.0]], p1: [[154.0], [155.0], [156.0]])])
    let v3: s3 = s3(p0: s0(p0: [[157.0], [158.0], [159.0]], p1: [[160.0], [161.0], [162.0]]), p1: [s0(p0: [[163.0], [164.0], [165.0]], p1: [[166.0], [167.0], [168.0]]), s0(p0: [[169.0], [170.0], [171.0]], p1: [[172.0], [173.0], [174.0]]), s0(p0: [[175.0], [176.0], [177.0]], p1: [[178.0], [179.0], [180.0]])])
    let v4: Double = 181.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 181.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
