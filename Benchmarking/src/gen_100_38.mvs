  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: s1
    var p1: s0
  } in
  let noinline_f0: (s2, Float) -> Float = (v0: s2, v1: Float) -> Float {
    let v7: s0 = v0.p1 in
    let v9: [[Float]] = v7.p0 in
    var v8: [[Float]] = v9 in
    let v12: [Float] = v9[1] in
    let v32: [Float] = v8[1] in
    let v13: Float = v12[0] in
    v8[1] = v32 in
    let v48: Float = v32[0] in
    var v54: Float = v13 in
    let v274: Float = v54 - v48 in
    v274
  } in
  fun loop(i: Int, v0: s2, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(s1(s0([[0.0], [1.0]], [[2.0], [3.0]], [[4.0], [5.0]]), [[s0([[6.0], [7.0]], [[8.0], [9.0]], [[10.0], [11.0]])], [s0([[12.0], [13.0]], [[14.0], [15.0]], [[16.0], [17.0]])], [s0([[18.0], [19.0]], [[20.0], [21.0]], [[22.0], [23.0]])]]), s0([[24.0], [25.0]], [[26.0], [27.0]], [[28.0], [29.0]])) in
    let v1: Float = 30.0 in
    let initialResult: Float = 30.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()