  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: (s0, [[s0]], Float) -> Float = (v0: s0, v1: [[s0]], v2: Float) -> Float {
    let v10: [[Float]] = v0.p0 in
    let v18: [Float] = v10[2] in
    let v14: Float = v18[0] in
    let v28: [[Float]] = v0.p1 in
    var v41: [[Float]] = v28 in
    let v15: Float = v14 - v14 in
    let v21: [Float] = v41[1] in
    var v72: [Float] = v21 in
    v72[0] = v14 in
    v72[0] = v14 in
    var v183: Float = v14 in
    v72[0] = v15 in
    let v79: Float = v72[0] in
    v72[0] = v79 in
    let v148: Float = v14 + v79 in
    let v87: [Float] = [v148, v183, v183] in
    let v236: Float = v87[2] in
    v236
  } in
  fun loop(i: Int, v0: s0, v1: [[s0]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]) in
    let v1: [[s0]] = [[s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]])], [s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]])], [s0([[15.0], [16.0], [17.0]], [[18.0], [19.0]])]] in
    let v2: Float = 20.0 in
    let initialResult: Float = 20.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()