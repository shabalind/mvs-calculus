  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: [s1]
  } in
  let noinline_f0: ([s2], s1, [s1], Float) -> Float = (v0: [s2], v1: s1, v2: [s1], v3: Float) -> Float {
    let v4: s2 = v0[1] in
    let v9: s1 = v2[2] in
    var v20: s1 = v9 in
    let v33: s0 = v20.p1 in
    v20.p1 = v33 in
    let v10: [s0] = v4.p0 in
    let v22: [[Float]] = v33.p1 in
    let v26: [Float] = v22[0] in
    v20.p0 = v10 in
    let v29: Float = v26[0] in
    let v46: s1 = v2[2] in
    let v97: s0 = v46.p1 in
    v20.p1 = v97 in
    v29
  } in
  fun loop(i: Int, v0: [s2], v1: s1, v2: [s1], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2([s0([[0.0]], [[1.0]]), s0([[2.0]], [[3.0]])], [s1([s0([[4.0]], [[5.0]]), s0([[6.0]], [[7.0]])], s0([[8.0]], [[9.0]])), s1([s0([[10.0]], [[11.0]]), s0([[12.0]], [[13.0]])], s0([[14.0]], [[15.0]])), s1([s0([[16.0]], [[17.0]]), s0([[18.0]], [[19.0]])], s0([[20.0]], [[21.0]]))]), s2([s0([[22.0]], [[23.0]]), s0([[24.0]], [[25.0]])], [s1([s0([[26.0]], [[27.0]]), s0([[28.0]], [[29.0]])], s0([[30.0]], [[31.0]])), s1([s0([[32.0]], [[33.0]]), s0([[34.0]], [[35.0]])], s0([[36.0]], [[37.0]])), s1([s0([[38.0]], [[39.0]]), s0([[40.0]], [[41.0]])], s0([[42.0]], [[43.0]]))])] in
    let v1: s1 = s1([s0([[44.0]], [[45.0]]), s0([[46.0]], [[47.0]])], s0([[48.0]], [[49.0]])) in
    let v2: [s1] = [s1([s0([[50.0]], [[51.0]]), s0([[52.0]], [[53.0]])], s0([[54.0]], [[55.0]])), s1([s0([[56.0]], [[57.0]]), s0([[58.0]], [[59.0]])], s0([[60.0]], [[61.0]])), s1([s0([[62.0]], [[63.0]]), s0([[64.0]], [[65.0]])], s0([[66.0]], [[67.0]]))] in
    let v3: Float = 68.0 in
    let initialResult: Float = 68.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()