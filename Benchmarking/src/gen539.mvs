  let noinline_f0: (Float) -> Float = (v0: Float) -> Float {
    var v1: Float = v0 in
    var v5: Float = v1 in
    let v3: [Float] = [v1, v5, v1, v0, v5, v1, v0] in
    v1 = v5 in
    let v6: Float = v3[3] in
    let v2: Float = v3[1] in
    let v10: Float = v3[3] in
    var v8: Float = v10 in
    var v7: [Float] = v3 in
    var v18: Float = v8 in
    var v23: Float = v18 in
    v7[1] = v1 in
    v7[3] = v23 in
    v7[0] = v2 in
    v7[5] = v6 in
    let v38: Float = v7[0] in
    var v36: [Float] = v3 in
    v36[0] = v38 in
    let v79: Float = v36[2] in
    v79
  } in
  fun loop(i: Int, v0: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0) in
      loop(i + 1, v0, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: Float = 0.0 in
    let initialResult: Float = 0.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()