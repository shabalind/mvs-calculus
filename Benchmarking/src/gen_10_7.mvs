  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s3 {
    var p0: [[s0]]
    var p1: s1
  } in
  let noinline_f0: ([s3], Float) -> Float = (v0: [s3], v1: Float) -> Float {
    let v6: s3 = v0[1] in
    let v3: s1 = v6.p1 in
    var v48: Float = v1 in
    let v30: [[s0]] = v3.p1 in
    var v19: [[s0]] = v30 in
    let v43: [s0] = v19[0] in
    let v36: s0 = v43[0] in
    let v54: [[Float]] = v36.p1 in
    var v71: [[Float]] = v54 in
    let v90: [Float] = v71[0] in
    v71 = v54 in
    let v111: Float = v90[0] in
    var v113: Float = v48 in
    let v66: Float = v111 * v113 in
    v66
  } in
  fun loop(i: Int, v0: [s3], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s3] = [s3([[s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]])], [s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]])]], s1(s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]]), [[s0([[15.0], [16.0]], [[17.0], [18.0], [19.0]])]])), s3([[s0([[20.0], [21.0]], [[22.0], [23.0], [24.0]])], [s0([[25.0], [26.0]], [[27.0], [28.0], [29.0]])]], s1(s0([[30.0], [31.0]], [[32.0], [33.0], [34.0]]), [[s0([[35.0], [36.0]], [[37.0], [38.0], [39.0]])]])), s3([[s0([[40.0], [41.0]], [[42.0], [43.0], [44.0]])], [s0([[45.0], [46.0]], [[47.0], [48.0], [49.0]])]], s1(s0([[50.0], [51.0]], [[52.0], [53.0], [54.0]]), [[s0([[55.0], [56.0]], [[57.0], [58.0], [59.0]])]]))] in
    let v1: Float = 60.0 in
    let initialResult: Float = 60.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()