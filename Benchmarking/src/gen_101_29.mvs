  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s3 {
    var p0: s1
    var p1: [s1]
  } in
  struct s4 {
    var p0: [[s0]]
    var p1: s3
  } in
  struct s6 {
    var p0: [Float]
    var p1: [s4]
  } in
  let noinline_f0: ([[s6]], Float) -> Float = (v0: [[s6]], v1: Float) -> Float {
    let v7: [s6] = v0[1] in
    let v8: s6 = v7[0] in
    let v12: [Float] = v8.p0 in
    let v10: Float = v12[2] in
    let v38: [Float] = [v1, v10, v1, v1] in
    let v37: Float = v1 + v10 in
    let v36: Float = v38[0] in
    let v32: Float = v36 + v36 in
    let v41: Float = v32 * v37 in
    let v116: Float = v41 / v41 in
    v116
  } in
  fun loop(i: Int, v0: [[s6]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s6]] = [[s6([0.0, 1.0, 2.0], [s4([[s0([[3.0]], [[4.0]])]], s3(s1([s0([[5.0]], [[6.0]])], [s0([[7.0]], [[8.0]]), s0([[9.0]], [[10.0]])]), [s1([s0([[11.0]], [[12.0]])], [s0([[13.0]], [[14.0]]), s0([[15.0]], [[16.0]])]), s1([s0([[17.0]], [[18.0]])], [s0([[19.0]], [[20.0]]), s0([[21.0]], [[22.0]])])])), s4([[s0([[23.0]], [[24.0]])]], s3(s1([s0([[25.0]], [[26.0]])], [s0([[27.0]], [[28.0]]), s0([[29.0]], [[30.0]])]), [s1([s0([[31.0]], [[32.0]])], [s0([[33.0]], [[34.0]]), s0([[35.0]], [[36.0]])]), s1([s0([[37.0]], [[38.0]])], [s0([[39.0]], [[40.0]]), s0([[41.0]], [[42.0]])])]))])], [s6([43.0, 44.0, 45.0], [s4([[s0([[46.0]], [[47.0]])]], s3(s1([s0([[48.0]], [[49.0]])], [s0([[50.0]], [[51.0]]), s0([[52.0]], [[53.0]])]), [s1([s0([[54.0]], [[55.0]])], [s0([[56.0]], [[57.0]]), s0([[58.0]], [[59.0]])]), s1([s0([[60.0]], [[61.0]])], [s0([[62.0]], [[63.0]]), s0([[64.0]], [[65.0]])])])), s4([[s0([[66.0]], [[67.0]])]], s3(s1([s0([[68.0]], [[69.0]])], [s0([[70.0]], [[71.0]]), s0([[72.0]], [[73.0]])]), [s1([s0([[74.0]], [[75.0]])], [s0([[76.0]], [[77.0]]), s0([[78.0]], [[79.0]])]), s1([s0([[80.0]], [[81.0]])], [s0([[82.0]], [[83.0]]), s0([[84.0]], [[85.0]])])]))])], [s6([86.0, 87.0, 88.0], [s4([[s0([[89.0]], [[90.0]])]], s3(s1([s0([[91.0]], [[92.0]])], [s0([[93.0]], [[94.0]]), s0([[95.0]], [[96.0]])]), [s1([s0([[97.0]], [[98.0]])], [s0([[99.0]], [[100.0]]), s0([[101.0]], [[102.0]])]), s1([s0([[103.0]], [[104.0]])], [s0([[105.0]], [[106.0]]), s0([[107.0]], [[108.0]])])])), s4([[s0([[109.0]], [[110.0]])]], s3(s1([s0([[111.0]], [[112.0]])], [s0([[113.0]], [[114.0]]), s0([[115.0]], [[116.0]])]), [s1([s0([[117.0]], [[118.0]])], [s0([[119.0]], [[120.0]]), s0([[121.0]], [[122.0]])]), s1([s0([[123.0]], [[124.0]])], [s0([[125.0]], [[126.0]]), s0([[127.0]], [[128.0]])])]))])]] in
    let v1: Float = 129.0 in
    let initialResult: Float = 129.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()