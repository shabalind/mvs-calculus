  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let f93: (s0) -> s0 = (v0: s0) -> s0 {
    let v8: [[Float]] = v0.p1 in
    let v6: [[[Float]]] = [v8, v8, v8, v8, v8] in
    let v17: [[Float]] = v6[0] in
    var v20: s0 = v0 in
    v20.p1 = v17 in
    v20 = v0 in
    v20.p1 = v17 in
    v20
  } in
  let noinline_f0: ([s0], [s0], s0, s0, Float) -> Float = (v0: [s0], v1: [s0], v2: s0, v3: s0, v4: Float) -> Float {
    let v5: s0 = f93(v3) in
    let v12: [[Float]] = v5.p1 in
    let v13: [Float] = v12[0] in
    let v42: Float = v13[0] in
    v42
  } in
  fun loop(i: Int, v0: [s0], v1: [s0], v2: s0, v3: s0, v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0]], [[1.0], [2.0]])] in
    let v1: [s0] = [s0([[3.0]], [[4.0], [5.0]]), s0([[6.0]], [[7.0], [8.0]])] in
    let v2: s0 = s0([[9.0]], [[10.0], [11.0]]) in
    let v3: s0 = s0([[12.0]], [[13.0], [14.0]]) in
    let v4: Float = 15.0 in
    let initialResult: Float = 15.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()