  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
  }
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
  }
  struct s2 {
    var p0: [s0]
    var p1: [s1]
  }
  struct s3 {
    var p0: [s2]
    var p1: s1
  }
  struct s4 {
    var p0: s3
    var p1: [s1]
  }
  struct s5 {
    var p0: [s1]
    var p1: [s2]
  }
  struct s7 {
    var p0: [[Double]]
    var p1: s4
  }
  struct s8 {
    var p0: s5
    var p1: s7
  }
  func f76(_ v0: s7) -> s7 {
    let v2: s4 = v0.p1
    let v3: [[Double]] = v0.p0
    let v17: [[[Double]]] = [v3, v3, v3, v3, v3, v3]
    let v29: [[Double]] = v17[2]
    let v178: s7 = s7(p0: v29, p1: v2)
    return v178
  }
  @inline(never)
  func f0(_ v0: s8, _ v1: [s7], _ v2: Double) -> Double {
    let v6: s7 = v0.p1
    let v3: s7 = f76(v6)
    let v8: [[Double]] = v3.p0
    let v4: [[Double]] = v6.p0
    let v12: [Double] = v8[1]
    let v25: [Double] = v4[0]
    let v57: Double = v12[0]
    let v50: Double = v25[0]
    let v49: Double = v57 * v50
    return v49
  }
  func benchmark() {
    let v0: s8 = s8(p0: s5(p0: [s1(p0: [[s0(p0: [[0.0], [1.0]], p1: [[2.0]], p2: [[3.0], [4.0], [5.0]], p3: [[6.0], [7.0], [8.0]])], [s0(p0: [[9.0], [10.0]], p1: [[11.0]], p2: [[12.0], [13.0], [14.0]], p3: [[15.0], [16.0], [17.0]])]], p1: [s0(p0: [[18.0], [19.0]], p1: [[20.0]], p2: [[21.0], [22.0], [23.0]], p3: [[24.0], [25.0], [26.0]])]), s1(p0: [[s0(p0: [[27.0], [28.0]], p1: [[29.0]], p2: [[30.0], [31.0], [32.0]], p3: [[33.0], [34.0], [35.0]])], [s0(p0: [[36.0], [37.0]], p1: [[38.0]], p2: [[39.0], [40.0], [41.0]], p3: [[42.0], [43.0], [44.0]])]], p1: [s0(p0: [[45.0], [46.0]], p1: [[47.0]], p2: [[48.0], [49.0], [50.0]], p3: [[51.0], [52.0], [53.0]])]), s1(p0: [[s0(p0: [[54.0], [55.0]], p1: [[56.0]], p2: [[57.0], [58.0], [59.0]], p3: [[60.0], [61.0], [62.0]])], [s0(p0: [[63.0], [64.0]], p1: [[65.0]], p2: [[66.0], [67.0], [68.0]], p3: [[69.0], [70.0], [71.0]])]], p1: [s0(p0: [[72.0], [73.0]], p1: [[74.0]], p2: [[75.0], [76.0], [77.0]], p3: [[78.0], [79.0], [80.0]])])], p1: [s2(p0: [s0(p0: [[81.0], [82.0]], p1: [[83.0]], p2: [[84.0], [85.0], [86.0]], p3: [[87.0], [88.0], [89.0]]), s0(p0: [[90.0], [91.0]], p1: [[92.0]], p2: [[93.0], [94.0], [95.0]], p3: [[96.0], [97.0], [98.0]]), s0(p0: [[99.0], [100.0]], p1: [[101.0]], p2: [[102.0], [103.0], [104.0]], p3: [[105.0], [106.0], [107.0]])], p1: [s1(p0: [[s0(p0: [[108.0], [109.0]], p1: [[110.0]], p2: [[111.0], [112.0], [113.0]], p3: [[114.0], [115.0], [116.0]])], [s0(p0: [[117.0], [118.0]], p1: [[119.0]], p2: [[120.0], [121.0], [122.0]], p3: [[123.0], [124.0], [125.0]])]], p1: [s0(p0: [[126.0], [127.0]], p1: [[128.0]], p2: [[129.0], [130.0], [131.0]], p3: [[132.0], [133.0], [134.0]])])])]), p1: s7(p0: [[135.0], [136.0], [137.0]], p1: s4(p0: s3(p0: [s2(p0: [s0(p0: [[138.0], [139.0]], p1: [[140.0]], p2: [[141.0], [142.0], [143.0]], p3: [[144.0], [145.0], [146.0]]), s0(p0: [[147.0], [148.0]], p1: [[149.0]], p2: [[150.0], [151.0], [152.0]], p3: [[153.0], [154.0], [155.0]]), s0(p0: [[156.0], [157.0]], p1: [[158.0]], p2: [[159.0], [160.0], [161.0]], p3: [[162.0], [163.0], [164.0]])], p1: [s1(p0: [[s0(p0: [[165.0], [166.0]], p1: [[167.0]], p2: [[168.0], [169.0], [170.0]], p3: [[171.0], [172.0], [173.0]])], [s0(p0: [[174.0], [175.0]], p1: [[176.0]], p2: [[177.0], [178.0], [179.0]], p3: [[180.0], [181.0], [182.0]])]], p1: [s0(p0: [[183.0], [184.0]], p1: [[185.0]], p2: [[186.0], [187.0], [188.0]], p3: [[189.0], [190.0], [191.0]])])]), s2(p0: [s0(p0: [[192.0], [193.0]], p1: [[194.0]], p2: [[195.0], [196.0], [197.0]], p3: [[198.0], [199.0], [200.0]]), s0(p0: [[201.0], [202.0]], p1: [[203.0]], p2: [[204.0], [205.0], [206.0]], p3: [[207.0], [208.0], [209.0]]), s0(p0: [[210.0], [211.0]], p1: [[212.0]], p2: [[213.0], [214.0], [215.0]], p3: [[216.0], [217.0], [218.0]])], p1: [s1(p0: [[s0(p0: [[219.0], [220.0]], p1: [[221.0]], p2: [[222.0], [223.0], [224.0]], p3: [[225.0], [226.0], [227.0]])], [s0(p0: [[228.0], [229.0]], p1: [[230.0]], p2: [[231.0], [232.0], [233.0]], p3: [[234.0], [235.0], [236.0]])]], p1: [s0(p0: [[237.0], [238.0]], p1: [[239.0]], p2: [[240.0], [241.0], [242.0]], p3: [[243.0], [244.0], [245.0]])])]), s2(p0: [s0(p0: [[246.0], [247.0]], p1: [[248.0]], p2: [[249.0], [250.0], [251.0]], p3: [[252.0], [253.0], [254.0]]), s0(p0: [[255.0], [256.0]], p1: [[257.0]], p2: [[258.0], [259.0], [260.0]], p3: [[261.0], [262.0], [263.0]]), s0(p0: [[264.0], [265.0]], p1: [[266.0]], p2: [[267.0], [268.0], [269.0]], p3: [[270.0], [271.0], [272.0]])], p1: [s1(p0: [[s0(p0: [[273.0], [274.0]], p1: [[275.0]], p2: [[276.0], [277.0], [278.0]], p3: [[279.0], [280.0], [281.0]])], [s0(p0: [[282.0], [283.0]], p1: [[284.0]], p2: [[285.0], [286.0], [287.0]], p3: [[288.0], [289.0], [290.0]])]], p1: [s0(p0: [[291.0], [292.0]], p1: [[293.0]], p2: [[294.0], [295.0], [296.0]], p3: [[297.0], [298.0], [299.0]])])])], p1: s1(p0: [[s0(p0: [[300.0], [301.0]], p1: [[302.0]], p2: [[303.0], [304.0], [305.0]], p3: [[306.0], [307.0], [308.0]])], [s0(p0: [[309.0], [310.0]], p1: [[311.0]], p2: [[312.0], [313.0], [314.0]], p3: [[315.0], [316.0], [317.0]])]], p1: [s0(p0: [[318.0], [319.0]], p1: [[320.0]], p2: [[321.0], [322.0], [323.0]], p3: [[324.0], [325.0], [326.0]])])), p1: [s1(p0: [[s0(p0: [[327.0], [328.0]], p1: [[329.0]], p2: [[330.0], [331.0], [332.0]], p3: [[333.0], [334.0], [335.0]])], [s0(p0: [[336.0], [337.0]], p1: [[338.0]], p2: [[339.0], [340.0], [341.0]], p3: [[342.0], [343.0], [344.0]])]], p1: [s0(p0: [[345.0], [346.0]], p1: [[347.0]], p2: [[348.0], [349.0], [350.0]], p3: [[351.0], [352.0], [353.0]])]), s1(p0: [[s0(p0: [[354.0], [355.0]], p1: [[356.0]], p2: [[357.0], [358.0], [359.0]], p3: [[360.0], [361.0], [362.0]])], [s0(p0: [[363.0], [364.0]], p1: [[365.0]], p2: [[366.0], [367.0], [368.0]], p3: [[369.0], [370.0], [371.0]])]], p1: [s0(p0: [[372.0], [373.0]], p1: [[374.0]], p2: [[375.0], [376.0], [377.0]], p3: [[378.0], [379.0], [380.0]])])])))
    let v1: [s7] = [s7(p0: [[381.0], [382.0], [383.0]], p1: s4(p0: s3(p0: [s2(p0: [s0(p0: [[384.0], [385.0]], p1: [[386.0]], p2: [[387.0], [388.0], [389.0]], p3: [[390.0], [391.0], [392.0]]), s0(p0: [[393.0], [394.0]], p1: [[395.0]], p2: [[396.0], [397.0], [398.0]], p3: [[399.0], [400.0], [401.0]]), s0(p0: [[402.0], [403.0]], p1: [[404.0]], p2: [[405.0], [406.0], [407.0]], p3: [[408.0], [409.0], [410.0]])], p1: [s1(p0: [[s0(p0: [[411.0], [412.0]], p1: [[413.0]], p2: [[414.0], [415.0], [416.0]], p3: [[417.0], [418.0], [419.0]])], [s0(p0: [[420.0], [421.0]], p1: [[422.0]], p2: [[423.0], [424.0], [425.0]], p3: [[426.0], [427.0], [428.0]])]], p1: [s0(p0: [[429.0], [430.0]], p1: [[431.0]], p2: [[432.0], [433.0], [434.0]], p3: [[435.0], [436.0], [437.0]])])]), s2(p0: [s0(p0: [[438.0], [439.0]], p1: [[440.0]], p2: [[441.0], [442.0], [443.0]], p3: [[444.0], [445.0], [446.0]]), s0(p0: [[447.0], [448.0]], p1: [[449.0]], p2: [[450.0], [451.0], [452.0]], p3: [[453.0], [454.0], [455.0]]), s0(p0: [[456.0], [457.0]], p1: [[458.0]], p2: [[459.0], [460.0], [461.0]], p3: [[462.0], [463.0], [464.0]])], p1: [s1(p0: [[s0(p0: [[465.0], [466.0]], p1: [[467.0]], p2: [[468.0], [469.0], [470.0]], p3: [[471.0], [472.0], [473.0]])], [s0(p0: [[474.0], [475.0]], p1: [[476.0]], p2: [[477.0], [478.0], [479.0]], p3: [[480.0], [481.0], [482.0]])]], p1: [s0(p0: [[483.0], [484.0]], p1: [[485.0]], p2: [[486.0], [487.0], [488.0]], p3: [[489.0], [490.0], [491.0]])])]), s2(p0: [s0(p0: [[492.0], [493.0]], p1: [[494.0]], p2: [[495.0], [496.0], [497.0]], p3: [[498.0], [499.0], [500.0]]), s0(p0: [[501.0], [502.0]], p1: [[503.0]], p2: [[504.0], [505.0], [506.0]], p3: [[507.0], [508.0], [509.0]]), s0(p0: [[510.0], [511.0]], p1: [[512.0]], p2: [[513.0], [514.0], [515.0]], p3: [[516.0], [517.0], [518.0]])], p1: [s1(p0: [[s0(p0: [[519.0], [520.0]], p1: [[521.0]], p2: [[522.0], [523.0], [524.0]], p3: [[525.0], [526.0], [527.0]])], [s0(p0: [[528.0], [529.0]], p1: [[530.0]], p2: [[531.0], [532.0], [533.0]], p3: [[534.0], [535.0], [536.0]])]], p1: [s0(p0: [[537.0], [538.0]], p1: [[539.0]], p2: [[540.0], [541.0], [542.0]], p3: [[543.0], [544.0], [545.0]])])])], p1: s1(p0: [[s0(p0: [[546.0], [547.0]], p1: [[548.0]], p2: [[549.0], [550.0], [551.0]], p3: [[552.0], [553.0], [554.0]])], [s0(p0: [[555.0], [556.0]], p1: [[557.0]], p2: [[558.0], [559.0], [560.0]], p3: [[561.0], [562.0], [563.0]])]], p1: [s0(p0: [[564.0], [565.0]], p1: [[566.0]], p2: [[567.0], [568.0], [569.0]], p3: [[570.0], [571.0], [572.0]])])), p1: [s1(p0: [[s0(p0: [[573.0], [574.0]], p1: [[575.0]], p2: [[576.0], [577.0], [578.0]], p3: [[579.0], [580.0], [581.0]])], [s0(p0: [[582.0], [583.0]], p1: [[584.0]], p2: [[585.0], [586.0], [587.0]], p3: [[588.0], [589.0], [590.0]])]], p1: [s0(p0: [[591.0], [592.0]], p1: [[593.0]], p2: [[594.0], [595.0], [596.0]], p3: [[597.0], [598.0], [599.0]])]), s1(p0: [[s0(p0: [[600.0], [601.0]], p1: [[602.0]], p2: [[603.0], [604.0], [605.0]], p3: [[606.0], [607.0], [608.0]])], [s0(p0: [[609.0], [610.0]], p1: [[611.0]], p2: [[612.0], [613.0], [614.0]], p3: [[615.0], [616.0], [617.0]])]], p1: [s0(p0: [[618.0], [619.0]], p1: [[620.0]], p2: [[621.0], [622.0], [623.0]], p3: [[624.0], [625.0], [626.0]])])])), s7(p0: [[627.0], [628.0], [629.0]], p1: s4(p0: s3(p0: [s2(p0: [s0(p0: [[630.0], [631.0]], p1: [[632.0]], p2: [[633.0], [634.0], [635.0]], p3: [[636.0], [637.0], [638.0]]), s0(p0: [[639.0], [640.0]], p1: [[641.0]], p2: [[642.0], [643.0], [644.0]], p3: [[645.0], [646.0], [647.0]]), s0(p0: [[648.0], [649.0]], p1: [[650.0]], p2: [[651.0], [652.0], [653.0]], p3: [[654.0], [655.0], [656.0]])], p1: [s1(p0: [[s0(p0: [[657.0], [658.0]], p1: [[659.0]], p2: [[660.0], [661.0], [662.0]], p3: [[663.0], [664.0], [665.0]])], [s0(p0: [[666.0], [667.0]], p1: [[668.0]], p2: [[669.0], [670.0], [671.0]], p3: [[672.0], [673.0], [674.0]])]], p1: [s0(p0: [[675.0], [676.0]], p1: [[677.0]], p2: [[678.0], [679.0], [680.0]], p3: [[681.0], [682.0], [683.0]])])]), s2(p0: [s0(p0: [[684.0], [685.0]], p1: [[686.0]], p2: [[687.0], [688.0], [689.0]], p3: [[690.0], [691.0], [692.0]]), s0(p0: [[693.0], [694.0]], p1: [[695.0]], p2: [[696.0], [697.0], [698.0]], p3: [[699.0], [700.0], [701.0]]), s0(p0: [[702.0], [703.0]], p1: [[704.0]], p2: [[705.0], [706.0], [707.0]], p3: [[708.0], [709.0], [710.0]])], p1: [s1(p0: [[s0(p0: [[711.0], [712.0]], p1: [[713.0]], p2: [[714.0], [715.0], [716.0]], p3: [[717.0], [718.0], [719.0]])], [s0(p0: [[720.0], [721.0]], p1: [[722.0]], p2: [[723.0], [724.0], [725.0]], p3: [[726.0], [727.0], [728.0]])]], p1: [s0(p0: [[729.0], [730.0]], p1: [[731.0]], p2: [[732.0], [733.0], [734.0]], p3: [[735.0], [736.0], [737.0]])])]), s2(p0: [s0(p0: [[738.0], [739.0]], p1: [[740.0]], p2: [[741.0], [742.0], [743.0]], p3: [[744.0], [745.0], [746.0]]), s0(p0: [[747.0], [748.0]], p1: [[749.0]], p2: [[750.0], [751.0], [752.0]], p3: [[753.0], [754.0], [755.0]]), s0(p0: [[756.0], [757.0]], p1: [[758.0]], p2: [[759.0], [760.0], [761.0]], p3: [[762.0], [763.0], [764.0]])], p1: [s1(p0: [[s0(p0: [[765.0], [766.0]], p1: [[767.0]], p2: [[768.0], [769.0], [770.0]], p3: [[771.0], [772.0], [773.0]])], [s0(p0: [[774.0], [775.0]], p1: [[776.0]], p2: [[777.0], [778.0], [779.0]], p3: [[780.0], [781.0], [782.0]])]], p1: [s0(p0: [[783.0], [784.0]], p1: [[785.0]], p2: [[786.0], [787.0], [788.0]], p3: [[789.0], [790.0], [791.0]])])])], p1: s1(p0: [[s0(p0: [[792.0], [793.0]], p1: [[794.0]], p2: [[795.0], [796.0], [797.0]], p3: [[798.0], [799.0], [800.0]])], [s0(p0: [[801.0], [802.0]], p1: [[803.0]], p2: [[804.0], [805.0], [806.0]], p3: [[807.0], [808.0], [809.0]])]], p1: [s0(p0: [[810.0], [811.0]], p1: [[812.0]], p2: [[813.0], [814.0], [815.0]], p3: [[816.0], [817.0], [818.0]])])), p1: [s1(p0: [[s0(p0: [[819.0], [820.0]], p1: [[821.0]], p2: [[822.0], [823.0], [824.0]], p3: [[825.0], [826.0], [827.0]])], [s0(p0: [[828.0], [829.0]], p1: [[830.0]], p2: [[831.0], [832.0], [833.0]], p3: [[834.0], [835.0], [836.0]])]], p1: [s0(p0: [[837.0], [838.0]], p1: [[839.0]], p2: [[840.0], [841.0], [842.0]], p3: [[843.0], [844.0], [845.0]])]), s1(p0: [[s0(p0: [[846.0], [847.0]], p1: [[848.0]], p2: [[849.0], [850.0], [851.0]], p3: [[852.0], [853.0], [854.0]])], [s0(p0: [[855.0], [856.0]], p1: [[857.0]], p2: [[858.0], [859.0], [860.0]], p3: [[861.0], [862.0], [863.0]])]], p1: [s0(p0: [[864.0], [865.0]], p1: [[866.0]], p2: [[867.0], [868.0], [869.0]], p3: [[870.0], [871.0], [872.0]])])]))]
    let v2: Double = 873.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 873.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
