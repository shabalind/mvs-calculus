  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  let noinline_f0: ([[s1]], [s1], Float) -> Float = (v0: [[s1]], v1: [s1], v2: Float) -> Float {
    var v8: Float = v2 in
    let v6: [Float] = [v8, v2, v2, v2, v8, v2] in
    let v15: s1 = v1[0] in
    let v13: s0 = v15.p0 in
    let v21: [[Float]] = v13.p0 in
    let v30: [Float] = v21[1] in
    let v32: Float = v30[0] in
    var v63: [Float] = v6 in
    v63[1] = v32 in
    let v103: Float = v63[2] in
    v103
  } in
  fun loop(i: Int, v0: [[s1]], v1: [s1], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s1]] = [[s1(s0([[0.0], [1.0]], [[2.0], [3.0]]), s0([[4.0], [5.0]], [[6.0], [7.0]]))], [s1(s0([[8.0], [9.0]], [[10.0], [11.0]]), s0([[12.0], [13.0]], [[14.0], [15.0]]))], [s1(s0([[16.0], [17.0]], [[18.0], [19.0]]), s0([[20.0], [21.0]], [[22.0], [23.0]]))]] in
    let v1: [s1] = [s1(s0([[24.0], [25.0]], [[26.0], [27.0]]), s0([[28.0], [29.0]], [[30.0], [31.0]]))] in
    let v2: Float = 32.0 in
    let initialResult: Float = 32.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()