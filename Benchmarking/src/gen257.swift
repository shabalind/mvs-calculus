  import Dispatch
  struct s0 {
    var p0: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
    var p2: s0
  }
  struct s2 {
    var p0: Double
    var p1: [s0]
    var p2: [[s0]]
    var p3: [s1]
  }
  struct s3 {
    var p0: [s1]
    var p1: s2
  }
  struct s4 {
    var p0: [s1]
    var p1: s3
  }
  struct s5 {
    var p0: s1
    var p1: s1
  }
  struct s7 {
    var p0: s1
    var p1: s4
  }
  struct s9 {
    var p0: s3
    var p1: s2
  }
  struct s12 {
    var p0: s7
    var p1: s9
  }
  func f107(_ v0: s2) -> s2 {
    let v3: [[s0]] = v0.p2
    var v6: [[s0]] = v3
    let v2: Double = v0.p0
    var v7: [[s0]] = v3
    let v11: [s0] = v6[1]
    v6[1] = v11
    let v5: [s0] = v6[0]
    var v1: Double = v2
    var v13: Double = v2
    var v10: s2 = v0
    let v8: [s1] = v10.p3
    let v14: [s0] = v3[0]
    let v23: [s1] = v0.p3
    v6[0] = v14
    let v30: [s0] = v6[1]
    v10.p0 = v2
    var v15: [[s0]] = v7
    let v44: s0 = v5[0]
    var v40: s2 = v10
    v6[0] = v5
    let v43: [s1] = v0.p3
    let v28: s1 = v43[0]
    let v51: [[s0]] = v0.p2
    let v56: [[Double]] = v44.p0
    let v72: [s0] = v51[1]
    var v62: [[Double]] = v56
    v7[1] = v30
    v40.p2 = v15
    let v41: [Double] = v62[1]
    var v75: Double = v1
    let v48: s1 = v23[1]
    let v66: s5 = s5(p0: v48, p1: v48)
    v10.p3 = v43
    var v53: [s1] = v8
    var v49: s2 = v0
    let v103: Double = v41[0]
    v40.p2 = v51
    var v95: [s1] = v23
    let v78: s1 = v66.p1
    let v58: Double = v41[0]
    let v42: [s0] = v40.p1
    let v85: [s1] = v10.p3
    let v112: s5 = s5(p0: v28, p1: v78)
    v10.p3 = v95
    v62[0] = v41
    v49.p3 = v53
    v15[1] = v11
    let v150: [s0] = v3[1]
    v7[1] = v72
    v6[1] = v150
    let v160: s1 = v112.p1
    var v106: [s0] = v42
    v49.p0 = v103
    let v138: [s0] = v49.p1
    v53[1] = v160
    var v216: Double = v13
    v40.p0 = v216
    v13 = v75
    let v193: s2 = s2(p0: v58, p1: v106, p2: v7, p3: v85)
    v10.p1 = v138
    return v193
  }
  @inline(never)
  func f0(_ v0: s12, _ v1: s9, _ v2: Double) -> Double {
    var v5: Double = v2
    let v6: s2 = v1.p1
    var v4: s2 = v6
    let v10: s2 = v1.p1
    let v14: [[s0]] = v4.p2
    let v16: [s1] = v10.p3
    let v13: s2 = f107(v10)
    let v22: [s0] = v14[0]
    let v25: s0 = v22[0]
    v4.p3 = v16
    let v32: Double = v13.p0
    let v39: Double = v32 / v5
    let v70: [[Double]] = v25.p0
    var v47: [[Double]] = v70
    v4.p0 = v5
    v4.p0 = v39
    let v82: [Double] = v47[1]
    let v112: Double = v82[0]
    return v112
  }
  func benchmark() {
    let v0: s12 = s12(p0: s7(p0: s1(p0: s0(p0: [[0.0], [1.0], [2.0]]), p1: [s0(p0: [[3.0], [4.0], [5.0]]), s0(p0: [[6.0], [7.0], [8.0]]), s0(p0: [[9.0], [10.0], [11.0]])], p2: s0(p0: [[12.0], [13.0], [14.0]])), p1: s4(p0: [s1(p0: s0(p0: [[15.0], [16.0], [17.0]]), p1: [s0(p0: [[18.0], [19.0], [20.0]]), s0(p0: [[21.0], [22.0], [23.0]]), s0(p0: [[24.0], [25.0], [26.0]])], p2: s0(p0: [[27.0], [28.0], [29.0]])), s1(p0: s0(p0: [[30.0], [31.0], [32.0]]), p1: [s0(p0: [[33.0], [34.0], [35.0]]), s0(p0: [[36.0], [37.0], [38.0]]), s0(p0: [[39.0], [40.0], [41.0]])], p2: s0(p0: [[42.0], [43.0], [44.0]]))], p1: s3(p0: [s1(p0: s0(p0: [[45.0], [46.0], [47.0]]), p1: [s0(p0: [[48.0], [49.0], [50.0]]), s0(p0: [[51.0], [52.0], [53.0]]), s0(p0: [[54.0], [55.0], [56.0]])], p2: s0(p0: [[57.0], [58.0], [59.0]])), s1(p0: s0(p0: [[60.0], [61.0], [62.0]]), p1: [s0(p0: [[63.0], [64.0], [65.0]]), s0(p0: [[66.0], [67.0], [68.0]]), s0(p0: [[69.0], [70.0], [71.0]])], p2: s0(p0: [[72.0], [73.0], [74.0]])), s1(p0: s0(p0: [[75.0], [76.0], [77.0]]), p1: [s0(p0: [[78.0], [79.0], [80.0]]), s0(p0: [[81.0], [82.0], [83.0]]), s0(p0: [[84.0], [85.0], [86.0]])], p2: s0(p0: [[87.0], [88.0], [89.0]]))], p1: s2(p0: 90.0, p1: [s0(p0: [[91.0], [92.0], [93.0]]), s0(p0: [[94.0], [95.0], [96.0]]), s0(p0: [[97.0], [98.0], [99.0]])], p2: [[s0(p0: [[100.0], [101.0], [102.0]])], [s0(p0: [[103.0], [104.0], [105.0]])]], p3: [s1(p0: s0(p0: [[106.0], [107.0], [108.0]]), p1: [s0(p0: [[109.0], [110.0], [111.0]]), s0(p0: [[112.0], [113.0], [114.0]]), s0(p0: [[115.0], [116.0], [117.0]])], p2: s0(p0: [[118.0], [119.0], [120.0]])), s1(p0: s0(p0: [[121.0], [122.0], [123.0]]), p1: [s0(p0: [[124.0], [125.0], [126.0]]), s0(p0: [[127.0], [128.0], [129.0]]), s0(p0: [[130.0], [131.0], [132.0]])], p2: s0(p0: [[133.0], [134.0], [135.0]]))])))), p1: s9(p0: s3(p0: [s1(p0: s0(p0: [[136.0], [137.0], [138.0]]), p1: [s0(p0: [[139.0], [140.0], [141.0]]), s0(p0: [[142.0], [143.0], [144.0]]), s0(p0: [[145.0], [146.0], [147.0]])], p2: s0(p0: [[148.0], [149.0], [150.0]])), s1(p0: s0(p0: [[151.0], [152.0], [153.0]]), p1: [s0(p0: [[154.0], [155.0], [156.0]]), s0(p0: [[157.0], [158.0], [159.0]]), s0(p0: [[160.0], [161.0], [162.0]])], p2: s0(p0: [[163.0], [164.0], [165.0]])), s1(p0: s0(p0: [[166.0], [167.0], [168.0]]), p1: [s0(p0: [[169.0], [170.0], [171.0]]), s0(p0: [[172.0], [173.0], [174.0]]), s0(p0: [[175.0], [176.0], [177.0]])], p2: s0(p0: [[178.0], [179.0], [180.0]]))], p1: s2(p0: 181.0, p1: [s0(p0: [[182.0], [183.0], [184.0]]), s0(p0: [[185.0], [186.0], [187.0]]), s0(p0: [[188.0], [189.0], [190.0]])], p2: [[s0(p0: [[191.0], [192.0], [193.0]])], [s0(p0: [[194.0], [195.0], [196.0]])]], p3: [s1(p0: s0(p0: [[197.0], [198.0], [199.0]]), p1: [s0(p0: [[200.0], [201.0], [202.0]]), s0(p0: [[203.0], [204.0], [205.0]]), s0(p0: [[206.0], [207.0], [208.0]])], p2: s0(p0: [[209.0], [210.0], [211.0]])), s1(p0: s0(p0: [[212.0], [213.0], [214.0]]), p1: [s0(p0: [[215.0], [216.0], [217.0]]), s0(p0: [[218.0], [219.0], [220.0]]), s0(p0: [[221.0], [222.0], [223.0]])], p2: s0(p0: [[224.0], [225.0], [226.0]]))])), p1: s2(p0: 227.0, p1: [s0(p0: [[228.0], [229.0], [230.0]]), s0(p0: [[231.0], [232.0], [233.0]]), s0(p0: [[234.0], [235.0], [236.0]])], p2: [[s0(p0: [[237.0], [238.0], [239.0]])], [s0(p0: [[240.0], [241.0], [242.0]])]], p3: [s1(p0: s0(p0: [[243.0], [244.0], [245.0]]), p1: [s0(p0: [[246.0], [247.0], [248.0]]), s0(p0: [[249.0], [250.0], [251.0]]), s0(p0: [[252.0], [253.0], [254.0]])], p2: s0(p0: [[255.0], [256.0], [257.0]])), s1(p0: s0(p0: [[258.0], [259.0], [260.0]]), p1: [s0(p0: [[261.0], [262.0], [263.0]]), s0(p0: [[264.0], [265.0], [266.0]]), s0(p0: [[267.0], [268.0], [269.0]])], p2: s0(p0: [[270.0], [271.0], [272.0]]))])))
    let v1: s9 = s9(p0: s3(p0: [s1(p0: s0(p0: [[273.0], [274.0], [275.0]]), p1: [s0(p0: [[276.0], [277.0], [278.0]]), s0(p0: [[279.0], [280.0], [281.0]]), s0(p0: [[282.0], [283.0], [284.0]])], p2: s0(p0: [[285.0], [286.0], [287.0]])), s1(p0: s0(p0: [[288.0], [289.0], [290.0]]), p1: [s0(p0: [[291.0], [292.0], [293.0]]), s0(p0: [[294.0], [295.0], [296.0]]), s0(p0: [[297.0], [298.0], [299.0]])], p2: s0(p0: [[300.0], [301.0], [302.0]])), s1(p0: s0(p0: [[303.0], [304.0], [305.0]]), p1: [s0(p0: [[306.0], [307.0], [308.0]]), s0(p0: [[309.0], [310.0], [311.0]]), s0(p0: [[312.0], [313.0], [314.0]])], p2: s0(p0: [[315.0], [316.0], [317.0]]))], p1: s2(p0: 318.0, p1: [s0(p0: [[319.0], [320.0], [321.0]]), s0(p0: [[322.0], [323.0], [324.0]]), s0(p0: [[325.0], [326.0], [327.0]])], p2: [[s0(p0: [[328.0], [329.0], [330.0]])], [s0(p0: [[331.0], [332.0], [333.0]])]], p3: [s1(p0: s0(p0: [[334.0], [335.0], [336.0]]), p1: [s0(p0: [[337.0], [338.0], [339.0]]), s0(p0: [[340.0], [341.0], [342.0]]), s0(p0: [[343.0], [344.0], [345.0]])], p2: s0(p0: [[346.0], [347.0], [348.0]])), s1(p0: s0(p0: [[349.0], [350.0], [351.0]]), p1: [s0(p0: [[352.0], [353.0], [354.0]]), s0(p0: [[355.0], [356.0], [357.0]]), s0(p0: [[358.0], [359.0], [360.0]])], p2: s0(p0: [[361.0], [362.0], [363.0]]))])), p1: s2(p0: 364.0, p1: [s0(p0: [[365.0], [366.0], [367.0]]), s0(p0: [[368.0], [369.0], [370.0]]), s0(p0: [[371.0], [372.0], [373.0]])], p2: [[s0(p0: [[374.0], [375.0], [376.0]])], [s0(p0: [[377.0], [378.0], [379.0]])]], p3: [s1(p0: s0(p0: [[380.0], [381.0], [382.0]]), p1: [s0(p0: [[383.0], [384.0], [385.0]]), s0(p0: [[386.0], [387.0], [388.0]]), s0(p0: [[389.0], [390.0], [391.0]])], p2: s0(p0: [[392.0], [393.0], [394.0]])), s1(p0: s0(p0: [[395.0], [396.0], [397.0]]), p1: [s0(p0: [[398.0], [399.0], [400.0]]), s0(p0: [[401.0], [402.0], [403.0]]), s0(p0: [[404.0], [405.0], [406.0]])], p2: s0(p0: [[407.0], [408.0], [409.0]]))]))
    let v2: Double = 410.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 410.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
