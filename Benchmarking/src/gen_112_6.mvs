  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s2 {
    var p0: [s0]
    var p1: s1
    var p2: s1
    var p3: s0
    var p4: [s0]
  } in
  struct s3 {
    var p0: [s2]
    var p1: s1
  } in
  struct s5 {
    var p0: s3
    var p1: s0
  } in
  struct s6 {
    var p0: [s5]
    var p1: s0
  } in
  struct s7 {
    var p0: s5
    var p1: s6
  } in
  struct s12 {
    var p0: [s0]
    var p1: s1
  } in
  let f74: (s0) -> s0 = (v0: s0) -> s0 {
    let v1: [[Float]] = v0.p1 in
    var v2: s0 = v0 in
    let v7: [Float] = v1[0] in
    var v9: [[Float]] = v1 in
    let v5: [Float] = v9[0] in
    let v13: [[Float]] = v0.p0 in
    var v6: [[Float]] = v13 in
    var v3: [[Float]] = v9 in
    let v8: [[Float]] = v2.p1 in
    v6[0] = v5 in
    let v10: [[[Float]]] = [v3, v8, v6, v9, v9, v3, v8] in
    let v12: [[Float]] = v2.p0 in
    v3 = v1 in
    v2.p1 = v3 in
    var v19: [Float] = v7 in
    v3[0] = v19 in
    v2.p0 = v1 in
    let v17: [[Float]] = v2.p0 in
    v2.p0 = v13 in
    var v11: s0 = v2 in
    let v18: [[Float]] = v2.p1 in
    let v21: [[Float]] = v11.p0 in
    v2.p0 = v8 in
    let v15: [Float] = v6[0] in
    let v23: [Float] = v21[0] in
    let v16: [[Float]] = [v23, v5, v23, v15, v23] in
    var v20: [Float] = v19 in
    var v24: s0 = v2 in
    var v25: [Float] = v7 in
    v6[0] = v19 in
    v24 = v11 in
    let v30: s0 = s0(v3, v3) in
    let v14: Float = v20[0] in
    var v28: Float = v14 in
    v2.p0 = v6 in
    let v49: [[Float]] = v2.p0 in
    v20[0] = v28 in
    var v29: [[[Float]]] = v10 in
    var v44: s0 = v24 in
    let v56: s0 = s0(v18, v12) in
    v29[1] = v3 in
    let v27: Float = v23[0] in
    v20[0] = v14 in
    let v55: [[Float]] = v2.p1 in
    let v33: [s0] = [v56, v56, v44, v0] in
    let v54: s0 = v33[2] in
    let v62: [Float] = v55[0] in
    let v78: [[Float]] = v10[5] in
    v25[0] = v28 in
    let v43: [s0] = [v56, v44, v54, v0, v24] in
    let v105: [Float] = v16[2] in
    v25[0] = v27 in
    let v83: [[Float]] = v30.p1 in
    v25[0] = v27 in
    v19 = v25 in
    v44.p1 = v49 in
    v24.p1 = v1 in
    v11.p0 = v18 in
    let v84: [[Float]] = v0.p0 in
    v11.p0 = v21 in
    let v98: [[Float]] = v29[6] in
    var v145: [s0] = v43 in
    v24.p1 = v98 in
    v20 = v62 in
    v24.p1 = v84 in
    v2.p1 = v17 in
    var v107: [s0] = v145 in
    let v122: s0 = s0(v78, v83) in
    v3[0] = v15 in
    var v208: [s0] = v33 in
    let v197: s0 = v107[3] in
    v29[3] = v84 in
    let v140: s0 = v208[2] in
    v107[2] = v122 in
    v145[0] = v140 in
    var v196: s0 = v197 in
    var v75: s0 = v196 in
    v3[0] = v105 in
    v75
  } in
  let f55: (s6) -> s6 = (v0: s6) -> s6 {
    var v4: s6 = v0 in
    let v6: s0 = v0.p1 in
    let v2: s0 = v0.p1 in
    let v5: s0 = f74(v2) in
    let v8: [s5] = v4.p0 in
    let v11: s0 = v4.p1 in
    v4.p1 = v11 in
    let v12: s0 = f74(v11) in
    let v9: s0 = f74(v6) in
    var v14: s6 = v4 in
    var v15: [s5] = v8 in
    let v23: [[Float]] = v12.p1 in
    let v18: s5 = v15[0] in
    v14.p1 = v11 in
    v14.p0 = v15 in
    let v26: s0 = f74(v6) in
    v15[1] = v18 in
    v15[0] = v18 in
    var v30: s0 = v5 in
    v15[0] = v18 in
    var v36: s5 = v18 in
    v15[1] = v36 in
    let v50: [[Float]] = v26.p1 in
    v15[1] = v36 in
    var v63: s0 = v9 in
    v30.p1 = v23 in
    v63.p0 = v50 in
    v30 = v63 in
    v14.p1 = v30 in
    v14
  } in
  let noinline_f0: ([[s12]], s7, s3, Float) -> Float = (v0: [[s12]], v1: s7, v2: s3, v3: Float) -> Float {
    let v6: s6 = v1.p1 in
    let v10: s6 = f55(v6) in
    let v31: s0 = v10.p1 in
    let v36: s0 = f74(v31) in
    let v22: [[Float]] = v36.p0 in
    let v49: [Float] = v22[0] in
    let v97: Float = v49[0] in
    let v77: Float = v97 / v97 in
    v77
  } in
  fun loop(i: Int, v0: [[s12]], v1: s7, v2: s3, v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s12]] = [[s12([s0([[0.0]], [[1.0]])], s1([s0([[2.0]], [[3.0]]), s0([[4.0]], [[5.0]]), s0([[6.0]], [[7.0]])], [s0([[8.0]], [[9.0]]), s0([[10.0]], [[11.0]]), s0([[12.0]], [[13.0]])]))], [s12([s0([[14.0]], [[15.0]])], s1([s0([[16.0]], [[17.0]]), s0([[18.0]], [[19.0]]), s0([[20.0]], [[21.0]])], [s0([[22.0]], [[23.0]]), s0([[24.0]], [[25.0]]), s0([[26.0]], [[27.0]])]))]] in
    let v1: s7 = s7(s5(s3([s2([s0([[28.0]], [[29.0]]), s0([[30.0]], [[31.0]])], s1([s0([[32.0]], [[33.0]]), s0([[34.0]], [[35.0]]), s0([[36.0]], [[37.0]])], [s0([[38.0]], [[39.0]]), s0([[40.0]], [[41.0]]), s0([[42.0]], [[43.0]])]), s1([s0([[44.0]], [[45.0]]), s0([[46.0]], [[47.0]]), s0([[48.0]], [[49.0]])], [s0([[50.0]], [[51.0]]), s0([[52.0]], [[53.0]]), s0([[54.0]], [[55.0]])]), s0([[56.0]], [[57.0]]), [s0([[58.0]], [[59.0]]), s0([[60.0]], [[61.0]]), s0([[62.0]], [[63.0]])]), s2([s0([[64.0]], [[65.0]]), s0([[66.0]], [[67.0]])], s1([s0([[68.0]], [[69.0]]), s0([[70.0]], [[71.0]]), s0([[72.0]], [[73.0]])], [s0([[74.0]], [[75.0]]), s0([[76.0]], [[77.0]]), s0([[78.0]], [[79.0]])]), s1([s0([[80.0]], [[81.0]]), s0([[82.0]], [[83.0]]), s0([[84.0]], [[85.0]])], [s0([[86.0]], [[87.0]]), s0([[88.0]], [[89.0]]), s0([[90.0]], [[91.0]])]), s0([[92.0]], [[93.0]]), [s0([[94.0]], [[95.0]]), s0([[96.0]], [[97.0]]), s0([[98.0]], [[99.0]])])], s1([s0([[100.0]], [[101.0]]), s0([[102.0]], [[103.0]]), s0([[104.0]], [[105.0]])], [s0([[106.0]], [[107.0]]), s0([[108.0]], [[109.0]]), s0([[110.0]], [[111.0]])])), s0([[112.0]], [[113.0]])), s6([s5(s3([s2([s0([[114.0]], [[115.0]]), s0([[116.0]], [[117.0]])], s1([s0([[118.0]], [[119.0]]), s0([[120.0]], [[121.0]]), s0([[122.0]], [[123.0]])], [s0([[124.0]], [[125.0]]), s0([[126.0]], [[127.0]]), s0([[128.0]], [[129.0]])]), s1([s0([[130.0]], [[131.0]]), s0([[132.0]], [[133.0]]), s0([[134.0]], [[135.0]])], [s0([[136.0]], [[137.0]]), s0([[138.0]], [[139.0]]), s0([[140.0]], [[141.0]])]), s0([[142.0]], [[143.0]]), [s0([[144.0]], [[145.0]]), s0([[146.0]], [[147.0]]), s0([[148.0]], [[149.0]])]), s2([s0([[150.0]], [[151.0]]), s0([[152.0]], [[153.0]])], s1([s0([[154.0]], [[155.0]]), s0([[156.0]], [[157.0]]), s0([[158.0]], [[159.0]])], [s0([[160.0]], [[161.0]]), s0([[162.0]], [[163.0]]), s0([[164.0]], [[165.0]])]), s1([s0([[166.0]], [[167.0]]), s0([[168.0]], [[169.0]]), s0([[170.0]], [[171.0]])], [s0([[172.0]], [[173.0]]), s0([[174.0]], [[175.0]]), s0([[176.0]], [[177.0]])]), s0([[178.0]], [[179.0]]), [s0([[180.0]], [[181.0]]), s0([[182.0]], [[183.0]]), s0([[184.0]], [[185.0]])])], s1([s0([[186.0]], [[187.0]]), s0([[188.0]], [[189.0]]), s0([[190.0]], [[191.0]])], [s0([[192.0]], [[193.0]]), s0([[194.0]], [[195.0]]), s0([[196.0]], [[197.0]])])), s0([[198.0]], [[199.0]])), s5(s3([s2([s0([[200.0]], [[201.0]]), s0([[202.0]], [[203.0]])], s1([s0([[204.0]], [[205.0]]), s0([[206.0]], [[207.0]]), s0([[208.0]], [[209.0]])], [s0([[210.0]], [[211.0]]), s0([[212.0]], [[213.0]]), s0([[214.0]], [[215.0]])]), s1([s0([[216.0]], [[217.0]]), s0([[218.0]], [[219.0]]), s0([[220.0]], [[221.0]])], [s0([[222.0]], [[223.0]]), s0([[224.0]], [[225.0]]), s0([[226.0]], [[227.0]])]), s0([[228.0]], [[229.0]]), [s0([[230.0]], [[231.0]]), s0([[232.0]], [[233.0]]), s0([[234.0]], [[235.0]])]), s2([s0([[236.0]], [[237.0]]), s0([[238.0]], [[239.0]])], s1([s0([[240.0]], [[241.0]]), s0([[242.0]], [[243.0]]), s0([[244.0]], [[245.0]])], [s0([[246.0]], [[247.0]]), s0([[248.0]], [[249.0]]), s0([[250.0]], [[251.0]])]), s1([s0([[252.0]], [[253.0]]), s0([[254.0]], [[255.0]]), s0([[256.0]], [[257.0]])], [s0([[258.0]], [[259.0]]), s0([[260.0]], [[261.0]]), s0([[262.0]], [[263.0]])]), s0([[264.0]], [[265.0]]), [s0([[266.0]], [[267.0]]), s0([[268.0]], [[269.0]]), s0([[270.0]], [[271.0]])])], s1([s0([[272.0]], [[273.0]]), s0([[274.0]], [[275.0]]), s0([[276.0]], [[277.0]])], [s0([[278.0]], [[279.0]]), s0([[280.0]], [[281.0]]), s0([[282.0]], [[283.0]])])), s0([[284.0]], [[285.0]]))], s0([[286.0]], [[287.0]]))) in
    let v2: s3 = s3([s2([s0([[288.0]], [[289.0]]), s0([[290.0]], [[291.0]])], s1([s0([[292.0]], [[293.0]]), s0([[294.0]], [[295.0]]), s0([[296.0]], [[297.0]])], [s0([[298.0]], [[299.0]]), s0([[300.0]], [[301.0]]), s0([[302.0]], [[303.0]])]), s1([s0([[304.0]], [[305.0]]), s0([[306.0]], [[307.0]]), s0([[308.0]], [[309.0]])], [s0([[310.0]], [[311.0]]), s0([[312.0]], [[313.0]]), s0([[314.0]], [[315.0]])]), s0([[316.0]], [[317.0]]), [s0([[318.0]], [[319.0]]), s0([[320.0]], [[321.0]]), s0([[322.0]], [[323.0]])]), s2([s0([[324.0]], [[325.0]]), s0([[326.0]], [[327.0]])], s1([s0([[328.0]], [[329.0]]), s0([[330.0]], [[331.0]]), s0([[332.0]], [[333.0]])], [s0([[334.0]], [[335.0]]), s0([[336.0]], [[337.0]]), s0([[338.0]], [[339.0]])]), s1([s0([[340.0]], [[341.0]]), s0([[342.0]], [[343.0]]), s0([[344.0]], [[345.0]])], [s0([[346.0]], [[347.0]]), s0([[348.0]], [[349.0]]), s0([[350.0]], [[351.0]])]), s0([[352.0]], [[353.0]]), [s0([[354.0]], [[355.0]]), s0([[356.0]], [[357.0]]), s0([[358.0]], [[359.0]])])], s1([s0([[360.0]], [[361.0]]), s0([[362.0]], [[363.0]]), s0([[364.0]], [[365.0]])], [s0([[366.0]], [[367.0]]), s0([[368.0]], [[369.0]]), s0([[370.0]], [[371.0]])])) in
    let v3: Float = 372.0 in
    let initialResult: Float = 372.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()