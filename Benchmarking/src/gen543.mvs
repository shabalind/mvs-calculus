  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
  } in
  struct s3 {
    var p0: [s0]
    var p1: [[s1]]
  } in
  let f16: (s3) -> s3 = (v0: s3) -> s3 {
    var v3: s3 = v0 in
    var v1: s3 = v0 in
    var v8: s3 = v0 in
    var v6: s3 = v1 in
    var v7: s3 = v3 in
    let v5: [s0] = v0.p0 in
    v1.p0 = v5 in
    v7.p0 = v5 in
    var v2: s3 = v1 in
    v1.p0 = v5 in
    v1 = v2 in
    v7.p0 = v5 in
    v1.p0 = v5 in
    let v20: [s3] = [v7, v1, v2, v2, v2, v8, v6] in
    var v17: [s0] = v5 in
    v17 = v5 in
    v8.p0 = v17 in
    let v33: [[s1]] = v3.p1 in
    let v67: s3 = v20[3] in
    v7.p1 = v33 in
    v67
  } in
  let noinline_f0: ([s3], Float) -> Float = (v0: [s3], v1: Float) -> Float {
    let v5: s3 = v0[1] in
    var v4: Float = v1 in
    let v8: s3 = f16(v5) in
    let v20: [s0] = v8.p0 in
    let v11: s0 = v20[2] in
    let v41: [[Float]] = v11.p1 in
    let v14: [Float] = v41[2] in
    let v51: Float = v14[0] in
    let v195: Float = v51 / v4 in
    v195
  } in
  fun loop(i: Int, v0: [s3], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s3] = [s3([s0([[0.0]], [[1.0], [2.0], [3.0]]), s0([[4.0]], [[5.0], [6.0], [7.0]]), s0([[8.0]], [[9.0], [10.0], [11.0]])], [[s1([s0([[12.0]], [[13.0], [14.0], [15.0]]), s0([[16.0]], [[17.0], [18.0], [19.0]]), s0([[20.0]], [[21.0], [22.0], [23.0]])], [[s0([[24.0]], [[25.0], [26.0], [27.0]])]])]]), s3([s0([[28.0]], [[29.0], [30.0], [31.0]]), s0([[32.0]], [[33.0], [34.0], [35.0]]), s0([[36.0]], [[37.0], [38.0], [39.0]])], [[s1([s0([[40.0]], [[41.0], [42.0], [43.0]]), s0([[44.0]], [[45.0], [46.0], [47.0]]), s0([[48.0]], [[49.0], [50.0], [51.0]])], [[s0([[52.0]], [[53.0], [54.0], [55.0]])]])]])] in
    let v1: Float = 56.0 in
    let initialResult: Float = 56.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()