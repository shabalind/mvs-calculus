  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  let noinline_f0: ([s0], Float) -> Float = (v0: [s0], v1: Float) -> Float {
    let v3: s0 = v0[0] in
    let v11: s1 = s1(v3, v0) in
    let v12: s0 = v0[0] in
    let v20: s0 = v11.p0 in
    let v26: [[Float]] = v20.p1 in
    let v25: [Float] = v26[1] in
    let v23: [[Float]] = v12.p1 in
    var v96: [[Float]] = v23 in
    let v72: [Float] = v96[0] in
    let v100: [Float] = v26[0] in
    v96[1] = v100 in
    let v132: Float = v72[0] in
    v96[1] = v25 in
    v132
  } in
  fun loop(i: Int, v0: [s0], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0]], [[1.0], [2.0]])] in
    let v1: Float = 3.0 in
    let initialResult: Float = 3.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()