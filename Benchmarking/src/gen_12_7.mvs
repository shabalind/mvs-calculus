  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: ([[s0]], Float) -> Float = (v0: [[s0]], v1: Float) -> Float {
    var v5: Float = v1 in
    let v8: [s0] = v0[1] in
    let v3: s0 = v8[0] in
    let v9: [[Float]] = v3.p0 in
    let v4: [Float] = v9[0] in
    v5 = v1 in
    v5 = v1 in
    let v27: Float = v5 + v1 in
    let v53: Float = v4[0] in
    var v83: Float = v53 in
    let v98: Float = v83 / v27 in
    v98
  } in
  fun loop(i: Int, v0: [[s0]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s0]] = [[s0([[0.0]], [[1.0]])], [s0([[2.0]], [[3.0]])]] in
    let v1: Float = 4.0 in
    let initialResult: Float = 4.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()