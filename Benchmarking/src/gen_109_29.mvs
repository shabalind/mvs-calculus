  struct s0 {
    var p0: [[Float]]
    var p1: [Float]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    var v3: Float = v1 in
    let v8: Float = v1 * v3 in
    var v4: Float = v8 in
    var v2: Float = v4 in
    v4 = v3 in
    let v14: [Float] = [v4, v4, v2, v8, v4, v2, v1] in
    var v24: [Float] = v14 in
    v24 = v14 in
    v24[4] = v2 in
    let v42: Float = v24[5] in
    var v51: [Float] = v24 in
    let v76: Float = v51[1] in
    v51[3] = v42 in
    v76
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([s0([[0.0]], [1.0]), s0([[2.0]], [3.0])], [s0([[4.0]], [5.0]), s0([[6.0]], [7.0])]) in
    let v1: Float = 8.0 in
    let initialResult: Float = 8.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()