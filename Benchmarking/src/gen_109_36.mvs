  struct s0 {
    var p0: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    let v2: s0 = v0.p0 in
    let v3: [[Float]] = v2.p0 in
    let v5: [Float] = v3[0] in
    let v7: [[Float]] = v2.p0 in
    let v10: [[Float]] = v2.p0 in
    let v15: [Float] = v7[0] in
    let v9: [Float] = v10[0] in
    let v14: [[Float]] = [v9, v5, v5, v15, v15] in
    let v58: [Float] = v14[2] in
    let v51: Float = v58[0] in
    v51
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1(s0([[0.0]]), [[s0([[1.0]])], [s0([[2.0]])]]) in
    let v1: Float = 3.0 in
    let initialResult: Float = 3.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()