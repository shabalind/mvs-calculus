  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
  } in
  struct s3 {
    var p0: [s1]
    var p1: s0
  } in
  struct s7 {
    var p0: s3
    var p1: s1
  } in
  let noinline_f0: ([s7], Float) -> Float = (v0: [s7], v1: Float) -> Float {
    let v3: s7 = v0[2] in
    let v2: s3 = v3.p0 in
    let v5: s1 = v3.p1 in
    let v6: s0 = v5.p0 in
    let v10: s0 = v2.p1 in
    let v15: [[Float]] = v10.p1 in
    let v24: [[Float]] = v6.p0 in
    let v59: [Float] = v24[1] in
    var v23: [[Float]] = v15 in
    let v33: [Float] = v23[1] in
    let v28: Float = v33[0] in
    v23[0] = v33 in
    v23[1] = v59 in
    var v48: Float = v28 in
    v23[1] = v59 in
    let v135: Float = v28 + v48 in
    v135
  } in
  fun loop(i: Int, v0: [s7], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s7] = [s7(s3([s1(s0([[0.0], [1.0]], [[2.0], [3.0]])), s1(s0([[4.0], [5.0]], [[6.0], [7.0]]))], s0([[8.0], [9.0]], [[10.0], [11.0]])), s1(s0([[12.0], [13.0]], [[14.0], [15.0]]))), s7(s3([s1(s0([[16.0], [17.0]], [[18.0], [19.0]])), s1(s0([[20.0], [21.0]], [[22.0], [23.0]]))], s0([[24.0], [25.0]], [[26.0], [27.0]])), s1(s0([[28.0], [29.0]], [[30.0], [31.0]]))), s7(s3([s1(s0([[32.0], [33.0]], [[34.0], [35.0]])), s1(s0([[36.0], [37.0]], [[38.0], [39.0]]))], s0([[40.0], [41.0]], [[42.0], [43.0]])), s1(s0([[44.0], [45.0]], [[46.0], [47.0]])))] in
    let v1: Float = 48.0 in
    let initialResult: Float = 48.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()