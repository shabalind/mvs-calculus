  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let f2: (Float) -> Float = (v0: Float) -> Float {
    var v6: Float = v0 in
    var v1: Float = v6 in
    var v7: Float = v1 in
    var v10: Float = v0 in
    v7 = v10 in
    var v21: Float = v10 in
    var v8: Float = v7 in
    var v15: Float = v7 in
    var v35: Float = v21 in
    var v26: Float = v8 in
    var v34: Float = v35 in
    var v16: Float = v34 in
    var v29: Float = v26 in
    let v37: [Float] = [v16, v15, v29, v26] in
    let v47: Float = v37[1] in
    v47
  } in
  let noinline_f0: ([[s0]], Float) -> Float = (v0: [[s0]], v1: Float) -> Float {
    let v3: Float = f2(v1) in
    var v2: Float = v1 in
    let v8: [Float] = [v1, v3, v2] in
    var v7: [Float] = v8 in
    let v10: Float = v7[2] in
    let v26: Float = f2(v1) in
    let v46: Float = v8[1] in
    let v104: Float = v3 * v26 in
    let v58: Float = v104 / v10 in
    v7[1] = v46 in
    v7[0] = v1 in
    v7 = v8 in
    v58
  } in
  fun loop(i: Int, v0: [[s0]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s0]] = [[s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]])], [s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]])], [s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]])]] in
    let v1: Float = 15.0 in
    let initialResult: Float = 15.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()