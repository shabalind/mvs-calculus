  struct s0 {
    var p0: [[Float]]
  } in
  let noinline_f0: ([s0], s0, Float) -> Float = (v0: [s0], v1: s0, v2: Float) -> Float {
    let v4: s0 = v0[0] in
    let v3: [[Float]] = v4.p0 in
    let v8: s0 = v0[1] in
    let v18: [Float] = v3[1] in
    let v15: [[Float]] = v8.p0 in
    let v49: Float = v18[0] in
    let v56: [Float] = [v2, v2, v49, v2, v2] in
    let v63: [Float] = v15[1] in
    let v66: Float = v63[0] in
    let v84: Float = v56[3] in
    let v217: Float = v66 - v84 in
    v217
  } in
  fun loop(i: Int, v0: [s0], v1: s0, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0]]), s0([[2.0], [3.0]])] in
    let v1: s0 = s0([[4.0], [5.0]]) in
    let v2: Float = 6.0 in
    let initialResult: Float = 6.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()