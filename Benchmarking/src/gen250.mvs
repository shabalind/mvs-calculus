  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s1]
    var p1: [s0]
  } in
  let f11: (Float) -> Float = (v0: Float) -> Float {
    var v1: Float = v0 in
    var v7: Float = v1 in
    var v6: Float = v0 in
    v1 = v7 in
    var v2: Float = v6 in
    var v4: Float = v0 in
    let v3: [Float] = [v0, v4] in
    var v10: Float = v7 in
    var v5: Float = v6 in
    var v13: Float = v2 in
    var v17: [Float] = v3 in
    var v11: [Float] = v3 in
    let v21: Float = v3[0] in
    let v14: Float = v17[0] in
    var v16: [Float] = v17 in
    var v46: [Float] = v3 in
    v2 = v13 in
    v16[0] = v1 in
    let v12: Float = v11[0] in
    var v27: Float = v7 in
    v11[1] = v27 in
    v17[1] = v14 in
    var v38: [Float] = v3 in
    let v28: [[Float]] = [v17, v3, v46, v38, v17, v16] in
    v46[1] = v21 in
    v46 = v16 in
    v6 = v10 in
    let v69: [Float] = v28[3] in
    let v75: Float = v5 * v2 in
    v7 = v75 in
    v46[1] = v12 in
    let v37: Float = v69[1] in
    v37
  } in
  let noinline_f0: ([s1], s2, Float) -> Float = (v0: [s1], v1: s2, v2: Float) -> Float {
    let v8: Float = f11(v2) in
    let v17: Float = v8 * v8 in
    v17
  } in
  fun loop(i: Int, v0: [s1], v1: s2, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1(s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]), s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]])), s1(s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]]), s0([[15.0], [16.0], [17.0]], [[18.0], [19.0]])), s1(s0([[20.0], [21.0], [22.0]], [[23.0], [24.0]]), s0([[25.0], [26.0], [27.0]], [[28.0], [29.0]]))] in
    let v1: s2 = s2([s1(s0([[30.0], [31.0], [32.0]], [[33.0], [34.0]]), s0([[35.0], [36.0], [37.0]], [[38.0], [39.0]])), s1(s0([[40.0], [41.0], [42.0]], [[43.0], [44.0]]), s0([[45.0], [46.0], [47.0]], [[48.0], [49.0]])), s1(s0([[50.0], [51.0], [52.0]], [[53.0], [54.0]]), s0([[55.0], [56.0], [57.0]], [[58.0], [59.0]]))], [s0([[60.0], [61.0], [62.0]], [[63.0], [64.0]])]) in
    let v2: Float = 65.0 in
    let initialResult: Float = 65.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()