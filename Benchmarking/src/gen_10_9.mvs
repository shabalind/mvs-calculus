  struct s0 {
    var p0: [[Float]]
    var p1: [Float]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
    var p2: [s0]
  } in
  struct s2 {
    var p0: s1
    var p1: [s0]
    var p2: s0
  } in
  struct s3 {
    var p0: [s0]
    var p1: [s2]
  } in
  struct s7 {
    var p0: [s1]
    var p1: [s3]
    var p2: s3
    var p3: s2
  } in
  let f29: (s7) -> s7 = (v0: s7) -> s7 {
    let v7: [s3] = v0.p1 in
    let v4: s3 = v7[0] in
    var v2: s7 = v0 in
    let v5: [s3] = v0.p1 in
    v2.p2 = v4 in
    v2.p1 = v5 in
    let v10: s3 = v0.p2 in
    let v14: [s3] = v2.p1 in
    var v21: s7 = v0 in
    v21.p2 = v10 in
    var v16: s7 = v21 in
    var v23: s7 = v16 in
    v23.p1 = v5 in
    v21.p2 = v4 in
    v23.p1 = v14 in
    v23
  } in
  let f26: (s0) -> s0 = (v0: s0) -> s0 {
    let v4: [[Float]] = v0.p0 in
    var v6: [[Float]] = v4 in
    let v2: [[Float]] = v0.p0 in
    var v5: s0 = v0 in
    let v10: [Float] = v5.p1 in
    var v3: [[Float]] = v4 in
    let v7: [Float] = v2[0] in
    v5.p1 = v10 in
    var v8: s0 = v5 in
    let v11: [[Float]] = v5.p0 in
    v8 = v5 in
    v5.p0 = v2 in
    var v31: [[Float]] = v2 in
    v8.p0 = v6 in
    v8.p0 = v31 in
    let v69: s0 = s0(v11, v10) in
    v5.p0 = v4 in
    let v36: Float = v7[0] in
    v6[1] = v7 in
    let v32: [Float] = v2[1] in
    v6 = v4 in
    let v38: [[Float]] = v69.p0 in
    v8.p0 = v11 in
    v8.p0 = v6 in
    let v29: [Float] = v31[0] in
    v8.p0 = v31 in
    var v34: s0 = v0 in
    v6[0] = v32 in
    v31[0] = v32 in
    v5.p0 = v4 in
    v31[1] = v29 in
    v3[1] = v29 in
    let v137: [[Float]] = v34.p0 in
    var v68: [Float] = v29 in
    let v74: [Float] = v69.p1 in
    let v46: [Float] = v38[0] in
    v6 = v137 in
    v31[0] = v68 in
    v8.p1 = v74 in
    var v78: s0 = v34 in
    let v81: [Float] = v78.p1 in
    v8 = v34 in
    v68[0] = v36 in
    v8.p1 = v81 in
    var v93: [Float] = v32 in
    v8.p0 = v31 in
    v8.p0 = v3 in
    v3[0] = v93 in
    v6[1] = v46 in
    v8
  } in
  let f16: (s2, s7) -> s2 = (v0: s2, v1: s7) -> s2 {
    var v6: s2 = v0 in
    let v9: s0 = v6.p2 in
    let v21: s0 = f26(v9) in
    let v12: [s0] = v6.p1 in
    v6.p2 = v21 in
    var v4: s2 = v6 in
    var v11: s2 = v6 in
    let v23: [s2] = [v11, v11, v4, v0] in
    v6.p1 = v12 in
    let v201: s2 = v23[2] in
    v201
  } in
  let noinline_f0: (s7, Float) -> Float = (v0: s7, v1: Float) -> Float {
    let v3: s2 = v0.p3 in
    let v4: s3 = v0.p2 in
    let v7: s7 = f29(v0) in
    let v8: s2 = f16(v3, v7) in
    let v9: [s0] = v4.p0 in
    var v16: [s0] = v9 in
    let v13: s0 = v16[0] in
    let v17: [s0] = v4.p0 in
    let v12: s0 = f26(v13) in
    let v15: s0 = v8.p2 in
    let v18: [[Float]] = v15.p0 in
    var v28: [[Float]] = v18 in
    v28 = v18 in
    var v36: s0 = v13 in
    v36.p0 = v28 in
    let v38: s0 = f26(v12) in
    v16 = v17 in
    let v54: [[Float]] = v38.p0 in
    let v24: [Float] = v54[1] in
    let v35: [[Float]] = v36.p0 in
    v36.p0 = v18 in
    v36.p0 = v18 in
    v36.p0 = v35 in
    let v56: [Float] = v35[1] in
    v28[0] = v24 in
    let v162: Float = v56[0] in
    v162
  } in
  fun loop(i: Int, v0: s7, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s7 = s7([s1([s0([[0.0], [1.0]], [2.0, 3.0, 4.0]), s0([[5.0], [6.0]], [7.0, 8.0, 9.0]), s0([[10.0], [11.0]], [12.0, 13.0, 14.0])], [s0([[15.0], [16.0]], [17.0, 18.0, 19.0])], [s0([[20.0], [21.0]], [22.0, 23.0, 24.0]), s0([[25.0], [26.0]], [27.0, 28.0, 29.0])]), s1([s0([[30.0], [31.0]], [32.0, 33.0, 34.0]), s0([[35.0], [36.0]], [37.0, 38.0, 39.0]), s0([[40.0], [41.0]], [42.0, 43.0, 44.0])], [s0([[45.0], [46.0]], [47.0, 48.0, 49.0])], [s0([[50.0], [51.0]], [52.0, 53.0, 54.0]), s0([[55.0], [56.0]], [57.0, 58.0, 59.0])]), s1([s0([[60.0], [61.0]], [62.0, 63.0, 64.0]), s0([[65.0], [66.0]], [67.0, 68.0, 69.0]), s0([[70.0], [71.0]], [72.0, 73.0, 74.0])], [s0([[75.0], [76.0]], [77.0, 78.0, 79.0])], [s0([[80.0], [81.0]], [82.0, 83.0, 84.0]), s0([[85.0], [86.0]], [87.0, 88.0, 89.0])])], [s3([s0([[90.0], [91.0]], [92.0, 93.0, 94.0])], [s2(s1([s0([[95.0], [96.0]], [97.0, 98.0, 99.0]), s0([[100.0], [101.0]], [102.0, 103.0, 104.0]), s0([[105.0], [106.0]], [107.0, 108.0, 109.0])], [s0([[110.0], [111.0]], [112.0, 113.0, 114.0])], [s0([[115.0], [116.0]], [117.0, 118.0, 119.0]), s0([[120.0], [121.0]], [122.0, 123.0, 124.0])]), [s0([[125.0], [126.0]], [127.0, 128.0, 129.0]), s0([[130.0], [131.0]], [132.0, 133.0, 134.0]), s0([[135.0], [136.0]], [137.0, 138.0, 139.0])], s0([[140.0], [141.0]], [142.0, 143.0, 144.0])), s2(s1([s0([[145.0], [146.0]], [147.0, 148.0, 149.0]), s0([[150.0], [151.0]], [152.0, 153.0, 154.0]), s0([[155.0], [156.0]], [157.0, 158.0, 159.0])], [s0([[160.0], [161.0]], [162.0, 163.0, 164.0])], [s0([[165.0], [166.0]], [167.0, 168.0, 169.0]), s0([[170.0], [171.0]], [172.0, 173.0, 174.0])]), [s0([[175.0], [176.0]], [177.0, 178.0, 179.0]), s0([[180.0], [181.0]], [182.0, 183.0, 184.0]), s0([[185.0], [186.0]], [187.0, 188.0, 189.0])], s0([[190.0], [191.0]], [192.0, 193.0, 194.0]))])], s3([s0([[195.0], [196.0]], [197.0, 198.0, 199.0])], [s2(s1([s0([[200.0], [201.0]], [202.0, 203.0, 204.0]), s0([[205.0], [206.0]], [207.0, 208.0, 209.0]), s0([[210.0], [211.0]], [212.0, 213.0, 214.0])], [s0([[215.0], [216.0]], [217.0, 218.0, 219.0])], [s0([[220.0], [221.0]], [222.0, 223.0, 224.0]), s0([[225.0], [226.0]], [227.0, 228.0, 229.0])]), [s0([[230.0], [231.0]], [232.0, 233.0, 234.0]), s0([[235.0], [236.0]], [237.0, 238.0, 239.0]), s0([[240.0], [241.0]], [242.0, 243.0, 244.0])], s0([[245.0], [246.0]], [247.0, 248.0, 249.0])), s2(s1([s0([[250.0], [251.0]], [252.0, 253.0, 254.0]), s0([[255.0], [256.0]], [257.0, 258.0, 259.0]), s0([[260.0], [261.0]], [262.0, 263.0, 264.0])], [s0([[265.0], [266.0]], [267.0, 268.0, 269.0])], [s0([[270.0], [271.0]], [272.0, 273.0, 274.0]), s0([[275.0], [276.0]], [277.0, 278.0, 279.0])]), [s0([[280.0], [281.0]], [282.0, 283.0, 284.0]), s0([[285.0], [286.0]], [287.0, 288.0, 289.0]), s0([[290.0], [291.0]], [292.0, 293.0, 294.0])], s0([[295.0], [296.0]], [297.0, 298.0, 299.0]))]), s2(s1([s0([[300.0], [301.0]], [302.0, 303.0, 304.0]), s0([[305.0], [306.0]], [307.0, 308.0, 309.0]), s0([[310.0], [311.0]], [312.0, 313.0, 314.0])], [s0([[315.0], [316.0]], [317.0, 318.0, 319.0])], [s0([[320.0], [321.0]], [322.0, 323.0, 324.0]), s0([[325.0], [326.0]], [327.0, 328.0, 329.0])]), [s0([[330.0], [331.0]], [332.0, 333.0, 334.0]), s0([[335.0], [336.0]], [337.0, 338.0, 339.0]), s0([[340.0], [341.0]], [342.0, 343.0, 344.0])], s0([[345.0], [346.0]], [347.0, 348.0, 349.0]))) in
    let v1: Float = 350.0 in
    let initialResult: Float = 350.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()