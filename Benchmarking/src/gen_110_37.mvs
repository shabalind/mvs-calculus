  struct s0 {
    var p0: Float
    var p1: [Float]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s2 {
    var p0: s0
    var p1: s1
  } in
  let f75: (Float) -> Float = (v0: Float) -> Float {
    var v5: Float = v0 in
    var v1: Float = v5 in
    var v7: Float = v1 in
    var v2: Float = v7 in
    var v8: Float = v1 in
    var v4: Float = v5 in
    var v10: Float = v1 in
    var v6: Float = v1 in
    var v13: Float = v2 in
    var v9: Float = v0 in
    var v21: Float = v5 in
    var v39: Float = v13 in
    var v36: Float = v9 in
    let v37: [Float] = [v8, v39, v36, v4] in
    var v66: [Float] = v37 in
    var v49: [Float] = v66 in
    v66[3] = v10 in
    var v44: [Float] = v49 in
    v7 = v6 in
    v2 = v21 in
    v66[1] = v10 in
    v66[2] = v2 in
    var v91: [Float] = v44 in
    var v58: [Float] = v91 in
    let v83: Float = v58[1] in
    v83
  } in
  let noinline_f0: ([[s2]], Float) -> Float = (v0: [[s2]], v1: Float) -> Float {
    let v7: Float = f75(v1) in
    v7
  } in
  fun loop(i: Int, v0: [[s2]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s2]] = [[s2(s0(0.0, [1.0, 2.0, 3.0], [[4.0]]), s1([s0(5.0, [6.0, 7.0, 8.0], [[9.0]])], s0(10.0, [11.0, 12.0, 13.0], [[14.0]])))]] in
    let v1: Float = 15.0 in
    let initialResult: Float = 15.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()