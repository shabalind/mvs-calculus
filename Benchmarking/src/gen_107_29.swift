  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
    var p4: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: s0
    var p1: s1
    var p2: s0
  }
  struct s3 {
    var p0: [s2]
    var p1: [s2]
  }
  struct s5 {
    var p0: s1
    var p1: [s3]
  }
  func f27(_ v0: Double, _ v1: Double) -> Double {
    var v7: Double = v1
    var v12: Double = v7
    var v2: Double = v12
    var v28: Double = v2
    var v23: Double = v28
    var v30: Double = v23
    return v30
  }
  @inline(never)
  func f0(_ v0: s5, _ v1: s3, _ v2: Double) -> Double {
    let v7: Double = v2 - v2
    let v12: Double = f27(v7, v2)
    let v22: Double = v2 * v12
    let v39: Double = f27(v22, v22)
    let v33: Double = f27(v39, v12)
    return v33
  }
  func benchmark() {
    let v0: s5 = s5(p0: s1(p0: s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0]], p2: [[4.0], [5.0]], p3: [[6.0], [7.0], [8.0]], p4: [[9.0], [10.0]]), p1: s0(p0: [[11.0], [12.0], [13.0]], p1: [[14.0]], p2: [[15.0], [16.0]], p3: [[17.0], [18.0], [19.0]], p4: [[20.0], [21.0]])), p1: [s3(p0: [s2(p0: s0(p0: [[22.0], [23.0], [24.0]], p1: [[25.0]], p2: [[26.0], [27.0]], p3: [[28.0], [29.0], [30.0]], p4: [[31.0], [32.0]]), p1: s1(p0: s0(p0: [[33.0], [34.0], [35.0]], p1: [[36.0]], p2: [[37.0], [38.0]], p3: [[39.0], [40.0], [41.0]], p4: [[42.0], [43.0]]), p1: s0(p0: [[44.0], [45.0], [46.0]], p1: [[47.0]], p2: [[48.0], [49.0]], p3: [[50.0], [51.0], [52.0]], p4: [[53.0], [54.0]])), p2: s0(p0: [[55.0], [56.0], [57.0]], p1: [[58.0]], p2: [[59.0], [60.0]], p3: [[61.0], [62.0], [63.0]], p4: [[64.0], [65.0]]))], p1: [s2(p0: s0(p0: [[66.0], [67.0], [68.0]], p1: [[69.0]], p2: [[70.0], [71.0]], p3: [[72.0], [73.0], [74.0]], p4: [[75.0], [76.0]]), p1: s1(p0: s0(p0: [[77.0], [78.0], [79.0]], p1: [[80.0]], p2: [[81.0], [82.0]], p3: [[83.0], [84.0], [85.0]], p4: [[86.0], [87.0]]), p1: s0(p0: [[88.0], [89.0], [90.0]], p1: [[91.0]], p2: [[92.0], [93.0]], p3: [[94.0], [95.0], [96.0]], p4: [[97.0], [98.0]])), p2: s0(p0: [[99.0], [100.0], [101.0]], p1: [[102.0]], p2: [[103.0], [104.0]], p3: [[105.0], [106.0], [107.0]], p4: [[108.0], [109.0]])), s2(p0: s0(p0: [[110.0], [111.0], [112.0]], p1: [[113.0]], p2: [[114.0], [115.0]], p3: [[116.0], [117.0], [118.0]], p4: [[119.0], [120.0]]), p1: s1(p0: s0(p0: [[121.0], [122.0], [123.0]], p1: [[124.0]], p2: [[125.0], [126.0]], p3: [[127.0], [128.0], [129.0]], p4: [[130.0], [131.0]]), p1: s0(p0: [[132.0], [133.0], [134.0]], p1: [[135.0]], p2: [[136.0], [137.0]], p3: [[138.0], [139.0], [140.0]], p4: [[141.0], [142.0]])), p2: s0(p0: [[143.0], [144.0], [145.0]], p1: [[146.0]], p2: [[147.0], [148.0]], p3: [[149.0], [150.0], [151.0]], p4: [[152.0], [153.0]])), s2(p0: s0(p0: [[154.0], [155.0], [156.0]], p1: [[157.0]], p2: [[158.0], [159.0]], p3: [[160.0], [161.0], [162.0]], p4: [[163.0], [164.0]]), p1: s1(p0: s0(p0: [[165.0], [166.0], [167.0]], p1: [[168.0]], p2: [[169.0], [170.0]], p3: [[171.0], [172.0], [173.0]], p4: [[174.0], [175.0]]), p1: s0(p0: [[176.0], [177.0], [178.0]], p1: [[179.0]], p2: [[180.0], [181.0]], p3: [[182.0], [183.0], [184.0]], p4: [[185.0], [186.0]])), p2: s0(p0: [[187.0], [188.0], [189.0]], p1: [[190.0]], p2: [[191.0], [192.0]], p3: [[193.0], [194.0], [195.0]], p4: [[196.0], [197.0]]))]), s3(p0: [s2(p0: s0(p0: [[198.0], [199.0], [200.0]], p1: [[201.0]], p2: [[202.0], [203.0]], p3: [[204.0], [205.0], [206.0]], p4: [[207.0], [208.0]]), p1: s1(p0: s0(p0: [[209.0], [210.0], [211.0]], p1: [[212.0]], p2: [[213.0], [214.0]], p3: [[215.0], [216.0], [217.0]], p4: [[218.0], [219.0]]), p1: s0(p0: [[220.0], [221.0], [222.0]], p1: [[223.0]], p2: [[224.0], [225.0]], p3: [[226.0], [227.0], [228.0]], p4: [[229.0], [230.0]])), p2: s0(p0: [[231.0], [232.0], [233.0]], p1: [[234.0]], p2: [[235.0], [236.0]], p3: [[237.0], [238.0], [239.0]], p4: [[240.0], [241.0]]))], p1: [s2(p0: s0(p0: [[242.0], [243.0], [244.0]], p1: [[245.0]], p2: [[246.0], [247.0]], p3: [[248.0], [249.0], [250.0]], p4: [[251.0], [252.0]]), p1: s1(p0: s0(p0: [[253.0], [254.0], [255.0]], p1: [[256.0]], p2: [[257.0], [258.0]], p3: [[259.0], [260.0], [261.0]], p4: [[262.0], [263.0]]), p1: s0(p0: [[264.0], [265.0], [266.0]], p1: [[267.0]], p2: [[268.0], [269.0]], p3: [[270.0], [271.0], [272.0]], p4: [[273.0], [274.0]])), p2: s0(p0: [[275.0], [276.0], [277.0]], p1: [[278.0]], p2: [[279.0], [280.0]], p3: [[281.0], [282.0], [283.0]], p4: [[284.0], [285.0]])), s2(p0: s0(p0: [[286.0], [287.0], [288.0]], p1: [[289.0]], p2: [[290.0], [291.0]], p3: [[292.0], [293.0], [294.0]], p4: [[295.0], [296.0]]), p1: s1(p0: s0(p0: [[297.0], [298.0], [299.0]], p1: [[300.0]], p2: [[301.0], [302.0]], p3: [[303.0], [304.0], [305.0]], p4: [[306.0], [307.0]]), p1: s0(p0: [[308.0], [309.0], [310.0]], p1: [[311.0]], p2: [[312.0], [313.0]], p3: [[314.0], [315.0], [316.0]], p4: [[317.0], [318.0]])), p2: s0(p0: [[319.0], [320.0], [321.0]], p1: [[322.0]], p2: [[323.0], [324.0]], p3: [[325.0], [326.0], [327.0]], p4: [[328.0], [329.0]])), s2(p0: s0(p0: [[330.0], [331.0], [332.0]], p1: [[333.0]], p2: [[334.0], [335.0]], p3: [[336.0], [337.0], [338.0]], p4: [[339.0], [340.0]]), p1: s1(p0: s0(p0: [[341.0], [342.0], [343.0]], p1: [[344.0]], p2: [[345.0], [346.0]], p3: [[347.0], [348.0], [349.0]], p4: [[350.0], [351.0]]), p1: s0(p0: [[352.0], [353.0], [354.0]], p1: [[355.0]], p2: [[356.0], [357.0]], p3: [[358.0], [359.0], [360.0]], p4: [[361.0], [362.0]])), p2: s0(p0: [[363.0], [364.0], [365.0]], p1: [[366.0]], p2: [[367.0], [368.0]], p3: [[369.0], [370.0], [371.0]], p4: [[372.0], [373.0]]))])])
    let v1: s3 = s3(p0: [s2(p0: s0(p0: [[374.0], [375.0], [376.0]], p1: [[377.0]], p2: [[378.0], [379.0]], p3: [[380.0], [381.0], [382.0]], p4: [[383.0], [384.0]]), p1: s1(p0: s0(p0: [[385.0], [386.0], [387.0]], p1: [[388.0]], p2: [[389.0], [390.0]], p3: [[391.0], [392.0], [393.0]], p4: [[394.0], [395.0]]), p1: s0(p0: [[396.0], [397.0], [398.0]], p1: [[399.0]], p2: [[400.0], [401.0]], p3: [[402.0], [403.0], [404.0]], p4: [[405.0], [406.0]])), p2: s0(p0: [[407.0], [408.0], [409.0]], p1: [[410.0]], p2: [[411.0], [412.0]], p3: [[413.0], [414.0], [415.0]], p4: [[416.0], [417.0]]))], p1: [s2(p0: s0(p0: [[418.0], [419.0], [420.0]], p1: [[421.0]], p2: [[422.0], [423.0]], p3: [[424.0], [425.0], [426.0]], p4: [[427.0], [428.0]]), p1: s1(p0: s0(p0: [[429.0], [430.0], [431.0]], p1: [[432.0]], p2: [[433.0], [434.0]], p3: [[435.0], [436.0], [437.0]], p4: [[438.0], [439.0]]), p1: s0(p0: [[440.0], [441.0], [442.0]], p1: [[443.0]], p2: [[444.0], [445.0]], p3: [[446.0], [447.0], [448.0]], p4: [[449.0], [450.0]])), p2: s0(p0: [[451.0], [452.0], [453.0]], p1: [[454.0]], p2: [[455.0], [456.0]], p3: [[457.0], [458.0], [459.0]], p4: [[460.0], [461.0]])), s2(p0: s0(p0: [[462.0], [463.0], [464.0]], p1: [[465.0]], p2: [[466.0], [467.0]], p3: [[468.0], [469.0], [470.0]], p4: [[471.0], [472.0]]), p1: s1(p0: s0(p0: [[473.0], [474.0], [475.0]], p1: [[476.0]], p2: [[477.0], [478.0]], p3: [[479.0], [480.0], [481.0]], p4: [[482.0], [483.0]]), p1: s0(p0: [[484.0], [485.0], [486.0]], p1: [[487.0]], p2: [[488.0], [489.0]], p3: [[490.0], [491.0], [492.0]], p4: [[493.0], [494.0]])), p2: s0(p0: [[495.0], [496.0], [497.0]], p1: [[498.0]], p2: [[499.0], [500.0]], p3: [[501.0], [502.0], [503.0]], p4: [[504.0], [505.0]])), s2(p0: s0(p0: [[506.0], [507.0], [508.0]], p1: [[509.0]], p2: [[510.0], [511.0]], p3: [[512.0], [513.0], [514.0]], p4: [[515.0], [516.0]]), p1: s1(p0: s0(p0: [[517.0], [518.0], [519.0]], p1: [[520.0]], p2: [[521.0], [522.0]], p3: [[523.0], [524.0], [525.0]], p4: [[526.0], [527.0]]), p1: s0(p0: [[528.0], [529.0], [530.0]], p1: [[531.0]], p2: [[532.0], [533.0]], p3: [[534.0], [535.0], [536.0]], p4: [[537.0], [538.0]])), p2: s0(p0: [[539.0], [540.0], [541.0]], p1: [[542.0]], p2: [[543.0], [544.0]], p3: [[545.0], [546.0], [547.0]], p4: [[548.0], [549.0]]))])
    let v2: Double = 550.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 550.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
