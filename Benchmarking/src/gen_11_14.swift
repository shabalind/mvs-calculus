  import Dispatch
  struct s0 {
    var p0: Double
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: s0
    var p1: Double
  }
  struct s3 {
    var p0: [s1]
    var p1: [s1]
  }
  struct s6 {
    var p0: s1
    var p1: [s0]
    var p2: [s1]
  }
  struct s9 {
    var p0: [s0]
    var p1: [s0]
    var p2: s6
    var p3: [[s2]]
  }
  struct s11 {
    var p0: s1
    var p1: s3
  }
  struct s12 {
    var p0: s9
    var p1: [s11]
  }
  func f22(_ v0: Double) -> Double {
    var v2: Double = v0
    var v6: Double = v2
    let v3: Double = v2 / v2
    v2 = v3
    var v5: Double = v3
    var v8: Double = v5
    var v7: Double = v5
    var v12: Double = v8
    var v13: Double = v12
    var v25: Double = v7
    var v18: Double = v7
    var v35: Double = v25
    var v29: Double = v6
    var v46: Double = v7
    var v23: Double = v3
    var v33: Double = v25
    var v28: Double = v18
    let v102: [Double] = [v29, v46, v33, v13, v0, v35]
    var v47: [Double] = v102
    v47[1] = v23
    v47[5] = v28
    let v26: Double = v47[1]
    var v60: [Double] = v47
    v47[4] = v46
    var v134: [Double] = v60
    v47[1] = v33
    let v79: Double = v134[3]
    let v92: Double = v47[2]
    let v53: [Double] = [v26, v79, v92, v33, v25]
    var v59: [Double] = v53
    var v90: [Double] = v59
    let v77: Double = v53[4]
    let v85: Double = v90[0]
    v59[0] = v13
    v134[3] = v77
    return v85
  }
  @inline(never)
  func f0(_ v0: [s12], _ v1: Double) -> Double {
    var v2: Double = v1
    let v6: Double = f22(v2)
    let v5: Double = v2 * v2
    let v4: Double = f22(v6)
    let v13: Double = f22(v6)
    let v30: Double = f22(v4)
    let v163: [Double] = [v4, v13, v5, v30]
    let v160: Double = v163[3]
    return v160
  }
  func benchmark() {
    let v0: [s12] = [s12(p0: s9(p0: [s0(p0: 0.0, p1: [[1.0], [2.0], [3.0]], p2: [[4.0]], p3: [[5.0], [6.0], [7.0]]), s0(p0: 8.0, p1: [[9.0], [10.0], [11.0]], p2: [[12.0]], p3: [[13.0], [14.0], [15.0]]), s0(p0: 16.0, p1: [[17.0], [18.0], [19.0]], p2: [[20.0]], p3: [[21.0], [22.0], [23.0]])], p1: [s0(p0: 24.0, p1: [[25.0], [26.0], [27.0]], p2: [[28.0]], p3: [[29.0], [30.0], [31.0]]), s0(p0: 32.0, p1: [[33.0], [34.0], [35.0]], p2: [[36.0]], p3: [[37.0], [38.0], [39.0]]), s0(p0: 40.0, p1: [[41.0], [42.0], [43.0]], p2: [[44.0]], p3: [[45.0], [46.0], [47.0]])], p2: s6(p0: s1(p0: s0(p0: 48.0, p1: [[49.0], [50.0], [51.0]], p2: [[52.0]], p3: [[53.0], [54.0], [55.0]]), p1: s0(p0: 56.0, p1: [[57.0], [58.0], [59.0]], p2: [[60.0]], p3: [[61.0], [62.0], [63.0]])), p1: [s0(p0: 64.0, p1: [[65.0], [66.0], [67.0]], p2: [[68.0]], p3: [[69.0], [70.0], [71.0]]), s0(p0: 72.0, p1: [[73.0], [74.0], [75.0]], p2: [[76.0]], p3: [[77.0], [78.0], [79.0]]), s0(p0: 80.0, p1: [[81.0], [82.0], [83.0]], p2: [[84.0]], p3: [[85.0], [86.0], [87.0]])], p2: [s1(p0: s0(p0: 88.0, p1: [[89.0], [90.0], [91.0]], p2: [[92.0]], p3: [[93.0], [94.0], [95.0]]), p1: s0(p0: 96.0, p1: [[97.0], [98.0], [99.0]], p2: [[100.0]], p3: [[101.0], [102.0], [103.0]])), s1(p0: s0(p0: 104.0, p1: [[105.0], [106.0], [107.0]], p2: [[108.0]], p3: [[109.0], [110.0], [111.0]]), p1: s0(p0: 112.0, p1: [[113.0], [114.0], [115.0]], p2: [[116.0]], p3: [[117.0], [118.0], [119.0]])), s1(p0: s0(p0: 120.0, p1: [[121.0], [122.0], [123.0]], p2: [[124.0]], p3: [[125.0], [126.0], [127.0]]), p1: s0(p0: 128.0, p1: [[129.0], [130.0], [131.0]], p2: [[132.0]], p3: [[133.0], [134.0], [135.0]]))]), p3: [[s2(p0: s0(p0: 136.0, p1: [[137.0], [138.0], [139.0]], p2: [[140.0]], p3: [[141.0], [142.0], [143.0]]), p1: 144.0)]]), p1: [s11(p0: s1(p0: s0(p0: 145.0, p1: [[146.0], [147.0], [148.0]], p2: [[149.0]], p3: [[150.0], [151.0], [152.0]]), p1: s0(p0: 153.0, p1: [[154.0], [155.0], [156.0]], p2: [[157.0]], p3: [[158.0], [159.0], [160.0]])), p1: s3(p0: [s1(p0: s0(p0: 161.0, p1: [[162.0], [163.0], [164.0]], p2: [[165.0]], p3: [[166.0], [167.0], [168.0]]), p1: s0(p0: 169.0, p1: [[170.0], [171.0], [172.0]], p2: [[173.0]], p3: [[174.0], [175.0], [176.0]])), s1(p0: s0(p0: 177.0, p1: [[178.0], [179.0], [180.0]], p2: [[181.0]], p3: [[182.0], [183.0], [184.0]]), p1: s0(p0: 185.0, p1: [[186.0], [187.0], [188.0]], p2: [[189.0]], p3: [[190.0], [191.0], [192.0]])), s1(p0: s0(p0: 193.0, p1: [[194.0], [195.0], [196.0]], p2: [[197.0]], p3: [[198.0], [199.0], [200.0]]), p1: s0(p0: 201.0, p1: [[202.0], [203.0], [204.0]], p2: [[205.0]], p3: [[206.0], [207.0], [208.0]]))], p1: [s1(p0: s0(p0: 209.0, p1: [[210.0], [211.0], [212.0]], p2: [[213.0]], p3: [[214.0], [215.0], [216.0]]), p1: s0(p0: 217.0, p1: [[218.0], [219.0], [220.0]], p2: [[221.0]], p3: [[222.0], [223.0], [224.0]]))])), s11(p0: s1(p0: s0(p0: 225.0, p1: [[226.0], [227.0], [228.0]], p2: [[229.0]], p3: [[230.0], [231.0], [232.0]]), p1: s0(p0: 233.0, p1: [[234.0], [235.0], [236.0]], p2: [[237.0]], p3: [[238.0], [239.0], [240.0]])), p1: s3(p0: [s1(p0: s0(p0: 241.0, p1: [[242.0], [243.0], [244.0]], p2: [[245.0]], p3: [[246.0], [247.0], [248.0]]), p1: s0(p0: 249.0, p1: [[250.0], [251.0], [252.0]], p2: [[253.0]], p3: [[254.0], [255.0], [256.0]])), s1(p0: s0(p0: 257.0, p1: [[258.0], [259.0], [260.0]], p2: [[261.0]], p3: [[262.0], [263.0], [264.0]]), p1: s0(p0: 265.0, p1: [[266.0], [267.0], [268.0]], p2: [[269.0]], p3: [[270.0], [271.0], [272.0]])), s1(p0: s0(p0: 273.0, p1: [[274.0], [275.0], [276.0]], p2: [[277.0]], p3: [[278.0], [279.0], [280.0]]), p1: s0(p0: 281.0, p1: [[282.0], [283.0], [284.0]], p2: [[285.0]], p3: [[286.0], [287.0], [288.0]]))], p1: [s1(p0: s0(p0: 289.0, p1: [[290.0], [291.0], [292.0]], p2: [[293.0]], p3: [[294.0], [295.0], [296.0]]), p1: s0(p0: 297.0, p1: [[298.0], [299.0], [300.0]], p2: [[301.0]], p3: [[302.0], [303.0], [304.0]]))])), s11(p0: s1(p0: s0(p0: 305.0, p1: [[306.0], [307.0], [308.0]], p2: [[309.0]], p3: [[310.0], [311.0], [312.0]]), p1: s0(p0: 313.0, p1: [[314.0], [315.0], [316.0]], p2: [[317.0]], p3: [[318.0], [319.0], [320.0]])), p1: s3(p0: [s1(p0: s0(p0: 321.0, p1: [[322.0], [323.0], [324.0]], p2: [[325.0]], p3: [[326.0], [327.0], [328.0]]), p1: s0(p0: 329.0, p1: [[330.0], [331.0], [332.0]], p2: [[333.0]], p3: [[334.0], [335.0], [336.0]])), s1(p0: s0(p0: 337.0, p1: [[338.0], [339.0], [340.0]], p2: [[341.0]], p3: [[342.0], [343.0], [344.0]]), p1: s0(p0: 345.0, p1: [[346.0], [347.0], [348.0]], p2: [[349.0]], p3: [[350.0], [351.0], [352.0]])), s1(p0: s0(p0: 353.0, p1: [[354.0], [355.0], [356.0]], p2: [[357.0]], p3: [[358.0], [359.0], [360.0]]), p1: s0(p0: 361.0, p1: [[362.0], [363.0], [364.0]], p2: [[365.0]], p3: [[366.0], [367.0], [368.0]]))], p1: [s1(p0: s0(p0: 369.0, p1: [[370.0], [371.0], [372.0]], p2: [[373.0]], p3: [[374.0], [375.0], [376.0]]), p1: s0(p0: 377.0, p1: [[378.0], [379.0], [380.0]], p2: [[381.0]], p3: [[382.0], [383.0], [384.0]]))]))]), s12(p0: s9(p0: [s0(p0: 385.0, p1: [[386.0], [387.0], [388.0]], p2: [[389.0]], p3: [[390.0], [391.0], [392.0]]), s0(p0: 393.0, p1: [[394.0], [395.0], [396.0]], p2: [[397.0]], p3: [[398.0], [399.0], [400.0]]), s0(p0: 401.0, p1: [[402.0], [403.0], [404.0]], p2: [[405.0]], p3: [[406.0], [407.0], [408.0]])], p1: [s0(p0: 409.0, p1: [[410.0], [411.0], [412.0]], p2: [[413.0]], p3: [[414.0], [415.0], [416.0]]), s0(p0: 417.0, p1: [[418.0], [419.0], [420.0]], p2: [[421.0]], p3: [[422.0], [423.0], [424.0]]), s0(p0: 425.0, p1: [[426.0], [427.0], [428.0]], p2: [[429.0]], p3: [[430.0], [431.0], [432.0]])], p2: s6(p0: s1(p0: s0(p0: 433.0, p1: [[434.0], [435.0], [436.0]], p2: [[437.0]], p3: [[438.0], [439.0], [440.0]]), p1: s0(p0: 441.0, p1: [[442.0], [443.0], [444.0]], p2: [[445.0]], p3: [[446.0], [447.0], [448.0]])), p1: [s0(p0: 449.0, p1: [[450.0], [451.0], [452.0]], p2: [[453.0]], p3: [[454.0], [455.0], [456.0]]), s0(p0: 457.0, p1: [[458.0], [459.0], [460.0]], p2: [[461.0]], p3: [[462.0], [463.0], [464.0]]), s0(p0: 465.0, p1: [[466.0], [467.0], [468.0]], p2: [[469.0]], p3: [[470.0], [471.0], [472.0]])], p2: [s1(p0: s0(p0: 473.0, p1: [[474.0], [475.0], [476.0]], p2: [[477.0]], p3: [[478.0], [479.0], [480.0]]), p1: s0(p0: 481.0, p1: [[482.0], [483.0], [484.0]], p2: [[485.0]], p3: [[486.0], [487.0], [488.0]])), s1(p0: s0(p0: 489.0, p1: [[490.0], [491.0], [492.0]], p2: [[493.0]], p3: [[494.0], [495.0], [496.0]]), p1: s0(p0: 497.0, p1: [[498.0], [499.0], [500.0]], p2: [[501.0]], p3: [[502.0], [503.0], [504.0]])), s1(p0: s0(p0: 505.0, p1: [[506.0], [507.0], [508.0]], p2: [[509.0]], p3: [[510.0], [511.0], [512.0]]), p1: s0(p0: 513.0, p1: [[514.0], [515.0], [516.0]], p2: [[517.0]], p3: [[518.0], [519.0], [520.0]]))]), p3: [[s2(p0: s0(p0: 521.0, p1: [[522.0], [523.0], [524.0]], p2: [[525.0]], p3: [[526.0], [527.0], [528.0]]), p1: 529.0)]]), p1: [s11(p0: s1(p0: s0(p0: 530.0, p1: [[531.0], [532.0], [533.0]], p2: [[534.0]], p3: [[535.0], [536.0], [537.0]]), p1: s0(p0: 538.0, p1: [[539.0], [540.0], [541.0]], p2: [[542.0]], p3: [[543.0], [544.0], [545.0]])), p1: s3(p0: [s1(p0: s0(p0: 546.0, p1: [[547.0], [548.0], [549.0]], p2: [[550.0]], p3: [[551.0], [552.0], [553.0]]), p1: s0(p0: 554.0, p1: [[555.0], [556.0], [557.0]], p2: [[558.0]], p3: [[559.0], [560.0], [561.0]])), s1(p0: s0(p0: 562.0, p1: [[563.0], [564.0], [565.0]], p2: [[566.0]], p3: [[567.0], [568.0], [569.0]]), p1: s0(p0: 570.0, p1: [[571.0], [572.0], [573.0]], p2: [[574.0]], p3: [[575.0], [576.0], [577.0]])), s1(p0: s0(p0: 578.0, p1: [[579.0], [580.0], [581.0]], p2: [[582.0]], p3: [[583.0], [584.0], [585.0]]), p1: s0(p0: 586.0, p1: [[587.0], [588.0], [589.0]], p2: [[590.0]], p3: [[591.0], [592.0], [593.0]]))], p1: [s1(p0: s0(p0: 594.0, p1: [[595.0], [596.0], [597.0]], p2: [[598.0]], p3: [[599.0], [600.0], [601.0]]), p1: s0(p0: 602.0, p1: [[603.0], [604.0], [605.0]], p2: [[606.0]], p3: [[607.0], [608.0], [609.0]]))])), s11(p0: s1(p0: s0(p0: 610.0, p1: [[611.0], [612.0], [613.0]], p2: [[614.0]], p3: [[615.0], [616.0], [617.0]]), p1: s0(p0: 618.0, p1: [[619.0], [620.0], [621.0]], p2: [[622.0]], p3: [[623.0], [624.0], [625.0]])), p1: s3(p0: [s1(p0: s0(p0: 626.0, p1: [[627.0], [628.0], [629.0]], p2: [[630.0]], p3: [[631.0], [632.0], [633.0]]), p1: s0(p0: 634.0, p1: [[635.0], [636.0], [637.0]], p2: [[638.0]], p3: [[639.0], [640.0], [641.0]])), s1(p0: s0(p0: 642.0, p1: [[643.0], [644.0], [645.0]], p2: [[646.0]], p3: [[647.0], [648.0], [649.0]]), p1: s0(p0: 650.0, p1: [[651.0], [652.0], [653.0]], p2: [[654.0]], p3: [[655.0], [656.0], [657.0]])), s1(p0: s0(p0: 658.0, p1: [[659.0], [660.0], [661.0]], p2: [[662.0]], p3: [[663.0], [664.0], [665.0]]), p1: s0(p0: 666.0, p1: [[667.0], [668.0], [669.0]], p2: [[670.0]], p3: [[671.0], [672.0], [673.0]]))], p1: [s1(p0: s0(p0: 674.0, p1: [[675.0], [676.0], [677.0]], p2: [[678.0]], p3: [[679.0], [680.0], [681.0]]), p1: s0(p0: 682.0, p1: [[683.0], [684.0], [685.0]], p2: [[686.0]], p3: [[687.0], [688.0], [689.0]]))])), s11(p0: s1(p0: s0(p0: 690.0, p1: [[691.0], [692.0], [693.0]], p2: [[694.0]], p3: [[695.0], [696.0], [697.0]]), p1: s0(p0: 698.0, p1: [[699.0], [700.0], [701.0]], p2: [[702.0]], p3: [[703.0], [704.0], [705.0]])), p1: s3(p0: [s1(p0: s0(p0: 706.0, p1: [[707.0], [708.0], [709.0]], p2: [[710.0]], p3: [[711.0], [712.0], [713.0]]), p1: s0(p0: 714.0, p1: [[715.0], [716.0], [717.0]], p2: [[718.0]], p3: [[719.0], [720.0], [721.0]])), s1(p0: s0(p0: 722.0, p1: [[723.0], [724.0], [725.0]], p2: [[726.0]], p3: [[727.0], [728.0], [729.0]]), p1: s0(p0: 730.0, p1: [[731.0], [732.0], [733.0]], p2: [[734.0]], p3: [[735.0], [736.0], [737.0]])), s1(p0: s0(p0: 738.0, p1: [[739.0], [740.0], [741.0]], p2: [[742.0]], p3: [[743.0], [744.0], [745.0]]), p1: s0(p0: 746.0, p1: [[747.0], [748.0], [749.0]], p2: [[750.0]], p3: [[751.0], [752.0], [753.0]]))], p1: [s1(p0: s0(p0: 754.0, p1: [[755.0], [756.0], [757.0]], p2: [[758.0]], p3: [[759.0], [760.0], [761.0]]), p1: s0(p0: 762.0, p1: [[763.0], [764.0], [765.0]], p2: [[766.0]], p3: [[767.0], [768.0], [769.0]]))]))]), s12(p0: s9(p0: [s0(p0: 770.0, p1: [[771.0], [772.0], [773.0]], p2: [[774.0]], p3: [[775.0], [776.0], [777.0]]), s0(p0: 778.0, p1: [[779.0], [780.0], [781.0]], p2: [[782.0]], p3: [[783.0], [784.0], [785.0]]), s0(p0: 786.0, p1: [[787.0], [788.0], [789.0]], p2: [[790.0]], p3: [[791.0], [792.0], [793.0]])], p1: [s0(p0: 794.0, p1: [[795.0], [796.0], [797.0]], p2: [[798.0]], p3: [[799.0], [800.0], [801.0]]), s0(p0: 802.0, p1: [[803.0], [804.0], [805.0]], p2: [[806.0]], p3: [[807.0], [808.0], [809.0]]), s0(p0: 810.0, p1: [[811.0], [812.0], [813.0]], p2: [[814.0]], p3: [[815.0], [816.0], [817.0]])], p2: s6(p0: s1(p0: s0(p0: 818.0, p1: [[819.0], [820.0], [821.0]], p2: [[822.0]], p3: [[823.0], [824.0], [825.0]]), p1: s0(p0: 826.0, p1: [[827.0], [828.0], [829.0]], p2: [[830.0]], p3: [[831.0], [832.0], [833.0]])), p1: [s0(p0: 834.0, p1: [[835.0], [836.0], [837.0]], p2: [[838.0]], p3: [[839.0], [840.0], [841.0]]), s0(p0: 842.0, p1: [[843.0], [844.0], [845.0]], p2: [[846.0]], p3: [[847.0], [848.0], [849.0]]), s0(p0: 850.0, p1: [[851.0], [852.0], [853.0]], p2: [[854.0]], p3: [[855.0], [856.0], [857.0]])], p2: [s1(p0: s0(p0: 858.0, p1: [[859.0], [860.0], [861.0]], p2: [[862.0]], p3: [[863.0], [864.0], [865.0]]), p1: s0(p0: 866.0, p1: [[867.0], [868.0], [869.0]], p2: [[870.0]], p3: [[871.0], [872.0], [873.0]])), s1(p0: s0(p0: 874.0, p1: [[875.0], [876.0], [877.0]], p2: [[878.0]], p3: [[879.0], [880.0], [881.0]]), p1: s0(p0: 882.0, p1: [[883.0], [884.0], [885.0]], p2: [[886.0]], p3: [[887.0], [888.0], [889.0]])), s1(p0: s0(p0: 890.0, p1: [[891.0], [892.0], [893.0]], p2: [[894.0]], p3: [[895.0], [896.0], [897.0]]), p1: s0(p0: 898.0, p1: [[899.0], [900.0], [901.0]], p2: [[902.0]], p3: [[903.0], [904.0], [905.0]]))]), p3: [[s2(p0: s0(p0: 906.0, p1: [[907.0], [908.0], [909.0]], p2: [[910.0]], p3: [[911.0], [912.0], [913.0]]), p1: 914.0)]]), p1: [s11(p0: s1(p0: s0(p0: 915.0, p1: [[916.0], [917.0], [918.0]], p2: [[919.0]], p3: [[920.0], [921.0], [922.0]]), p1: s0(p0: 923.0, p1: [[924.0], [925.0], [926.0]], p2: [[927.0]], p3: [[928.0], [929.0], [930.0]])), p1: s3(p0: [s1(p0: s0(p0: 931.0, p1: [[932.0], [933.0], [934.0]], p2: [[935.0]], p3: [[936.0], [937.0], [938.0]]), p1: s0(p0: 939.0, p1: [[940.0], [941.0], [942.0]], p2: [[943.0]], p3: [[944.0], [945.0], [946.0]])), s1(p0: s0(p0: 947.0, p1: [[948.0], [949.0], [950.0]], p2: [[951.0]], p3: [[952.0], [953.0], [954.0]]), p1: s0(p0: 955.0, p1: [[956.0], [957.0], [958.0]], p2: [[959.0]], p3: [[960.0], [961.0], [962.0]])), s1(p0: s0(p0: 963.0, p1: [[964.0], [965.0], [966.0]], p2: [[967.0]], p3: [[968.0], [969.0], [970.0]]), p1: s0(p0: 971.0, p1: [[972.0], [973.0], [974.0]], p2: [[975.0]], p3: [[976.0], [977.0], [978.0]]))], p1: [s1(p0: s0(p0: 979.0, p1: [[980.0], [981.0], [982.0]], p2: [[983.0]], p3: [[984.0], [985.0], [986.0]]), p1: s0(p0: 987.0, p1: [[988.0], [989.0], [990.0]], p2: [[991.0]], p3: [[992.0], [993.0], [994.0]]))])), s11(p0: s1(p0: s0(p0: 995.0, p1: [[996.0], [997.0], [998.0]], p2: [[999.0]], p3: [[1000.0], [1001.0], [1002.0]]), p1: s0(p0: 1003.0, p1: [[1004.0], [1005.0], [1006.0]], p2: [[1007.0]], p3: [[1008.0], [1009.0], [1010.0]])), p1: s3(p0: [s1(p0: s0(p0: 1011.0, p1: [[1012.0], [1013.0], [1014.0]], p2: [[1015.0]], p3: [[1016.0], [1017.0], [1018.0]]), p1: s0(p0: 1019.0, p1: [[1020.0], [1021.0], [1022.0]], p2: [[1023.0]], p3: [[1024.0], [1025.0], [1026.0]])), s1(p0: s0(p0: 1027.0, p1: [[1028.0], [1029.0], [1030.0]], p2: [[1031.0]], p3: [[1032.0], [1033.0], [1034.0]]), p1: s0(p0: 1035.0, p1: [[1036.0], [1037.0], [1038.0]], p2: [[1039.0]], p3: [[1040.0], [1041.0], [1042.0]])), s1(p0: s0(p0: 1043.0, p1: [[1044.0], [1045.0], [1046.0]], p2: [[1047.0]], p3: [[1048.0], [1049.0], [1050.0]]), p1: s0(p0: 1051.0, p1: [[1052.0], [1053.0], [1054.0]], p2: [[1055.0]], p3: [[1056.0], [1057.0], [1058.0]]))], p1: [s1(p0: s0(p0: 1059.0, p1: [[1060.0], [1061.0], [1062.0]], p2: [[1063.0]], p3: [[1064.0], [1065.0], [1066.0]]), p1: s0(p0: 1067.0, p1: [[1068.0], [1069.0], [1070.0]], p2: [[1071.0]], p3: [[1072.0], [1073.0], [1074.0]]))])), s11(p0: s1(p0: s0(p0: 1075.0, p1: [[1076.0], [1077.0], [1078.0]], p2: [[1079.0]], p3: [[1080.0], [1081.0], [1082.0]]), p1: s0(p0: 1083.0, p1: [[1084.0], [1085.0], [1086.0]], p2: [[1087.0]], p3: [[1088.0], [1089.0], [1090.0]])), p1: s3(p0: [s1(p0: s0(p0: 1091.0, p1: [[1092.0], [1093.0], [1094.0]], p2: [[1095.0]], p3: [[1096.0], [1097.0], [1098.0]]), p1: s0(p0: 1099.0, p1: [[1100.0], [1101.0], [1102.0]], p2: [[1103.0]], p3: [[1104.0], [1105.0], [1106.0]])), s1(p0: s0(p0: 1107.0, p1: [[1108.0], [1109.0], [1110.0]], p2: [[1111.0]], p3: [[1112.0], [1113.0], [1114.0]]), p1: s0(p0: 1115.0, p1: [[1116.0], [1117.0], [1118.0]], p2: [[1119.0]], p3: [[1120.0], [1121.0], [1122.0]])), s1(p0: s0(p0: 1123.0, p1: [[1124.0], [1125.0], [1126.0]], p2: [[1127.0]], p3: [[1128.0], [1129.0], [1130.0]]), p1: s0(p0: 1131.0, p1: [[1132.0], [1133.0], [1134.0]], p2: [[1135.0]], p3: [[1136.0], [1137.0], [1138.0]]))], p1: [s1(p0: s0(p0: 1139.0, p1: [[1140.0], [1141.0], [1142.0]], p2: [[1143.0]], p3: [[1144.0], [1145.0], [1146.0]]), p1: s0(p0: 1147.0, p1: [[1148.0], [1149.0], [1150.0]], p2: [[1151.0]], p3: [[1152.0], [1153.0], [1154.0]]))]))])]
    let v1: Double = 1155.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 1155.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
