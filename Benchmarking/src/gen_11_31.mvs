  let noinline_f0: ([[Float]], [[Float]], [[Float]], Float) -> Float = (v0: [[Float]], v1: [[Float]], v2: [[Float]], v3: Float) -> Float {
    let v5: [Float] = v2[0] in
    let v7: [Float] = v2[1] in
    let v10: Float = v7[0] in
    let v9: Float = v5[0] in
    var v19: Float = v10 in
    v19 = v10 in
    let v70: [Float] = [v3, v3, v19, v9] in
    let v16: [[Float]] = [v70, v70, v70] in
    let v44: [Float] = v2[1] in
    let v37: [Float] = v16[2] in
    let v152: Float = v37[2] in
    let v108: Float = v44[0] in
    let v124: Float = v108 * v152 in
    var v137: Float = v124 in
    v137
  } in
  fun loop(i: Int, v0: [[Float]], v1: [[Float]], v2: [[Float]], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0], [1.0]] in
    let v1: [[Float]] = [[2.0], [3.0]] in
    let v2: [[Float]] = [[4.0], [5.0]] in
    let v3: Float = 6.0 in
    let initialResult: Float = 6.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()