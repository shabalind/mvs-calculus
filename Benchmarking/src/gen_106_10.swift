  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: [s1]
    var p1: s0
  }
  func f17(_ v0: Double) -> Double {
    var v7: Double = v0
    var v5: Double = v7
    var v2: Double = v5
    var v8: Double = v2
    return v8
  }
  @inline(never)
  func f0(_ v0: [[s2]], _ v1: Double) -> Double {
    let v7: Double = f17(v1)
    var v15: Double = v7
    let v11: Double = f17(v1)
    v15 = v11
    let v25: Double = v15 / v15
    var v14: Double = v7
    let v16: Double = f17(v14)
    var v52: Double = v25
    v52 = v16
    return v52
  }
  func benchmark() {
    let v0: [[s2]] = [[s2(p0: [s1(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0], [4.0]]), p1: [s0(p0: [[5.0], [6.0]], p1: [[7.0], [8.0], [9.0]]), s0(p0: [[10.0], [11.0]], p1: [[12.0], [13.0], [14.0]]), s0(p0: [[15.0], [16.0]], p1: [[17.0], [18.0], [19.0]])]), s1(p0: s0(p0: [[20.0], [21.0]], p1: [[22.0], [23.0], [24.0]]), p1: [s0(p0: [[25.0], [26.0]], p1: [[27.0], [28.0], [29.0]]), s0(p0: [[30.0], [31.0]], p1: [[32.0], [33.0], [34.0]]), s0(p0: [[35.0], [36.0]], p1: [[37.0], [38.0], [39.0]])]), s1(p0: s0(p0: [[40.0], [41.0]], p1: [[42.0], [43.0], [44.0]]), p1: [s0(p0: [[45.0], [46.0]], p1: [[47.0], [48.0], [49.0]]), s0(p0: [[50.0], [51.0]], p1: [[52.0], [53.0], [54.0]]), s0(p0: [[55.0], [56.0]], p1: [[57.0], [58.0], [59.0]])])], p1: s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0], [64.0]]))], [s2(p0: [s1(p0: s0(p0: [[65.0], [66.0]], p1: [[67.0], [68.0], [69.0]]), p1: [s0(p0: [[70.0], [71.0]], p1: [[72.0], [73.0], [74.0]]), s0(p0: [[75.0], [76.0]], p1: [[77.0], [78.0], [79.0]]), s0(p0: [[80.0], [81.0]], p1: [[82.0], [83.0], [84.0]])]), s1(p0: s0(p0: [[85.0], [86.0]], p1: [[87.0], [88.0], [89.0]]), p1: [s0(p0: [[90.0], [91.0]], p1: [[92.0], [93.0], [94.0]]), s0(p0: [[95.0], [96.0]], p1: [[97.0], [98.0], [99.0]]), s0(p0: [[100.0], [101.0]], p1: [[102.0], [103.0], [104.0]])]), s1(p0: s0(p0: [[105.0], [106.0]], p1: [[107.0], [108.0], [109.0]]), p1: [s0(p0: [[110.0], [111.0]], p1: [[112.0], [113.0], [114.0]]), s0(p0: [[115.0], [116.0]], p1: [[117.0], [118.0], [119.0]]), s0(p0: [[120.0], [121.0]], p1: [[122.0], [123.0], [124.0]])])], p1: s0(p0: [[125.0], [126.0]], p1: [[127.0], [128.0], [129.0]]))], [s2(p0: [s1(p0: s0(p0: [[130.0], [131.0]], p1: [[132.0], [133.0], [134.0]]), p1: [s0(p0: [[135.0], [136.0]], p1: [[137.0], [138.0], [139.0]]), s0(p0: [[140.0], [141.0]], p1: [[142.0], [143.0], [144.0]]), s0(p0: [[145.0], [146.0]], p1: [[147.0], [148.0], [149.0]])]), s1(p0: s0(p0: [[150.0], [151.0]], p1: [[152.0], [153.0], [154.0]]), p1: [s0(p0: [[155.0], [156.0]], p1: [[157.0], [158.0], [159.0]]), s0(p0: [[160.0], [161.0]], p1: [[162.0], [163.0], [164.0]]), s0(p0: [[165.0], [166.0]], p1: [[167.0], [168.0], [169.0]])]), s1(p0: s0(p0: [[170.0], [171.0]], p1: [[172.0], [173.0], [174.0]]), p1: [s0(p0: [[175.0], [176.0]], p1: [[177.0], [178.0], [179.0]]), s0(p0: [[180.0], [181.0]], p1: [[182.0], [183.0], [184.0]]), s0(p0: [[185.0], [186.0]], p1: [[187.0], [188.0], [189.0]])])], p1: s0(p0: [[190.0], [191.0]], p1: [[192.0], [193.0], [194.0]]))]]
    let v1: Double = 195.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 195.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
