  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s2 {
    var p0: [s1]
    var p1: [[s1]]
    var p2: [[s0]]
  } in
  struct s4 {
    var p0: [s2]
    var p1: s2
    var p2: s0
    var p3: s0
  } in
  let f4: (Float) -> Float = (v0: Float) -> Float {
    var v7: Float = v0 in
    var v6: Float = v7 in
    var v5: Float = v6 in
    var v1: Float = v6 in
    var v2: Float = v7 in
    var v4: Float = v0 in
    var v9: Float = v7 in
    var v3: Float = v2 in
    var v12: Float = v9 in
    var v20: Float = v2 in
    var v15: Float = v9 in
    var v13: Float = v1 in
    v2 = v13 in
    var v30: Float = v1 in
    var v29: Float = v12 in
    var v32: Float = v15 in
    var v23: Float = v6 in
    var v49: Float = v29 in
    let v25: Float = v29 + v2 in
    var v27: Float = v49 in
    var v58: Float = v20 in
    var v69: Float = v4 in
    var v57: Float = v5 in
    var v42: Float = v49 in
    let v59: [Float] = [v69, v58, v25] in
    let v70: Float = v59[0] in
    var v74: [Float] = v59 in
    v74[0] = v42 in
    let v68: [Float] = [v32, v30, v12, v3, v69, v70, v23] in
    let v102: Float = v68[1] in
    let v89: Float = v68[1] in
    var v48: [Float] = v74 in
    let v62: Float = v74[0] in
    let v85: Float = v68[6] in
    let v61: Float = v85 / v7 in
    var v92: [Float] = v68 in
    v74[1] = v23 in
    v48[1] = v85 in
    v48[2] = v57 in
    let v125: Float = v48[2] in
    var v117: [Float] = v92 in
    var v90: Float = v125 in
    v74[1] = v1 in
    var v149: Float = v90 in
    v117[5] = v62 in
    var v170: [Float] = v117 in
    v48[0] = v6 in
    v74[0] = v102 in
    v74[2] = v149 in
    v29 = v61 in
    var v358: [Float] = v170 in
    let v253: Float = v358[6] in
    v74[2] = v89 in
    v74[1] = v27 in
    v253
  } in
  let noinline_f0: (s4, [s1], Float) -> Float = (v0: s4, v1: [s1], v2: Float) -> Float {
    let v12: Float = f4(v2) in
    var v11: Float = v12 in
    let v10: Float = f4(v2) in
    let v72: Float = v10 / v11 in
    let v54: Float = f4(v11) in
    let v49: Float = v54 / v72 in
    let v120: Float = f4(v49) in
    v120
  } in
  fun loop(i: Int, v0: s4, v1: [s1], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s4 = s4([s2([s1([s0([[0.0]], [[1.0], [2.0]])], s0([[3.0]], [[4.0], [5.0]])), s1([s0([[6.0]], [[7.0], [8.0]])], s0([[9.0]], [[10.0], [11.0]]))], [[s1([s0([[12.0]], [[13.0], [14.0]])], s0([[15.0]], [[16.0], [17.0]]))], [s1([s0([[18.0]], [[19.0], [20.0]])], s0([[21.0]], [[22.0], [23.0]]))]], [[s0([[24.0]], [[25.0], [26.0]])], [s0([[27.0]], [[28.0], [29.0]])], [s0([[30.0]], [[31.0], [32.0]])]]), s2([s1([s0([[33.0]], [[34.0], [35.0]])], s0([[36.0]], [[37.0], [38.0]])), s1([s0([[39.0]], [[40.0], [41.0]])], s0([[42.0]], [[43.0], [44.0]]))], [[s1([s0([[45.0]], [[46.0], [47.0]])], s0([[48.0]], [[49.0], [50.0]]))], [s1([s0([[51.0]], [[52.0], [53.0]])], s0([[54.0]], [[55.0], [56.0]]))]], [[s0([[57.0]], [[58.0], [59.0]])], [s0([[60.0]], [[61.0], [62.0]])], [s0([[63.0]], [[64.0], [65.0]])]])], s2([s1([s0([[66.0]], [[67.0], [68.0]])], s0([[69.0]], [[70.0], [71.0]])), s1([s0([[72.0]], [[73.0], [74.0]])], s0([[75.0]], [[76.0], [77.0]]))], [[s1([s0([[78.0]], [[79.0], [80.0]])], s0([[81.0]], [[82.0], [83.0]]))], [s1([s0([[84.0]], [[85.0], [86.0]])], s0([[87.0]], [[88.0], [89.0]]))]], [[s0([[90.0]], [[91.0], [92.0]])], [s0([[93.0]], [[94.0], [95.0]])], [s0([[96.0]], [[97.0], [98.0]])]]), s0([[99.0]], [[100.0], [101.0]]), s0([[102.0]], [[103.0], [104.0]])) in
    let v1: [s1] = [s1([s0([[105.0]], [[106.0], [107.0]])], s0([[108.0]], [[109.0], [110.0]])), s1([s0([[111.0]], [[112.0], [113.0]])], s0([[114.0]], [[115.0], [116.0]]))] in
    let v2: Float = 117.0 in
    let initialResult: Float = 117.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()