  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: (s0, s0, [s0], Float) -> Float = (v0: s0, v1: s0, v2: [s0], v3: Float) -> Float {
    let v5: s0 = v2[1] in
    let v7: [[Float]] = v5.p0 in
    let v6: [Float] = v7[0] in
    let v18: s0 = v2[1] in
    let v17: [[Float]] = v18.p0 in
    let v15: [Float] = v17[0] in
    let v23: Float = v15[0] in
    var v24: [Float] = v6 in
    v24[0] = v23 in
    let v68: Float = v24[0] in
    v68
  } in
  fun loop(i: Int, v0: s0, v1: s0, v2: [s0], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0]], [[1.0], [2.0]]) in
    let v1: s0 = s0([[3.0]], [[4.0], [5.0]]) in
    let v2: [s0] = [s0([[6.0]], [[7.0], [8.0]]), s0([[9.0]], [[10.0], [11.0]])] in
    let v3: Float = 12.0 in
    let initialResult: Float = 12.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()