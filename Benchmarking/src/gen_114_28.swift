  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: [s1]
    var p1: [Double]
  }
  struct s3 {
    var p0: [[s2]]
    var p1: s1
  }
  struct s5 {
    var p0: s2
    var p1: s2
  }
  struct s6 {
    var p0: s3
    var p1: s2
  }
  func f76(_ v0: Double) -> Double {
    let v1: Double = v0 + v0
    var v6: Double = v0
    var v8: Double = v1
    var v7: Double = v0
    var v3: Double = v6
    var v4: Double = v0
    var v2: Double = v8
    var v13: Double = v6
    var v9: Double = v2
    var v12: Double = v1
    var v25: Double = v6
    var v18: Double = v25
    v9 = v4
    var v20: Double = v0
    var v37: Double = v13
    v37 = v9
    var v29: Double = v20
    var v36: Double = v12
    var v16: Double = v18
    var v32: Double = v20
    let v30: [Double] = [v16, v8]
    var v23: [Double] = v30
    v3 = v37
    var v21: [Double] = v23
    v3 = v20
    let v33: Double = v30[1]
    var v24: Double = v3
    var v83: [Double] = v21
    let v28: Double = v23[1]
    let v26: Double = v83[0]
    v83[1] = v37
    var v93: Double = v28
    var v51: [Double] = v30
    v51[0] = v25
    v23[1] = v93
    var v27: Double = v29
    v21[1] = v32
    let v81: Double = v6 * v33
    v51[1] = v12
    var v52: [Double] = v23
    v52[0] = v7
    let v103: [[Double]] = [v51, v52, v21, v83, v30, v52]
    v51[1] = v32
    let v61: [Double] = v103[0]
    let v70: Double = v21[1]
    let v56: Double = v61[1]
    v83[0] = v81
    v83[0] = v24
    v18 = v36
    v25 = v70
    v83[1] = v56
    v21[0] = v27
    v32 = v12
    return v26
  }
  func f29(_ v0: Double) -> Double {
    var v4: Double = v0
    var v8: Double = v4
    let v3: [Double] = [v8, v8, v0, v8, v8]
    var v7: Double = v4
    var v2: [Double] = v3
    let v17: Double = v3[4]
    let v15: [[Double]] = [v2, v3, v3, v3, v3, v3, v3]
    let v13: [Double] = v15[2]
    var v11: [[Double]] = v15
    let v18: Double = v13[4]
    v2[4] = v17
    let v14: Double = v3[1]
    v11[2] = v3
    v11[1] = v13
    var v20: [Double] = v3
    let v35: Double = v20[4]
    let v21: Double = f76(v7)
    let v27: [[[Double]]] = [v11, v15, v15, v15, v11, v11, v11]
    v11[5] = v3
    v4 = v35
    let v97: Double = f76(v21)
    let v38: Double = f76(v8)
    let v46: Double = f76(v38)
    let v67: [[Double]] = v27[1]
    v2[4] = v14
    let v52: [Double] = v67[1]
    var v133: [Double] = v52
    v20[0] = v46
    v2[0] = v97
    let v81: Double = v133[0]
    let v96: [Double] = [v81]
    v2[1] = v18
    var v356: [Double] = v96
    let v165: Double = v356[0]
    return v165
  }
  @inline(never)
  func f0(_ v0: s6, _ v1: s5, _ v2: Double) -> Double {
    let v4: Double = f29(v2)
    var v8: Double = v4
    var v9: Double = v4
    let v22: Double = v8 + v8
    let v40: Double = v22 * v9
    v9 = v40
    v8 = v40
    var v80: Double = v8
    let v52: Double = v80 / v40
    return v52
  }
  func benchmark() {
    let v0: s6 = s6(p0: s3(p0: [[s2(p0: [s1(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0]]), p1: [s0(p0: [[4.0], [5.0]], p1: [[6.0], [7.0]]), s0(p0: [[8.0], [9.0]], p1: [[10.0], [11.0]]), s0(p0: [[12.0], [13.0]], p1: [[14.0], [15.0]])]), s1(p0: s0(p0: [[16.0], [17.0]], p1: [[18.0], [19.0]]), p1: [s0(p0: [[20.0], [21.0]], p1: [[22.0], [23.0]]), s0(p0: [[24.0], [25.0]], p1: [[26.0], [27.0]]), s0(p0: [[28.0], [29.0]], p1: [[30.0], [31.0]])]), s1(p0: s0(p0: [[32.0], [33.0]], p1: [[34.0], [35.0]]), p1: [s0(p0: [[36.0], [37.0]], p1: [[38.0], [39.0]]), s0(p0: [[40.0], [41.0]], p1: [[42.0], [43.0]]), s0(p0: [[44.0], [45.0]], p1: [[46.0], [47.0]])])], p1: [48.0, 49.0])], [s2(p0: [s1(p0: s0(p0: [[50.0], [51.0]], p1: [[52.0], [53.0]]), p1: [s0(p0: [[54.0], [55.0]], p1: [[56.0], [57.0]]), s0(p0: [[58.0], [59.0]], p1: [[60.0], [61.0]]), s0(p0: [[62.0], [63.0]], p1: [[64.0], [65.0]])]), s1(p0: s0(p0: [[66.0], [67.0]], p1: [[68.0], [69.0]]), p1: [s0(p0: [[70.0], [71.0]], p1: [[72.0], [73.0]]), s0(p0: [[74.0], [75.0]], p1: [[76.0], [77.0]]), s0(p0: [[78.0], [79.0]], p1: [[80.0], [81.0]])]), s1(p0: s0(p0: [[82.0], [83.0]], p1: [[84.0], [85.0]]), p1: [s0(p0: [[86.0], [87.0]], p1: [[88.0], [89.0]]), s0(p0: [[90.0], [91.0]], p1: [[92.0], [93.0]]), s0(p0: [[94.0], [95.0]], p1: [[96.0], [97.0]])])], p1: [98.0, 99.0])], [s2(p0: [s1(p0: s0(p0: [[100.0], [101.0]], p1: [[102.0], [103.0]]), p1: [s0(p0: [[104.0], [105.0]], p1: [[106.0], [107.0]]), s0(p0: [[108.0], [109.0]], p1: [[110.0], [111.0]]), s0(p0: [[112.0], [113.0]], p1: [[114.0], [115.0]])]), s1(p0: s0(p0: [[116.0], [117.0]], p1: [[118.0], [119.0]]), p1: [s0(p0: [[120.0], [121.0]], p1: [[122.0], [123.0]]), s0(p0: [[124.0], [125.0]], p1: [[126.0], [127.0]]), s0(p0: [[128.0], [129.0]], p1: [[130.0], [131.0]])]), s1(p0: s0(p0: [[132.0], [133.0]], p1: [[134.0], [135.0]]), p1: [s0(p0: [[136.0], [137.0]], p1: [[138.0], [139.0]]), s0(p0: [[140.0], [141.0]], p1: [[142.0], [143.0]]), s0(p0: [[144.0], [145.0]], p1: [[146.0], [147.0]])])], p1: [148.0, 149.0])]], p1: s1(p0: s0(p0: [[150.0], [151.0]], p1: [[152.0], [153.0]]), p1: [s0(p0: [[154.0], [155.0]], p1: [[156.0], [157.0]]), s0(p0: [[158.0], [159.0]], p1: [[160.0], [161.0]]), s0(p0: [[162.0], [163.0]], p1: [[164.0], [165.0]])])), p1: s2(p0: [s1(p0: s0(p0: [[166.0], [167.0]], p1: [[168.0], [169.0]]), p1: [s0(p0: [[170.0], [171.0]], p1: [[172.0], [173.0]]), s0(p0: [[174.0], [175.0]], p1: [[176.0], [177.0]]), s0(p0: [[178.0], [179.0]], p1: [[180.0], [181.0]])]), s1(p0: s0(p0: [[182.0], [183.0]], p1: [[184.0], [185.0]]), p1: [s0(p0: [[186.0], [187.0]], p1: [[188.0], [189.0]]), s0(p0: [[190.0], [191.0]], p1: [[192.0], [193.0]]), s0(p0: [[194.0], [195.0]], p1: [[196.0], [197.0]])]), s1(p0: s0(p0: [[198.0], [199.0]], p1: [[200.0], [201.0]]), p1: [s0(p0: [[202.0], [203.0]], p1: [[204.0], [205.0]]), s0(p0: [[206.0], [207.0]], p1: [[208.0], [209.0]]), s0(p0: [[210.0], [211.0]], p1: [[212.0], [213.0]])])], p1: [214.0, 215.0]))
    let v1: s5 = s5(p0: s2(p0: [s1(p0: s0(p0: [[216.0], [217.0]], p1: [[218.0], [219.0]]), p1: [s0(p0: [[220.0], [221.0]], p1: [[222.0], [223.0]]), s0(p0: [[224.0], [225.0]], p1: [[226.0], [227.0]]), s0(p0: [[228.0], [229.0]], p1: [[230.0], [231.0]])]), s1(p0: s0(p0: [[232.0], [233.0]], p1: [[234.0], [235.0]]), p1: [s0(p0: [[236.0], [237.0]], p1: [[238.0], [239.0]]), s0(p0: [[240.0], [241.0]], p1: [[242.0], [243.0]]), s0(p0: [[244.0], [245.0]], p1: [[246.0], [247.0]])]), s1(p0: s0(p0: [[248.0], [249.0]], p1: [[250.0], [251.0]]), p1: [s0(p0: [[252.0], [253.0]], p1: [[254.0], [255.0]]), s0(p0: [[256.0], [257.0]], p1: [[258.0], [259.0]]), s0(p0: [[260.0], [261.0]], p1: [[262.0], [263.0]])])], p1: [264.0, 265.0]), p1: s2(p0: [s1(p0: s0(p0: [[266.0], [267.0]], p1: [[268.0], [269.0]]), p1: [s0(p0: [[270.0], [271.0]], p1: [[272.0], [273.0]]), s0(p0: [[274.0], [275.0]], p1: [[276.0], [277.0]]), s0(p0: [[278.0], [279.0]], p1: [[280.0], [281.0]])]), s1(p0: s0(p0: [[282.0], [283.0]], p1: [[284.0], [285.0]]), p1: [s0(p0: [[286.0], [287.0]], p1: [[288.0], [289.0]]), s0(p0: [[290.0], [291.0]], p1: [[292.0], [293.0]]), s0(p0: [[294.0], [295.0]], p1: [[296.0], [297.0]])]), s1(p0: s0(p0: [[298.0], [299.0]], p1: [[300.0], [301.0]]), p1: [s0(p0: [[302.0], [303.0]], p1: [[304.0], [305.0]]), s0(p0: [[306.0], [307.0]], p1: [[308.0], [309.0]]), s0(p0: [[310.0], [311.0]], p1: [[312.0], [313.0]])])], p1: [314.0, 315.0]))
    let v2: Double = 316.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 316.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
