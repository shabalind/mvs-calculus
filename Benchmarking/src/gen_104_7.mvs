  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s1]
    var p1: s0
  } in
  struct s3 {
    var p0: s2
    var p1: [s2]
  } in
  struct s4 {
    var p0: s3
    var p1: s2
  } in
  let f5: (Float) -> Float = (v0: Float) -> Float {
    var v7: Float = v0 in
    var v3: Float = v7 in
    var v1: Float = v3 in
    var v9: Float = v0 in
    var v5: Float = v9 in
    var v8: Float = v0 in
    var v14: Float = v1 in
    var v18: Float = v0 in
    var v22: Float = v14 in
    let v16: Float = v18 / v3 in
    v1 = v16 in
    let v25: [Float] = [v8, v18, v5, v14] in
    var v15: [Float] = v25 in
    var v24: [Float] = v15 in
    v24[2] = v22 in
    var v53: [Float] = v24 in
    let v47: Float = v53[1] in
    v15[3] = v0 in
    let v63: Float = v53[3] in
    v24[2] = v47 in
    v63
  } in
  let noinline_f0: ([[s1]], [s4], Float) -> Float = (v0: [[s1]], v1: [s4], v2: Float) -> Float {
    let v6: Float = f5(v2) in
    let v3: Float = f5(v6) in
    let v10: Float = f5(v3) in
    let v12: Float = f5(v10) in
    let v29: Float = f5(v12) in
    v29
  } in
  fun loop(i: Int, v0: [[s1]], v1: [s4], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s1]] = [[s1(s0([[0.0], [1.0], [2.0]], [[3.0]]), s0([[4.0], [5.0], [6.0]], [[7.0]]))], [s1(s0([[8.0], [9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0], [14.0]], [[15.0]]))], [s1(s0([[16.0], [17.0], [18.0]], [[19.0]]), s0([[20.0], [21.0], [22.0]], [[23.0]]))]] in
    let v1: [s4] = [s4(s3(s2([s1(s0([[24.0], [25.0], [26.0]], [[27.0]]), s0([[28.0], [29.0], [30.0]], [[31.0]])), s1(s0([[32.0], [33.0], [34.0]], [[35.0]]), s0([[36.0], [37.0], [38.0]], [[39.0]]))], s0([[40.0], [41.0], [42.0]], [[43.0]])), [s2([s1(s0([[44.0], [45.0], [46.0]], [[47.0]]), s0([[48.0], [49.0], [50.0]], [[51.0]])), s1(s0([[52.0], [53.0], [54.0]], [[55.0]]), s0([[56.0], [57.0], [58.0]], [[59.0]]))], s0([[60.0], [61.0], [62.0]], [[63.0]])), s2([s1(s0([[64.0], [65.0], [66.0]], [[67.0]]), s0([[68.0], [69.0], [70.0]], [[71.0]])), s1(s0([[72.0], [73.0], [74.0]], [[75.0]]), s0([[76.0], [77.0], [78.0]], [[79.0]]))], s0([[80.0], [81.0], [82.0]], [[83.0]]))]), s2([s1(s0([[84.0], [85.0], [86.0]], [[87.0]]), s0([[88.0], [89.0], [90.0]], [[91.0]])), s1(s0([[92.0], [93.0], [94.0]], [[95.0]]), s0([[96.0], [97.0], [98.0]], [[99.0]]))], s0([[100.0], [101.0], [102.0]], [[103.0]]))), s4(s3(s2([s1(s0([[104.0], [105.0], [106.0]], [[107.0]]), s0([[108.0], [109.0], [110.0]], [[111.0]])), s1(s0([[112.0], [113.0], [114.0]], [[115.0]]), s0([[116.0], [117.0], [118.0]], [[119.0]]))], s0([[120.0], [121.0], [122.0]], [[123.0]])), [s2([s1(s0([[124.0], [125.0], [126.0]], [[127.0]]), s0([[128.0], [129.0], [130.0]], [[131.0]])), s1(s0([[132.0], [133.0], [134.0]], [[135.0]]), s0([[136.0], [137.0], [138.0]], [[139.0]]))], s0([[140.0], [141.0], [142.0]], [[143.0]])), s2([s1(s0([[144.0], [145.0], [146.0]], [[147.0]]), s0([[148.0], [149.0], [150.0]], [[151.0]])), s1(s0([[152.0], [153.0], [154.0]], [[155.0]]), s0([[156.0], [157.0], [158.0]], [[159.0]]))], s0([[160.0], [161.0], [162.0]], [[163.0]]))]), s2([s1(s0([[164.0], [165.0], [166.0]], [[167.0]]), s0([[168.0], [169.0], [170.0]], [[171.0]])), s1(s0([[172.0], [173.0], [174.0]], [[175.0]]), s0([[176.0], [177.0], [178.0]], [[179.0]]))], s0([[180.0], [181.0], [182.0]], [[183.0]])))] in
    let v2: Float = 184.0 in
    let initialResult: Float = 184.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()