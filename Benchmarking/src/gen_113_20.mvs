  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  } in
  struct s3 {
    var p0: s1
    var p1: [[s1]]
  } in
  struct s5 {
    var p0: s1
    var p1: s0
  } in
  let noinline_f0: ([s3], s5, Float) -> Float = (v0: [s3], v1: s5, v2: Float) -> Float {
    let v3: [Float] = [v2, v2, v2, v2, v2, v2] in
    let v11: Float = v2 / v2 in
    var v18: Float = v11 in
    var v16: [Float] = v3 in
    let v15: [[Float]] = [v3, v16, v3, v3, v3] in
    let v17: Float = v3[3] in
    v16[2] = v11 in
    v16[5] = v17 in
    v16[5] = v17 in
    v16[3] = v18 in
    let v23: [Float] = v15[2] in
    let v33: Float = v23[4] in
    v16[1] = v18 in
    v33
  } in
  fun loop(i: Int, v0: [s3], v1: s5, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s3] = [s3(s1([[s0([[0.0]], [[1.0], [2.0]])]], s0([[3.0]], [[4.0], [5.0]])), [[s1([[s0([[6.0]], [[7.0], [8.0]])]], s0([[9.0]], [[10.0], [11.0]]))], [s1([[s0([[12.0]], [[13.0], [14.0]])]], s0([[15.0]], [[16.0], [17.0]]))], [s1([[s0([[18.0]], [[19.0], [20.0]])]], s0([[21.0]], [[22.0], [23.0]]))]]), s3(s1([[s0([[24.0]], [[25.0], [26.0]])]], s0([[27.0]], [[28.0], [29.0]])), [[s1([[s0([[30.0]], [[31.0], [32.0]])]], s0([[33.0]], [[34.0], [35.0]]))], [s1([[s0([[36.0]], [[37.0], [38.0]])]], s0([[39.0]], [[40.0], [41.0]]))], [s1([[s0([[42.0]], [[43.0], [44.0]])]], s0([[45.0]], [[46.0], [47.0]]))]]), s3(s1([[s0([[48.0]], [[49.0], [50.0]])]], s0([[51.0]], [[52.0], [53.0]])), [[s1([[s0([[54.0]], [[55.0], [56.0]])]], s0([[57.0]], [[58.0], [59.0]]))], [s1([[s0([[60.0]], [[61.0], [62.0]])]], s0([[63.0]], [[64.0], [65.0]]))], [s1([[s0([[66.0]], [[67.0], [68.0]])]], s0([[69.0]], [[70.0], [71.0]]))]])] in
    let v1: s5 = s5(s1([[s0([[72.0]], [[73.0], [74.0]])]], s0([[75.0]], [[76.0], [77.0]])), s0([[78.0]], [[79.0], [80.0]])) in
    let v2: Float = 81.0 in
    let initialResult: Float = 81.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()