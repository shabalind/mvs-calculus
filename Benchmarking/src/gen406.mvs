  struct s0 {
    var p0: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: s0
    var p2: s0
    var p3: s0
    var p4: s0
    var p5: [[s0]]
    var p6: [s0]
    var p7: s0
  } in
  struct s2 {
    var p0: s1
    var p1: [[Float]]
  } in
  struct s4 {
    var p0: [[s1]]
    var p1: s1
  } in
  struct s5 {
    var p0: s4
    var p1: s2
    var p2: [s4]
    var p3: s0
  } in
  struct s6 {
    var p0: s4
    var p1: [[s2]]
  } in
  struct s7 {
    var p0: [[s6]]
    var p1: [s5]
  } in
  let f21: (s4, s0) -> s0 = (v0: s4, v1: s0) -> s0 {
    let v7: [s0] = [v1, v1, v1, v1, v1, v1, v1] in
    let v3: [[Float]] = v1.p0 in
    let v6: [[Float]] = v1.p0 in
    let v2: s0 = v7[6] in
    var v5: [[Float]] = v3 in
    var v9: [[Float]] = v3 in
    let v4: s0 = v7[1] in
    let v17: [[Float]] = v4.p0 in
    let v11: s0 = s0(v9) in
    let v12: [Float] = v6[1] in
    let v10: s1 = v0.p1 in
    let v30: [Float] = v3[0] in
    let v24: [Float] = v9[0] in
    var v18: [Float] = v24 in
    var v25: [Float] = v30 in
    v5[1] = v25 in
    var v34: s0 = v11 in
    v34.p0 = v3 in
    let v46: s0 = v10.p1 in
    let v27: [[Float]] = v2.p0 in
    var v36: [s0] = v7 in
    v34.p0 = v27 in
    v25 = v12 in
    let v64: Float = v25[0] in
    v36[0] = v2 in
    v34.p0 = v5 in
    v34.p0 = v17 in
    v34 = v2 in
    v36[0] = v46 in
    v36[6] = v34 in
    let v54: [[Float]] = v1.p0 in
    let v80: Float = v30[0] in
    v5[0] = v18 in
    v34.p0 = v54 in
    var v40: Float = v80 in
    v34 = v4 in
    v40 = v64 in
    v25[0] = v80 in
    v25[0] = v64 in
    v34.p0 = v27 in
    v25[0] = v40 in
    v34.p0 = v54 in
    var v61: [s0] = v36 in
    let v79: s0 = v61[3] in
    v25[0] = v80 in
    v9[1] = v25 in
    v79
  } in
  let noinline_f0: (s4, [s7], Float) -> Float = (v0: s4, v1: [s7], v2: Float) -> Float {
    let v6: s1 = v0.p1 in
    let v7: s7 = v1[1] in
    let v3: s1 = v0.p1 in
    let v15: s0 = v6.p1 in
    let v22: s0 = f21(v0, v15) in
    let v13: s0 = f21(v0, v22) in
    let v34: [[s6]] = v7.p0 in
    let v36: [s6] = v34[0] in
    let v130: s6 = v36[0] in
    let v43: [[s1]] = v0.p0 in
    var v86: s4 = v0 in
    let v44: s0 = f21(v86, v13) in
    v86.p0 = v43 in
    let v58: s4 = v130.p0 in
    let v68: s0 = f21(v58, v44) in
    v86.p1 = v3 in
    v86.p0 = v43 in
    let v93: [[Float]] = v68.p0 in
    let v193: [Float] = v93[1] in
    let v191: Float = v193[0] in
    v191
  } in
  fun loop(i: Int, v0: s4, v1: [s7], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s4 = s4([[s1([[s0([[0.0], [1.0]])], [s0([[2.0], [3.0]])]], s0([[4.0], [5.0]]), s0([[6.0], [7.0]]), s0([[8.0], [9.0]]), s0([[10.0], [11.0]]), [[s0([[12.0], [13.0]])]], [s0([[14.0], [15.0]]), s0([[16.0], [17.0]])], s0([[18.0], [19.0]]))], [s1([[s0([[20.0], [21.0]])], [s0([[22.0], [23.0]])]], s0([[24.0], [25.0]]), s0([[26.0], [27.0]]), s0([[28.0], [29.0]]), s0([[30.0], [31.0]]), [[s0([[32.0], [33.0]])]], [s0([[34.0], [35.0]]), s0([[36.0], [37.0]])], s0([[38.0], [39.0]]))]], s1([[s0([[40.0], [41.0]])], [s0([[42.0], [43.0]])]], s0([[44.0], [45.0]]), s0([[46.0], [47.0]]), s0([[48.0], [49.0]]), s0([[50.0], [51.0]]), [[s0([[52.0], [53.0]])]], [s0([[54.0], [55.0]]), s0([[56.0], [57.0]])], s0([[58.0], [59.0]]))) in
    let v1: [s7] = [s7([[s6(s4([[s1([[s0([[60.0], [61.0]])], [s0([[62.0], [63.0]])]], s0([[64.0], [65.0]]), s0([[66.0], [67.0]]), s0([[68.0], [69.0]]), s0([[70.0], [71.0]]), [[s0([[72.0], [73.0]])]], [s0([[74.0], [75.0]]), s0([[76.0], [77.0]])], s0([[78.0], [79.0]]))], [s1([[s0([[80.0], [81.0]])], [s0([[82.0], [83.0]])]], s0([[84.0], [85.0]]), s0([[86.0], [87.0]]), s0([[88.0], [89.0]]), s0([[90.0], [91.0]]), [[s0([[92.0], [93.0]])]], [s0([[94.0], [95.0]]), s0([[96.0], [97.0]])], s0([[98.0], [99.0]]))]], s1([[s0([[100.0], [101.0]])], [s0([[102.0], [103.0]])]], s0([[104.0], [105.0]]), s0([[106.0], [107.0]]), s0([[108.0], [109.0]]), s0([[110.0], [111.0]]), [[s0([[112.0], [113.0]])]], [s0([[114.0], [115.0]]), s0([[116.0], [117.0]])], s0([[118.0], [119.0]]))), [[s2(s1([[s0([[120.0], [121.0]])], [s0([[122.0], [123.0]])]], s0([[124.0], [125.0]]), s0([[126.0], [127.0]]), s0([[128.0], [129.0]]), s0([[130.0], [131.0]]), [[s0([[132.0], [133.0]])]], [s0([[134.0], [135.0]]), s0([[136.0], [137.0]])], s0([[138.0], [139.0]])), [[140.0]])], [s2(s1([[s0([[141.0], [142.0]])], [s0([[143.0], [144.0]])]], s0([[145.0], [146.0]]), s0([[147.0], [148.0]]), s0([[149.0], [150.0]]), s0([[151.0], [152.0]]), [[s0([[153.0], [154.0]])]], [s0([[155.0], [156.0]]), s0([[157.0], [158.0]])], s0([[159.0], [160.0]])), [[161.0]])], [s2(s1([[s0([[162.0], [163.0]])], [s0([[164.0], [165.0]])]], s0([[166.0], [167.0]]), s0([[168.0], [169.0]]), s0([[170.0], [171.0]]), s0([[172.0], [173.0]]), [[s0([[174.0], [175.0]])]], [s0([[176.0], [177.0]]), s0([[178.0], [179.0]])], s0([[180.0], [181.0]])), [[182.0]])]])]], [s5(s4([[s1([[s0([[183.0], [184.0]])], [s0([[185.0], [186.0]])]], s0([[187.0], [188.0]]), s0([[189.0], [190.0]]), s0([[191.0], [192.0]]), s0([[193.0], [194.0]]), [[s0([[195.0], [196.0]])]], [s0([[197.0], [198.0]]), s0([[199.0], [200.0]])], s0([[201.0], [202.0]]))], [s1([[s0([[203.0], [204.0]])], [s0([[205.0], [206.0]])]], s0([[207.0], [208.0]]), s0([[209.0], [210.0]]), s0([[211.0], [212.0]]), s0([[213.0], [214.0]]), [[s0([[215.0], [216.0]])]], [s0([[217.0], [218.0]]), s0([[219.0], [220.0]])], s0([[221.0], [222.0]]))]], s1([[s0([[223.0], [224.0]])], [s0([[225.0], [226.0]])]], s0([[227.0], [228.0]]), s0([[229.0], [230.0]]), s0([[231.0], [232.0]]), s0([[233.0], [234.0]]), [[s0([[235.0], [236.0]])]], [s0([[237.0], [238.0]]), s0([[239.0], [240.0]])], s0([[241.0], [242.0]]))), s2(s1([[s0([[243.0], [244.0]])], [s0([[245.0], [246.0]])]], s0([[247.0], [248.0]]), s0([[249.0], [250.0]]), s0([[251.0], [252.0]]), s0([[253.0], [254.0]]), [[s0([[255.0], [256.0]])]], [s0([[257.0], [258.0]]), s0([[259.0], [260.0]])], s0([[261.0], [262.0]])), [[263.0]]), [s4([[s1([[s0([[264.0], [265.0]])], [s0([[266.0], [267.0]])]], s0([[268.0], [269.0]]), s0([[270.0], [271.0]]), s0([[272.0], [273.0]]), s0([[274.0], [275.0]]), [[s0([[276.0], [277.0]])]], [s0([[278.0], [279.0]]), s0([[280.0], [281.0]])], s0([[282.0], [283.0]]))], [s1([[s0([[284.0], [285.0]])], [s0([[286.0], [287.0]])]], s0([[288.0], [289.0]]), s0([[290.0], [291.0]]), s0([[292.0], [293.0]]), s0([[294.0], [295.0]]), [[s0([[296.0], [297.0]])]], [s0([[298.0], [299.0]]), s0([[300.0], [301.0]])], s0([[302.0], [303.0]]))]], s1([[s0([[304.0], [305.0]])], [s0([[306.0], [307.0]])]], s0([[308.0], [309.0]]), s0([[310.0], [311.0]]), s0([[312.0], [313.0]]), s0([[314.0], [315.0]]), [[s0([[316.0], [317.0]])]], [s0([[318.0], [319.0]]), s0([[320.0], [321.0]])], s0([[322.0], [323.0]]))), s4([[s1([[s0([[324.0], [325.0]])], [s0([[326.0], [327.0]])]], s0([[328.0], [329.0]]), s0([[330.0], [331.0]]), s0([[332.0], [333.0]]), s0([[334.0], [335.0]]), [[s0([[336.0], [337.0]])]], [s0([[338.0], [339.0]]), s0([[340.0], [341.0]])], s0([[342.0], [343.0]]))], [s1([[s0([[344.0], [345.0]])], [s0([[346.0], [347.0]])]], s0([[348.0], [349.0]]), s0([[350.0], [351.0]]), s0([[352.0], [353.0]]), s0([[354.0], [355.0]]), [[s0([[356.0], [357.0]])]], [s0([[358.0], [359.0]]), s0([[360.0], [361.0]])], s0([[362.0], [363.0]]))]], s1([[s0([[364.0], [365.0]])], [s0([[366.0], [367.0]])]], s0([[368.0], [369.0]]), s0([[370.0], [371.0]]), s0([[372.0], [373.0]]), s0([[374.0], [375.0]]), [[s0([[376.0], [377.0]])]], [s0([[378.0], [379.0]]), s0([[380.0], [381.0]])], s0([[382.0], [383.0]])))], s0([[384.0], [385.0]]))]), s7([[s6(s4([[s1([[s0([[386.0], [387.0]])], [s0([[388.0], [389.0]])]], s0([[390.0], [391.0]]), s0([[392.0], [393.0]]), s0([[394.0], [395.0]]), s0([[396.0], [397.0]]), [[s0([[398.0], [399.0]])]], [s0([[400.0], [401.0]]), s0([[402.0], [403.0]])], s0([[404.0], [405.0]]))], [s1([[s0([[406.0], [407.0]])], [s0([[408.0], [409.0]])]], s0([[410.0], [411.0]]), s0([[412.0], [413.0]]), s0([[414.0], [415.0]]), s0([[416.0], [417.0]]), [[s0([[418.0], [419.0]])]], [s0([[420.0], [421.0]]), s0([[422.0], [423.0]])], s0([[424.0], [425.0]]))]], s1([[s0([[426.0], [427.0]])], [s0([[428.0], [429.0]])]], s0([[430.0], [431.0]]), s0([[432.0], [433.0]]), s0([[434.0], [435.0]]), s0([[436.0], [437.0]]), [[s0([[438.0], [439.0]])]], [s0([[440.0], [441.0]]), s0([[442.0], [443.0]])], s0([[444.0], [445.0]]))), [[s2(s1([[s0([[446.0], [447.0]])], [s0([[448.0], [449.0]])]], s0([[450.0], [451.0]]), s0([[452.0], [453.0]]), s0([[454.0], [455.0]]), s0([[456.0], [457.0]]), [[s0([[458.0], [459.0]])]], [s0([[460.0], [461.0]]), s0([[462.0], [463.0]])], s0([[464.0], [465.0]])), [[466.0]])], [s2(s1([[s0([[467.0], [468.0]])], [s0([[469.0], [470.0]])]], s0([[471.0], [472.0]]), s0([[473.0], [474.0]]), s0([[475.0], [476.0]]), s0([[477.0], [478.0]]), [[s0([[479.0], [480.0]])]], [s0([[481.0], [482.0]]), s0([[483.0], [484.0]])], s0([[485.0], [486.0]])), [[487.0]])], [s2(s1([[s0([[488.0], [489.0]])], [s0([[490.0], [491.0]])]], s0([[492.0], [493.0]]), s0([[494.0], [495.0]]), s0([[496.0], [497.0]]), s0([[498.0], [499.0]]), [[s0([[500.0], [501.0]])]], [s0([[502.0], [503.0]]), s0([[504.0], [505.0]])], s0([[506.0], [507.0]])), [[508.0]])]])]], [s5(s4([[s1([[s0([[509.0], [510.0]])], [s0([[511.0], [512.0]])]], s0([[513.0], [514.0]]), s0([[515.0], [516.0]]), s0([[517.0], [518.0]]), s0([[519.0], [520.0]]), [[s0([[521.0], [522.0]])]], [s0([[523.0], [524.0]]), s0([[525.0], [526.0]])], s0([[527.0], [528.0]]))], [s1([[s0([[529.0], [530.0]])], [s0([[531.0], [532.0]])]], s0([[533.0], [534.0]]), s0([[535.0], [536.0]]), s0([[537.0], [538.0]]), s0([[539.0], [540.0]]), [[s0([[541.0], [542.0]])]], [s0([[543.0], [544.0]]), s0([[545.0], [546.0]])], s0([[547.0], [548.0]]))]], s1([[s0([[549.0], [550.0]])], [s0([[551.0], [552.0]])]], s0([[553.0], [554.0]]), s0([[555.0], [556.0]]), s0([[557.0], [558.0]]), s0([[559.0], [560.0]]), [[s0([[561.0], [562.0]])]], [s0([[563.0], [564.0]]), s0([[565.0], [566.0]])], s0([[567.0], [568.0]]))), s2(s1([[s0([[569.0], [570.0]])], [s0([[571.0], [572.0]])]], s0([[573.0], [574.0]]), s0([[575.0], [576.0]]), s0([[577.0], [578.0]]), s0([[579.0], [580.0]]), [[s0([[581.0], [582.0]])]], [s0([[583.0], [584.0]]), s0([[585.0], [586.0]])], s0([[587.0], [588.0]])), [[589.0]]), [s4([[s1([[s0([[590.0], [591.0]])], [s0([[592.0], [593.0]])]], s0([[594.0], [595.0]]), s0([[596.0], [597.0]]), s0([[598.0], [599.0]]), s0([[600.0], [601.0]]), [[s0([[602.0], [603.0]])]], [s0([[604.0], [605.0]]), s0([[606.0], [607.0]])], s0([[608.0], [609.0]]))], [s1([[s0([[610.0], [611.0]])], [s0([[612.0], [613.0]])]], s0([[614.0], [615.0]]), s0([[616.0], [617.0]]), s0([[618.0], [619.0]]), s0([[620.0], [621.0]]), [[s0([[622.0], [623.0]])]], [s0([[624.0], [625.0]]), s0([[626.0], [627.0]])], s0([[628.0], [629.0]]))]], s1([[s0([[630.0], [631.0]])], [s0([[632.0], [633.0]])]], s0([[634.0], [635.0]]), s0([[636.0], [637.0]]), s0([[638.0], [639.0]]), s0([[640.0], [641.0]]), [[s0([[642.0], [643.0]])]], [s0([[644.0], [645.0]]), s0([[646.0], [647.0]])], s0([[648.0], [649.0]]))), s4([[s1([[s0([[650.0], [651.0]])], [s0([[652.0], [653.0]])]], s0([[654.0], [655.0]]), s0([[656.0], [657.0]]), s0([[658.0], [659.0]]), s0([[660.0], [661.0]]), [[s0([[662.0], [663.0]])]], [s0([[664.0], [665.0]]), s0([[666.0], [667.0]])], s0([[668.0], [669.0]]))], [s1([[s0([[670.0], [671.0]])], [s0([[672.0], [673.0]])]], s0([[674.0], [675.0]]), s0([[676.0], [677.0]]), s0([[678.0], [679.0]]), s0([[680.0], [681.0]]), [[s0([[682.0], [683.0]])]], [s0([[684.0], [685.0]]), s0([[686.0], [687.0]])], s0([[688.0], [689.0]]))]], s1([[s0([[690.0], [691.0]])], [s0([[692.0], [693.0]])]], s0([[694.0], [695.0]]), s0([[696.0], [697.0]]), s0([[698.0], [699.0]]), s0([[700.0], [701.0]]), [[s0([[702.0], [703.0]])]], [s0([[704.0], [705.0]]), s0([[706.0], [707.0]])], s0([[708.0], [709.0]])))], s0([[710.0], [711.0]]))])] in
    let v2: Float = 712.0 in
    let initialResult: Float = 712.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()