  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  let noinline_f0: (s1, [[Float]], Float) -> Float = (v0: s1, v1: [[Float]], v2: Float) -> Float {
    let v7: [Float] = v1[0] in
    let v9: [Float] = v1[0] in
    let v3: Float = v9[0] in
    let v10: Float = v9[0] in
    let v11: Float = v7[0] in
    let v6: Float = v7[0] in
    let v29: [Float] = v1[0] in
    let v69: Float = v29[0] in
    var v37: [Float] = v7 in
    v37[0] = v3 in
    var v43: Float = v6 in
    let v57: Float = v37[0] in
    let v116: Float = v57 / v11 in
    v37[0] = v43 in
    v37[0] = v69 in
    var v79: Float = v10 in
    v37[0] = v79 in
    v116
  } in
  fun loop(i: Int, v0: s1, v1: [[Float]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1(s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]), [s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]])]) in
    let v1: [[Float]] = [[10.0]] in
    let v2: Float = 11.0 in
    let initialResult: Float = 11.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()