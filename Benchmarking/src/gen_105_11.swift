  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s2 {
    var p0: Double
    var p1: s0
  }
  struct s3 {
    var p0: s2
    var p1: s2
  }
  struct s4 {
    var p0: [s1]
    var p1: [s2]
  }
  struct s5 {
    var p0: s1
    var p1: [s3]
  }
  struct s6 {
    var p0: s2
    var p1: [s2]
    var p2: Double
  }
  struct s10 {
    var p0: [s5]
    var p1: s6
  }
  @inline(never)
  func f0(_ v0: s10, _ v1: [s4], _ v2: Double) -> Double {
    var v6: Double = v2
    let v7: Double = v6 / v6
    let v8: s4 = v1[0]
    var v23: s4 = v8
    var v15: Double = v7
    let v34: [s2] = v23.p1
    let v48: s2 = v34[2]
    let v64: s2 = v34[1]
    let v26: s3 = s3(p0: v48, p1: v64)
    let v32: s2 = v26.p1
    let v107: Double = v32.p0
    let v106: Double = v107 - v15
    return v106
  }
  func benchmark() {
    let v0: s10 = s10(p0: [s5(p0: s1(p0: [s0(p0: [[0.0], [1.0]], p1: [[2.0]]), s0(p0: [[3.0], [4.0]], p1: [[5.0]])], p1: [s0(p0: [[6.0], [7.0]], p1: [[8.0]]), s0(p0: [[9.0], [10.0]], p1: [[11.0]])]), p1: [s3(p0: s2(p0: 12.0, p1: s0(p0: [[13.0], [14.0]], p1: [[15.0]])), p1: s2(p0: 16.0, p1: s0(p0: [[17.0], [18.0]], p1: [[19.0]])))])], p1: s6(p0: s2(p0: 20.0, p1: s0(p0: [[21.0], [22.0]], p1: [[23.0]])), p1: [s2(p0: 24.0, p1: s0(p0: [[25.0], [26.0]], p1: [[27.0]])), s2(p0: 28.0, p1: s0(p0: [[29.0], [30.0]], p1: [[31.0]]))], p2: 32.0))
    let v1: [s4] = [s4(p0: [s1(p0: [s0(p0: [[33.0], [34.0]], p1: [[35.0]]), s0(p0: [[36.0], [37.0]], p1: [[38.0]])], p1: [s0(p0: [[39.0], [40.0]], p1: [[41.0]]), s0(p0: [[42.0], [43.0]], p1: [[44.0]])]), s1(p0: [s0(p0: [[45.0], [46.0]], p1: [[47.0]]), s0(p0: [[48.0], [49.0]], p1: [[50.0]])], p1: [s0(p0: [[51.0], [52.0]], p1: [[53.0]]), s0(p0: [[54.0], [55.0]], p1: [[56.0]])])], p1: [s2(p0: 57.0, p1: s0(p0: [[58.0], [59.0]], p1: [[60.0]])), s2(p0: 61.0, p1: s0(p0: [[62.0], [63.0]], p1: [[64.0]])), s2(p0: 65.0, p1: s0(p0: [[66.0], [67.0]], p1: [[68.0]]))]), s4(p0: [s1(p0: [s0(p0: [[69.0], [70.0]], p1: [[71.0]]), s0(p0: [[72.0], [73.0]], p1: [[74.0]])], p1: [s0(p0: [[75.0], [76.0]], p1: [[77.0]]), s0(p0: [[78.0], [79.0]], p1: [[80.0]])]), s1(p0: [s0(p0: [[81.0], [82.0]], p1: [[83.0]]), s0(p0: [[84.0], [85.0]], p1: [[86.0]])], p1: [s0(p0: [[87.0], [88.0]], p1: [[89.0]]), s0(p0: [[90.0], [91.0]], p1: [[92.0]])])], p1: [s2(p0: 93.0, p1: s0(p0: [[94.0], [95.0]], p1: [[96.0]])), s2(p0: 97.0, p1: s0(p0: [[98.0], [99.0]], p1: [[100.0]])), s2(p0: 101.0, p1: s0(p0: [[102.0], [103.0]], p1: [[104.0]]))])]
    let v2: Double = 105.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 105.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
