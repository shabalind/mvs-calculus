  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s2 {
    var p0: s0
    var p1: s1
  } in
  struct s3 {
    var p0: s2
    var p1: [s2]
  } in
  struct s8 {
    var p0: s3
    var p1: [s2]
  } in
  struct s11 {
    var p0: s8
    var p1: s3
  } in
  let f90: (Float) -> Float = (v0: Float) -> Float {
    var v6: Float = v0 in
    var v2: Float = v0 in
    var v7: Float = v6 in
    var v1: Float = v7 in
    var v3: Float = v6 in
    var v4: Float = v3 in
    let v18: Float = v7 - v4 in
    var v9: Float = v7 in
    v3 = v18 in
    var v15: Float = v7 in
    v4 = v1 in
    var v13: Float = v15 in
    var v8: Float = v15 in
    var v11: Float = v9 in
    var v10: Float = v4 in
    var v14: Float = v3 in
    var v16: Float = v8 in
    var v34: Float = v11 in
    var v24: Float = v7 in
    var v21: Float = v18 in
    var v20: Float = v9 in
    let v40: [Float] = [v16, v16, v24] in
    var v30: [Float] = v40 in
    v30[0] = v14 in
    var v42: Float = v34 in
    var v39: [Float] = v30 in
    let v32: Float = v39[0] in
    var v82: [Float] = v40 in
    var v58: [Float] = v40 in
    v82[2] = v10 in
    v58[1] = v16 in
    v58[0] = v6 in
    var v45: [Float] = v58 in
    v30[2] = v34 in
    var v84: [Float] = v40 in
    v30[2] = v1 in
    let v22: [[Float]] = [v40] in
    var v41: [[Float]] = v22 in
    let v75: [Float] = v41[0] in
    let v76: [[Float]] = [v84, v75, v82, v58, v84, v40] in
    v84[1] = v9 in
    v14 = v0 in
    v41[0] = v45 in
    let v71: [Float] = v76[2] in
    v84[2] = v32 in
    v82[2] = v21 in
    v30[2] = v42 in
    v30[0] = v15 in
    v41[0] = v39 in
    v58 = v82 in
    let v162: Float = v71[0] in
    v7 = v20 in
    v58[0] = v13 in
    v58[1] = v2 in
    v162
  } in
  let f31: (Float) -> Float = (v0: Float) -> Float {
    var v1: Float = v0 in
    var v3: Float = v0 in
    let v7: Float = f90(v1) in
    var v2: Float = v3 in
    var v4: Float = v7 in
    v3 = v7 in
    var v6: Float = v4 in
    let v5: Float = f90(v2) in
    let v8: Float = f90(v5) in
    var v14: Float = v3 in
    let v18: [Float] = [v8, v6, v14, v0, v5] in
    var v23: [Float] = v18 in
    let v13: Float = v23[2] in
    v13
  } in
  let noinline_f0: ([[s11]], s3, Float) -> Float = (v0: [[s11]], v1: s3, v2: Float) -> Float {
    var v5: Float = v2 in
    let v15: Float = f90(v5) in
    var v14: Float = v15 in
    v14 = v5 in
    let v25: Float = f31(v15) in
    let v29: Float = f90(v25) in
    let v21: [Float] = [v14, v25, v15] in
    var v83: [Float] = v21 in
    let v52: Float = v83[1] in
    v83[0] = v14 in
    let v132: Float = f31(v29) in
    let v66: Float = v52 + v132 in
    let v120: Float = f90(v52) in
    v83[2] = v120 in
    v66
  } in
  fun loop(i: Int, v0: [[s11]], v1: s3, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s11]] = [[s11(s8(s3(s2(s0([[0.0]], [[1.0], [2.0]]), s1([s0([[3.0]], [[4.0], [5.0]])], s0([[6.0]], [[7.0], [8.0]]))), [s2(s0([[9.0]], [[10.0], [11.0]]), s1([s0([[12.0]], [[13.0], [14.0]])], s0([[15.0]], [[16.0], [17.0]]))), s2(s0([[18.0]], [[19.0], [20.0]]), s1([s0([[21.0]], [[22.0], [23.0]])], s0([[24.0]], [[25.0], [26.0]]))), s2(s0([[27.0]], [[28.0], [29.0]]), s1([s0([[30.0]], [[31.0], [32.0]])], s0([[33.0]], [[34.0], [35.0]])))]), [s2(s0([[36.0]], [[37.0], [38.0]]), s1([s0([[39.0]], [[40.0], [41.0]])], s0([[42.0]], [[43.0], [44.0]]))), s2(s0([[45.0]], [[46.0], [47.0]]), s1([s0([[48.0]], [[49.0], [50.0]])], s0([[51.0]], [[52.0], [53.0]])))]), s3(s2(s0([[54.0]], [[55.0], [56.0]]), s1([s0([[57.0]], [[58.0], [59.0]])], s0([[60.0]], [[61.0], [62.0]]))), [s2(s0([[63.0]], [[64.0], [65.0]]), s1([s0([[66.0]], [[67.0], [68.0]])], s0([[69.0]], [[70.0], [71.0]]))), s2(s0([[72.0]], [[73.0], [74.0]]), s1([s0([[75.0]], [[76.0], [77.0]])], s0([[78.0]], [[79.0], [80.0]]))), s2(s0([[81.0]], [[82.0], [83.0]]), s1([s0([[84.0]], [[85.0], [86.0]])], s0([[87.0]], [[88.0], [89.0]])))]))], [s11(s8(s3(s2(s0([[90.0]], [[91.0], [92.0]]), s1([s0([[93.0]], [[94.0], [95.0]])], s0([[96.0]], [[97.0], [98.0]]))), [s2(s0([[99.0]], [[100.0], [101.0]]), s1([s0([[102.0]], [[103.0], [104.0]])], s0([[105.0]], [[106.0], [107.0]]))), s2(s0([[108.0]], [[109.0], [110.0]]), s1([s0([[111.0]], [[112.0], [113.0]])], s0([[114.0]], [[115.0], [116.0]]))), s2(s0([[117.0]], [[118.0], [119.0]]), s1([s0([[120.0]], [[121.0], [122.0]])], s0([[123.0]], [[124.0], [125.0]])))]), [s2(s0([[126.0]], [[127.0], [128.0]]), s1([s0([[129.0]], [[130.0], [131.0]])], s0([[132.0]], [[133.0], [134.0]]))), s2(s0([[135.0]], [[136.0], [137.0]]), s1([s0([[138.0]], [[139.0], [140.0]])], s0([[141.0]], [[142.0], [143.0]])))]), s3(s2(s0([[144.0]], [[145.0], [146.0]]), s1([s0([[147.0]], [[148.0], [149.0]])], s0([[150.0]], [[151.0], [152.0]]))), [s2(s0([[153.0]], [[154.0], [155.0]]), s1([s0([[156.0]], [[157.0], [158.0]])], s0([[159.0]], [[160.0], [161.0]]))), s2(s0([[162.0]], [[163.0], [164.0]]), s1([s0([[165.0]], [[166.0], [167.0]])], s0([[168.0]], [[169.0], [170.0]]))), s2(s0([[171.0]], [[172.0], [173.0]]), s1([s0([[174.0]], [[175.0], [176.0]])], s0([[177.0]], [[178.0], [179.0]])))]))]] in
    let v1: s3 = s3(s2(s0([[180.0]], [[181.0], [182.0]]), s1([s0([[183.0]], [[184.0], [185.0]])], s0([[186.0]], [[187.0], [188.0]]))), [s2(s0([[189.0]], [[190.0], [191.0]]), s1([s0([[192.0]], [[193.0], [194.0]])], s0([[195.0]], [[196.0], [197.0]]))), s2(s0([[198.0]], [[199.0], [200.0]]), s1([s0([[201.0]], [[202.0], [203.0]])], s0([[204.0]], [[205.0], [206.0]]))), s2(s0([[207.0]], [[208.0], [209.0]]), s1([s0([[210.0]], [[211.0], [212.0]])], s0([[213.0]], [[214.0], [215.0]])))]) in
    let v2: Float = 216.0 in
    let initialResult: Float = 216.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()