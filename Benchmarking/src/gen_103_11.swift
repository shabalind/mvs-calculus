  import Dispatch
  struct s0 {
    var p0: Double
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  }
  struct s2 {
    var p0: s1
    var p1: [[s1]]
  }
  struct s4 {
    var p0: Double
    var p1: [[s2]]
  }
  func f4(_ v0: s4) -> s4 {
    let v1: [s4] = [v0, v0, v0, v0, v0]
    let v3: s4 = v1[0]
    var v2: s4 = v3
    let v6: s4 = v1[0]
    let v4: [[s2]] = v3.p1
    v2.p1 = v4
    v2.p1 = v4
    var v17: s4 = v6
    let v21: [[s2]] = v2.p1
    let v30: [[s2]] = v2.p1
    v17.p1 = v30
    v2.p1 = v21
    return v17
  }
  @inline(never)
  func f0(_ v0: [[s4]], _ v1: s4, _ v2: Double) -> Double {
    let v3: s4 = f4(v1)
    let v7: [s4] = v0[0]
    var v8: [s4] = v7
    let v11: [s4] = v0[0]
    var v6: s4 = v3
    v8[0] = v6
    let v9: s4 = v8[0]
    let v12: s4 = f4(v6)
    let v4: s4 = f4(v9)
    let v10: s4 = f4(v12)
    let v17: s4 = v11[0]
    let v18: s4 = f4(v10)
    let v5: [[s2]] = v4.p1
    let v21: s4 = f4(v6)
    var v20: [[s2]] = v5
    v8[0] = v21
    let v61: [[s2]] = v17.p1
    v6.p1 = v61
    v6.p1 = v61
    v6.p1 = v20
    v6.p1 = v61
    let v40: [[s2]] = v4.p1
    let v62: [[s2]] = v18.p1
    let v90: Double = v4.p0
    v20 = v40
    v6.p1 = v62
    return v90
  }
  func benchmark() {
    let v0: [[s4]] = [[s4(p0: 0.0, p1: [[s2(p0: s1(p0: [[s0(p0: 1.0, p1: [[2.0]])], [s0(p0: 3.0, p1: [[4.0]])], [s0(p0: 5.0, p1: [[6.0]])]], p1: s0(p0: 7.0, p1: [[8.0]])), p1: [[s1(p0: [[s0(p0: 9.0, p1: [[10.0]])], [s0(p0: 11.0, p1: [[12.0]])], [s0(p0: 13.0, p1: [[14.0]])]], p1: s0(p0: 15.0, p1: [[16.0]]))]])], [s2(p0: s1(p0: [[s0(p0: 17.0, p1: [[18.0]])], [s0(p0: 19.0, p1: [[20.0]])], [s0(p0: 21.0, p1: [[22.0]])]], p1: s0(p0: 23.0, p1: [[24.0]])), p1: [[s1(p0: [[s0(p0: 25.0, p1: [[26.0]])], [s0(p0: 27.0, p1: [[28.0]])], [s0(p0: 29.0, p1: [[30.0]])]], p1: s0(p0: 31.0, p1: [[32.0]]))]])], [s2(p0: s1(p0: [[s0(p0: 33.0, p1: [[34.0]])], [s0(p0: 35.0, p1: [[36.0]])], [s0(p0: 37.0, p1: [[38.0]])]], p1: s0(p0: 39.0, p1: [[40.0]])), p1: [[s1(p0: [[s0(p0: 41.0, p1: [[42.0]])], [s0(p0: 43.0, p1: [[44.0]])], [s0(p0: 45.0, p1: [[46.0]])]], p1: s0(p0: 47.0, p1: [[48.0]]))]])]])]]
    let v1: s4 = s4(p0: 49.0, p1: [[s2(p0: s1(p0: [[s0(p0: 50.0, p1: [[51.0]])], [s0(p0: 52.0, p1: [[53.0]])], [s0(p0: 54.0, p1: [[55.0]])]], p1: s0(p0: 56.0, p1: [[57.0]])), p1: [[s1(p0: [[s0(p0: 58.0, p1: [[59.0]])], [s0(p0: 60.0, p1: [[61.0]])], [s0(p0: 62.0, p1: [[63.0]])]], p1: s0(p0: 64.0, p1: [[65.0]]))]])], [s2(p0: s1(p0: [[s0(p0: 66.0, p1: [[67.0]])], [s0(p0: 68.0, p1: [[69.0]])], [s0(p0: 70.0, p1: [[71.0]])]], p1: s0(p0: 72.0, p1: [[73.0]])), p1: [[s1(p0: [[s0(p0: 74.0, p1: [[75.0]])], [s0(p0: 76.0, p1: [[77.0]])], [s0(p0: 78.0, p1: [[79.0]])]], p1: s0(p0: 80.0, p1: [[81.0]]))]])], [s2(p0: s1(p0: [[s0(p0: 82.0, p1: [[83.0]])], [s0(p0: 84.0, p1: [[85.0]])], [s0(p0: 86.0, p1: [[87.0]])]], p1: s0(p0: 88.0, p1: [[89.0]])), p1: [[s1(p0: [[s0(p0: 90.0, p1: [[91.0]])], [s0(p0: 92.0, p1: [[93.0]])], [s0(p0: 94.0, p1: [[95.0]])]], p1: s0(p0: 96.0, p1: [[97.0]]))]])]])
    let v2: Double = 98.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 98.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
