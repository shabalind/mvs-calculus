  struct s0 {
    var p0: [[Float]]
    var p1: [Float]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s2 {
    var p0: [[s1]]
    var p1: [[s0]]
  } in
  let f29: ([s1]) -> [s1] = (v0: [s1]) -> [s1] {
    v0
  } in
  let noinline_f0: ([s2], Float) -> Float = (v0: [s2], v1: Float) -> Float {
    let v7: s2 = v0[1] in
    let v3: [[s1]] = v7.p0 in
    let v2: [s1] = v3[2] in
    let v4: [s1] = f29(v2) in
    let v31: s1 = v4[0] in
    let v73: [s0] = v31.p0 in
    let v48: s0 = v73[2] in
    let v44: [Float] = v48.p1 in
    let v39: Float = v44[0] in
    v39
  } in
  fun loop(i: Int, v0: [s2], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2([[s1([s0([[0.0]], [1.0]), s0([[2.0]], [3.0]), s0([[4.0]], [5.0])], s0([[6.0]], [7.0]))], [s1([s0([[8.0]], [9.0]), s0([[10.0]], [11.0]), s0([[12.0]], [13.0])], s0([[14.0]], [15.0]))], [s1([s0([[16.0]], [17.0]), s0([[18.0]], [19.0]), s0([[20.0]], [21.0])], s0([[22.0]], [23.0]))]], [[s0([[24.0]], [25.0])]]), s2([[s1([s0([[26.0]], [27.0]), s0([[28.0]], [29.0]), s0([[30.0]], [31.0])], s0([[32.0]], [33.0]))], [s1([s0([[34.0]], [35.0]), s0([[36.0]], [37.0]), s0([[38.0]], [39.0])], s0([[40.0]], [41.0]))], [s1([s0([[42.0]], [43.0]), s0([[44.0]], [45.0]), s0([[46.0]], [47.0])], s0([[48.0]], [49.0]))]], [[s0([[50.0]], [51.0])]])] in
    let v1: Float = 52.0 in
    let initialResult: Float = 52.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()