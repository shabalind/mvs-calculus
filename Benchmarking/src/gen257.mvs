  struct s0 {
    var p0: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
    var p2: s0
  } in
  struct s2 {
    var p0: Float
    var p1: [s0]
    var p2: [[s0]]
    var p3: [s1]
  } in
  struct s3 {
    var p0: [s1]
    var p1: s2
  } in
  struct s4 {
    var p0: [s1]
    var p1: s3
  } in
  struct s5 {
    var p0: s1
    var p1: s1
  } in
  struct s7 {
    var p0: s1
    var p1: s4
  } in
  struct s9 {
    var p0: s3
    var p1: s2
  } in
  struct s12 {
    var p0: s7
    var p1: s9
  } in
  let f107: (s2) -> s2 = (v0: s2) -> s2 {
    let v3: [[s0]] = v0.p2 in
    var v6: [[s0]] = v3 in
    let v2: Float = v0.p0 in
    var v7: [[s0]] = v3 in
    let v11: [s0] = v6[1] in
    v6[1] = v11 in
    let v5: [s0] = v6[0] in
    var v1: Float = v2 in
    var v13: Float = v2 in
    var v10: s2 = v0 in
    let v8: [s1] = v10.p3 in
    let v14: [s0] = v3[0] in
    let v23: [s1] = v0.p3 in
    v6[0] = v14 in
    let v30: [s0] = v6[1] in
    v10.p0 = v2 in
    var v15: [[s0]] = v7 in
    let v44: s0 = v5[0] in
    var v40: s2 = v10 in
    v6[0] = v5 in
    let v43: [s1] = v0.p3 in
    let v28: s1 = v43[0] in
    let v51: [[s0]] = v0.p2 in
    let v56: [[Float]] = v44.p0 in
    let v72: [s0] = v51[1] in
    var v62: [[Float]] = v56 in
    v7[1] = v30 in
    v40.p2 = v15 in
    let v41: [Float] = v62[1] in
    var v75: Float = v1 in
    let v48: s1 = v23[1] in
    let v66: s5 = s5(v48, v48) in
    v10.p3 = v43 in
    var v53: [s1] = v8 in
    var v49: s2 = v0 in
    let v103: Float = v41[0] in
    v40.p2 = v51 in
    var v95: [s1] = v23 in
    let v78: s1 = v66.p1 in
    let v58: Float = v41[0] in
    let v42: [s0] = v40.p1 in
    let v85: [s1] = v10.p3 in
    let v112: s5 = s5(v28, v78) in
    v10.p3 = v95 in
    v62[0] = v41 in
    v49.p3 = v53 in
    v15[1] = v11 in
    let v150: [s0] = v3[1] in
    v7[1] = v72 in
    v6[1] = v150 in
    let v160: s1 = v112.p1 in
    var v106: [s0] = v42 in
    v49.p0 = v103 in
    let v138: [s0] = v49.p1 in
    v53[1] = v160 in
    var v216: Float = v13 in
    v40.p0 = v216 in
    v13 = v75 in
    let v193: s2 = s2(v58, v106, v7, v85) in
    v10.p1 = v138 in
    v193
  } in
  let noinline_f0: (s12, s9, Float) -> Float = (v0: s12, v1: s9, v2: Float) -> Float {
    var v5: Float = v2 in
    let v6: s2 = v1.p1 in
    var v4: s2 = v6 in
    let v10: s2 = v1.p1 in
    let v14: [[s0]] = v4.p2 in
    let v16: [s1] = v10.p3 in
    let v13: s2 = f107(v10) in
    let v22: [s0] = v14[0] in
    let v25: s0 = v22[0] in
    v4.p3 = v16 in
    let v32: Float = v13.p0 in
    let v39: Float = v32 / v5 in
    let v70: [[Float]] = v25.p0 in
    var v47: [[Float]] = v70 in
    v4.p0 = v5 in
    v4.p0 = v39 in
    let v82: [Float] = v47[1] in
    let v112: Float = v82[0] in
    v112
  } in
  fun loop(i: Int, v0: s12, v1: s9, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s12 = s12(s7(s1(s0([[0.0], [1.0], [2.0]]), [s0([[3.0], [4.0], [5.0]]), s0([[6.0], [7.0], [8.0]]), s0([[9.0], [10.0], [11.0]])], s0([[12.0], [13.0], [14.0]])), s4([s1(s0([[15.0], [16.0], [17.0]]), [s0([[18.0], [19.0], [20.0]]), s0([[21.0], [22.0], [23.0]]), s0([[24.0], [25.0], [26.0]])], s0([[27.0], [28.0], [29.0]])), s1(s0([[30.0], [31.0], [32.0]]), [s0([[33.0], [34.0], [35.0]]), s0([[36.0], [37.0], [38.0]]), s0([[39.0], [40.0], [41.0]])], s0([[42.0], [43.0], [44.0]]))], s3([s1(s0([[45.0], [46.0], [47.0]]), [s0([[48.0], [49.0], [50.0]]), s0([[51.0], [52.0], [53.0]]), s0([[54.0], [55.0], [56.0]])], s0([[57.0], [58.0], [59.0]])), s1(s0([[60.0], [61.0], [62.0]]), [s0([[63.0], [64.0], [65.0]]), s0([[66.0], [67.0], [68.0]]), s0([[69.0], [70.0], [71.0]])], s0([[72.0], [73.0], [74.0]])), s1(s0([[75.0], [76.0], [77.0]]), [s0([[78.0], [79.0], [80.0]]), s0([[81.0], [82.0], [83.0]]), s0([[84.0], [85.0], [86.0]])], s0([[87.0], [88.0], [89.0]]))], s2(90.0, [s0([[91.0], [92.0], [93.0]]), s0([[94.0], [95.0], [96.0]]), s0([[97.0], [98.0], [99.0]])], [[s0([[100.0], [101.0], [102.0]])], [s0([[103.0], [104.0], [105.0]])]], [s1(s0([[106.0], [107.0], [108.0]]), [s0([[109.0], [110.0], [111.0]]), s0([[112.0], [113.0], [114.0]]), s0([[115.0], [116.0], [117.0]])], s0([[118.0], [119.0], [120.0]])), s1(s0([[121.0], [122.0], [123.0]]), [s0([[124.0], [125.0], [126.0]]), s0([[127.0], [128.0], [129.0]]), s0([[130.0], [131.0], [132.0]])], s0([[133.0], [134.0], [135.0]]))])))), s9(s3([s1(s0([[136.0], [137.0], [138.0]]), [s0([[139.0], [140.0], [141.0]]), s0([[142.0], [143.0], [144.0]]), s0([[145.0], [146.0], [147.0]])], s0([[148.0], [149.0], [150.0]])), s1(s0([[151.0], [152.0], [153.0]]), [s0([[154.0], [155.0], [156.0]]), s0([[157.0], [158.0], [159.0]]), s0([[160.0], [161.0], [162.0]])], s0([[163.0], [164.0], [165.0]])), s1(s0([[166.0], [167.0], [168.0]]), [s0([[169.0], [170.0], [171.0]]), s0([[172.0], [173.0], [174.0]]), s0([[175.0], [176.0], [177.0]])], s0([[178.0], [179.0], [180.0]]))], s2(181.0, [s0([[182.0], [183.0], [184.0]]), s0([[185.0], [186.0], [187.0]]), s0([[188.0], [189.0], [190.0]])], [[s0([[191.0], [192.0], [193.0]])], [s0([[194.0], [195.0], [196.0]])]], [s1(s0([[197.0], [198.0], [199.0]]), [s0([[200.0], [201.0], [202.0]]), s0([[203.0], [204.0], [205.0]]), s0([[206.0], [207.0], [208.0]])], s0([[209.0], [210.0], [211.0]])), s1(s0([[212.0], [213.0], [214.0]]), [s0([[215.0], [216.0], [217.0]]), s0([[218.0], [219.0], [220.0]]), s0([[221.0], [222.0], [223.0]])], s0([[224.0], [225.0], [226.0]]))])), s2(227.0, [s0([[228.0], [229.0], [230.0]]), s0([[231.0], [232.0], [233.0]]), s0([[234.0], [235.0], [236.0]])], [[s0([[237.0], [238.0], [239.0]])], [s0([[240.0], [241.0], [242.0]])]], [s1(s0([[243.0], [244.0], [245.0]]), [s0([[246.0], [247.0], [248.0]]), s0([[249.0], [250.0], [251.0]]), s0([[252.0], [253.0], [254.0]])], s0([[255.0], [256.0], [257.0]])), s1(s0([[258.0], [259.0], [260.0]]), [s0([[261.0], [262.0], [263.0]]), s0([[264.0], [265.0], [266.0]]), s0([[267.0], [268.0], [269.0]])], s0([[270.0], [271.0], [272.0]]))]))) in
    let v1: s9 = s9(s3([s1(s0([[273.0], [274.0], [275.0]]), [s0([[276.0], [277.0], [278.0]]), s0([[279.0], [280.0], [281.0]]), s0([[282.0], [283.0], [284.0]])], s0([[285.0], [286.0], [287.0]])), s1(s0([[288.0], [289.0], [290.0]]), [s0([[291.0], [292.0], [293.0]]), s0([[294.0], [295.0], [296.0]]), s0([[297.0], [298.0], [299.0]])], s0([[300.0], [301.0], [302.0]])), s1(s0([[303.0], [304.0], [305.0]]), [s0([[306.0], [307.0], [308.0]]), s0([[309.0], [310.0], [311.0]]), s0([[312.0], [313.0], [314.0]])], s0([[315.0], [316.0], [317.0]]))], s2(318.0, [s0([[319.0], [320.0], [321.0]]), s0([[322.0], [323.0], [324.0]]), s0([[325.0], [326.0], [327.0]])], [[s0([[328.0], [329.0], [330.0]])], [s0([[331.0], [332.0], [333.0]])]], [s1(s0([[334.0], [335.0], [336.0]]), [s0([[337.0], [338.0], [339.0]]), s0([[340.0], [341.0], [342.0]]), s0([[343.0], [344.0], [345.0]])], s0([[346.0], [347.0], [348.0]])), s1(s0([[349.0], [350.0], [351.0]]), [s0([[352.0], [353.0], [354.0]]), s0([[355.0], [356.0], [357.0]]), s0([[358.0], [359.0], [360.0]])], s0([[361.0], [362.0], [363.0]]))])), s2(364.0, [s0([[365.0], [366.0], [367.0]]), s0([[368.0], [369.0], [370.0]]), s0([[371.0], [372.0], [373.0]])], [[s0([[374.0], [375.0], [376.0]])], [s0([[377.0], [378.0], [379.0]])]], [s1(s0([[380.0], [381.0], [382.0]]), [s0([[383.0], [384.0], [385.0]]), s0([[386.0], [387.0], [388.0]]), s0([[389.0], [390.0], [391.0]])], s0([[392.0], [393.0], [394.0]])), s1(s0([[395.0], [396.0], [397.0]]), [s0([[398.0], [399.0], [400.0]]), s0([[401.0], [402.0], [403.0]]), s0([[404.0], [405.0], [406.0]])], s0([[407.0], [408.0], [409.0]]))])) in
    let v2: Float = 410.0 in
    let initialResult: Float = 410.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()