  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: s0
  }
  struct s2 {
    var p0: s1
    var p1: [s0]
  }
  struct s3 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s4 {
    var p0: [[s0]]
    var p1: [[s0]]
  }
  struct s5 {
    var p0: s2
    var p1: s3
  }
  struct s7 {
    var p0: s2
    var p1: s2
  }
  func f4(_ v0: Double, _ v1: s0) -> Double {
    var v7: Double = v0
    var v6: Double = v7
    return v6
  }
  @inline(never)
  func f0(_ v0: s5, _ v1: [[s2]], _ v2: s1, _ v3: [[s7]], _ v4: [s3], _ v5: s4, _ v6: Double) -> Double {
    let v11: Double = v6 + v6
    let v15: s3 = v4[1]
    let v84: [s0] = v15.p0
    let v82: s0 = v84[0]
    let v62: Double = f4(v6, v82)
    let v199: Double = f4(v62, v82)
    let v173: Double = v11 - v199
    return v173
  }
  func benchmark() {
    let v0: s5 = s5(p0: s2(p0: s1(p0: [s0(p0: [[0.0]], p1: [[1.0], [2.0]], p2: [[3.0], [4.0]], p3: [[5.0]])], p1: s0(p0: [[6.0]], p1: [[7.0], [8.0]], p2: [[9.0], [10.0]], p3: [[11.0]])), p1: [s0(p0: [[12.0]], p1: [[13.0], [14.0]], p2: [[15.0], [16.0]], p3: [[17.0]])]), p1: s3(p0: [s0(p0: [[18.0]], p1: [[19.0], [20.0]], p2: [[21.0], [22.0]], p3: [[23.0]]), s0(p0: [[24.0]], p1: [[25.0], [26.0]], p2: [[27.0], [28.0]], p3: [[29.0]]), s0(p0: [[30.0]], p1: [[31.0], [32.0]], p2: [[33.0], [34.0]], p3: [[35.0]])], p1: [s0(p0: [[36.0]], p1: [[37.0], [38.0]], p2: [[39.0], [40.0]], p3: [[41.0]]), s0(p0: [[42.0]], p1: [[43.0], [44.0]], p2: [[45.0], [46.0]], p3: [[47.0]])]))
    let v1: [[s2]] = [[s2(p0: s1(p0: [s0(p0: [[48.0]], p1: [[49.0], [50.0]], p2: [[51.0], [52.0]], p3: [[53.0]])], p1: s0(p0: [[54.0]], p1: [[55.0], [56.0]], p2: [[57.0], [58.0]], p3: [[59.0]])), p1: [s0(p0: [[60.0]], p1: [[61.0], [62.0]], p2: [[63.0], [64.0]], p3: [[65.0]])])], [s2(p0: s1(p0: [s0(p0: [[66.0]], p1: [[67.0], [68.0]], p2: [[69.0], [70.0]], p3: [[71.0]])], p1: s0(p0: [[72.0]], p1: [[73.0], [74.0]], p2: [[75.0], [76.0]], p3: [[77.0]])), p1: [s0(p0: [[78.0]], p1: [[79.0], [80.0]], p2: [[81.0], [82.0]], p3: [[83.0]])])]]
    let v2: s1 = s1(p0: [s0(p0: [[84.0]], p1: [[85.0], [86.0]], p2: [[87.0], [88.0]], p3: [[89.0]])], p1: s0(p0: [[90.0]], p1: [[91.0], [92.0]], p2: [[93.0], [94.0]], p3: [[95.0]]))
    let v3: [[s7]] = [[s7(p0: s2(p0: s1(p0: [s0(p0: [[96.0]], p1: [[97.0], [98.0]], p2: [[99.0], [100.0]], p3: [[101.0]])], p1: s0(p0: [[102.0]], p1: [[103.0], [104.0]], p2: [[105.0], [106.0]], p3: [[107.0]])), p1: [s0(p0: [[108.0]], p1: [[109.0], [110.0]], p2: [[111.0], [112.0]], p3: [[113.0]])]), p1: s2(p0: s1(p0: [s0(p0: [[114.0]], p1: [[115.0], [116.0]], p2: [[117.0], [118.0]], p3: [[119.0]])], p1: s0(p0: [[120.0]], p1: [[121.0], [122.0]], p2: [[123.0], [124.0]], p3: [[125.0]])), p1: [s0(p0: [[126.0]], p1: [[127.0], [128.0]], p2: [[129.0], [130.0]], p3: [[131.0]])]))], [s7(p0: s2(p0: s1(p0: [s0(p0: [[132.0]], p1: [[133.0], [134.0]], p2: [[135.0], [136.0]], p3: [[137.0]])], p1: s0(p0: [[138.0]], p1: [[139.0], [140.0]], p2: [[141.0], [142.0]], p3: [[143.0]])), p1: [s0(p0: [[144.0]], p1: [[145.0], [146.0]], p2: [[147.0], [148.0]], p3: [[149.0]])]), p1: s2(p0: s1(p0: [s0(p0: [[150.0]], p1: [[151.0], [152.0]], p2: [[153.0], [154.0]], p3: [[155.0]])], p1: s0(p0: [[156.0]], p1: [[157.0], [158.0]], p2: [[159.0], [160.0]], p3: [[161.0]])), p1: [s0(p0: [[162.0]], p1: [[163.0], [164.0]], p2: [[165.0], [166.0]], p3: [[167.0]])]))]]
    let v4: [s3] = [s3(p0: [s0(p0: [[168.0]], p1: [[169.0], [170.0]], p2: [[171.0], [172.0]], p3: [[173.0]]), s0(p0: [[174.0]], p1: [[175.0], [176.0]], p2: [[177.0], [178.0]], p3: [[179.0]]), s0(p0: [[180.0]], p1: [[181.0], [182.0]], p2: [[183.0], [184.0]], p3: [[185.0]])], p1: [s0(p0: [[186.0]], p1: [[187.0], [188.0]], p2: [[189.0], [190.0]], p3: [[191.0]]), s0(p0: [[192.0]], p1: [[193.0], [194.0]], p2: [[195.0], [196.0]], p3: [[197.0]])]), s3(p0: [s0(p0: [[198.0]], p1: [[199.0], [200.0]], p2: [[201.0], [202.0]], p3: [[203.0]]), s0(p0: [[204.0]], p1: [[205.0], [206.0]], p2: [[207.0], [208.0]], p3: [[209.0]]), s0(p0: [[210.0]], p1: [[211.0], [212.0]], p2: [[213.0], [214.0]], p3: [[215.0]])], p1: [s0(p0: [[216.0]], p1: [[217.0], [218.0]], p2: [[219.0], [220.0]], p3: [[221.0]]), s0(p0: [[222.0]], p1: [[223.0], [224.0]], p2: [[225.0], [226.0]], p3: [[227.0]])])]
    let v5: s4 = s4(p0: [[s0(p0: [[228.0]], p1: [[229.0], [230.0]], p2: [[231.0], [232.0]], p3: [[233.0]])], [s0(p0: [[234.0]], p1: [[235.0], [236.0]], p2: [[237.0], [238.0]], p3: [[239.0]])]], p1: [[s0(p0: [[240.0]], p1: [[241.0], [242.0]], p2: [[243.0], [244.0]], p3: [[245.0]])], [s0(p0: [[246.0]], p1: [[247.0], [248.0]], p2: [[249.0], [250.0]], p3: [[251.0]])]])
    let v6: Double = 252.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 252.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4, v5, v6)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
