  let noinline_f0: ([Float], Float) -> Float = (v0: [Float], v1: Float) -> Float {
    var v5: [Float] = v0 in
    v5[1] = v1 in
    v5[0] = v1 in
    let v2: Float = v5[1] in
    var v6: [Float] = v0 in
    let v9: Float = v0[0] in
    let v7: Float = v0[0] in
    v6[1] = v9 in
    v6[0] = v9 in
    v5[0] = v9 in
    let v10: [[Float]] = [v6] in
    var v16: [[Float]] = v10 in
    v6[1] = v7 in
    var v11: [Float] = v6 in
    var v22: [[Float]] = v16 in
    v6[0] = v2 in
    let v14: [Float] = v16[0] in
    v16[0] = v11 in
    let v25: [[[Float]]] = [v22] in
    var v21: [[[Float]]] = v25 in
    v22[0] = v14 in
    v16[0] = v14 in
    var v35: [Float] = v0 in
    let v49: [[Float]] = v21[0] in
    v21[0] = v22 in
    let v38: Float = v0[1] in
    var v42: [Float] = v35 in
    let v46: [Float] = v49[0] in
    v22[0] = v11 in
    var v71: Float = v2 in
    v22[0] = v42 in
    v6[1] = v38 in
    var v57: [Float] = v46 in
    v42[0] = v71 in
    v5[1] = v38 in
    v35[0] = v71 in
    let v64: Float = v57[1] in
    v64
  } in
  fun loop(i: Int, v0: [Float], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [Float] = [0.0, 1.0] in
    let v1: Float = 2.0 in
    let initialResult: Float = 2.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()