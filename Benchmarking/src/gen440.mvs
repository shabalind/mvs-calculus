  struct s0 {
    var p0: [Float]
    var p1: [[Float]]
  } in
  let f15: ([s0]) -> [s0] = (v0: [s0]) -> [s0] {
    var v2: [s0] = v0 in
    let v5: s0 = v2[0] in
    var v10: [s0] = v2 in
    let v6: [[Float]] = v5.p1 in
    var v14: [[Float]] = v6 in
    let v11: s0 = v10[1] in
    let v20: [Float] = v5.p0 in
    var v12: [Float] = v20 in
    var v25: s0 = v11 in
    v2[1] = v5 in
    var v18: [s0] = v10 in
    let v31: [Float] = v14[0] in
    v14[0] = v12 in
    let v22: [Float] = v5.p0 in
    let v13: [[Float]] = v11.p1 in
    v18[0] = v25 in
    v25.p0 = v31 in
    let v42: [[Float]] = v25.p1 in
    v14[0] = v22 in
    v25.p1 = v6 in
    v25.p1 = v13 in
    v25.p0 = v22 in
    v25.p1 = v42 in
    var v53: [s0] = v18 in
    v25.p0 = v22 in
    v53
  } in
  let noinline_f0: ([s0], [s0], [s0], Float) -> Float = (v0: [s0], v1: [s0], v2: [s0], v3: Float) -> Float {
    var v7: [s0] = v1 in
    let v13: s0 = v0[1] in
    v7[0] = v13 in
    let v8: [s0] = f15(v7) in
    let v4: s0 = v7[1] in
    let v21: [s0] = f15(v8) in
    let v14: s0 = v21[1] in
    let v18: [Float] = v14.p0 in
    v7 = v1 in
    let v32: [Float] = v4.p0 in
    let v55: Float = v32[0] in
    let v37: Float = v18[0] in
    let v94: Float = v37 * v55 in
    v94
  } in
  fun loop(i: Int, v0: [s0], v1: [s0], v2: [s0], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([0.0], [[1.0]]), s0([2.0], [[3.0]]), s0([4.0], [[5.0]])] in
    let v1: [s0] = [s0([6.0], [[7.0]]), s0([8.0], [[9.0]])] in
    let v2: [s0] = [s0([10.0], [[11.0]]), s0([12.0], [[13.0]]), s0([14.0], [[15.0]])] in
    let v3: Float = 16.0 in
    let initialResult: Float = 16.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()