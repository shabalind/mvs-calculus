  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: [[s0]]
    var p1: s1
  }
  struct s3 {
    var p0: s1
    var p1: s2
  }
  struct s4 {
    var p0: s0
    var p1: s2
  }
  struct s7 {
    var p0: Double
    var p1: [[s0]]
  }
  struct s13 {
    var p0: [s7]
    var p1: [[s1]]
  }
  @inline(never)
  func f0(_ v0: [s4], _ v1: s13, _ v2: [[s3]], _ v3: Double) -> Double {
    var v10: Double = v3
    let v13: [s3] = v2[0]
    let v11: s3 = v13[0]
    let v21: s1 = v11.p0
    v10 = v3
    let v35: s0 = v21.p0
    let v27: [[Double]] = v35.p0
    let v22: [Double] = v27[2]
    let v51: Double = v22[0]
    let v90: Double = v10 / v10
    let v98: Double = v10 + v51
    let v91: Double = v98 - v90
    return v91
  }
  func benchmark() {
    let v0: [s4] = [s4(p0: s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0]]), p1: s2(p0: [[s0(p0: [[5.0], [6.0], [7.0]], p1: [[8.0], [9.0]])], [s0(p0: [[10.0], [11.0], [12.0]], p1: [[13.0], [14.0]])], [s0(p0: [[15.0], [16.0], [17.0]], p1: [[18.0], [19.0]])]], p1: s1(p0: s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0], [24.0]]), p1: [s0(p0: [[25.0], [26.0], [27.0]], p1: [[28.0], [29.0]])]))), s4(p0: s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0]]), p1: s2(p0: [[s0(p0: [[35.0], [36.0], [37.0]], p1: [[38.0], [39.0]])], [s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0], [44.0]])], [s0(p0: [[45.0], [46.0], [47.0]], p1: [[48.0], [49.0]])]], p1: s1(p0: s0(p0: [[50.0], [51.0], [52.0]], p1: [[53.0], [54.0]]), p1: [s0(p0: [[55.0], [56.0], [57.0]], p1: [[58.0], [59.0]])]))), s4(p0: s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0], [64.0]]), p1: s2(p0: [[s0(p0: [[65.0], [66.0], [67.0]], p1: [[68.0], [69.0]])], [s0(p0: [[70.0], [71.0], [72.0]], p1: [[73.0], [74.0]])], [s0(p0: [[75.0], [76.0], [77.0]], p1: [[78.0], [79.0]])]], p1: s1(p0: s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0], [84.0]]), p1: [s0(p0: [[85.0], [86.0], [87.0]], p1: [[88.0], [89.0]])])))]
    let v1: s13 = s13(p0: [s7(p0: 90.0, p1: [[s0(p0: [[91.0], [92.0], [93.0]], p1: [[94.0], [95.0]])]]), s7(p0: 96.0, p1: [[s0(p0: [[97.0], [98.0], [99.0]], p1: [[100.0], [101.0]])]])], p1: [[s1(p0: s0(p0: [[102.0], [103.0], [104.0]], p1: [[105.0], [106.0]]), p1: [s0(p0: [[107.0], [108.0], [109.0]], p1: [[110.0], [111.0]])])], [s1(p0: s0(p0: [[112.0], [113.0], [114.0]], p1: [[115.0], [116.0]]), p1: [s0(p0: [[117.0], [118.0], [119.0]], p1: [[120.0], [121.0]])])], [s1(p0: s0(p0: [[122.0], [123.0], [124.0]], p1: [[125.0], [126.0]]), p1: [s0(p0: [[127.0], [128.0], [129.0]], p1: [[130.0], [131.0]])])]])
    let v2: [[s3]] = [[s3(p0: s1(p0: s0(p0: [[132.0], [133.0], [134.0]], p1: [[135.0], [136.0]]), p1: [s0(p0: [[137.0], [138.0], [139.0]], p1: [[140.0], [141.0]])]), p1: s2(p0: [[s0(p0: [[142.0], [143.0], [144.0]], p1: [[145.0], [146.0]])], [s0(p0: [[147.0], [148.0], [149.0]], p1: [[150.0], [151.0]])], [s0(p0: [[152.0], [153.0], [154.0]], p1: [[155.0], [156.0]])]], p1: s1(p0: s0(p0: [[157.0], [158.0], [159.0]], p1: [[160.0], [161.0]]), p1: [s0(p0: [[162.0], [163.0], [164.0]], p1: [[165.0], [166.0]])])))]]
    let v3: Double = 167.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 167.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
