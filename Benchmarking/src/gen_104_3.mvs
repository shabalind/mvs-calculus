  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s2 {
    var p0: s0
    var p1: s0
  } in
  let f92: (s0) -> s0 = (v0: s0) -> s0 {
    let v3: s2 = s2(v0, v0) in
    let v4: s2 = s2(v0, v0) in
    let v1: [s2] = [v4, v3, v4] in
    var v5: [s2] = v1 in
    v5[0] = v4 in
    v5[1] = v3 in
    let v11: s2 = v5[2] in
    let v24: s0 = v11.p0 in
    v5[0] = v11 in
    v24
  } in
  let f78: (s0) -> s0 = (v0: s0) -> s0 {
    var v1: s0 = v0 in
    var v4: s0 = v0 in
    let v8: s0 = f92(v0) in
    let v17: [[Float]] = v4.p1 in
    v1.p0 = v17 in
    let v22: s2 = s2(v8, v1) in
    let v26: s0 = v22.p1 in
    let v36: [[Float]] = v26.p0 in
    let v86: s0 = s0(v36, v17) in
    v86
  } in
  let f41: (Float) -> Float = (v0: Float) -> Float {
    var v3: Float = v0 in
    var v7: Float = v3 in
    var v2: Float = v0 in
    var v1: Float = v3 in
    var v4: Float = v2 in
    var v8: Float = v4 in
    var v9: Float = v4 in
    let v14: [Float] = [v1, v7] in
    var v15: [Float] = v14 in
    let v21: Float = v14[1] in
    let v13: Float = v14[0] in
    let v12: Float = v14[0] in
    v15[1] = v8 in
    v15[1] = v3 in
    var v24: [Float] = v14 in
    let v17: Float = v9 / v21 in
    let v37: Float = v15[0] in
    v15[0] = v37 in
    let v43: Float = v24[1] in
    var v22: [Float] = v15 in
    let v29: Float = v22[0] in
    let v27: Float = v14[1] in
    let v20: Float = v24[0] in
    v24[0] = v43 in
    v8 = v13 in
    var v42: Float = v12 in
    let v55: [Float] = [v43, v27, v29, v20, v17, v21, v42] in
    var v56: [Float] = v55 in
    var v49: Float = v7 in
    var v80: Float = v13 in
    var v116: [Float] = v56 in
    v8 = v49 in
    var v83: [Float] = v116 in
    let v113: Float = v83[1] in
    v56[0] = v80 in
    v113
  } in
  let noinline_f0: (s1, s0, [s1], s1, Float) -> Float = (v0: s1, v1: s0, v2: [s1], v3: s1, v4: Float) -> Float {
    let v6: [s0] = v0.p0 in
    let v10: s0 = v6[1] in
    let v11: s0 = f78(v10) in
    let v12: [[Float]] = v10.p0 in
    let v17: [[Float]] = v11.p0 in
    let v22: [Float] = v17[0] in
    let v29: s0 = v6[1] in
    let v35: Float = v22[0] in
    let v25: [Float] = v12[1] in
    let v46: [[Float]] = v29.p0 in
    let v20: Float = v22[0] in
    let v52: Float = f41(v20) in
    let v68: [Float] = v46[1] in
    var v30: [Float] = v68 in
    v30[0] = v35 in
    let v66: [[Float]] = [v22, v25, v22, v25, v30, v22] in
    v30[0] = v20 in
    let v79: [Float] = v66[2] in
    v30[0] = v52 in
    let v135: Float = v79[0] in
    v135
  } in
  fun loop(i: Int, v0: s1, v1: s0, v2: [s1], v3: s1, v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([s0([[0.0], [1.0]], [[2.0], [3.0]]), s0([[4.0], [5.0]], [[6.0], [7.0]]), s0([[8.0], [9.0]], [[10.0], [11.0]])], s0([[12.0], [13.0]], [[14.0], [15.0]])) in
    let v1: s0 = s0([[16.0], [17.0]], [[18.0], [19.0]]) in
    let v2: [s1] = [s1([s0([[20.0], [21.0]], [[22.0], [23.0]]), s0([[24.0], [25.0]], [[26.0], [27.0]]), s0([[28.0], [29.0]], [[30.0], [31.0]])], s0([[32.0], [33.0]], [[34.0], [35.0]])), s1([s0([[36.0], [37.0]], [[38.0], [39.0]]), s0([[40.0], [41.0]], [[42.0], [43.0]]), s0([[44.0], [45.0]], [[46.0], [47.0]])], s0([[48.0], [49.0]], [[50.0], [51.0]])), s1([s0([[52.0], [53.0]], [[54.0], [55.0]]), s0([[56.0], [57.0]], [[58.0], [59.0]]), s0([[60.0], [61.0]], [[62.0], [63.0]])], s0([[64.0], [65.0]], [[66.0], [67.0]]))] in
    let v3: s1 = s1([s0([[68.0], [69.0]], [[70.0], [71.0]]), s0([[72.0], [73.0]], [[74.0], [75.0]]), s0([[76.0], [77.0]], [[78.0], [79.0]])], s0([[80.0], [81.0]], [[82.0], [83.0]])) in
    let v4: Float = 84.0 in
    let initialResult: Float = 84.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()