  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
  }
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  }
  struct s2 {
    var p0: [s1]
    var p1: s0
  }
  struct s3 {
    var p0: [s1]
    var p1: s2
    var p2: s0
  }
  struct s4 {
    var p0: [[s2]]
    var p1: [s3]
  }
  @inline(never)
  func f0(_ v0: [[s1]], _ v1: s4, _ v2: [[s1]], _ v3: Double) -> Double {
    let v5: [s1] = v2[0]
    var v11: Double = v3
    let v4: s1 = v5[0]
    let v24: Double = v11 - v11
    var v19: Double = v24
    let v43: Double = v24 * v19
    let v25: s0 = v4.p1
    let v35: [[Double]] = v25.p1
    let v48: [Double] = v35[0]
    let v32: Double = v48[0]
    let v100: Double = v43 / v32
    var v130: Double = v100
    return v130
  }
  func benchmark() {
    let v0: [[s1]] = [[s1(p0: [[s0(p0: [[0.0]], p1: [[1.0]], p2: [[2.0], [3.0]], p3: [[4.0]])], [s0(p0: [[5.0]], p1: [[6.0]], p2: [[7.0], [8.0]], p3: [[9.0]])]], p1: s0(p0: [[10.0]], p1: [[11.0]], p2: [[12.0], [13.0]], p3: [[14.0]]))]]
    let v1: s4 = s4(p0: [[s2(p0: [s1(p0: [[s0(p0: [[15.0]], p1: [[16.0]], p2: [[17.0], [18.0]], p3: [[19.0]])], [s0(p0: [[20.0]], p1: [[21.0]], p2: [[22.0], [23.0]], p3: [[24.0]])]], p1: s0(p0: [[25.0]], p1: [[26.0]], p2: [[27.0], [28.0]], p3: [[29.0]])), s1(p0: [[s0(p0: [[30.0]], p1: [[31.0]], p2: [[32.0], [33.0]], p3: [[34.0]])], [s0(p0: [[35.0]], p1: [[36.0]], p2: [[37.0], [38.0]], p3: [[39.0]])]], p1: s0(p0: [[40.0]], p1: [[41.0]], p2: [[42.0], [43.0]], p3: [[44.0]])), s1(p0: [[s0(p0: [[45.0]], p1: [[46.0]], p2: [[47.0], [48.0]], p3: [[49.0]])], [s0(p0: [[50.0]], p1: [[51.0]], p2: [[52.0], [53.0]], p3: [[54.0]])]], p1: s0(p0: [[55.0]], p1: [[56.0]], p2: [[57.0], [58.0]], p3: [[59.0]]))], p1: s0(p0: [[60.0]], p1: [[61.0]], p2: [[62.0], [63.0]], p3: [[64.0]]))], [s2(p0: [s1(p0: [[s0(p0: [[65.0]], p1: [[66.0]], p2: [[67.0], [68.0]], p3: [[69.0]])], [s0(p0: [[70.0]], p1: [[71.0]], p2: [[72.0], [73.0]], p3: [[74.0]])]], p1: s0(p0: [[75.0]], p1: [[76.0]], p2: [[77.0], [78.0]], p3: [[79.0]])), s1(p0: [[s0(p0: [[80.0]], p1: [[81.0]], p2: [[82.0], [83.0]], p3: [[84.0]])], [s0(p0: [[85.0]], p1: [[86.0]], p2: [[87.0], [88.0]], p3: [[89.0]])]], p1: s0(p0: [[90.0]], p1: [[91.0]], p2: [[92.0], [93.0]], p3: [[94.0]])), s1(p0: [[s0(p0: [[95.0]], p1: [[96.0]], p2: [[97.0], [98.0]], p3: [[99.0]])], [s0(p0: [[100.0]], p1: [[101.0]], p2: [[102.0], [103.0]], p3: [[104.0]])]], p1: s0(p0: [[105.0]], p1: [[106.0]], p2: [[107.0], [108.0]], p3: [[109.0]]))], p1: s0(p0: [[110.0]], p1: [[111.0]], p2: [[112.0], [113.0]], p3: [[114.0]]))]], p1: [s3(p0: [s1(p0: [[s0(p0: [[115.0]], p1: [[116.0]], p2: [[117.0], [118.0]], p3: [[119.0]])], [s0(p0: [[120.0]], p1: [[121.0]], p2: [[122.0], [123.0]], p3: [[124.0]])]], p1: s0(p0: [[125.0]], p1: [[126.0]], p2: [[127.0], [128.0]], p3: [[129.0]]))], p1: s2(p0: [s1(p0: [[s0(p0: [[130.0]], p1: [[131.0]], p2: [[132.0], [133.0]], p3: [[134.0]])], [s0(p0: [[135.0]], p1: [[136.0]], p2: [[137.0], [138.0]], p3: [[139.0]])]], p1: s0(p0: [[140.0]], p1: [[141.0]], p2: [[142.0], [143.0]], p3: [[144.0]])), s1(p0: [[s0(p0: [[145.0]], p1: [[146.0]], p2: [[147.0], [148.0]], p3: [[149.0]])], [s0(p0: [[150.0]], p1: [[151.0]], p2: [[152.0], [153.0]], p3: [[154.0]])]], p1: s0(p0: [[155.0]], p1: [[156.0]], p2: [[157.0], [158.0]], p3: [[159.0]])), s1(p0: [[s0(p0: [[160.0]], p1: [[161.0]], p2: [[162.0], [163.0]], p3: [[164.0]])], [s0(p0: [[165.0]], p1: [[166.0]], p2: [[167.0], [168.0]], p3: [[169.0]])]], p1: s0(p0: [[170.0]], p1: [[171.0]], p2: [[172.0], [173.0]], p3: [[174.0]]))], p1: s0(p0: [[175.0]], p1: [[176.0]], p2: [[177.0], [178.0]], p3: [[179.0]])), p2: s0(p0: [[180.0]], p1: [[181.0]], p2: [[182.0], [183.0]], p3: [[184.0]])), s3(p0: [s1(p0: [[s0(p0: [[185.0]], p1: [[186.0]], p2: [[187.0], [188.0]], p3: [[189.0]])], [s0(p0: [[190.0]], p1: [[191.0]], p2: [[192.0], [193.0]], p3: [[194.0]])]], p1: s0(p0: [[195.0]], p1: [[196.0]], p2: [[197.0], [198.0]], p3: [[199.0]]))], p1: s2(p0: [s1(p0: [[s0(p0: [[200.0]], p1: [[201.0]], p2: [[202.0], [203.0]], p3: [[204.0]])], [s0(p0: [[205.0]], p1: [[206.0]], p2: [[207.0], [208.0]], p3: [[209.0]])]], p1: s0(p0: [[210.0]], p1: [[211.0]], p2: [[212.0], [213.0]], p3: [[214.0]])), s1(p0: [[s0(p0: [[215.0]], p1: [[216.0]], p2: [[217.0], [218.0]], p3: [[219.0]])], [s0(p0: [[220.0]], p1: [[221.0]], p2: [[222.0], [223.0]], p3: [[224.0]])]], p1: s0(p0: [[225.0]], p1: [[226.0]], p2: [[227.0], [228.0]], p3: [[229.0]])), s1(p0: [[s0(p0: [[230.0]], p1: [[231.0]], p2: [[232.0], [233.0]], p3: [[234.0]])], [s0(p0: [[235.0]], p1: [[236.0]], p2: [[237.0], [238.0]], p3: [[239.0]])]], p1: s0(p0: [[240.0]], p1: [[241.0]], p2: [[242.0], [243.0]], p3: [[244.0]]))], p1: s0(p0: [[245.0]], p1: [[246.0]], p2: [[247.0], [248.0]], p3: [[249.0]])), p2: s0(p0: [[250.0]], p1: [[251.0]], p2: [[252.0], [253.0]], p3: [[254.0]]))])
    let v2: [[s1]] = [[s1(p0: [[s0(p0: [[255.0]], p1: [[256.0]], p2: [[257.0], [258.0]], p3: [[259.0]])], [s0(p0: [[260.0]], p1: [[261.0]], p2: [[262.0], [263.0]], p3: [[264.0]])]], p1: s0(p0: [[265.0]], p1: [[266.0]], p2: [[267.0], [268.0]], p3: [[269.0]]))]]
    let v3: Double = 270.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 270.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
