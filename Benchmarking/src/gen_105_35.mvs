  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  } in
  struct s2 {
    var p0: [s1]
    var p1: s0
    var p2: [s0]
  } in
  let f22: (Float) -> Float = (v0: Float) -> Float {
    var v2: Float = v0 in
    var v7: Float = v0 in
    var v5: Float = v2 in
    var v1: Float = v7 in
    var v4: Float = v5 in
    v2 = v1 in
    v4
  } in
  let noinline_f0: ([s0], [s0], [[s1]], [[s2]], [s0], Float) -> Float = (v0: [s0], v1: [s0], v2: [[s1]], v3: [[s2]], v4: [s0], v5: Float) -> Float {
    let v9: Float = v5 - v5 in
    let v12: Float = f22(v5) in
    let v22: Float = v9 - v12 in
    let v180: Float = v22 + v9 in
    v180
  } in
  fun loop(i: Int, v0: [s0], v1: [s0], v2: [[s1]], v3: [[s2]], v4: [s0], v5: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4, v5) in
      loop(i + 1, v0, v1, v2, v3, v4, v5, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0]], [[1.0]]), s0([[2.0]], [[3.0]]), s0([[4.0]], [[5.0]])] in
    let v1: [s0] = [s0([[6.0]], [[7.0]]), s0([[8.0]], [[9.0]])] in
    let v2: [[s1]] = [[s1([[s0([[10.0]], [[11.0]])], [s0([[12.0]], [[13.0]])]], s0([[14.0]], [[15.0]]))]] in
    let v3: [[s2]] = [[s2([s1([[s0([[16.0]], [[17.0]])], [s0([[18.0]], [[19.0]])]], s0([[20.0]], [[21.0]])), s1([[s0([[22.0]], [[23.0]])], [s0([[24.0]], [[25.0]])]], s0([[26.0]], [[27.0]]))], s0([[28.0]], [[29.0]]), [s0([[30.0]], [[31.0]])])], [s2([s1([[s0([[32.0]], [[33.0]])], [s0([[34.0]], [[35.0]])]], s0([[36.0]], [[37.0]])), s1([[s0([[38.0]], [[39.0]])], [s0([[40.0]], [[41.0]])]], s0([[42.0]], [[43.0]]))], s0([[44.0]], [[45.0]]), [s0([[46.0]], [[47.0]])])]] in
    let v4: [s0] = [s0([[48.0]], [[49.0]])] in
    let v5: Float = 50.0 in
    let initialResult: Float = 50.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, v5, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()