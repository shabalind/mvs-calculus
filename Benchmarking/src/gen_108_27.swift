  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s2 {
    var p0: [s0]
    var p1: [s1]
  }
  struct s5 {
    var p0: [[s1]]
  }
  struct s8 {
    var p0: [s5]
    var p1: [s2]
    var p2: s5
    var p3: [s0]
  }
  @inline(never)
  func f0(_ v0: s8, _ v1: Double) -> Double {
    let v5: [s5] = v0.p0
    let v9: s5 = v5[1]
    let v7: [[s1]] = v9.p0
    let v21: [s1] = v7[2]
    let v18: s1 = v21[0]
    let v28: [s0] = v18.p1
    let v32: s0 = v28[0]
    let v42: [[Double]] = v32.p0
    let v62: [Double] = v42[0]
    let v56: Double = v62[0]
    var v55: Double = v56
    v55 = v56
    let v165: Double = v55 / v55
    return v165
  }
  func benchmark() {
    let v0: s8 = s8(p0: [s5(p0: [[s1(p0: [s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0]]), s0(p0: [[5.0], [6.0], [7.0]], p1: [[8.0], [9.0]]), s0(p0: [[10.0], [11.0], [12.0]], p1: [[13.0], [14.0]])], p1: [s0(p0: [[15.0], [16.0], [17.0]], p1: [[18.0], [19.0]]), s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0], [24.0]]), s0(p0: [[25.0], [26.0], [27.0]], p1: [[28.0], [29.0]])])], [s1(p0: [s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0]]), s0(p0: [[35.0], [36.0], [37.0]], p1: [[38.0], [39.0]]), s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0], [44.0]])], p1: [s0(p0: [[45.0], [46.0], [47.0]], p1: [[48.0], [49.0]]), s0(p0: [[50.0], [51.0], [52.0]], p1: [[53.0], [54.0]]), s0(p0: [[55.0], [56.0], [57.0]], p1: [[58.0], [59.0]])])], [s1(p0: [s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0], [64.0]]), s0(p0: [[65.0], [66.0], [67.0]], p1: [[68.0], [69.0]]), s0(p0: [[70.0], [71.0], [72.0]], p1: [[73.0], [74.0]])], p1: [s0(p0: [[75.0], [76.0], [77.0]], p1: [[78.0], [79.0]]), s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0], [84.0]]), s0(p0: [[85.0], [86.0], [87.0]], p1: [[88.0], [89.0]])])]]), s5(p0: [[s1(p0: [s0(p0: [[90.0], [91.0], [92.0]], p1: [[93.0], [94.0]]), s0(p0: [[95.0], [96.0], [97.0]], p1: [[98.0], [99.0]]), s0(p0: [[100.0], [101.0], [102.0]], p1: [[103.0], [104.0]])], p1: [s0(p0: [[105.0], [106.0], [107.0]], p1: [[108.0], [109.0]]), s0(p0: [[110.0], [111.0], [112.0]], p1: [[113.0], [114.0]]), s0(p0: [[115.0], [116.0], [117.0]], p1: [[118.0], [119.0]])])], [s1(p0: [s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0], [124.0]]), s0(p0: [[125.0], [126.0], [127.0]], p1: [[128.0], [129.0]]), s0(p0: [[130.0], [131.0], [132.0]], p1: [[133.0], [134.0]])], p1: [s0(p0: [[135.0], [136.0], [137.0]], p1: [[138.0], [139.0]]), s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0], [144.0]]), s0(p0: [[145.0], [146.0], [147.0]], p1: [[148.0], [149.0]])])], [s1(p0: [s0(p0: [[150.0], [151.0], [152.0]], p1: [[153.0], [154.0]]), s0(p0: [[155.0], [156.0], [157.0]], p1: [[158.0], [159.0]]), s0(p0: [[160.0], [161.0], [162.0]], p1: [[163.0], [164.0]])], p1: [s0(p0: [[165.0], [166.0], [167.0]], p1: [[168.0], [169.0]]), s0(p0: [[170.0], [171.0], [172.0]], p1: [[173.0], [174.0]]), s0(p0: [[175.0], [176.0], [177.0]], p1: [[178.0], [179.0]])])]]), s5(p0: [[s1(p0: [s0(p0: [[180.0], [181.0], [182.0]], p1: [[183.0], [184.0]]), s0(p0: [[185.0], [186.0], [187.0]], p1: [[188.0], [189.0]]), s0(p0: [[190.0], [191.0], [192.0]], p1: [[193.0], [194.0]])], p1: [s0(p0: [[195.0], [196.0], [197.0]], p1: [[198.0], [199.0]]), s0(p0: [[200.0], [201.0], [202.0]], p1: [[203.0], [204.0]]), s0(p0: [[205.0], [206.0], [207.0]], p1: [[208.0], [209.0]])])], [s1(p0: [s0(p0: [[210.0], [211.0], [212.0]], p1: [[213.0], [214.0]]), s0(p0: [[215.0], [216.0], [217.0]], p1: [[218.0], [219.0]]), s0(p0: [[220.0], [221.0], [222.0]], p1: [[223.0], [224.0]])], p1: [s0(p0: [[225.0], [226.0], [227.0]], p1: [[228.0], [229.0]]), s0(p0: [[230.0], [231.0], [232.0]], p1: [[233.0], [234.0]]), s0(p0: [[235.0], [236.0], [237.0]], p1: [[238.0], [239.0]])])], [s1(p0: [s0(p0: [[240.0], [241.0], [242.0]], p1: [[243.0], [244.0]]), s0(p0: [[245.0], [246.0], [247.0]], p1: [[248.0], [249.0]]), s0(p0: [[250.0], [251.0], [252.0]], p1: [[253.0], [254.0]])], p1: [s0(p0: [[255.0], [256.0], [257.0]], p1: [[258.0], [259.0]]), s0(p0: [[260.0], [261.0], [262.0]], p1: [[263.0], [264.0]]), s0(p0: [[265.0], [266.0], [267.0]], p1: [[268.0], [269.0]])])]])], p1: [s2(p0: [s0(p0: [[270.0], [271.0], [272.0]], p1: [[273.0], [274.0]]), s0(p0: [[275.0], [276.0], [277.0]], p1: [[278.0], [279.0]]), s0(p0: [[280.0], [281.0], [282.0]], p1: [[283.0], [284.0]])], p1: [s1(p0: [s0(p0: [[285.0], [286.0], [287.0]], p1: [[288.0], [289.0]]), s0(p0: [[290.0], [291.0], [292.0]], p1: [[293.0], [294.0]]), s0(p0: [[295.0], [296.0], [297.0]], p1: [[298.0], [299.0]])], p1: [s0(p0: [[300.0], [301.0], [302.0]], p1: [[303.0], [304.0]]), s0(p0: [[305.0], [306.0], [307.0]], p1: [[308.0], [309.0]]), s0(p0: [[310.0], [311.0], [312.0]], p1: [[313.0], [314.0]])]), s1(p0: [s0(p0: [[315.0], [316.0], [317.0]], p1: [[318.0], [319.0]]), s0(p0: [[320.0], [321.0], [322.0]], p1: [[323.0], [324.0]]), s0(p0: [[325.0], [326.0], [327.0]], p1: [[328.0], [329.0]])], p1: [s0(p0: [[330.0], [331.0], [332.0]], p1: [[333.0], [334.0]]), s0(p0: [[335.0], [336.0], [337.0]], p1: [[338.0], [339.0]]), s0(p0: [[340.0], [341.0], [342.0]], p1: [[343.0], [344.0]])]), s1(p0: [s0(p0: [[345.0], [346.0], [347.0]], p1: [[348.0], [349.0]]), s0(p0: [[350.0], [351.0], [352.0]], p1: [[353.0], [354.0]]), s0(p0: [[355.0], [356.0], [357.0]], p1: [[358.0], [359.0]])], p1: [s0(p0: [[360.0], [361.0], [362.0]], p1: [[363.0], [364.0]]), s0(p0: [[365.0], [366.0], [367.0]], p1: [[368.0], [369.0]]), s0(p0: [[370.0], [371.0], [372.0]], p1: [[373.0], [374.0]])])])], p2: s5(p0: [[s1(p0: [s0(p0: [[375.0], [376.0], [377.0]], p1: [[378.0], [379.0]]), s0(p0: [[380.0], [381.0], [382.0]], p1: [[383.0], [384.0]]), s0(p0: [[385.0], [386.0], [387.0]], p1: [[388.0], [389.0]])], p1: [s0(p0: [[390.0], [391.0], [392.0]], p1: [[393.0], [394.0]]), s0(p0: [[395.0], [396.0], [397.0]], p1: [[398.0], [399.0]]), s0(p0: [[400.0], [401.0], [402.0]], p1: [[403.0], [404.0]])])], [s1(p0: [s0(p0: [[405.0], [406.0], [407.0]], p1: [[408.0], [409.0]]), s0(p0: [[410.0], [411.0], [412.0]], p1: [[413.0], [414.0]]), s0(p0: [[415.0], [416.0], [417.0]], p1: [[418.0], [419.0]])], p1: [s0(p0: [[420.0], [421.0], [422.0]], p1: [[423.0], [424.0]]), s0(p0: [[425.0], [426.0], [427.0]], p1: [[428.0], [429.0]]), s0(p0: [[430.0], [431.0], [432.0]], p1: [[433.0], [434.0]])])], [s1(p0: [s0(p0: [[435.0], [436.0], [437.0]], p1: [[438.0], [439.0]]), s0(p0: [[440.0], [441.0], [442.0]], p1: [[443.0], [444.0]]), s0(p0: [[445.0], [446.0], [447.0]], p1: [[448.0], [449.0]])], p1: [s0(p0: [[450.0], [451.0], [452.0]], p1: [[453.0], [454.0]]), s0(p0: [[455.0], [456.0], [457.0]], p1: [[458.0], [459.0]]), s0(p0: [[460.0], [461.0], [462.0]], p1: [[463.0], [464.0]])])]]), p3: [s0(p0: [[465.0], [466.0], [467.0]], p1: [[468.0], [469.0]])])
    let v1: Double = 470.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 470.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
