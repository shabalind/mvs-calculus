  struct s0 {
    var p0: [[Float]]
    var p1: Float
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s0
    var p1: s1
  } in
  struct s4 {
    var p0: s0
    var p1: s0
    var p2: [[s2]]
  } in
  let noinline_f0: ([[Float]], s4, Float) -> Float = (v0: [[Float]], v1: s4, v2: Float) -> Float {
    var v7: Float = v2 in
    let v10: s0 = v1.p1 in
    let v19: Float = v2 / v2 in
    let v17: [[Float]] = v10.p0 in
    let v18: Float = v10.p1 in
    let v20: Float = v18 / v2 in
    let v28: s0 = s0(v17, v19) in
    let v37: [[Float]] = v28.p0 in
    let v34: s0 = s0(v37, v19) in
    let v45: Float = v20 / v19 in
    let v103: Float = v34.p1 in
    var v82: Float = v103 in
    let v99: Float = v18 - v7 in
    let v109: Float = v45 + v82 in
    let v137: Float = v99 * v109 in
    v137
  } in
  fun loop(i: Int, v0: [[Float]], v1: s4, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0]] in
    let v1: s4 = s4(s0([[1.0], [2.0], [3.0]], 4.0), s0([[5.0], [6.0], [7.0]], 8.0), [[s2(s0([[9.0], [10.0], [11.0]], 12.0), s1(s0([[13.0], [14.0], [15.0]], 16.0), s0([[17.0], [18.0], [19.0]], 20.0)))], [s2(s0([[21.0], [22.0], [23.0]], 24.0), s1(s0([[25.0], [26.0], [27.0]], 28.0), s0([[29.0], [30.0], [31.0]], 32.0)))]]) in
    let v2: Float = 33.0 in
    let initialResult: Float = 33.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()