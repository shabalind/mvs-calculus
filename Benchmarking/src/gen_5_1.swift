  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s4 {
    var p0: s1
    var p1: [[Double]]
  }
  struct s5 {
    var p0: [[s1]]
    var p1: [[s4]]
    var p2: s1
    var p3: s0
  }
  @inline(never)
  func f0(_ v0: [s5], _ v1: Double) -> Double {
    var v6: [s5] = v0
    let v9: s5 = v6[2]
    var v19: Double = v1
    let v20: s0 = v9.p3
    let v25: [[Double]] = v20.p1
    let v22: [Double] = v25[0]
    let v38: Double = v22[0]
    var v37: Double = v19
    let v118: [Double] = [v37, v19, v37, v38]
    let v89: s5 = v0[2]
    v6[1] = v89
    let v137: Double = v118[3]
    return v137
  }
  func benchmark() {
    let v0: [s5] = [s5(p0: [[s1(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0]], p2: [[4.0], [5.0]]), p1: s0(p0: [[6.0], [7.0]], p1: [[8.0], [9.0]], p2: [[10.0], [11.0]]))], [s1(p0: s0(p0: [[12.0], [13.0]], p1: [[14.0], [15.0]], p2: [[16.0], [17.0]]), p1: s0(p0: [[18.0], [19.0]], p1: [[20.0], [21.0]], p2: [[22.0], [23.0]]))]], p1: [[s4(p0: s1(p0: s0(p0: [[24.0], [25.0]], p1: [[26.0], [27.0]], p2: [[28.0], [29.0]]), p1: s0(p0: [[30.0], [31.0]], p1: [[32.0], [33.0]], p2: [[34.0], [35.0]])), p1: [[36.0], [37.0]])]], p2: s1(p0: s0(p0: [[38.0], [39.0]], p1: [[40.0], [41.0]], p2: [[42.0], [43.0]]), p1: s0(p0: [[44.0], [45.0]], p1: [[46.0], [47.0]], p2: [[48.0], [49.0]])), p3: s0(p0: [[50.0], [51.0]], p1: [[52.0], [53.0]], p2: [[54.0], [55.0]])), s5(p0: [[s1(p0: s0(p0: [[56.0], [57.0]], p1: [[58.0], [59.0]], p2: [[60.0], [61.0]]), p1: s0(p0: [[62.0], [63.0]], p1: [[64.0], [65.0]], p2: [[66.0], [67.0]]))], [s1(p0: s0(p0: [[68.0], [69.0]], p1: [[70.0], [71.0]], p2: [[72.0], [73.0]]), p1: s0(p0: [[74.0], [75.0]], p1: [[76.0], [77.0]], p2: [[78.0], [79.0]]))]], p1: [[s4(p0: s1(p0: s0(p0: [[80.0], [81.0]], p1: [[82.0], [83.0]], p2: [[84.0], [85.0]]), p1: s0(p0: [[86.0], [87.0]], p1: [[88.0], [89.0]], p2: [[90.0], [91.0]])), p1: [[92.0], [93.0]])]], p2: s1(p0: s0(p0: [[94.0], [95.0]], p1: [[96.0], [97.0]], p2: [[98.0], [99.0]]), p1: s0(p0: [[100.0], [101.0]], p1: [[102.0], [103.0]], p2: [[104.0], [105.0]])), p3: s0(p0: [[106.0], [107.0]], p1: [[108.0], [109.0]], p2: [[110.0], [111.0]])), s5(p0: [[s1(p0: s0(p0: [[112.0], [113.0]], p1: [[114.0], [115.0]], p2: [[116.0], [117.0]]), p1: s0(p0: [[118.0], [119.0]], p1: [[120.0], [121.0]], p2: [[122.0], [123.0]]))], [s1(p0: s0(p0: [[124.0], [125.0]], p1: [[126.0], [127.0]], p2: [[128.0], [129.0]]), p1: s0(p0: [[130.0], [131.0]], p1: [[132.0], [133.0]], p2: [[134.0], [135.0]]))]], p1: [[s4(p0: s1(p0: s0(p0: [[136.0], [137.0]], p1: [[138.0], [139.0]], p2: [[140.0], [141.0]]), p1: s0(p0: [[142.0], [143.0]], p1: [[144.0], [145.0]], p2: [[146.0], [147.0]])), p1: [[148.0], [149.0]])]], p2: s1(p0: s0(p0: [[150.0], [151.0]], p1: [[152.0], [153.0]], p2: [[154.0], [155.0]]), p1: s0(p0: [[156.0], [157.0]], p1: [[158.0], [159.0]], p2: [[160.0], [161.0]])), p3: s0(p0: [[162.0], [163.0]], p1: [[164.0], [165.0]], p2: [[166.0], [167.0]]))]
    let v1: Double = 168.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 168.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
