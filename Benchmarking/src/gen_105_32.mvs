  struct s0 {
    var p0: [Float]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s2 {
    var p0: s1
    var p1: [Float]
  } in
  struct s3 {
    var p0: [s2]
    var p1: s1
  } in
  struct s4 {
    var p0: s1
    var p1: s2
  } in
  struct s5 {
    var p0: s4
    var p1: s3
  } in
  struct s6 {
    var p0: [Float]
    var p1: s1
  } in
  struct s8 {
    var p0: [[s6]]
    var p1: [s5]
  } in
  let f47: (s1) -> s1 = (v0: s1) -> s1 {
    let v7: s0 = v0.p1 in
    var v3: s1 = v0 in
    let v24: [Float] = v7.p0 in
    let v37: s2 = s2(v3, v24) in
    let v25: s1 = v37.p0 in
    v25
  } in
  let noinline_f0: ([[s8]], s1, Float) -> Float = (v0: [[s8]], v1: s1, v2: Float) -> Float {
    let v6: s1 = f47(v1) in
    let v10: s0 = v6.p1 in
    let v14: [Float] = v10.p0 in
    let v60: Float = v14[0] in
    v60
  } in
  fun loop(i: Int, v0: [[s8]], v1: s1, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s8]] = [[s8([[s6([0.0, 1.0], s1([s0([2.0], [[3.0]]), s0([4.0], [[5.0]])], s0([6.0], [[7.0]])))], [s6([8.0, 9.0], s1([s0([10.0], [[11.0]]), s0([12.0], [[13.0]])], s0([14.0], [[15.0]])))], [s6([16.0, 17.0], s1([s0([18.0], [[19.0]]), s0([20.0], [[21.0]])], s0([22.0], [[23.0]])))]], [s5(s4(s1([s0([24.0], [[25.0]]), s0([26.0], [[27.0]])], s0([28.0], [[29.0]])), s2(s1([s0([30.0], [[31.0]]), s0([32.0], [[33.0]])], s0([34.0], [[35.0]])), [36.0])), s3([s2(s1([s0([37.0], [[38.0]]), s0([39.0], [[40.0]])], s0([41.0], [[42.0]])), [43.0]), s2(s1([s0([44.0], [[45.0]]), s0([46.0], [[47.0]])], s0([48.0], [[49.0]])), [50.0]), s2(s1([s0([51.0], [[52.0]]), s0([53.0], [[54.0]])], s0([55.0], [[56.0]])), [57.0])], s1([s0([58.0], [[59.0]]), s0([60.0], [[61.0]])], s0([62.0], [[63.0]]))))])], [s8([[s6([64.0, 65.0], s1([s0([66.0], [[67.0]]), s0([68.0], [[69.0]])], s0([70.0], [[71.0]])))], [s6([72.0, 73.0], s1([s0([74.0], [[75.0]]), s0([76.0], [[77.0]])], s0([78.0], [[79.0]])))], [s6([80.0, 81.0], s1([s0([82.0], [[83.0]]), s0([84.0], [[85.0]])], s0([86.0], [[87.0]])))]], [s5(s4(s1([s0([88.0], [[89.0]]), s0([90.0], [[91.0]])], s0([92.0], [[93.0]])), s2(s1([s0([94.0], [[95.0]]), s0([96.0], [[97.0]])], s0([98.0], [[99.0]])), [100.0])), s3([s2(s1([s0([101.0], [[102.0]]), s0([103.0], [[104.0]])], s0([105.0], [[106.0]])), [107.0]), s2(s1([s0([108.0], [[109.0]]), s0([110.0], [[111.0]])], s0([112.0], [[113.0]])), [114.0]), s2(s1([s0([115.0], [[116.0]]), s0([117.0], [[118.0]])], s0([119.0], [[120.0]])), [121.0])], s1([s0([122.0], [[123.0]]), s0([124.0], [[125.0]])], s0([126.0], [[127.0]]))))])]] in
    let v1: s1 = s1([s0([128.0], [[129.0]]), s0([130.0], [[131.0]])], s0([132.0], [[133.0]])) in
    let v2: Float = 134.0 in
    let initialResult: Float = 134.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()