  struct s0 {
    var p0: [[Float]]
    var p1: [Float]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: [s1]
  } in
  struct s3 {
    var p0: s2
    var p1: s2
  } in
  struct s5 {
    var p0: s1
    var p1: s1
  } in
  let f52: (s5) -> s5 = (v0: s5) -> s5 {
    let v7: s1 = v0.p1 in
    var v9: s1 = v7 in
    var v14: s1 = v9 in
    let v47: s1 = v0.p1 in
    let v159: s5 = s5(v14, v47) in
    v159
  } in
  let f49: (s2) -> s2 = (v0: s2) -> s2 {
    var v6: s2 = v0 in
    let v3: [s0] = v0.p0 in
    let v27: [s1] = v6.p1 in
    v6.p1 = v27 in
    v6.p0 = v3 in
    v6
  } in
  let f46: ([s1]) -> [s1] = (v0: [s1]) -> [s1] {
    v0
  } in
  let f43: (s3) -> s3 = (v0: s3) -> s3 {
    let v5: s2 = v0.p1 in
    var v4: s2 = v5 in
    let v3: s3 = s3(v4, v5) in
    var v68: s3 = v3 in
    v68
  } in
  let f35: (s3) -> s3 = (v0: s3) -> s3 {
    let v1: s3 = f43(v0) in
    var v35: s3 = v1 in
    v35
  } in
  let f29: (s3) -> s3 = (v0: s3) -> s3 {
    var v6: s3 = v0 in
    var v5: s3 = v0 in
    let v7: s3 = f35(v6) in
    var v1: s3 = v7 in
    let v4: s3 = f43(v1) in
    let v2: s2 = v0.p1 in
    v1.p1 = v2 in
    let v8: s3 = f43(v7) in
    let v10: s2 = f49(v2) in
    v6.p0 = v2 in
    let v11: [s0] = v2.p0 in
    let v12: s3 = f43(v5) in
    var v9: s2 = v10 in
    var v14: s2 = v9 in
    let v25: s2 = v1.p0 in
    let v16: s2 = f49(v10) in
    let v21: [s2] = [v14, v16, v9, v25, v2] in
    let v30: s2 = v4.p1 in
    let v36: s2 = f49(v9) in
    v5 = v8 in
    let v31: s3 = f43(v12) in
    v6.p0 = v36 in
    let v33: [s1] = v14.p1 in
    let v19: s2 = v21[0] in
    let v26: s2 = v21[3] in
    let v43: s2 = v7.p1 in
    v14.p1 = v33 in
    let v27: [s1] = f46(v33) in
    let v35: [s1] = f46(v27) in
    v9.p0 = v11 in
    let v39: s2 = v31.p0 in
    v6.p1 = v39 in
    let v54: s2 = v21[3] in
    let v40: [s0] = v30.p0 in
    v6.p1 = v26 in
    let v87: s2 = v31.p1 in
    let v47: [s0] = v87.p0 in
    let v58: s2 = v31.p0 in
    v14.p0 = v47 in
    let v62: s2 = f49(v2) in
    v1.p0 = v62 in
    v5.p1 = v30 in
    v9.p1 = v35 in
    v5.p1 = v54 in
    let v98: s2 = f49(v87) in
    v1.p0 = v58 in
    v1.p1 = v62 in
    v5.p0 = v98 in
    let v66: s3 = s3(v43, v19) in
    v9.p0 = v40 in
    let v182: s3 = f43(v66) in
    v1.p0 = v2 in
    v182
  } in
  let noinline_f0: (s3, Float) -> Float = (v0: s3, v1: Float) -> Float {
    var v3: Float = v1 in
    let v5: s3 = f29(v0) in
    var v9: s3 = v5 in
    let v2: s2 = v9.p1 in
    let v13: [s1] = v2.p1 in
    v9.p0 = v2 in
    var v28: [s1] = v13 in
    let v20: s1 = v28[2] in
    let v34: s1 = v28[0] in
    var v26: s1 = v34 in
    let v33: s0 = v20.p0 in
    var v23: s1 = v34 in
    let v47: [Float] = v33.p1 in
    let v60: Float = v47[1] in
    v28[0] = v34 in
    v23 = v20 in
    let v44: s5 = s5(v26, v20) in
    let v30: Float = v60 + v3 in
    let v86: s5 = f52(v44) in
    let v70: Float = v30 - v60 in
    let v61: s1 = v86.p0 in
    v28[1] = v23 in
    v28[0] = v61 in
    v70
  } in
  fun loop(i: Int, v0: s3, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(s2([s0([[0.0], [1.0]], [2.0, 3.0, 4.0], [[5.0], [6.0], [7.0]]), s0([[8.0], [9.0]], [10.0, 11.0, 12.0], [[13.0], [14.0], [15.0]])], [s1(s0([[16.0], [17.0]], [18.0, 19.0, 20.0], [[21.0], [22.0], [23.0]]), s0([[24.0], [25.0]], [26.0, 27.0, 28.0], [[29.0], [30.0], [31.0]])), s1(s0([[32.0], [33.0]], [34.0, 35.0, 36.0], [[37.0], [38.0], [39.0]]), s0([[40.0], [41.0]], [42.0, 43.0, 44.0], [[45.0], [46.0], [47.0]])), s1(s0([[48.0], [49.0]], [50.0, 51.0, 52.0], [[53.0], [54.0], [55.0]]), s0([[56.0], [57.0]], [58.0, 59.0, 60.0], [[61.0], [62.0], [63.0]]))]), s2([s0([[64.0], [65.0]], [66.0, 67.0, 68.0], [[69.0], [70.0], [71.0]]), s0([[72.0], [73.0]], [74.0, 75.0, 76.0], [[77.0], [78.0], [79.0]])], [s1(s0([[80.0], [81.0]], [82.0, 83.0, 84.0], [[85.0], [86.0], [87.0]]), s0([[88.0], [89.0]], [90.0, 91.0, 92.0], [[93.0], [94.0], [95.0]])), s1(s0([[96.0], [97.0]], [98.0, 99.0, 100.0], [[101.0], [102.0], [103.0]]), s0([[104.0], [105.0]], [106.0, 107.0, 108.0], [[109.0], [110.0], [111.0]])), s1(s0([[112.0], [113.0]], [114.0, 115.0, 116.0], [[117.0], [118.0], [119.0]]), s0([[120.0], [121.0]], [122.0, 123.0, 124.0], [[125.0], [126.0], [127.0]]))])) in
    let v1: Float = 128.0 in
    let initialResult: Float = 128.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()