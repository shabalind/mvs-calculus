  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s7 {
    var p0: [s0]
    var p1: [s1]
  } in
  let f13: (Float) -> Float = (v0: Float) -> Float {
    var v1: Float = v0 in
    var v6: Float = v1 in
    var v7: Float = v6 in
    var v4: Float = v7 in
    let v5: Float = v4 / v4 in
    var v2: Float = v6 in
    var v8: Float = v6 in
    var v9: Float = v2 in
    let v13: Float = v4 + v2 in
    var v11: Float = v13 in
    let v15: Float = v11 / v11 in
    var v12: Float = v9 in
    var v14: Float = v9 in
    let v28: [Float] = [v14, v8, v13] in
    var v24: [Float] = v28 in
    var v22: [Float] = v24 in
    let v26: Float = v9 * v15 in
    var v45: Float = v6 in
    v24[2] = v5 in
    let v35: Float = v24[2] in
    let v49: Float = v22[1] in
    let v53: [Float] = [v26, v12, v5, v49, v45, v12] in
    var v36: [Float] = v53 in
    let v86: Float = v53[5] in
    var v68: [Float] = v53 in
    var v61: [Float] = v68 in
    v68[2] = v86 in
    let v124: Float = v53[5] in
    v68[0] = v9 in
    let v66: Float = v22[1] in
    let v59: Float = v61[0] in
    let v48: Float = v68[4] in
    let v37: Float = v66 * v59 in
    let v30: Float = v36[1] in
    var v60: Float = v35 in
    let v64: [Float] = [v60, v48] in
    v68 = v61 in
    let v73: Float = v64[0] in
    let v77: Float = v64[1] in
    v22[1] = v77 in
    v36[2] = v124 in
    v61[1] = v49 in
    v45 = v73 in
    v24[1] = v30 in
    var v293: Float = v37 in
    v293
  } in
  let noinline_f0: ([[s7]], Float) -> Float = (v0: [[s7]], v1: Float) -> Float {
    var v5: Float = v1 in
    let v6: Float = f13(v1) in
    let v2: Float = f13(v1) in
    var v7: Float = v5 in
    v5 = v2 in
    var v8: Float = v6 in
    var v34: Float = v7 in
    v34 = v8 in
    let v87: Float = v34 / v5 in
    v87
  } in
  fun loop(i: Int, v0: [[s7]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s7]] = [[s7([s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]])], [s1([s0([[6.0], [7.0], [8.0]], [[9.0], [10.0], [11.0]])], [s0([[12.0], [13.0], [14.0]], [[15.0], [16.0], [17.0]]), s0([[18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0]]), s0([[24.0], [25.0], [26.0]], [[27.0], [28.0], [29.0]])])])], [s7([s0([[30.0], [31.0], [32.0]], [[33.0], [34.0], [35.0]])], [s1([s0([[36.0], [37.0], [38.0]], [[39.0], [40.0], [41.0]])], [s0([[42.0], [43.0], [44.0]], [[45.0], [46.0], [47.0]]), s0([[48.0], [49.0], [50.0]], [[51.0], [52.0], [53.0]]), s0([[54.0], [55.0], [56.0]], [[57.0], [58.0], [59.0]])])])], [s7([s0([[60.0], [61.0], [62.0]], [[63.0], [64.0], [65.0]])], [s1([s0([[66.0], [67.0], [68.0]], [[69.0], [70.0], [71.0]])], [s0([[72.0], [73.0], [74.0]], [[75.0], [76.0], [77.0]]), s0([[78.0], [79.0], [80.0]], [[81.0], [82.0], [83.0]]), s0([[84.0], [85.0], [86.0]], [[87.0], [88.0], [89.0]])])])]] in
    let v1: Float = 90.0 in
    let initialResult: Float = 90.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()