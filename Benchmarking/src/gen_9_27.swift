  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s2 {
    var p0: s0
    var p1: s1
    var p2: s0
    var p3: [[s0]]
  }
  struct s3 {
    var p0: s0
    var p1: [s2]
  }
  @inline(never)
  func f0(_ v0: [s3], _ v1: Double) -> Double {
    let v6: [Double] = [v1, v1, v1]
    var v7: [Double] = v6
    let v2: s3 = v0[0]
    let v4: s0 = v2.p0
    let v15: Double = v7[1]
    let v17: Double = v6[2]
    v7[1] = v1
    let v20: [[Double]] = v4.p1
    let v43: [Double] = v20[2]
    let v31: Double = v15 * v17
    let v91: Double = v43[0]
    v7[2] = v91
    return v31
  }
  func benchmark() {
    let v0: [s3] = [s3(p0: s0(p0: [[0.0]], p1: [[1.0], [2.0], [3.0]], p2: [[4.0], [5.0]]), p1: [s2(p0: s0(p0: [[6.0]], p1: [[7.0], [8.0], [9.0]], p2: [[10.0], [11.0]]), p1: s1(p0: [s0(p0: [[12.0]], p1: [[13.0], [14.0], [15.0]], p2: [[16.0], [17.0]]), s0(p0: [[18.0]], p1: [[19.0], [20.0], [21.0]], p2: [[22.0], [23.0]])], p1: [s0(p0: [[24.0]], p1: [[25.0], [26.0], [27.0]], p2: [[28.0], [29.0]])]), p2: s0(p0: [[30.0]], p1: [[31.0], [32.0], [33.0]], p2: [[34.0], [35.0]]), p3: [[s0(p0: [[36.0]], p1: [[37.0], [38.0], [39.0]], p2: [[40.0], [41.0]])], [s0(p0: [[42.0]], p1: [[43.0], [44.0], [45.0]], p2: [[46.0], [47.0]])]]), s2(p0: s0(p0: [[48.0]], p1: [[49.0], [50.0], [51.0]], p2: [[52.0], [53.0]]), p1: s1(p0: [s0(p0: [[54.0]], p1: [[55.0], [56.0], [57.0]], p2: [[58.0], [59.0]]), s0(p0: [[60.0]], p1: [[61.0], [62.0], [63.0]], p2: [[64.0], [65.0]])], p1: [s0(p0: [[66.0]], p1: [[67.0], [68.0], [69.0]], p2: [[70.0], [71.0]])]), p2: s0(p0: [[72.0]], p1: [[73.0], [74.0], [75.0]], p2: [[76.0], [77.0]]), p3: [[s0(p0: [[78.0]], p1: [[79.0], [80.0], [81.0]], p2: [[82.0], [83.0]])], [s0(p0: [[84.0]], p1: [[85.0], [86.0], [87.0]], p2: [[88.0], [89.0]])]]), s2(p0: s0(p0: [[90.0]], p1: [[91.0], [92.0], [93.0]], p2: [[94.0], [95.0]]), p1: s1(p0: [s0(p0: [[96.0]], p1: [[97.0], [98.0], [99.0]], p2: [[100.0], [101.0]]), s0(p0: [[102.0]], p1: [[103.0], [104.0], [105.0]], p2: [[106.0], [107.0]])], p1: [s0(p0: [[108.0]], p1: [[109.0], [110.0], [111.0]], p2: [[112.0], [113.0]])]), p2: s0(p0: [[114.0]], p1: [[115.0], [116.0], [117.0]], p2: [[118.0], [119.0]]), p3: [[s0(p0: [[120.0]], p1: [[121.0], [122.0], [123.0]], p2: [[124.0], [125.0]])], [s0(p0: [[126.0]], p1: [[127.0], [128.0], [129.0]], p2: [[130.0], [131.0]])]])])]
    let v1: Double = 132.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 132.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
