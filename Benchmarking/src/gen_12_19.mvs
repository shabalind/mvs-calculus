  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: [[s1]]
  } in
  let f76: (Float) -> Float = (v0: Float) -> Float {
    var v2: Float = v0 in
    var v4: Float = v0 in
    var v8: Float = v4 in
    let v1: Float = v8 / v2 in
    v2 = v4 in
    var v5: Float = v2 in
    var v10: Float = v1 in
    var v6: Float = v2 in
    var v7: Float = v1 in
    v5 = v8 in
    var v20: Float = v5 in
    let v21: [Float] = [v10, v6, v5, v7, v4] in
    var v32: [Float] = v21 in
    v32[3] = v20 in
    let v29: Float = v32[0] in
    v29
  } in
  let f34: (Float) -> Float = (v0: Float) -> Float {
    let v5: Float = f76(v0) in
    let v2: Float = f76(v5) in
    var v1: Float = v5 in
    let v19: Float = v2 * v1 in
    let v16: Float = f76(v5) in
    let v29: Float = f76(v16) in
    var v20: Float = v29 in
    let v13: [Float] = [v20, v29, v19] in
    let v23: Float = v13[0] in
    v23
  } in
  let noinline_f0: ([s0], s2, Float) -> Float = (v0: [s0], v1: s2, v2: Float) -> Float {
    var v3: Float = v2 in
    var v57: Float = v3 in
    let v19: Float = f34(v57) in
    let v41: Float = f76(v19) in
    v41
  } in
  fun loop(i: Int, v0: [s0], v1: s2, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]), s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]]), s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]])] in
    let v1: s2 = s2([s0([[15.0], [16.0]], [[17.0], [18.0], [19.0]])], [[s1(s0([[20.0], [21.0]], [[22.0], [23.0], [24.0]]), s0([[25.0], [26.0]], [[27.0], [28.0], [29.0]]))]]) in
    let v2: Float = 30.0 in
    let initialResult: Float = 30.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()