  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  let noinline_f0: ([s1], [s1], [s1], [s1], Float) -> Float = (v0: [s1], v1: [s1], v2: [s1], v3: [s1], v4: Float) -> Float {
    let v10: s1 = v3[1] in
    let v6: s0 = v10.p1 in
    let v12: [[Float]] = v6.p0 in
    var v21: Float = v4 in
    let v30: [Float] = v12[0] in
    let v25: Float = v30[0] in
    var v99: Float = v21 in
    var v146: Float = v25 in
    let v70: Float = v146 * v99 in
    let v122: Float = v70 + v4 in
    v21 = v146 in
    v122
  } in
  fun loop(i: Int, v0: [s1], v1: [s1], v2: [s1], v3: [s1], v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1(s0([[0.0]], [[1.0], [2.0], [3.0]]), s0([[4.0]], [[5.0], [6.0], [7.0]])), s1(s0([[8.0]], [[9.0], [10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0], [15.0]]))] in
    let v1: [s1] = [s1(s0([[16.0]], [[17.0], [18.0], [19.0]]), s0([[20.0]], [[21.0], [22.0], [23.0]])), s1(s0([[24.0]], [[25.0], [26.0], [27.0]]), s0([[28.0]], [[29.0], [30.0], [31.0]]))] in
    let v2: [s1] = [s1(s0([[32.0]], [[33.0], [34.0], [35.0]]), s0([[36.0]], [[37.0], [38.0], [39.0]]))] in
    let v3: [s1] = [s1(s0([[40.0]], [[41.0], [42.0], [43.0]]), s0([[44.0]], [[45.0], [46.0], [47.0]])), s1(s0([[48.0]], [[49.0], [50.0], [51.0]]), s0([[52.0]], [[53.0], [54.0], [55.0]]))] in
    let v4: Float = 56.0 in
    let initialResult: Float = 56.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()