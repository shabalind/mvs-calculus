  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  let f50: (s0) -> s0 = (v0: s0) -> s0 {
    var v7: s0 = v0 in
    var v3: s0 = v0 in
    var v2: s0 = v0 in
    v3 = v7 in
    let v8: [[Float]] = v3.p1 in
    v2.p1 = v8 in
    let v4: [Float] = v8[0] in
    v2 = v7 in
    var v6: [[Float]] = v8 in
    v2.p1 = v8 in
    v6[0] = v4 in
    var v14: [[Float]] = v6 in
    v3.p1 = v6 in
    let v12: [[Float]] = v0.p0 in
    var v15: [[Float]] = v12 in
    v2.p0 = v12 in
    v15[0] = v4 in
    v2.p0 = v12 in
    let v13: s0 = s0(v15, v14) in
    var v11: [[Float]] = v14 in
    let v24: [[[Float]]] = [v11, v14, v14, v6, v8] in
    let v43: [Float] = v6[0] in
    v3.p1 = v6 in
    var v19: [[[Float]]] = v24 in
    v7.p0 = v15 in
    var v23: [[Float]] = v15 in
    let v26: [[Float]] = v2.p1 in
    var v47: [[Float]] = v8 in
    v2.p1 = v26 in
    let v32: [[Float]] = v0.p0 in
    let v65: [[Float]] = v19[2] in
    v7.p0 = v32 in
    let v28: [[Float]] = v7.p0 in
    var v48: s0 = v0 in
    v2.p1 = v8 in
    var v80: s0 = v2 in
    v2.p0 = v28 in
    let v70: s0 = s0(v23, v65) in
    let v150: [s0] = [v13, v48, v70, v80, v0, v7] in
    let v83: [[Float]] = v0.p0 in
    v2.p1 = v8 in
    v6[0] = v4 in
    v48.p1 = v14 in
    v7.p1 = v47 in
    v7.p0 = v83 in
    var v100: [Float] = v43 in
    let v85: s0 = v150[2] in
    v6[0] = v100 in
    v7.p1 = v8 in
    v11[0] = v43 in
    let v69: [[Float]] = v2.p1 in
    let v145: [[Float]] = v48.p0 in
    v3.p1 = v69 in
    v80.p0 = v145 in
    v85
  } in
  let noinline_f0: ([s1], Float) -> Float = (v0: [s1], v1: Float) -> Float {
    let v4: s1 = v0[1] in
    let v3: s0 = v4.p0 in
    let v8: s0 = f50(v3) in
    let v17: s0 = f50(v8) in
    let v18: [[Float]] = v17.p0 in
    let v27: [Float] = v18[1] in
    let v30: Float = v27[0] in
    let v96: Float = v27[0] in
    let v58: Float = v96 - v30 in
    var v132: Float = v58 in
    v132
  } in
  fun loop(i: Int, v0: [s1], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1(s0([[0.0], [1.0]], [[2.0]]), [s0([[3.0], [4.0]], [[5.0]]), s0([[6.0], [7.0]], [[8.0]]), s0([[9.0], [10.0]], [[11.0]])]), s1(s0([[12.0], [13.0]], [[14.0]]), [s0([[15.0], [16.0]], [[17.0]]), s0([[18.0], [19.0]], [[20.0]]), s0([[21.0], [22.0]], [[23.0]])])] in
    let v1: Float = 24.0 in
    let initialResult: Float = 24.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()