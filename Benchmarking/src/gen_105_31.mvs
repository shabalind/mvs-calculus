  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s2 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s3 {
    var p0: [s2]
    var p1: s2
  } in
  let noinline_f0: (s3, [s3], Float) -> Float = (v0: s3, v1: [s3], v2: Float) -> Float {
    let v4: Float = v2 / v2 in
    let v5: s3 = v1[0] in
    let v8: s2 = v5.p1 in
    let v6: [s0] = v8.p0 in
    var v12: Float = v2 in
    let v33: s0 = v6[1] in
    let v31: [[Float]] = v33.p0 in
    let v28: Float = v12 * v4 in
    let v40: [Float] = v31[0] in
    let v44: Float = v28 * v2 in
    let v61: Float = v40[0] in
    let v77: Float = v61 / v44 in
    v77
  } in
  fun loop(i: Int, v0: s3, v1: [s3], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3([s2([s0([[0.0], [1.0]], [[2.0]]), s0([[3.0], [4.0]], [[5.0]]), s0([[6.0], [7.0]], [[8.0]])], [s0([[9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0]], [[14.0]])])], s2([s0([[15.0], [16.0]], [[17.0]]), s0([[18.0], [19.0]], [[20.0]]), s0([[21.0], [22.0]], [[23.0]])], [s0([[24.0], [25.0]], [[26.0]]), s0([[27.0], [28.0]], [[29.0]])])) in
    let v1: [s3] = [s3([s2([s0([[30.0], [31.0]], [[32.0]]), s0([[33.0], [34.0]], [[35.0]]), s0([[36.0], [37.0]], [[38.0]])], [s0([[39.0], [40.0]], [[41.0]]), s0([[42.0], [43.0]], [[44.0]])])], s2([s0([[45.0], [46.0]], [[47.0]]), s0([[48.0], [49.0]], [[50.0]]), s0([[51.0], [52.0]], [[53.0]])], [s0([[54.0], [55.0]], [[56.0]]), s0([[57.0], [58.0]], [[59.0]])]))] in
    let v2: Float = 60.0 in
    let initialResult: Float = 60.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()