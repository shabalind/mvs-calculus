  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let f44: (s0) -> s0 = (v0: s0) -> s0 {
    let v2: [[Float]] = v0.p0 in
    var v4: [[Float]] = v2 in
    let v17: s0 = s0(v4, v4) in
    v17
  } in
  let f41: (Float, s0) -> Float = (v0: Float, v1: s0) -> Float {
    var v3: s0 = v1 in
    let v5: [[Float]] = v3.p1 in
    var v2: [[Float]] = v5 in
    let v4: s0 = f44(v3) in
    v3.p0 = v5 in
    let v9: [Float] = v5[1] in
    let v6: [[[Float]]] = [v2] in
    let v7: s0 = f44(v4) in
    let v8: Float = v9[0] in
    let v16: [[Float]] = v6[0] in
    let v17: [Float] = v16[0] in
    let v19: s0 = f44(v1) in
    v3.p0 = v5 in
    v2[2] = v17 in
    v2[1] = v9 in
    let v26: [[Float]] = v7.p0 in
    v3.p1 = v16 in
    let v36: Float = v17[0] in
    let v57: [[Float]] = v19.p1 in
    var v31: Float = v36 in
    let v53: Float = v31 / v8 in
    v3.p0 = v57 in
    v3.p1 = v26 in
    v53
  } in
  let f15: (s0) -> s0 = (v0: s0) -> s0 {
    let v9: s0 = f44(v0) in
    var v28: s0 = v9 in
    v28
  } in
  let noinline_f0: (s0, Float) -> Float = (v0: s0, v1: Float) -> Float {
    let v3: s0 = f44(v0) in
    var v8: s0 = v3 in
    let v2: s0 = f15(v3) in
    let v4: [s0] = [v0, v2, v8, v0, v8] in
    let v5: s0 = f44(v2) in
    let v9: [[Float]] = v5.p0 in
    var v7: [s0] = v4 in
    v8.p1 = v9 in
    let v6: [[Float]] = v8.p1 in
    v8.p1 = v6 in
    var v17: [[Float]] = v6 in
    let v10: [Float] = v17[0] in
    let v12: [Float] = v9[2] in
    var v31: [[Float]] = v9 in
    let v21: [Float] = [v1, v1, v1, v1] in
    let v39: Float = v12[0] in
    var v19: [Float] = v21 in
    v8.p1 = v6 in
    let v15: [[Float]] = v2.p1 in
    let v28: [Float] = v31[1] in
    let v50: [[Float]] = v5.p1 in
    let v33: s0 = v7[2] in
    let v59: Float = f41(v39, v5) in
    let v20: Float = f41(v59, v33) in
    v8.p1 = v15 in
    let v26: [[Float]] = v33.p1 in
    let v80: Float = v39 * v39 in
    let v23: Float = v12[0] in
    var v55: [Float] = v12 in
    let v51: Float = v80 + v23 in
    v7[2] = v5 in
    v17[2] = v10 in
    var v41: [Float] = v21 in
    let v49: Float = v28[0] in
    let v43: Float = v1 * v1 in
    v8.p1 = v50 in
    v19[3] = v23 in
    var v119: [Float] = v12 in
    let v64: s0 = v7[4] in
    v41[0] = v20 in
    v8.p1 = v26 in
    v41[1] = v51 in
    v55[0] = v59 in
    v41 = v19 in
    v8.p1 = v17 in
    let v92: s0 = v7[2] in
    let v73: Float = v43 + v23 in
    v7[1] = v64 in
    v17[0] = v119 in
    let v156: [[Float]] = [v41, v21, v19, v41, v19, v41] in
    let v105: [Float] = v156[4] in
    let v116: Float = v105[0] in
    let v140: [[Float]] = v92.p0 in
    v55[0] = v49 in
    v19[2] = v73 in
    v17[0] = v55 in
    v8.p0 = v140 in
    v116
  } in
  fun loop(i: Int, v0: s0, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]]) in
    let v1: Float = 6.0 in
    let initialResult: Float = 6.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()