  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
    var p3: [[Float]]
    var p4: [[Float]]
    var p5: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s6 {
    var p0: s1
    var p1: s0
  } in
  let noinline_f0: ([s1], Float) -> Float = (v0: [s1], v1: Float) -> Float {
    var v5: [s1] = v0 in
    let v7: s1 = v0[1] in
    let v8: s1 = v5[1] in
    v5[1] = v7 in
    let v11: [s0] = v8.p1 in
    let v10: s0 = v11[0] in
    let v16: s6 = s6(v7, v10) in
    let v27: s0 = v16.p1 in
    let v102: [[Float]] = v27.p2 in
    let v277: [Float] = v102[1] in
    let v109: Float = v277[0] in
    v109
  } in
  fun loop(i: Int, v0: [s1], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1(s0([[0.0], [1.0]], [[2.0], [3.0]], [[4.0], [5.0], [6.0]], [[7.0], [8.0]], [[9.0]], [[10.0]]), [s0([[11.0], [12.0]], [[13.0], [14.0]], [[15.0], [16.0], [17.0]], [[18.0], [19.0]], [[20.0]], [[21.0]]), s0([[22.0], [23.0]], [[24.0], [25.0]], [[26.0], [27.0], [28.0]], [[29.0], [30.0]], [[31.0]], [[32.0]])]), s1(s0([[33.0], [34.0]], [[35.0], [36.0]], [[37.0], [38.0], [39.0]], [[40.0], [41.0]], [[42.0]], [[43.0]]), [s0([[44.0], [45.0]], [[46.0], [47.0]], [[48.0], [49.0], [50.0]], [[51.0], [52.0]], [[53.0]], [[54.0]]), s0([[55.0], [56.0]], [[57.0], [58.0]], [[59.0], [60.0], [61.0]], [[62.0], [63.0]], [[64.0]], [[65.0]])]), s1(s0([[66.0], [67.0]], [[68.0], [69.0]], [[70.0], [71.0], [72.0]], [[73.0], [74.0]], [[75.0]], [[76.0]]), [s0([[77.0], [78.0]], [[79.0], [80.0]], [[81.0], [82.0], [83.0]], [[84.0], [85.0]], [[86.0]], [[87.0]]), s0([[88.0], [89.0]], [[90.0], [91.0]], [[92.0], [93.0], [94.0]], [[95.0], [96.0]], [[97.0]], [[98.0]])])] in
    let v1: Float = 99.0 in
    let initialResult: Float = 99.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()