  struct s0 {
    var p0: Float
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s4 {
    var p0: s0
    var p1: s1
  } in
  struct s7 {
    var p0: [s4]
    var p1: s1
  } in
  let noinline_f0: (s7, Float) -> Float = (v0: s7, v1: Float) -> Float {
    var v2: Float = v1 in
    var v3: s7 = v0 in
    let v11: s1 = v3.p1 in
    let v21: Float = v1 * v2 in
    let v14: s0 = v11.p0 in
    let v17: [Float] = [v2, v21, v2] in
    let v23: Float = v17[0] in
    let v37: Float = v17[1] in
    let v25: Float = v17[2] in
    let v34: Float = v14.p0 in
    let v60: [[Float]] = v14.p1 in
    let v58: [Float] = v60[0] in
    let v46: Float = v58[0] in
    let v63: Float = v17[2] in
    v2 = v63 in
    let v78: [Float] = [v23, v25, v37, v46, v1, v34, v37] in
    let v87: Float = v78[4] in
    v87
  } in
  fun loop(i: Int, v0: s7, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s7 = s7([s4(s0(0.0, [[1.0]], [[2.0]]), s1(s0(3.0, [[4.0]], [[5.0]]), [s0(6.0, [[7.0]], [[8.0]]), s0(9.0, [[10.0]], [[11.0]])])), s4(s0(12.0, [[13.0]], [[14.0]]), s1(s0(15.0, [[16.0]], [[17.0]]), [s0(18.0, [[19.0]], [[20.0]]), s0(21.0, [[22.0]], [[23.0]])]))], s1(s0(24.0, [[25.0]], [[26.0]]), [s0(27.0, [[28.0]], [[29.0]]), s0(30.0, [[31.0]], [[32.0]])])) in
    let v1: Float = 33.0 in
    let initialResult: Float = 33.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()