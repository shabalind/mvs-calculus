  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s2 {
    var p0: [s1]
    var p1: Float
  } in
  struct s4 {
    var p0: s2
    var p1: [[s2]]
  } in
  struct s6 {
    var p0: s0
    var p1: [s1]
  } in
  struct s9 {
    var p0: [[s0]]
    var p1: [[s2]]
  } in
  struct s11 {
    var p0: [s9]
    var p1: s4
  } in
  struct s12 {
    var p0: [[s0]]
    var p1: s6
  } in
  let f55: (s1) -> s1 = (v0: s1) -> s1 {
    var v6: s1 = v0 in
    var v21: s1 = v0 in
    let v24: [s0] = v21.p0 in
    let v54: [s0] = v6.p1 in
    let v41: [s0] = v0.p1 in
    let v13: [s0] = v21.p1 in
    v6.p0 = v24 in
    v21.p1 = v13 in
    v21.p1 = v54 in
    v21 = v0 in
    let v124: [s0] = v0.p1 in
    v6.p1 = v41 in
    v21.p1 = v124 in
    v21.p1 = v13 in
    v6
  } in
  let f31: (s2) -> s2 = (v0: s2) -> s2 {
    var v3: s2 = v0 in
    v3
  } in
  let f19: (s4) -> s4 = (v0: s4) -> s4 {
    var v1: s4 = v0 in
    let v7: [[s2]] = v1.p1 in
    var v3: [[s2]] = v7 in
    let v6: [s4] = [v1] in
    var v2: [[s2]] = v7 in
    let v5: s4 = v6[0] in
    let v4: s4 = v6[0] in
    v2 = v7 in
    v1.p1 = v3 in
    let v10: s2 = v0.p0 in
    let v8: s2 = f31(v10) in
    var v9: [[s2]] = v3 in
    v3 = v2 in
    let v14: Float = v8.p1 in
    let v21: s2 = f31(v10) in
    let v27: Float = v14 / v14 in
    let v28: [s2] = v7[0] in
    let v13: s2 = f31(v8) in
    var v12: s2 = v13 in
    var v15: s2 = v21 in
    let v17: s2 = f31(v21) in
    let v32: [s2] = v7[0] in
    let v24: [s2] = [v12, v12, v15, v8, v17, v17] in
    let v19: s2 = v32[0] in
    let v25: s2 = f31(v19) in
    v15.p1 = v27 in
    let v41: s2 = v28[0] in
    v1.p1 = v9 in
    let v20: s2 = f31(v25) in
    let v30: s2 = v5.p0 in
    var v37: Float = v27 in
    let v72: [s2] = v7[0] in
    let v48: [[s2]] = v0.p1 in
    let v81: s2 = f31(v10) in
    let v26: s2 = v24[5] in
    let v56: Float = v81.p1 in
    v9[0] = v32 in
    let v78: [s1] = v41.p0 in
    v9[0] = v72 in
    let v61: Float = v21.p1 in
    var v39: [s2] = v24 in
    let v100: s2 = v39[4] in
    let v34: s2 = f31(v26) in
    var v51: s4 = v4 in
    v1.p0 = v41 in
    let v49: Float = v37 * v56 in
    var v64: [s1] = v78 in
    v1.p0 = v30 in
    v1.p1 = v48 in
    let v55: [[s2]] = v4.p1 in
    var v95: [[s2]] = v55 in
    var v42: s2 = v26 in
    let v53: [s1] = v42.p0 in
    v12.p1 = v14 in
    v15.p1 = v49 in
    v37 = v61 in
    var v62: [s2] = v39 in
    v12.p0 = v64 in
    v39 = v62 in
    v62[5] = v34 in
    v2[0] = v28 in
    let v58: s1 = v53[0] in
    let v105: Float = v20.p1 in
    v62 = v24 in
    let v149: s1 = f55(v58) in
    var v122: s4 = v51 in
    v12.p1 = v56 in
    v51.p1 = v95 in
    v64[0] = v149 in
    v12.p1 = v105 in
    v1.p0 = v42 in
    v122.p0 = v26 in
    v51.p0 = v100 in
    v15.p1 = v37 in
    let v229: s2 = f31(v42) in
    v122.p0 = v229 in
    v122
  } in
  let f9: ([[s11]]) -> [[s11]] = (v0: [[s11]]) -> [[s11]] {
    var v1: [[s11]] = v0 in
    let v4: [s11] = v0[0] in
    let v7: s11 = v4[0] in
    var v9: [[s11]] = v0 in
    v9[2] = v4 in
    let v8: [s11] = v9[2] in
    v1[0] = v4 in
    v9[1] = v8 in
    v1[2] = v4 in
    var v20: [s11] = v4 in
    v9[2] = v20 in
    v20[0] = v7 in
    let v19: [s11] = v1[0] in
    v9[2] = v8 in
    v9[0] = v19 in
    let v36: [s11] = v1[1] in
    v9[0] = v36 in
    v1[2] = v4 in
    var v73: [[s11]] = v9 in
    v9[1] = v8 in
    v9[1] = v8 in
    v9[2] = v4 in
    v73
  } in
  let noinline_f0: ([[s11]], [s12], Float) -> Float = (v0: [[s11]], v1: [s12], v2: Float) -> Float {
    var v3: Float = v2 in
    var v6: [[s11]] = v0 in
    let v4: [[s11]] = f9(v6) in
    var v10: Float = v3 in
    let v15: [[s11]] = f9(v0) in
    let v20: [s11] = v4[0] in
    let v18: [[s11]] = f9(v15) in
    v6[2] = v20 in
    let v17: s11 = v20[0] in
    let v62: s4 = v17.p1 in
    var v48: Float = v10 in
    let v89: s4 = f19(v62) in
    v3 = v2 in
    let v74: [s11] = v18[1] in
    let v72: s2 = v89.p0 in
    let v66: s2 = f31(v72) in
    var v120: s2 = v66 in
    v120.p1 = v48 in
    v6[0] = v74 in
    let v139: s2 = f31(v120) in
    let v75: Float = v139.p1 in
    v75
  } in
  fun loop(i: Int, v0: [[s11]], v1: [s12], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s11]] = [[s11([s9([[s0([[0.0], [1.0], [2.0]], [[3.0]])], [s0([[4.0], [5.0], [6.0]], [[7.0]])], [s0([[8.0], [9.0], [10.0]], [[11.0]])]], [[s2([s1([s0([[12.0], [13.0], [14.0]], [[15.0]]), s0([[16.0], [17.0], [18.0]], [[19.0]])], [s0([[20.0], [21.0], [22.0]], [[23.0]])])], 24.0)]]), s9([[s0([[25.0], [26.0], [27.0]], [[28.0]])], [s0([[29.0], [30.0], [31.0]], [[32.0]])], [s0([[33.0], [34.0], [35.0]], [[36.0]])]], [[s2([s1([s0([[37.0], [38.0], [39.0]], [[40.0]]), s0([[41.0], [42.0], [43.0]], [[44.0]])], [s0([[45.0], [46.0], [47.0]], [[48.0]])])], 49.0)]])], s4(s2([s1([s0([[50.0], [51.0], [52.0]], [[53.0]]), s0([[54.0], [55.0], [56.0]], [[57.0]])], [s0([[58.0], [59.0], [60.0]], [[61.0]])])], 62.0), [[s2([s1([s0([[63.0], [64.0], [65.0]], [[66.0]]), s0([[67.0], [68.0], [69.0]], [[70.0]])], [s0([[71.0], [72.0], [73.0]], [[74.0]])])], 75.0)]]))], [s11([s9([[s0([[76.0], [77.0], [78.0]], [[79.0]])], [s0([[80.0], [81.0], [82.0]], [[83.0]])], [s0([[84.0], [85.0], [86.0]], [[87.0]])]], [[s2([s1([s0([[88.0], [89.0], [90.0]], [[91.0]]), s0([[92.0], [93.0], [94.0]], [[95.0]])], [s0([[96.0], [97.0], [98.0]], [[99.0]])])], 100.0)]]), s9([[s0([[101.0], [102.0], [103.0]], [[104.0]])], [s0([[105.0], [106.0], [107.0]], [[108.0]])], [s0([[109.0], [110.0], [111.0]], [[112.0]])]], [[s2([s1([s0([[113.0], [114.0], [115.0]], [[116.0]]), s0([[117.0], [118.0], [119.0]], [[120.0]])], [s0([[121.0], [122.0], [123.0]], [[124.0]])])], 125.0)]])], s4(s2([s1([s0([[126.0], [127.0], [128.0]], [[129.0]]), s0([[130.0], [131.0], [132.0]], [[133.0]])], [s0([[134.0], [135.0], [136.0]], [[137.0]])])], 138.0), [[s2([s1([s0([[139.0], [140.0], [141.0]], [[142.0]]), s0([[143.0], [144.0], [145.0]], [[146.0]])], [s0([[147.0], [148.0], [149.0]], [[150.0]])])], 151.0)]]))], [s11([s9([[s0([[152.0], [153.0], [154.0]], [[155.0]])], [s0([[156.0], [157.0], [158.0]], [[159.0]])], [s0([[160.0], [161.0], [162.0]], [[163.0]])]], [[s2([s1([s0([[164.0], [165.0], [166.0]], [[167.0]]), s0([[168.0], [169.0], [170.0]], [[171.0]])], [s0([[172.0], [173.0], [174.0]], [[175.0]])])], 176.0)]]), s9([[s0([[177.0], [178.0], [179.0]], [[180.0]])], [s0([[181.0], [182.0], [183.0]], [[184.0]])], [s0([[185.0], [186.0], [187.0]], [[188.0]])]], [[s2([s1([s0([[189.0], [190.0], [191.0]], [[192.0]]), s0([[193.0], [194.0], [195.0]], [[196.0]])], [s0([[197.0], [198.0], [199.0]], [[200.0]])])], 201.0)]])], s4(s2([s1([s0([[202.0], [203.0], [204.0]], [[205.0]]), s0([[206.0], [207.0], [208.0]], [[209.0]])], [s0([[210.0], [211.0], [212.0]], [[213.0]])])], 214.0), [[s2([s1([s0([[215.0], [216.0], [217.0]], [[218.0]]), s0([[219.0], [220.0], [221.0]], [[222.0]])], [s0([[223.0], [224.0], [225.0]], [[226.0]])])], 227.0)]]))]] in
    let v1: [s12] = [s12([[s0([[228.0], [229.0], [230.0]], [[231.0]])]], s6(s0([[232.0], [233.0], [234.0]], [[235.0]]), [s1([s0([[236.0], [237.0], [238.0]], [[239.0]]), s0([[240.0], [241.0], [242.0]], [[243.0]])], [s0([[244.0], [245.0], [246.0]], [[247.0]])]), s1([s0([[248.0], [249.0], [250.0]], [[251.0]]), s0([[252.0], [253.0], [254.0]], [[255.0]])], [s0([[256.0], [257.0], [258.0]], [[259.0]])])])), s12([[s0([[260.0], [261.0], [262.0]], [[263.0]])]], s6(s0([[264.0], [265.0], [266.0]], [[267.0]]), [s1([s0([[268.0], [269.0], [270.0]], [[271.0]]), s0([[272.0], [273.0], [274.0]], [[275.0]])], [s0([[276.0], [277.0], [278.0]], [[279.0]])]), s1([s0([[280.0], [281.0], [282.0]], [[283.0]]), s0([[284.0], [285.0], [286.0]], [[287.0]])], [s0([[288.0], [289.0], [290.0]], [[291.0]])])])), s12([[s0([[292.0], [293.0], [294.0]], [[295.0]])]], s6(s0([[296.0], [297.0], [298.0]], [[299.0]]), [s1([s0([[300.0], [301.0], [302.0]], [[303.0]]), s0([[304.0], [305.0], [306.0]], [[307.0]])], [s0([[308.0], [309.0], [310.0]], [[311.0]])]), s1([s0([[312.0], [313.0], [314.0]], [[315.0]]), s0([[316.0], [317.0], [318.0]], [[319.0]])], [s0([[320.0], [321.0], [322.0]], [[323.0]])])]))] in
    let v2: Float = 324.0 in
    let initialResult: Float = 324.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()