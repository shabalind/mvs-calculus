  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
    var p2: [s0]
    var p3: [s0]
    var p4: [[s0]]
    var p5: s0
  }
  struct s2 {
    var p0: Double
    var p1: s0
  }
  struct s3 {
    var p0: [[s2]]
    var p1: s1
  }
  struct s4 {
    var p0: [[s2]]
    var p1: [[s1]]
  }
  struct s6 {
    var p0: s0
    var p1: s2
  }
  struct s8 {
    var p0: [s6]
    var p1: s3
  }
  struct s10 {
    var p0: [s8]
    var p1: s4
  }
  func f33(_ v0: s2) -> s2 {
    let v4: Double = v0.p0
    let v2: Double = v0.p0
    let v1: [Double] = [v2, v4, v2, v2, v4]
    var v19: [Double] = v1
    let v5: s0 = v0.p1
    var v13: Double = v2
    var v8: Double = v4
    var v10: s0 = v5
    let v16: Double = v0.p0
    let v11: Double = v19[0]
    v19[1] = v16
    let v24: s0 = v0.p1
    v19[1] = v8
    let v14: [[Double]] = v24.p1
    let v26: [[Double]] = v5.p1
    var v20: s2 = v0
    v10.p1 = v26
    var v18: s2 = v0
    let v36: Double = v20.p0
    let v37: s6 = s6(p0: v5, p1: v18)
    let v50: s2 = s2(p0: v36, p1: v10)
    let v31: s0 = v50.p1
    let v32: Double = v8 * v11
    let v30: Double = v50.p0
    let v25: [[Double]] = v10.p1
    v18.p0 = v32
    v19[0] = v32
    let v29: s0 = v37.p0
    let v28: [Double] = v25[0]
    let v66: s2 = v37.p1
    let v54: Double = v36 + v30
    v19[0] = v36
    v10.p1 = v14
    v19[0] = v54
    let v40: [[Double]] = v5.p0
    v10.p1 = v25
    let v77: s0 = v66.p1
    let v186: Double = v28[0]
    let v70: [[Double]] = v29.p1
    var v72: s0 = v31
    let v125: s2 = s2(p0: v186, p1: v72)
    v8 = v30
    let v86: [[Double]] = v77.p1
    v72.p1 = v25
    v10.p0 = v40
    v20.p0 = v13
    v72.p1 = v25
    var v74: [[Double]] = v70
    v72.p1 = v86
    v10.p1 = v74
    v10.p1 = v86
    return v125
  }
  func f23(_ v0: Double, _ v1: [[Double]], _ v2: Double, _ v3: s3) -> Double {
    var v8: [[Double]] = v1
    var v6: [[Double]] = v8
    v6 = v1
    let v9: [Double] = v6[0]
    let v18: Double = v9[0]
    v6[0] = v9
    let v10: [Double] = v1[0]
    let v25: Double = v9[0]
    let v46: Double = v18 / v25
    v8[0] = v10
    let v31: Double = v46 * v25
    let v42: Double = v31 - v0
    return v42
  }
  @inline(never)
  func f0(_ v0: [s8], _ v1: [s3], _ v2: [[s3]], _ v3: s10, _ v4: Double) -> Double {
    var v5: Double = v4
    let v7: s4 = v3.p1
    var v9: s4 = v7
    let v14: [[s2]] = v9.p0
    let v16: s4 = v3.p1
    v9.p0 = v14
    v9.p0 = v14
    let v21: [[s1]] = v16.p1
    v5 = v4
    v9 = v16
    let v50: [s2] = v14[2]
    let v59: s2 = v50[0]
    let v23: s0 = v59.p1
    v9 = v7
    let v118: s2 = f33(v59)
    let v74: [s3] = v2[0]
    v9.p0 = v14
    v9.p0 = v14
    let v173: s3 = v74[0]
    let v142: [[Double]] = v23.p0
    let v167: Double = v118.p0
    let v168: Double = f23(v5, v142, v167, v173)
    v9.p1 = v21
    let v123: Double = v168 + v5
    var v253: Double = v123
    return v253
  }
  func benchmark() {
    let v0: [s8] = [s8(p0: [s6(p0: s0(p0: [[0.0]], p1: [[1.0], [2.0], [3.0]]), p1: s2(p0: 4.0, p1: s0(p0: [[5.0]], p1: [[6.0], [7.0], [8.0]])))], p1: s3(p0: [[s2(p0: 9.0, p1: s0(p0: [[10.0]], p1: [[11.0], [12.0], [13.0]]))], [s2(p0: 14.0, p1: s0(p0: [[15.0]], p1: [[16.0], [17.0], [18.0]]))], [s2(p0: 19.0, p1: s0(p0: [[20.0]], p1: [[21.0], [22.0], [23.0]]))]], p1: s1(p0: s0(p0: [[24.0]], p1: [[25.0], [26.0], [27.0]]), p1: s0(p0: [[28.0]], p1: [[29.0], [30.0], [31.0]]), p2: [s0(p0: [[32.0]], p1: [[33.0], [34.0], [35.0]]), s0(p0: [[36.0]], p1: [[37.0], [38.0], [39.0]]), s0(p0: [[40.0]], p1: [[41.0], [42.0], [43.0]])], p3: [s0(p0: [[44.0]], p1: [[45.0], [46.0], [47.0]])], p4: [[s0(p0: [[48.0]], p1: [[49.0], [50.0], [51.0]])], [s0(p0: [[52.0]], p1: [[53.0], [54.0], [55.0]])], [s0(p0: [[56.0]], p1: [[57.0], [58.0], [59.0]])]], p5: s0(p0: [[60.0]], p1: [[61.0], [62.0], [63.0]])))), s8(p0: [s6(p0: s0(p0: [[64.0]], p1: [[65.0], [66.0], [67.0]]), p1: s2(p0: 68.0, p1: s0(p0: [[69.0]], p1: [[70.0], [71.0], [72.0]])))], p1: s3(p0: [[s2(p0: 73.0, p1: s0(p0: [[74.0]], p1: [[75.0], [76.0], [77.0]]))], [s2(p0: 78.0, p1: s0(p0: [[79.0]], p1: [[80.0], [81.0], [82.0]]))], [s2(p0: 83.0, p1: s0(p0: [[84.0]], p1: [[85.0], [86.0], [87.0]]))]], p1: s1(p0: s0(p0: [[88.0]], p1: [[89.0], [90.0], [91.0]]), p1: s0(p0: [[92.0]], p1: [[93.0], [94.0], [95.0]]), p2: [s0(p0: [[96.0]], p1: [[97.0], [98.0], [99.0]]), s0(p0: [[100.0]], p1: [[101.0], [102.0], [103.0]]), s0(p0: [[104.0]], p1: [[105.0], [106.0], [107.0]])], p3: [s0(p0: [[108.0]], p1: [[109.0], [110.0], [111.0]])], p4: [[s0(p0: [[112.0]], p1: [[113.0], [114.0], [115.0]])], [s0(p0: [[116.0]], p1: [[117.0], [118.0], [119.0]])], [s0(p0: [[120.0]], p1: [[121.0], [122.0], [123.0]])]], p5: s0(p0: [[124.0]], p1: [[125.0], [126.0], [127.0]])))), s8(p0: [s6(p0: s0(p0: [[128.0]], p1: [[129.0], [130.0], [131.0]]), p1: s2(p0: 132.0, p1: s0(p0: [[133.0]], p1: [[134.0], [135.0], [136.0]])))], p1: s3(p0: [[s2(p0: 137.0, p1: s0(p0: [[138.0]], p1: [[139.0], [140.0], [141.0]]))], [s2(p0: 142.0, p1: s0(p0: [[143.0]], p1: [[144.0], [145.0], [146.0]]))], [s2(p0: 147.0, p1: s0(p0: [[148.0]], p1: [[149.0], [150.0], [151.0]]))]], p1: s1(p0: s0(p0: [[152.0]], p1: [[153.0], [154.0], [155.0]]), p1: s0(p0: [[156.0]], p1: [[157.0], [158.0], [159.0]]), p2: [s0(p0: [[160.0]], p1: [[161.0], [162.0], [163.0]]), s0(p0: [[164.0]], p1: [[165.0], [166.0], [167.0]]), s0(p0: [[168.0]], p1: [[169.0], [170.0], [171.0]])], p3: [s0(p0: [[172.0]], p1: [[173.0], [174.0], [175.0]])], p4: [[s0(p0: [[176.0]], p1: [[177.0], [178.0], [179.0]])], [s0(p0: [[180.0]], p1: [[181.0], [182.0], [183.0]])], [s0(p0: [[184.0]], p1: [[185.0], [186.0], [187.0]])]], p5: s0(p0: [[188.0]], p1: [[189.0], [190.0], [191.0]]))))]
    let v1: [s3] = [s3(p0: [[s2(p0: 192.0, p1: s0(p0: [[193.0]], p1: [[194.0], [195.0], [196.0]]))], [s2(p0: 197.0, p1: s0(p0: [[198.0]], p1: [[199.0], [200.0], [201.0]]))], [s2(p0: 202.0, p1: s0(p0: [[203.0]], p1: [[204.0], [205.0], [206.0]]))]], p1: s1(p0: s0(p0: [[207.0]], p1: [[208.0], [209.0], [210.0]]), p1: s0(p0: [[211.0]], p1: [[212.0], [213.0], [214.0]]), p2: [s0(p0: [[215.0]], p1: [[216.0], [217.0], [218.0]]), s0(p0: [[219.0]], p1: [[220.0], [221.0], [222.0]]), s0(p0: [[223.0]], p1: [[224.0], [225.0], [226.0]])], p3: [s0(p0: [[227.0]], p1: [[228.0], [229.0], [230.0]])], p4: [[s0(p0: [[231.0]], p1: [[232.0], [233.0], [234.0]])], [s0(p0: [[235.0]], p1: [[236.0], [237.0], [238.0]])], [s0(p0: [[239.0]], p1: [[240.0], [241.0], [242.0]])]], p5: s0(p0: [[243.0]], p1: [[244.0], [245.0], [246.0]]))), s3(p0: [[s2(p0: 247.0, p1: s0(p0: [[248.0]], p1: [[249.0], [250.0], [251.0]]))], [s2(p0: 252.0, p1: s0(p0: [[253.0]], p1: [[254.0], [255.0], [256.0]]))], [s2(p0: 257.0, p1: s0(p0: [[258.0]], p1: [[259.0], [260.0], [261.0]]))]], p1: s1(p0: s0(p0: [[262.0]], p1: [[263.0], [264.0], [265.0]]), p1: s0(p0: [[266.0]], p1: [[267.0], [268.0], [269.0]]), p2: [s0(p0: [[270.0]], p1: [[271.0], [272.0], [273.0]]), s0(p0: [[274.0]], p1: [[275.0], [276.0], [277.0]]), s0(p0: [[278.0]], p1: [[279.0], [280.0], [281.0]])], p3: [s0(p0: [[282.0]], p1: [[283.0], [284.0], [285.0]])], p4: [[s0(p0: [[286.0]], p1: [[287.0], [288.0], [289.0]])], [s0(p0: [[290.0]], p1: [[291.0], [292.0], [293.0]])], [s0(p0: [[294.0]], p1: [[295.0], [296.0], [297.0]])]], p5: s0(p0: [[298.0]], p1: [[299.0], [300.0], [301.0]]))), s3(p0: [[s2(p0: 302.0, p1: s0(p0: [[303.0]], p1: [[304.0], [305.0], [306.0]]))], [s2(p0: 307.0, p1: s0(p0: [[308.0]], p1: [[309.0], [310.0], [311.0]]))], [s2(p0: 312.0, p1: s0(p0: [[313.0]], p1: [[314.0], [315.0], [316.0]]))]], p1: s1(p0: s0(p0: [[317.0]], p1: [[318.0], [319.0], [320.0]]), p1: s0(p0: [[321.0]], p1: [[322.0], [323.0], [324.0]]), p2: [s0(p0: [[325.0]], p1: [[326.0], [327.0], [328.0]]), s0(p0: [[329.0]], p1: [[330.0], [331.0], [332.0]]), s0(p0: [[333.0]], p1: [[334.0], [335.0], [336.0]])], p3: [s0(p0: [[337.0]], p1: [[338.0], [339.0], [340.0]])], p4: [[s0(p0: [[341.0]], p1: [[342.0], [343.0], [344.0]])], [s0(p0: [[345.0]], p1: [[346.0], [347.0], [348.0]])], [s0(p0: [[349.0]], p1: [[350.0], [351.0], [352.0]])]], p5: s0(p0: [[353.0]], p1: [[354.0], [355.0], [356.0]])))]
    let v2: [[s3]] = [[s3(p0: [[s2(p0: 357.0, p1: s0(p0: [[358.0]], p1: [[359.0], [360.0], [361.0]]))], [s2(p0: 362.0, p1: s0(p0: [[363.0]], p1: [[364.0], [365.0], [366.0]]))], [s2(p0: 367.0, p1: s0(p0: [[368.0]], p1: [[369.0], [370.0], [371.0]]))]], p1: s1(p0: s0(p0: [[372.0]], p1: [[373.0], [374.0], [375.0]]), p1: s0(p0: [[376.0]], p1: [[377.0], [378.0], [379.0]]), p2: [s0(p0: [[380.0]], p1: [[381.0], [382.0], [383.0]]), s0(p0: [[384.0]], p1: [[385.0], [386.0], [387.0]]), s0(p0: [[388.0]], p1: [[389.0], [390.0], [391.0]])], p3: [s0(p0: [[392.0]], p1: [[393.0], [394.0], [395.0]])], p4: [[s0(p0: [[396.0]], p1: [[397.0], [398.0], [399.0]])], [s0(p0: [[400.0]], p1: [[401.0], [402.0], [403.0]])], [s0(p0: [[404.0]], p1: [[405.0], [406.0], [407.0]])]], p5: s0(p0: [[408.0]], p1: [[409.0], [410.0], [411.0]])))], [s3(p0: [[s2(p0: 412.0, p1: s0(p0: [[413.0]], p1: [[414.0], [415.0], [416.0]]))], [s2(p0: 417.0, p1: s0(p0: [[418.0]], p1: [[419.0], [420.0], [421.0]]))], [s2(p0: 422.0, p1: s0(p0: [[423.0]], p1: [[424.0], [425.0], [426.0]]))]], p1: s1(p0: s0(p0: [[427.0]], p1: [[428.0], [429.0], [430.0]]), p1: s0(p0: [[431.0]], p1: [[432.0], [433.0], [434.0]]), p2: [s0(p0: [[435.0]], p1: [[436.0], [437.0], [438.0]]), s0(p0: [[439.0]], p1: [[440.0], [441.0], [442.0]]), s0(p0: [[443.0]], p1: [[444.0], [445.0], [446.0]])], p3: [s0(p0: [[447.0]], p1: [[448.0], [449.0], [450.0]])], p4: [[s0(p0: [[451.0]], p1: [[452.0], [453.0], [454.0]])], [s0(p0: [[455.0]], p1: [[456.0], [457.0], [458.0]])], [s0(p0: [[459.0]], p1: [[460.0], [461.0], [462.0]])]], p5: s0(p0: [[463.0]], p1: [[464.0], [465.0], [466.0]])))], [s3(p0: [[s2(p0: 467.0, p1: s0(p0: [[468.0]], p1: [[469.0], [470.0], [471.0]]))], [s2(p0: 472.0, p1: s0(p0: [[473.0]], p1: [[474.0], [475.0], [476.0]]))], [s2(p0: 477.0, p1: s0(p0: [[478.0]], p1: [[479.0], [480.0], [481.0]]))]], p1: s1(p0: s0(p0: [[482.0]], p1: [[483.0], [484.0], [485.0]]), p1: s0(p0: [[486.0]], p1: [[487.0], [488.0], [489.0]]), p2: [s0(p0: [[490.0]], p1: [[491.0], [492.0], [493.0]]), s0(p0: [[494.0]], p1: [[495.0], [496.0], [497.0]]), s0(p0: [[498.0]], p1: [[499.0], [500.0], [501.0]])], p3: [s0(p0: [[502.0]], p1: [[503.0], [504.0], [505.0]])], p4: [[s0(p0: [[506.0]], p1: [[507.0], [508.0], [509.0]])], [s0(p0: [[510.0]], p1: [[511.0], [512.0], [513.0]])], [s0(p0: [[514.0]], p1: [[515.0], [516.0], [517.0]])]], p5: s0(p0: [[518.0]], p1: [[519.0], [520.0], [521.0]])))]]
    let v3: s10 = s10(p0: [s8(p0: [s6(p0: s0(p0: [[522.0]], p1: [[523.0], [524.0], [525.0]]), p1: s2(p0: 526.0, p1: s0(p0: [[527.0]], p1: [[528.0], [529.0], [530.0]])))], p1: s3(p0: [[s2(p0: 531.0, p1: s0(p0: [[532.0]], p1: [[533.0], [534.0], [535.0]]))], [s2(p0: 536.0, p1: s0(p0: [[537.0]], p1: [[538.0], [539.0], [540.0]]))], [s2(p0: 541.0, p1: s0(p0: [[542.0]], p1: [[543.0], [544.0], [545.0]]))]], p1: s1(p0: s0(p0: [[546.0]], p1: [[547.0], [548.0], [549.0]]), p1: s0(p0: [[550.0]], p1: [[551.0], [552.0], [553.0]]), p2: [s0(p0: [[554.0]], p1: [[555.0], [556.0], [557.0]]), s0(p0: [[558.0]], p1: [[559.0], [560.0], [561.0]]), s0(p0: [[562.0]], p1: [[563.0], [564.0], [565.0]])], p3: [s0(p0: [[566.0]], p1: [[567.0], [568.0], [569.0]])], p4: [[s0(p0: [[570.0]], p1: [[571.0], [572.0], [573.0]])], [s0(p0: [[574.0]], p1: [[575.0], [576.0], [577.0]])], [s0(p0: [[578.0]], p1: [[579.0], [580.0], [581.0]])]], p5: s0(p0: [[582.0]], p1: [[583.0], [584.0], [585.0]]))))], p1: s4(p0: [[s2(p0: 586.0, p1: s0(p0: [[587.0]], p1: [[588.0], [589.0], [590.0]]))], [s2(p0: 591.0, p1: s0(p0: [[592.0]], p1: [[593.0], [594.0], [595.0]]))], [s2(p0: 596.0, p1: s0(p0: [[597.0]], p1: [[598.0], [599.0], [600.0]]))]], p1: [[s1(p0: s0(p0: [[601.0]], p1: [[602.0], [603.0], [604.0]]), p1: s0(p0: [[605.0]], p1: [[606.0], [607.0], [608.0]]), p2: [s0(p0: [[609.0]], p1: [[610.0], [611.0], [612.0]]), s0(p0: [[613.0]], p1: [[614.0], [615.0], [616.0]]), s0(p0: [[617.0]], p1: [[618.0], [619.0], [620.0]])], p3: [s0(p0: [[621.0]], p1: [[622.0], [623.0], [624.0]])], p4: [[s0(p0: [[625.0]], p1: [[626.0], [627.0], [628.0]])], [s0(p0: [[629.0]], p1: [[630.0], [631.0], [632.0]])], [s0(p0: [[633.0]], p1: [[634.0], [635.0], [636.0]])]], p5: s0(p0: [[637.0]], p1: [[638.0], [639.0], [640.0]]))], [s1(p0: s0(p0: [[641.0]], p1: [[642.0], [643.0], [644.0]]), p1: s0(p0: [[645.0]], p1: [[646.0], [647.0], [648.0]]), p2: [s0(p0: [[649.0]], p1: [[650.0], [651.0], [652.0]]), s0(p0: [[653.0]], p1: [[654.0], [655.0], [656.0]]), s0(p0: [[657.0]], p1: [[658.0], [659.0], [660.0]])], p3: [s0(p0: [[661.0]], p1: [[662.0], [663.0], [664.0]])], p4: [[s0(p0: [[665.0]], p1: [[666.0], [667.0], [668.0]])], [s0(p0: [[669.0]], p1: [[670.0], [671.0], [672.0]])], [s0(p0: [[673.0]], p1: [[674.0], [675.0], [676.0]])]], p5: s0(p0: [[677.0]], p1: [[678.0], [679.0], [680.0]]))]]))
    let v4: Double = 681.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 681.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
