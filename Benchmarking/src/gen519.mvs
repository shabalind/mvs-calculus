  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s3 {
    var p0: s1
    var p1: s1
  } in
  let f9: (s3) -> s3 = (v0: s3) -> s3 {
    let v7: s1 = v0.p1 in
    var v3: s3 = v0 in
    let v1: [s0] = v7.p0 in
    var v10: s3 = v3 in
    var v24: [s0] = v1 in
    var v12: s1 = v7 in
    v10.p0 = v7 in
    let v16: s1 = v10.p0 in
    let v22: s0 = v24[1] in
    v10.p1 = v16 in
    v24[1] = v22 in
    v10.p0 = v12 in
    v12.p0 = v24 in
    v10 = v3 in
    v10
  } in
  let f4: (s0, s3) -> s0 = (v0: s0, v1: s3) -> s0 {
    let v2: s3 = f9(v1) in
    var v3: s3 = v2 in
    let v6: [[Float]] = v0.p0 in
    let v8: [[[Float]]] = [v6] in
    let v7: [[Float]] = v0.p1 in
    let v15: s3 = f9(v2) in
    let v10: s1 = v3.p0 in
    let v12: s3 = f9(v15) in
    let v9: s0 = v10.p1 in
    let v25: [[Float]] = v9.p1 in
    let v19: s1 = v1.p0 in
    let v27: [[Float]] = v8[0] in
    let v30: s1 = v12.p1 in
    v3.p0 = v19 in
    var v42: [[Float]] = v25 in
    v3.p1 = v10 in
    let v22: [s0] = [v9, v9, v0, v0] in
    var v58: [s0] = v22 in
    let v70: s0 = v10.p1 in
    v3.p0 = v30 in
    v3.p0 = v10 in
    var v59: s1 = v30 in
    let v81: s0 = s0(v27, v42) in
    let v29: [s0] = v10.p0 in
    v3.p0 = v59 in
    var v44: [s0] = v29 in
    v59.p1 = v70 in
    v59.p0 = v29 in
    v59.p0 = v44 in
    v3.p1 = v10 in
    v42 = v7 in
    let v83: s0 = v58[3] in
    v58[2] = v81 in
    v44[2] = v9 in
    v59.p1 = v0 in
    v83
  } in
  let noinline_f0: ([[s1]], Float) -> Float = (v0: [[s1]], v1: Float) -> Float {
    var v7: Float = v1 in
    let v6: [s1] = v0[0] in
    let v4: s1 = v6[0] in
    var v15: Float = v1 in
    let v11: s0 = v4.p1 in
    let v29: s3 = s3(v4, v4) in
    let v14: s0 = f4(v11, v29) in
    let v16: [[Float]] = v14.p0 in
    let v17: Float = v7 - v15 in
    let v26: [Float] = v16[0] in
    let v25: Float = v26[0] in
    let v48: Float = v17 * v25 in
    v48
  } in
  fun loop(i: Int, v0: [[s1]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s1]] = [[s1([s0([[0.0]], [[1.0]]), s0([[2.0]], [[3.0]]), s0([[4.0]], [[5.0]])], s0([[6.0]], [[7.0]]))], [s1([s0([[8.0]], [[9.0]]), s0([[10.0]], [[11.0]]), s0([[12.0]], [[13.0]])], s0([[14.0]], [[15.0]]))], [s1([s0([[16.0]], [[17.0]]), s0([[18.0]], [[19.0]]), s0([[20.0]], [[21.0]])], s0([[22.0]], [[23.0]]))]] in
    let v1: Float = 24.0 in
    let initialResult: Float = 24.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()