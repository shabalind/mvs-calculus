  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
    var p3: [[Float]]
  } in
  let noinline_f0: (s0, [[s0]], Float) -> Float = (v0: s0, v1: [[s0]], v2: Float) -> Float {
    var v4: s0 = v0 in
    let v6: [s0] = v1[0] in
    let v7: s0 = v6[0] in
    let v8: [[Float]] = v4.p3 in
    let v5: [[Float]] = v7.p2 in
    v4.p3 = v8 in
    let v9: [[Float]] = v4.p1 in
    v4.p3 = v8 in
    let v12: [[Float]] = v0.p2 in
    v4.p2 = v12 in
    v4.p2 = v5 in
    let v29: [[Float]] = v4.p2 in
    v4.p3 = v9 in
    let v64: [Float] = v29[0] in
    let v58: Float = v64[0] in
    v58
  } in
  fun loop(i: Int, v0: s0, v1: [[s0]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]], [[5.0]], [[6.0], [7.0], [8.0]]) in
    let v1: [[s0]] = [[s0([[9.0], [10.0]], [[11.0], [12.0], [13.0]], [[14.0]], [[15.0], [16.0], [17.0]])]] in
    let v2: Float = 18.0 in
    let initialResult: Float = 18.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()