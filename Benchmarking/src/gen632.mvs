  let noinline_f0: ([Float], Float) -> Float = (v0: [Float], v1: Float) -> Float {
    let v3: Float = v1 * v1 in
    var v7: [Float] = v0 in
    let v6: Float = v7[0] in
    v7[1] = v3 in
    let v10: Float = v7[1] in
    let v16: Float = v0[0] in
    v7[0] = v16 in
    let v18: Float = v0[0] in
    let v14: Float = v0[0] in
    var v29: [Float] = v0 in
    v29[0] = v6 in
    let v30: Float = v29[1] in
    v7[1] = v14 in
    v29[0] = v10 in
    let v22: Float = v7[1] in
    var v165: [Float] = v29 in
    let v56: [[Float]] = [v165, v165] in
    var v87: Float = v18 in
    v7[1] = v87 in
    v165[0] = v87 in
    let v82: [Float] = v56[1] in
    let v95: Float = v82[0] in
    v7[1] = v22 in
    v165[1] = v30 in
    v95
  } in
  fun loop(i: Int, v0: [Float], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [Float] = [0.0, 1.0] in
    let v1: Float = 2.0 in
    let initialResult: Float = 2.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()