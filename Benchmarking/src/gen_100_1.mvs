  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s1
    var p1: [s1]
  } in
  struct s3 {
    var p0: s2
    var p1: Float
  } in
  let noinline_f0: ([[s3]], Float) -> Float = (v0: [[s3]], v1: Float) -> Float {
    let v5: [s3] = v0[0] in
    let v4: s3 = v5[0] in
    let v3: [s3] = v0[0] in
    var v6: s3 = v4 in
    let v8: s3 = v3[0] in
    let v7: s3 = v3[0] in
    let v10: s2 = v8.p0 in
    v6.p1 = v1 in
    v6.p0 = v10 in
    v6 = v7 in
    let v23: s3 = v3[0] in
    let v17: Float = v1 * v1 in
    v6 = v23 in
    var v32: s3 = v6 in
    v6.p0 = v10 in
    var v30: Float = v1 in
    v32.p0 = v10 in
    v6.p0 = v10 in
    v6.p1 = v1 in
    v30 = v17 in
    let v41: Float = v32.p1 in
    let v87: Float = v30 * v41 in
    v87
  } in
  fun loop(i: Int, v0: [[s3]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s3]] = [[s3(s2(s1(s0([[0.0], [1.0]], [[2.0]]), s0([[3.0], [4.0]], [[5.0]])), [s1(s0([[6.0], [7.0]], [[8.0]]), s0([[9.0], [10.0]], [[11.0]])), s1(s0([[12.0], [13.0]], [[14.0]]), s0([[15.0], [16.0]], [[17.0]]))]), 18.0)]] in
    let v1: Float = 19.0 in
    let initialResult: Float = 19.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()