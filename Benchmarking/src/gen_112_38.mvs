  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  let f47: (Float) -> Float = (v0: Float) -> Float {
    let v5: Float = v0 + v0 in
    var v2: Float = v0 in
    var v7: Float = v2 in
    v2 = v0 in
    let v6: Float = v7 * v5 in
    var v8: Float = v2 in
    var v1: Float = v5 in
    var v9: Float = v6 in
    var v12: Float = v5 in
    var v4: Float = v1 in
    let v20: Float = v9 / v1 in
    var v13: Float = v1 in
    var v10: Float = v12 in
    var v11: Float = v13 in
    var v30: Float = v11 in
    let v15: [Float] = [v4, v8, v10, v6] in
    var v23: [Float] = v15 in
    var v27: [Float] = v23 in
    v27[1] = v0 in
    var v115: [Float] = v27 in
    v27[1] = v8 in
    v23[3] = v20 in
    v115[3] = v20 in
    v27[2] = v30 in
    let v28: Float = v115[1] in
    v23[1] = v30 in
    v115[3] = v28 in
    v28
  } in
  let noinline_f0: ([s1], Float) -> Float = (v0: [s1], v1: Float) -> Float {
    var v7: Float = v1 in
    let v4: Float = f47(v1) in
    var v17: Float = v4 in
    var v16: Float = v17 in
    var v27: Float = v4 in
    let v43: Float = f47(v7) in
    let v56: Float = v43 * v16 in
    var v102: Float = v56 in
    let v120: Float = v102 / v102 in
    v7 = v27 in
    v7 = v27 in
    v120
  } in
  fun loop(i: Int, v0: [s1], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1(s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]], [[5.0], [6.0], [7.0]]), [s0([[8.0], [9.0]], [[10.0], [11.0], [12.0]], [[13.0], [14.0], [15.0]]), s0([[16.0], [17.0]], [[18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0]]), s0([[24.0], [25.0]], [[26.0], [27.0], [28.0]], [[29.0], [30.0], [31.0]])]), s1(s0([[32.0], [33.0]], [[34.0], [35.0], [36.0]], [[37.0], [38.0], [39.0]]), [s0([[40.0], [41.0]], [[42.0], [43.0], [44.0]], [[45.0], [46.0], [47.0]]), s0([[48.0], [49.0]], [[50.0], [51.0], [52.0]], [[53.0], [54.0], [55.0]]), s0([[56.0], [57.0]], [[58.0], [59.0], [60.0]], [[61.0], [62.0], [63.0]])]), s1(s0([[64.0], [65.0]], [[66.0], [67.0], [68.0]], [[69.0], [70.0], [71.0]]), [s0([[72.0], [73.0]], [[74.0], [75.0], [76.0]], [[77.0], [78.0], [79.0]]), s0([[80.0], [81.0]], [[82.0], [83.0], [84.0]], [[85.0], [86.0], [87.0]]), s0([[88.0], [89.0]], [[90.0], [91.0], [92.0]], [[93.0], [94.0], [95.0]])])] in
    let v1: Float = 96.0 in
    let initialResult: Float = 96.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()