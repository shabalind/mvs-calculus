  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [Double]
    var p3: [[Double]]
    var p4: [[Double]]
    var p5: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
  }
  struct s2 {
    var p0: s1
  }
  struct s3 {
    var p0: [s1]
    var p1: [s2]
    var p2: s2
  }
  func f15(_ v0: Double) -> Double {
    let v6: [Double] = [v0, v0, v0, v0, v0, v0, v0]
    var v8: [Double] = v6
    var v7: [Double] = v6
    v8[1] = v0
    let v5: Double = v7[0]
    v8[6] = v0
    let v9: Double = v8[3]
    var v4: [Double] = v8
    var v12: Double = v5
    let v2: Double = v7[1]
    let v10: Double = v4[5]
    v4[4] = v2
    let v11: Double = v8[0]
    let v15: Double = v6[3]
    var v38: [Double] = v7
    let v17: Double = v7[6]
    let v14: Double = v4[1]
    var v29: [Double] = v38
    let v31: Double = v7[1]
    v29[2] = v12
    v7[5] = v11
    v7[6] = v10
    let v13: Double = v8[5]
    var v16: Double = v2
    var v24: Double = v10
    let v43: [Double] = [v31, v24, v17]
    var v33: [Double] = v43
    let v39: Double = v29[2]
    let v42: Double = v4[4]
    var v27: [Double] = v33
    let v34: Double = v27[0]
    var v48: Double = v34
    v27 = v33
    var v37: Double = v34
    var v90: [Double] = v43
    let v35: [Double] = [v14, v48, v16, v2]
    v8[1] = v39
    v7[1] = v24
    var v61: [Double] = v35
    let v32: Double = v33[0]
    let v63: Double = v90[0]
    var v74: [Double] = v61
    v8[1] = v16
    v29[5] = v42
    let v75: Double = v61[2]
    v74[3] = v63
    var v82: [Double] = v74
    var v76: [Double] = v33
    v38[4] = v75
    v74[0] = v32
    v33[2] = v13
    v33[0] = v15
    v82[3] = v37
    var v128: [Double] = v82
    var v237: [Double] = v128
    let v351: Double = v76[2]
    var v204: Double = v63
    v237[2] = v351
    let v102: Double = v237[0]
    v76[1] = v204
    v33[0] = v9
    return v102
  }
  @inline(never)
  func f0(_ v0: [s3], _ v1: s3, _ v2: Double) -> Double {
    let v4: [s1] = v1.p0
    let v10: s1 = v4[0]
    let v6: Double = v2 / v2
    let v3: [[s0]] = v10.p1
    let v11: Double = f15(v6)
    let v27: [s0] = v3[0]
    var v36: Double = v2
    let v44: s0 = v27[0]
    let v108: [Double] = v44.p2
    let v125: Double = v11 * v36
    var v85: [Double] = v108
    let v96: Double = v85[0]
    v85[0] = v125
    let v426: Double = v36 * v96
    return v426
  }
  func benchmark() {
    let v0: [s3] = [s3(p0: [s1(p0: [s0(p0: [[0.0], [1.0]], p1: [[2.0]], p2: [3.0, 4.0], p3: [[5.0], [6.0], [7.0]], p4: [[8.0], [9.0]], p5: [[10.0], [11.0], [12.0]])], p1: [[s0(p0: [[13.0], [14.0]], p1: [[15.0]], p2: [16.0, 17.0], p3: [[18.0], [19.0], [20.0]], p4: [[21.0], [22.0]], p5: [[23.0], [24.0], [25.0]])]]), s1(p0: [s0(p0: [[26.0], [27.0]], p1: [[28.0]], p2: [29.0, 30.0], p3: [[31.0], [32.0], [33.0]], p4: [[34.0], [35.0]], p5: [[36.0], [37.0], [38.0]])], p1: [[s0(p0: [[39.0], [40.0]], p1: [[41.0]], p2: [42.0, 43.0], p3: [[44.0], [45.0], [46.0]], p4: [[47.0], [48.0]], p5: [[49.0], [50.0], [51.0]])]])], p1: [s2(p0: s1(p0: [s0(p0: [[52.0], [53.0]], p1: [[54.0]], p2: [55.0, 56.0], p3: [[57.0], [58.0], [59.0]], p4: [[60.0], [61.0]], p5: [[62.0], [63.0], [64.0]])], p1: [[s0(p0: [[65.0], [66.0]], p1: [[67.0]], p2: [68.0, 69.0], p3: [[70.0], [71.0], [72.0]], p4: [[73.0], [74.0]], p5: [[75.0], [76.0], [77.0]])]])), s2(p0: s1(p0: [s0(p0: [[78.0], [79.0]], p1: [[80.0]], p2: [81.0, 82.0], p3: [[83.0], [84.0], [85.0]], p4: [[86.0], [87.0]], p5: [[88.0], [89.0], [90.0]])], p1: [[s0(p0: [[91.0], [92.0]], p1: [[93.0]], p2: [94.0, 95.0], p3: [[96.0], [97.0], [98.0]], p4: [[99.0], [100.0]], p5: [[101.0], [102.0], [103.0]])]])), s2(p0: s1(p0: [s0(p0: [[104.0], [105.0]], p1: [[106.0]], p2: [107.0, 108.0], p3: [[109.0], [110.0], [111.0]], p4: [[112.0], [113.0]], p5: [[114.0], [115.0], [116.0]])], p1: [[s0(p0: [[117.0], [118.0]], p1: [[119.0]], p2: [120.0, 121.0], p3: [[122.0], [123.0], [124.0]], p4: [[125.0], [126.0]], p5: [[127.0], [128.0], [129.0]])]]))], p2: s2(p0: s1(p0: [s0(p0: [[130.0], [131.0]], p1: [[132.0]], p2: [133.0, 134.0], p3: [[135.0], [136.0], [137.0]], p4: [[138.0], [139.0]], p5: [[140.0], [141.0], [142.0]])], p1: [[s0(p0: [[143.0], [144.0]], p1: [[145.0]], p2: [146.0, 147.0], p3: [[148.0], [149.0], [150.0]], p4: [[151.0], [152.0]], p5: [[153.0], [154.0], [155.0]])]]))), s3(p0: [s1(p0: [s0(p0: [[156.0], [157.0]], p1: [[158.0]], p2: [159.0, 160.0], p3: [[161.0], [162.0], [163.0]], p4: [[164.0], [165.0]], p5: [[166.0], [167.0], [168.0]])], p1: [[s0(p0: [[169.0], [170.0]], p1: [[171.0]], p2: [172.0, 173.0], p3: [[174.0], [175.0], [176.0]], p4: [[177.0], [178.0]], p5: [[179.0], [180.0], [181.0]])]]), s1(p0: [s0(p0: [[182.0], [183.0]], p1: [[184.0]], p2: [185.0, 186.0], p3: [[187.0], [188.0], [189.0]], p4: [[190.0], [191.0]], p5: [[192.0], [193.0], [194.0]])], p1: [[s0(p0: [[195.0], [196.0]], p1: [[197.0]], p2: [198.0, 199.0], p3: [[200.0], [201.0], [202.0]], p4: [[203.0], [204.0]], p5: [[205.0], [206.0], [207.0]])]])], p1: [s2(p0: s1(p0: [s0(p0: [[208.0], [209.0]], p1: [[210.0]], p2: [211.0, 212.0], p3: [[213.0], [214.0], [215.0]], p4: [[216.0], [217.0]], p5: [[218.0], [219.0], [220.0]])], p1: [[s0(p0: [[221.0], [222.0]], p1: [[223.0]], p2: [224.0, 225.0], p3: [[226.0], [227.0], [228.0]], p4: [[229.0], [230.0]], p5: [[231.0], [232.0], [233.0]])]])), s2(p0: s1(p0: [s0(p0: [[234.0], [235.0]], p1: [[236.0]], p2: [237.0, 238.0], p3: [[239.0], [240.0], [241.0]], p4: [[242.0], [243.0]], p5: [[244.0], [245.0], [246.0]])], p1: [[s0(p0: [[247.0], [248.0]], p1: [[249.0]], p2: [250.0, 251.0], p3: [[252.0], [253.0], [254.0]], p4: [[255.0], [256.0]], p5: [[257.0], [258.0], [259.0]])]])), s2(p0: s1(p0: [s0(p0: [[260.0], [261.0]], p1: [[262.0]], p2: [263.0, 264.0], p3: [[265.0], [266.0], [267.0]], p4: [[268.0], [269.0]], p5: [[270.0], [271.0], [272.0]])], p1: [[s0(p0: [[273.0], [274.0]], p1: [[275.0]], p2: [276.0, 277.0], p3: [[278.0], [279.0], [280.0]], p4: [[281.0], [282.0]], p5: [[283.0], [284.0], [285.0]])]]))], p2: s2(p0: s1(p0: [s0(p0: [[286.0], [287.0]], p1: [[288.0]], p2: [289.0, 290.0], p3: [[291.0], [292.0], [293.0]], p4: [[294.0], [295.0]], p5: [[296.0], [297.0], [298.0]])], p1: [[s0(p0: [[299.0], [300.0]], p1: [[301.0]], p2: [302.0, 303.0], p3: [[304.0], [305.0], [306.0]], p4: [[307.0], [308.0]], p5: [[309.0], [310.0], [311.0]])]]))), s3(p0: [s1(p0: [s0(p0: [[312.0], [313.0]], p1: [[314.0]], p2: [315.0, 316.0], p3: [[317.0], [318.0], [319.0]], p4: [[320.0], [321.0]], p5: [[322.0], [323.0], [324.0]])], p1: [[s0(p0: [[325.0], [326.0]], p1: [[327.0]], p2: [328.0, 329.0], p3: [[330.0], [331.0], [332.0]], p4: [[333.0], [334.0]], p5: [[335.0], [336.0], [337.0]])]]), s1(p0: [s0(p0: [[338.0], [339.0]], p1: [[340.0]], p2: [341.0, 342.0], p3: [[343.0], [344.0], [345.0]], p4: [[346.0], [347.0]], p5: [[348.0], [349.0], [350.0]])], p1: [[s0(p0: [[351.0], [352.0]], p1: [[353.0]], p2: [354.0, 355.0], p3: [[356.0], [357.0], [358.0]], p4: [[359.0], [360.0]], p5: [[361.0], [362.0], [363.0]])]])], p1: [s2(p0: s1(p0: [s0(p0: [[364.0], [365.0]], p1: [[366.0]], p2: [367.0, 368.0], p3: [[369.0], [370.0], [371.0]], p4: [[372.0], [373.0]], p5: [[374.0], [375.0], [376.0]])], p1: [[s0(p0: [[377.0], [378.0]], p1: [[379.0]], p2: [380.0, 381.0], p3: [[382.0], [383.0], [384.0]], p4: [[385.0], [386.0]], p5: [[387.0], [388.0], [389.0]])]])), s2(p0: s1(p0: [s0(p0: [[390.0], [391.0]], p1: [[392.0]], p2: [393.0, 394.0], p3: [[395.0], [396.0], [397.0]], p4: [[398.0], [399.0]], p5: [[400.0], [401.0], [402.0]])], p1: [[s0(p0: [[403.0], [404.0]], p1: [[405.0]], p2: [406.0, 407.0], p3: [[408.0], [409.0], [410.0]], p4: [[411.0], [412.0]], p5: [[413.0], [414.0], [415.0]])]])), s2(p0: s1(p0: [s0(p0: [[416.0], [417.0]], p1: [[418.0]], p2: [419.0, 420.0], p3: [[421.0], [422.0], [423.0]], p4: [[424.0], [425.0]], p5: [[426.0], [427.0], [428.0]])], p1: [[s0(p0: [[429.0], [430.0]], p1: [[431.0]], p2: [432.0, 433.0], p3: [[434.0], [435.0], [436.0]], p4: [[437.0], [438.0]], p5: [[439.0], [440.0], [441.0]])]]))], p2: s2(p0: s1(p0: [s0(p0: [[442.0], [443.0]], p1: [[444.0]], p2: [445.0, 446.0], p3: [[447.0], [448.0], [449.0]], p4: [[450.0], [451.0]], p5: [[452.0], [453.0], [454.0]])], p1: [[s0(p0: [[455.0], [456.0]], p1: [[457.0]], p2: [458.0, 459.0], p3: [[460.0], [461.0], [462.0]], p4: [[463.0], [464.0]], p5: [[465.0], [466.0], [467.0]])]])))]
    let v1: s3 = s3(p0: [s1(p0: [s0(p0: [[468.0], [469.0]], p1: [[470.0]], p2: [471.0, 472.0], p3: [[473.0], [474.0], [475.0]], p4: [[476.0], [477.0]], p5: [[478.0], [479.0], [480.0]])], p1: [[s0(p0: [[481.0], [482.0]], p1: [[483.0]], p2: [484.0, 485.0], p3: [[486.0], [487.0], [488.0]], p4: [[489.0], [490.0]], p5: [[491.0], [492.0], [493.0]])]]), s1(p0: [s0(p0: [[494.0], [495.0]], p1: [[496.0]], p2: [497.0, 498.0], p3: [[499.0], [500.0], [501.0]], p4: [[502.0], [503.0]], p5: [[504.0], [505.0], [506.0]])], p1: [[s0(p0: [[507.0], [508.0]], p1: [[509.0]], p2: [510.0, 511.0], p3: [[512.0], [513.0], [514.0]], p4: [[515.0], [516.0]], p5: [[517.0], [518.0], [519.0]])]])], p1: [s2(p0: s1(p0: [s0(p0: [[520.0], [521.0]], p1: [[522.0]], p2: [523.0, 524.0], p3: [[525.0], [526.0], [527.0]], p4: [[528.0], [529.0]], p5: [[530.0], [531.0], [532.0]])], p1: [[s0(p0: [[533.0], [534.0]], p1: [[535.0]], p2: [536.0, 537.0], p3: [[538.0], [539.0], [540.0]], p4: [[541.0], [542.0]], p5: [[543.0], [544.0], [545.0]])]])), s2(p0: s1(p0: [s0(p0: [[546.0], [547.0]], p1: [[548.0]], p2: [549.0, 550.0], p3: [[551.0], [552.0], [553.0]], p4: [[554.0], [555.0]], p5: [[556.0], [557.0], [558.0]])], p1: [[s0(p0: [[559.0], [560.0]], p1: [[561.0]], p2: [562.0, 563.0], p3: [[564.0], [565.0], [566.0]], p4: [[567.0], [568.0]], p5: [[569.0], [570.0], [571.0]])]])), s2(p0: s1(p0: [s0(p0: [[572.0], [573.0]], p1: [[574.0]], p2: [575.0, 576.0], p3: [[577.0], [578.0], [579.0]], p4: [[580.0], [581.0]], p5: [[582.0], [583.0], [584.0]])], p1: [[s0(p0: [[585.0], [586.0]], p1: [[587.0]], p2: [588.0, 589.0], p3: [[590.0], [591.0], [592.0]], p4: [[593.0], [594.0]], p5: [[595.0], [596.0], [597.0]])]]))], p2: s2(p0: s1(p0: [s0(p0: [[598.0], [599.0]], p1: [[600.0]], p2: [601.0, 602.0], p3: [[603.0], [604.0], [605.0]], p4: [[606.0], [607.0]], p5: [[608.0], [609.0], [610.0]])], p1: [[s0(p0: [[611.0], [612.0]], p1: [[613.0]], p2: [614.0, 615.0], p3: [[616.0], [617.0], [618.0]], p4: [[619.0], [620.0]], p5: [[621.0], [622.0], [623.0]])]])))
    let v2: Double = 624.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 624.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
