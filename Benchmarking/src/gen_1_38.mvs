  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
    var p2: [s0]
    var p3: [s0]
    var p4: [s0]
  } in
  struct s2 {
    var p0: s1
    var p1: s1
  } in
  struct s3 {
    var p0: s0
    var p1: s0
  } in
  struct s5 {
    var p0: s2
    var p1: [s3]
  } in
  let f9: (s5, Float, s3) -> s3 = (v0: s5, v1: Float, v2: s3) -> s3 {
    let v4: [s3] = v0.p1 in
    let v17: [[s3]] = [v4] in
    let v34: [[[s3]]] = [v17, v17, v17, v17, v17, v17] in
    let v47: [[s3]] = v34[3] in
    let v90: [s3] = v47[0] in
    let v122: s3 = v90[1] in
    v122
  } in
  let noinline_f0: ([[s3]], s5, Float) -> Float = (v0: [[s3]], v1: s5, v2: Float) -> Float {
    let v7: [s3] = v0[1] in
    let v9: s3 = v7[0] in
    let v11: s3 = f9(v1, v2, v9) in
    let v19: s0 = v11.p0 in
    let v78: [[Float]] = v19.p0 in
    let v109: [Float] = v78[0] in
    let v143: Float = v109[0] in
    v143
  } in
  fun loop(i: Int, v0: [[s3]], v1: s5, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s3]] = [[s3(s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]), s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]]))], [s3(s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]]), s0([[15.0], [16.0]], [[17.0], [18.0], [19.0]]))]] in
    let v1: s5 = s5(s2(s1([s0([[20.0], [21.0]], [[22.0], [23.0], [24.0]]), s0([[25.0], [26.0]], [[27.0], [28.0], [29.0]])], [s0([[30.0], [31.0]], [[32.0], [33.0], [34.0]]), s0([[35.0], [36.0]], [[37.0], [38.0], [39.0]])], [s0([[40.0], [41.0]], [[42.0], [43.0], [44.0]]), s0([[45.0], [46.0]], [[47.0], [48.0], [49.0]])], [s0([[50.0], [51.0]], [[52.0], [53.0], [54.0]]), s0([[55.0], [56.0]], [[57.0], [58.0], [59.0]])], [s0([[60.0], [61.0]], [[62.0], [63.0], [64.0]])]), s1([s0([[65.0], [66.0]], [[67.0], [68.0], [69.0]]), s0([[70.0], [71.0]], [[72.0], [73.0], [74.0]])], [s0([[75.0], [76.0]], [[77.0], [78.0], [79.0]]), s0([[80.0], [81.0]], [[82.0], [83.0], [84.0]])], [s0([[85.0], [86.0]], [[87.0], [88.0], [89.0]]), s0([[90.0], [91.0]], [[92.0], [93.0], [94.0]])], [s0([[95.0], [96.0]], [[97.0], [98.0], [99.0]]), s0([[100.0], [101.0]], [[102.0], [103.0], [104.0]])], [s0([[105.0], [106.0]], [[107.0], [108.0], [109.0]])])), [s3(s0([[110.0], [111.0]], [[112.0], [113.0], [114.0]]), s0([[115.0], [116.0]], [[117.0], [118.0], [119.0]])), s3(s0([[120.0], [121.0]], [[122.0], [123.0], [124.0]]), s0([[125.0], [126.0]], [[127.0], [128.0], [129.0]])), s3(s0([[130.0], [131.0]], [[132.0], [133.0], [134.0]]), s0([[135.0], [136.0]], [[137.0], [138.0], [139.0]]))]) in
    let v2: Float = 140.0 in
    let initialResult: Float = 140.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()