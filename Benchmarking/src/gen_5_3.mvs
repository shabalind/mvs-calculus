  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
    var p3: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [Float]
  } in
  struct s2 {
    var p0: [s0]
    var p1: s1
  } in
  struct s3 {
    var p0: [s2]
    var p1: [s1]
  } in
  struct s4 {
    var p0: s3
    var p1: s0
    var p2: s0
  } in
  struct s7 {
    var p0: s3
    var p1: [s1]
  } in
  let f43: (s4) -> s4 = (v0: s4) -> s4 {
    var v1: s4 = v0 in
    var v12: s4 = v1 in
    v12
  } in
  let f41: ([Float]) -> [Float] = (v0: [Float]) -> [Float] {
    var v3: [Float] = v0 in
    var v8: [Float] = v0 in
    var v1: [Float] = v0 in
    var v2: [Float] = v8 in
    let v9: Float = v3[0] in
    let v5: Float = v3[0] in
    let v7: Float = v2[0] in
    v8 = v1 in
    var v13: Float = v7 in
    var v14: Float = v13 in
    var v11: [Float] = v3 in
    v8[1] = v9 in
    let v20: [Float] = [v9, v14, v5] in
    v1[1] = v5 in
    var v26: [Float] = v20 in
    let v16: Float = v26[1] in
    v11[1] = v14 in
    v3[1] = v16 in
    v2[0] = v14 in
    v11
  } in
  let f37: (s3, s3) -> s3 = (v0: s3, v1: s3) -> s3 {
    let v2: [s2] = v1.p0 in
    var v4: [s2] = v2 in
    let v10: s2 = v4[0] in
    let v3: [s2] = v1.p0 in
    var v8: [s2] = v3 in
    let v7: s2 = v2[0] in
    v8[0] = v7 in
    let v6: s2 = v4[0] in
    var v13: s2 = v7 in
    var v22: s2 = v6 in
    let v9: s2 = v8[0] in
    var v11: s3 = v1 in
    let v12: s2 = v3[0] in
    v4 = v2 in
    let v18: [s2] = v0.p0 in
    let v20: [s1] = v11.p1 in
    v8[0] = v13 in
    v11.p0 = v4 in
    let v15: s1 = v20[2] in
    let v17: s0 = v15.p0 in
    let v21: [s1] = v0.p1 in
    v11.p0 = v2 in
    v22.p1 = v15 in
    let v51: [s0] = v9.p0 in
    let v31: [Float] = v15.p1 in
    let v23: s0 = v51[0] in
    v8[0] = v10 in
    let v45: s1 = v21[0] in
    let v35: s4 = s4(v1, v23, v17) in
    v13 = v12 in
    v13.p0 = v51 in
    v8[0] = v6 in
    let v76: s4 = f43(v35) in
    v11.p0 = v18 in
    v8[0] = v6 in
    var v105: s1 = v45 in
    v8[0] = v12 in
    let v102: [Float] = f41(v31) in
    v13.p0 = v51 in
    let v131: s3 = v76.p0 in
    v105.p1 = v102 in
    v13.p1 = v105 in
    v8[0] = v22 in
    v8[0] = v9 in
    v8 = v4 in
    v131
  } in
  let f5: ([s2]) -> [s2] = (v0: [s2]) -> [s2] {
    var v7: [s2] = v0 in
    let v6: s2 = v7[0] in
    let v4: [s0] = v6.p0 in
    let v8: [s0] = v6.p0 in
    var v9: s2 = v6 in
    var v11: s2 = v9 in
    v7[0] = v11 in
    v11.p0 = v4 in
    let v3: s2 = v0[0] in
    v7[0] = v3 in
    var v29: [s0] = v8 in
    v9.p0 = v29 in
    v7
  } in
  let noinline_f0: (s7, [s3], s3, Float) -> Float = (v0: s7, v1: [s3], v2: s3, v3: Float) -> Float {
    var v5: s3 = v2 in
    let v15: s3 = f37(v2, v5) in
    let v18: [s2] = v15.p0 in
    let v13: [s2] = v15.p0 in
    let v29: s2 = v18[0] in
    let v10: [s2] = f5(v13) in
    let v19: [s1] = v0.p1 in
    v5.p0 = v10 in
    let v50: [s0] = v29.p0 in
    let v49: s0 = v50[0] in
    var v23: [s1] = v19 in
    v5.p1 = v23 in
    let v51: [[Float]] = v49.p3 in
    let v97: [Float] = v51[0] in
    let v265: Float = v97[0] in
    v265
  } in
  fun loop(i: Int, v0: s7, v1: [s3], v2: s3, v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s7 = s7(s3([s2([s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]], [[5.0]], [[6.0], [7.0], [8.0]]), s0([[9.0], [10.0]], [[11.0], [12.0], [13.0]], [[14.0]], [[15.0], [16.0], [17.0]]), s0([[18.0], [19.0]], [[20.0], [21.0], [22.0]], [[23.0]], [[24.0], [25.0], [26.0]])], s1(s0([[27.0], [28.0]], [[29.0], [30.0], [31.0]], [[32.0]], [[33.0], [34.0], [35.0]]), [36.0, 37.0]))], [s1(s0([[38.0], [39.0]], [[40.0], [41.0], [42.0]], [[43.0]], [[44.0], [45.0], [46.0]]), [47.0, 48.0]), s1(s0([[49.0], [50.0]], [[51.0], [52.0], [53.0]], [[54.0]], [[55.0], [56.0], [57.0]]), [58.0, 59.0]), s1(s0([[60.0], [61.0]], [[62.0], [63.0], [64.0]], [[65.0]], [[66.0], [67.0], [68.0]]), [69.0, 70.0])]), [s1(s0([[71.0], [72.0]], [[73.0], [74.0], [75.0]], [[76.0]], [[77.0], [78.0], [79.0]]), [80.0, 81.0]), s1(s0([[82.0], [83.0]], [[84.0], [85.0], [86.0]], [[87.0]], [[88.0], [89.0], [90.0]]), [91.0, 92.0]), s1(s0([[93.0], [94.0]], [[95.0], [96.0], [97.0]], [[98.0]], [[99.0], [100.0], [101.0]]), [102.0, 103.0])]) in
    let v1: [s3] = [s3([s2([s0([[104.0], [105.0]], [[106.0], [107.0], [108.0]], [[109.0]], [[110.0], [111.0], [112.0]]), s0([[113.0], [114.0]], [[115.0], [116.0], [117.0]], [[118.0]], [[119.0], [120.0], [121.0]]), s0([[122.0], [123.0]], [[124.0], [125.0], [126.0]], [[127.0]], [[128.0], [129.0], [130.0]])], s1(s0([[131.0], [132.0]], [[133.0], [134.0], [135.0]], [[136.0]], [[137.0], [138.0], [139.0]]), [140.0, 141.0]))], [s1(s0([[142.0], [143.0]], [[144.0], [145.0], [146.0]], [[147.0]], [[148.0], [149.0], [150.0]]), [151.0, 152.0]), s1(s0([[153.0], [154.0]], [[155.0], [156.0], [157.0]], [[158.0]], [[159.0], [160.0], [161.0]]), [162.0, 163.0]), s1(s0([[164.0], [165.0]], [[166.0], [167.0], [168.0]], [[169.0]], [[170.0], [171.0], [172.0]]), [173.0, 174.0])])] in
    let v2: s3 = s3([s2([s0([[175.0], [176.0]], [[177.0], [178.0], [179.0]], [[180.0]], [[181.0], [182.0], [183.0]]), s0([[184.0], [185.0]], [[186.0], [187.0], [188.0]], [[189.0]], [[190.0], [191.0], [192.0]]), s0([[193.0], [194.0]], [[195.0], [196.0], [197.0]], [[198.0]], [[199.0], [200.0], [201.0]])], s1(s0([[202.0], [203.0]], [[204.0], [205.0], [206.0]], [[207.0]], [[208.0], [209.0], [210.0]]), [211.0, 212.0]))], [s1(s0([[213.0], [214.0]], [[215.0], [216.0], [217.0]], [[218.0]], [[219.0], [220.0], [221.0]]), [222.0, 223.0]), s1(s0([[224.0], [225.0]], [[226.0], [227.0], [228.0]], [[229.0]], [[230.0], [231.0], [232.0]]), [233.0, 234.0]), s1(s0([[235.0], [236.0]], [[237.0], [238.0], [239.0]], [[240.0]], [[241.0], [242.0], [243.0]]), [244.0, 245.0])]) in
    let v3: Float = 246.0 in
    let initialResult: Float = 246.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()