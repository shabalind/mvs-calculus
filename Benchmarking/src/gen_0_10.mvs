  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
  } in
  let noinline_f0: ([[s1]], Float) -> Float = (v0: [[s1]], v1: Float) -> Float {
    let v6: [s1] = v0[1] in
    let v12: s1 = v6[0] in
    let v9: s0 = v12.p0 in
    var v10: s0 = v9 in
    let v8: s1 = v6[0] in
    let v32: [[Float]] = v10.p1 in
    var v18: s1 = v8 in
    var v17: s0 = v9 in
    var v11: [[Float]] = v32 in
    var v20: [[Float]] = v32 in
    var v22: s1 = v18 in
    let v43: s0 = v8.p0 in
    var v34: s0 = v17 in
    let v13: [Float] = v20[0] in
    let v14: s0 = v22.p0 in
    v18.p0 = v17 in
    v20[0] = v13 in
    let v30: [[Float]] = v43.p0 in
    var v26: s0 = v43 in
    let v21: [Float] = v11[0] in
    v17.p0 = v30 in
    v34.p0 = v30 in
    v34 = v17 in
    v18.p0 = v26 in
    v22.p0 = v26 in
    let v36: [Float] = v11[0] in
    v26.p1 = v11 in
    let v41: s0 = v22.p0 in
    v20[0] = v36 in
    let v31: [[Float]] = v17.p1 in
    let v71: [[Float]] = [v13, v36, v13] in
    let v68: [[Float]] = v34.p1 in
    v20[0] = v36 in
    v22.p0 = v9 in
    let v27: [Float] = v31[0] in
    v26 = v14 in
    let v62: [Float] = v71[1] in
    v11[0] = v62 in
    let v35: [[Float]] = v14.p0 in
    v20[0] = v21 in
    var v66: [[Float]] = v30 in
    let v37: [[Float]] = v41.p1 in
    v26.p0 = v66 in
    let v121: [Float] = v66[1] in
    let v48: [[Float]] = v10.p0 in
    v66[2] = v62 in
    v66[2] = v27 in
    let v110: Float = v121[0] in
    v34.p0 = v35 in
    v26.p0 = v48 in
    v17.p1 = v68 in
    v10.p1 = v37 in
    v110
  } in
  fun loop(i: Int, v0: [[s1]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s1]] = [[s1(s0([[0.0], [1.0], [2.0]], [[3.0]]))], [s1(s0([[4.0], [5.0], [6.0]], [[7.0]]))]] in
    let v1: Float = 8.0 in
    let initialResult: Float = 8.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()