  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [[s0]]
    var p2: s0
    var p3: s0
  }
  struct s2 {
    var p0: [s0]
    var p1: s1
  }
  struct s3 {
    var p0: [[s2]]
    var p1: s2
    var p2: [s2]
    var p3: s2
  }
  struct s4 {
    var p0: [s2]
    var p1: s3
  }
  struct s5 {
    var p0: [s0]
    var p1: s3
  }
  struct s6 {
    var p0: s4
    var p1: s0
  }
  struct s8 {
    var p0: [s2]
    var p1: s5
  }
  func f83(_ v0: Double) -> Double {
    var v6: Double = v0
    var v3: Double = v6
    let v2: [Double] = [v0, v0, v3, v6, v6]
    let v7: Double = v2[0]
    var v13: [Double] = v2
    v13[4] = v7
    v13[0] = v7
    v13[1] = v0
    let v31: Double = v13[3]
    return v31
  }
  @inline(never)
  func f0(_ v0: [s4], _ v1: s0, _ v2: [s2], _ v3: [s4], _ v4: [s0], _ v5: s6, _ v6: [s8], _ v7: Double) -> Double {
    let v15: Double = f83(v7)
    let v60: Double = v15 / v7
    let v69: Double = v7 * v15
    let v52: Double = v69 - v60
    let v95: Double = v69 - v52
    return v95
  }
  func benchmark() {
    let v0: [s4] = [s4(p0: [s2(p0: [s0(p0: [[0.0], [1.0]], p1: [[2.0]]), s0(p0: [[3.0], [4.0]], p1: [[5.0]]), s0(p0: [[6.0], [7.0]], p1: [[8.0]])], p1: s1(p0: s0(p0: [[9.0], [10.0]], p1: [[11.0]]), p1: [[s0(p0: [[12.0], [13.0]], p1: [[14.0]])]], p2: s0(p0: [[15.0], [16.0]], p1: [[17.0]]), p3: s0(p0: [[18.0], [19.0]], p1: [[20.0]]))), s2(p0: [s0(p0: [[21.0], [22.0]], p1: [[23.0]]), s0(p0: [[24.0], [25.0]], p1: [[26.0]]), s0(p0: [[27.0], [28.0]], p1: [[29.0]])], p1: s1(p0: s0(p0: [[30.0], [31.0]], p1: [[32.0]]), p1: [[s0(p0: [[33.0], [34.0]], p1: [[35.0]])]], p2: s0(p0: [[36.0], [37.0]], p1: [[38.0]]), p3: s0(p0: [[39.0], [40.0]], p1: [[41.0]]))), s2(p0: [s0(p0: [[42.0], [43.0]], p1: [[44.0]]), s0(p0: [[45.0], [46.0]], p1: [[47.0]]), s0(p0: [[48.0], [49.0]], p1: [[50.0]])], p1: s1(p0: s0(p0: [[51.0], [52.0]], p1: [[53.0]]), p1: [[s0(p0: [[54.0], [55.0]], p1: [[56.0]])]], p2: s0(p0: [[57.0], [58.0]], p1: [[59.0]]), p3: s0(p0: [[60.0], [61.0]], p1: [[62.0]])))], p1: s3(p0: [[s2(p0: [s0(p0: [[63.0], [64.0]], p1: [[65.0]]), s0(p0: [[66.0], [67.0]], p1: [[68.0]]), s0(p0: [[69.0], [70.0]], p1: [[71.0]])], p1: s1(p0: s0(p0: [[72.0], [73.0]], p1: [[74.0]]), p1: [[s0(p0: [[75.0], [76.0]], p1: [[77.0]])]], p2: s0(p0: [[78.0], [79.0]], p1: [[80.0]]), p3: s0(p0: [[81.0], [82.0]], p1: [[83.0]])))], [s2(p0: [s0(p0: [[84.0], [85.0]], p1: [[86.0]]), s0(p0: [[87.0], [88.0]], p1: [[89.0]]), s0(p0: [[90.0], [91.0]], p1: [[92.0]])], p1: s1(p0: s0(p0: [[93.0], [94.0]], p1: [[95.0]]), p1: [[s0(p0: [[96.0], [97.0]], p1: [[98.0]])]], p2: s0(p0: [[99.0], [100.0]], p1: [[101.0]]), p3: s0(p0: [[102.0], [103.0]], p1: [[104.0]])))], [s2(p0: [s0(p0: [[105.0], [106.0]], p1: [[107.0]]), s0(p0: [[108.0], [109.0]], p1: [[110.0]]), s0(p0: [[111.0], [112.0]], p1: [[113.0]])], p1: s1(p0: s0(p0: [[114.0], [115.0]], p1: [[116.0]]), p1: [[s0(p0: [[117.0], [118.0]], p1: [[119.0]])]], p2: s0(p0: [[120.0], [121.0]], p1: [[122.0]]), p3: s0(p0: [[123.0], [124.0]], p1: [[125.0]])))]], p1: s2(p0: [s0(p0: [[126.0], [127.0]], p1: [[128.0]]), s0(p0: [[129.0], [130.0]], p1: [[131.0]]), s0(p0: [[132.0], [133.0]], p1: [[134.0]])], p1: s1(p0: s0(p0: [[135.0], [136.0]], p1: [[137.0]]), p1: [[s0(p0: [[138.0], [139.0]], p1: [[140.0]])]], p2: s0(p0: [[141.0], [142.0]], p1: [[143.0]]), p3: s0(p0: [[144.0], [145.0]], p1: [[146.0]]))), p2: [s2(p0: [s0(p0: [[147.0], [148.0]], p1: [[149.0]]), s0(p0: [[150.0], [151.0]], p1: [[152.0]]), s0(p0: [[153.0], [154.0]], p1: [[155.0]])], p1: s1(p0: s0(p0: [[156.0], [157.0]], p1: [[158.0]]), p1: [[s0(p0: [[159.0], [160.0]], p1: [[161.0]])]], p2: s0(p0: [[162.0], [163.0]], p1: [[164.0]]), p3: s0(p0: [[165.0], [166.0]], p1: [[167.0]])))], p3: s2(p0: [s0(p0: [[168.0], [169.0]], p1: [[170.0]]), s0(p0: [[171.0], [172.0]], p1: [[173.0]]), s0(p0: [[174.0], [175.0]], p1: [[176.0]])], p1: s1(p0: s0(p0: [[177.0], [178.0]], p1: [[179.0]]), p1: [[s0(p0: [[180.0], [181.0]], p1: [[182.0]])]], p2: s0(p0: [[183.0], [184.0]], p1: [[185.0]]), p3: s0(p0: [[186.0], [187.0]], p1: [[188.0]]))))), s4(p0: [s2(p0: [s0(p0: [[189.0], [190.0]], p1: [[191.0]]), s0(p0: [[192.0], [193.0]], p1: [[194.0]]), s0(p0: [[195.0], [196.0]], p1: [[197.0]])], p1: s1(p0: s0(p0: [[198.0], [199.0]], p1: [[200.0]]), p1: [[s0(p0: [[201.0], [202.0]], p1: [[203.0]])]], p2: s0(p0: [[204.0], [205.0]], p1: [[206.0]]), p3: s0(p0: [[207.0], [208.0]], p1: [[209.0]]))), s2(p0: [s0(p0: [[210.0], [211.0]], p1: [[212.0]]), s0(p0: [[213.0], [214.0]], p1: [[215.0]]), s0(p0: [[216.0], [217.0]], p1: [[218.0]])], p1: s1(p0: s0(p0: [[219.0], [220.0]], p1: [[221.0]]), p1: [[s0(p0: [[222.0], [223.0]], p1: [[224.0]])]], p2: s0(p0: [[225.0], [226.0]], p1: [[227.0]]), p3: s0(p0: [[228.0], [229.0]], p1: [[230.0]]))), s2(p0: [s0(p0: [[231.0], [232.0]], p1: [[233.0]]), s0(p0: [[234.0], [235.0]], p1: [[236.0]]), s0(p0: [[237.0], [238.0]], p1: [[239.0]])], p1: s1(p0: s0(p0: [[240.0], [241.0]], p1: [[242.0]]), p1: [[s0(p0: [[243.0], [244.0]], p1: [[245.0]])]], p2: s0(p0: [[246.0], [247.0]], p1: [[248.0]]), p3: s0(p0: [[249.0], [250.0]], p1: [[251.0]])))], p1: s3(p0: [[s2(p0: [s0(p0: [[252.0], [253.0]], p1: [[254.0]]), s0(p0: [[255.0], [256.0]], p1: [[257.0]]), s0(p0: [[258.0], [259.0]], p1: [[260.0]])], p1: s1(p0: s0(p0: [[261.0], [262.0]], p1: [[263.0]]), p1: [[s0(p0: [[264.0], [265.0]], p1: [[266.0]])]], p2: s0(p0: [[267.0], [268.0]], p1: [[269.0]]), p3: s0(p0: [[270.0], [271.0]], p1: [[272.0]])))], [s2(p0: [s0(p0: [[273.0], [274.0]], p1: [[275.0]]), s0(p0: [[276.0], [277.0]], p1: [[278.0]]), s0(p0: [[279.0], [280.0]], p1: [[281.0]])], p1: s1(p0: s0(p0: [[282.0], [283.0]], p1: [[284.0]]), p1: [[s0(p0: [[285.0], [286.0]], p1: [[287.0]])]], p2: s0(p0: [[288.0], [289.0]], p1: [[290.0]]), p3: s0(p0: [[291.0], [292.0]], p1: [[293.0]])))], [s2(p0: [s0(p0: [[294.0], [295.0]], p1: [[296.0]]), s0(p0: [[297.0], [298.0]], p1: [[299.0]]), s0(p0: [[300.0], [301.0]], p1: [[302.0]])], p1: s1(p0: s0(p0: [[303.0], [304.0]], p1: [[305.0]]), p1: [[s0(p0: [[306.0], [307.0]], p1: [[308.0]])]], p2: s0(p0: [[309.0], [310.0]], p1: [[311.0]]), p3: s0(p0: [[312.0], [313.0]], p1: [[314.0]])))]], p1: s2(p0: [s0(p0: [[315.0], [316.0]], p1: [[317.0]]), s0(p0: [[318.0], [319.0]], p1: [[320.0]]), s0(p0: [[321.0], [322.0]], p1: [[323.0]])], p1: s1(p0: s0(p0: [[324.0], [325.0]], p1: [[326.0]]), p1: [[s0(p0: [[327.0], [328.0]], p1: [[329.0]])]], p2: s0(p0: [[330.0], [331.0]], p1: [[332.0]]), p3: s0(p0: [[333.0], [334.0]], p1: [[335.0]]))), p2: [s2(p0: [s0(p0: [[336.0], [337.0]], p1: [[338.0]]), s0(p0: [[339.0], [340.0]], p1: [[341.0]]), s0(p0: [[342.0], [343.0]], p1: [[344.0]])], p1: s1(p0: s0(p0: [[345.0], [346.0]], p1: [[347.0]]), p1: [[s0(p0: [[348.0], [349.0]], p1: [[350.0]])]], p2: s0(p0: [[351.0], [352.0]], p1: [[353.0]]), p3: s0(p0: [[354.0], [355.0]], p1: [[356.0]])))], p3: s2(p0: [s0(p0: [[357.0], [358.0]], p1: [[359.0]]), s0(p0: [[360.0], [361.0]], p1: [[362.0]]), s0(p0: [[363.0], [364.0]], p1: [[365.0]])], p1: s1(p0: s0(p0: [[366.0], [367.0]], p1: [[368.0]]), p1: [[s0(p0: [[369.0], [370.0]], p1: [[371.0]])]], p2: s0(p0: [[372.0], [373.0]], p1: [[374.0]]), p3: s0(p0: [[375.0], [376.0]], p1: [[377.0]])))))]
    let v1: s0 = s0(p0: [[378.0], [379.0]], p1: [[380.0]])
    let v2: [s2] = [s2(p0: [s0(p0: [[381.0], [382.0]], p1: [[383.0]]), s0(p0: [[384.0], [385.0]], p1: [[386.0]]), s0(p0: [[387.0], [388.0]], p1: [[389.0]])], p1: s1(p0: s0(p0: [[390.0], [391.0]], p1: [[392.0]]), p1: [[s0(p0: [[393.0], [394.0]], p1: [[395.0]])]], p2: s0(p0: [[396.0], [397.0]], p1: [[398.0]]), p3: s0(p0: [[399.0], [400.0]], p1: [[401.0]]))), s2(p0: [s0(p0: [[402.0], [403.0]], p1: [[404.0]]), s0(p0: [[405.0], [406.0]], p1: [[407.0]]), s0(p0: [[408.0], [409.0]], p1: [[410.0]])], p1: s1(p0: s0(p0: [[411.0], [412.0]], p1: [[413.0]]), p1: [[s0(p0: [[414.0], [415.0]], p1: [[416.0]])]], p2: s0(p0: [[417.0], [418.0]], p1: [[419.0]]), p3: s0(p0: [[420.0], [421.0]], p1: [[422.0]]))), s2(p0: [s0(p0: [[423.0], [424.0]], p1: [[425.0]]), s0(p0: [[426.0], [427.0]], p1: [[428.0]]), s0(p0: [[429.0], [430.0]], p1: [[431.0]])], p1: s1(p0: s0(p0: [[432.0], [433.0]], p1: [[434.0]]), p1: [[s0(p0: [[435.0], [436.0]], p1: [[437.0]])]], p2: s0(p0: [[438.0], [439.0]], p1: [[440.0]]), p3: s0(p0: [[441.0], [442.0]], p1: [[443.0]])))]
    let v3: [s4] = [s4(p0: [s2(p0: [s0(p0: [[444.0], [445.0]], p1: [[446.0]]), s0(p0: [[447.0], [448.0]], p1: [[449.0]]), s0(p0: [[450.0], [451.0]], p1: [[452.0]])], p1: s1(p0: s0(p0: [[453.0], [454.0]], p1: [[455.0]]), p1: [[s0(p0: [[456.0], [457.0]], p1: [[458.0]])]], p2: s0(p0: [[459.0], [460.0]], p1: [[461.0]]), p3: s0(p0: [[462.0], [463.0]], p1: [[464.0]]))), s2(p0: [s0(p0: [[465.0], [466.0]], p1: [[467.0]]), s0(p0: [[468.0], [469.0]], p1: [[470.0]]), s0(p0: [[471.0], [472.0]], p1: [[473.0]])], p1: s1(p0: s0(p0: [[474.0], [475.0]], p1: [[476.0]]), p1: [[s0(p0: [[477.0], [478.0]], p1: [[479.0]])]], p2: s0(p0: [[480.0], [481.0]], p1: [[482.0]]), p3: s0(p0: [[483.0], [484.0]], p1: [[485.0]]))), s2(p0: [s0(p0: [[486.0], [487.0]], p1: [[488.0]]), s0(p0: [[489.0], [490.0]], p1: [[491.0]]), s0(p0: [[492.0], [493.0]], p1: [[494.0]])], p1: s1(p0: s0(p0: [[495.0], [496.0]], p1: [[497.0]]), p1: [[s0(p0: [[498.0], [499.0]], p1: [[500.0]])]], p2: s0(p0: [[501.0], [502.0]], p1: [[503.0]]), p3: s0(p0: [[504.0], [505.0]], p1: [[506.0]])))], p1: s3(p0: [[s2(p0: [s0(p0: [[507.0], [508.0]], p1: [[509.0]]), s0(p0: [[510.0], [511.0]], p1: [[512.0]]), s0(p0: [[513.0], [514.0]], p1: [[515.0]])], p1: s1(p0: s0(p0: [[516.0], [517.0]], p1: [[518.0]]), p1: [[s0(p0: [[519.0], [520.0]], p1: [[521.0]])]], p2: s0(p0: [[522.0], [523.0]], p1: [[524.0]]), p3: s0(p0: [[525.0], [526.0]], p1: [[527.0]])))], [s2(p0: [s0(p0: [[528.0], [529.0]], p1: [[530.0]]), s0(p0: [[531.0], [532.0]], p1: [[533.0]]), s0(p0: [[534.0], [535.0]], p1: [[536.0]])], p1: s1(p0: s0(p0: [[537.0], [538.0]], p1: [[539.0]]), p1: [[s0(p0: [[540.0], [541.0]], p1: [[542.0]])]], p2: s0(p0: [[543.0], [544.0]], p1: [[545.0]]), p3: s0(p0: [[546.0], [547.0]], p1: [[548.0]])))], [s2(p0: [s0(p0: [[549.0], [550.0]], p1: [[551.0]]), s0(p0: [[552.0], [553.0]], p1: [[554.0]]), s0(p0: [[555.0], [556.0]], p1: [[557.0]])], p1: s1(p0: s0(p0: [[558.0], [559.0]], p1: [[560.0]]), p1: [[s0(p0: [[561.0], [562.0]], p1: [[563.0]])]], p2: s0(p0: [[564.0], [565.0]], p1: [[566.0]]), p3: s0(p0: [[567.0], [568.0]], p1: [[569.0]])))]], p1: s2(p0: [s0(p0: [[570.0], [571.0]], p1: [[572.0]]), s0(p0: [[573.0], [574.0]], p1: [[575.0]]), s0(p0: [[576.0], [577.0]], p1: [[578.0]])], p1: s1(p0: s0(p0: [[579.0], [580.0]], p1: [[581.0]]), p1: [[s0(p0: [[582.0], [583.0]], p1: [[584.0]])]], p2: s0(p0: [[585.0], [586.0]], p1: [[587.0]]), p3: s0(p0: [[588.0], [589.0]], p1: [[590.0]]))), p2: [s2(p0: [s0(p0: [[591.0], [592.0]], p1: [[593.0]]), s0(p0: [[594.0], [595.0]], p1: [[596.0]]), s0(p0: [[597.0], [598.0]], p1: [[599.0]])], p1: s1(p0: s0(p0: [[600.0], [601.0]], p1: [[602.0]]), p1: [[s0(p0: [[603.0], [604.0]], p1: [[605.0]])]], p2: s0(p0: [[606.0], [607.0]], p1: [[608.0]]), p3: s0(p0: [[609.0], [610.0]], p1: [[611.0]])))], p3: s2(p0: [s0(p0: [[612.0], [613.0]], p1: [[614.0]]), s0(p0: [[615.0], [616.0]], p1: [[617.0]]), s0(p0: [[618.0], [619.0]], p1: [[620.0]])], p1: s1(p0: s0(p0: [[621.0], [622.0]], p1: [[623.0]]), p1: [[s0(p0: [[624.0], [625.0]], p1: [[626.0]])]], p2: s0(p0: [[627.0], [628.0]], p1: [[629.0]]), p3: s0(p0: [[630.0], [631.0]], p1: [[632.0]]))))), s4(p0: [s2(p0: [s0(p0: [[633.0], [634.0]], p1: [[635.0]]), s0(p0: [[636.0], [637.0]], p1: [[638.0]]), s0(p0: [[639.0], [640.0]], p1: [[641.0]])], p1: s1(p0: s0(p0: [[642.0], [643.0]], p1: [[644.0]]), p1: [[s0(p0: [[645.0], [646.0]], p1: [[647.0]])]], p2: s0(p0: [[648.0], [649.0]], p1: [[650.0]]), p3: s0(p0: [[651.0], [652.0]], p1: [[653.0]]))), s2(p0: [s0(p0: [[654.0], [655.0]], p1: [[656.0]]), s0(p0: [[657.0], [658.0]], p1: [[659.0]]), s0(p0: [[660.0], [661.0]], p1: [[662.0]])], p1: s1(p0: s0(p0: [[663.0], [664.0]], p1: [[665.0]]), p1: [[s0(p0: [[666.0], [667.0]], p1: [[668.0]])]], p2: s0(p0: [[669.0], [670.0]], p1: [[671.0]]), p3: s0(p0: [[672.0], [673.0]], p1: [[674.0]]))), s2(p0: [s0(p0: [[675.0], [676.0]], p1: [[677.0]]), s0(p0: [[678.0], [679.0]], p1: [[680.0]]), s0(p0: [[681.0], [682.0]], p1: [[683.0]])], p1: s1(p0: s0(p0: [[684.0], [685.0]], p1: [[686.0]]), p1: [[s0(p0: [[687.0], [688.0]], p1: [[689.0]])]], p2: s0(p0: [[690.0], [691.0]], p1: [[692.0]]), p3: s0(p0: [[693.0], [694.0]], p1: [[695.0]])))], p1: s3(p0: [[s2(p0: [s0(p0: [[696.0], [697.0]], p1: [[698.0]]), s0(p0: [[699.0], [700.0]], p1: [[701.0]]), s0(p0: [[702.0], [703.0]], p1: [[704.0]])], p1: s1(p0: s0(p0: [[705.0], [706.0]], p1: [[707.0]]), p1: [[s0(p0: [[708.0], [709.0]], p1: [[710.0]])]], p2: s0(p0: [[711.0], [712.0]], p1: [[713.0]]), p3: s0(p0: [[714.0], [715.0]], p1: [[716.0]])))], [s2(p0: [s0(p0: [[717.0], [718.0]], p1: [[719.0]]), s0(p0: [[720.0], [721.0]], p1: [[722.0]]), s0(p0: [[723.0], [724.0]], p1: [[725.0]])], p1: s1(p0: s0(p0: [[726.0], [727.0]], p1: [[728.0]]), p1: [[s0(p0: [[729.0], [730.0]], p1: [[731.0]])]], p2: s0(p0: [[732.0], [733.0]], p1: [[734.0]]), p3: s0(p0: [[735.0], [736.0]], p1: [[737.0]])))], [s2(p0: [s0(p0: [[738.0], [739.0]], p1: [[740.0]]), s0(p0: [[741.0], [742.0]], p1: [[743.0]]), s0(p0: [[744.0], [745.0]], p1: [[746.0]])], p1: s1(p0: s0(p0: [[747.0], [748.0]], p1: [[749.0]]), p1: [[s0(p0: [[750.0], [751.0]], p1: [[752.0]])]], p2: s0(p0: [[753.0], [754.0]], p1: [[755.0]]), p3: s0(p0: [[756.0], [757.0]], p1: [[758.0]])))]], p1: s2(p0: [s0(p0: [[759.0], [760.0]], p1: [[761.0]]), s0(p0: [[762.0], [763.0]], p1: [[764.0]]), s0(p0: [[765.0], [766.0]], p1: [[767.0]])], p1: s1(p0: s0(p0: [[768.0], [769.0]], p1: [[770.0]]), p1: [[s0(p0: [[771.0], [772.0]], p1: [[773.0]])]], p2: s0(p0: [[774.0], [775.0]], p1: [[776.0]]), p3: s0(p0: [[777.0], [778.0]], p1: [[779.0]]))), p2: [s2(p0: [s0(p0: [[780.0], [781.0]], p1: [[782.0]]), s0(p0: [[783.0], [784.0]], p1: [[785.0]]), s0(p0: [[786.0], [787.0]], p1: [[788.0]])], p1: s1(p0: s0(p0: [[789.0], [790.0]], p1: [[791.0]]), p1: [[s0(p0: [[792.0], [793.0]], p1: [[794.0]])]], p2: s0(p0: [[795.0], [796.0]], p1: [[797.0]]), p3: s0(p0: [[798.0], [799.0]], p1: [[800.0]])))], p3: s2(p0: [s0(p0: [[801.0], [802.0]], p1: [[803.0]]), s0(p0: [[804.0], [805.0]], p1: [[806.0]]), s0(p0: [[807.0], [808.0]], p1: [[809.0]])], p1: s1(p0: s0(p0: [[810.0], [811.0]], p1: [[812.0]]), p1: [[s0(p0: [[813.0], [814.0]], p1: [[815.0]])]], p2: s0(p0: [[816.0], [817.0]], p1: [[818.0]]), p3: s0(p0: [[819.0], [820.0]], p1: [[821.0]]))))), s4(p0: [s2(p0: [s0(p0: [[822.0], [823.0]], p1: [[824.0]]), s0(p0: [[825.0], [826.0]], p1: [[827.0]]), s0(p0: [[828.0], [829.0]], p1: [[830.0]])], p1: s1(p0: s0(p0: [[831.0], [832.0]], p1: [[833.0]]), p1: [[s0(p0: [[834.0], [835.0]], p1: [[836.0]])]], p2: s0(p0: [[837.0], [838.0]], p1: [[839.0]]), p3: s0(p0: [[840.0], [841.0]], p1: [[842.0]]))), s2(p0: [s0(p0: [[843.0], [844.0]], p1: [[845.0]]), s0(p0: [[846.0], [847.0]], p1: [[848.0]]), s0(p0: [[849.0], [850.0]], p1: [[851.0]])], p1: s1(p0: s0(p0: [[852.0], [853.0]], p1: [[854.0]]), p1: [[s0(p0: [[855.0], [856.0]], p1: [[857.0]])]], p2: s0(p0: [[858.0], [859.0]], p1: [[860.0]]), p3: s0(p0: [[861.0], [862.0]], p1: [[863.0]]))), s2(p0: [s0(p0: [[864.0], [865.0]], p1: [[866.0]]), s0(p0: [[867.0], [868.0]], p1: [[869.0]]), s0(p0: [[870.0], [871.0]], p1: [[872.0]])], p1: s1(p0: s0(p0: [[873.0], [874.0]], p1: [[875.0]]), p1: [[s0(p0: [[876.0], [877.0]], p1: [[878.0]])]], p2: s0(p0: [[879.0], [880.0]], p1: [[881.0]]), p3: s0(p0: [[882.0], [883.0]], p1: [[884.0]])))], p1: s3(p0: [[s2(p0: [s0(p0: [[885.0], [886.0]], p1: [[887.0]]), s0(p0: [[888.0], [889.0]], p1: [[890.0]]), s0(p0: [[891.0], [892.0]], p1: [[893.0]])], p1: s1(p0: s0(p0: [[894.0], [895.0]], p1: [[896.0]]), p1: [[s0(p0: [[897.0], [898.0]], p1: [[899.0]])]], p2: s0(p0: [[900.0], [901.0]], p1: [[902.0]]), p3: s0(p0: [[903.0], [904.0]], p1: [[905.0]])))], [s2(p0: [s0(p0: [[906.0], [907.0]], p1: [[908.0]]), s0(p0: [[909.0], [910.0]], p1: [[911.0]]), s0(p0: [[912.0], [913.0]], p1: [[914.0]])], p1: s1(p0: s0(p0: [[915.0], [916.0]], p1: [[917.0]]), p1: [[s0(p0: [[918.0], [919.0]], p1: [[920.0]])]], p2: s0(p0: [[921.0], [922.0]], p1: [[923.0]]), p3: s0(p0: [[924.0], [925.0]], p1: [[926.0]])))], [s2(p0: [s0(p0: [[927.0], [928.0]], p1: [[929.0]]), s0(p0: [[930.0], [931.0]], p1: [[932.0]]), s0(p0: [[933.0], [934.0]], p1: [[935.0]])], p1: s1(p0: s0(p0: [[936.0], [937.0]], p1: [[938.0]]), p1: [[s0(p0: [[939.0], [940.0]], p1: [[941.0]])]], p2: s0(p0: [[942.0], [943.0]], p1: [[944.0]]), p3: s0(p0: [[945.0], [946.0]], p1: [[947.0]])))]], p1: s2(p0: [s0(p0: [[948.0], [949.0]], p1: [[950.0]]), s0(p0: [[951.0], [952.0]], p1: [[953.0]]), s0(p0: [[954.0], [955.0]], p1: [[956.0]])], p1: s1(p0: s0(p0: [[957.0], [958.0]], p1: [[959.0]]), p1: [[s0(p0: [[960.0], [961.0]], p1: [[962.0]])]], p2: s0(p0: [[963.0], [964.0]], p1: [[965.0]]), p3: s0(p0: [[966.0], [967.0]], p1: [[968.0]]))), p2: [s2(p0: [s0(p0: [[969.0], [970.0]], p1: [[971.0]]), s0(p0: [[972.0], [973.0]], p1: [[974.0]]), s0(p0: [[975.0], [976.0]], p1: [[977.0]])], p1: s1(p0: s0(p0: [[978.0], [979.0]], p1: [[980.0]]), p1: [[s0(p0: [[981.0], [982.0]], p1: [[983.0]])]], p2: s0(p0: [[984.0], [985.0]], p1: [[986.0]]), p3: s0(p0: [[987.0], [988.0]], p1: [[989.0]])))], p3: s2(p0: [s0(p0: [[990.0], [991.0]], p1: [[992.0]]), s0(p0: [[993.0], [994.0]], p1: [[995.0]]), s0(p0: [[996.0], [997.0]], p1: [[998.0]])], p1: s1(p0: s0(p0: [[999.0], [1000.0]], p1: [[1001.0]]), p1: [[s0(p0: [[1002.0], [1003.0]], p1: [[1004.0]])]], p2: s0(p0: [[1005.0], [1006.0]], p1: [[1007.0]]), p3: s0(p0: [[1008.0], [1009.0]], p1: [[1010.0]])))))]
    let v4: [s0] = [s0(p0: [[1011.0], [1012.0]], p1: [[1013.0]]), s0(p0: [[1014.0], [1015.0]], p1: [[1016.0]]), s0(p0: [[1017.0], [1018.0]], p1: [[1019.0]])]
    let v5: s6 = s6(p0: s4(p0: [s2(p0: [s0(p0: [[1020.0], [1021.0]], p1: [[1022.0]]), s0(p0: [[1023.0], [1024.0]], p1: [[1025.0]]), s0(p0: [[1026.0], [1027.0]], p1: [[1028.0]])], p1: s1(p0: s0(p0: [[1029.0], [1030.0]], p1: [[1031.0]]), p1: [[s0(p0: [[1032.0], [1033.0]], p1: [[1034.0]])]], p2: s0(p0: [[1035.0], [1036.0]], p1: [[1037.0]]), p3: s0(p0: [[1038.0], [1039.0]], p1: [[1040.0]]))), s2(p0: [s0(p0: [[1041.0], [1042.0]], p1: [[1043.0]]), s0(p0: [[1044.0], [1045.0]], p1: [[1046.0]]), s0(p0: [[1047.0], [1048.0]], p1: [[1049.0]])], p1: s1(p0: s0(p0: [[1050.0], [1051.0]], p1: [[1052.0]]), p1: [[s0(p0: [[1053.0], [1054.0]], p1: [[1055.0]])]], p2: s0(p0: [[1056.0], [1057.0]], p1: [[1058.0]]), p3: s0(p0: [[1059.0], [1060.0]], p1: [[1061.0]]))), s2(p0: [s0(p0: [[1062.0], [1063.0]], p1: [[1064.0]]), s0(p0: [[1065.0], [1066.0]], p1: [[1067.0]]), s0(p0: [[1068.0], [1069.0]], p1: [[1070.0]])], p1: s1(p0: s0(p0: [[1071.0], [1072.0]], p1: [[1073.0]]), p1: [[s0(p0: [[1074.0], [1075.0]], p1: [[1076.0]])]], p2: s0(p0: [[1077.0], [1078.0]], p1: [[1079.0]]), p3: s0(p0: [[1080.0], [1081.0]], p1: [[1082.0]])))], p1: s3(p0: [[s2(p0: [s0(p0: [[1083.0], [1084.0]], p1: [[1085.0]]), s0(p0: [[1086.0], [1087.0]], p1: [[1088.0]]), s0(p0: [[1089.0], [1090.0]], p1: [[1091.0]])], p1: s1(p0: s0(p0: [[1092.0], [1093.0]], p1: [[1094.0]]), p1: [[s0(p0: [[1095.0], [1096.0]], p1: [[1097.0]])]], p2: s0(p0: [[1098.0], [1099.0]], p1: [[1100.0]]), p3: s0(p0: [[1101.0], [1102.0]], p1: [[1103.0]])))], [s2(p0: [s0(p0: [[1104.0], [1105.0]], p1: [[1106.0]]), s0(p0: [[1107.0], [1108.0]], p1: [[1109.0]]), s0(p0: [[1110.0], [1111.0]], p1: [[1112.0]])], p1: s1(p0: s0(p0: [[1113.0], [1114.0]], p1: [[1115.0]]), p1: [[s0(p0: [[1116.0], [1117.0]], p1: [[1118.0]])]], p2: s0(p0: [[1119.0], [1120.0]], p1: [[1121.0]]), p3: s0(p0: [[1122.0], [1123.0]], p1: [[1124.0]])))], [s2(p0: [s0(p0: [[1125.0], [1126.0]], p1: [[1127.0]]), s0(p0: [[1128.0], [1129.0]], p1: [[1130.0]]), s0(p0: [[1131.0], [1132.0]], p1: [[1133.0]])], p1: s1(p0: s0(p0: [[1134.0], [1135.0]], p1: [[1136.0]]), p1: [[s0(p0: [[1137.0], [1138.0]], p1: [[1139.0]])]], p2: s0(p0: [[1140.0], [1141.0]], p1: [[1142.0]]), p3: s0(p0: [[1143.0], [1144.0]], p1: [[1145.0]])))]], p1: s2(p0: [s0(p0: [[1146.0], [1147.0]], p1: [[1148.0]]), s0(p0: [[1149.0], [1150.0]], p1: [[1151.0]]), s0(p0: [[1152.0], [1153.0]], p1: [[1154.0]])], p1: s1(p0: s0(p0: [[1155.0], [1156.0]], p1: [[1157.0]]), p1: [[s0(p0: [[1158.0], [1159.0]], p1: [[1160.0]])]], p2: s0(p0: [[1161.0], [1162.0]], p1: [[1163.0]]), p3: s0(p0: [[1164.0], [1165.0]], p1: [[1166.0]]))), p2: [s2(p0: [s0(p0: [[1167.0], [1168.0]], p1: [[1169.0]]), s0(p0: [[1170.0], [1171.0]], p1: [[1172.0]]), s0(p0: [[1173.0], [1174.0]], p1: [[1175.0]])], p1: s1(p0: s0(p0: [[1176.0], [1177.0]], p1: [[1178.0]]), p1: [[s0(p0: [[1179.0], [1180.0]], p1: [[1181.0]])]], p2: s0(p0: [[1182.0], [1183.0]], p1: [[1184.0]]), p3: s0(p0: [[1185.0], [1186.0]], p1: [[1187.0]])))], p3: s2(p0: [s0(p0: [[1188.0], [1189.0]], p1: [[1190.0]]), s0(p0: [[1191.0], [1192.0]], p1: [[1193.0]]), s0(p0: [[1194.0], [1195.0]], p1: [[1196.0]])], p1: s1(p0: s0(p0: [[1197.0], [1198.0]], p1: [[1199.0]]), p1: [[s0(p0: [[1200.0], [1201.0]], p1: [[1202.0]])]], p2: s0(p0: [[1203.0], [1204.0]], p1: [[1205.0]]), p3: s0(p0: [[1206.0], [1207.0]], p1: [[1208.0]]))))), p1: s0(p0: [[1209.0], [1210.0]], p1: [[1211.0]]))
    let v6: [s8] = [s8(p0: [s2(p0: [s0(p0: [[1212.0], [1213.0]], p1: [[1214.0]]), s0(p0: [[1215.0], [1216.0]], p1: [[1217.0]]), s0(p0: [[1218.0], [1219.0]], p1: [[1220.0]])], p1: s1(p0: s0(p0: [[1221.0], [1222.0]], p1: [[1223.0]]), p1: [[s0(p0: [[1224.0], [1225.0]], p1: [[1226.0]])]], p2: s0(p0: [[1227.0], [1228.0]], p1: [[1229.0]]), p3: s0(p0: [[1230.0], [1231.0]], p1: [[1232.0]]))), s2(p0: [s0(p0: [[1233.0], [1234.0]], p1: [[1235.0]]), s0(p0: [[1236.0], [1237.0]], p1: [[1238.0]]), s0(p0: [[1239.0], [1240.0]], p1: [[1241.0]])], p1: s1(p0: s0(p0: [[1242.0], [1243.0]], p1: [[1244.0]]), p1: [[s0(p0: [[1245.0], [1246.0]], p1: [[1247.0]])]], p2: s0(p0: [[1248.0], [1249.0]], p1: [[1250.0]]), p3: s0(p0: [[1251.0], [1252.0]], p1: [[1253.0]]))), s2(p0: [s0(p0: [[1254.0], [1255.0]], p1: [[1256.0]]), s0(p0: [[1257.0], [1258.0]], p1: [[1259.0]]), s0(p0: [[1260.0], [1261.0]], p1: [[1262.0]])], p1: s1(p0: s0(p0: [[1263.0], [1264.0]], p1: [[1265.0]]), p1: [[s0(p0: [[1266.0], [1267.0]], p1: [[1268.0]])]], p2: s0(p0: [[1269.0], [1270.0]], p1: [[1271.0]]), p3: s0(p0: [[1272.0], [1273.0]], p1: [[1274.0]])))], p1: s5(p0: [s0(p0: [[1275.0], [1276.0]], p1: [[1277.0]])], p1: s3(p0: [[s2(p0: [s0(p0: [[1278.0], [1279.0]], p1: [[1280.0]]), s0(p0: [[1281.0], [1282.0]], p1: [[1283.0]]), s0(p0: [[1284.0], [1285.0]], p1: [[1286.0]])], p1: s1(p0: s0(p0: [[1287.0], [1288.0]], p1: [[1289.0]]), p1: [[s0(p0: [[1290.0], [1291.0]], p1: [[1292.0]])]], p2: s0(p0: [[1293.0], [1294.0]], p1: [[1295.0]]), p3: s0(p0: [[1296.0], [1297.0]], p1: [[1298.0]])))], [s2(p0: [s0(p0: [[1299.0], [1300.0]], p1: [[1301.0]]), s0(p0: [[1302.0], [1303.0]], p1: [[1304.0]]), s0(p0: [[1305.0], [1306.0]], p1: [[1307.0]])], p1: s1(p0: s0(p0: [[1308.0], [1309.0]], p1: [[1310.0]]), p1: [[s0(p0: [[1311.0], [1312.0]], p1: [[1313.0]])]], p2: s0(p0: [[1314.0], [1315.0]], p1: [[1316.0]]), p3: s0(p0: [[1317.0], [1318.0]], p1: [[1319.0]])))], [s2(p0: [s0(p0: [[1320.0], [1321.0]], p1: [[1322.0]]), s0(p0: [[1323.0], [1324.0]], p1: [[1325.0]]), s0(p0: [[1326.0], [1327.0]], p1: [[1328.0]])], p1: s1(p0: s0(p0: [[1329.0], [1330.0]], p1: [[1331.0]]), p1: [[s0(p0: [[1332.0], [1333.0]], p1: [[1334.0]])]], p2: s0(p0: [[1335.0], [1336.0]], p1: [[1337.0]]), p3: s0(p0: [[1338.0], [1339.0]], p1: [[1340.0]])))]], p1: s2(p0: [s0(p0: [[1341.0], [1342.0]], p1: [[1343.0]]), s0(p0: [[1344.0], [1345.0]], p1: [[1346.0]]), s0(p0: [[1347.0], [1348.0]], p1: [[1349.0]])], p1: s1(p0: s0(p0: [[1350.0], [1351.0]], p1: [[1352.0]]), p1: [[s0(p0: [[1353.0], [1354.0]], p1: [[1355.0]])]], p2: s0(p0: [[1356.0], [1357.0]], p1: [[1358.0]]), p3: s0(p0: [[1359.0], [1360.0]], p1: [[1361.0]]))), p2: [s2(p0: [s0(p0: [[1362.0], [1363.0]], p1: [[1364.0]]), s0(p0: [[1365.0], [1366.0]], p1: [[1367.0]]), s0(p0: [[1368.0], [1369.0]], p1: [[1370.0]])], p1: s1(p0: s0(p0: [[1371.0], [1372.0]], p1: [[1373.0]]), p1: [[s0(p0: [[1374.0], [1375.0]], p1: [[1376.0]])]], p2: s0(p0: [[1377.0], [1378.0]], p1: [[1379.0]]), p3: s0(p0: [[1380.0], [1381.0]], p1: [[1382.0]])))], p3: s2(p0: [s0(p0: [[1383.0], [1384.0]], p1: [[1385.0]]), s0(p0: [[1386.0], [1387.0]], p1: [[1388.0]]), s0(p0: [[1389.0], [1390.0]], p1: [[1391.0]])], p1: s1(p0: s0(p0: [[1392.0], [1393.0]], p1: [[1394.0]]), p1: [[s0(p0: [[1395.0], [1396.0]], p1: [[1397.0]])]], p2: s0(p0: [[1398.0], [1399.0]], p1: [[1400.0]]), p3: s0(p0: [[1401.0], [1402.0]], p1: [[1403.0]]))))))]
    let v7: Double = 1404.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 1404.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4, v5, v6, v7)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
