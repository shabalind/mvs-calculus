  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
    var p2: s0
    var p3: s0
    var p4: s0
    var p5: s0
    var p6: s0
  }
  struct s2 {
    var p0: [s1]
    var p1: [s0]
  }
  struct s4 {
    var p0: s0
    var p1: s0
    var p2: s0
  }
  struct s6 {
    var p0: [s1]
    var p1: s2
  }
  func f85(_ v0: s4) -> s4 {
    let v19: s0 = v0.p0
    var v33: s4 = v0
    v33.p2 = v19
    return v33
  }
  func f82(_ v0: s2) -> s2 {
    let v7: [s2] = [v0, v0, v0, v0, v0, v0]
    var v3: [s2] = v7
    let v8: s2 = v3[5]
    return v8
  }
  func f79(_ v0: s2, _ v1: [s1]) -> s2 {
    let v7: s2 = f82(v0)
    let v11: s2 = f82(v7)
    let v13: s2 = f82(v11)
    let v33: s2 = f82(v13)
    var v93: s2 = v33
    var v171: s2 = v93
    return v171
  }
  func f68(_ v0: [s1]) -> [s1] {
    var v6: [s1] = v0
    let v8: [[s1]] = [v0, v6, v6, v0, v0, v0]
    let v5: [s1] = v8[2]
    return v5
  }
  func f67(_ v0: s6) -> s6 {
    var v2: s6 = v0
    var v8: s6 = v2
    var v3: s6 = v8
    var v7: s6 = v3
    let v5: [s1] = v7.p0
    let v11: s2 = v0.p1
    let v9: [s1] = v11.p0
    var v4: [s1] = v5
    let v17: [s1] = v11.p0
    var v6: s2 = v11
    let v13: s2 = f82(v11)
    v7.p1 = v13
    let v15: s1 = v9[1]
    let v16: s2 = f82(v11)
    v3.p1 = v16
    let v20: s2 = f82(v16)
    let v25: [s1] = v6.p0
    v2.p1 = v11
    let v33: [s0] = v20.p1
    let v34: s1 = v17[1]
    v3.p0 = v17
    v2.p0 = v25
    v6.p1 = v33
    v6.p0 = v4
    v4[0] = v34
    v7.p1 = v16
    v4[1] = v15
    v8.p1 = v6
    return v7
  }
  func f52(_ v0: [s6]) -> [s6] {
    var v6: [s6] = v0
    let v3: s6 = v0[2]
    var v4: s6 = v3
    v6 = v0
    let v2: [[s6]] = [v6, v6, v0, v0]
    let v7: s6 = f67(v4)
    let v1: s2 = v3.p1
    var v10: s2 = v1
    v4 = v3
    let v8: [s1] = v10.p0
    let v13: [s1] = f68(v8)
    v6[0] = v4
    v10.p0 = v8
    v6[2] = v7
    v4.p0 = v13
    v6[2] = v3
    var v9: [s6] = v0
    let v43: s6 = v9[0]
    v9[1] = v7
    v6[2] = v43
    let v48: [s6] = v2[0]
    var v63: [s6] = v48
    v9 = v48
    return v63
  }
  func f49(_ v0: s4) -> s4 {
    let v7: s4 = f85(v0)
    let v6: s4 = f85(v7)
    var v1: s4 = v0
    let v5: s0 = v0.p0
    v1.p0 = v5
    v1.p2 = v5
    var v9: s4 = v1
    var v13: s4 = v1
    let v35: s4 = f85(v7)
    let v20: s4 = f85(v9)
    let v21: s4 = f85(v35)
    let v27: [s4] = [v13, v35, v6, v21, v7, v20, v20]
    let v73: s4 = v27[1]
    return v73
  }
  func f48(_ v0: s4) -> s4 {
    var v2: s4 = v0
    var v3: s4 = v2
    let v1: s4 = f85(v3)
    let v9: s0 = v0.p0
    var v5: s4 = v2
    let v16: s4 = f49(v5)
    v2.p2 = v9
    v2 = v16
    var v13: s4 = v2
    let v8: s0 = v13.p0
    let v14: s4 = f49(v5)
    v13.p2 = v8
    var v18: s4 = v0
    var v36: s4 = v14
    v18.p1 = v8
    v36.p0 = v9
    let v40: s0 = v18.p2
    v5.p2 = v40
    v2 = v1
    v36 = v2
    v36 = v18
    return v36
  }
  func f42(_ v0: s2) -> s2 {
    let v3: s2 = f82(v0)
    let v2: [s2] = [v3, v3, v0, v0, v3, v0, v0]
    let v8: [s1] = v0.p0
    var v7: [s1] = v8
    let v10: s1 = v8[1]
    var v24: [s1] = v7
    let v20: s1 = v24[1]
    let v14: s2 = v2[5]
    let v16: s1 = v8[1]
    let v37: [s1] = v14.p0
    var v30: s1 = v16
    var v59: [s1] = v37
    v7[0] = v30
    var v49: [s1] = v59
    let v139: s0 = v20.p6
    v59[0] = v10
    v30.p0 = v139
    let v117: s6 = s6(p0: v49, p1: v14)
    v49 = v24
    var v245: s6 = v117
    v245.p0 = v59
    let v253: s2 = v245.p1
    v245.p1 = v14
    return v253
  }
  func f34(_ v0: s6, _ v1: s2) -> s2 {
    let v5: [s2] = [v1, v1, v1, v1, v1, v1, v1]
    let v7: s2 = v0.p1
    var v9: s6 = v0
    let v6: s2 = v9.p1
    let v4: [s1] = v9.p0
    let v21: s2 = f79(v6, v4)
    var v17: [s2] = v5
    let v25: s2 = f79(v21, v4)
    let v20: s2 = f42(v25)
    v9.p0 = v4
    let v16: s2 = v17[6]
    v17[5] = v16
    v17[5] = v20
    v17[4] = v7
    let v41: s2 = v17[5]
    return v41
  }
  func f32(_ v0: s1, _ v1: s2) -> s1 {
    let v2: [s2] = [v1, v1, v1, v1, v1, v1]
    let v5: s2 = v2[3]
    let v31: s2 = f82(v5)
    let v73: [s1] = v31.p0
    let v52: s1 = v73[0]
    return v52
  }
  func f30(_ v0: s6) -> s6 {
    let v1: [s1] = v0.p0
    let v7: s2 = v0.p1
    let v8: s1 = v1[1]
    let v6: s1 = f32(v8, v7)
    let v9: [s1] = f68(v1)
    let v15: s2 = f82(v7)
    var v27: [s1] = v9
    let v59: s2 = f34(v0, v15)
    v27[0] = v6
    let v58: s6 = s6(p0: v27, p1: v59)
    let v110: s6 = f67(v58)
    return v110
  }
  func f21(_ v0: s1) -> s1 {
    var v2: s1 = v0
    let v1: s0 = v0.p0
    let v4: s0 = v0.p1
    let v6: [[Double]] = v4.p0
    let v3: s0 = v0.p0
    v2.p0 = v4
    v2.p4 = v1
    let v10: s0 = v2.p4
    let v14: s0 = v2.p1
    v2.p0 = v4
    let v9: s4 = s4(p0: v3, p1: v3, p2: v1)
    let v12: s4 = f48(v9)
    let v21: s0 = v9.p1
    v2.p3 = v10
    let v20: s0 = v0.p2
    let v29: s4 = f85(v12)
    v2.p4 = v14
    var v16: s0 = v20
    let v35: s1 = s1(p0: v20, p1: v10, p2: v1, p3: v16, p4: v20, p5: v20, p6: v3)
    v2.p3 = v21
    let v69: s4 = f85(v29)
    let v75: s0 = v69.p0
    v2.p5 = v75
    v16.p0 = v6
    v2 = v35
    return v35
  }
  func f7(_ v0: Double, _ v1: s1) -> Double {
    let v6: s1 = f21(v1)
    var v2: Double = v0
    var v12: Double = v2
    var v3: Double = v2
    let v8: s0 = v6.p6
    var v13: s0 = v8
    let v20: [[Double]] = v8.p1
    let v17: [Double] = v20[0]
    var v15: [Double] = v17
    var v14: s0 = v13
    let v10: [[Double]] = v13.p0
    v14.p0 = v10
    v15[0] = v12
    v13.p0 = v10
    v13 = v14
    let v42: [Double] = v10[2]
    v14.p0 = v10
    let v23: Double = v15[0]
    v14.p1 = v20
    let v41: [[Double]] = [v42, v42, v15, v17, v15]
    let v40: s0 = v6.p5
    let v31: [[Double]] = v40.p0
    v15[0] = v23
    v14.p0 = v31
    v15[0] = v0
    var v71: [[Double]] = v41
    var v82: [[Double]] = v71
    let v115: [Double] = v82[3]
    v15[0] = v3
    let v364: Double = v115[0]
    return v364
  }
  @inline(never)
  func f0(_ v0: [s6], _ v1: Double) -> Double {
    let v2: [s6] = f52(v0)
    let v6: s6 = v0[0]
    let v8: s6 = v2[0]
    var v5: s6 = v8
    let v17: [s1] = v5.p0
    let v12: s1 = v17[1]
    v5.p0 = v17
    let v9: [s1] = f68(v17)
    v5.p0 = v9
    var v13: [s1] = v9
    let v15: [s1] = v6.p0
    let v14: s1 = v9[0]
    v5.p0 = v13
    let v19: [s1] = f68(v9)
    let v24: [s1] = v8.p0
    v5.p0 = v19
    let v28: s1 = v13[0]
    let v21: s6 = v2[2]
    let v23: Double = f7(v1, v28)
    let v46: s1 = v24[0]
    v5.p0 = v24
    let v22: s6 = f30(v21)
    v5.p0 = v17
    let v86: s1 = v19[1]
    var v65: Double = v23
    v13[1] = v12
    let v53: s2 = v22.p1
    let v132: Double = f7(v65, v46)
    var v56: Double = v132
    v5.p0 = v15
    var v62: [s1] = v9
    v56 = v65
    var v141: [s1] = v62
    let v118: s1 = f32(v14, v53)
    v5.p0 = v141
    v141[0] = v86
    var v128: Double = v56
    v5.p0 = v141
    v62[0] = v86
    v141[1] = v118
    return v128
  }
  func benchmark() {
    let v0: [s6] = [s6(p0: [s1(p0: s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0]]), p1: s0(p0: [[4.0], [5.0], [6.0]], p1: [[7.0]]), p2: s0(p0: [[8.0], [9.0], [10.0]], p1: [[11.0]]), p3: s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0]]), p4: s0(p0: [[16.0], [17.0], [18.0]], p1: [[19.0]]), p5: s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0]]), p6: s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0]])), s1(p0: s0(p0: [[28.0], [29.0], [30.0]], p1: [[31.0]]), p1: s0(p0: [[32.0], [33.0], [34.0]], p1: [[35.0]]), p2: s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0]]), p3: s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0]]), p4: s0(p0: [[44.0], [45.0], [46.0]], p1: [[47.0]]), p5: s0(p0: [[48.0], [49.0], [50.0]], p1: [[51.0]]), p6: s0(p0: [[52.0], [53.0], [54.0]], p1: [[55.0]]))], p1: s2(p0: [s1(p0: s0(p0: [[56.0], [57.0], [58.0]], p1: [[59.0]]), p1: s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0]]), p2: s0(p0: [[64.0], [65.0], [66.0]], p1: [[67.0]]), p3: s0(p0: [[68.0], [69.0], [70.0]], p1: [[71.0]]), p4: s0(p0: [[72.0], [73.0], [74.0]], p1: [[75.0]]), p5: s0(p0: [[76.0], [77.0], [78.0]], p1: [[79.0]]), p6: s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0]])), s1(p0: s0(p0: [[84.0], [85.0], [86.0]], p1: [[87.0]]), p1: s0(p0: [[88.0], [89.0], [90.0]], p1: [[91.0]]), p2: s0(p0: [[92.0], [93.0], [94.0]], p1: [[95.0]]), p3: s0(p0: [[96.0], [97.0], [98.0]], p1: [[99.0]]), p4: s0(p0: [[100.0], [101.0], [102.0]], p1: [[103.0]]), p5: s0(p0: [[104.0], [105.0], [106.0]], p1: [[107.0]]), p6: s0(p0: [[108.0], [109.0], [110.0]], p1: [[111.0]]))], p1: [s0(p0: [[112.0], [113.0], [114.0]], p1: [[115.0]]), s0(p0: [[116.0], [117.0], [118.0]], p1: [[119.0]]), s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0]])])), s6(p0: [s1(p0: s0(p0: [[124.0], [125.0], [126.0]], p1: [[127.0]]), p1: s0(p0: [[128.0], [129.0], [130.0]], p1: [[131.0]]), p2: s0(p0: [[132.0], [133.0], [134.0]], p1: [[135.0]]), p3: s0(p0: [[136.0], [137.0], [138.0]], p1: [[139.0]]), p4: s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0]]), p5: s0(p0: [[144.0], [145.0], [146.0]], p1: [[147.0]]), p6: s0(p0: [[148.0], [149.0], [150.0]], p1: [[151.0]])), s1(p0: s0(p0: [[152.0], [153.0], [154.0]], p1: [[155.0]]), p1: s0(p0: [[156.0], [157.0], [158.0]], p1: [[159.0]]), p2: s0(p0: [[160.0], [161.0], [162.0]], p1: [[163.0]]), p3: s0(p0: [[164.0], [165.0], [166.0]], p1: [[167.0]]), p4: s0(p0: [[168.0], [169.0], [170.0]], p1: [[171.0]]), p5: s0(p0: [[172.0], [173.0], [174.0]], p1: [[175.0]]), p6: s0(p0: [[176.0], [177.0], [178.0]], p1: [[179.0]]))], p1: s2(p0: [s1(p0: s0(p0: [[180.0], [181.0], [182.0]], p1: [[183.0]]), p1: s0(p0: [[184.0], [185.0], [186.0]], p1: [[187.0]]), p2: s0(p0: [[188.0], [189.0], [190.0]], p1: [[191.0]]), p3: s0(p0: [[192.0], [193.0], [194.0]], p1: [[195.0]]), p4: s0(p0: [[196.0], [197.0], [198.0]], p1: [[199.0]]), p5: s0(p0: [[200.0], [201.0], [202.0]], p1: [[203.0]]), p6: s0(p0: [[204.0], [205.0], [206.0]], p1: [[207.0]])), s1(p0: s0(p0: [[208.0], [209.0], [210.0]], p1: [[211.0]]), p1: s0(p0: [[212.0], [213.0], [214.0]], p1: [[215.0]]), p2: s0(p0: [[216.0], [217.0], [218.0]], p1: [[219.0]]), p3: s0(p0: [[220.0], [221.0], [222.0]], p1: [[223.0]]), p4: s0(p0: [[224.0], [225.0], [226.0]], p1: [[227.0]]), p5: s0(p0: [[228.0], [229.0], [230.0]], p1: [[231.0]]), p6: s0(p0: [[232.0], [233.0], [234.0]], p1: [[235.0]]))], p1: [s0(p0: [[236.0], [237.0], [238.0]], p1: [[239.0]]), s0(p0: [[240.0], [241.0], [242.0]], p1: [[243.0]]), s0(p0: [[244.0], [245.0], [246.0]], p1: [[247.0]])])), s6(p0: [s1(p0: s0(p0: [[248.0], [249.0], [250.0]], p1: [[251.0]]), p1: s0(p0: [[252.0], [253.0], [254.0]], p1: [[255.0]]), p2: s0(p0: [[256.0], [257.0], [258.0]], p1: [[259.0]]), p3: s0(p0: [[260.0], [261.0], [262.0]], p1: [[263.0]]), p4: s0(p0: [[264.0], [265.0], [266.0]], p1: [[267.0]]), p5: s0(p0: [[268.0], [269.0], [270.0]], p1: [[271.0]]), p6: s0(p0: [[272.0], [273.0], [274.0]], p1: [[275.0]])), s1(p0: s0(p0: [[276.0], [277.0], [278.0]], p1: [[279.0]]), p1: s0(p0: [[280.0], [281.0], [282.0]], p1: [[283.0]]), p2: s0(p0: [[284.0], [285.0], [286.0]], p1: [[287.0]]), p3: s0(p0: [[288.0], [289.0], [290.0]], p1: [[291.0]]), p4: s0(p0: [[292.0], [293.0], [294.0]], p1: [[295.0]]), p5: s0(p0: [[296.0], [297.0], [298.0]], p1: [[299.0]]), p6: s0(p0: [[300.0], [301.0], [302.0]], p1: [[303.0]]))], p1: s2(p0: [s1(p0: s0(p0: [[304.0], [305.0], [306.0]], p1: [[307.0]]), p1: s0(p0: [[308.0], [309.0], [310.0]], p1: [[311.0]]), p2: s0(p0: [[312.0], [313.0], [314.0]], p1: [[315.0]]), p3: s0(p0: [[316.0], [317.0], [318.0]], p1: [[319.0]]), p4: s0(p0: [[320.0], [321.0], [322.0]], p1: [[323.0]]), p5: s0(p0: [[324.0], [325.0], [326.0]], p1: [[327.0]]), p6: s0(p0: [[328.0], [329.0], [330.0]], p1: [[331.0]])), s1(p0: s0(p0: [[332.0], [333.0], [334.0]], p1: [[335.0]]), p1: s0(p0: [[336.0], [337.0], [338.0]], p1: [[339.0]]), p2: s0(p0: [[340.0], [341.0], [342.0]], p1: [[343.0]]), p3: s0(p0: [[344.0], [345.0], [346.0]], p1: [[347.0]]), p4: s0(p0: [[348.0], [349.0], [350.0]], p1: [[351.0]]), p5: s0(p0: [[352.0], [353.0], [354.0]], p1: [[355.0]]), p6: s0(p0: [[356.0], [357.0], [358.0]], p1: [[359.0]]))], p1: [s0(p0: [[360.0], [361.0], [362.0]], p1: [[363.0]]), s0(p0: [[364.0], [365.0], [366.0]], p1: [[367.0]]), s0(p0: [[368.0], [369.0], [370.0]], p1: [[371.0]])]))]
    let v1: Double = 372.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 372.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
