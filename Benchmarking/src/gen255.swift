  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: Double
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: [Double]
    var p1: s1
    var p2: [s1]
  }
  struct s3 {
    var p0: [s2]
    var p1: [[s2]]
  }
  struct s4 {
    var p0: [s2]
    var p1: [s1]
  }
  struct s5 {
    var p0: [s1]
    var p1: [s2]
  }
  struct s6 {
    var p0: s3
  }
  struct s8 {
    var p0: s3
    var p1: [[s6]]
  }
  struct s9 {
    var p0: s2
    var p1: s5
  }
  func f5(_ v0: s0) -> s0 {
    var v1: s0 = v0
    var v6: s0 = v0
    var v4: s0 = v0
    var v3: s0 = v1
    var v8: s0 = v0
    let v2: Double = v6.p1
    v4.p1 = v2
    var v9: s0 = v8
    v6.p1 = v2
    v9 = v3
    let v12: Double = v1.p1
    var v5: Double = v2
    var v16: s0 = v3
    let v14: [s0] = [v16]
    let v19: Double = v8.p1
    var v30: s0 = v0
    var v10: [s0] = v14
    v30.p1 = v12
    v10[0] = v3
    let v25: s0 = v10[0]
    let v17: Double = v5 + v2
    let v20: s0 = v14[0]
    let v37: Double = v6.p1
    let v52: [Double] = [v5, v17, v19, v2, v37]
    v16.p1 = v2
    v6 = v4
    var v36: [s0] = v10
    v16.p1 = v5
    let v28: Double = v3.p1
    v30.p1 = v37
    v36[0] = v3
    v36[0] = v16
    v16.p1 = v2
    let v22: Double = v52[1]
    v10[0] = v25
    let v24: [[Double]] = v20.p0
    v36[0] = v9
    let v55: s0 = v36[0]
    let v80: [[Double]] = v0.p0
    v36 = v10
    v4.p0 = v80
    v30 = v16
    let v48: [[Double]] = v3.p0
    v30.p0 = v24
    v9.p0 = v80
    v1.p1 = v22
    var v103: s0 = v55
    v1 = v30
    let v65: Double = v16.p1
    v1.p1 = v28
    v1.p1 = v65
    let v93: [[Double]] = v0.p0
    v8.p0 = v24
    v9.p0 = v93
    v1.p0 = v48
    v1.p0 = v93
    return v103
  }
  @inline(never)
  func f0(_ v0: [s4], _ v1: s0, _ v2: [s5], _ v3: s2, _ v4: s9, _ v5: [s1], _ v6: s8, _ v7: s2, _ v8: Double) -> Double {
    let v33: s0 = f5(v1)
    let v99: Double = v33.p1
    return v99
  }
  func benchmark() {
    let v0: [s4] = [s4(p0: [s2(p0: [0.0, 1.0], p1: s1(p0: s0(p0: [[2.0], [3.0]], p1: 4.0), p1: [s0(p0: [[5.0], [6.0]], p1: 7.0), s0(p0: [[8.0], [9.0]], p1: 10.0), s0(p0: [[11.0], [12.0]], p1: 13.0)]), p2: [s1(p0: s0(p0: [[14.0], [15.0]], p1: 16.0), p1: [s0(p0: [[17.0], [18.0]], p1: 19.0), s0(p0: [[20.0], [21.0]], p1: 22.0), s0(p0: [[23.0], [24.0]], p1: 25.0)]), s1(p0: s0(p0: [[26.0], [27.0]], p1: 28.0), p1: [s0(p0: [[29.0], [30.0]], p1: 31.0), s0(p0: [[32.0], [33.0]], p1: 34.0), s0(p0: [[35.0], [36.0]], p1: 37.0)])])], p1: [s1(p0: s0(p0: [[38.0], [39.0]], p1: 40.0), p1: [s0(p0: [[41.0], [42.0]], p1: 43.0), s0(p0: [[44.0], [45.0]], p1: 46.0), s0(p0: [[47.0], [48.0]], p1: 49.0)]), s1(p0: s0(p0: [[50.0], [51.0]], p1: 52.0), p1: [s0(p0: [[53.0], [54.0]], p1: 55.0), s0(p0: [[56.0], [57.0]], p1: 58.0), s0(p0: [[59.0], [60.0]], p1: 61.0)]), s1(p0: s0(p0: [[62.0], [63.0]], p1: 64.0), p1: [s0(p0: [[65.0], [66.0]], p1: 67.0), s0(p0: [[68.0], [69.0]], p1: 70.0), s0(p0: [[71.0], [72.0]], p1: 73.0)])]), s4(p0: [s2(p0: [74.0, 75.0], p1: s1(p0: s0(p0: [[76.0], [77.0]], p1: 78.0), p1: [s0(p0: [[79.0], [80.0]], p1: 81.0), s0(p0: [[82.0], [83.0]], p1: 84.0), s0(p0: [[85.0], [86.0]], p1: 87.0)]), p2: [s1(p0: s0(p0: [[88.0], [89.0]], p1: 90.0), p1: [s0(p0: [[91.0], [92.0]], p1: 93.0), s0(p0: [[94.0], [95.0]], p1: 96.0), s0(p0: [[97.0], [98.0]], p1: 99.0)]), s1(p0: s0(p0: [[100.0], [101.0]], p1: 102.0), p1: [s0(p0: [[103.0], [104.0]], p1: 105.0), s0(p0: [[106.0], [107.0]], p1: 108.0), s0(p0: [[109.0], [110.0]], p1: 111.0)])])], p1: [s1(p0: s0(p0: [[112.0], [113.0]], p1: 114.0), p1: [s0(p0: [[115.0], [116.0]], p1: 117.0), s0(p0: [[118.0], [119.0]], p1: 120.0), s0(p0: [[121.0], [122.0]], p1: 123.0)]), s1(p0: s0(p0: [[124.0], [125.0]], p1: 126.0), p1: [s0(p0: [[127.0], [128.0]], p1: 129.0), s0(p0: [[130.0], [131.0]], p1: 132.0), s0(p0: [[133.0], [134.0]], p1: 135.0)]), s1(p0: s0(p0: [[136.0], [137.0]], p1: 138.0), p1: [s0(p0: [[139.0], [140.0]], p1: 141.0), s0(p0: [[142.0], [143.0]], p1: 144.0), s0(p0: [[145.0], [146.0]], p1: 147.0)])])]
    let v1: s0 = s0(p0: [[148.0], [149.0]], p1: 150.0)
    let v2: [s5] = [s5(p0: [s1(p0: s0(p0: [[151.0], [152.0]], p1: 153.0), p1: [s0(p0: [[154.0], [155.0]], p1: 156.0), s0(p0: [[157.0], [158.0]], p1: 159.0), s0(p0: [[160.0], [161.0]], p1: 162.0)]), s1(p0: s0(p0: [[163.0], [164.0]], p1: 165.0), p1: [s0(p0: [[166.0], [167.0]], p1: 168.0), s0(p0: [[169.0], [170.0]], p1: 171.0), s0(p0: [[172.0], [173.0]], p1: 174.0)]), s1(p0: s0(p0: [[175.0], [176.0]], p1: 177.0), p1: [s0(p0: [[178.0], [179.0]], p1: 180.0), s0(p0: [[181.0], [182.0]], p1: 183.0), s0(p0: [[184.0], [185.0]], p1: 186.0)])], p1: [s2(p0: [187.0, 188.0], p1: s1(p0: s0(p0: [[189.0], [190.0]], p1: 191.0), p1: [s0(p0: [[192.0], [193.0]], p1: 194.0), s0(p0: [[195.0], [196.0]], p1: 197.0), s0(p0: [[198.0], [199.0]], p1: 200.0)]), p2: [s1(p0: s0(p0: [[201.0], [202.0]], p1: 203.0), p1: [s0(p0: [[204.0], [205.0]], p1: 206.0), s0(p0: [[207.0], [208.0]], p1: 209.0), s0(p0: [[210.0], [211.0]], p1: 212.0)]), s1(p0: s0(p0: [[213.0], [214.0]], p1: 215.0), p1: [s0(p0: [[216.0], [217.0]], p1: 218.0), s0(p0: [[219.0], [220.0]], p1: 221.0), s0(p0: [[222.0], [223.0]], p1: 224.0)])]), s2(p0: [225.0, 226.0], p1: s1(p0: s0(p0: [[227.0], [228.0]], p1: 229.0), p1: [s0(p0: [[230.0], [231.0]], p1: 232.0), s0(p0: [[233.0], [234.0]], p1: 235.0), s0(p0: [[236.0], [237.0]], p1: 238.0)]), p2: [s1(p0: s0(p0: [[239.0], [240.0]], p1: 241.0), p1: [s0(p0: [[242.0], [243.0]], p1: 244.0), s0(p0: [[245.0], [246.0]], p1: 247.0), s0(p0: [[248.0], [249.0]], p1: 250.0)]), s1(p0: s0(p0: [[251.0], [252.0]], p1: 253.0), p1: [s0(p0: [[254.0], [255.0]], p1: 256.0), s0(p0: [[257.0], [258.0]], p1: 259.0), s0(p0: [[260.0], [261.0]], p1: 262.0)])])]), s5(p0: [s1(p0: s0(p0: [[263.0], [264.0]], p1: 265.0), p1: [s0(p0: [[266.0], [267.0]], p1: 268.0), s0(p0: [[269.0], [270.0]], p1: 271.0), s0(p0: [[272.0], [273.0]], p1: 274.0)]), s1(p0: s0(p0: [[275.0], [276.0]], p1: 277.0), p1: [s0(p0: [[278.0], [279.0]], p1: 280.0), s0(p0: [[281.0], [282.0]], p1: 283.0), s0(p0: [[284.0], [285.0]], p1: 286.0)]), s1(p0: s0(p0: [[287.0], [288.0]], p1: 289.0), p1: [s0(p0: [[290.0], [291.0]], p1: 292.0), s0(p0: [[293.0], [294.0]], p1: 295.0), s0(p0: [[296.0], [297.0]], p1: 298.0)])], p1: [s2(p0: [299.0, 300.0], p1: s1(p0: s0(p0: [[301.0], [302.0]], p1: 303.0), p1: [s0(p0: [[304.0], [305.0]], p1: 306.0), s0(p0: [[307.0], [308.0]], p1: 309.0), s0(p0: [[310.0], [311.0]], p1: 312.0)]), p2: [s1(p0: s0(p0: [[313.0], [314.0]], p1: 315.0), p1: [s0(p0: [[316.0], [317.0]], p1: 318.0), s0(p0: [[319.0], [320.0]], p1: 321.0), s0(p0: [[322.0], [323.0]], p1: 324.0)]), s1(p0: s0(p0: [[325.0], [326.0]], p1: 327.0), p1: [s0(p0: [[328.0], [329.0]], p1: 330.0), s0(p0: [[331.0], [332.0]], p1: 333.0), s0(p0: [[334.0], [335.0]], p1: 336.0)])]), s2(p0: [337.0, 338.0], p1: s1(p0: s0(p0: [[339.0], [340.0]], p1: 341.0), p1: [s0(p0: [[342.0], [343.0]], p1: 344.0), s0(p0: [[345.0], [346.0]], p1: 347.0), s0(p0: [[348.0], [349.0]], p1: 350.0)]), p2: [s1(p0: s0(p0: [[351.0], [352.0]], p1: 353.0), p1: [s0(p0: [[354.0], [355.0]], p1: 356.0), s0(p0: [[357.0], [358.0]], p1: 359.0), s0(p0: [[360.0], [361.0]], p1: 362.0)]), s1(p0: s0(p0: [[363.0], [364.0]], p1: 365.0), p1: [s0(p0: [[366.0], [367.0]], p1: 368.0), s0(p0: [[369.0], [370.0]], p1: 371.0), s0(p0: [[372.0], [373.0]], p1: 374.0)])])])]
    let v3: s2 = s2(p0: [375.0, 376.0], p1: s1(p0: s0(p0: [[377.0], [378.0]], p1: 379.0), p1: [s0(p0: [[380.0], [381.0]], p1: 382.0), s0(p0: [[383.0], [384.0]], p1: 385.0), s0(p0: [[386.0], [387.0]], p1: 388.0)]), p2: [s1(p0: s0(p0: [[389.0], [390.0]], p1: 391.0), p1: [s0(p0: [[392.0], [393.0]], p1: 394.0), s0(p0: [[395.0], [396.0]], p1: 397.0), s0(p0: [[398.0], [399.0]], p1: 400.0)]), s1(p0: s0(p0: [[401.0], [402.0]], p1: 403.0), p1: [s0(p0: [[404.0], [405.0]], p1: 406.0), s0(p0: [[407.0], [408.0]], p1: 409.0), s0(p0: [[410.0], [411.0]], p1: 412.0)])])
    let v4: s9 = s9(p0: s2(p0: [413.0, 414.0], p1: s1(p0: s0(p0: [[415.0], [416.0]], p1: 417.0), p1: [s0(p0: [[418.0], [419.0]], p1: 420.0), s0(p0: [[421.0], [422.0]], p1: 423.0), s0(p0: [[424.0], [425.0]], p1: 426.0)]), p2: [s1(p0: s0(p0: [[427.0], [428.0]], p1: 429.0), p1: [s0(p0: [[430.0], [431.0]], p1: 432.0), s0(p0: [[433.0], [434.0]], p1: 435.0), s0(p0: [[436.0], [437.0]], p1: 438.0)]), s1(p0: s0(p0: [[439.0], [440.0]], p1: 441.0), p1: [s0(p0: [[442.0], [443.0]], p1: 444.0), s0(p0: [[445.0], [446.0]], p1: 447.0), s0(p0: [[448.0], [449.0]], p1: 450.0)])]), p1: s5(p0: [s1(p0: s0(p0: [[451.0], [452.0]], p1: 453.0), p1: [s0(p0: [[454.0], [455.0]], p1: 456.0), s0(p0: [[457.0], [458.0]], p1: 459.0), s0(p0: [[460.0], [461.0]], p1: 462.0)]), s1(p0: s0(p0: [[463.0], [464.0]], p1: 465.0), p1: [s0(p0: [[466.0], [467.0]], p1: 468.0), s0(p0: [[469.0], [470.0]], p1: 471.0), s0(p0: [[472.0], [473.0]], p1: 474.0)]), s1(p0: s0(p0: [[475.0], [476.0]], p1: 477.0), p1: [s0(p0: [[478.0], [479.0]], p1: 480.0), s0(p0: [[481.0], [482.0]], p1: 483.0), s0(p0: [[484.0], [485.0]], p1: 486.0)])], p1: [s2(p0: [487.0, 488.0], p1: s1(p0: s0(p0: [[489.0], [490.0]], p1: 491.0), p1: [s0(p0: [[492.0], [493.0]], p1: 494.0), s0(p0: [[495.0], [496.0]], p1: 497.0), s0(p0: [[498.0], [499.0]], p1: 500.0)]), p2: [s1(p0: s0(p0: [[501.0], [502.0]], p1: 503.0), p1: [s0(p0: [[504.0], [505.0]], p1: 506.0), s0(p0: [[507.0], [508.0]], p1: 509.0), s0(p0: [[510.0], [511.0]], p1: 512.0)]), s1(p0: s0(p0: [[513.0], [514.0]], p1: 515.0), p1: [s0(p0: [[516.0], [517.0]], p1: 518.0), s0(p0: [[519.0], [520.0]], p1: 521.0), s0(p0: [[522.0], [523.0]], p1: 524.0)])]), s2(p0: [525.0, 526.0], p1: s1(p0: s0(p0: [[527.0], [528.0]], p1: 529.0), p1: [s0(p0: [[530.0], [531.0]], p1: 532.0), s0(p0: [[533.0], [534.0]], p1: 535.0), s0(p0: [[536.0], [537.0]], p1: 538.0)]), p2: [s1(p0: s0(p0: [[539.0], [540.0]], p1: 541.0), p1: [s0(p0: [[542.0], [543.0]], p1: 544.0), s0(p0: [[545.0], [546.0]], p1: 547.0), s0(p0: [[548.0], [549.0]], p1: 550.0)]), s1(p0: s0(p0: [[551.0], [552.0]], p1: 553.0), p1: [s0(p0: [[554.0], [555.0]], p1: 556.0), s0(p0: [[557.0], [558.0]], p1: 559.0), s0(p0: [[560.0], [561.0]], p1: 562.0)])])]))
    let v5: [s1] = [s1(p0: s0(p0: [[563.0], [564.0]], p1: 565.0), p1: [s0(p0: [[566.0], [567.0]], p1: 568.0), s0(p0: [[569.0], [570.0]], p1: 571.0), s0(p0: [[572.0], [573.0]], p1: 574.0)]), s1(p0: s0(p0: [[575.0], [576.0]], p1: 577.0), p1: [s0(p0: [[578.0], [579.0]], p1: 580.0), s0(p0: [[581.0], [582.0]], p1: 583.0), s0(p0: [[584.0], [585.0]], p1: 586.0)])]
    let v6: s8 = s8(p0: s3(p0: [s2(p0: [587.0, 588.0], p1: s1(p0: s0(p0: [[589.0], [590.0]], p1: 591.0), p1: [s0(p0: [[592.0], [593.0]], p1: 594.0), s0(p0: [[595.0], [596.0]], p1: 597.0), s0(p0: [[598.0], [599.0]], p1: 600.0)]), p2: [s1(p0: s0(p0: [[601.0], [602.0]], p1: 603.0), p1: [s0(p0: [[604.0], [605.0]], p1: 606.0), s0(p0: [[607.0], [608.0]], p1: 609.0), s0(p0: [[610.0], [611.0]], p1: 612.0)]), s1(p0: s0(p0: [[613.0], [614.0]], p1: 615.0), p1: [s0(p0: [[616.0], [617.0]], p1: 618.0), s0(p0: [[619.0], [620.0]], p1: 621.0), s0(p0: [[622.0], [623.0]], p1: 624.0)])]), s2(p0: [625.0, 626.0], p1: s1(p0: s0(p0: [[627.0], [628.0]], p1: 629.0), p1: [s0(p0: [[630.0], [631.0]], p1: 632.0), s0(p0: [[633.0], [634.0]], p1: 635.0), s0(p0: [[636.0], [637.0]], p1: 638.0)]), p2: [s1(p0: s0(p0: [[639.0], [640.0]], p1: 641.0), p1: [s0(p0: [[642.0], [643.0]], p1: 644.0), s0(p0: [[645.0], [646.0]], p1: 647.0), s0(p0: [[648.0], [649.0]], p1: 650.0)]), s1(p0: s0(p0: [[651.0], [652.0]], p1: 653.0), p1: [s0(p0: [[654.0], [655.0]], p1: 656.0), s0(p0: [[657.0], [658.0]], p1: 659.0), s0(p0: [[660.0], [661.0]], p1: 662.0)])]), s2(p0: [663.0, 664.0], p1: s1(p0: s0(p0: [[665.0], [666.0]], p1: 667.0), p1: [s0(p0: [[668.0], [669.0]], p1: 670.0), s0(p0: [[671.0], [672.0]], p1: 673.0), s0(p0: [[674.0], [675.0]], p1: 676.0)]), p2: [s1(p0: s0(p0: [[677.0], [678.0]], p1: 679.0), p1: [s0(p0: [[680.0], [681.0]], p1: 682.0), s0(p0: [[683.0], [684.0]], p1: 685.0), s0(p0: [[686.0], [687.0]], p1: 688.0)]), s1(p0: s0(p0: [[689.0], [690.0]], p1: 691.0), p1: [s0(p0: [[692.0], [693.0]], p1: 694.0), s0(p0: [[695.0], [696.0]], p1: 697.0), s0(p0: [[698.0], [699.0]], p1: 700.0)])])], p1: [[s2(p0: [701.0, 702.0], p1: s1(p0: s0(p0: [[703.0], [704.0]], p1: 705.0), p1: [s0(p0: [[706.0], [707.0]], p1: 708.0), s0(p0: [[709.0], [710.0]], p1: 711.0), s0(p0: [[712.0], [713.0]], p1: 714.0)]), p2: [s1(p0: s0(p0: [[715.0], [716.0]], p1: 717.0), p1: [s0(p0: [[718.0], [719.0]], p1: 720.0), s0(p0: [[721.0], [722.0]], p1: 723.0), s0(p0: [[724.0], [725.0]], p1: 726.0)]), s1(p0: s0(p0: [[727.0], [728.0]], p1: 729.0), p1: [s0(p0: [[730.0], [731.0]], p1: 732.0), s0(p0: [[733.0], [734.0]], p1: 735.0), s0(p0: [[736.0], [737.0]], p1: 738.0)])])]]), p1: [[s6(p0: s3(p0: [s2(p0: [739.0, 740.0], p1: s1(p0: s0(p0: [[741.0], [742.0]], p1: 743.0), p1: [s0(p0: [[744.0], [745.0]], p1: 746.0), s0(p0: [[747.0], [748.0]], p1: 749.0), s0(p0: [[750.0], [751.0]], p1: 752.0)]), p2: [s1(p0: s0(p0: [[753.0], [754.0]], p1: 755.0), p1: [s0(p0: [[756.0], [757.0]], p1: 758.0), s0(p0: [[759.0], [760.0]], p1: 761.0), s0(p0: [[762.0], [763.0]], p1: 764.0)]), s1(p0: s0(p0: [[765.0], [766.0]], p1: 767.0), p1: [s0(p0: [[768.0], [769.0]], p1: 770.0), s0(p0: [[771.0], [772.0]], p1: 773.0), s0(p0: [[774.0], [775.0]], p1: 776.0)])]), s2(p0: [777.0, 778.0], p1: s1(p0: s0(p0: [[779.0], [780.0]], p1: 781.0), p1: [s0(p0: [[782.0], [783.0]], p1: 784.0), s0(p0: [[785.0], [786.0]], p1: 787.0), s0(p0: [[788.0], [789.0]], p1: 790.0)]), p2: [s1(p0: s0(p0: [[791.0], [792.0]], p1: 793.0), p1: [s0(p0: [[794.0], [795.0]], p1: 796.0), s0(p0: [[797.0], [798.0]], p1: 799.0), s0(p0: [[800.0], [801.0]], p1: 802.0)]), s1(p0: s0(p0: [[803.0], [804.0]], p1: 805.0), p1: [s0(p0: [[806.0], [807.0]], p1: 808.0), s0(p0: [[809.0], [810.0]], p1: 811.0), s0(p0: [[812.0], [813.0]], p1: 814.0)])]), s2(p0: [815.0, 816.0], p1: s1(p0: s0(p0: [[817.0], [818.0]], p1: 819.0), p1: [s0(p0: [[820.0], [821.0]], p1: 822.0), s0(p0: [[823.0], [824.0]], p1: 825.0), s0(p0: [[826.0], [827.0]], p1: 828.0)]), p2: [s1(p0: s0(p0: [[829.0], [830.0]], p1: 831.0), p1: [s0(p0: [[832.0], [833.0]], p1: 834.0), s0(p0: [[835.0], [836.0]], p1: 837.0), s0(p0: [[838.0], [839.0]], p1: 840.0)]), s1(p0: s0(p0: [[841.0], [842.0]], p1: 843.0), p1: [s0(p0: [[844.0], [845.0]], p1: 846.0), s0(p0: [[847.0], [848.0]], p1: 849.0), s0(p0: [[850.0], [851.0]], p1: 852.0)])])], p1: [[s2(p0: [853.0, 854.0], p1: s1(p0: s0(p0: [[855.0], [856.0]], p1: 857.0), p1: [s0(p0: [[858.0], [859.0]], p1: 860.0), s0(p0: [[861.0], [862.0]], p1: 863.0), s0(p0: [[864.0], [865.0]], p1: 866.0)]), p2: [s1(p0: s0(p0: [[867.0], [868.0]], p1: 869.0), p1: [s0(p0: [[870.0], [871.0]], p1: 872.0), s0(p0: [[873.0], [874.0]], p1: 875.0), s0(p0: [[876.0], [877.0]], p1: 878.0)]), s1(p0: s0(p0: [[879.0], [880.0]], p1: 881.0), p1: [s0(p0: [[882.0], [883.0]], p1: 884.0), s0(p0: [[885.0], [886.0]], p1: 887.0), s0(p0: [[888.0], [889.0]], p1: 890.0)])])]]))], [s6(p0: s3(p0: [s2(p0: [891.0, 892.0], p1: s1(p0: s0(p0: [[893.0], [894.0]], p1: 895.0), p1: [s0(p0: [[896.0], [897.0]], p1: 898.0), s0(p0: [[899.0], [900.0]], p1: 901.0), s0(p0: [[902.0], [903.0]], p1: 904.0)]), p2: [s1(p0: s0(p0: [[905.0], [906.0]], p1: 907.0), p1: [s0(p0: [[908.0], [909.0]], p1: 910.0), s0(p0: [[911.0], [912.0]], p1: 913.0), s0(p0: [[914.0], [915.0]], p1: 916.0)]), s1(p0: s0(p0: [[917.0], [918.0]], p1: 919.0), p1: [s0(p0: [[920.0], [921.0]], p1: 922.0), s0(p0: [[923.0], [924.0]], p1: 925.0), s0(p0: [[926.0], [927.0]], p1: 928.0)])]), s2(p0: [929.0, 930.0], p1: s1(p0: s0(p0: [[931.0], [932.0]], p1: 933.0), p1: [s0(p0: [[934.0], [935.0]], p1: 936.0), s0(p0: [[937.0], [938.0]], p1: 939.0), s0(p0: [[940.0], [941.0]], p1: 942.0)]), p2: [s1(p0: s0(p0: [[943.0], [944.0]], p1: 945.0), p1: [s0(p0: [[946.0], [947.0]], p1: 948.0), s0(p0: [[949.0], [950.0]], p1: 951.0), s0(p0: [[952.0], [953.0]], p1: 954.0)]), s1(p0: s0(p0: [[955.0], [956.0]], p1: 957.0), p1: [s0(p0: [[958.0], [959.0]], p1: 960.0), s0(p0: [[961.0], [962.0]], p1: 963.0), s0(p0: [[964.0], [965.0]], p1: 966.0)])]), s2(p0: [967.0, 968.0], p1: s1(p0: s0(p0: [[969.0], [970.0]], p1: 971.0), p1: [s0(p0: [[972.0], [973.0]], p1: 974.0), s0(p0: [[975.0], [976.0]], p1: 977.0), s0(p0: [[978.0], [979.0]], p1: 980.0)]), p2: [s1(p0: s0(p0: [[981.0], [982.0]], p1: 983.0), p1: [s0(p0: [[984.0], [985.0]], p1: 986.0), s0(p0: [[987.0], [988.0]], p1: 989.0), s0(p0: [[990.0], [991.0]], p1: 992.0)]), s1(p0: s0(p0: [[993.0], [994.0]], p1: 995.0), p1: [s0(p0: [[996.0], [997.0]], p1: 998.0), s0(p0: [[999.0], [1000.0]], p1: 1001.0), s0(p0: [[1002.0], [1003.0]], p1: 1004.0)])])], p1: [[s2(p0: [1005.0, 1006.0], p1: s1(p0: s0(p0: [[1007.0], [1008.0]], p1: 1009.0), p1: [s0(p0: [[1010.0], [1011.0]], p1: 1012.0), s0(p0: [[1013.0], [1014.0]], p1: 1015.0), s0(p0: [[1016.0], [1017.0]], p1: 1018.0)]), p2: [s1(p0: s0(p0: [[1019.0], [1020.0]], p1: 1021.0), p1: [s0(p0: [[1022.0], [1023.0]], p1: 1024.0), s0(p0: [[1025.0], [1026.0]], p1: 1027.0), s0(p0: [[1028.0], [1029.0]], p1: 1030.0)]), s1(p0: s0(p0: [[1031.0], [1032.0]], p1: 1033.0), p1: [s0(p0: [[1034.0], [1035.0]], p1: 1036.0), s0(p0: [[1037.0], [1038.0]], p1: 1039.0), s0(p0: [[1040.0], [1041.0]], p1: 1042.0)])])]]))], [s6(p0: s3(p0: [s2(p0: [1043.0, 1044.0], p1: s1(p0: s0(p0: [[1045.0], [1046.0]], p1: 1047.0), p1: [s0(p0: [[1048.0], [1049.0]], p1: 1050.0), s0(p0: [[1051.0], [1052.0]], p1: 1053.0), s0(p0: [[1054.0], [1055.0]], p1: 1056.0)]), p2: [s1(p0: s0(p0: [[1057.0], [1058.0]], p1: 1059.0), p1: [s0(p0: [[1060.0], [1061.0]], p1: 1062.0), s0(p0: [[1063.0], [1064.0]], p1: 1065.0), s0(p0: [[1066.0], [1067.0]], p1: 1068.0)]), s1(p0: s0(p0: [[1069.0], [1070.0]], p1: 1071.0), p1: [s0(p0: [[1072.0], [1073.0]], p1: 1074.0), s0(p0: [[1075.0], [1076.0]], p1: 1077.0), s0(p0: [[1078.0], [1079.0]], p1: 1080.0)])]), s2(p0: [1081.0, 1082.0], p1: s1(p0: s0(p0: [[1083.0], [1084.0]], p1: 1085.0), p1: [s0(p0: [[1086.0], [1087.0]], p1: 1088.0), s0(p0: [[1089.0], [1090.0]], p1: 1091.0), s0(p0: [[1092.0], [1093.0]], p1: 1094.0)]), p2: [s1(p0: s0(p0: [[1095.0], [1096.0]], p1: 1097.0), p1: [s0(p0: [[1098.0], [1099.0]], p1: 1100.0), s0(p0: [[1101.0], [1102.0]], p1: 1103.0), s0(p0: [[1104.0], [1105.0]], p1: 1106.0)]), s1(p0: s0(p0: [[1107.0], [1108.0]], p1: 1109.0), p1: [s0(p0: [[1110.0], [1111.0]], p1: 1112.0), s0(p0: [[1113.0], [1114.0]], p1: 1115.0), s0(p0: [[1116.0], [1117.0]], p1: 1118.0)])]), s2(p0: [1119.0, 1120.0], p1: s1(p0: s0(p0: [[1121.0], [1122.0]], p1: 1123.0), p1: [s0(p0: [[1124.0], [1125.0]], p1: 1126.0), s0(p0: [[1127.0], [1128.0]], p1: 1129.0), s0(p0: [[1130.0], [1131.0]], p1: 1132.0)]), p2: [s1(p0: s0(p0: [[1133.0], [1134.0]], p1: 1135.0), p1: [s0(p0: [[1136.0], [1137.0]], p1: 1138.0), s0(p0: [[1139.0], [1140.0]], p1: 1141.0), s0(p0: [[1142.0], [1143.0]], p1: 1144.0)]), s1(p0: s0(p0: [[1145.0], [1146.0]], p1: 1147.0), p1: [s0(p0: [[1148.0], [1149.0]], p1: 1150.0), s0(p0: [[1151.0], [1152.0]], p1: 1153.0), s0(p0: [[1154.0], [1155.0]], p1: 1156.0)])])], p1: [[s2(p0: [1157.0, 1158.0], p1: s1(p0: s0(p0: [[1159.0], [1160.0]], p1: 1161.0), p1: [s0(p0: [[1162.0], [1163.0]], p1: 1164.0), s0(p0: [[1165.0], [1166.0]], p1: 1167.0), s0(p0: [[1168.0], [1169.0]], p1: 1170.0)]), p2: [s1(p0: s0(p0: [[1171.0], [1172.0]], p1: 1173.0), p1: [s0(p0: [[1174.0], [1175.0]], p1: 1176.0), s0(p0: [[1177.0], [1178.0]], p1: 1179.0), s0(p0: [[1180.0], [1181.0]], p1: 1182.0)]), s1(p0: s0(p0: [[1183.0], [1184.0]], p1: 1185.0), p1: [s0(p0: [[1186.0], [1187.0]], p1: 1188.0), s0(p0: [[1189.0], [1190.0]], p1: 1191.0), s0(p0: [[1192.0], [1193.0]], p1: 1194.0)])])]]))]])
    let v7: s2 = s2(p0: [1195.0, 1196.0], p1: s1(p0: s0(p0: [[1197.0], [1198.0]], p1: 1199.0), p1: [s0(p0: [[1200.0], [1201.0]], p1: 1202.0), s0(p0: [[1203.0], [1204.0]], p1: 1205.0), s0(p0: [[1206.0], [1207.0]], p1: 1208.0)]), p2: [s1(p0: s0(p0: [[1209.0], [1210.0]], p1: 1211.0), p1: [s0(p0: [[1212.0], [1213.0]], p1: 1214.0), s0(p0: [[1215.0], [1216.0]], p1: 1217.0), s0(p0: [[1218.0], [1219.0]], p1: 1220.0)]), s1(p0: s0(p0: [[1221.0], [1222.0]], p1: 1223.0), p1: [s0(p0: [[1224.0], [1225.0]], p1: 1226.0), s0(p0: [[1227.0], [1228.0]], p1: 1229.0), s0(p0: [[1230.0], [1231.0]], p1: 1232.0)])])
    let v8: Double = 1233.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 1233.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4, v5, v6, v7, v8)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
