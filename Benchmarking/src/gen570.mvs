  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
    var p2: [[s0]]
    var p3: [s0]
    var p4: s0
    var p5: Float
  } in
  struct s2 {
    var p0: [s0]
    var p1: s1
  } in
  struct s3 {
    var p0: s0
    var p1: [s0]
  } in
  struct s4 {
    var p0: s2
    var p1: s0
    var p2: [s3]
    var p3: [s0]
  } in
  struct s6 {
    var p0: s0
    var p1: s0
  } in
  let f83: (Float) -> Float = (v0: Float) -> Float {
    var v4: Float = v0 in
    var v1: Float = v0 in
    let v3: [Float] = [v4, v1, v4] in
    let v5: Float = v3[2] in
    let v8: Float = v3[0] in
    var v10: [Float] = v3 in
    v10[0] = v8 in
    let v6: Float = v8 + v8 in
    var v9: [Float] = v10 in
    v9[0] = v1 in
    var v17: [Float] = v9 in
    let v16: Float = v17[0] in
    v10[2] = v16 in
    let v7: Float = v9[2] in
    let v18: Float = v16 / v6 in
    v17[2] = v7 in
    v10[1] = v5 in
    v10[1] = v0 in
    v10[0] = v16 in
    v18
  } in
  let noinline_f0: ([[s6]], [s0], s4, s3, Float) -> Float = (v0: [[s6]], v1: [s0], v2: s4, v3: s3, v4: Float) -> Float {
    let v17: Float = f83(v4) in
    v17
  } in
  fun loop(i: Int, v0: [[s6]], v1: [s0], v2: s4, v3: s3, v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s6]] = [[s6(s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]]), s0([[6.0], [7.0], [8.0]], [[9.0], [10.0], [11.0]]))]] in
    let v1: [s0] = [s0([[12.0], [13.0], [14.0]], [[15.0], [16.0], [17.0]])] in
    let v2: s4 = s4(s2([s0([[18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0]]), s0([[24.0], [25.0], [26.0]], [[27.0], [28.0], [29.0]])], s1([s0([[30.0], [31.0], [32.0]], [[33.0], [34.0], [35.0]]), s0([[36.0], [37.0], [38.0]], [[39.0], [40.0], [41.0]])], s0([[42.0], [43.0], [44.0]], [[45.0], [46.0], [47.0]]), [[s0([[48.0], [49.0], [50.0]], [[51.0], [52.0], [53.0]])], [s0([[54.0], [55.0], [56.0]], [[57.0], [58.0], [59.0]])], [s0([[60.0], [61.0], [62.0]], [[63.0], [64.0], [65.0]])]], [s0([[66.0], [67.0], [68.0]], [[69.0], [70.0], [71.0]]), s0([[72.0], [73.0], [74.0]], [[75.0], [76.0], [77.0]])], s0([[78.0], [79.0], [80.0]], [[81.0], [82.0], [83.0]]), 84.0)), s0([[85.0], [86.0], [87.0]], [[88.0], [89.0], [90.0]]), [s3(s0([[91.0], [92.0], [93.0]], [[94.0], [95.0], [96.0]]), [s0([[97.0], [98.0], [99.0]], [[100.0], [101.0], [102.0]]), s0([[103.0], [104.0], [105.0]], [[106.0], [107.0], [108.0]]), s0([[109.0], [110.0], [111.0]], [[112.0], [113.0], [114.0]])]), s3(s0([[115.0], [116.0], [117.0]], [[118.0], [119.0], [120.0]]), [s0([[121.0], [122.0], [123.0]], [[124.0], [125.0], [126.0]]), s0([[127.0], [128.0], [129.0]], [[130.0], [131.0], [132.0]]), s0([[133.0], [134.0], [135.0]], [[136.0], [137.0], [138.0]])])], [s0([[139.0], [140.0], [141.0]], [[142.0], [143.0], [144.0]]), s0([[145.0], [146.0], [147.0]], [[148.0], [149.0], [150.0]]), s0([[151.0], [152.0], [153.0]], [[154.0], [155.0], [156.0]])]) in
    let v3: s3 = s3(s0([[157.0], [158.0], [159.0]], [[160.0], [161.0], [162.0]]), [s0([[163.0], [164.0], [165.0]], [[166.0], [167.0], [168.0]]), s0([[169.0], [170.0], [171.0]], [[172.0], [173.0], [174.0]]), s0([[175.0], [176.0], [177.0]], [[178.0], [179.0], [180.0]])]) in
    let v4: Float = 181.0 in
    let initialResult: Float = 181.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()