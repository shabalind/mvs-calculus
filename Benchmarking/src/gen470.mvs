  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: ([s0], Float) -> Float = (v0: [s0], v1: Float) -> Float {
    let v7: s0 = v0[0] in
    let v6: [[Float]] = v7.p1 in
    let v3: [Float] = v6[1] in
    let v11: [[Float]] = [v3, v3, v3, v3, v3, v3] in
    let v52: [Float] = v11[2] in
    var v20: [[Float]] = v11 in
    var v51: [Float] = v52 in
    var v50: [Float] = v3 in
    let v140: [Float] = v20[0] in
    v20[1] = v50 in
    let v68: Float = v140[0] in
    let v67: Float = v51[0] in
    let v304: Float = v68 / v67 in
    v304
  } in
  fun loop(i: Int, v0: [s0], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0]], [[1.0], [2.0], [3.0]])] in
    let v1: Float = 4.0 in
    let initialResult: Float = 4.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()