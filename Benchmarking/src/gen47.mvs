  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s1]
    var p1: s0
  } in
  struct s3 {
    var p0: [[s1]]
    var p1: [s2]
  } in
  struct s4 {
    var p0: s1
    var p1: [[s1]]
    var p2: s3
    var p3: s3
  } in
  let f53: (Float) -> Float = (v0: Float) -> Float {
    var v4: Float = v0 in
    var v1: Float = v4 in
    var v8: Float = v1 in
    v8
  } in
  let f27: (Float) -> Float = (v0: Float) -> Float {
    let v4: Float = v0 / v0 in
    let v6: [Float] = [v4, v0, v0, v0, v4, v4, v4] in
    let v1: Float = v6[1] in
    let v5: Float = f53(v1) in
    let v8: Float = v6[1] in
    var v7: [Float] = v6 in
    var v9: [Float] = v7 in
    var v13: Float = v1 in
    v9[0] = v13 in
    let v12: Float = f53(v13) in
    var v22: Float = v4 in
    let v18: Float = f53(v8) in
    var v15: Float = v4 in
    let v34: Float = f53(v18) in
    let v17: Float = v6[4] in
    var v16: Float = v22 in
    v9[1] = v17 in
    v7[6] = v12 in
    v7[0] = v16 in
    v9[5] = v15 in
    let v25: Float = f53(v34) in
    var v38: Float = v5 in
    v9[0] = v25 in
    let v69: Float = f53(v38) in
    let v46: Float = v9[6] in
    var v32: [Float] = v9 in
    let v44: Float = v6[4] in
    let v39: Float = v32[2] in
    v32[4] = v69 in
    v9[0] = v44 in
    v9[4] = v17 in
    v32[1] = v1 in
    let v142: Float = v46 + v39 in
    v142
  } in
  let noinline_f0: (s4, Float) -> Float = (v0: s4, v1: Float) -> Float {
    var v7: Float = v1 in
    let v9: Float = f53(v7) in
    var v6: Float = v9 in
    v7 = v6 in
    let v8: [Float] = [v6, v7, v9, v6] in
    let v11: Float = v8[0] in
    let v12: Float = v8[0] in
    v7 = v12 in
    let v59: Float = f27(v11) in
    v59
  } in
  fun loop(i: Int, v0: s4, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s4 = s4(s1(s0([[0.0]], [[1.0], [2.0], [3.0]]), s0([[4.0]], [[5.0], [6.0], [7.0]])), [[s1(s0([[8.0]], [[9.0], [10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0], [15.0]]))], [s1(s0([[16.0]], [[17.0], [18.0], [19.0]]), s0([[20.0]], [[21.0], [22.0], [23.0]]))], [s1(s0([[24.0]], [[25.0], [26.0], [27.0]]), s0([[28.0]], [[29.0], [30.0], [31.0]]))]], s3([[s1(s0([[32.0]], [[33.0], [34.0], [35.0]]), s0([[36.0]], [[37.0], [38.0], [39.0]]))], [s1(s0([[40.0]], [[41.0], [42.0], [43.0]]), s0([[44.0]], [[45.0], [46.0], [47.0]]))]], [s2([s1(s0([[48.0]], [[49.0], [50.0], [51.0]]), s0([[52.0]], [[53.0], [54.0], [55.0]])), s1(s0([[56.0]], [[57.0], [58.0], [59.0]]), s0([[60.0]], [[61.0], [62.0], [63.0]])), s1(s0([[64.0]], [[65.0], [66.0], [67.0]]), s0([[68.0]], [[69.0], [70.0], [71.0]]))], s0([[72.0]], [[73.0], [74.0], [75.0]]))]), s3([[s1(s0([[76.0]], [[77.0], [78.0], [79.0]]), s0([[80.0]], [[81.0], [82.0], [83.0]]))], [s1(s0([[84.0]], [[85.0], [86.0], [87.0]]), s0([[88.0]], [[89.0], [90.0], [91.0]]))]], [s2([s1(s0([[92.0]], [[93.0], [94.0], [95.0]]), s0([[96.0]], [[97.0], [98.0], [99.0]])), s1(s0([[100.0]], [[101.0], [102.0], [103.0]]), s0([[104.0]], [[105.0], [106.0], [107.0]])), s1(s0([[108.0]], [[109.0], [110.0], [111.0]]), s0([[112.0]], [[113.0], [114.0], [115.0]]))], s0([[116.0]], [[117.0], [118.0], [119.0]]))])) in
    let v1: Float = 120.0 in
    let initialResult: Float = 120.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()