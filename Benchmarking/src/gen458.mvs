  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s3 {
    var p0: s1
    var p1: [s0]
  } in
  let f38: (s0) -> s0 = (v0: s0) -> s0 {
    var v4: s0 = v0 in
    var v1: s0 = v0 in
    var v8: s0 = v4 in
    let v9: [[Float]] = v8.p1 in
    v4.p1 = v9 in
    let v2: [[Float]] = v0.p1 in
    let v3: [[Float]] = v0.p0 in
    let v12: [[Float]] = v0.p0 in
    v8.p1 = v2 in
    var v7: s0 = v8 in
    v7.p1 = v9 in
    let v15: [[Float]] = v4.p0 in
    v7 = v1 in
    v4.p0 = v3 in
    let v19: [[Float]] = v7.p0 in
    let v11: [[Float]] = v8.p1 in
    var v47: s0 = v1 in
    v47.p0 = v15 in
    let v32: [[Float]] = v47.p1 in
    v7.p1 = v11 in
    v1.p1 = v32 in
    let v72: [[Float]] = v1.p0 in
    let v29: [[Float]] = v7.p0 in
    v7.p0 = v19 in
    v4.p1 = v11 in
    v47.p0 = v29 in
    var v106: s0 = v47 in
    let v63: [[Float]] = v47.p0 in
    let v91: [[Float]] = v8.p1 in
    v47.p0 = v12 in
    v47.p0 = v63 in
    v1.p1 = v91 in
    v106.p1 = v11 in
    v47.p1 = v91 in
    v106.p0 = v72 in
    v106
  } in
  let f33: ([s0], s3) -> s3 = (v0: [s0], v1: s3) -> s3 {
    var v2: [s0] = v0 in
    let v3: s0 = v2[1] in
    let v6: s0 = f38(v3) in
    let v13: [s0] = v1.p1 in
    v2[0] = v6 in
    let v12: [s0] = v1.p1 in
    var v16: s3 = v1 in
    let v20: s0 = v12[1] in
    var v44: s3 = v16 in
    v16.p1 = v13 in
    v2[1] = v20 in
    v44.p1 = v12 in
    let v35: s1 = v44.p0 in
    let v46: s3 = s3(v35, v13) in
    let v80: [s0] = v1.p1 in
    let v41: s0 = f38(v6) in
    v44.p1 = v13 in
    let v48: s0 = f38(v41) in
    let v51: s3 = s3(v35, v80) in
    v2[0] = v41 in
    var v49: [s0] = v13 in
    v16.p1 = v12 in
    let v52: s0 = f38(v48) in
    let v139: s1 = v51.p0 in
    v44.p0 = v139 in
    let v64: s0 = f38(v48) in
    var v57: [s0] = v49 in
    v2[0] = v52 in
    v16.p1 = v57 in
    v49[2] = v64 in
    v46
  } in
  let f29: (s3) -> s3 = (v0: s3) -> s3 {
    let v1: s1 = v0.p0 in
    let v7: [s0] = v0.p1 in
    let v4: [s1] = [v1] in
    let v5: s0 = v7[1] in
    let v3: s1 = v4[0] in
    var v12: [s1] = v4 in
    v12 = v4 in
    let v30: s1 = v4[0] in
    var v18: s1 = v3 in
    let v13: s1 = v12[0] in
    let v20: s0 = v7[0] in
    let v27: s1 = v12[0] in
    v12[0] = v3 in
    v18.p1 = v5 in
    let v39: s0 = f38(v20) in
    v12[0] = v13 in
    let v77: s0 = v7[0] in
    v12[0] = v30 in
    let v66: s0 = f38(v39) in
    v12[0] = v18 in
    let v81: [s0] = v30.p0 in
    v18.p1 = v66 in
    v18.p1 = v77 in
    var v61: [s1] = v12 in
    v12 = v61 in
    let v162: [s0] = v27.p0 in
    v61[0] = v1 in
    v18.p0 = v162 in
    let v184: s1 = v12[0] in
    var v95: s3 = v0 in
    v18.p0 = v81 in
    v95.p0 = v184 in
    v95
  } in
  let f23: (s3, Float) -> Float = (v0: s3, v1: Float) -> Float {
    let v5: s3 = f29(v0) in
    var v4: Float = v1 in
    let v3: [s0] = v5.p1 in
    let v2: s0 = v3[0] in
    v4 = v1 in
    let v19: Float = v1 + v4 in
    let v22: [[Float]] = v2.p1 in
    let v26: [Float] = v22[2] in
    let v15: Float = v26[0] in
    v4 = v19 in
    let v36: Float = v19 * v15 in
    let v72: Float = v26[0] in
    var v70: Float = v36 in
    var v62: Float = v70 in
    v4 = v72 in
    v62
  } in
  let noinline_f0: ([s0], s1, s1, s0, [[s3]], Float) -> Float = (v0: [s0], v1: s1, v2: s1, v3: s0, v4: [[s3]], v5: Float) -> Float {
    let v10: [s3] = v4[0] in
    let v13: s3 = v10[0] in
    var v14: Float = v5 in
    let v22: Float = v5 / v14 in
    var v103: [s0] = v0 in
    let v35: s3 = f29(v13) in
    let v68: s3 = f33(v103, v35) in
    let v73: Float = v14 / v22 in
    let v55: Float = f23(v68, v73) in
    v55
  } in
  fun loop(i: Int, v0: [s0], v1: s1, v2: s1, v3: s0, v4: [[s3]], v5: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4, v5) in
      loop(i + 1, v0, v1, v2, v3, v4, v5, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0]], [[1.0], [2.0], [3.0]]), s0([[4.0]], [[5.0], [6.0], [7.0]])] in
    let v1: s1 = s1([s0([[8.0]], [[9.0], [10.0], [11.0]])], s0([[12.0]], [[13.0], [14.0], [15.0]])) in
    let v2: s1 = s1([s0([[16.0]], [[17.0], [18.0], [19.0]])], s0([[20.0]], [[21.0], [22.0], [23.0]])) in
    let v3: s0 = s0([[24.0]], [[25.0], [26.0], [27.0]]) in
    let v4: [[s3]] = [[s3(s1([s0([[28.0]], [[29.0], [30.0], [31.0]])], s0([[32.0]], [[33.0], [34.0], [35.0]])), [s0([[36.0]], [[37.0], [38.0], [39.0]]), s0([[40.0]], [[41.0], [42.0], [43.0]]), s0([[44.0]], [[45.0], [46.0], [47.0]])])], [s3(s1([s0([[48.0]], [[49.0], [50.0], [51.0]])], s0([[52.0]], [[53.0], [54.0], [55.0]])), [s0([[56.0]], [[57.0], [58.0], [59.0]]), s0([[60.0]], [[61.0], [62.0], [63.0]]), s0([[64.0]], [[65.0], [66.0], [67.0]])])]] in
    let v5: Float = 68.0 in
    let initialResult: Float = 68.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, v5, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()