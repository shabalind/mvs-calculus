  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: s1
    var p1: s1
  }
  struct s4 {
    var p0: s2
    var p1: s0
  }
  struct s5 {
    var p0: [s1]
    var p1: s1
  }
  struct s9 {
    var p0: Double
    var p1: [s4]
  }
  func f25(_ v0: Double) -> Double {
    var v7: Double = v0
    var v5: Double = v0
    var v1: Double = v0
    var v8: Double = v1
    var v6: Double = v0
    var v4: Double = v5
    var v2: Double = v8
    var v9: Double = v7
    var v10: Double = v8
    var v3: Double = v4
    var v12: Double = v5
    let v23: [Double] = [v5, v4, v6]
    var v11: [Double] = v23
    v9 = v8
    var v15: [Double] = v23
    var v13: Double = v3
    v11[1] = v10
    let v34: Double = v11[1]
    var v16: [Double] = v23
    let v14: Double = v5 - v6
    var v29: [Double] = v23
    var v22: [Double] = v15
    var v45: Double = v10
    v29[0] = v12
    v16[1] = v34
    var v21: [Double] = v23
    let v17: Double = v29[0]
    var v24: Double = v5
    v15[1] = v24
    v21[1] = v34
    var v33: Double = v2
    let v39: Double = v22[0]
    var v62: Double = v9
    var v55: [Double] = v11
    v21[0] = v10
    v21[0] = v6
    v15[1] = v9
    v15[1] = v7
    v15[2] = v0
    var v42: Double = v39
    v21[1] = v1
    var v60: Double = v62
    var v40: Double = v13
    let v30: Double = v11[2]
    v29[0] = v30
    var v76: [Double] = v16
    var v37: [Double] = v21
    let v86: [Double] = [v45, v33, v14, v0]
    v3 = v40
    v76 = v37
    var v57: [Double] = v86
    let v41: Double = v11[1]
    let v81: Double = v57[3]
    var v44: [Double] = v29
    v21[1] = v40
    var v52: [Double] = v86
    let v90: Double = v52[0]
    var v51: Double = v42
    v55[1] = v41
    let v146: Double = v86[3]
    var v121: [Double] = v52
    var v73: [Double] = v23
    var v67: [Double] = v57
    let v69: Double = v55[0]
    var v83: [Double] = v29
    let v84: Double = v86[1]
    var v108: Double = v69
    v44[1] = v146
    v3 = v146
    let v213: Double = v67[1]
    let v126: Double = v73[1]
    v21[0] = v13
    v55[0] = v90
    v83[0] = v34
    let v113: Double = v44[1]
    v37[1] = v8
    v83[2] = v51
    var v153: [Double] = v55
    let v104: Double = v29[1]
    let v101: Double = v21[0]
    v83[0] = v104
    v22[0] = v101
    v52[3] = v108
    v40 = v81
    let v171: [[Double]] = [v16, v11, v23, v83, v76, v55]
    let v158: Double = v67[1]
    var v182: [[Double]] = v171
    v44[0] = v90
    v16[0] = v113
    v44 = v153
    var v137: [[Double]] = v182
    let v119: [Double] = v171[2]
    v16 = v119
    v13 = v126
    v11[1] = v213
    v44[2] = v9
    var v165: [[Double]] = v137
    let v132: Double = v121[0]
    v55[1] = v17
    let v230: Double = v60 / v158
    let v186: [Double] = v171[1]
    v15[0] = v84
    v29 = v15
    var v152: [[Double]] = v165
    v83[2] = v230
    let v209: [Double] = v152[0]
    v15 = v209
    v1 = v132
    let v127: Double = v186[0]
    v83[1] = v41
    return v127
  }
  @inline(never)
  func f0(_ v0: [s5], _ v1: [s9], _ v2: Double) -> Double {
    let v8: Double = f25(v2)
    var v17: Double = v8
    v17 = v8
    let v20: Double = v17 * v8
    let v16: Double = v17 / v20
    let v30: Double = v16 / v20
    return v30
  }
  func benchmark() {
    let v0: [s5] = [s5(p0: [s1(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0], [4.0]], p2: [[5.0]], p3: [[6.0]]), p1: s0(p0: [[7.0], [8.0]], p1: [[9.0], [10.0], [11.0]], p2: [[12.0]], p3: [[13.0]])), s1(p0: s0(p0: [[14.0], [15.0]], p1: [[16.0], [17.0], [18.0]], p2: [[19.0]], p3: [[20.0]]), p1: s0(p0: [[21.0], [22.0]], p1: [[23.0], [24.0], [25.0]], p2: [[26.0]], p3: [[27.0]]))], p1: s1(p0: s0(p0: [[28.0], [29.0]], p1: [[30.0], [31.0], [32.0]], p2: [[33.0]], p3: [[34.0]]), p1: s0(p0: [[35.0], [36.0]], p1: [[37.0], [38.0], [39.0]], p2: [[40.0]], p3: [[41.0]]))), s5(p0: [s1(p0: s0(p0: [[42.0], [43.0]], p1: [[44.0], [45.0], [46.0]], p2: [[47.0]], p3: [[48.0]]), p1: s0(p0: [[49.0], [50.0]], p1: [[51.0], [52.0], [53.0]], p2: [[54.0]], p3: [[55.0]])), s1(p0: s0(p0: [[56.0], [57.0]], p1: [[58.0], [59.0], [60.0]], p2: [[61.0]], p3: [[62.0]]), p1: s0(p0: [[63.0], [64.0]], p1: [[65.0], [66.0], [67.0]], p2: [[68.0]], p3: [[69.0]]))], p1: s1(p0: s0(p0: [[70.0], [71.0]], p1: [[72.0], [73.0], [74.0]], p2: [[75.0]], p3: [[76.0]]), p1: s0(p0: [[77.0], [78.0]], p1: [[79.0], [80.0], [81.0]], p2: [[82.0]], p3: [[83.0]]))), s5(p0: [s1(p0: s0(p0: [[84.0], [85.0]], p1: [[86.0], [87.0], [88.0]], p2: [[89.0]], p3: [[90.0]]), p1: s0(p0: [[91.0], [92.0]], p1: [[93.0], [94.0], [95.0]], p2: [[96.0]], p3: [[97.0]])), s1(p0: s0(p0: [[98.0], [99.0]], p1: [[100.0], [101.0], [102.0]], p2: [[103.0]], p3: [[104.0]]), p1: s0(p0: [[105.0], [106.0]], p1: [[107.0], [108.0], [109.0]], p2: [[110.0]], p3: [[111.0]]))], p1: s1(p0: s0(p0: [[112.0], [113.0]], p1: [[114.0], [115.0], [116.0]], p2: [[117.0]], p3: [[118.0]]), p1: s0(p0: [[119.0], [120.0]], p1: [[121.0], [122.0], [123.0]], p2: [[124.0]], p3: [[125.0]])))]
    let v1: [s9] = [s9(p0: 126.0, p1: [s4(p0: s2(p0: s1(p0: s0(p0: [[127.0], [128.0]], p1: [[129.0], [130.0], [131.0]], p2: [[132.0]], p3: [[133.0]]), p1: s0(p0: [[134.0], [135.0]], p1: [[136.0], [137.0], [138.0]], p2: [[139.0]], p3: [[140.0]])), p1: s1(p0: s0(p0: [[141.0], [142.0]], p1: [[143.0], [144.0], [145.0]], p2: [[146.0]], p3: [[147.0]]), p1: s0(p0: [[148.0], [149.0]], p1: [[150.0], [151.0], [152.0]], p2: [[153.0]], p3: [[154.0]]))), p1: s0(p0: [[155.0], [156.0]], p1: [[157.0], [158.0], [159.0]], p2: [[160.0]], p3: [[161.0]])), s4(p0: s2(p0: s1(p0: s0(p0: [[162.0], [163.0]], p1: [[164.0], [165.0], [166.0]], p2: [[167.0]], p3: [[168.0]]), p1: s0(p0: [[169.0], [170.0]], p1: [[171.0], [172.0], [173.0]], p2: [[174.0]], p3: [[175.0]])), p1: s1(p0: s0(p0: [[176.0], [177.0]], p1: [[178.0], [179.0], [180.0]], p2: [[181.0]], p3: [[182.0]]), p1: s0(p0: [[183.0], [184.0]], p1: [[185.0], [186.0], [187.0]], p2: [[188.0]], p3: [[189.0]]))), p1: s0(p0: [[190.0], [191.0]], p1: [[192.0], [193.0], [194.0]], p2: [[195.0]], p3: [[196.0]])), s4(p0: s2(p0: s1(p0: s0(p0: [[197.0], [198.0]], p1: [[199.0], [200.0], [201.0]], p2: [[202.0]], p3: [[203.0]]), p1: s0(p0: [[204.0], [205.0]], p1: [[206.0], [207.0], [208.0]], p2: [[209.0]], p3: [[210.0]])), p1: s1(p0: s0(p0: [[211.0], [212.0]], p1: [[213.0], [214.0], [215.0]], p2: [[216.0]], p3: [[217.0]]), p1: s0(p0: [[218.0], [219.0]], p1: [[220.0], [221.0], [222.0]], p2: [[223.0]], p3: [[224.0]]))), p1: s0(p0: [[225.0], [226.0]], p1: [[227.0], [228.0], [229.0]], p2: [[230.0]], p3: [[231.0]]))]), s9(p0: 232.0, p1: [s4(p0: s2(p0: s1(p0: s0(p0: [[233.0], [234.0]], p1: [[235.0], [236.0], [237.0]], p2: [[238.0]], p3: [[239.0]]), p1: s0(p0: [[240.0], [241.0]], p1: [[242.0], [243.0], [244.0]], p2: [[245.0]], p3: [[246.0]])), p1: s1(p0: s0(p0: [[247.0], [248.0]], p1: [[249.0], [250.0], [251.0]], p2: [[252.0]], p3: [[253.0]]), p1: s0(p0: [[254.0], [255.0]], p1: [[256.0], [257.0], [258.0]], p2: [[259.0]], p3: [[260.0]]))), p1: s0(p0: [[261.0], [262.0]], p1: [[263.0], [264.0], [265.0]], p2: [[266.0]], p3: [[267.0]])), s4(p0: s2(p0: s1(p0: s0(p0: [[268.0], [269.0]], p1: [[270.0], [271.0], [272.0]], p2: [[273.0]], p3: [[274.0]]), p1: s0(p0: [[275.0], [276.0]], p1: [[277.0], [278.0], [279.0]], p2: [[280.0]], p3: [[281.0]])), p1: s1(p0: s0(p0: [[282.0], [283.0]], p1: [[284.0], [285.0], [286.0]], p2: [[287.0]], p3: [[288.0]]), p1: s0(p0: [[289.0], [290.0]], p1: [[291.0], [292.0], [293.0]], p2: [[294.0]], p3: [[295.0]]))), p1: s0(p0: [[296.0], [297.0]], p1: [[298.0], [299.0], [300.0]], p2: [[301.0]], p3: [[302.0]])), s4(p0: s2(p0: s1(p0: s0(p0: [[303.0], [304.0]], p1: [[305.0], [306.0], [307.0]], p2: [[308.0]], p3: [[309.0]]), p1: s0(p0: [[310.0], [311.0]], p1: [[312.0], [313.0], [314.0]], p2: [[315.0]], p3: [[316.0]])), p1: s1(p0: s0(p0: [[317.0], [318.0]], p1: [[319.0], [320.0], [321.0]], p2: [[322.0]], p3: [[323.0]]), p1: s0(p0: [[324.0], [325.0]], p1: [[326.0], [327.0], [328.0]], p2: [[329.0]], p3: [[330.0]]))), p1: s0(p0: [[331.0], [332.0]], p1: [[333.0], [334.0], [335.0]], p2: [[336.0]], p3: [[337.0]]))]), s9(p0: 338.0, p1: [s4(p0: s2(p0: s1(p0: s0(p0: [[339.0], [340.0]], p1: [[341.0], [342.0], [343.0]], p2: [[344.0]], p3: [[345.0]]), p1: s0(p0: [[346.0], [347.0]], p1: [[348.0], [349.0], [350.0]], p2: [[351.0]], p3: [[352.0]])), p1: s1(p0: s0(p0: [[353.0], [354.0]], p1: [[355.0], [356.0], [357.0]], p2: [[358.0]], p3: [[359.0]]), p1: s0(p0: [[360.0], [361.0]], p1: [[362.0], [363.0], [364.0]], p2: [[365.0]], p3: [[366.0]]))), p1: s0(p0: [[367.0], [368.0]], p1: [[369.0], [370.0], [371.0]], p2: [[372.0]], p3: [[373.0]])), s4(p0: s2(p0: s1(p0: s0(p0: [[374.0], [375.0]], p1: [[376.0], [377.0], [378.0]], p2: [[379.0]], p3: [[380.0]]), p1: s0(p0: [[381.0], [382.0]], p1: [[383.0], [384.0], [385.0]], p2: [[386.0]], p3: [[387.0]])), p1: s1(p0: s0(p0: [[388.0], [389.0]], p1: [[390.0], [391.0], [392.0]], p2: [[393.0]], p3: [[394.0]]), p1: s0(p0: [[395.0], [396.0]], p1: [[397.0], [398.0], [399.0]], p2: [[400.0]], p3: [[401.0]]))), p1: s0(p0: [[402.0], [403.0]], p1: [[404.0], [405.0], [406.0]], p2: [[407.0]], p3: [[408.0]])), s4(p0: s2(p0: s1(p0: s0(p0: [[409.0], [410.0]], p1: [[411.0], [412.0], [413.0]], p2: [[414.0]], p3: [[415.0]]), p1: s0(p0: [[416.0], [417.0]], p1: [[418.0], [419.0], [420.0]], p2: [[421.0]], p3: [[422.0]])), p1: s1(p0: s0(p0: [[423.0], [424.0]], p1: [[425.0], [426.0], [427.0]], p2: [[428.0]], p3: [[429.0]]), p1: s0(p0: [[430.0], [431.0]], p1: [[432.0], [433.0], [434.0]], p2: [[435.0]], p3: [[436.0]]))), p1: s0(p0: [[437.0], [438.0]], p1: [[439.0], [440.0], [441.0]], p2: [[442.0]], p3: [[443.0]]))])]
    let v2: Double = 444.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 444.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
