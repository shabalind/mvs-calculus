  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s1]
    var p1: s0
  } in
  let noinline_f0: ([s2], Float) -> Float = (v0: [s2], v1: Float) -> Float {
    let v2: s2 = v0[0] in
    let v8: s2 = v0[0] in
    let v10: s0 = v2.p1 in
    let v17: s0 = v8.p1 in
    let v24: [[Float]] = v17.p0 in
    var v3: [[Float]] = v24 in
    let v16: [Float] = v3[0] in
    let v14: [Float] = v3[0] in
    let v9: [[Float]] = v10.p1 in
    let v15: [Float] = v9[1] in
    let v35: [Float] = v3[0] in
    let v50: [[Float]] = [v15, v15, v35, v14, v16] in
    let v49: [Float] = v50[4] in
    let v96: Float = v49[0] in
    v96
  } in
  fun loop(i: Int, v0: [s2], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2([s1(s0([[0.0]], [[1.0], [2.0], [3.0]]), s0([[4.0]], [[5.0], [6.0], [7.0]])), s1(s0([[8.0]], [[9.0], [10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0], [15.0]]))], s0([[16.0]], [[17.0], [18.0], [19.0]]))] in
    let v1: Float = 20.0 in
    let initialResult: Float = 20.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()