  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  let f76: (s0, s0, s0, s0, s0) -> s0 = (v0: s0, v1: s0, v2: s0, v3: s0, v4: s0) -> s0 {
    let v7: [[Float]] = v3.p1 in
    let v5: [[Float]] = v1.p1 in
    let v10: [[Float]] = v4.p1 in
    var v12: s0 = v2 in
    var v16: s0 = v2 in
    v16.p1 = v7 in
    v16.p2 = v10 in
    let v53: [[Float]] = v4.p0 in
    let v26: [[Float]] = v12.p1 in
    let v18: [[Float]] = v4.p0 in
    v16.p2 = v18 in
    var v17: s0 = v1 in
    let v40: [[Float]] = v3.p1 in
    v17.p2 = v7 in
    let v64: [[Float]] = v17.p1 in
    let v23: s0 = s0(v10, v18, v53) in
    v16.p1 = v64 in
    var v44: s0 = v17 in
    let v41: [[Float]] = v2.p2 in
    let v39: [s0] = [v44, v17, v0, v2, v16] in
    v12 = v17 in
    let v28: s0 = s0(v53, v40, v64) in
    v17.p1 = v5 in
    var v42: [s0] = v39 in
    v17.p1 = v41 in
    let v32: [[Float]] = v16.p0 in
    v17.p2 = v26 in
    let v56: [[Float]] = v23.p1 in
    v42[3] = v28 in
    v42[4] = v17 in
    let v58: s0 = v42[0] in
    v42[3] = v2 in
    v12.p0 = v40 in
    v12.p2 = v53 in
    v16.p2 = v56 in
    v16.p1 = v32 in
    v58
  } in
  let f72: (s0) -> s0 = (v0: s0) -> s0 {
    let v2: s0 = f76(v0, v0, v0, v0, v0) in
    var v5: s0 = v2 in
    let v7: s0 = f76(v0, v5, v0, v5, v2) in
    let v8: s0 = f76(v7, v5, v5, v0, v5) in
    var v6: s0 = v5 in
    let v1: [[Float]] = v0.p2 in
    let v3: [[Float]] = v2.p1 in
    let v4: s0 = f76(v2, v6, v5, v6, v0) in
    let v12: s0 = f76(v2, v4, v5, v8, v0) in
    v5.p1 = v3 in
    let v16: s0 = f76(v6, v2, v12, v8, v5) in
    let v19: s0 = s0(v1, v1, v1) in
    let v13: s0 = f76(v5, v19, v2, v7, v0) in
    let v28: s0 = f76(v12, v0, v13, v16, v13) in
    var v56: s0 = v28 in
    v56
  } in
  let f71: (s0) -> s0 = (v0: s0) -> s0 {
    let v6: [[Float]] = v0.p1 in
    var v4: [[Float]] = v6 in
    var v1: [[Float]] = v6 in
    var v5: s0 = v0 in
    var v2: [[Float]] = v6 in
    var v8: [[Float]] = v6 in
    let v10: s0 = s0(v6, v4, v1) in
    v5.p1 = v8 in
    v5.p0 = v4 in
    var v7: s0 = v10 in
    let v17: s0 = f72(v5) in
    v5.p0 = v2 in
    let v11: s0 = f76(v5, v5, v5, v7, v5) in
    v2 = v8 in
    let v13: s0 = f76(v5, v11, v17, v11, v17) in
    v13
  } in
  let f70: (s0) -> s0 = (v0: s0) -> s0 {
    var v4: s0 = v0 in
    var v6: s0 = v4 in
    let v7: s0 = f72(v0) in
    let v5: s0 = f72(v7) in
    let v10: s0 = f71(v6) in
    let v2: s0 = f71(v0) in
    let v3: [[Float]] = v7.p2 in
    let v8: s0 = f72(v2) in
    let v18: [[Float]] = v8.p1 in
    let v24: s0 = f76(v2, v5, v4, v0, v7) in
    v4 = v10 in
    let v12: [[Float]] = v4.p2 in
    let v11: [[Float]] = v24.p2 in
    v6 = v24 in
    v6.p1 = v12 in
    let v29: [Float] = v18[0] in
    v6.p0 = v18 in
    let v16: [s0] = [v6, v24, v8, v2, v2] in
    let v34: [[Float]] = v10.p2 in
    v6.p0 = v3 in
    v4.p0 = v11 in
    v6.p1 = v34 in
    var v59: [[Float]] = v11 in
    v6.p1 = v59 in
    v59[1] = v29 in
    let v32: s0 = v16[0] in
    v32
  } in
  let noinline_f0: (s0, s0, Float) -> Float = (v0: s0, v1: s0, v2: Float) -> Float {
    let v4: [[Float]] = v0.p2 in
    let v5: s0 = f70(v1) in
    let v3: [[Float]] = v5.p2 in
    var v6: [[Float]] = v3 in
    let v11: [Float] = v4[2] in
    var v26: [Float] = v11 in
    v6[2] = v11 in
    v6[0] = v11 in
    let v28: [Float] = v6[2] in
    v26[0] = v2 in
    let v25: Float = v26[0] in
    v6[1] = v28 in
    var v39: Float = v2 in
    let v32: Float = v26[0] in
    v26[0] = v2 in
    v26[0] = v32 in
    v26 = v28 in
    var v44: Float = v39 in
    v26[0] = v44 in
    v25
  } in
  fun loop(i: Int, v0: s0, v1: s0, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]], [[6.0], [7.0], [8.0]]) in
    let v1: s0 = s0([[9.0], [10.0], [11.0]], [[12.0], [13.0], [14.0]], [[15.0], [16.0], [17.0]]) in
    let v2: Float = 18.0 in
    let initialResult: Float = 18.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()