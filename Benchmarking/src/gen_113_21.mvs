  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s0
    var p1: s0
  } in
  struct s4 {
    var p0: [s1]
    var p1: [s2]
  } in
  let f18: (Float) -> Float = (v0: Float) -> Float {
    var v3: Float = v0 in
    var v6: Float = v0 in
    var v4: Float = v6 in
    var v7: Float = v0 in
    var v5: Float = v7 in
    var v8: Float = v0 in
    var v1: Float = v3 in
    let v22: [Float] = [v4] in
    let v9: Float = v22[0] in
    let v12: Float = v22[0] in
    let v13: Float = v22[0] in
    var v28: Float = v8 in
    var v29: Float = v1 in
    v7 = v0 in
    let v20: Float = v22[0] in
    let v56: [Float] = [v20, v9, v6, v9, v8] in
    var v64: [Float] = v56 in
    v29 = v5 in
    let v48: Float = v22[0] in
    var v50: [Float] = v64 in
    let v74: Float = v22[0] in
    v50[2] = v13 in
    var v84: [Float] = v50 in
    v84 = v56 in
    v84[0] = v48 in
    v84[0] = v12 in
    v28 = v74 in
    v84[0] = v28 in
    v50[3] = v29 in
    var v165: [Float] = v84 in
    let v136: Float = v165[2] in
    v136
  } in
  let noinline_f0: ([s4], Float) -> Float = (v0: [s4], v1: Float) -> Float {
    var v16: Float = v1 in
    let v14: Float = f18(v16) in
    let v94: Float = f18(v14) in
    v94
  } in
  fun loop(i: Int, v0: [s4], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s4] = [s4([s1(s0([[0.0]], [[1.0]]), s0([[2.0]], [[3.0]]))], [s2(s0([[4.0]], [[5.0]]), s0([[6.0]], [[7.0]]))])] in
    let v1: Float = 8.0 in
    let initialResult: Float = 8.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()