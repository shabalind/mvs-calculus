  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: (s0, s0, [s0], [s0], Float) -> Float = (v0: s0, v1: s0, v2: [s0], v3: [s0], v4: Float) -> Float {
    var v11: s0 = v0 in
    let v10: s0 = v2[0] in
    let v5: s0 = v3[1] in
    let v21: [[Float]] = v11.p0 in
    let v29: [[Float]] = v10.p0 in
    let v45: [[Float]] = v5.p1 in
    var v55: [[Float]] = v21 in
    let v63: [Float] = v21[1] in
    v11.p1 = v45 in
    v11.p0 = v55 in
    let v44: Float = v63[0] in
    v11.p0 = v29 in
    v44
  } in
  fun loop(i: Int, v0: s0, v1: s0, v2: [s0], v3: [s0], v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0]], [[2.0]]) in
    let v1: s0 = s0([[3.0], [4.0]], [[5.0]]) in
    let v2: [s0] = [s0([[6.0], [7.0]], [[8.0]]), s0([[9.0], [10.0]], [[11.0]])] in
    let v3: [s0] = [s0([[12.0], [13.0]], [[14.0]]), s0([[15.0], [16.0]], [[17.0]])] in
    let v4: Float = 18.0 in
    let initialResult: Float = 18.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()