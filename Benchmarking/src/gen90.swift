  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  }
  struct s2 {
    var p0: s1
    var p1: Double
  }
  struct s3 {
    var p0: s2
    var p1: [[s0]]
  }
  struct s4 {
    var p0: s0
    var p1: [s1]
  }
  struct s7 {
    var p0: s0
    var p1: s0
  }
  @inline(never)
  func f0(_ v0: s3, _ v1: [s4], _ v2: s3, _ v3: [[s4]], _ v4: [s3], _ v5: s4, _ v6: Double) -> Double {
    let v8: s2 = v0.p0
    let v17: s0 = v5.p0
    var v13: s4 = v5
    let v10: s7 = s7(p0: v17, p1: v17)
    let v40: s0 = v10.p0
    let v16: s3 = v4[0]
    let v30: [s1] = v13.p1
    let v34: [[s0]] = v16.p1
    let v27: s1 = v30[0]
    let v22: [s0] = v34[1]
    var v33: s2 = v8
    v33.p0 = v27
    v13.p0 = v40
    let v46: s0 = v22[0]
    let v52: Double = v33.p1
    v13.p0 = v46
    return v52
  }
  func benchmark() {
    let v0: s3 = s3(p0: s2(p0: s1(p0: [[s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0], [4.0]])]], p1: s0(p0: [[5.0], [6.0]], p1: [[7.0], [8.0], [9.0]])), p1: 10.0), p1: [[s0(p0: [[11.0], [12.0]], p1: [[13.0], [14.0], [15.0]])], [s0(p0: [[16.0], [17.0]], p1: [[18.0], [19.0], [20.0]])], [s0(p0: [[21.0], [22.0]], p1: [[23.0], [24.0], [25.0]])]])
    let v1: [s4] = [s4(p0: s0(p0: [[26.0], [27.0]], p1: [[28.0], [29.0], [30.0]]), p1: [s1(p0: [[s0(p0: [[31.0], [32.0]], p1: [[33.0], [34.0], [35.0]])]], p1: s0(p0: [[36.0], [37.0]], p1: [[38.0], [39.0], [40.0]])), s1(p0: [[s0(p0: [[41.0], [42.0]], p1: [[43.0], [44.0], [45.0]])]], p1: s0(p0: [[46.0], [47.0]], p1: [[48.0], [49.0], [50.0]]))]), s4(p0: s0(p0: [[51.0], [52.0]], p1: [[53.0], [54.0], [55.0]]), p1: [s1(p0: [[s0(p0: [[56.0], [57.0]], p1: [[58.0], [59.0], [60.0]])]], p1: s0(p0: [[61.0], [62.0]], p1: [[63.0], [64.0], [65.0]])), s1(p0: [[s0(p0: [[66.0], [67.0]], p1: [[68.0], [69.0], [70.0]])]], p1: s0(p0: [[71.0], [72.0]], p1: [[73.0], [74.0], [75.0]]))])]
    let v2: s3 = s3(p0: s2(p0: s1(p0: [[s0(p0: [[76.0], [77.0]], p1: [[78.0], [79.0], [80.0]])]], p1: s0(p0: [[81.0], [82.0]], p1: [[83.0], [84.0], [85.0]])), p1: 86.0), p1: [[s0(p0: [[87.0], [88.0]], p1: [[89.0], [90.0], [91.0]])], [s0(p0: [[92.0], [93.0]], p1: [[94.0], [95.0], [96.0]])], [s0(p0: [[97.0], [98.0]], p1: [[99.0], [100.0], [101.0]])]])
    let v3: [[s4]] = [[s4(p0: s0(p0: [[102.0], [103.0]], p1: [[104.0], [105.0], [106.0]]), p1: [s1(p0: [[s0(p0: [[107.0], [108.0]], p1: [[109.0], [110.0], [111.0]])]], p1: s0(p0: [[112.0], [113.0]], p1: [[114.0], [115.0], [116.0]])), s1(p0: [[s0(p0: [[117.0], [118.0]], p1: [[119.0], [120.0], [121.0]])]], p1: s0(p0: [[122.0], [123.0]], p1: [[124.0], [125.0], [126.0]]))])], [s4(p0: s0(p0: [[127.0], [128.0]], p1: [[129.0], [130.0], [131.0]]), p1: [s1(p0: [[s0(p0: [[132.0], [133.0]], p1: [[134.0], [135.0], [136.0]])]], p1: s0(p0: [[137.0], [138.0]], p1: [[139.0], [140.0], [141.0]])), s1(p0: [[s0(p0: [[142.0], [143.0]], p1: [[144.0], [145.0], [146.0]])]], p1: s0(p0: [[147.0], [148.0]], p1: [[149.0], [150.0], [151.0]]))])]]
    let v4: [s3] = [s3(p0: s2(p0: s1(p0: [[s0(p0: [[152.0], [153.0]], p1: [[154.0], [155.0], [156.0]])]], p1: s0(p0: [[157.0], [158.0]], p1: [[159.0], [160.0], [161.0]])), p1: 162.0), p1: [[s0(p0: [[163.0], [164.0]], p1: [[165.0], [166.0], [167.0]])], [s0(p0: [[168.0], [169.0]], p1: [[170.0], [171.0], [172.0]])], [s0(p0: [[173.0], [174.0]], p1: [[175.0], [176.0], [177.0]])]]), s3(p0: s2(p0: s1(p0: [[s0(p0: [[178.0], [179.0]], p1: [[180.0], [181.0], [182.0]])]], p1: s0(p0: [[183.0], [184.0]], p1: [[185.0], [186.0], [187.0]])), p1: 188.0), p1: [[s0(p0: [[189.0], [190.0]], p1: [[191.0], [192.0], [193.0]])], [s0(p0: [[194.0], [195.0]], p1: [[196.0], [197.0], [198.0]])], [s0(p0: [[199.0], [200.0]], p1: [[201.0], [202.0], [203.0]])]]), s3(p0: s2(p0: s1(p0: [[s0(p0: [[204.0], [205.0]], p1: [[206.0], [207.0], [208.0]])]], p1: s0(p0: [[209.0], [210.0]], p1: [[211.0], [212.0], [213.0]])), p1: 214.0), p1: [[s0(p0: [[215.0], [216.0]], p1: [[217.0], [218.0], [219.0]])], [s0(p0: [[220.0], [221.0]], p1: [[222.0], [223.0], [224.0]])], [s0(p0: [[225.0], [226.0]], p1: [[227.0], [228.0], [229.0]])]])]
    let v5: s4 = s4(p0: s0(p0: [[230.0], [231.0]], p1: [[232.0], [233.0], [234.0]]), p1: [s1(p0: [[s0(p0: [[235.0], [236.0]], p1: [[237.0], [238.0], [239.0]])]], p1: s0(p0: [[240.0], [241.0]], p1: [[242.0], [243.0], [244.0]])), s1(p0: [[s0(p0: [[245.0], [246.0]], p1: [[247.0], [248.0], [249.0]])]], p1: s0(p0: [[250.0], [251.0]], p1: [[252.0], [253.0], [254.0]]))])
    let v6: Double = 255.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 255.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4, v5, v6)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
