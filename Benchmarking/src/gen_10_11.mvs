  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  let noinline_f0: (s1, Float, s1) -> Float = (v0: s1, v1: Float, v2: s1) -> Float {
    let v6: [[s0]] = v0.p1 in
    let v4: [s0] = v6[0] in
    let v3: s0 = v4[0] in
    var v12: Float = v1 in
    let v17: [[Float]] = v3.p0 in
    let v52: [Float] = v17[0] in
    let v39: Float = v52[0] in
    let v81: Float = v52[0] in
    let v146: Float = v81 * v39 in
    var v78: Float = v12 in
    let v97: Float = v146 - v78 in
    v97
  } in
  fun loop(i: Int, v0: s1, v1: Float, v2: s1, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1(s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]), [[s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]])], [s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]])]]) in
    let v1: Float = 15.0 in
    let v2: s1 = s1(s0([[16.0], [17.0]], [[18.0], [19.0], [20.0]]), [[s0([[21.0], [22.0]], [[23.0], [24.0], [25.0]])], [s0([[26.0], [27.0]], [[28.0], [29.0], [30.0]])]]) in
    let initialResult: Float = s1(s0([[16.0], [17.0]], [[18.0], [19.0], [20.0]]), [[s0([[21.0], [22.0]], [[23.0], [24.0], [25.0]])], [s0([[26.0], [27.0]], [[28.0], [29.0], [30.0]])]]) in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()