  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: ([[s0]], [s0], s0, Float) -> Float = (v0: [[s0]], v1: [s0], v2: s0, v3: Float) -> Float {
    let v4: [[Float]] = v2.p0 in
    let v8: [Float] = v4[0] in
    var v13: Float = v3 in
    let v7: Float = v13 * v13 in
    let v21: Float = v8[0] in
    var v24: Float = v7 in
    v13 = v7 in
    v24 = v21 in
    var v205: Float = v24 in
    let v136: Float = v205 / v21 in
    v136
  } in
  fun loop(i: Int, v0: [[s0]], v1: [s0], v2: s0, v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s0]] = [[s0([[0.0]], [[1.0], [2.0]])], [s0([[3.0]], [[4.0], [5.0]])], [s0([[6.0]], [[7.0], [8.0]])]] in
    let v1: [s0] = [s0([[9.0]], [[10.0], [11.0]])] in
    let v2: s0 = s0([[12.0]], [[13.0], [14.0]]) in
    let v3: Float = 15.0 in
    let initialResult: Float = 15.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()