  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s6 {
    var p0: s0
    var p1: s0
  } in
  struct s8 {
    var p0: [s6]
    var p1: [[s6]]
  } in
  let f13: (Float) -> Float = (v0: Float) -> Float {
    var v3: Float = v0 in
    var v4: Float = v0 in
    v3 = v4 in
    let v6: [Float] = [v0, v0, v0, v3, v3, v0, v0] in
    var v7: [Float] = v6 in
    var v2: [Float] = v7 in
    let v38: Float = v2[5] in
    v38
  } in
  let noinline_f0: ([s8], Float) -> Float = (v0: [s8], v1: Float) -> Float {
    var v6: Float = v1 in
    let v22: Float = f13(v6) in
    let v28: Float = v22 - v1 in
    v28
  } in
  fun loop(i: Int, v0: [s8], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s8] = [s8([s6(s0([[0.0]], [[1.0], [2.0]]), s0([[3.0]], [[4.0], [5.0]]))], [[s6(s0([[6.0]], [[7.0], [8.0]]), s0([[9.0]], [[10.0], [11.0]]))], [s6(s0([[12.0]], [[13.0], [14.0]]), s0([[15.0]], [[16.0], [17.0]]))]]), s8([s6(s0([[18.0]], [[19.0], [20.0]]), s0([[21.0]], [[22.0], [23.0]]))], [[s6(s0([[24.0]], [[25.0], [26.0]]), s0([[27.0]], [[28.0], [29.0]]))], [s6(s0([[30.0]], [[31.0], [32.0]]), s0([[33.0]], [[34.0], [35.0]]))]]), s8([s6(s0([[36.0]], [[37.0], [38.0]]), s0([[39.0]], [[40.0], [41.0]]))], [[s6(s0([[42.0]], [[43.0], [44.0]]), s0([[45.0]], [[46.0], [47.0]]))], [s6(s0([[48.0]], [[49.0], [50.0]]), s0([[51.0]], [[52.0], [53.0]]))]])] in
    let v1: Float = 54.0 in
    let initialResult: Float = 54.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()