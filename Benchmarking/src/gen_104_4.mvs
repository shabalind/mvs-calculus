  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let f74: ([s0]) -> [s0] = (v0: [s0]) -> [s0] {
    let v4: s0 = v0[0] in
    var v5: s0 = v4 in
    let v1: s0 = v0[0] in
    let v6: [[Float]] = v4.p1 in
    let v8: [Float] = v6[0] in
    let v9: s0 = v0[0] in
    var v3: s0 = v5 in
    let v2: [Float] = v6[1] in
    let v14: [[Float]] = v9.p1 in
    var v15: [[Float]] = v14 in
    v5.p0 = v6 in
    v15[1] = v2 in
    v5.p0 = v6 in
    let v19: s0 = v0[0] in
    var v21: [s0] = v0 in
    var v24: s0 = v3 in
    var v51: s0 = v5 in
    v51.p1 = v15 in
    v21[0] = v1 in
    v15[1] = v8 in
    var v57: [s0] = v21 in
    v21[0] = v51 in
    v57[0] = v24 in
    v5.p1 = v6 in
    v21[0] = v19 in
    v21[0] = v9 in
    v57
  } in
  let noinline_f0: ([[s0]], Float) -> Float = (v0: [[s0]], v1: Float) -> Float {
    let v3: [s0] = v0[0] in
    let v6: [s0] = f74(v3) in
    var v11: [s0] = v6 in
    let v8: [s0] = f74(v11) in
    let v10: [s0] = f74(v8) in
    let v24: s0 = v8[0] in
    var v29: s0 = v24 in
    let v25: [[Float]] = v29.p1 in
    let v43: s0 = v10[0] in
    var v47: [[Float]] = v25 in
    let v63: [[Float]] = v29.p0 in
    v29.p0 = v63 in
    let v39: [[Float]] = v43.p0 in
    v29.p1 = v25 in
    v29.p0 = v39 in
    let v117: [Float] = v47[1] in
    v11[0] = v43 in
    v29.p1 = v47 in
    let v72: Float = v117[0] in
    v72
  } in
  fun loop(i: Int, v0: [[s0]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s0]] = [[s0([[0.0], [1.0]], [[2.0], [3.0]])], [s0([[4.0], [5.0]], [[6.0], [7.0]])], [s0([[8.0], [9.0]], [[10.0], [11.0]])]] in
    let v1: Float = 12.0 in
    let initialResult: Float = 12.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()