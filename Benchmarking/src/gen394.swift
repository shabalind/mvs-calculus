  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: Double
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s2 {
    var p0: [s1]
    var p1: s1
  }
  struct s3 {
    var p0: s0
    var p1: s1
  }
  struct s4 {
    var p0: [s2]
    var p1: s3
  }
  struct s5 {
    var p0: [[s0]]
    var p1: [[s1]]
  }
  struct s6 {
    var p0: [s2]
  }
  struct s13 {
    var p0: [s6]
    var p1: [s4]
  }
  func f2(_ v0: s0) -> s0 {
    let v1: Double = v0.p1
    var v7: s0 = v0
    let v6: Double = v1 * v1
    var v5: s0 = v0
    let v8: Double = v0.p1
    var v3: Double = v1
    let v10: [[Double]] = v7.p0
    let v11: [Double] = [v6, v1, v3, v6, v3]
    var v2: [[Double]] = v10
    let v4: Double = v7.p1
    var v20: [Double] = v11
    let v9: Double = v7.p1
    let v12: [[Double]] = v7.p0
    let v15: [Double] = v2[1]
    var v17: [Double] = v20
    let v18: Double = v15[0]
    let v36: [[Double]] = v5.p0
    var v33: [Double] = v15
    v17[1] = v6
    let v23: [[Double]] = v5.p0
    v5.p1 = v9
    let v16: Double = v5.p1
    v5 = v0
    let v13: [Double] = v23[1]
    let v46: [[Double]] = v5.p0
    v5.p0 = v23
    v7.p0 = v36
    let v32: Double = v7.p1
    v20[0] = v16
    v7 = v0
    let v21: Double = v15[0]
    let v24: [[Double]] = v5.p0
    v7.p0 = v10
    v5.p0 = v24
    let v49: [[Double]] = v7.p0
    var v27: [[Double]] = v12
    var v22: [[Double]] = v27
    v7.p0 = v36
    var v29: [[Double]] = v22
    v5.p1 = v18
    v2[0] = v13
    v7.p1 = v32
    v5.p1 = v21
    let v69: [[Double]] = [v20, v11, v17, v20, v17, v11, v17]
    var v76: [Double] = v33
    let v54: Double = v20[0]
    let v92: [[Double]] = v0.p0
    var v60: Double = v9
    v20[2] = v8
    v17[0] = v4
    let v72: Double = v7.p1
    let v66: Double = v5.p1
    var v43: s0 = v7
    v5.p1 = v66
    v27[1] = v76
    v7.p1 = v16
    let v44: Double = v5.p1
    v43.p0 = v2
    let v63: Double = v0.p1
    var v83: [[Double]] = v29
    let v74: [Double] = v69[2]
    v2[1] = v13
    v17 = v74
    v5.p1 = v60
    let v174: Double = v17[0]
    v33[0] = v32
    v43.p1 = v54
    v5.p0 = v2
    v5.p0 = v92
    v7.p1 = v72
    let v140: [[Double]] = v43.p0
    v76[0] = v6
    v7.p0 = v83
    v43.p1 = v174
    v7.p0 = v46
    v43.p0 = v49
    v43.p0 = v12
    v5.p1 = v63
    v43.p1 = v44
    v7.p0 = v140
    v7.p0 = v83
    v43.p1 = v44
    return v43
  }
  @inline(never)
  func f0(_ v0: [s5], _ v1: [[s13]], _ v2: Double) -> Double {
    let v8: s5 = v0[2]
    let v10: [[s0]] = v8.p0
    let v17: [s0] = v10[2]
    let v25: s0 = v17[0]
    let v60: s0 = f2(v25)
    let v66: Double = v60.p1
    return v66
  }
  func benchmark() {
    let v0: [s5] = [s5(p0: [[s0(p0: [[0.0], [1.0]], p1: 2.0)], [s0(p0: [[3.0], [4.0]], p1: 5.0)], [s0(p0: [[6.0], [7.0]], p1: 8.0)]], p1: [[s1(p0: [s0(p0: [[9.0], [10.0]], p1: 11.0), s0(p0: [[12.0], [13.0]], p1: 14.0), s0(p0: [[15.0], [16.0]], p1: 17.0)], p1: [s0(p0: [[18.0], [19.0]], p1: 20.0), s0(p0: [[21.0], [22.0]], p1: 23.0)])], [s1(p0: [s0(p0: [[24.0], [25.0]], p1: 26.0), s0(p0: [[27.0], [28.0]], p1: 29.0), s0(p0: [[30.0], [31.0]], p1: 32.0)], p1: [s0(p0: [[33.0], [34.0]], p1: 35.0), s0(p0: [[36.0], [37.0]], p1: 38.0)])]]), s5(p0: [[s0(p0: [[39.0], [40.0]], p1: 41.0)], [s0(p0: [[42.0], [43.0]], p1: 44.0)], [s0(p0: [[45.0], [46.0]], p1: 47.0)]], p1: [[s1(p0: [s0(p0: [[48.0], [49.0]], p1: 50.0), s0(p0: [[51.0], [52.0]], p1: 53.0), s0(p0: [[54.0], [55.0]], p1: 56.0)], p1: [s0(p0: [[57.0], [58.0]], p1: 59.0), s0(p0: [[60.0], [61.0]], p1: 62.0)])], [s1(p0: [s0(p0: [[63.0], [64.0]], p1: 65.0), s0(p0: [[66.0], [67.0]], p1: 68.0), s0(p0: [[69.0], [70.0]], p1: 71.0)], p1: [s0(p0: [[72.0], [73.0]], p1: 74.0), s0(p0: [[75.0], [76.0]], p1: 77.0)])]]), s5(p0: [[s0(p0: [[78.0], [79.0]], p1: 80.0)], [s0(p0: [[81.0], [82.0]], p1: 83.0)], [s0(p0: [[84.0], [85.0]], p1: 86.0)]], p1: [[s1(p0: [s0(p0: [[87.0], [88.0]], p1: 89.0), s0(p0: [[90.0], [91.0]], p1: 92.0), s0(p0: [[93.0], [94.0]], p1: 95.0)], p1: [s0(p0: [[96.0], [97.0]], p1: 98.0), s0(p0: [[99.0], [100.0]], p1: 101.0)])], [s1(p0: [s0(p0: [[102.0], [103.0]], p1: 104.0), s0(p0: [[105.0], [106.0]], p1: 107.0), s0(p0: [[108.0], [109.0]], p1: 110.0)], p1: [s0(p0: [[111.0], [112.0]], p1: 113.0), s0(p0: [[114.0], [115.0]], p1: 116.0)])]])]
    let v1: [[s13]] = [[s13(p0: [s6(p0: [s2(p0: [s1(p0: [s0(p0: [[117.0], [118.0]], p1: 119.0), s0(p0: [[120.0], [121.0]], p1: 122.0), s0(p0: [[123.0], [124.0]], p1: 125.0)], p1: [s0(p0: [[126.0], [127.0]], p1: 128.0), s0(p0: [[129.0], [130.0]], p1: 131.0)]), s1(p0: [s0(p0: [[132.0], [133.0]], p1: 134.0), s0(p0: [[135.0], [136.0]], p1: 137.0), s0(p0: [[138.0], [139.0]], p1: 140.0)], p1: [s0(p0: [[141.0], [142.0]], p1: 143.0), s0(p0: [[144.0], [145.0]], p1: 146.0)]), s1(p0: [s0(p0: [[147.0], [148.0]], p1: 149.0), s0(p0: [[150.0], [151.0]], p1: 152.0), s0(p0: [[153.0], [154.0]], p1: 155.0)], p1: [s0(p0: [[156.0], [157.0]], p1: 158.0), s0(p0: [[159.0], [160.0]], p1: 161.0)])], p1: s1(p0: [s0(p0: [[162.0], [163.0]], p1: 164.0), s0(p0: [[165.0], [166.0]], p1: 167.0), s0(p0: [[168.0], [169.0]], p1: 170.0)], p1: [s0(p0: [[171.0], [172.0]], p1: 173.0), s0(p0: [[174.0], [175.0]], p1: 176.0)]))]), s6(p0: [s2(p0: [s1(p0: [s0(p0: [[177.0], [178.0]], p1: 179.0), s0(p0: [[180.0], [181.0]], p1: 182.0), s0(p0: [[183.0], [184.0]], p1: 185.0)], p1: [s0(p0: [[186.0], [187.0]], p1: 188.0), s0(p0: [[189.0], [190.0]], p1: 191.0)]), s1(p0: [s0(p0: [[192.0], [193.0]], p1: 194.0), s0(p0: [[195.0], [196.0]], p1: 197.0), s0(p0: [[198.0], [199.0]], p1: 200.0)], p1: [s0(p0: [[201.0], [202.0]], p1: 203.0), s0(p0: [[204.0], [205.0]], p1: 206.0)]), s1(p0: [s0(p0: [[207.0], [208.0]], p1: 209.0), s0(p0: [[210.0], [211.0]], p1: 212.0), s0(p0: [[213.0], [214.0]], p1: 215.0)], p1: [s0(p0: [[216.0], [217.0]], p1: 218.0), s0(p0: [[219.0], [220.0]], p1: 221.0)])], p1: s1(p0: [s0(p0: [[222.0], [223.0]], p1: 224.0), s0(p0: [[225.0], [226.0]], p1: 227.0), s0(p0: [[228.0], [229.0]], p1: 230.0)], p1: [s0(p0: [[231.0], [232.0]], p1: 233.0), s0(p0: [[234.0], [235.0]], p1: 236.0)]))]), s6(p0: [s2(p0: [s1(p0: [s0(p0: [[237.0], [238.0]], p1: 239.0), s0(p0: [[240.0], [241.0]], p1: 242.0), s0(p0: [[243.0], [244.0]], p1: 245.0)], p1: [s0(p0: [[246.0], [247.0]], p1: 248.0), s0(p0: [[249.0], [250.0]], p1: 251.0)]), s1(p0: [s0(p0: [[252.0], [253.0]], p1: 254.0), s0(p0: [[255.0], [256.0]], p1: 257.0), s0(p0: [[258.0], [259.0]], p1: 260.0)], p1: [s0(p0: [[261.0], [262.0]], p1: 263.0), s0(p0: [[264.0], [265.0]], p1: 266.0)]), s1(p0: [s0(p0: [[267.0], [268.0]], p1: 269.0), s0(p0: [[270.0], [271.0]], p1: 272.0), s0(p0: [[273.0], [274.0]], p1: 275.0)], p1: [s0(p0: [[276.0], [277.0]], p1: 278.0), s0(p0: [[279.0], [280.0]], p1: 281.0)])], p1: s1(p0: [s0(p0: [[282.0], [283.0]], p1: 284.0), s0(p0: [[285.0], [286.0]], p1: 287.0), s0(p0: [[288.0], [289.0]], p1: 290.0)], p1: [s0(p0: [[291.0], [292.0]], p1: 293.0), s0(p0: [[294.0], [295.0]], p1: 296.0)]))])], p1: [s4(p0: [s2(p0: [s1(p0: [s0(p0: [[297.0], [298.0]], p1: 299.0), s0(p0: [[300.0], [301.0]], p1: 302.0), s0(p0: [[303.0], [304.0]], p1: 305.0)], p1: [s0(p0: [[306.0], [307.0]], p1: 308.0), s0(p0: [[309.0], [310.0]], p1: 311.0)]), s1(p0: [s0(p0: [[312.0], [313.0]], p1: 314.0), s0(p0: [[315.0], [316.0]], p1: 317.0), s0(p0: [[318.0], [319.0]], p1: 320.0)], p1: [s0(p0: [[321.0], [322.0]], p1: 323.0), s0(p0: [[324.0], [325.0]], p1: 326.0)]), s1(p0: [s0(p0: [[327.0], [328.0]], p1: 329.0), s0(p0: [[330.0], [331.0]], p1: 332.0), s0(p0: [[333.0], [334.0]], p1: 335.0)], p1: [s0(p0: [[336.0], [337.0]], p1: 338.0), s0(p0: [[339.0], [340.0]], p1: 341.0)])], p1: s1(p0: [s0(p0: [[342.0], [343.0]], p1: 344.0), s0(p0: [[345.0], [346.0]], p1: 347.0), s0(p0: [[348.0], [349.0]], p1: 350.0)], p1: [s0(p0: [[351.0], [352.0]], p1: 353.0), s0(p0: [[354.0], [355.0]], p1: 356.0)]))], p1: s3(p0: s0(p0: [[357.0], [358.0]], p1: 359.0), p1: s1(p0: [s0(p0: [[360.0], [361.0]], p1: 362.0), s0(p0: [[363.0], [364.0]], p1: 365.0), s0(p0: [[366.0], [367.0]], p1: 368.0)], p1: [s0(p0: [[369.0], [370.0]], p1: 371.0), s0(p0: [[372.0], [373.0]], p1: 374.0)])))])], [s13(p0: [s6(p0: [s2(p0: [s1(p0: [s0(p0: [[375.0], [376.0]], p1: 377.0), s0(p0: [[378.0], [379.0]], p1: 380.0), s0(p0: [[381.0], [382.0]], p1: 383.0)], p1: [s0(p0: [[384.0], [385.0]], p1: 386.0), s0(p0: [[387.0], [388.0]], p1: 389.0)]), s1(p0: [s0(p0: [[390.0], [391.0]], p1: 392.0), s0(p0: [[393.0], [394.0]], p1: 395.0), s0(p0: [[396.0], [397.0]], p1: 398.0)], p1: [s0(p0: [[399.0], [400.0]], p1: 401.0), s0(p0: [[402.0], [403.0]], p1: 404.0)]), s1(p0: [s0(p0: [[405.0], [406.0]], p1: 407.0), s0(p0: [[408.0], [409.0]], p1: 410.0), s0(p0: [[411.0], [412.0]], p1: 413.0)], p1: [s0(p0: [[414.0], [415.0]], p1: 416.0), s0(p0: [[417.0], [418.0]], p1: 419.0)])], p1: s1(p0: [s0(p0: [[420.0], [421.0]], p1: 422.0), s0(p0: [[423.0], [424.0]], p1: 425.0), s0(p0: [[426.0], [427.0]], p1: 428.0)], p1: [s0(p0: [[429.0], [430.0]], p1: 431.0), s0(p0: [[432.0], [433.0]], p1: 434.0)]))]), s6(p0: [s2(p0: [s1(p0: [s0(p0: [[435.0], [436.0]], p1: 437.0), s0(p0: [[438.0], [439.0]], p1: 440.0), s0(p0: [[441.0], [442.0]], p1: 443.0)], p1: [s0(p0: [[444.0], [445.0]], p1: 446.0), s0(p0: [[447.0], [448.0]], p1: 449.0)]), s1(p0: [s0(p0: [[450.0], [451.0]], p1: 452.0), s0(p0: [[453.0], [454.0]], p1: 455.0), s0(p0: [[456.0], [457.0]], p1: 458.0)], p1: [s0(p0: [[459.0], [460.0]], p1: 461.0), s0(p0: [[462.0], [463.0]], p1: 464.0)]), s1(p0: [s0(p0: [[465.0], [466.0]], p1: 467.0), s0(p0: [[468.0], [469.0]], p1: 470.0), s0(p0: [[471.0], [472.0]], p1: 473.0)], p1: [s0(p0: [[474.0], [475.0]], p1: 476.0), s0(p0: [[477.0], [478.0]], p1: 479.0)])], p1: s1(p0: [s0(p0: [[480.0], [481.0]], p1: 482.0), s0(p0: [[483.0], [484.0]], p1: 485.0), s0(p0: [[486.0], [487.0]], p1: 488.0)], p1: [s0(p0: [[489.0], [490.0]], p1: 491.0), s0(p0: [[492.0], [493.0]], p1: 494.0)]))]), s6(p0: [s2(p0: [s1(p0: [s0(p0: [[495.0], [496.0]], p1: 497.0), s0(p0: [[498.0], [499.0]], p1: 500.0), s0(p0: [[501.0], [502.0]], p1: 503.0)], p1: [s0(p0: [[504.0], [505.0]], p1: 506.0), s0(p0: [[507.0], [508.0]], p1: 509.0)]), s1(p0: [s0(p0: [[510.0], [511.0]], p1: 512.0), s0(p0: [[513.0], [514.0]], p1: 515.0), s0(p0: [[516.0], [517.0]], p1: 518.0)], p1: [s0(p0: [[519.0], [520.0]], p1: 521.0), s0(p0: [[522.0], [523.0]], p1: 524.0)]), s1(p0: [s0(p0: [[525.0], [526.0]], p1: 527.0), s0(p0: [[528.0], [529.0]], p1: 530.0), s0(p0: [[531.0], [532.0]], p1: 533.0)], p1: [s0(p0: [[534.0], [535.0]], p1: 536.0), s0(p0: [[537.0], [538.0]], p1: 539.0)])], p1: s1(p0: [s0(p0: [[540.0], [541.0]], p1: 542.0), s0(p0: [[543.0], [544.0]], p1: 545.0), s0(p0: [[546.0], [547.0]], p1: 548.0)], p1: [s0(p0: [[549.0], [550.0]], p1: 551.0), s0(p0: [[552.0], [553.0]], p1: 554.0)]))])], p1: [s4(p0: [s2(p0: [s1(p0: [s0(p0: [[555.0], [556.0]], p1: 557.0), s0(p0: [[558.0], [559.0]], p1: 560.0), s0(p0: [[561.0], [562.0]], p1: 563.0)], p1: [s0(p0: [[564.0], [565.0]], p1: 566.0), s0(p0: [[567.0], [568.0]], p1: 569.0)]), s1(p0: [s0(p0: [[570.0], [571.0]], p1: 572.0), s0(p0: [[573.0], [574.0]], p1: 575.0), s0(p0: [[576.0], [577.0]], p1: 578.0)], p1: [s0(p0: [[579.0], [580.0]], p1: 581.0), s0(p0: [[582.0], [583.0]], p1: 584.0)]), s1(p0: [s0(p0: [[585.0], [586.0]], p1: 587.0), s0(p0: [[588.0], [589.0]], p1: 590.0), s0(p0: [[591.0], [592.0]], p1: 593.0)], p1: [s0(p0: [[594.0], [595.0]], p1: 596.0), s0(p0: [[597.0], [598.0]], p1: 599.0)])], p1: s1(p0: [s0(p0: [[600.0], [601.0]], p1: 602.0), s0(p0: [[603.0], [604.0]], p1: 605.0), s0(p0: [[606.0], [607.0]], p1: 608.0)], p1: [s0(p0: [[609.0], [610.0]], p1: 611.0), s0(p0: [[612.0], [613.0]], p1: 614.0)]))], p1: s3(p0: s0(p0: [[615.0], [616.0]], p1: 617.0), p1: s1(p0: [s0(p0: [[618.0], [619.0]], p1: 620.0), s0(p0: [[621.0], [622.0]], p1: 623.0), s0(p0: [[624.0], [625.0]], p1: 626.0)], p1: [s0(p0: [[627.0], [628.0]], p1: 629.0), s0(p0: [[630.0], [631.0]], p1: 632.0)])))])], [s13(p0: [s6(p0: [s2(p0: [s1(p0: [s0(p0: [[633.0], [634.0]], p1: 635.0), s0(p0: [[636.0], [637.0]], p1: 638.0), s0(p0: [[639.0], [640.0]], p1: 641.0)], p1: [s0(p0: [[642.0], [643.0]], p1: 644.0), s0(p0: [[645.0], [646.0]], p1: 647.0)]), s1(p0: [s0(p0: [[648.0], [649.0]], p1: 650.0), s0(p0: [[651.0], [652.0]], p1: 653.0), s0(p0: [[654.0], [655.0]], p1: 656.0)], p1: [s0(p0: [[657.0], [658.0]], p1: 659.0), s0(p0: [[660.0], [661.0]], p1: 662.0)]), s1(p0: [s0(p0: [[663.0], [664.0]], p1: 665.0), s0(p0: [[666.0], [667.0]], p1: 668.0), s0(p0: [[669.0], [670.0]], p1: 671.0)], p1: [s0(p0: [[672.0], [673.0]], p1: 674.0), s0(p0: [[675.0], [676.0]], p1: 677.0)])], p1: s1(p0: [s0(p0: [[678.0], [679.0]], p1: 680.0), s0(p0: [[681.0], [682.0]], p1: 683.0), s0(p0: [[684.0], [685.0]], p1: 686.0)], p1: [s0(p0: [[687.0], [688.0]], p1: 689.0), s0(p0: [[690.0], [691.0]], p1: 692.0)]))]), s6(p0: [s2(p0: [s1(p0: [s0(p0: [[693.0], [694.0]], p1: 695.0), s0(p0: [[696.0], [697.0]], p1: 698.0), s0(p0: [[699.0], [700.0]], p1: 701.0)], p1: [s0(p0: [[702.0], [703.0]], p1: 704.0), s0(p0: [[705.0], [706.0]], p1: 707.0)]), s1(p0: [s0(p0: [[708.0], [709.0]], p1: 710.0), s0(p0: [[711.0], [712.0]], p1: 713.0), s0(p0: [[714.0], [715.0]], p1: 716.0)], p1: [s0(p0: [[717.0], [718.0]], p1: 719.0), s0(p0: [[720.0], [721.0]], p1: 722.0)]), s1(p0: [s0(p0: [[723.0], [724.0]], p1: 725.0), s0(p0: [[726.0], [727.0]], p1: 728.0), s0(p0: [[729.0], [730.0]], p1: 731.0)], p1: [s0(p0: [[732.0], [733.0]], p1: 734.0), s0(p0: [[735.0], [736.0]], p1: 737.0)])], p1: s1(p0: [s0(p0: [[738.0], [739.0]], p1: 740.0), s0(p0: [[741.0], [742.0]], p1: 743.0), s0(p0: [[744.0], [745.0]], p1: 746.0)], p1: [s0(p0: [[747.0], [748.0]], p1: 749.0), s0(p0: [[750.0], [751.0]], p1: 752.0)]))]), s6(p0: [s2(p0: [s1(p0: [s0(p0: [[753.0], [754.0]], p1: 755.0), s0(p0: [[756.0], [757.0]], p1: 758.0), s0(p0: [[759.0], [760.0]], p1: 761.0)], p1: [s0(p0: [[762.0], [763.0]], p1: 764.0), s0(p0: [[765.0], [766.0]], p1: 767.0)]), s1(p0: [s0(p0: [[768.0], [769.0]], p1: 770.0), s0(p0: [[771.0], [772.0]], p1: 773.0), s0(p0: [[774.0], [775.0]], p1: 776.0)], p1: [s0(p0: [[777.0], [778.0]], p1: 779.0), s0(p0: [[780.0], [781.0]], p1: 782.0)]), s1(p0: [s0(p0: [[783.0], [784.0]], p1: 785.0), s0(p0: [[786.0], [787.0]], p1: 788.0), s0(p0: [[789.0], [790.0]], p1: 791.0)], p1: [s0(p0: [[792.0], [793.0]], p1: 794.0), s0(p0: [[795.0], [796.0]], p1: 797.0)])], p1: s1(p0: [s0(p0: [[798.0], [799.0]], p1: 800.0), s0(p0: [[801.0], [802.0]], p1: 803.0), s0(p0: [[804.0], [805.0]], p1: 806.0)], p1: [s0(p0: [[807.0], [808.0]], p1: 809.0), s0(p0: [[810.0], [811.0]], p1: 812.0)]))])], p1: [s4(p0: [s2(p0: [s1(p0: [s0(p0: [[813.0], [814.0]], p1: 815.0), s0(p0: [[816.0], [817.0]], p1: 818.0), s0(p0: [[819.0], [820.0]], p1: 821.0)], p1: [s0(p0: [[822.0], [823.0]], p1: 824.0), s0(p0: [[825.0], [826.0]], p1: 827.0)]), s1(p0: [s0(p0: [[828.0], [829.0]], p1: 830.0), s0(p0: [[831.0], [832.0]], p1: 833.0), s0(p0: [[834.0], [835.0]], p1: 836.0)], p1: [s0(p0: [[837.0], [838.0]], p1: 839.0), s0(p0: [[840.0], [841.0]], p1: 842.0)]), s1(p0: [s0(p0: [[843.0], [844.0]], p1: 845.0), s0(p0: [[846.0], [847.0]], p1: 848.0), s0(p0: [[849.0], [850.0]], p1: 851.0)], p1: [s0(p0: [[852.0], [853.0]], p1: 854.0), s0(p0: [[855.0], [856.0]], p1: 857.0)])], p1: s1(p0: [s0(p0: [[858.0], [859.0]], p1: 860.0), s0(p0: [[861.0], [862.0]], p1: 863.0), s0(p0: [[864.0], [865.0]], p1: 866.0)], p1: [s0(p0: [[867.0], [868.0]], p1: 869.0), s0(p0: [[870.0], [871.0]], p1: 872.0)]))], p1: s3(p0: s0(p0: [[873.0], [874.0]], p1: 875.0), p1: s1(p0: [s0(p0: [[876.0], [877.0]], p1: 878.0), s0(p0: [[879.0], [880.0]], p1: 881.0), s0(p0: [[882.0], [883.0]], p1: 884.0)], p1: [s0(p0: [[885.0], [886.0]], p1: 887.0), s0(p0: [[888.0], [889.0]], p1: 890.0)])))])]]
    let v2: Double = 891.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 891.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
