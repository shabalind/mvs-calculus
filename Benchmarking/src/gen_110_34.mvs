  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  let noinline_f0: ([s1], Float) -> Float = (v0: [s1], v1: Float) -> Float {
    let v6: s1 = v0[0] in
    let v4: s0 = v6.p0 in
    let v8: [[Float]] = v4.p0 in
    let v9: [Float] = v8[0] in
    let v27: [Float] = v8[1] in
    let v33: Float = v9[0] in
    var v51: [Float] = v27 in
    let v50: Float = v51[0] in
    let v87: Float = v1 * v33 in
    v51[0] = v87 in
    v50
  } in
  fun loop(i: Int, v0: [s1], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1(s0([[0.0], [1.0]], [[2.0], [3.0]], [[4.0], [5.0]]), [s0([[6.0], [7.0]], [[8.0], [9.0]], [[10.0], [11.0]]), s0([[12.0], [13.0]], [[14.0], [15.0]], [[16.0], [17.0]])])] in
    let v1: Float = 18.0 in
    let initialResult: Float = 18.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()