  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: Double
    var p1: s0
  }
  struct s3 {
    var p0: [s1]
    var p1: s2
  }
  struct s4 {
    var p0: [s2]
    var p1: [s1]
  }
  struct s6 {
    var p0: s3
    var p1: [s2]
  }
  struct s7 {
    var p0: [Double]
    var p1: [[s4]]
    var p2: s3
  }
  struct s8 {
    var p0: s1
    var p1: s3
    var p2: [s6]
    var p3: s7
  }
  struct s10 {
    var p0: s8
    var p1: s3
  }
  func f40(_ v0: s1) -> s1 {
    var v7: s1 = v0
    v7 = v0
    var v3: s1 = v7
    var v2: s1 = v3
    let v1: s0 = v0.p0
    let v4: [s0] = [v1, v1, v1, v1, v1, v1, v1]
    let v8: s0 = v7.p0
    let v13: s0 = v4[1]
    let v5: s0 = v4[4]
    let v6: s0 = v4[3]
    let v25: s0 = v3.p1
    var v14: s0 = v8
    let v29: [[Double]] = v6.p1
    let v30: [[Double]] = v8.p0
    v3 = v2
    let v15: [[Double]] = v5.p1
    let v58: s0 = v4[1]
    v2.p0 = v25
    let v11: s0 = v4[1]
    v2.p0 = v11
    v3.p1 = v14
    let v32: [[Double]] = v8.p0
    let v41: s0 = s0(p0: v30, p1: v15)
    v2.p0 = v58
    var v28: [[Double]] = v32
    let v40: s0 = s0(p0: v28, p1: v29)
    v2.p0 = v8
    v3.p1 = v40
    let v51: s0 = v0.p1
    var v100: s1 = v2
    v100.p0 = v13
    v7.p1 = v11
    v100.p0 = v58
    v3.p0 = v1
    v3.p0 = v41
    v2.p0 = v51
    return v100
  }
  @inline(never)
  func f0(_ v0: [s10], _ v1: s8, _ v2: Double) -> Double {
    let v4: s1 = v1.p0
    var v3: s1 = v4
    let v8: s0 = v3.p0
    let v9: s0 = v4.p1
    var v10: s0 = v9
    let v11: s1 = f40(v3)
    v3.p0 = v10
    let v13: [[Double]] = v8.p1
    let v17: Double = v2 - v2
    let v41: [Double] = v13[0]
    let v26: s0 = v11.p1
    v10.p1 = v13
    let v29: Double = v41[0]
    let v25: Double = v17 * v29
    v3.p1 = v26
    v10 = v9
    v3.p0 = v10
    let v35: s0 = v4.p1
    let v51: [[Double]] = v35.p1
    v10.p1 = v51
    let v50: Double = v29 - v25
    return v50
  }
  func benchmark() {
    let v0: [s10] = [s10(p0: s8(p0: s1(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0]]), p1: s0(p0: [[3.0], [4.0]], p1: [[5.0]])), p1: s3(p0: [s1(p0: s0(p0: [[6.0], [7.0]], p1: [[8.0]]), p1: s0(p0: [[9.0], [10.0]], p1: [[11.0]])), s1(p0: s0(p0: [[12.0], [13.0]], p1: [[14.0]]), p1: s0(p0: [[15.0], [16.0]], p1: [[17.0]])), s1(p0: s0(p0: [[18.0], [19.0]], p1: [[20.0]]), p1: s0(p0: [[21.0], [22.0]], p1: [[23.0]]))], p1: s2(p0: 24.0, p1: s0(p0: [[25.0], [26.0]], p1: [[27.0]]))), p2: [s6(p0: s3(p0: [s1(p0: s0(p0: [[28.0], [29.0]], p1: [[30.0]]), p1: s0(p0: [[31.0], [32.0]], p1: [[33.0]])), s1(p0: s0(p0: [[34.0], [35.0]], p1: [[36.0]]), p1: s0(p0: [[37.0], [38.0]], p1: [[39.0]])), s1(p0: s0(p0: [[40.0], [41.0]], p1: [[42.0]]), p1: s0(p0: [[43.0], [44.0]], p1: [[45.0]]))], p1: s2(p0: 46.0, p1: s0(p0: [[47.0], [48.0]], p1: [[49.0]]))), p1: [s2(p0: 50.0, p1: s0(p0: [[51.0], [52.0]], p1: [[53.0]])), s2(p0: 54.0, p1: s0(p0: [[55.0], [56.0]], p1: [[57.0]]))])], p3: s7(p0: [58.0], p1: [[s4(p0: [s2(p0: 59.0, p1: s0(p0: [[60.0], [61.0]], p1: [[62.0]])), s2(p0: 63.0, p1: s0(p0: [[64.0], [65.0]], p1: [[66.0]])), s2(p0: 67.0, p1: s0(p0: [[68.0], [69.0]], p1: [[70.0]]))], p1: [s1(p0: s0(p0: [[71.0], [72.0]], p1: [[73.0]]), p1: s0(p0: [[74.0], [75.0]], p1: [[76.0]])), s1(p0: s0(p0: [[77.0], [78.0]], p1: [[79.0]]), p1: s0(p0: [[80.0], [81.0]], p1: [[82.0]]))])]], p2: s3(p0: [s1(p0: s0(p0: [[83.0], [84.0]], p1: [[85.0]]), p1: s0(p0: [[86.0], [87.0]], p1: [[88.0]])), s1(p0: s0(p0: [[89.0], [90.0]], p1: [[91.0]]), p1: s0(p0: [[92.0], [93.0]], p1: [[94.0]])), s1(p0: s0(p0: [[95.0], [96.0]], p1: [[97.0]]), p1: s0(p0: [[98.0], [99.0]], p1: [[100.0]]))], p1: s2(p0: 101.0, p1: s0(p0: [[102.0], [103.0]], p1: [[104.0]]))))), p1: s3(p0: [s1(p0: s0(p0: [[105.0], [106.0]], p1: [[107.0]]), p1: s0(p0: [[108.0], [109.0]], p1: [[110.0]])), s1(p0: s0(p0: [[111.0], [112.0]], p1: [[113.0]]), p1: s0(p0: [[114.0], [115.0]], p1: [[116.0]])), s1(p0: s0(p0: [[117.0], [118.0]], p1: [[119.0]]), p1: s0(p0: [[120.0], [121.0]], p1: [[122.0]]))], p1: s2(p0: 123.0, p1: s0(p0: [[124.0], [125.0]], p1: [[126.0]]))))]
    let v1: s8 = s8(p0: s1(p0: s0(p0: [[127.0], [128.0]], p1: [[129.0]]), p1: s0(p0: [[130.0], [131.0]], p1: [[132.0]])), p1: s3(p0: [s1(p0: s0(p0: [[133.0], [134.0]], p1: [[135.0]]), p1: s0(p0: [[136.0], [137.0]], p1: [[138.0]])), s1(p0: s0(p0: [[139.0], [140.0]], p1: [[141.0]]), p1: s0(p0: [[142.0], [143.0]], p1: [[144.0]])), s1(p0: s0(p0: [[145.0], [146.0]], p1: [[147.0]]), p1: s0(p0: [[148.0], [149.0]], p1: [[150.0]]))], p1: s2(p0: 151.0, p1: s0(p0: [[152.0], [153.0]], p1: [[154.0]]))), p2: [s6(p0: s3(p0: [s1(p0: s0(p0: [[155.0], [156.0]], p1: [[157.0]]), p1: s0(p0: [[158.0], [159.0]], p1: [[160.0]])), s1(p0: s0(p0: [[161.0], [162.0]], p1: [[163.0]]), p1: s0(p0: [[164.0], [165.0]], p1: [[166.0]])), s1(p0: s0(p0: [[167.0], [168.0]], p1: [[169.0]]), p1: s0(p0: [[170.0], [171.0]], p1: [[172.0]]))], p1: s2(p0: 173.0, p1: s0(p0: [[174.0], [175.0]], p1: [[176.0]]))), p1: [s2(p0: 177.0, p1: s0(p0: [[178.0], [179.0]], p1: [[180.0]])), s2(p0: 181.0, p1: s0(p0: [[182.0], [183.0]], p1: [[184.0]]))])], p3: s7(p0: [185.0], p1: [[s4(p0: [s2(p0: 186.0, p1: s0(p0: [[187.0], [188.0]], p1: [[189.0]])), s2(p0: 190.0, p1: s0(p0: [[191.0], [192.0]], p1: [[193.0]])), s2(p0: 194.0, p1: s0(p0: [[195.0], [196.0]], p1: [[197.0]]))], p1: [s1(p0: s0(p0: [[198.0], [199.0]], p1: [[200.0]]), p1: s0(p0: [[201.0], [202.0]], p1: [[203.0]])), s1(p0: s0(p0: [[204.0], [205.0]], p1: [[206.0]]), p1: s0(p0: [[207.0], [208.0]], p1: [[209.0]]))])]], p2: s3(p0: [s1(p0: s0(p0: [[210.0], [211.0]], p1: [[212.0]]), p1: s0(p0: [[213.0], [214.0]], p1: [[215.0]])), s1(p0: s0(p0: [[216.0], [217.0]], p1: [[218.0]]), p1: s0(p0: [[219.0], [220.0]], p1: [[221.0]])), s1(p0: s0(p0: [[222.0], [223.0]], p1: [[224.0]]), p1: s0(p0: [[225.0], [226.0]], p1: [[227.0]]))], p1: s2(p0: 228.0, p1: s0(p0: [[229.0], [230.0]], p1: [[231.0]])))))
    let v2: Double = 232.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 232.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
