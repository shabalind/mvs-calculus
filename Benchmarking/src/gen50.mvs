  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
    var p3: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s1]
    var p1: s1
  } in
  let f49: (Float, s0, Float) -> Float = (v0: Float, v1: s0, v2: Float) -> Float {
    let v8: [[Float]] = v1.p3 in
    var v4: [[Float]] = v8 in
    let v3: [[Float]] = v1.p2 in
    let v13: [Float] = v4[0] in
    let v5: [Float] = v3[1] in
    let v7: Float = v13[0] in
    v4[0] = v13 in
    let v6: [[Float]] = v1.p3 in
    v4[0] = v5 in
    let v21: [Float] = v3[1] in
    let v20: [Float] = v3[0] in
    v4[0] = v21 in
    let v18: [Float] = v6[1] in
    v4[1] = v21 in
    v4[1] = v20 in
    var v48: Float = v7 in
    v4[0] = v18 in
    v4[1] = v20 in
    v48
  } in
  let f37: (s2) -> s2 = (v0: s2) -> s2 {
    var v2: s2 = v0 in
    var v6: s2 = v2 in
    var v3: s2 = v6 in
    let v4: [s1] = v0.p0 in
    let v1: s1 = v4[0] in
    v6.p0 = v4 in
    v6.p0 = v4 in
    v3.p0 = v4 in
    v3.p1 = v1 in
    v3
  } in
  let noinline_f0: (s0, [s2], Float) -> Float = (v0: s0, v1: [s2], v2: Float) -> Float {
    let v4: [[Float]] = v0.p2 in
    let v3: [[Float]] = v0.p0 in
    var v6: [[Float]] = v4 in
    let v11: Float = f49(v2, v0, v2) in
    let v8: [Float] = v6[1] in
    v6 = v4 in
    let v7: Float = f49(v11, v0, v11) in
    var v12: s0 = v0 in
    v12 = v0 in
    v12.p1 = v6 in
    let v14: [[Float]] = v12.p1 in
    let v13: [[Float]] = v0.p3 in
    let v17: Float = v8[0] in
    let v16: s2 = v1[0] in
    let v15: Float = f49(v7, v12, v17) in
    var v19: [Float] = v8 in
    let v21: s2 = f37(v16) in
    let v24: s1 = v21.p1 in
    var v30: [[Float]] = v13 in
    var v25: [Float] = v8 in
    var v26: [[Float]] = v30 in
    let v22: s0 = v24.p1 in
    v6[1] = v19 in
    let v29: Float = v19[0] in
    let v20: [Float] = v3[0] in
    v12.p3 = v26 in
    v25[0] = v15 in
    let v61: Float = v8[0] in
    v30[0] = v8 in
    var v47: [[Float]] = v3 in
    let v117: [[Float]] = v22.p0 in
    let v66: s0 = v24.p1 in
    let v65: Float = f49(v17, v66, v29) in
    v25[0] = v11 in
    let v50: [Float] = v47[0] in
    var v40: [Float] = v20 in
    let v35: [Float] = v14[1] in
    v40[0] = v61 in
    v30[1] = v40 in
    v26[1] = v19 in
    let v44: Float = v2 - v29 in
    var v81: Float = v65 in
    let v63: Float = f49(v2, v22, v7) in
    v40[0] = v81 in
    v25 = v50 in
    v19[0] = v44 in
    v25[0] = v2 in
    v47 = v117 in
    v12.p0 = v47 in
    v25[0] = v63 in
    v6[1] = v35 in
    let v274: Float = v25[0] in
    v274
  } in
  fun loop(i: Int, v0: s0, v1: [s2], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0]], [[1.0], [2.0]], [[3.0], [4.0]], [[5.0], [6.0]]) in
    let v1: [s2] = [s2([s1(s0([[7.0]], [[8.0], [9.0]], [[10.0], [11.0]], [[12.0], [13.0]]), s0([[14.0]], [[15.0], [16.0]], [[17.0], [18.0]], [[19.0], [20.0]]))], s1(s0([[21.0]], [[22.0], [23.0]], [[24.0], [25.0]], [[26.0], [27.0]]), s0([[28.0]], [[29.0], [30.0]], [[31.0], [32.0]], [[33.0], [34.0]]))), s2([s1(s0([[35.0]], [[36.0], [37.0]], [[38.0], [39.0]], [[40.0], [41.0]]), s0([[42.0]], [[43.0], [44.0]], [[45.0], [46.0]], [[47.0], [48.0]]))], s1(s0([[49.0]], [[50.0], [51.0]], [[52.0], [53.0]], [[54.0], [55.0]]), s0([[56.0]], [[57.0], [58.0]], [[59.0], [60.0]], [[61.0], [62.0]])))] in
    let v2: Float = 63.0 in
    let initialResult: Float = 63.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()