  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s4 {
    var p0: s1
    var p1: [s1]
  } in
  let noinline_f0: ([[s4]], Float) -> Float = (v0: [[s4]], v1: Float) -> Float {
    let v12: [s4] = v0[0] in
    let v10: s4 = v12[0] in
    let v15: s1 = v10.p0 in
    let v20: s0 = v15.p1 in
    let v28: [[Float]] = v20.p1 in
    let v29: [[Float]] = v20.p1 in
    var v34: [[Float]] = v28 in
    let v49: [Float] = v29[0] in
    let v55: [Float] = v34[0] in
    let v58: Float = v55[0] in
    v34 = v28 in
    v34[0] = v49 in
    v58
  } in
  fun loop(i: Int, v0: [[s4]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s4]] = [[s4(s1([s0([[0.0], [1.0], [2.0]], [[3.0]])], s0([[4.0], [5.0], [6.0]], [[7.0]])), [s1([s0([[8.0], [9.0], [10.0]], [[11.0]])], s0([[12.0], [13.0], [14.0]], [[15.0]]))])]] in
    let v1: Float = 16.0 in
    let initialResult: Float = 16.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()