  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
    var p3: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s1
    var p1: s1
  } in
  struct s4 {
    var p0: s2
    var p1: s0
  } in
  struct s5 {
    var p0: [s1]
    var p1: s1
  } in
  struct s9 {
    var p0: Float
    var p1: [s4]
  } in
  let f25: (Float) -> Float = (v0: Float) -> Float {
    var v7: Float = v0 in
    var v5: Float = v0 in
    var v1: Float = v0 in
    var v8: Float = v1 in
    var v6: Float = v0 in
    var v4: Float = v5 in
    var v2: Float = v8 in
    var v9: Float = v7 in
    var v10: Float = v8 in
    var v3: Float = v4 in
    var v12: Float = v5 in
    let v23: [Float] = [v5, v4, v6] in
    var v11: [Float] = v23 in
    v9 = v8 in
    var v15: [Float] = v23 in
    var v13: Float = v3 in
    v11[1] = v10 in
    let v34: Float = v11[1] in
    var v16: [Float] = v23 in
    let v14: Float = v5 - v6 in
    var v29: [Float] = v23 in
    var v22: [Float] = v15 in
    var v45: Float = v10 in
    v29[0] = v12 in
    v16[1] = v34 in
    var v21: [Float] = v23 in
    let v17: Float = v29[0] in
    var v24: Float = v5 in
    v15[1] = v24 in
    v21[1] = v34 in
    var v33: Float = v2 in
    let v39: Float = v22[0] in
    var v62: Float = v9 in
    var v55: [Float] = v11 in
    v21[0] = v10 in
    v21[0] = v6 in
    v15[1] = v9 in
    v15[1] = v7 in
    v15[2] = v0 in
    var v42: Float = v39 in
    v21[1] = v1 in
    var v60: Float = v62 in
    var v40: Float = v13 in
    let v30: Float = v11[2] in
    v29[0] = v30 in
    var v76: [Float] = v16 in
    var v37: [Float] = v21 in
    let v86: [Float] = [v45, v33, v14, v0] in
    v3 = v40 in
    v76 = v37 in
    var v57: [Float] = v86 in
    let v41: Float = v11[1] in
    let v81: Float = v57[3] in
    var v44: [Float] = v29 in
    v21[1] = v40 in
    var v52: [Float] = v86 in
    let v90: Float = v52[0] in
    var v51: Float = v42 in
    v55[1] = v41 in
    let v146: Float = v86[3] in
    var v121: [Float] = v52 in
    var v73: [Float] = v23 in
    var v67: [Float] = v57 in
    let v69: Float = v55[0] in
    var v83: [Float] = v29 in
    let v84: Float = v86[1] in
    var v108: Float = v69 in
    v44[1] = v146 in
    v3 = v146 in
    let v213: Float = v67[1] in
    let v126: Float = v73[1] in
    v21[0] = v13 in
    v55[0] = v90 in
    v83[0] = v34 in
    let v113: Float = v44[1] in
    v37[1] = v8 in
    v83[2] = v51 in
    var v153: [Float] = v55 in
    let v104: Float = v29[1] in
    let v101: Float = v21[0] in
    v83[0] = v104 in
    v22[0] = v101 in
    v52[3] = v108 in
    v40 = v81 in
    let v171: [[Float]] = [v16, v11, v23, v83, v76, v55] in
    let v158: Float = v67[1] in
    var v182: [[Float]] = v171 in
    v44[0] = v90 in
    v16[0] = v113 in
    v44 = v153 in
    var v137: [[Float]] = v182 in
    let v119: [Float] = v171[2] in
    v16 = v119 in
    v13 = v126 in
    v11[1] = v213 in
    v44[2] = v9 in
    var v165: [[Float]] = v137 in
    let v132: Float = v121[0] in
    v55[1] = v17 in
    let v230: Float = v60 / v158 in
    let v186: [Float] = v171[1] in
    v15[0] = v84 in
    v29 = v15 in
    var v152: [[Float]] = v165 in
    v83[2] = v230 in
    let v209: [Float] = v152[0] in
    v15 = v209 in
    v1 = v132 in
    let v127: Float = v186[0] in
    v83[1] = v41 in
    v127
  } in
  let noinline_f0: ([s5], [s9], Float) -> Float = (v0: [s5], v1: [s9], v2: Float) -> Float {
    let v8: Float = f25(v2) in
    var v17: Float = v8 in
    v17 = v8 in
    let v20: Float = v17 * v8 in
    let v16: Float = v17 / v20 in
    let v30: Float = v16 / v20 in
    v30
  } in
  fun loop(i: Int, v0: [s5], v1: [s9], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s5] = [s5([s1(s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]], [[5.0]], [[6.0]]), s0([[7.0], [8.0]], [[9.0], [10.0], [11.0]], [[12.0]], [[13.0]])), s1(s0([[14.0], [15.0]], [[16.0], [17.0], [18.0]], [[19.0]], [[20.0]]), s0([[21.0], [22.0]], [[23.0], [24.0], [25.0]], [[26.0]], [[27.0]]))], s1(s0([[28.0], [29.0]], [[30.0], [31.0], [32.0]], [[33.0]], [[34.0]]), s0([[35.0], [36.0]], [[37.0], [38.0], [39.0]], [[40.0]], [[41.0]]))), s5([s1(s0([[42.0], [43.0]], [[44.0], [45.0], [46.0]], [[47.0]], [[48.0]]), s0([[49.0], [50.0]], [[51.0], [52.0], [53.0]], [[54.0]], [[55.0]])), s1(s0([[56.0], [57.0]], [[58.0], [59.0], [60.0]], [[61.0]], [[62.0]]), s0([[63.0], [64.0]], [[65.0], [66.0], [67.0]], [[68.0]], [[69.0]]))], s1(s0([[70.0], [71.0]], [[72.0], [73.0], [74.0]], [[75.0]], [[76.0]]), s0([[77.0], [78.0]], [[79.0], [80.0], [81.0]], [[82.0]], [[83.0]]))), s5([s1(s0([[84.0], [85.0]], [[86.0], [87.0], [88.0]], [[89.0]], [[90.0]]), s0([[91.0], [92.0]], [[93.0], [94.0], [95.0]], [[96.0]], [[97.0]])), s1(s0([[98.0], [99.0]], [[100.0], [101.0], [102.0]], [[103.0]], [[104.0]]), s0([[105.0], [106.0]], [[107.0], [108.0], [109.0]], [[110.0]], [[111.0]]))], s1(s0([[112.0], [113.0]], [[114.0], [115.0], [116.0]], [[117.0]], [[118.0]]), s0([[119.0], [120.0]], [[121.0], [122.0], [123.0]], [[124.0]], [[125.0]])))] in
    let v1: [s9] = [s9(126.0, [s4(s2(s1(s0([[127.0], [128.0]], [[129.0], [130.0], [131.0]], [[132.0]], [[133.0]]), s0([[134.0], [135.0]], [[136.0], [137.0], [138.0]], [[139.0]], [[140.0]])), s1(s0([[141.0], [142.0]], [[143.0], [144.0], [145.0]], [[146.0]], [[147.0]]), s0([[148.0], [149.0]], [[150.0], [151.0], [152.0]], [[153.0]], [[154.0]]))), s0([[155.0], [156.0]], [[157.0], [158.0], [159.0]], [[160.0]], [[161.0]])), s4(s2(s1(s0([[162.0], [163.0]], [[164.0], [165.0], [166.0]], [[167.0]], [[168.0]]), s0([[169.0], [170.0]], [[171.0], [172.0], [173.0]], [[174.0]], [[175.0]])), s1(s0([[176.0], [177.0]], [[178.0], [179.0], [180.0]], [[181.0]], [[182.0]]), s0([[183.0], [184.0]], [[185.0], [186.0], [187.0]], [[188.0]], [[189.0]]))), s0([[190.0], [191.0]], [[192.0], [193.0], [194.0]], [[195.0]], [[196.0]])), s4(s2(s1(s0([[197.0], [198.0]], [[199.0], [200.0], [201.0]], [[202.0]], [[203.0]]), s0([[204.0], [205.0]], [[206.0], [207.0], [208.0]], [[209.0]], [[210.0]])), s1(s0([[211.0], [212.0]], [[213.0], [214.0], [215.0]], [[216.0]], [[217.0]]), s0([[218.0], [219.0]], [[220.0], [221.0], [222.0]], [[223.0]], [[224.0]]))), s0([[225.0], [226.0]], [[227.0], [228.0], [229.0]], [[230.0]], [[231.0]]))]), s9(232.0, [s4(s2(s1(s0([[233.0], [234.0]], [[235.0], [236.0], [237.0]], [[238.0]], [[239.0]]), s0([[240.0], [241.0]], [[242.0], [243.0], [244.0]], [[245.0]], [[246.0]])), s1(s0([[247.0], [248.0]], [[249.0], [250.0], [251.0]], [[252.0]], [[253.0]]), s0([[254.0], [255.0]], [[256.0], [257.0], [258.0]], [[259.0]], [[260.0]]))), s0([[261.0], [262.0]], [[263.0], [264.0], [265.0]], [[266.0]], [[267.0]])), s4(s2(s1(s0([[268.0], [269.0]], [[270.0], [271.0], [272.0]], [[273.0]], [[274.0]]), s0([[275.0], [276.0]], [[277.0], [278.0], [279.0]], [[280.0]], [[281.0]])), s1(s0([[282.0], [283.0]], [[284.0], [285.0], [286.0]], [[287.0]], [[288.0]]), s0([[289.0], [290.0]], [[291.0], [292.0], [293.0]], [[294.0]], [[295.0]]))), s0([[296.0], [297.0]], [[298.0], [299.0], [300.0]], [[301.0]], [[302.0]])), s4(s2(s1(s0([[303.0], [304.0]], [[305.0], [306.0], [307.0]], [[308.0]], [[309.0]]), s0([[310.0], [311.0]], [[312.0], [313.0], [314.0]], [[315.0]], [[316.0]])), s1(s0([[317.0], [318.0]], [[319.0], [320.0], [321.0]], [[322.0]], [[323.0]]), s0([[324.0], [325.0]], [[326.0], [327.0], [328.0]], [[329.0]], [[330.0]]))), s0([[331.0], [332.0]], [[333.0], [334.0], [335.0]], [[336.0]], [[337.0]]))]), s9(338.0, [s4(s2(s1(s0([[339.0], [340.0]], [[341.0], [342.0], [343.0]], [[344.0]], [[345.0]]), s0([[346.0], [347.0]], [[348.0], [349.0], [350.0]], [[351.0]], [[352.0]])), s1(s0([[353.0], [354.0]], [[355.0], [356.0], [357.0]], [[358.0]], [[359.0]]), s0([[360.0], [361.0]], [[362.0], [363.0], [364.0]], [[365.0]], [[366.0]]))), s0([[367.0], [368.0]], [[369.0], [370.0], [371.0]], [[372.0]], [[373.0]])), s4(s2(s1(s0([[374.0], [375.0]], [[376.0], [377.0], [378.0]], [[379.0]], [[380.0]]), s0([[381.0], [382.0]], [[383.0], [384.0], [385.0]], [[386.0]], [[387.0]])), s1(s0([[388.0], [389.0]], [[390.0], [391.0], [392.0]], [[393.0]], [[394.0]]), s0([[395.0], [396.0]], [[397.0], [398.0], [399.0]], [[400.0]], [[401.0]]))), s0([[402.0], [403.0]], [[404.0], [405.0], [406.0]], [[407.0]], [[408.0]])), s4(s2(s1(s0([[409.0], [410.0]], [[411.0], [412.0], [413.0]], [[414.0]], [[415.0]]), s0([[416.0], [417.0]], [[418.0], [419.0], [420.0]], [[421.0]], [[422.0]])), s1(s0([[423.0], [424.0]], [[425.0], [426.0], [427.0]], [[428.0]], [[429.0]]), s0([[430.0], [431.0]], [[432.0], [433.0], [434.0]], [[435.0]], [[436.0]]))), s0([[437.0], [438.0]], [[439.0], [440.0], [441.0]], [[442.0]], [[443.0]]))])] in
    let v2: Float = 444.0 in
    let initialResult: Float = 444.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()