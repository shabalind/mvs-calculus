  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s3 {
    var p0: s0
    var p1: s0
  } in
  let noinline_f0: ([[s3]], Float) -> Float = (v0: [[s3]], v1: Float) -> Float {
    let v5: [s3] = v0[0] in
    let v2: s3 = v5[0] in
    let v7: s0 = v2.p1 in
    let v4: [[Float]] = v7.p0 in
    let v10: s0 = v2.p1 in
    let v19: [[Float]] = v10.p0 in
    let v13: s3 = v5[0] in
    let v8: s0 = v13.p0 in
    let v14: [[Float]] = v8.p1 in
    let v23: [[Float]] = v7.p2 in
    let v27: s0 = s0(v19, v14, v4) in
    let v50: [[Float]] = v27.p0 in
    let v38: [[[Float]]] = [v23, v19, v50] in
    let v59: [[Float]] = v38[2] in
    let v122: [Float] = v59[1] in
    let v279: Float = v122[0] in
    v279
  } in
  fun loop(i: Int, v0: [[s3]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s3]] = [[s3(s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]], [[5.0], [6.0]]), s0([[7.0], [8.0]], [[9.0], [10.0], [11.0]], [[12.0], [13.0]]))]] in
    let v1: Float = 14.0 in
    let initialResult: Float = 14.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()