  struct s0 {
    var p0: [[Float]]
    var p1: [Float]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s2 {
    var p0: s0
    var p1: s1
  } in
  let noinline_f0: (s2, Float) -> Float = (v0: s2, v1: Float) -> Float {
    let v2: Float = v1 + v1 in
    var v8: Float = v2 in
    let v6: Float = v1 + v2 in
    let v18: [Float] = [v2, v8, v8] in
    let v11: s0 = v0.p0 in
    var v16: [Float] = v18 in
    let v15: [s0] = [v11, v11, v11, v11, v11, v11, v11] in
    v16[2] = v2 in
    let v10: Float = v16[1] in
    let v17: Float = v16[0] in
    let v21: Float = v10 / v17 in
    let v24: s0 = v15[2] in
    v16[2] = v6 in
    v16[0] = v6 in
    let v22: [Float] = v24.p1 in
    v16[1] = v21 in
    v16 = v22 in
    v17
  } in
  fun loop(i: Int, v0: s2, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(s0([[0.0], [1.0]], [2.0, 3.0, 4.0]), s1([s0([[5.0], [6.0]], [7.0, 8.0, 9.0])], [s0([[10.0], [11.0]], [12.0, 13.0, 14.0]), s0([[15.0], [16.0]], [17.0, 18.0, 19.0]), s0([[20.0], [21.0]], [22.0, 23.0, 24.0])])) in
    let v1: Float = 25.0 in
    let initialResult: Float = 25.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()