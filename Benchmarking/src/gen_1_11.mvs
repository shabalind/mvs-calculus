  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s1
  } in
  struct s3 {
    var p0: s2
    var p1: s2
    var p2: s0
  } in
  struct s8 {
    var p0: s3
    var p1: [s1]
  } in
  let f14: (s8) -> s8 = (v0: s8) -> s8 {
    var v1: s8 = v0 in
    var v3: s8 = v0 in
    let v7: [s1] = v3.p1 in
    v1.p1 = v7 in
    let v15: [s1] = v0.p1 in
    v1.p1 = v15 in
    let v118: s3 = v1.p0 in
    v3.p0 = v118 in
    v3 = v0 in
    v1
  } in
  let noinline_f0: (s8, Float) -> Float = (v0: s8, v1: Float) -> Float {
    let v4: s8 = f14(v0) in
    let v7: [s1] = v4.p1 in
    let v12: s1 = v7[0] in
    let v18: s0 = v12.p1 in
    let v10: [[Float]] = v18.p1 in
    let v16: [Float] = v10[0] in
    let v27: Float = v16[0] in
    let v19: Float = v16[0] in
    let v31: Float = v16[0] in
    let v39: Float = v27 + v19 in
    let v49: Float = v39 * v31 in
    v49
  } in
  fun loop(i: Int, v0: s8, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s8 = s8(s3(s2(s1(s0([[0.0], [1.0]], [[2.0]]), s0([[3.0], [4.0]], [[5.0]]))), s2(s1(s0([[6.0], [7.0]], [[8.0]]), s0([[9.0], [10.0]], [[11.0]]))), s0([[12.0], [13.0]], [[14.0]])), [s1(s0([[15.0], [16.0]], [[17.0]]), s0([[18.0], [19.0]], [[20.0]]))]) in
    let v1: Float = 21.0 in
    let initialResult: Float = 21.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()