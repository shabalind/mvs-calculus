  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s2 {
    var p0: [s0]
    var p1: s1
    var p2: s1
    var p3: s0
    var p4: [s0]
  }
  struct s3 {
    var p0: [s2]
    var p1: s1
  }
  struct s5 {
    var p0: s3
    var p1: s0
  }
  struct s6 {
    var p0: [s5]
    var p1: s0
  }
  struct s7 {
    var p0: s5
    var p1: s6
  }
  struct s12 {
    var p0: [s0]
    var p1: s1
  }
  func f74(_ v0: s0) -> s0 {
    let v1: [[Double]] = v0.p1
    var v2: s0 = v0
    let v7: [Double] = v1[0]
    var v9: [[Double]] = v1
    let v5: [Double] = v9[0]
    let v13: [[Double]] = v0.p0
    var v6: [[Double]] = v13
    var v3: [[Double]] = v9
    let v8: [[Double]] = v2.p1
    v6[0] = v5
    let v10: [[[Double]]] = [v3, v8, v6, v9, v9, v3, v8]
    let v12: [[Double]] = v2.p0
    v3 = v1
    v2.p1 = v3
    var v19: [Double] = v7
    v3[0] = v19
    v2.p0 = v1
    let v17: [[Double]] = v2.p0
    v2.p0 = v13
    var v11: s0 = v2
    let v18: [[Double]] = v2.p1
    let v21: [[Double]] = v11.p0
    v2.p0 = v8
    let v15: [Double] = v6[0]
    let v23: [Double] = v21[0]
    let v16: [[Double]] = [v23, v5, v23, v15, v23]
    var v20: [Double] = v19
    var v24: s0 = v2
    var v25: [Double] = v7
    v6[0] = v19
    v24 = v11
    let v30: s0 = s0(p0: v3, p1: v3)
    let v14: Double = v20[0]
    var v28: Double = v14
    v2.p0 = v6
    let v49: [[Double]] = v2.p0
    v20[0] = v28
    var v29: [[[Double]]] = v10
    var v44: s0 = v24
    let v56: s0 = s0(p0: v18, p1: v12)
    v29[1] = v3
    let v27: Double = v23[0]
    v20[0] = v14
    let v55: [[Double]] = v2.p1
    let v33: [s0] = [v56, v56, v44, v0]
    let v54: s0 = v33[2]
    let v62: [Double] = v55[0]
    let v78: [[Double]] = v10[5]
    v25[0] = v28
    let v43: [s0] = [v56, v44, v54, v0, v24]
    let v105: [Double] = v16[2]
    v25[0] = v27
    let v83: [[Double]] = v30.p1
    v25[0] = v27
    v19 = v25
    v44.p1 = v49
    v24.p1 = v1
    v11.p0 = v18
    let v84: [[Double]] = v0.p0
    v11.p0 = v21
    let v98: [[Double]] = v29[6]
    var v145: [s0] = v43
    v24.p1 = v98
    v20 = v62
    v24.p1 = v84
    v2.p1 = v17
    var v107: [s0] = v145
    let v122: s0 = s0(p0: v78, p1: v83)
    v3[0] = v15
    var v208: [s0] = v33
    let v197: s0 = v107[3]
    v29[3] = v84
    let v140: s0 = v208[2]
    v107[2] = v122
    v145[0] = v140
    var v196: s0 = v197
    var v75: s0 = v196
    v3[0] = v105
    return v75
  }
  func f55(_ v0: s6) -> s6 {
    var v4: s6 = v0
    let v6: s0 = v0.p1
    let v2: s0 = v0.p1
    let v5: s0 = f74(v2)
    let v8: [s5] = v4.p0
    let v11: s0 = v4.p1
    v4.p1 = v11
    let v12: s0 = f74(v11)
    let v9: s0 = f74(v6)
    var v14: s6 = v4
    var v15: [s5] = v8
    let v23: [[Double]] = v12.p1
    let v18: s5 = v15[0]
    v14.p1 = v11
    v14.p0 = v15
    let v26: s0 = f74(v6)
    v15[1] = v18
    v15[0] = v18
    var v30: s0 = v5
    v15[0] = v18
    var v36: s5 = v18
    v15[1] = v36
    let v50: [[Double]] = v26.p1
    v15[1] = v36
    var v63: s0 = v9
    v30.p1 = v23
    v63.p0 = v50
    v30 = v63
    v14.p1 = v30
    return v14
  }
  @inline(never)
  func f0(_ v0: [[s12]], _ v1: s7, _ v2: s3, _ v3: Double) -> Double {
    let v6: s6 = v1.p1
    let v10: s6 = f55(v6)
    let v31: s0 = v10.p1
    let v36: s0 = f74(v31)
    let v22: [[Double]] = v36.p0
    let v49: [Double] = v22[0]
    let v97: Double = v49[0]
    let v77: Double = v97 / v97
    return v77
  }
  func benchmark() {
    let v0: [[s12]] = [[s12(p0: [s0(p0: [[0.0]], p1: [[1.0]])], p1: s1(p0: [s0(p0: [[2.0]], p1: [[3.0]]), s0(p0: [[4.0]], p1: [[5.0]]), s0(p0: [[6.0]], p1: [[7.0]])], p1: [s0(p0: [[8.0]], p1: [[9.0]]), s0(p0: [[10.0]], p1: [[11.0]]), s0(p0: [[12.0]], p1: [[13.0]])]))], [s12(p0: [s0(p0: [[14.0]], p1: [[15.0]])], p1: s1(p0: [s0(p0: [[16.0]], p1: [[17.0]]), s0(p0: [[18.0]], p1: [[19.0]]), s0(p0: [[20.0]], p1: [[21.0]])], p1: [s0(p0: [[22.0]], p1: [[23.0]]), s0(p0: [[24.0]], p1: [[25.0]]), s0(p0: [[26.0]], p1: [[27.0]])]))]]
    let v1: s7 = s7(p0: s5(p0: s3(p0: [s2(p0: [s0(p0: [[28.0]], p1: [[29.0]]), s0(p0: [[30.0]], p1: [[31.0]])], p1: s1(p0: [s0(p0: [[32.0]], p1: [[33.0]]), s0(p0: [[34.0]], p1: [[35.0]]), s0(p0: [[36.0]], p1: [[37.0]])], p1: [s0(p0: [[38.0]], p1: [[39.0]]), s0(p0: [[40.0]], p1: [[41.0]]), s0(p0: [[42.0]], p1: [[43.0]])]), p2: s1(p0: [s0(p0: [[44.0]], p1: [[45.0]]), s0(p0: [[46.0]], p1: [[47.0]]), s0(p0: [[48.0]], p1: [[49.0]])], p1: [s0(p0: [[50.0]], p1: [[51.0]]), s0(p0: [[52.0]], p1: [[53.0]]), s0(p0: [[54.0]], p1: [[55.0]])]), p3: s0(p0: [[56.0]], p1: [[57.0]]), p4: [s0(p0: [[58.0]], p1: [[59.0]]), s0(p0: [[60.0]], p1: [[61.0]]), s0(p0: [[62.0]], p1: [[63.0]])]), s2(p0: [s0(p0: [[64.0]], p1: [[65.0]]), s0(p0: [[66.0]], p1: [[67.0]])], p1: s1(p0: [s0(p0: [[68.0]], p1: [[69.0]]), s0(p0: [[70.0]], p1: [[71.0]]), s0(p0: [[72.0]], p1: [[73.0]])], p1: [s0(p0: [[74.0]], p1: [[75.0]]), s0(p0: [[76.0]], p1: [[77.0]]), s0(p0: [[78.0]], p1: [[79.0]])]), p2: s1(p0: [s0(p0: [[80.0]], p1: [[81.0]]), s0(p0: [[82.0]], p1: [[83.0]]), s0(p0: [[84.0]], p1: [[85.0]])], p1: [s0(p0: [[86.0]], p1: [[87.0]]), s0(p0: [[88.0]], p1: [[89.0]]), s0(p0: [[90.0]], p1: [[91.0]])]), p3: s0(p0: [[92.0]], p1: [[93.0]]), p4: [s0(p0: [[94.0]], p1: [[95.0]]), s0(p0: [[96.0]], p1: [[97.0]]), s0(p0: [[98.0]], p1: [[99.0]])])], p1: s1(p0: [s0(p0: [[100.0]], p1: [[101.0]]), s0(p0: [[102.0]], p1: [[103.0]]), s0(p0: [[104.0]], p1: [[105.0]])], p1: [s0(p0: [[106.0]], p1: [[107.0]]), s0(p0: [[108.0]], p1: [[109.0]]), s0(p0: [[110.0]], p1: [[111.0]])])), p1: s0(p0: [[112.0]], p1: [[113.0]])), p1: s6(p0: [s5(p0: s3(p0: [s2(p0: [s0(p0: [[114.0]], p1: [[115.0]]), s0(p0: [[116.0]], p1: [[117.0]])], p1: s1(p0: [s0(p0: [[118.0]], p1: [[119.0]]), s0(p0: [[120.0]], p1: [[121.0]]), s0(p0: [[122.0]], p1: [[123.0]])], p1: [s0(p0: [[124.0]], p1: [[125.0]]), s0(p0: [[126.0]], p1: [[127.0]]), s0(p0: [[128.0]], p1: [[129.0]])]), p2: s1(p0: [s0(p0: [[130.0]], p1: [[131.0]]), s0(p0: [[132.0]], p1: [[133.0]]), s0(p0: [[134.0]], p1: [[135.0]])], p1: [s0(p0: [[136.0]], p1: [[137.0]]), s0(p0: [[138.0]], p1: [[139.0]]), s0(p0: [[140.0]], p1: [[141.0]])]), p3: s0(p0: [[142.0]], p1: [[143.0]]), p4: [s0(p0: [[144.0]], p1: [[145.0]]), s0(p0: [[146.0]], p1: [[147.0]]), s0(p0: [[148.0]], p1: [[149.0]])]), s2(p0: [s0(p0: [[150.0]], p1: [[151.0]]), s0(p0: [[152.0]], p1: [[153.0]])], p1: s1(p0: [s0(p0: [[154.0]], p1: [[155.0]]), s0(p0: [[156.0]], p1: [[157.0]]), s0(p0: [[158.0]], p1: [[159.0]])], p1: [s0(p0: [[160.0]], p1: [[161.0]]), s0(p0: [[162.0]], p1: [[163.0]]), s0(p0: [[164.0]], p1: [[165.0]])]), p2: s1(p0: [s0(p0: [[166.0]], p1: [[167.0]]), s0(p0: [[168.0]], p1: [[169.0]]), s0(p0: [[170.0]], p1: [[171.0]])], p1: [s0(p0: [[172.0]], p1: [[173.0]]), s0(p0: [[174.0]], p1: [[175.0]]), s0(p0: [[176.0]], p1: [[177.0]])]), p3: s0(p0: [[178.0]], p1: [[179.0]]), p4: [s0(p0: [[180.0]], p1: [[181.0]]), s0(p0: [[182.0]], p1: [[183.0]]), s0(p0: [[184.0]], p1: [[185.0]])])], p1: s1(p0: [s0(p0: [[186.0]], p1: [[187.0]]), s0(p0: [[188.0]], p1: [[189.0]]), s0(p0: [[190.0]], p1: [[191.0]])], p1: [s0(p0: [[192.0]], p1: [[193.0]]), s0(p0: [[194.0]], p1: [[195.0]]), s0(p0: [[196.0]], p1: [[197.0]])])), p1: s0(p0: [[198.0]], p1: [[199.0]])), s5(p0: s3(p0: [s2(p0: [s0(p0: [[200.0]], p1: [[201.0]]), s0(p0: [[202.0]], p1: [[203.0]])], p1: s1(p0: [s0(p0: [[204.0]], p1: [[205.0]]), s0(p0: [[206.0]], p1: [[207.0]]), s0(p0: [[208.0]], p1: [[209.0]])], p1: [s0(p0: [[210.0]], p1: [[211.0]]), s0(p0: [[212.0]], p1: [[213.0]]), s0(p0: [[214.0]], p1: [[215.0]])]), p2: s1(p0: [s0(p0: [[216.0]], p1: [[217.0]]), s0(p0: [[218.0]], p1: [[219.0]]), s0(p0: [[220.0]], p1: [[221.0]])], p1: [s0(p0: [[222.0]], p1: [[223.0]]), s0(p0: [[224.0]], p1: [[225.0]]), s0(p0: [[226.0]], p1: [[227.0]])]), p3: s0(p0: [[228.0]], p1: [[229.0]]), p4: [s0(p0: [[230.0]], p1: [[231.0]]), s0(p0: [[232.0]], p1: [[233.0]]), s0(p0: [[234.0]], p1: [[235.0]])]), s2(p0: [s0(p0: [[236.0]], p1: [[237.0]]), s0(p0: [[238.0]], p1: [[239.0]])], p1: s1(p0: [s0(p0: [[240.0]], p1: [[241.0]]), s0(p0: [[242.0]], p1: [[243.0]]), s0(p0: [[244.0]], p1: [[245.0]])], p1: [s0(p0: [[246.0]], p1: [[247.0]]), s0(p0: [[248.0]], p1: [[249.0]]), s0(p0: [[250.0]], p1: [[251.0]])]), p2: s1(p0: [s0(p0: [[252.0]], p1: [[253.0]]), s0(p0: [[254.0]], p1: [[255.0]]), s0(p0: [[256.0]], p1: [[257.0]])], p1: [s0(p0: [[258.0]], p1: [[259.0]]), s0(p0: [[260.0]], p1: [[261.0]]), s0(p0: [[262.0]], p1: [[263.0]])]), p3: s0(p0: [[264.0]], p1: [[265.0]]), p4: [s0(p0: [[266.0]], p1: [[267.0]]), s0(p0: [[268.0]], p1: [[269.0]]), s0(p0: [[270.0]], p1: [[271.0]])])], p1: s1(p0: [s0(p0: [[272.0]], p1: [[273.0]]), s0(p0: [[274.0]], p1: [[275.0]]), s0(p0: [[276.0]], p1: [[277.0]])], p1: [s0(p0: [[278.0]], p1: [[279.0]]), s0(p0: [[280.0]], p1: [[281.0]]), s0(p0: [[282.0]], p1: [[283.0]])])), p1: s0(p0: [[284.0]], p1: [[285.0]]))], p1: s0(p0: [[286.0]], p1: [[287.0]])))
    let v2: s3 = s3(p0: [s2(p0: [s0(p0: [[288.0]], p1: [[289.0]]), s0(p0: [[290.0]], p1: [[291.0]])], p1: s1(p0: [s0(p0: [[292.0]], p1: [[293.0]]), s0(p0: [[294.0]], p1: [[295.0]]), s0(p0: [[296.0]], p1: [[297.0]])], p1: [s0(p0: [[298.0]], p1: [[299.0]]), s0(p0: [[300.0]], p1: [[301.0]]), s0(p0: [[302.0]], p1: [[303.0]])]), p2: s1(p0: [s0(p0: [[304.0]], p1: [[305.0]]), s0(p0: [[306.0]], p1: [[307.0]]), s0(p0: [[308.0]], p1: [[309.0]])], p1: [s0(p0: [[310.0]], p1: [[311.0]]), s0(p0: [[312.0]], p1: [[313.0]]), s0(p0: [[314.0]], p1: [[315.0]])]), p3: s0(p0: [[316.0]], p1: [[317.0]]), p4: [s0(p0: [[318.0]], p1: [[319.0]]), s0(p0: [[320.0]], p1: [[321.0]]), s0(p0: [[322.0]], p1: [[323.0]])]), s2(p0: [s0(p0: [[324.0]], p1: [[325.0]]), s0(p0: [[326.0]], p1: [[327.0]])], p1: s1(p0: [s0(p0: [[328.0]], p1: [[329.0]]), s0(p0: [[330.0]], p1: [[331.0]]), s0(p0: [[332.0]], p1: [[333.0]])], p1: [s0(p0: [[334.0]], p1: [[335.0]]), s0(p0: [[336.0]], p1: [[337.0]]), s0(p0: [[338.0]], p1: [[339.0]])]), p2: s1(p0: [s0(p0: [[340.0]], p1: [[341.0]]), s0(p0: [[342.0]], p1: [[343.0]]), s0(p0: [[344.0]], p1: [[345.0]])], p1: [s0(p0: [[346.0]], p1: [[347.0]]), s0(p0: [[348.0]], p1: [[349.0]]), s0(p0: [[350.0]], p1: [[351.0]])]), p3: s0(p0: [[352.0]], p1: [[353.0]]), p4: [s0(p0: [[354.0]], p1: [[355.0]]), s0(p0: [[356.0]], p1: [[357.0]]), s0(p0: [[358.0]], p1: [[359.0]])])], p1: s1(p0: [s0(p0: [[360.0]], p1: [[361.0]]), s0(p0: [[362.0]], p1: [[363.0]]), s0(p0: [[364.0]], p1: [[365.0]])], p1: [s0(p0: [[366.0]], p1: [[367.0]]), s0(p0: [[368.0]], p1: [[369.0]]), s0(p0: [[370.0]], p1: [[371.0]])]))
    let v3: Double = 372.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 372.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
