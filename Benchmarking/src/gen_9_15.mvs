  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  let f13: (s0, s0, s0) -> s0 = (v0: s0, v1: s0, v2: s0) -> s0 {
    let v7: [s0] = [v0, v1] in
    var v4: [s0] = v7 in
    var v8: [s0] = v4 in
    v8 = v7 in
    v8[1] = v1 in
    let v74: s0 = v8[0] in
    v74
  } in
  let f7: (s0, s0) -> s0 = (v0: s0, v1: s0) -> s0 {
    var v7: s0 = v0 in
    let v6: s0 = f13(v0, v7, v7) in
    let v4: [[Float]] = v6.p1 in
    v7 = v1 in
    var v2: s0 = v7 in
    var v5: [[Float]] = v4 in
    v7.p1 = v5 in
    let v10: [Float] = v4[0] in
    var v9: s0 = v7 in
    let v12: s0 = f13(v2, v6, v9) in
    let v30: [[Float]] = [v10] in
    v2.p1 = v30 in
    v5[0] = v10 in
    let v15: [Float] = v4[0] in
    v5[0] = v10 in
    v5[0] = v10 in
    v5[0] = v15 in
    v2 = v0 in
    v7.p1 = v30 in
    v5[0] = v10 in
    v5[0] = v10 in
    v12
  } in
  let noinline_f0: (s0, [[s1]], Float) -> Float = (v0: s0, v1: [[s1]], v2: Float) -> Float {
    let v6: s0 = f13(v0, v0, v0) in
    var v4: s0 = v6 in
    let v7: [[Float]] = v4.p1 in
    var v3: Float = v2 in
    var v10: [[Float]] = v7 in
    var v11: s0 = v0 in
    let v8: [[Float]] = v11.p0 in
    let v9: [Float] = v10[0] in
    let v16: Float = v9[0] in
    let v15: s0 = f13(v11, v0, v4) in
    let v12: [[Float]] = v4.p1 in
    v10[0] = v9 in
    let v43: [[Float]] = v15.p1 in
    let v14: s0 = s0(v8, v43) in
    v4.p0 = v8 in
    let v24: s0 = f7(v0, v4) in
    let v40: [[Float]] = v14.p0 in
    let v51: [Float] = [v3] in
    var v29: Float = v16 in
    let v23: [Float] = v10[0] in
    v4.p0 = v8 in
    let v18: [[Float]] = v14.p0 in
    v10[0] = v23 in
    v4.p0 = v40 in
    v10[0] = v51 in
    var v56: [[Float]] = v8 in
    let v31: [[Float]] = v24.p1 in
    let v36: Float = v16 + v16 in
    let v48: [Float] = v18[1] in
    v4.p0 = v56 in
    v11.p1 = v12 in
    let v117: [Float] = v31[0] in
    v56[0] = v23 in
    v56[2] = v117 in
    v56[1] = v48 in
    v10[0] = v48 in
    let v318: Float = v29 / v36 in
    v318
  } in
  fun loop(i: Int, v0: s0, v1: [[s1]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0], [2.0]], [[3.0]]) in
    let v1: [[s1]] = [[s1([s0([[4.0], [5.0], [6.0]], [[7.0]]), s0([[8.0], [9.0], [10.0]], [[11.0]])], [s0([[12.0], [13.0], [14.0]], [[15.0]]), s0([[16.0], [17.0], [18.0]], [[19.0]])])], [s1([s0([[20.0], [21.0], [22.0]], [[23.0]]), s0([[24.0], [25.0], [26.0]], [[27.0]])], [s0([[28.0], [29.0], [30.0]], [[31.0]]), s0([[32.0], [33.0], [34.0]], [[35.0]])])], [s1([s0([[36.0], [37.0], [38.0]], [[39.0]]), s0([[40.0], [41.0], [42.0]], [[43.0]])], [s0([[44.0], [45.0], [46.0]], [[47.0]]), s0([[48.0], [49.0], [50.0]], [[51.0]])])]] in
    let v2: Float = 52.0 in
    let initialResult: Float = 52.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()