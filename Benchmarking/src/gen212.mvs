  let noinline_f0: ([[Float]], Float) -> Float = (v0: [[Float]], v1: Float) -> Float {
    let v7: [Float] = v0[1] in
    var v3: Float = v1 in
    let v4: [Float] = v0[0] in
    let v8: [Float] = v0[1] in
    var v15: [Float] = v7 in
    let v9: [Float] = v0[1] in
    let v13: [[Float]] = [v8, v7, v9, v4, v8, v15] in
    let v11: [Float] = v0[0] in
    v15[0] = v3 in
    let v6: [Float] = v0[1] in
    let v18: [Float] = v0[0] in
    var v14: [[Float]] = v13 in
    let v16: Float = v6[0] in
    v15[0] = v16 in
    v14 = v13 in
    v14[0] = v6 in
    let v30: [Float] = v0[1] in
    v14[0] = v18 in
    v15[0] = v16 in
    v14[0] = v11 in
    let v39: Float = v30[0] in
    v15[0] = v39 in
    let v41: [Float] = v14[3] in
    let v219: Float = v41[0] in
    v219
  } in
  fun loop(i: Int, v0: [[Float]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0], [1.0]] in
    let v1: Float = 2.0 in
    let initialResult: Float = 2.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()