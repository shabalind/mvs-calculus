  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [Double]
    var p3: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
    var p2: s0
    var p3: s0
    var p4: [s0]
    var p5: s0
    var p6: [s0]
  }
  struct s2 {
    var p0: s1
    var p1: [[s0]]
    var p2: [s1]
  }
  struct s5 {
    var p0: [s0]
    var p1: [[s2]]
  }
  @inline(never)
  func f0(_ v0: [s5], _ v1: Double) -> Double {
    let v3: s5 = v0[0]
    let v13: [[s2]] = v3.p1
    let v8: [s2] = v13[1]
    let v11: s2 = v8[0]
    let v16: s1 = v11.p0
    var v29: Double = v1
    let v24: Double = v29 / v1
    let v20: [Double] = [v29, v29, v1, v1, v24, v29, v29]
    let v35: s0 = v16.p5
    let v86: [Double] = v35.p2
    let v100: Double = v86[0]
    let v84: Double = v20[3]
    let v160: Double = v84 + v100
    return v160
  }
  func benchmark() {
    let v0: [s5] = [s5(p0: [s0(p0: [[0.0]], p1: [[1.0]], p2: [2.0, 3.0, 4.0], p3: [[5.0]]), s0(p0: [[6.0]], p1: [[7.0]], p2: [8.0, 9.0, 10.0], p3: [[11.0]])], p1: [[s2(p0: s1(p0: s0(p0: [[12.0]], p1: [[13.0]], p2: [14.0, 15.0, 16.0], p3: [[17.0]]), p1: s0(p0: [[18.0]], p1: [[19.0]], p2: [20.0, 21.0, 22.0], p3: [[23.0]]), p2: s0(p0: [[24.0]], p1: [[25.0]], p2: [26.0, 27.0, 28.0], p3: [[29.0]]), p3: s0(p0: [[30.0]], p1: [[31.0]], p2: [32.0, 33.0, 34.0], p3: [[35.0]]), p4: [s0(p0: [[36.0]], p1: [[37.0]], p2: [38.0, 39.0, 40.0], p3: [[41.0]]), s0(p0: [[42.0]], p1: [[43.0]], p2: [44.0, 45.0, 46.0], p3: [[47.0]]), s0(p0: [[48.0]], p1: [[49.0]], p2: [50.0, 51.0, 52.0], p3: [[53.0]])], p5: s0(p0: [[54.0]], p1: [[55.0]], p2: [56.0, 57.0, 58.0], p3: [[59.0]]), p6: [s0(p0: [[60.0]], p1: [[61.0]], p2: [62.0, 63.0, 64.0], p3: [[65.0]])]), p1: [[s0(p0: [[66.0]], p1: [[67.0]], p2: [68.0, 69.0, 70.0], p3: [[71.0]])], [s0(p0: [[72.0]], p1: [[73.0]], p2: [74.0, 75.0, 76.0], p3: [[77.0]])]], p2: [s1(p0: s0(p0: [[78.0]], p1: [[79.0]], p2: [80.0, 81.0, 82.0], p3: [[83.0]]), p1: s0(p0: [[84.0]], p1: [[85.0]], p2: [86.0, 87.0, 88.0], p3: [[89.0]]), p2: s0(p0: [[90.0]], p1: [[91.0]], p2: [92.0, 93.0, 94.0], p3: [[95.0]]), p3: s0(p0: [[96.0]], p1: [[97.0]], p2: [98.0, 99.0, 100.0], p3: [[101.0]]), p4: [s0(p0: [[102.0]], p1: [[103.0]], p2: [104.0, 105.0, 106.0], p3: [[107.0]]), s0(p0: [[108.0]], p1: [[109.0]], p2: [110.0, 111.0, 112.0], p3: [[113.0]]), s0(p0: [[114.0]], p1: [[115.0]], p2: [116.0, 117.0, 118.0], p3: [[119.0]])], p5: s0(p0: [[120.0]], p1: [[121.0]], p2: [122.0, 123.0, 124.0], p3: [[125.0]]), p6: [s0(p0: [[126.0]], p1: [[127.0]], p2: [128.0, 129.0, 130.0], p3: [[131.0]])])])], [s2(p0: s1(p0: s0(p0: [[132.0]], p1: [[133.0]], p2: [134.0, 135.0, 136.0], p3: [[137.0]]), p1: s0(p0: [[138.0]], p1: [[139.0]], p2: [140.0, 141.0, 142.0], p3: [[143.0]]), p2: s0(p0: [[144.0]], p1: [[145.0]], p2: [146.0, 147.0, 148.0], p3: [[149.0]]), p3: s0(p0: [[150.0]], p1: [[151.0]], p2: [152.0, 153.0, 154.0], p3: [[155.0]]), p4: [s0(p0: [[156.0]], p1: [[157.0]], p2: [158.0, 159.0, 160.0], p3: [[161.0]]), s0(p0: [[162.0]], p1: [[163.0]], p2: [164.0, 165.0, 166.0], p3: [[167.0]]), s0(p0: [[168.0]], p1: [[169.0]], p2: [170.0, 171.0, 172.0], p3: [[173.0]])], p5: s0(p0: [[174.0]], p1: [[175.0]], p2: [176.0, 177.0, 178.0], p3: [[179.0]]), p6: [s0(p0: [[180.0]], p1: [[181.0]], p2: [182.0, 183.0, 184.0], p3: [[185.0]])]), p1: [[s0(p0: [[186.0]], p1: [[187.0]], p2: [188.0, 189.0, 190.0], p3: [[191.0]])], [s0(p0: [[192.0]], p1: [[193.0]], p2: [194.0, 195.0, 196.0], p3: [[197.0]])]], p2: [s1(p0: s0(p0: [[198.0]], p1: [[199.0]], p2: [200.0, 201.0, 202.0], p3: [[203.0]]), p1: s0(p0: [[204.0]], p1: [[205.0]], p2: [206.0, 207.0, 208.0], p3: [[209.0]]), p2: s0(p0: [[210.0]], p1: [[211.0]], p2: [212.0, 213.0, 214.0], p3: [[215.0]]), p3: s0(p0: [[216.0]], p1: [[217.0]], p2: [218.0, 219.0, 220.0], p3: [[221.0]]), p4: [s0(p0: [[222.0]], p1: [[223.0]], p2: [224.0, 225.0, 226.0], p3: [[227.0]]), s0(p0: [[228.0]], p1: [[229.0]], p2: [230.0, 231.0, 232.0], p3: [[233.0]]), s0(p0: [[234.0]], p1: [[235.0]], p2: [236.0, 237.0, 238.0], p3: [[239.0]])], p5: s0(p0: [[240.0]], p1: [[241.0]], p2: [242.0, 243.0, 244.0], p3: [[245.0]]), p6: [s0(p0: [[246.0]], p1: [[247.0]], p2: [248.0, 249.0, 250.0], p3: [[251.0]])])])]])]
    let v1: Double = 252.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 252.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
