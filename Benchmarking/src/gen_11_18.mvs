  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
  } in
  struct s2 {
    var p0: s1
    var p1: [s0]
    var p2: [s1]
    var p3: s1
  } in
  struct s3 {
    var p0: s0
    var p1: [s1]
  } in
  let f115: (s3, s0) -> s3 = (v0: s3, v1: s0) -> s3 {
    var v3: s3 = v0 in
    let v6: [[Float]] = v1.p0 in
    let v2: [Float] = v6[1] in
    let v8: [[Float]] = v1.p1 in
    v3.p0 = v1 in
    let v5: [[Float]] = v1.p0 in
    var v11: [[Float]] = v5 in
    let v9: [Float] = v11[0] in
    v11[0] = v2 in
    let v34: s0 = v0.p0 in
    var v17: [[Float]] = v8 in
    v3.p0 = v1 in
    let v25: [[Float]] = v34.p0 in
    v17[0] = v9 in
    v3.p0 = v34 in
    v3.p0 = v34 in
    let v43: s0 = s0(v25, v17) in
    v11[1] = v9 in
    var v49: s3 = v3 in
    v49.p0 = v43 in
    v49
  } in
  let noinline_f0: (s3, s2, Float) -> Float = (v0: s3, v1: s2, v2: Float) -> Float {
    let v3: s0 = v0.p0 in
    let v7: s3 = f115(v0, v3) in
    let v8: [s1] = v7.p1 in
    let v14: s1 = v8[1] in
    let v13: [s0] = v14.p0 in
    let v18: s0 = v13[0] in
    let v51: [[Float]] = v18.p0 in
    let v60: [Float] = v51[0] in
    let v41: Float = v60[0] in
    v41
  } in
  fun loop(i: Int, v0: s3, v1: s2, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(s0([[0.0], [1.0]], [[2.0]]), [s1([s0([[3.0], [4.0]], [[5.0]]), s0([[6.0], [7.0]], [[8.0]])]), s1([s0([[9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0]], [[14.0]])])]) in
    let v1: s2 = s2(s1([s0([[15.0], [16.0]], [[17.0]]), s0([[18.0], [19.0]], [[20.0]])]), [s0([[21.0], [22.0]], [[23.0]]), s0([[24.0], [25.0]], [[26.0]])], [s1([s0([[27.0], [28.0]], [[29.0]]), s0([[30.0], [31.0]], [[32.0]])]), s1([s0([[33.0], [34.0]], [[35.0]]), s0([[36.0], [37.0]], [[38.0]])])], s1([s0([[39.0], [40.0]], [[41.0]]), s0([[42.0], [43.0]], [[44.0]])])) in
    let v2: Float = 45.0 in
    let initialResult: Float = 45.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()