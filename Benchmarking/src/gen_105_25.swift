  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
  }
  struct s1 {
    var p0: Double
    var p1: s0
    var p2: s0
    var p3: s0
  }
  struct s3 {
    var p0: [s1]
    var p1: s0
  }
  func f32(_ v0: Double) -> Double {
    var v3: Double = v0
    var v5: Double = v0
    var v4: Double = v0
    var v7: Double = v5
    let v2: Double = v5 - v3
    var v6: Double = v4
    v7 = v6
    var v9: Double = v2
    let v1: [Double] = [v0, v0, v6, v2]
    v6 = v4
    let v11: Double = v7 + v7
    var v27: [Double] = v1
    v7 = v11
    let v22: Double = v27[2]
    v27[0] = v6
    let v40: [Double] = [v9, v9, v22, v9, v22, v11, v5]
    var v24: [Double] = v40
    v27[1] = v7
    v27[1] = v5
    v9 = v5
    var v31: [Double] = v24
    v7 = v4
    let v81: [[Double]] = [v40, v40, v40, v40, v24, v40, v31]
    let v44: [Double] = v81[1]
    let v191: Double = v44[2]
    return v191
  }
  @inline(never)
  func f0(_ v0: [[s3]], _ v1: Double) -> Double {
    var v11: Double = v1
    var v6: Double = v11
    let v10: Double = f32(v6)
    var v15: Double = v10
    return v15
  }
  func benchmark() {
    let v0: [[s3]] = [[s3(p0: [s1(p0: 0.0, p1: s0(p0: [[1.0], [2.0], [3.0]], p1: [[4.0], [5.0], [6.0]], p2: [[7.0], [8.0], [9.0]]), p2: s0(p0: [[10.0], [11.0], [12.0]], p1: [[13.0], [14.0], [15.0]], p2: [[16.0], [17.0], [18.0]]), p3: s0(p0: [[19.0], [20.0], [21.0]], p1: [[22.0], [23.0], [24.0]], p2: [[25.0], [26.0], [27.0]])), s1(p0: 28.0, p1: s0(p0: [[29.0], [30.0], [31.0]], p1: [[32.0], [33.0], [34.0]], p2: [[35.0], [36.0], [37.0]]), p2: s0(p0: [[38.0], [39.0], [40.0]], p1: [[41.0], [42.0], [43.0]], p2: [[44.0], [45.0], [46.0]]), p3: s0(p0: [[47.0], [48.0], [49.0]], p1: [[50.0], [51.0], [52.0]], p2: [[53.0], [54.0], [55.0]])), s1(p0: 56.0, p1: s0(p0: [[57.0], [58.0], [59.0]], p1: [[60.0], [61.0], [62.0]], p2: [[63.0], [64.0], [65.0]]), p2: s0(p0: [[66.0], [67.0], [68.0]], p1: [[69.0], [70.0], [71.0]], p2: [[72.0], [73.0], [74.0]]), p3: s0(p0: [[75.0], [76.0], [77.0]], p1: [[78.0], [79.0], [80.0]], p2: [[81.0], [82.0], [83.0]]))], p1: s0(p0: [[84.0], [85.0], [86.0]], p1: [[87.0], [88.0], [89.0]], p2: [[90.0], [91.0], [92.0]]))], [s3(p0: [s1(p0: 93.0, p1: s0(p0: [[94.0], [95.0], [96.0]], p1: [[97.0], [98.0], [99.0]], p2: [[100.0], [101.0], [102.0]]), p2: s0(p0: [[103.0], [104.0], [105.0]], p1: [[106.0], [107.0], [108.0]], p2: [[109.0], [110.0], [111.0]]), p3: s0(p0: [[112.0], [113.0], [114.0]], p1: [[115.0], [116.0], [117.0]], p2: [[118.0], [119.0], [120.0]])), s1(p0: 121.0, p1: s0(p0: [[122.0], [123.0], [124.0]], p1: [[125.0], [126.0], [127.0]], p2: [[128.0], [129.0], [130.0]]), p2: s0(p0: [[131.0], [132.0], [133.0]], p1: [[134.0], [135.0], [136.0]], p2: [[137.0], [138.0], [139.0]]), p3: s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0], [144.0], [145.0]], p2: [[146.0], [147.0], [148.0]])), s1(p0: 149.0, p1: s0(p0: [[150.0], [151.0], [152.0]], p1: [[153.0], [154.0], [155.0]], p2: [[156.0], [157.0], [158.0]]), p2: s0(p0: [[159.0], [160.0], [161.0]], p1: [[162.0], [163.0], [164.0]], p2: [[165.0], [166.0], [167.0]]), p3: s0(p0: [[168.0], [169.0], [170.0]], p1: [[171.0], [172.0], [173.0]], p2: [[174.0], [175.0], [176.0]]))], p1: s0(p0: [[177.0], [178.0], [179.0]], p1: [[180.0], [181.0], [182.0]], p2: [[183.0], [184.0], [185.0]]))], [s3(p0: [s1(p0: 186.0, p1: s0(p0: [[187.0], [188.0], [189.0]], p1: [[190.0], [191.0], [192.0]], p2: [[193.0], [194.0], [195.0]]), p2: s0(p0: [[196.0], [197.0], [198.0]], p1: [[199.0], [200.0], [201.0]], p2: [[202.0], [203.0], [204.0]]), p3: s0(p0: [[205.0], [206.0], [207.0]], p1: [[208.0], [209.0], [210.0]], p2: [[211.0], [212.0], [213.0]])), s1(p0: 214.0, p1: s0(p0: [[215.0], [216.0], [217.0]], p1: [[218.0], [219.0], [220.0]], p2: [[221.0], [222.0], [223.0]]), p2: s0(p0: [[224.0], [225.0], [226.0]], p1: [[227.0], [228.0], [229.0]], p2: [[230.0], [231.0], [232.0]]), p3: s0(p0: [[233.0], [234.0], [235.0]], p1: [[236.0], [237.0], [238.0]], p2: [[239.0], [240.0], [241.0]])), s1(p0: 242.0, p1: s0(p0: [[243.0], [244.0], [245.0]], p1: [[246.0], [247.0], [248.0]], p2: [[249.0], [250.0], [251.0]]), p2: s0(p0: [[252.0], [253.0], [254.0]], p1: [[255.0], [256.0], [257.0]], p2: [[258.0], [259.0], [260.0]]), p3: s0(p0: [[261.0], [262.0], [263.0]], p1: [[264.0], [265.0], [266.0]], p2: [[267.0], [268.0], [269.0]]))], p1: s0(p0: [[270.0], [271.0], [272.0]], p1: [[273.0], [274.0], [275.0]], p2: [[276.0], [277.0], [278.0]]))]]
    let v1: Double = 279.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 279.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
