  struct s0 {
    var p0: [Float]
    var p1: [Float]
  } in
  let f27: (s0, [s0], s0, s0) -> s0 = (v0: s0, v1: [s0], v2: s0, v3: s0) -> s0 {
    var v8: [s0] = v1 in
    v8[2] = v2 in
    let v7: s0 = v8[2] in
    let v6: [s0] = [v7, v0, v2, v3, v3, v0, v2] in
    v8 = v1 in
    let v9: s0 = v6[2] in
    v8[2] = v9 in
    var v23: [s0] = v6 in
    var v20: [s0] = v23 in
    v23 = v6 in
    v23[1] = v2 in
    var v45: [s0] = v8 in
    let v50: s0 = v45[1] in
    v8 = v45 in
    let v84: [[s0]] = [v20, v20, v6] in
    var v49: [s0] = v6 in
    var v58: [[s0]] = v84 in
    let v114: [[[s0]]] = [v58] in
    var v95: [[[s0]]] = v114 in
    let v94: [[s0]] = v95[0] in
    var v117: [s0] = v49 in
    let v113: [s0] = v94[0] in
    v58[0] = v117 in
    v49[1] = v7 in
    let v180: s0 = v113[5] in
    v49[1] = v50 in
    v180
  } in
  let f25: (s0) -> s0 = (v0: s0) -> s0 {
    var v5: s0 = v0 in
    let v7: [Float] = v5.p1 in
    let v8: [Float] = v0.p0 in
    var v2: [Float] = v8 in
    var v3: [Float] = v2 in
    var v1: [Float] = v8 in
    let v9: [Float] = v0.p1 in
    let v4: Float = v1[0] in
    v5 = v0 in
    v5.p0 = v8 in
    v5.p0 = v2 in
    v1[0] = v4 in
    v5.p1 = v1 in
    let v6: Float = v7[0] in
    var v12: [Float] = v1 in
    let v22: Float = v2[0] in
    v12[0] = v22 in
    let v24: Float = v12[0] in
    v12[0] = v22 in
    var v13: Float = v24 in
    var v33: Float = v13 in
    v5.p1 = v12 in
    v5 = v0 in
    var v19: [Float] = v3 in
    let v38: Float = v2[0] in
    let v23: [Float] = v0.p0 in
    var v31: s0 = v5 in
    v5.p1 = v12 in
    var v27: s0 = v0 in
    v27.p0 = v7 in
    let v59: [Float] = v0.p1 in
    let v61: [Float] = v31.p1 in
    let v20: Float = v23[0] in
    let v34: [Float] = v5.p1 in
    v33 = v13 in
    v27 = v31 in
    let v32: [Float] = v0.p1 in
    let v46: Float = v59[0] in
    let v42: [Float] = v0.p0 in
    v27.p0 = v42 in
    let v41: Float = v61[0] in
    let v54: Float = v9[0] in
    v2[0] = v46 in
    let v57: Float = v12[0] in
    let v120: [Float] = v5.p1 in
    v5.p1 = v32 in
    let v75: [Float] = v31.p0 in
    v3[0] = v6 in
    v5.p1 = v120 in
    v3[0] = v46 in
    var v47: [Float] = v2 in
    v19[0] = v54 in
    v5.p0 = v19 in
    v31.p1 = v34 in
    v5.p1 = v23 in
    v12[0] = v57 in
    let v79: [Float] = [v20, v41, v33] in
    let v103: [Float] = v27.p0 in
    let v179: [Float] = v27.p0 in
    v27.p1 = v47 in
    v5.p0 = v23 in
    let v185: [Float] = v31.p0 in
    v27.p1 = v103 in
    var v141: [Float] = v7 in
    var v97: s0 = v0 in
    let v176: [Float] = v97.p0 in
    v27.p0 = v120 in
    v31.p1 = v75 in
    var v76: [Float] = v79 in
    v47[0] = v38 in
    v31.p1 = v185 in
    let v306: Float = v76[2] in
    let v208: Float = v306 * v24 in
    let v276: [[Float]] = [v179, v9] in
    var v160: [[Float]] = v276 in
    let v214: [Float] = v160[1] in
    v27.p1 = v141 in
    v19[0] = v41 in
    v97.p1 = v214 in
    v27.p0 = v176 in
    v3[0] = v208 in
    v27
  } in
  let f7: (s0) -> s0 = (v0: s0) -> s0 {
    let v5: s0 = f25(v0) in
    var v4: s0 = v5 in
    var v3: s0 = v4 in
    let v7: [Float] = v3.p1 in
    let v11: s0 = s0(v7, v7) in
    v3 = v4 in
    let v14: s0 = f25(v11) in
    v14
  } in
  let noinline_f0: (s0, [s0], Float) -> Float = (v0: s0, v1: [s0], v2: Float) -> Float {
    let v5: s0 = f27(v0, v1, v0, v0) in
    let v3: s0 = f7(v5) in
    let v12: [Float] = v3.p0 in
    let v9: [Float] = v5.p0 in
    let v18: s0 = s0(v12, v9) in
    let v39: [Float] = v18.p1 in
    let v42: Float = v39[0] in
    v42
  } in
  fun loop(i: Int, v0: s0, v1: [s0], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([0.0], [1.0]) in
    let v1: [s0] = [s0([2.0], [3.0]), s0([4.0], [5.0]), s0([6.0], [7.0])] in
    let v2: Float = 8.0 in
    let initialResult: Float = 8.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()