  struct s0 {
    var p0: [Float]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s0
    var p1: s0
  } in
  struct s3 {
    var p0: Float
    var p1: s2
  } in
  struct s4 {
    var p0: [s2]
    var p1: [[s0]]
    var p2: s3
    var p3: s3
    var p4: s0
    var p5: s2
    var p6: s1
  } in
  struct s5 {
    var p0: s4
    var p1: s3
  } in
  struct s6 {
    var p0: s4
    var p1: s4
  } in
  struct s7 {
    var p0: s6
    var p1: s5
    var p2: s0
    var p3: s3
  } in
  let f83: (s3) -> s3 = (v0: s3) -> s3 {
    var v2: s3 = v0 in
    let v12: s2 = v0.p1 in
    var v5: s3 = v2 in
    v5.p1 = v12 in
    let v11: s0 = v12.p0 in
    let v30: s0 = v12.p0 in
    v2.p1 = v12 in
    v2.p1 = v12 in
    var v22: s0 = v11 in
    let v66: [Float] = v22.p0 in
    var v17: [Float] = v66 in
    let v20: Float = v17[0] in
    v22.p0 = v66 in
    v5.p0 = v20 in
    let v71: s2 = v5.p1 in
    v22 = v30 in
    v2.p1 = v71 in
    v2
  } in
  let noinline_f0: ([s7], [[s3]], [s1], Float) -> Float = (v0: [s7], v1: [[s3]], v2: [s1], v3: Float) -> Float {
    var v5: Float = v3 in
    let v25: Float = v5 - v5 in
    var v19: Float = v5 in
    var v21: [s7] = v0 in
    var v18: [s7] = v21 in
    let v46: Float = v3 / v19 in
    v19 = v3 in
    let v17: s7 = v18[0] in
    let v26: s3 = v17.p3 in
    let v30: s3 = f83(v26) in
    v18 = v21 in
    let v32: Float = v30.p0 in
    var v47: Float = v32 in
    v21[0] = v17 in
    let v43: [Float] = [v25, v46, v47, v3, v19] in
    let v49: s7 = v0[0] in
    let v93: Float = v43[1] in
    v18[0] = v49 in
    v93
  } in
  fun loop(i: Int, v0: [s7], v1: [[s3]], v2: [s1], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s7] = [s7(s6(s4([s2(s0([0.0, 1.0], [[2.0]]), s0([3.0, 4.0], [[5.0]]))], [[s0([6.0, 7.0], [[8.0]])]], s3(9.0, s2(s0([10.0, 11.0], [[12.0]]), s0([13.0, 14.0], [[15.0]]))), s3(16.0, s2(s0([17.0, 18.0], [[19.0]]), s0([20.0, 21.0], [[22.0]]))), s0([23.0, 24.0], [[25.0]]), s2(s0([26.0, 27.0], [[28.0]]), s0([29.0, 30.0], [[31.0]])), s1(s0([32.0, 33.0], [[34.0]]), s0([35.0, 36.0], [[37.0]]))), s4([s2(s0([38.0, 39.0], [[40.0]]), s0([41.0, 42.0], [[43.0]]))], [[s0([44.0, 45.0], [[46.0]])]], s3(47.0, s2(s0([48.0, 49.0], [[50.0]]), s0([51.0, 52.0], [[53.0]]))), s3(54.0, s2(s0([55.0, 56.0], [[57.0]]), s0([58.0, 59.0], [[60.0]]))), s0([61.0, 62.0], [[63.0]]), s2(s0([64.0, 65.0], [[66.0]]), s0([67.0, 68.0], [[69.0]])), s1(s0([70.0, 71.0], [[72.0]]), s0([73.0, 74.0], [[75.0]])))), s5(s4([s2(s0([76.0, 77.0], [[78.0]]), s0([79.0, 80.0], [[81.0]]))], [[s0([82.0, 83.0], [[84.0]])]], s3(85.0, s2(s0([86.0, 87.0], [[88.0]]), s0([89.0, 90.0], [[91.0]]))), s3(92.0, s2(s0([93.0, 94.0], [[95.0]]), s0([96.0, 97.0], [[98.0]]))), s0([99.0, 100.0], [[101.0]]), s2(s0([102.0, 103.0], [[104.0]]), s0([105.0, 106.0], [[107.0]])), s1(s0([108.0, 109.0], [[110.0]]), s0([111.0, 112.0], [[113.0]]))), s3(114.0, s2(s0([115.0, 116.0], [[117.0]]), s0([118.0, 119.0], [[120.0]])))), s0([121.0, 122.0], [[123.0]]), s3(124.0, s2(s0([125.0, 126.0], [[127.0]]), s0([128.0, 129.0], [[130.0]]))))] in
    let v1: [[s3]] = [[s3(131.0, s2(s0([132.0, 133.0], [[134.0]]), s0([135.0, 136.0], [[137.0]])))], [s3(138.0, s2(s0([139.0, 140.0], [[141.0]]), s0([142.0, 143.0], [[144.0]])))]] in
    let v2: [s1] = [s1(s0([145.0, 146.0], [[147.0]]), s0([148.0, 149.0], [[150.0]]))] in
    let v3: Float = 151.0 in
    let initialResult: Float = 151.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()