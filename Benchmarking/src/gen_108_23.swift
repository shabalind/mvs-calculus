  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
  }
  struct s3 {
    var p0: [[s1]]
    var p1: [[s1]]
  }
  struct s8 {
    var p0: [s3]
    var p1: [[s3]]
  }
  func f103(_ v0: Double) -> Double {
    var v6: Double = v0
    var v8: Double = v6
    var v1: Double = v8
    var v3: Double = v6
    var v9: Double = v0
    var v10: Double = v3
    var v12: Double = v8
    v6 = v10
    var v2: Double = v6
    var v5: Double = v9
    var v13: Double = v1
    var v19: Double = v1
    v5 = v10
    var v18: Double = v19
    var v11: Double = v0
    var v16: Double = v13
    v11 = v18
    var v22: Double = v19
    var v20: Double = v12
    v1 = v11
    var v14: Double = v1
    var v23: Double = v3
    let v26: Double = v23 - v3
    var v50: Double = v10
    v18 = v26
    var v52: Double = v22
    var v57: Double = v13
    let v62: [Double] = [v22, v50, v14]
    var v60: [Double] = v62
    v60[0] = v13
    var v61: [Double] = v60
    var v56: [Double] = v61
    v61[2] = v57
    v56[2] = v52
    let v65: Double = v61[1]
    var v114: [Double] = v56
    v61[2] = v57
    var v84: [Double] = v60
    let v39: Double = v62[1]
    let v95: [[Double]] = [v114, v61, v62]
    v60[2] = v2
    var v87: Double = v39
    v84[1] = v87
    v2 = v19
    var v121: [Double] = v84
    v56[1] = v20
    var v86: [[Double]] = v95
    let v91: [Double] = v86[2]
    v86[1] = v121
    v114[2] = v16
    let v159: Double = v91[1]
    v2 = v5
    v121[2] = v12
    v114[1] = v65
    return v159
  }
  @inline(never)
  func f0(_ v0: [s8], _ v1: Double) -> Double {
    var v20: Double = v1
    let v33: Double = v1 + v20
    var v120: Double = v33
    let v103: Double = f103(v120)
    return v103
  }
  func benchmark() {
    let v0: [s8] = [s8(p0: [s3(p0: [[s1(p0: [s0(p0: [[0.0], [1.0]], p1: [[2.0]]), s0(p0: [[3.0], [4.0]], p1: [[5.0]]), s0(p0: [[6.0], [7.0]], p1: [[8.0]])])], [s1(p0: [s0(p0: [[9.0], [10.0]], p1: [[11.0]]), s0(p0: [[12.0], [13.0]], p1: [[14.0]]), s0(p0: [[15.0], [16.0]], p1: [[17.0]])])]], p1: [[s1(p0: [s0(p0: [[18.0], [19.0]], p1: [[20.0]]), s0(p0: [[21.0], [22.0]], p1: [[23.0]]), s0(p0: [[24.0], [25.0]], p1: [[26.0]])])]])], p1: [[s3(p0: [[s1(p0: [s0(p0: [[27.0], [28.0]], p1: [[29.0]]), s0(p0: [[30.0], [31.0]], p1: [[32.0]]), s0(p0: [[33.0], [34.0]], p1: [[35.0]])])], [s1(p0: [s0(p0: [[36.0], [37.0]], p1: [[38.0]]), s0(p0: [[39.0], [40.0]], p1: [[41.0]]), s0(p0: [[42.0], [43.0]], p1: [[44.0]])])]], p1: [[s1(p0: [s0(p0: [[45.0], [46.0]], p1: [[47.0]]), s0(p0: [[48.0], [49.0]], p1: [[50.0]]), s0(p0: [[51.0], [52.0]], p1: [[53.0]])])]])]]), s8(p0: [s3(p0: [[s1(p0: [s0(p0: [[54.0], [55.0]], p1: [[56.0]]), s0(p0: [[57.0], [58.0]], p1: [[59.0]]), s0(p0: [[60.0], [61.0]], p1: [[62.0]])])], [s1(p0: [s0(p0: [[63.0], [64.0]], p1: [[65.0]]), s0(p0: [[66.0], [67.0]], p1: [[68.0]]), s0(p0: [[69.0], [70.0]], p1: [[71.0]])])]], p1: [[s1(p0: [s0(p0: [[72.0], [73.0]], p1: [[74.0]]), s0(p0: [[75.0], [76.0]], p1: [[77.0]]), s0(p0: [[78.0], [79.0]], p1: [[80.0]])])]])], p1: [[s3(p0: [[s1(p0: [s0(p0: [[81.0], [82.0]], p1: [[83.0]]), s0(p0: [[84.0], [85.0]], p1: [[86.0]]), s0(p0: [[87.0], [88.0]], p1: [[89.0]])])], [s1(p0: [s0(p0: [[90.0], [91.0]], p1: [[92.0]]), s0(p0: [[93.0], [94.0]], p1: [[95.0]]), s0(p0: [[96.0], [97.0]], p1: [[98.0]])])]], p1: [[s1(p0: [s0(p0: [[99.0], [100.0]], p1: [[101.0]]), s0(p0: [[102.0], [103.0]], p1: [[104.0]]), s0(p0: [[105.0], [106.0]], p1: [[107.0]])])]])]]), s8(p0: [s3(p0: [[s1(p0: [s0(p0: [[108.0], [109.0]], p1: [[110.0]]), s0(p0: [[111.0], [112.0]], p1: [[113.0]]), s0(p0: [[114.0], [115.0]], p1: [[116.0]])])], [s1(p0: [s0(p0: [[117.0], [118.0]], p1: [[119.0]]), s0(p0: [[120.0], [121.0]], p1: [[122.0]]), s0(p0: [[123.0], [124.0]], p1: [[125.0]])])]], p1: [[s1(p0: [s0(p0: [[126.0], [127.0]], p1: [[128.0]]), s0(p0: [[129.0], [130.0]], p1: [[131.0]]), s0(p0: [[132.0], [133.0]], p1: [[134.0]])])]])], p1: [[s3(p0: [[s1(p0: [s0(p0: [[135.0], [136.0]], p1: [[137.0]]), s0(p0: [[138.0], [139.0]], p1: [[140.0]]), s0(p0: [[141.0], [142.0]], p1: [[143.0]])])], [s1(p0: [s0(p0: [[144.0], [145.0]], p1: [[146.0]]), s0(p0: [[147.0], [148.0]], p1: [[149.0]]), s0(p0: [[150.0], [151.0]], p1: [[152.0]])])]], p1: [[s1(p0: [s0(p0: [[153.0], [154.0]], p1: [[155.0]]), s0(p0: [[156.0], [157.0]], p1: [[158.0]]), s0(p0: [[159.0], [160.0]], p1: [[161.0]])])]])]])]
    let v1: Double = 162.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 162.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
