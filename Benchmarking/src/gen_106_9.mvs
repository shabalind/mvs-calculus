  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s0
    var p1: s0
  } in
  struct s3 {
    var p0: s1
    var p1: [s0]
  } in
  struct s5 {
    var p0: [[s3]]
    var p1: [[s0]]
  } in
  let noinline_f0: ([s5], Float) -> Float = (v0: [s5], v1: Float) -> Float {
    var v7: [s5] = v0 in
    let v3: s5 = v7[1] in
    let v6: s5 = v7[1] in
    let v2: s5 = v0[0] in
    let v5: [[s0]] = v6.p1 in
    let v11: [s0] = v5[1] in
    let v12: [[s3]] = v2.p0 in
    let v15: s0 = v11[0] in
    var v16: [s0] = v11 in
    let v29: s5 = v0[0] in
    let v30: [[Float]] = v15.p1 in
    var v18: s0 = v15 in
    let v21: s0 = v16[0] in
    let v36: s2 = s2(v15, v18) in
    let v31: [s3] = v12[0] in
    let v27: [[Float]] = v21.p0 in
    var v35: [s3] = v31 in
    v7[1] = v3 in
    var v25: [[Float]] = v27 in
    let v20: s0 = v36.p0 in
    v7[2] = v29 in
    let v44: [[Float]] = v20.p1 in
    var v46: [[Float]] = v27 in
    var v38: [s3] = v31 in
    let v41: [Float] = v44[0] in
    v16[0] = v18 in
    let v78: [[s3]] = [v38, v38, v35, v31, v31, v31] in
    var v80: [[s3]] = v78 in
    var v47: s2 = v36 in
    let v71: [Float] = v30[1] in
    v80 = v78 in
    v46[2] = v41 in
    let v73: s5 = v0[1] in
    let v133: s0 = v47.p1 in
    var v63: [[Float]] = v46 in
    v18.p0 = v25 in
    var v59: [s5] = v0 in
    let v94: [s3] = v80[5] in
    var v136: s0 = v133 in
    let v65: s5 = v59[2] in
    let v67: s3 = v94[0] in
    let v108: [[Float]] = v136.p1 in
    v25[0] = v71 in
    v16[0] = v20 in
    v7[0] = v73 in
    v136.p0 = v63 in
    let v149: s1 = v67.p0 in
    v7[1] = v65 in
    let v318: s5 = v0[2] in
    let v196: [Float] = v108[1] in
    let v238: s0 = v149.p0 in
    v59[1] = v318 in
    v47.p0 = v238 in
    let v159: Float = v196[0] in
    v35[0] = v67 in
    v63[1] = v41 in
    v159
  } in
  fun loop(i: Int, v0: [s5], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s5] = [s5([[s3(s1(s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]), s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]])), [s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]]), s0([[15.0], [16.0], [17.0]], [[18.0], [19.0]]), s0([[20.0], [21.0], [22.0]], [[23.0], [24.0]])])], [s3(s1(s0([[25.0], [26.0], [27.0]], [[28.0], [29.0]]), s0([[30.0], [31.0], [32.0]], [[33.0], [34.0]])), [s0([[35.0], [36.0], [37.0]], [[38.0], [39.0]]), s0([[40.0], [41.0], [42.0]], [[43.0], [44.0]]), s0([[45.0], [46.0], [47.0]], [[48.0], [49.0]])])]], [[s0([[50.0], [51.0], [52.0]], [[53.0], [54.0]])], [s0([[55.0], [56.0], [57.0]], [[58.0], [59.0]])]]), s5([[s3(s1(s0([[60.0], [61.0], [62.0]], [[63.0], [64.0]]), s0([[65.0], [66.0], [67.0]], [[68.0], [69.0]])), [s0([[70.0], [71.0], [72.0]], [[73.0], [74.0]]), s0([[75.0], [76.0], [77.0]], [[78.0], [79.0]]), s0([[80.0], [81.0], [82.0]], [[83.0], [84.0]])])], [s3(s1(s0([[85.0], [86.0], [87.0]], [[88.0], [89.0]]), s0([[90.0], [91.0], [92.0]], [[93.0], [94.0]])), [s0([[95.0], [96.0], [97.0]], [[98.0], [99.0]]), s0([[100.0], [101.0], [102.0]], [[103.0], [104.0]]), s0([[105.0], [106.0], [107.0]], [[108.0], [109.0]])])]], [[s0([[110.0], [111.0], [112.0]], [[113.0], [114.0]])], [s0([[115.0], [116.0], [117.0]], [[118.0], [119.0]])]]), s5([[s3(s1(s0([[120.0], [121.0], [122.0]], [[123.0], [124.0]]), s0([[125.0], [126.0], [127.0]], [[128.0], [129.0]])), [s0([[130.0], [131.0], [132.0]], [[133.0], [134.0]]), s0([[135.0], [136.0], [137.0]], [[138.0], [139.0]]), s0([[140.0], [141.0], [142.0]], [[143.0], [144.0]])])], [s3(s1(s0([[145.0], [146.0], [147.0]], [[148.0], [149.0]]), s0([[150.0], [151.0], [152.0]], [[153.0], [154.0]])), [s0([[155.0], [156.0], [157.0]], [[158.0], [159.0]]), s0([[160.0], [161.0], [162.0]], [[163.0], [164.0]]), s0([[165.0], [166.0], [167.0]], [[168.0], [169.0]])])]], [[s0([[170.0], [171.0], [172.0]], [[173.0], [174.0]])], [s0([[175.0], [176.0], [177.0]], [[178.0], [179.0]])]])] in
    let v1: Float = 180.0 in
    let initialResult: Float = 180.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()