  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: ([s0], Float) -> Float = (v0: [s0], v1: Float) -> Float {
    var v4: Float = v1 in
    let v12: s0 = v0[0] in
    let v8: [[Float]] = v12.p0 in
    let v18: Float = v1 + v4 in
    let v17: [Float] = v8[1] in
    var v44: Float = v4 in
    v44 = v18 in
    let v88: Float = v17[0] in
    let v58: Float = v4 - v44 in
    let v109: Float = v88 + v58 in
    v109
  } in
  fun loop(i: Int, v0: [s0], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0]], [[2.0]])] in
    let v1: Float = 3.0 in
    let initialResult: Float = 3.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()