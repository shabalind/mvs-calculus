  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
  } in
  struct s2 {
    var p0: s1
    var p1: s0
  } in
  struct s3 {
    var p0: s1
    var p1: s0
  } in
  struct s4 {
    var p0: [Float]
    var p1: [s2]
  } in
  let f78: (s4) -> s4 = (v0: s4) -> s4 {
    var v1: s4 = v0 in
    let v5: [Float] = v0.p0 in
    v1.p0 = v5 in
    let v9: [s2] = v1.p1 in
    let v2: [s4] = [v1] in
    let v13: s4 = v2[0] in
    v1.p1 = v9 in
    v13
  } in
  let noinline_f0: (s4, [s3], Float) -> Float = (v0: s4, v1: [s3], v2: Float) -> Float {
    let v6: s4 = f78(v0) in
    let v17: s4 = f78(v6) in
    let v16: [Float] = v17.p0 in
    let v25: Float = v16[2] in
    let v50: Float = v16[2] in
    let v60: Float = v50 * v25 in
    let v101: Float = v60 * v25 in
    var v87: Float = v101 in
    var v103: Float = v87 in
    v103
  } in
  fun loop(i: Int, v0: s4, v1: [s3], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s4 = s4([0.0, 1.0, 2.0], [s2(s1(s0([[3.0], [4.0]], [[5.0]])), s0([[6.0], [7.0]], [[8.0]])), s2(s1(s0([[9.0], [10.0]], [[11.0]])), s0([[12.0], [13.0]], [[14.0]]))]) in
    let v1: [s3] = [s3(s1(s0([[15.0], [16.0]], [[17.0]])), s0([[18.0], [19.0]], [[20.0]])), s3(s1(s0([[21.0], [22.0]], [[23.0]])), s0([[24.0], [25.0]], [[26.0]]))] in
    let v2: Float = 27.0 in
    let initialResult: Float = 27.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()