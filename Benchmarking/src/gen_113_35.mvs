  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: s0
    var p1: s0
  } in
  struct s4 {
    var p0: s1
    var p1: s2
  } in
  struct s5 {
    var p0: [[s0]]
  } in
  struct s8 {
    var p0: [s5]
    var p1: [s0]
  } in
  let noinline_f0: (s4, s8, Float) -> Float = (v0: s4, v1: s8, v2: Float) -> Float {
    let v8: [s5] = v1.p0 in
    let v4: s5 = v8[2] in
    let v7: [[s0]] = v4.p0 in
    var v11: Float = v2 in
    let v19: [s0] = v7[0] in
    let v14: s0 = v19[0] in
    let v36: [[Float]] = v14.p0 in
    let v26: Float = v11 * v2 in
    let v39: [Float] = v36[0] in
    let v82: Float = v39[0] in
    let v52: Float = v82 / v26 in
    v52
  } in
  fun loop(i: Int, v0: s4, v1: s8, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s4 = s4(s1(s0([[0.0]], [[1.0], [2.0], [3.0]]), [[s0([[4.0]], [[5.0], [6.0], [7.0]])]]), s2(s0([[8.0]], [[9.0], [10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0], [15.0]]))) in
    let v1: s8 = s8([s5([[s0([[16.0]], [[17.0], [18.0], [19.0]])]]), s5([[s0([[20.0]], [[21.0], [22.0], [23.0]])]]), s5([[s0([[24.0]], [[25.0], [26.0], [27.0]])]])], [s0([[28.0]], [[29.0], [30.0], [31.0]]), s0([[32.0]], [[33.0], [34.0], [35.0]])]) in
    let v2: Float = 36.0 in
    let initialResult: Float = 36.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()