  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: [s1]
    var p1: s0
  } in
  let f30: (Float) -> Float = (v0: Float) -> Float {
    var v7: Float = v0 in
    var v5: Float = v7 in
    var v9: Float = v0 in
    var v2: Float = v5 in
    var v11: Float = v7 in
    let v15: [Float] = [v5, v7, v2, v2, v5] in
    let v21: Float = v15[3] in
    var v18: [Float] = v15 in
    let v8: Float = v18[2] in
    v7 = v11 in
    v18[0] = v2 in
    v18[4] = v21 in
    v18[4] = v9 in
    v18[3] = v9 in
    v8
  } in
  let noinline_f0: (s1, s0, s2, Float) -> Float = (v0: s1, v1: s0, v2: s2, v3: Float) -> Float {
    let v18: Float = v3 + v3 in
    var v17: Float = v18 in
    var v14: Float = v17 in
    let v19: Float = v3 / v17 in
    v14 = v19 in
    let v47: Float = f30(v14) in
    v17 = v3 in
    v47
  } in
  fun loop(i: Int, v0: s1, v1: s0, v2: s2, v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([[s0([[0.0], [1.0]], [[2.0], [3.0]])]], [[s0([[4.0], [5.0]], [[6.0], [7.0]])], [s0([[8.0], [9.0]], [[10.0], [11.0]])]]) in
    let v1: s0 = s0([[12.0], [13.0]], [[14.0], [15.0]]) in
    let v2: s2 = s2([s1([[s0([[16.0], [17.0]], [[18.0], [19.0]])]], [[s0([[20.0], [21.0]], [[22.0], [23.0]])], [s0([[24.0], [25.0]], [[26.0], [27.0]])]]), s1([[s0([[28.0], [29.0]], [[30.0], [31.0]])]], [[s0([[32.0], [33.0]], [[34.0], [35.0]])], [s0([[36.0], [37.0]], [[38.0], [39.0]])]])], s0([[40.0], [41.0]], [[42.0], [43.0]])) in
    let v3: Float = 44.0 in
    let initialResult: Float = 44.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()