  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: [[s1]]
    var p1: [[s0]]
  }
  struct s3 {
    var p0: [s1]
  }
  struct s6 {
    var p0: s2
    var p1: [[s1]]
  }
  struct s10 {
    var p0: s3
  }
  struct s11 {
    var p0: Double
    var p1: [s6]
  }
  func f13(_ v0: Double) -> Double {
    var v7: Double = v0
    var v4: Double = v7
    var v6: Double = v7
    let v3: [Double] = [v0, v7, v4, v0]
    let v5: Double = v3[0]
    let v9: Double = v3[3]
    var v15: Double = v5
    var v20: [Double] = v3
    let v16: Double = v20[0]
    v20[3] = v9
    v20[2] = v6
    v6 = v15
    return v16
  }
  @inline(never)
  func f0(_ v0: s11, _ v1: s3, _ v2: s10, _ v3: Double) -> Double {
    let v8: Double = f13(v3)
    let v10: Double = f13(v8)
    var v14: s11 = v0
    v14 = v0
    v14.p0 = v10
    let v25: Double = v14.p0
    return v25
  }
  func benchmark() {
    let v0: s11 = s11(p0: 0.0, p1: [s6(p0: s2(p0: [[s1(p0: s0(p0: [[1.0], [2.0], [3.0]], p1: [[4.0], [5.0], [6.0]]), p1: s0(p0: [[7.0], [8.0], [9.0]], p1: [[10.0], [11.0], [12.0]]))], [s1(p0: s0(p0: [[13.0], [14.0], [15.0]], p1: [[16.0], [17.0], [18.0]]), p1: s0(p0: [[19.0], [20.0], [21.0]], p1: [[22.0], [23.0], [24.0]]))]], p1: [[s0(p0: [[25.0], [26.0], [27.0]], p1: [[28.0], [29.0], [30.0]])], [s0(p0: [[31.0], [32.0], [33.0]], p1: [[34.0], [35.0], [36.0]])], [s0(p0: [[37.0], [38.0], [39.0]], p1: [[40.0], [41.0], [42.0]])]]), p1: [[s1(p0: s0(p0: [[43.0], [44.0], [45.0]], p1: [[46.0], [47.0], [48.0]]), p1: s0(p0: [[49.0], [50.0], [51.0]], p1: [[52.0], [53.0], [54.0]]))], [s1(p0: s0(p0: [[55.0], [56.0], [57.0]], p1: [[58.0], [59.0], [60.0]]), p1: s0(p0: [[61.0], [62.0], [63.0]], p1: [[64.0], [65.0], [66.0]]))], [s1(p0: s0(p0: [[67.0], [68.0], [69.0]], p1: [[70.0], [71.0], [72.0]]), p1: s0(p0: [[73.0], [74.0], [75.0]], p1: [[76.0], [77.0], [78.0]]))]])])
    let v1: s3 = s3(p0: [s1(p0: s0(p0: [[79.0], [80.0], [81.0]], p1: [[82.0], [83.0], [84.0]]), p1: s0(p0: [[85.0], [86.0], [87.0]], p1: [[88.0], [89.0], [90.0]])), s1(p0: s0(p0: [[91.0], [92.0], [93.0]], p1: [[94.0], [95.0], [96.0]]), p1: s0(p0: [[97.0], [98.0], [99.0]], p1: [[100.0], [101.0], [102.0]]))])
    let v2: s10 = s10(p0: s3(p0: [s1(p0: s0(p0: [[103.0], [104.0], [105.0]], p1: [[106.0], [107.0], [108.0]]), p1: s0(p0: [[109.0], [110.0], [111.0]], p1: [[112.0], [113.0], [114.0]])), s1(p0: s0(p0: [[115.0], [116.0], [117.0]], p1: [[118.0], [119.0], [120.0]]), p1: s0(p0: [[121.0], [122.0], [123.0]], p1: [[124.0], [125.0], [126.0]]))]))
    let v3: Double = 127.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 127.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
