  struct s0 {
    var p0: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  let noinline_f0: ([[s0]], s1, Float) -> Float = (v0: [[s0]], v1: s1, v2: Float) -> Float {
    var v6: [[s0]] = v0 in
    let v4: [s0] = v6[0] in
    let v7: s0 = v4[0] in
    let v3: s0 = v4[0] in
    let v9: [[Float]] = v3.p0 in
    let v26: [s0] = v0[1] in
    let v23: [Float] = v9[0] in
    let v29: [[Float]] = v7.p0 in
    var v42: [[Float]] = v29 in
    let v27: [Float] = v42[0] in
    var v46: [[Float]] = v42 in
    v6[2] = v4 in
    v46[2] = v23 in
    var v59: [Float] = v27 in
    v42[2] = v59 in
    let v78: [Float] = v29[2] in
    v46[2] = v78 in
    let v93: [Float] = v29[0] in
    v46[1] = v93 in
    let v178: [Float] = v46[1] in
    v6[2] = v26 in
    let v183: Float = v178[0] in
    v46[2] = v23 in
    v183
  } in
  fun loop(i: Int, v0: [[s0]], v1: s1, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s0]] = [[s0([[0.0], [1.0], [2.0]])], [s0([[3.0], [4.0], [5.0]])], [s0([[6.0], [7.0], [8.0]])]] in
    let v1: s1 = s1(s0([[9.0], [10.0], [11.0]]), s0([[12.0], [13.0], [14.0]])) in
    let v2: Float = 15.0 in
    let initialResult: Float = 15.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()