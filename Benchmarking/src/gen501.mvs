  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
    var p2: [[s0]]
    var p3: s0
  } in
  struct s3 {
    var p0: [[Float]]
    var p1: s1
  } in
  struct s6 {
    var p0: [s3]
    var p1: s0
  } in
  let f41: (Float, s6) -> Float = (v0: Float, v1: s6) -> Float {
    var v4: s6 = v1 in
    let v6: [s3] = v4.p0 in
    var v3: s6 = v1 in
    v4 = v3 in
    let v2: s0 = v1.p1 in
    let v9: s3 = v6[0] in
    let v11: [[Float]] = v9.p0 in
    let v37: [Float] = v11[1] in
    v4.p0 = v6 in
    let v16: s6 = s6(v6, v2) in
    v3.p1 = v2 in
    let v19: Float = v37[0] in
    v3.p1 = v2 in
    v4.p0 = v6 in
    v4.p0 = v6 in
    let v38: [s3] = v16.p0 in
    v3.p1 = v2 in
    v4.p0 = v6 in
    v3.p0 = v6 in
    v3.p1 = v2 in
    v4.p0 = v38 in
    v19
  } in
  let noinline_f0: (s3, s6, Float) -> Float = (v0: s3, v1: s6, v2: Float) -> Float {
    var v7: s6 = v1 in
    var v6: s6 = v1 in
    let v9: [s3] = v6.p0 in
    let v8: s3 = v9[0] in
    v7.p0 = v9 in
    let v12: s3 = v9[2] in
    v6.p0 = v9 in
    let v19: s1 = v12.p1 in
    let v17: Float = f41(v2, v7) in
    v7.p0 = v9 in
    v6.p0 = v9 in
    let v30: [s0] = v19.p0 in
    let v21: s0 = v30[0] in
    v6.p0 = v9 in
    let v26: [[Float]] = v8.p0 in
    v6.p0 = v9 in
    v6.p1 = v21 in
    v6.p0 = v9 in
    let v59: [Float] = v26[1] in
    let v85: Float = v59[0] in
    v6.p0 = v9 in
    let v80: Float = v17 / v85 in
    v6.p0 = v9 in
    var v253: Float = v80 in
    v253
  } in
  fun loop(i: Int, v0: s3, v1: s6, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3([[0.0], [1.0]], s1([s0([[2.0]], [[3.0], [4.0], [5.0]])], [[s0([[6.0]], [[7.0], [8.0], [9.0]])], [s0([[10.0]], [[11.0], [12.0], [13.0]])]], [[s0([[14.0]], [[15.0], [16.0], [17.0]])]], s0([[18.0]], [[19.0], [20.0], [21.0]]))) in
    let v1: s6 = s6([s3([[22.0], [23.0]], s1([s0([[24.0]], [[25.0], [26.0], [27.0]])], [[s0([[28.0]], [[29.0], [30.0], [31.0]])], [s0([[32.0]], [[33.0], [34.0], [35.0]])]], [[s0([[36.0]], [[37.0], [38.0], [39.0]])]], s0([[40.0]], [[41.0], [42.0], [43.0]]))), s3([[44.0], [45.0]], s1([s0([[46.0]], [[47.0], [48.0], [49.0]])], [[s0([[50.0]], [[51.0], [52.0], [53.0]])], [s0([[54.0]], [[55.0], [56.0], [57.0]])]], [[s0([[58.0]], [[59.0], [60.0], [61.0]])]], s0([[62.0]], [[63.0], [64.0], [65.0]]))), s3([[66.0], [67.0]], s1([s0([[68.0]], [[69.0], [70.0], [71.0]])], [[s0([[72.0]], [[73.0], [74.0], [75.0]])], [s0([[76.0]], [[77.0], [78.0], [79.0]])]], [[s0([[80.0]], [[81.0], [82.0], [83.0]])]], s0([[84.0]], [[85.0], [86.0], [87.0]])))], s0([[88.0]], [[89.0], [90.0], [91.0]])) in
    let v2: Float = 92.0 in
    let initialResult: Float = 92.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()