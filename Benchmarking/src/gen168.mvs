  let f103: (Float) -> Float = (v0: Float) -> Float {
    var v3: Float = v0 in
    var v4: Float = v0 in
    let v5: Float = v3 + v4 in
    let v9: [Float] = [v0, v0] in
    var v2: [Float] = v9 in
    let v11: Float = v9[1] in
    let v13: Float = v9[0] in
    v2[1] = v11 in
    v2[0] = v13 in
    var v14: [Float] = v2 in
    v14[1] = v5 in
    v14[0] = v11 in
    v14[1] = v13 in
    var v18: [Float] = v14 in
    let v53: Float = v18[0] in
    v53
  } in
  let noinline_f0: ([[Float]], Float) -> Float = (v0: [[Float]], v1: Float) -> Float {
    let v2: [Float] = v0[1] in
    let v4: Float = v1 - v1 in
    let v3: Float = v4 + v4 in
    let v11: Float = v2[0] in
    let v7: Float = f103(v11) in
    var v13: [Float] = v2 in
    let v16: [Float] = v0[1] in
    v13[0] = v4 in
    v13[0] = v3 in
    var v18: [Float] = v13 in
    v13[0] = v7 in
    let v26: Float = v16[0] in
    v13 = v18 in
    var v47: [Float] = v13 in
    v47[0] = v26 in
    let v108: Float = v47[0] in
    v108
  } in
  fun loop(i: Int, v0: [[Float]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0], [1.0]] in
    let v1: Float = 2.0 in
    let initialResult: Float = 2.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()