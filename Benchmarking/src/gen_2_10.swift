  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: s0
  }
  struct s2 {
    var p0: [s0]
    var p1: [[s0]]
  }
  struct s3 {
    var p0: [s0]
    var p1: [s0]
    var p2: s1
  }
  struct s4 {
    var p0: [s3]
    var p1: s1
  }
  struct s5 {
    var p0: [[Double]]
    var p1: [s2]
  }
  struct s6 {
    var p0: s0
    var p1: [s3]
    var p2: [s4]
    var p3: s3
  }
  func f4(_ v0: s0) -> s0 {
    let v6: [[Double]] = v0.p0
    let v3: [[Double]] = v0.p1
    let v1: [[Double]] = v0.p0
    let v5: [Double] = v1[0]
    let v12: [[Double]] = v0.p1
    var v14: [[Double]] = v6
    let v8: Double = v5[0]
    let v19: [[[Double]]] = [v6]
    let v37: [[Double]] = v0.p1
    var v29: [[Double]] = v14
    let v20: s0 = s0(p0: v29, p1: v37)
    let v16: [Double] = v6[1]
    let v57: [[Double]] = v20.p0
    let v30: s0 = s0(p0: v6, p1: v3)
    let v13: [[Double]] = v30.p1
    let v31: [Double] = v29[1]
    let v28: [[Double]] = v19[0]
    var v55: Double = v8
    v14[1] = v16
    let v21: [Double] = v28[1]
    v29[0] = v21
    let v34: [Double] = v12[0]
    let v107: [[Double]] = v0.p0
    v14[1] = v31
    var v61: s0 = v30
    v61.p0 = v57
    let v98: [[Double]] = v20.p0
    var v185: [Double] = v34
    let v73: [Double] = v98[0]
    v61.p0 = v6
    v61.p0 = v29
    let v83: Double = v55 * v55
    v61.p0 = v107
    v61.p1 = v13
    v185[0] = v83
    v29[0] = v185
    v29[1] = v73
    return v61
  }
  func f1(_ v0: [s0]) -> [s0] {
    let v2: s0 = v0[1]
    let v17: s0 = f4(v2)
    let v12: s0 = f4(v17)
    let v213: s0 = f4(v12)
    let v105: s0 = f4(v213)
    let v81: s1 = s1(p0: v0, p1: v105)
    let v144: [s0] = v81.p0
    return v144
  }
  @inline(never)
  func f0(_ v0: [s5], _ v1: [[s6]], _ v2: s3, _ v3: Double) -> Double {
    let v6: [s0] = v2.p0
    let v4: [s0] = f1(v6)
    let v5: s0 = v4[0]
    let v18: [[Double]] = v5.p0
    let v20: [Double] = v18[1]
    let v71: Double = v20[0]
    let v43: Double = v20[0]
    let v58: Double = v43 * v71
    let v57: Double = v71 / v58
    return v57
  }
  func benchmark() {
    let v0: [s5] = [s5(p0: [[0.0]], p1: [s2(p0: [s0(p0: [[1.0], [2.0]], p1: [[3.0]]), s0(p0: [[4.0], [5.0]], p1: [[6.0]]), s0(p0: [[7.0], [8.0]], p1: [[9.0]])], p1: [[s0(p0: [[10.0], [11.0]], p1: [[12.0]])], [s0(p0: [[13.0], [14.0]], p1: [[15.0]])], [s0(p0: [[16.0], [17.0]], p1: [[18.0]])]]), s2(p0: [s0(p0: [[19.0], [20.0]], p1: [[21.0]]), s0(p0: [[22.0], [23.0]], p1: [[24.0]]), s0(p0: [[25.0], [26.0]], p1: [[27.0]])], p1: [[s0(p0: [[28.0], [29.0]], p1: [[30.0]])], [s0(p0: [[31.0], [32.0]], p1: [[33.0]])], [s0(p0: [[34.0], [35.0]], p1: [[36.0]])]]), s2(p0: [s0(p0: [[37.0], [38.0]], p1: [[39.0]]), s0(p0: [[40.0], [41.0]], p1: [[42.0]]), s0(p0: [[43.0], [44.0]], p1: [[45.0]])], p1: [[s0(p0: [[46.0], [47.0]], p1: [[48.0]])], [s0(p0: [[49.0], [50.0]], p1: [[51.0]])], [s0(p0: [[52.0], [53.0]], p1: [[54.0]])]])]), s5(p0: [[55.0]], p1: [s2(p0: [s0(p0: [[56.0], [57.0]], p1: [[58.0]]), s0(p0: [[59.0], [60.0]], p1: [[61.0]]), s0(p0: [[62.0], [63.0]], p1: [[64.0]])], p1: [[s0(p0: [[65.0], [66.0]], p1: [[67.0]])], [s0(p0: [[68.0], [69.0]], p1: [[70.0]])], [s0(p0: [[71.0], [72.0]], p1: [[73.0]])]]), s2(p0: [s0(p0: [[74.0], [75.0]], p1: [[76.0]]), s0(p0: [[77.0], [78.0]], p1: [[79.0]]), s0(p0: [[80.0], [81.0]], p1: [[82.0]])], p1: [[s0(p0: [[83.0], [84.0]], p1: [[85.0]])], [s0(p0: [[86.0], [87.0]], p1: [[88.0]])], [s0(p0: [[89.0], [90.0]], p1: [[91.0]])]]), s2(p0: [s0(p0: [[92.0], [93.0]], p1: [[94.0]]), s0(p0: [[95.0], [96.0]], p1: [[97.0]]), s0(p0: [[98.0], [99.0]], p1: [[100.0]])], p1: [[s0(p0: [[101.0], [102.0]], p1: [[103.0]])], [s0(p0: [[104.0], [105.0]], p1: [[106.0]])], [s0(p0: [[107.0], [108.0]], p1: [[109.0]])]])])]
    let v1: [[s6]] = [[s6(p0: s0(p0: [[110.0], [111.0]], p1: [[112.0]]), p1: [s3(p0: [s0(p0: [[113.0], [114.0]], p1: [[115.0]]), s0(p0: [[116.0], [117.0]], p1: [[118.0]])], p1: [s0(p0: [[119.0], [120.0]], p1: [[121.0]]), s0(p0: [[122.0], [123.0]], p1: [[124.0]])], p2: s1(p0: [s0(p0: [[125.0], [126.0]], p1: [[127.0]]), s0(p0: [[128.0], [129.0]], p1: [[130.0]])], p1: s0(p0: [[131.0], [132.0]], p1: [[133.0]])))], p2: [s4(p0: [s3(p0: [s0(p0: [[134.0], [135.0]], p1: [[136.0]]), s0(p0: [[137.0], [138.0]], p1: [[139.0]])], p1: [s0(p0: [[140.0], [141.0]], p1: [[142.0]]), s0(p0: [[143.0], [144.0]], p1: [[145.0]])], p2: s1(p0: [s0(p0: [[146.0], [147.0]], p1: [[148.0]]), s0(p0: [[149.0], [150.0]], p1: [[151.0]])], p1: s0(p0: [[152.0], [153.0]], p1: [[154.0]]))), s3(p0: [s0(p0: [[155.0], [156.0]], p1: [[157.0]]), s0(p0: [[158.0], [159.0]], p1: [[160.0]])], p1: [s0(p0: [[161.0], [162.0]], p1: [[163.0]]), s0(p0: [[164.0], [165.0]], p1: [[166.0]])], p2: s1(p0: [s0(p0: [[167.0], [168.0]], p1: [[169.0]]), s0(p0: [[170.0], [171.0]], p1: [[172.0]])], p1: s0(p0: [[173.0], [174.0]], p1: [[175.0]])))], p1: s1(p0: [s0(p0: [[176.0], [177.0]], p1: [[178.0]]), s0(p0: [[179.0], [180.0]], p1: [[181.0]])], p1: s0(p0: [[182.0], [183.0]], p1: [[184.0]]))), s4(p0: [s3(p0: [s0(p0: [[185.0], [186.0]], p1: [[187.0]]), s0(p0: [[188.0], [189.0]], p1: [[190.0]])], p1: [s0(p0: [[191.0], [192.0]], p1: [[193.0]]), s0(p0: [[194.0], [195.0]], p1: [[196.0]])], p2: s1(p0: [s0(p0: [[197.0], [198.0]], p1: [[199.0]]), s0(p0: [[200.0], [201.0]], p1: [[202.0]])], p1: s0(p0: [[203.0], [204.0]], p1: [[205.0]]))), s3(p0: [s0(p0: [[206.0], [207.0]], p1: [[208.0]]), s0(p0: [[209.0], [210.0]], p1: [[211.0]])], p1: [s0(p0: [[212.0], [213.0]], p1: [[214.0]]), s0(p0: [[215.0], [216.0]], p1: [[217.0]])], p2: s1(p0: [s0(p0: [[218.0], [219.0]], p1: [[220.0]]), s0(p0: [[221.0], [222.0]], p1: [[223.0]])], p1: s0(p0: [[224.0], [225.0]], p1: [[226.0]])))], p1: s1(p0: [s0(p0: [[227.0], [228.0]], p1: [[229.0]]), s0(p0: [[230.0], [231.0]], p1: [[232.0]])], p1: s0(p0: [[233.0], [234.0]], p1: [[235.0]]))), s4(p0: [s3(p0: [s0(p0: [[236.0], [237.0]], p1: [[238.0]]), s0(p0: [[239.0], [240.0]], p1: [[241.0]])], p1: [s0(p0: [[242.0], [243.0]], p1: [[244.0]]), s0(p0: [[245.0], [246.0]], p1: [[247.0]])], p2: s1(p0: [s0(p0: [[248.0], [249.0]], p1: [[250.0]]), s0(p0: [[251.0], [252.0]], p1: [[253.0]])], p1: s0(p0: [[254.0], [255.0]], p1: [[256.0]]))), s3(p0: [s0(p0: [[257.0], [258.0]], p1: [[259.0]]), s0(p0: [[260.0], [261.0]], p1: [[262.0]])], p1: [s0(p0: [[263.0], [264.0]], p1: [[265.0]]), s0(p0: [[266.0], [267.0]], p1: [[268.0]])], p2: s1(p0: [s0(p0: [[269.0], [270.0]], p1: [[271.0]]), s0(p0: [[272.0], [273.0]], p1: [[274.0]])], p1: s0(p0: [[275.0], [276.0]], p1: [[277.0]])))], p1: s1(p0: [s0(p0: [[278.0], [279.0]], p1: [[280.0]]), s0(p0: [[281.0], [282.0]], p1: [[283.0]])], p1: s0(p0: [[284.0], [285.0]], p1: [[286.0]])))], p3: s3(p0: [s0(p0: [[287.0], [288.0]], p1: [[289.0]]), s0(p0: [[290.0], [291.0]], p1: [[292.0]])], p1: [s0(p0: [[293.0], [294.0]], p1: [[295.0]]), s0(p0: [[296.0], [297.0]], p1: [[298.0]])], p2: s1(p0: [s0(p0: [[299.0], [300.0]], p1: [[301.0]]), s0(p0: [[302.0], [303.0]], p1: [[304.0]])], p1: s0(p0: [[305.0], [306.0]], p1: [[307.0]]))))], [s6(p0: s0(p0: [[308.0], [309.0]], p1: [[310.0]]), p1: [s3(p0: [s0(p0: [[311.0], [312.0]], p1: [[313.0]]), s0(p0: [[314.0], [315.0]], p1: [[316.0]])], p1: [s0(p0: [[317.0], [318.0]], p1: [[319.0]]), s0(p0: [[320.0], [321.0]], p1: [[322.0]])], p2: s1(p0: [s0(p0: [[323.0], [324.0]], p1: [[325.0]]), s0(p0: [[326.0], [327.0]], p1: [[328.0]])], p1: s0(p0: [[329.0], [330.0]], p1: [[331.0]])))], p2: [s4(p0: [s3(p0: [s0(p0: [[332.0], [333.0]], p1: [[334.0]]), s0(p0: [[335.0], [336.0]], p1: [[337.0]])], p1: [s0(p0: [[338.0], [339.0]], p1: [[340.0]]), s0(p0: [[341.0], [342.0]], p1: [[343.0]])], p2: s1(p0: [s0(p0: [[344.0], [345.0]], p1: [[346.0]]), s0(p0: [[347.0], [348.0]], p1: [[349.0]])], p1: s0(p0: [[350.0], [351.0]], p1: [[352.0]]))), s3(p0: [s0(p0: [[353.0], [354.0]], p1: [[355.0]]), s0(p0: [[356.0], [357.0]], p1: [[358.0]])], p1: [s0(p0: [[359.0], [360.0]], p1: [[361.0]]), s0(p0: [[362.0], [363.0]], p1: [[364.0]])], p2: s1(p0: [s0(p0: [[365.0], [366.0]], p1: [[367.0]]), s0(p0: [[368.0], [369.0]], p1: [[370.0]])], p1: s0(p0: [[371.0], [372.0]], p1: [[373.0]])))], p1: s1(p0: [s0(p0: [[374.0], [375.0]], p1: [[376.0]]), s0(p0: [[377.0], [378.0]], p1: [[379.0]])], p1: s0(p0: [[380.0], [381.0]], p1: [[382.0]]))), s4(p0: [s3(p0: [s0(p0: [[383.0], [384.0]], p1: [[385.0]]), s0(p0: [[386.0], [387.0]], p1: [[388.0]])], p1: [s0(p0: [[389.0], [390.0]], p1: [[391.0]]), s0(p0: [[392.0], [393.0]], p1: [[394.0]])], p2: s1(p0: [s0(p0: [[395.0], [396.0]], p1: [[397.0]]), s0(p0: [[398.0], [399.0]], p1: [[400.0]])], p1: s0(p0: [[401.0], [402.0]], p1: [[403.0]]))), s3(p0: [s0(p0: [[404.0], [405.0]], p1: [[406.0]]), s0(p0: [[407.0], [408.0]], p1: [[409.0]])], p1: [s0(p0: [[410.0], [411.0]], p1: [[412.0]]), s0(p0: [[413.0], [414.0]], p1: [[415.0]])], p2: s1(p0: [s0(p0: [[416.0], [417.0]], p1: [[418.0]]), s0(p0: [[419.0], [420.0]], p1: [[421.0]])], p1: s0(p0: [[422.0], [423.0]], p1: [[424.0]])))], p1: s1(p0: [s0(p0: [[425.0], [426.0]], p1: [[427.0]]), s0(p0: [[428.0], [429.0]], p1: [[430.0]])], p1: s0(p0: [[431.0], [432.0]], p1: [[433.0]]))), s4(p0: [s3(p0: [s0(p0: [[434.0], [435.0]], p1: [[436.0]]), s0(p0: [[437.0], [438.0]], p1: [[439.0]])], p1: [s0(p0: [[440.0], [441.0]], p1: [[442.0]]), s0(p0: [[443.0], [444.0]], p1: [[445.0]])], p2: s1(p0: [s0(p0: [[446.0], [447.0]], p1: [[448.0]]), s0(p0: [[449.0], [450.0]], p1: [[451.0]])], p1: s0(p0: [[452.0], [453.0]], p1: [[454.0]]))), s3(p0: [s0(p0: [[455.0], [456.0]], p1: [[457.0]]), s0(p0: [[458.0], [459.0]], p1: [[460.0]])], p1: [s0(p0: [[461.0], [462.0]], p1: [[463.0]]), s0(p0: [[464.0], [465.0]], p1: [[466.0]])], p2: s1(p0: [s0(p0: [[467.0], [468.0]], p1: [[469.0]]), s0(p0: [[470.0], [471.0]], p1: [[472.0]])], p1: s0(p0: [[473.0], [474.0]], p1: [[475.0]])))], p1: s1(p0: [s0(p0: [[476.0], [477.0]], p1: [[478.0]]), s0(p0: [[479.0], [480.0]], p1: [[481.0]])], p1: s0(p0: [[482.0], [483.0]], p1: [[484.0]])))], p3: s3(p0: [s0(p0: [[485.0], [486.0]], p1: [[487.0]]), s0(p0: [[488.0], [489.0]], p1: [[490.0]])], p1: [s0(p0: [[491.0], [492.0]], p1: [[493.0]]), s0(p0: [[494.0], [495.0]], p1: [[496.0]])], p2: s1(p0: [s0(p0: [[497.0], [498.0]], p1: [[499.0]]), s0(p0: [[500.0], [501.0]], p1: [[502.0]])], p1: s0(p0: [[503.0], [504.0]], p1: [[505.0]]))))], [s6(p0: s0(p0: [[506.0], [507.0]], p1: [[508.0]]), p1: [s3(p0: [s0(p0: [[509.0], [510.0]], p1: [[511.0]]), s0(p0: [[512.0], [513.0]], p1: [[514.0]])], p1: [s0(p0: [[515.0], [516.0]], p1: [[517.0]]), s0(p0: [[518.0], [519.0]], p1: [[520.0]])], p2: s1(p0: [s0(p0: [[521.0], [522.0]], p1: [[523.0]]), s0(p0: [[524.0], [525.0]], p1: [[526.0]])], p1: s0(p0: [[527.0], [528.0]], p1: [[529.0]])))], p2: [s4(p0: [s3(p0: [s0(p0: [[530.0], [531.0]], p1: [[532.0]]), s0(p0: [[533.0], [534.0]], p1: [[535.0]])], p1: [s0(p0: [[536.0], [537.0]], p1: [[538.0]]), s0(p0: [[539.0], [540.0]], p1: [[541.0]])], p2: s1(p0: [s0(p0: [[542.0], [543.0]], p1: [[544.0]]), s0(p0: [[545.0], [546.0]], p1: [[547.0]])], p1: s0(p0: [[548.0], [549.0]], p1: [[550.0]]))), s3(p0: [s0(p0: [[551.0], [552.0]], p1: [[553.0]]), s0(p0: [[554.0], [555.0]], p1: [[556.0]])], p1: [s0(p0: [[557.0], [558.0]], p1: [[559.0]]), s0(p0: [[560.0], [561.0]], p1: [[562.0]])], p2: s1(p0: [s0(p0: [[563.0], [564.0]], p1: [[565.0]]), s0(p0: [[566.0], [567.0]], p1: [[568.0]])], p1: s0(p0: [[569.0], [570.0]], p1: [[571.0]])))], p1: s1(p0: [s0(p0: [[572.0], [573.0]], p1: [[574.0]]), s0(p0: [[575.0], [576.0]], p1: [[577.0]])], p1: s0(p0: [[578.0], [579.0]], p1: [[580.0]]))), s4(p0: [s3(p0: [s0(p0: [[581.0], [582.0]], p1: [[583.0]]), s0(p0: [[584.0], [585.0]], p1: [[586.0]])], p1: [s0(p0: [[587.0], [588.0]], p1: [[589.0]]), s0(p0: [[590.0], [591.0]], p1: [[592.0]])], p2: s1(p0: [s0(p0: [[593.0], [594.0]], p1: [[595.0]]), s0(p0: [[596.0], [597.0]], p1: [[598.0]])], p1: s0(p0: [[599.0], [600.0]], p1: [[601.0]]))), s3(p0: [s0(p0: [[602.0], [603.0]], p1: [[604.0]]), s0(p0: [[605.0], [606.0]], p1: [[607.0]])], p1: [s0(p0: [[608.0], [609.0]], p1: [[610.0]]), s0(p0: [[611.0], [612.0]], p1: [[613.0]])], p2: s1(p0: [s0(p0: [[614.0], [615.0]], p1: [[616.0]]), s0(p0: [[617.0], [618.0]], p1: [[619.0]])], p1: s0(p0: [[620.0], [621.0]], p1: [[622.0]])))], p1: s1(p0: [s0(p0: [[623.0], [624.0]], p1: [[625.0]]), s0(p0: [[626.0], [627.0]], p1: [[628.0]])], p1: s0(p0: [[629.0], [630.0]], p1: [[631.0]]))), s4(p0: [s3(p0: [s0(p0: [[632.0], [633.0]], p1: [[634.0]]), s0(p0: [[635.0], [636.0]], p1: [[637.0]])], p1: [s0(p0: [[638.0], [639.0]], p1: [[640.0]]), s0(p0: [[641.0], [642.0]], p1: [[643.0]])], p2: s1(p0: [s0(p0: [[644.0], [645.0]], p1: [[646.0]]), s0(p0: [[647.0], [648.0]], p1: [[649.0]])], p1: s0(p0: [[650.0], [651.0]], p1: [[652.0]]))), s3(p0: [s0(p0: [[653.0], [654.0]], p1: [[655.0]]), s0(p0: [[656.0], [657.0]], p1: [[658.0]])], p1: [s0(p0: [[659.0], [660.0]], p1: [[661.0]]), s0(p0: [[662.0], [663.0]], p1: [[664.0]])], p2: s1(p0: [s0(p0: [[665.0], [666.0]], p1: [[667.0]]), s0(p0: [[668.0], [669.0]], p1: [[670.0]])], p1: s0(p0: [[671.0], [672.0]], p1: [[673.0]])))], p1: s1(p0: [s0(p0: [[674.0], [675.0]], p1: [[676.0]]), s0(p0: [[677.0], [678.0]], p1: [[679.0]])], p1: s0(p0: [[680.0], [681.0]], p1: [[682.0]])))], p3: s3(p0: [s0(p0: [[683.0], [684.0]], p1: [[685.0]]), s0(p0: [[686.0], [687.0]], p1: [[688.0]])], p1: [s0(p0: [[689.0], [690.0]], p1: [[691.0]]), s0(p0: [[692.0], [693.0]], p1: [[694.0]])], p2: s1(p0: [s0(p0: [[695.0], [696.0]], p1: [[697.0]]), s0(p0: [[698.0], [699.0]], p1: [[700.0]])], p1: s0(p0: [[701.0], [702.0]], p1: [[703.0]]))))]]
    let v2: s3 = s3(p0: [s0(p0: [[704.0], [705.0]], p1: [[706.0]]), s0(p0: [[707.0], [708.0]], p1: [[709.0]])], p1: [s0(p0: [[710.0], [711.0]], p1: [[712.0]]), s0(p0: [[713.0], [714.0]], p1: [[715.0]])], p2: s1(p0: [s0(p0: [[716.0], [717.0]], p1: [[718.0]]), s0(p0: [[719.0], [720.0]], p1: [[721.0]])], p1: s0(p0: [[722.0], [723.0]], p1: [[724.0]])))
    let v3: Double = 725.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 725.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
