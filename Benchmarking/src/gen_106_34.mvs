  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: Float
    var p3: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  let noinline_f0: ([s0], s1, Float) -> Float = (v0: [s0], v1: s1, v2: Float) -> Float {
    let v8: [s0] = v1.p0 in
    let v6: s0 = v8[0] in
    var v26: Float = v2 in
    let v31: [[Float]] = v6.p1 in
    let v41: [Float] = v31[1] in
    let v25: Float = v41[0] in
    let v90: Float = v26 / v26 in
    let v83: Float = v90 * v90 in
    let v177: Float = v83 + v25 in
    var v398: Float = v177 in
    v398
  } in
  fun loop(i: Int, v0: [s0], v1: s1, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]], 5.0, [[6.0], [7.0], [8.0]])] in
    let v1: s1 = s1([s0([[9.0], [10.0], [11.0]], [[12.0], [13.0]], 14.0, [[15.0], [16.0], [17.0]]), s0([[18.0], [19.0], [20.0]], [[21.0], [22.0]], 23.0, [[24.0], [25.0], [26.0]])], s0([[27.0], [28.0], [29.0]], [[30.0], [31.0]], 32.0, [[33.0], [34.0], [35.0]])) in
    let v2: Float = 36.0 in
    let initialResult: Float = 36.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()