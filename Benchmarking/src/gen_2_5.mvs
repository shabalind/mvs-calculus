  struct s0 {
    var p0: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s4 {
    var p0: s1
    var p1: s1
  } in
  let f90: (s4) -> s4 = (v0: s4) -> s4 {
    var v1: s4 = v0 in
    var v8: s4 = v0 in
    let v13: s1 = v1.p0 in
    v8.p0 = v13 in
    v8
  } in
  let noinline_f0: ([s4], Float) -> Float = (v0: [s4], v1: Float) -> Float {
    let v11: s4 = v0[2] in
    let v22: s4 = f90(v11) in
    let v16: s1 = v22.p1 in
    let v32: s0 = v16.p1 in
    let v36: [[Float]] = v32.p0 in
    let v41: [Float] = v36[0] in
    let v190: Float = v41[0] in
    v190
  } in
  fun loop(i: Int, v0: [s4], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s4] = [s4(s1([s0([[0.0]]), s0([[1.0]])], s0([[2.0]])), s1([s0([[3.0]]), s0([[4.0]])], s0([[5.0]]))), s4(s1([s0([[6.0]]), s0([[7.0]])], s0([[8.0]])), s1([s0([[9.0]]), s0([[10.0]])], s0([[11.0]]))), s4(s1([s0([[12.0]]), s0([[13.0]])], s0([[14.0]])), s1([s0([[15.0]]), s0([[16.0]])], s0([[17.0]])))] in
    let v1: Float = 18.0 in
    let initialResult: Float = 18.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()