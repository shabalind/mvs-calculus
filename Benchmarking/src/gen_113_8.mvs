  let noinline_f0: ([[Float]], Float) -> Float = (v0: [[Float]], v1: Float) -> Float {
    var v7: [[Float]] = v0 in
    let v6: [Float] = v7[0] in
    var v4: [[Float]] = v7 in
    let v9: [Float] = v0[0] in
    v4[0] = v6 in
    let v8: [Float] = v7[0] in
    v4[0] = v8 in
    let v3: [Float] = v4[0] in
    let v11: Float = v3[0] in
    v7[0] = v3 in
    v7[0] = v9 in
    let v17: Float = v11 - v11 in
    v4[0] = v6 in
    let v28: [Float] = v0[0] in
    var v71: [Float] = v28 in
    v4[0] = v71 in
    v17
  } in
  fun loop(i: Int, v0: [[Float]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0]] in
    let v1: Float = 1.0 in
    let initialResult: Float = 1.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()