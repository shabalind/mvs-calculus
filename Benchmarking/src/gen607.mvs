  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: ([s0], Float) -> Float = (v0: [s0], v1: Float) -> Float {
    let v2: s0 = v0[1] in
    let v12: [[Float]] = v2.p1 in
    let v16: [[Float]] = v2.p0 in
    let v43: s0 = v0[1] in
    var v20: s0 = v2 in
    let v54: [[Float]] = v2.p0 in
    let v34: [[Float]] = v2.p1 in
    v20.p0 = v16 in
    v20.p1 = v12 in
    let v40: [[Float]] = v20.p1 in
    v20.p1 = v34 in
    var v48: [[Float]] = v40 in
    v20.p0 = v54 in
    let v30: [[Float]] = v43.p1 in
    v20.p1 = v30 in
    let v64: [[Float]] = v43.p1 in
    let v42: [[Float]] = v20.p1 in
    v20.p1 = v42 in
    let v83: [Float] = v48[0] in
    v20.p0 = v16 in
    v20.p1 = v64 in
    let v88: Float = v83[0] in
    v20.p1 = v48 in
    v88
  } in
  fun loop(i: Int, v0: [s0], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0]], [[2.0]]), s0([[3.0], [4.0]], [[5.0]])] in
    let v1: Float = 6.0 in
    let initialResult: Float = 6.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()