  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
  } in
  struct s3 {
    var p0: s0
    var p1: s1
  } in
  let noinline_f0: (s3, [s0], Float) -> Float = (v0: s3, v1: [s0], v2: Float) -> Float {
    let v6: s0 = v1[0] in
    let v3: [[Float]] = v6.p0 in
    var v10: [[Float]] = v3 in
    let v16: [Float] = v10[0] in
    v10[1] = v16 in
    var v31: [Float] = v16 in
    let v39: Float = v31[0] in
    var v27: [Float] = v16 in
    v27[0] = v2 in
    let v50: Float = v27[0] in
    v27[0] = v50 in
    let v188: Float = v39 + v50 in
    v188
  } in
  fun loop(i: Int, v0: s3, v1: [s0], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]), s1([[s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]])], [s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]])]], [s0([[15.0], [16.0]], [[17.0], [18.0], [19.0]])])) in
    let v1: [s0] = [s0([[20.0], [21.0]], [[22.0], [23.0], [24.0]])] in
    let v2: Float = 25.0 in
    let initialResult: Float = 25.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()