  struct s0 {
    var p0: Float
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[Float]]
  } in
  struct s3 {
    var p0: s1
    var p1: s0
    var p2: s1
    var p3: [[s0]]
  } in
  struct s5 {
    var p0: [s3]
    var p1: s3
  } in
  let f11: (Float) -> Float = (v0: Float) -> Float {
    var v7: Float = v0 in
    var v5: Float = v7 in
    var v2: Float = v7 in
    var v8: Float = v0 in
    var v13: Float = v5 in
    var v12: Float = v7 in
    var v15: Float = v2 in
    var v16: Float = v2 in
    let v10: Float = v15 - v8 in
    var v26: Float = v5 in
    var v25: Float = v7 in
    let v19: [Float] = [v15, v2, v26, v2, v8, v13] in
    let v40: Float = v19[5] in
    var v30: [Float] = v19 in
    var v28: Float = v7 in
    v30[4] = v12 in
    v30[4] = v40 in
    var v99: Float = v10 in
    let v36: Float = v30[4] in
    var v42: [Float] = v19 in
    v42[4] = v28 in
    let v31: Float = v42[2] in
    v30[4] = v25 in
    v30[4] = v16 in
    v42[3] = v36 in
    let v119: [[Float]] = [v42, v30, v42, v30] in
    let v39: [Float] = v119[1] in
    v42[5] = v2 in
    let v86: Float = v39[2] in
    v30[3] = v31 in
    v30[2] = v2 in
    v30[1] = v99 in
    v86
  } in
  let noinline_f0: (s5, [[s0]], Float) -> Float = (v0: s5, v1: [[s0]], v2: Float) -> Float {
    let v8: Float = f11(v2) in
    let v9: [s0] = v1[1] in
    let v4: s0 = v9[0] in
    let v7: Float = v2 / v2 in
    let v30: Float = v4.p0 in
    let v29: Float = f11(v30) in
    let v60: Float = v8 + v29 in
    let v92: Float = v7 + v60 in
    v92
  } in
  fun loop(i: Int, v0: s5, v1: [[s0]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s5 = s5([s3(s1(s0(0.0, [[1.0], [2.0]]), [[3.0], [4.0], [5.0]]), s0(6.0, [[7.0], [8.0]]), s1(s0(9.0, [[10.0], [11.0]]), [[12.0], [13.0], [14.0]]), [[s0(15.0, [[16.0], [17.0]])], [s0(18.0, [[19.0], [20.0]])], [s0(21.0, [[22.0], [23.0]])]]), s3(s1(s0(24.0, [[25.0], [26.0]]), [[27.0], [28.0], [29.0]]), s0(30.0, [[31.0], [32.0]]), s1(s0(33.0, [[34.0], [35.0]]), [[36.0], [37.0], [38.0]]), [[s0(39.0, [[40.0], [41.0]])], [s0(42.0, [[43.0], [44.0]])], [s0(45.0, [[46.0], [47.0]])]])], s3(s1(s0(48.0, [[49.0], [50.0]]), [[51.0], [52.0], [53.0]]), s0(54.0, [[55.0], [56.0]]), s1(s0(57.0, [[58.0], [59.0]]), [[60.0], [61.0], [62.0]]), [[s0(63.0, [[64.0], [65.0]])], [s0(66.0, [[67.0], [68.0]])], [s0(69.0, [[70.0], [71.0]])]])) in
    let v1: [[s0]] = [[s0(72.0, [[73.0], [74.0]])], [s0(75.0, [[76.0], [77.0]])]] in
    let v2: Float = 78.0 in
    let initialResult: Float = 78.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()