  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
  }
  struct s1 {
    var p0: s0
  }
  struct s2 {
    var p0: [s0]
    var p1: s0
  }
  struct s7 {
    var p0: [s2]
    var p1: [[s1]]
  }
  @inline(never)
  func f0(_ v0: [s7], _ v1: [s7], _ v2: Double) -> Double {
    let v11: [Double] = [v2, v2, v2, v2, v2, v2, v2]
    let v19: Double = v11[5]
    var v30: [Double] = v11
    v30[6] = v2
    let v27: Double = v30[1]
    var v81: [Double] = v30
    let v73: Double = v27 + v27
    let v150: Double = v81[3]
    let v48: [Double] = [v73, v150, v27, v27]
    v30[3] = v19
    let v66: Double = v48[2]
    return v66
  }
  func benchmark() {
    let v0: [s7] = [s7(p0: [s2(p0: [s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0]], p2: [[4.0], [5.0]]), s0(p0: [[6.0], [7.0]], p1: [[8.0], [9.0]], p2: [[10.0], [11.0]])], p1: s0(p0: [[12.0], [13.0]], p1: [[14.0], [15.0]], p2: [[16.0], [17.0]]))], p1: [[s1(p0: s0(p0: [[18.0], [19.0]], p1: [[20.0], [21.0]], p2: [[22.0], [23.0]]))], [s1(p0: s0(p0: [[24.0], [25.0]], p1: [[26.0], [27.0]], p2: [[28.0], [29.0]]))], [s1(p0: s0(p0: [[30.0], [31.0]], p1: [[32.0], [33.0]], p2: [[34.0], [35.0]]))]]), s7(p0: [s2(p0: [s0(p0: [[36.0], [37.0]], p1: [[38.0], [39.0]], p2: [[40.0], [41.0]]), s0(p0: [[42.0], [43.0]], p1: [[44.0], [45.0]], p2: [[46.0], [47.0]])], p1: s0(p0: [[48.0], [49.0]], p1: [[50.0], [51.0]], p2: [[52.0], [53.0]]))], p1: [[s1(p0: s0(p0: [[54.0], [55.0]], p1: [[56.0], [57.0]], p2: [[58.0], [59.0]]))], [s1(p0: s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0]], p2: [[64.0], [65.0]]))], [s1(p0: s0(p0: [[66.0], [67.0]], p1: [[68.0], [69.0]], p2: [[70.0], [71.0]]))]])]
    let v1: [s7] = [s7(p0: [s2(p0: [s0(p0: [[72.0], [73.0]], p1: [[74.0], [75.0]], p2: [[76.0], [77.0]]), s0(p0: [[78.0], [79.0]], p1: [[80.0], [81.0]], p2: [[82.0], [83.0]])], p1: s0(p0: [[84.0], [85.0]], p1: [[86.0], [87.0]], p2: [[88.0], [89.0]]))], p1: [[s1(p0: s0(p0: [[90.0], [91.0]], p1: [[92.0], [93.0]], p2: [[94.0], [95.0]]))], [s1(p0: s0(p0: [[96.0], [97.0]], p1: [[98.0], [99.0]], p2: [[100.0], [101.0]]))], [s1(p0: s0(p0: [[102.0], [103.0]], p1: [[104.0], [105.0]], p2: [[106.0], [107.0]]))]])]
    let v2: Double = 108.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 108.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
