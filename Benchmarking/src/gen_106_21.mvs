  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
    var p2: [[s0]]
    var p3: [s0]
  } in
  struct s2 {
    var p0: [[s1]]
    var p1: Float
  } in
  let f69: (s2, s2) -> s2 = (v0: s2, v1: s2) -> s2 {
    var v33: s2 = v0 in
    v33
  } in
  let f63: (s2, s2) -> s2 = (v0: s2, v1: s2) -> s2 {
    let v4: s2 = f69(v0, v0) in
    let v5: Float = v0.p1 in
    let v8: [[s1]] = v4.p0 in
    let v6: s2 = f69(v1, v1) in
    let v9: [[s1]] = v1.p0 in
    let v12: s2 = f69(v4, v0) in
    let v18: Float = v5 - v5 in
    let v22: s2 = f69(v0, v6) in
    let v28: [[s1]] = v22.p0 in
    var v21: s2 = v6 in
    let v27: s2 = f69(v1, v1) in
    v21.p0 = v8 in
    let v81: s2 = f69(v12, v27) in
    v21.p0 = v28 in
    v21.p1 = v18 in
    let v62: [[s1]] = v4.p0 in
    v21.p0 = v28 in
    v21.p1 = v5 in
    let v74: s2 = f69(v81, v27) in
    v21.p0 = v62 in
    let v67: s2 = f69(v74, v27) in
    let v99: s2 = f69(v81, v21) in
    v21.p0 = v9 in
    let v130: s2 = f69(v67, v99) in
    v130
  } in
  let f53: (s2) -> s2 = (v0: s2) -> s2 {
    let v3: [s2] = [v0, v0] in
    let v10: s2 = v3[0] in
    v10
  } in
  let noinline_f0: (s2, Float) -> Float = (v0: s2, v1: Float) -> Float {
    var v6: s2 = v0 in
    let v9: s2 = f53(v6) in
    let v8: [[s1]] = v9.p0 in
    let v2: s2 = s2(v8, v1) in
    v6.p1 = v1 in
    let v4: s2 = f63(v2, v0) in
    let v13: s2 = f53(v4) in
    var v42: s2 = v4 in
    var v22: s2 = v4 in
    let v38: s2 = f69(v0, v22) in
    let v34: Float = v42.p1 in
    let v32: Float = v38.p1 in
    v6.p1 = v1 in
    v42.p1 = v34 in
    let v36: Float = v13.p1 in
    let v48: [Float] = [v1, v34, v36, v32, v32, v36] in
    let v35: Float = v48[0] in
    v35
  } in
  fun loop(i: Int, v0: s2, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2([[s1([[s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]])], [s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]])]], [s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]]), s0([[15.0], [16.0], [17.0]], [[18.0], [19.0]])], [[s0([[20.0], [21.0], [22.0]], [[23.0], [24.0]])]], [s0([[25.0], [26.0], [27.0]], [[28.0], [29.0]])])], [s1([[s0([[30.0], [31.0], [32.0]], [[33.0], [34.0]])], [s0([[35.0], [36.0], [37.0]], [[38.0], [39.0]])]], [s0([[40.0], [41.0], [42.0]], [[43.0], [44.0]]), s0([[45.0], [46.0], [47.0]], [[48.0], [49.0]])], [[s0([[50.0], [51.0], [52.0]], [[53.0], [54.0]])]], [s0([[55.0], [56.0], [57.0]], [[58.0], [59.0]])])]], 60.0) in
    let v1: Float = 61.0 in
    let initialResult: Float = 61.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()