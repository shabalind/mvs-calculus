  struct s0 {
    var p0: [Float]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s3 {
    var p0: [s1]
    var p1: s0
  } in
  let f76: (s0) -> s0 = (v0: s0) -> s0 {
    let v7: [Float] = v0.p0 in
    let v3: [[Float]] = v0.p1 in
    var v6: s0 = v0 in
    let v1: [Float] = v0.p0 in
    let v4: [[Float]] = v6.p1 in
    let v8: [Float] = v4[0] in
    v6.p0 = v7 in
    v6.p1 = v3 in
    let v12: [Float] = v0.p0 in
    v6.p0 = v12 in
    v6.p1 = v4 in
    v6.p1 = v3 in
    v6.p0 = v12 in
    let v30: [[Float]] = v0.p1 in
    let v25: [Float] = v6.p0 in
    let v22: [[Float]] = v6.p1 in
    var v36: [[Float]] = v30 in
    v36[1] = v8 in
    v6.p1 = v36 in
    var v43: [[Float]] = v22 in
    v6.p0 = v1 in
    v6.p1 = v43 in
    var v40: [Float] = v25 in
    v6.p0 = v40 in
    var v87: s0 = v6 in
    let v79: s1 = s1(v87, v6) in
    let v69: s0 = v79.p1 in
    v69
  } in
  let noinline_f0: (s1, [[s3]], Float) -> Float = (v0: s1, v1: [[s3]], v2: Float) -> Float {
    let v5: s0 = v0.p0 in
    let v6: [Float] = v5.p0 in
    let v14: s0 = v0.p1 in
    let v11: Float = v6[2] in
    let v25: s0 = f76(v14) in
    var v23: [Float] = v6 in
    v23[2] = v11 in
    let v37: Float = v6[1] in
    let v36: [Float] = v25.p0 in
    let v61: Float = v23[1] in
    let v39: Float = v36[0] in
    v23[0] = v37 in
    v23[0] = v39 in
    v23 = v6 in
    v61
  } in
  fun loop(i: Int, v0: s1, v1: [[s3]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1(s0([0.0, 1.0, 2.0], [[3.0], [4.0], [5.0]]), s0([6.0, 7.0, 8.0], [[9.0], [10.0], [11.0]])) in
    let v1: [[s3]] = [[s3([s1(s0([12.0, 13.0, 14.0], [[15.0], [16.0], [17.0]]), s0([18.0, 19.0, 20.0], [[21.0], [22.0], [23.0]])), s1(s0([24.0, 25.0, 26.0], [[27.0], [28.0], [29.0]]), s0([30.0, 31.0, 32.0], [[33.0], [34.0], [35.0]])), s1(s0([36.0, 37.0, 38.0], [[39.0], [40.0], [41.0]]), s0([42.0, 43.0, 44.0], [[45.0], [46.0], [47.0]]))], s0([48.0, 49.0, 50.0], [[51.0], [52.0], [53.0]]))], [s3([s1(s0([54.0, 55.0, 56.0], [[57.0], [58.0], [59.0]]), s0([60.0, 61.0, 62.0], [[63.0], [64.0], [65.0]])), s1(s0([66.0, 67.0, 68.0], [[69.0], [70.0], [71.0]]), s0([72.0, 73.0, 74.0], [[75.0], [76.0], [77.0]])), s1(s0([78.0, 79.0, 80.0], [[81.0], [82.0], [83.0]]), s0([84.0, 85.0, 86.0], [[87.0], [88.0], [89.0]]))], s0([90.0, 91.0, 92.0], [[93.0], [94.0], [95.0]]))], [s3([s1(s0([96.0, 97.0, 98.0], [[99.0], [100.0], [101.0]]), s0([102.0, 103.0, 104.0], [[105.0], [106.0], [107.0]])), s1(s0([108.0, 109.0, 110.0], [[111.0], [112.0], [113.0]]), s0([114.0, 115.0, 116.0], [[117.0], [118.0], [119.0]])), s1(s0([120.0, 121.0, 122.0], [[123.0], [124.0], [125.0]]), s0([126.0, 127.0, 128.0], [[129.0], [130.0], [131.0]]))], s0([132.0, 133.0, 134.0], [[135.0], [136.0], [137.0]]))]] in
    let v2: Float = 138.0 in
    let initialResult: Float = 138.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()