  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: [s1]
  } in
  let noinline_f0: ([s2], Float) -> Float = (v0: [s2], v1: Float) -> Float {
    let v7: s2 = v0[0] in
    let v5: [s0] = v7.p0 in
    let v2: s0 = v5[1] in
    let v12: [[Float]] = v2.p1 in
    let v10: [[Float]] = v2.p1 in
    let v26: [[Float]] = v2.p1 in
    let v92: [Float] = v12[1] in
    let v90: Float = v92[0] in
    let v217: [Float] = v26[0] in
    let v127: [Float] = v10[1] in
    let v124: Float = v127[0] in
    let v145: Float = v217[0] in
    let v103: Float = v124 - v145 in
    let v161: Float = v103 + v90 in
    let v285: Float = v103 - v161 in
    v285
  } in
  fun loop(i: Int, v0: [s2], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2([s0([[0.0], [1.0]], [[2.0], [3.0]]), s0([[4.0], [5.0]], [[6.0], [7.0]])], [s1([s0([[8.0], [9.0]], [[10.0], [11.0]])], s0([[12.0], [13.0]], [[14.0], [15.0]]))])] in
    let v1: Float = 16.0 in
    let initialResult: Float = 16.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()