  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: s1
    var p2: s0
    var p3: [[s1]]
  } in
  struct s3 {
    var p0: s1
    var p1: [[s2]]
  } in
  let f19: (s0) -> s0 = (v0: s0) -> s0 {
    v0
  } in
  let f16: ([[Float]]) -> [[Float]] = (v0: [[Float]]) -> [[Float]] {
    let v4: [Float] = v0[0] in
    let v6: [[[Float]]] = [v0, v0] in
    let v9: [Float] = v0[1] in
    var v5: [Float] = v4 in
    var v1: [[[Float]]] = v6 in
    var v3: [Float] = v5 in
    var v8: [[Float]] = v0 in
    var v2: [[[Float]]] = v1 in
    let v7: [[Float]] = v2[1] in
    let v11: [[[[Float]]]] = [v2, v6, v6, v2, v6] in
    v8[0] = v3 in
    var v14: [[[[Float]]]] = v11 in
    var v30: [[[[Float]]]] = v11 in
    var v13: [Float] = v9 in
    v30[4] = v2 in
    v1[1] = v8 in
    let v18: [[[Float]]] = v14[4] in
    let v19: [Float] = v8[1] in
    let v15: [[[Float]]] = v30[2] in
    v2[0] = v7 in
    var v23: [[Float]] = v8 in
    let v10: [Float] = v23[0] in
    var v24: [[Float]] = v8 in
    var v81: [[Float]] = v7 in
    let v21: [[Float]] = v18[1] in
    let v35: Float = v3[0] in
    v81[1] = v10 in
    v13[0] = v35 in
    v8 = v7 in
    v14[4] = v15 in
    var v61: [[[Float]]] = v2 in
    var v58: [Float] = v3 in
    let v32: [[Float]] = v1[1] in
    v81[1] = v13 in
    v61[0] = v24 in
    v23 = v81 in
    let v29: Float = v3[0] in
    v3[0] = v35 in
    let v85: [[[Float]]] = v30[3] in
    v5[0] = v35 in
    let v38: [Float] = v81[0] in
    v3[0] = v29 in
    var v33: [Float] = v58 in
    v58[0] = v35 in
    let v51: [[[Float]]] = [v81, v21, v32, v8, v21] in
    var v69: Float = v35 in
    v33[0] = v29 in
    let v98: [[Float]] = v51[3] in
    var v87: [[[Float]]] = v51 in
    v30[0] = v61 in
    let v39: [[Float]] = v85[0] in
    v8[0] = v13 in
    let v111: Float = v29 + v35 in
    let v158: [[[Float]]] = [v23, v8] in
    let v103: [[[[Float]]]] = [v87] in
    let v94: [[[Float]]] = v103[0] in
    var v170: Float = v111 in
    v87[1] = v8 in
    v8[1] = v33 in
    v14[0] = v158 in
    v8[0] = v38 in
    let v102: [[Float]] = v94[4] in
    v2[0] = v39 in
    v1[0] = v98 in
    v13 = v3 in
    v8[1] = v19 in
    v3[0] = v170 in
    v3[0] = v69 in
    v102
  } in
  let f9: (s1) -> s1 = (v0: s1) -> s1 {
    let v4: s0 = v0.p1 in
    var v7: s1 = v0 in
    var v6: s1 = v7 in
    let v34: s0 = f19(v4) in
    let v22: s0 = f19(v34) in
    let v35: s0 = f19(v34) in
    let v26: s0 = v6.p1 in
    var v32: s1 = v7 in
    v7.p1 = v22 in
    v32.p1 = v26 in
    v7.p1 = v35 in
    v32
  } in
  let noinline_f0: (s3, Float) -> Float = (v0: s3, v1: Float) -> Float {
    let v5: s1 = v0.p0 in
    let v7: s1 = v0.p0 in
    let v6: s0 = v5.p1 in
    var v4: s0 = v6 in
    var v2: s3 = v0 in
    let v3: s0 = f19(v4) in
    let v11: [[Float]] = v3.p0 in
    v2.p0 = v7 in
    var v18: [[Float]] = v11 in
    var v8: Float = v1 in
    let v10: Float = v8 / v1 in
    let v14: [Float] = v18[1] in
    v18[1] = v14 in
    var v12: [Float] = v14 in
    let v24: s1 = v2.p0 in
    let v15: s1 = f9(v24) in
    let v32: [[Float]] = f16(v18) in
    v2.p0 = v7 in
    v12[0] = v10 in
    v12[0] = v1 in
    v12[0] = v8 in
    var v26: s1 = v24 in
    let v42: Float = v12[0] in
    let v29: s1 = f9(v26) in
    v12[0] = v42 in
    let v22: [Float] = v11[0] in
    v18[1] = v22 in
    var v54: [Float] = v12 in
    let v40: [[s2]] = v2.p1 in
    let v51: Float = v12[0] in
    v2.p1 = v40 in
    v18[0] = v54 in
    let v41: s0 = v29.p1 in
    let v101: Float = v22[0] in
    v54[0] = v10 in
    v2.p0 = v15 in
    let v91: Float = v101 + v51 in
    v54[0] = v10 in
    v4 = v41 in
    v4.p0 = v32 in
    v91
  } in
  fun loop(i: Int, v0: s3, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(s1([s0([[0.0], [1.0]], [[2.0]]), s0([[3.0], [4.0]], [[5.0]])], s0([[6.0], [7.0]], [[8.0]])), [[s2([s0([[9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0]], [[14.0]])], s1([s0([[15.0], [16.0]], [[17.0]]), s0([[18.0], [19.0]], [[20.0]])], s0([[21.0], [22.0]], [[23.0]])), s0([[24.0], [25.0]], [[26.0]]), [[s1([s0([[27.0], [28.0]], [[29.0]]), s0([[30.0], [31.0]], [[32.0]])], s0([[33.0], [34.0]], [[35.0]]))], [s1([s0([[36.0], [37.0]], [[38.0]]), s0([[39.0], [40.0]], [[41.0]])], s0([[42.0], [43.0]], [[44.0]]))]])], [s2([s0([[45.0], [46.0]], [[47.0]]), s0([[48.0], [49.0]], [[50.0]])], s1([s0([[51.0], [52.0]], [[53.0]]), s0([[54.0], [55.0]], [[56.0]])], s0([[57.0], [58.0]], [[59.0]])), s0([[60.0], [61.0]], [[62.0]]), [[s1([s0([[63.0], [64.0]], [[65.0]]), s0([[66.0], [67.0]], [[68.0]])], s0([[69.0], [70.0]], [[71.0]]))], [s1([s0([[72.0], [73.0]], [[74.0]]), s0([[75.0], [76.0]], [[77.0]])], s0([[78.0], [79.0]], [[80.0]]))]])], [s2([s0([[81.0], [82.0]], [[83.0]]), s0([[84.0], [85.0]], [[86.0]])], s1([s0([[87.0], [88.0]], [[89.0]]), s0([[90.0], [91.0]], [[92.0]])], s0([[93.0], [94.0]], [[95.0]])), s0([[96.0], [97.0]], [[98.0]]), [[s1([s0([[99.0], [100.0]], [[101.0]]), s0([[102.0], [103.0]], [[104.0]])], s0([[105.0], [106.0]], [[107.0]]))], [s1([s0([[108.0], [109.0]], [[110.0]]), s0([[111.0], [112.0]], [[113.0]])], s0([[114.0], [115.0]], [[116.0]]))]])]]) in
    let v1: Float = 117.0 in
    let initialResult: Float = 117.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()