  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: s1
  } in
  struct s3 {
    var p0: s0
    var p1: [s1]
  } in
  struct s4 {
    var p0: s0
    var p1: [s1]
  } in
  struct s5 {
    var p0: [Float]
    var p1: [s2]
  } in
  struct s6 {
    var p0: [[s2]]
    var p1: s3
  } in
  struct s7 {
    var p0: s0
    var p1: s6
  } in
  let f24: (s6) -> s6 = (v0: s6) -> s6 {
    let v1: [[s2]] = v0.p0 in
    var v5: s6 = v0 in
    v5.p0 = v1 in
    v5 = v0 in
    var v9: [[s2]] = v1 in
    let v7: [[[s2]]] = [v9, v1] in
    v5.p0 = v9 in
    v5.p0 = v9 in
    let v16: [[s2]] = v7[0] in
    var v23: s6 = v0 in
    let v21: s3 = v23.p1 in
    v23.p0 = v16 in
    v5.p1 = v21 in
    v5
  } in
  let f17: (s6) -> s6 = (v0: s6) -> s6 {
    let v3: s6 = f24(v0) in
    let v1: [[s2]] = v3.p0 in
    let v5: [[s2]] = v0.p0 in
    let v7: [s2] = v5[1] in
    var v2: [[s2]] = v5 in
    var v4: [[s2]] = v1 in
    let v8: [s2] = v4[0] in
    v2[1] = v8 in
    let v22: s6 = f24(v3) in
    let v21: s2 = v8[0] in
    v4[0] = v7 in
    let v17: [[s2]] = v3.p0 in
    v2[1] = v7 in
    v4[1] = v8 in
    let v13: [[s2]] = v0.p0 in
    let v12: [s2] = [v21] in
    let v16: [s2] = v4[0] in
    var v55: [[s2]] = v2 in
    v55[1] = v8 in
    v55[0] = v16 in
    var v65: s6 = v22 in
    let v33: [s2] = v17[0] in
    v4[0] = v33 in
    v2[0] = v8 in
    v65.p0 = v55 in
    v55[0] = v33 in
    v4[0] = v12 in
    v65.p0 = v13 in
    v65
  } in
  let f12: (s7, Float) -> Float = (v0: s7, v1: Float) -> Float {
    let v3: s0 = v0.p0 in
    let v17: [[Float]] = v3.p1 in
    let v28: [Float] = v17[0] in
    let v37: Float = v28[0] in
    var v206: Float = v37 in
    v206
  } in
  let f8: (s7) -> s7 = (v0: s7) -> s7 {
    var v7: s7 = v0 in
    var v6: s7 = v7 in
    let v3: s6 = v0.p1 in
    let v1: s6 = v6.p1 in
    var v14: s7 = v7 in
    let v16: s6 = f17(v1) in
    v7.p1 = v16 in
    v6 = v14 in
    var v78: s7 = v7 in
    v78.p1 = v3 in
    v78
  } in
  let f7: (s7, s5) -> s7 = (v0: s7, v1: s5) -> s7 {
    let v95: s7 = f8(v0) in
    v95
  } in
  let noinline_f0: (s7, s1, [s5], s4, Float) -> Float = (v0: s7, v1: s1, v2: [s5], v3: s4, v4: Float) -> Float {
    let v7: s5 = v2[0] in
    let v9: s7 = f7(v0, v7) in
    var v13: Float = v4 in
    let v43: Float = f12(v9, v4) in
    let v21: Float = v13 * v43 in
    var v32: Float = v21 in
    let v54: Float = f12(v0, v32) in
    v54
  } in
  fun loop(i: Int, v0: s7, v1: s1, v2: [s5], v3: s4, v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s7 = s7(s0([[0.0], [1.0]], [[2.0]]), s6([[s2([s0([[3.0], [4.0]], [[5.0]])], s1(s0([[6.0], [7.0]], [[8.0]]), s0([[9.0], [10.0]], [[11.0]])))], [s2([s0([[12.0], [13.0]], [[14.0]])], s1(s0([[15.0], [16.0]], [[17.0]]), s0([[18.0], [19.0]], [[20.0]])))]], s3(s0([[21.0], [22.0]], [[23.0]]), [s1(s0([[24.0], [25.0]], [[26.0]]), s0([[27.0], [28.0]], [[29.0]])), s1(s0([[30.0], [31.0]], [[32.0]]), s0([[33.0], [34.0]], [[35.0]]))]))) in
    let v1: s1 = s1(s0([[36.0], [37.0]], [[38.0]]), s0([[39.0], [40.0]], [[41.0]])) in
    let v2: [s5] = [s5([42.0], [s2([s0([[43.0], [44.0]], [[45.0]])], s1(s0([[46.0], [47.0]], [[48.0]]), s0([[49.0], [50.0]], [[51.0]])))]), s5([52.0], [s2([s0([[53.0], [54.0]], [[55.0]])], s1(s0([[56.0], [57.0]], [[58.0]]), s0([[59.0], [60.0]], [[61.0]])))]), s5([62.0], [s2([s0([[63.0], [64.0]], [[65.0]])], s1(s0([[66.0], [67.0]], [[68.0]]), s0([[69.0], [70.0]], [[71.0]])))])] in
    let v3: s4 = s4(s0([[72.0], [73.0]], [[74.0]]), [s1(s0([[75.0], [76.0]], [[77.0]]), s0([[78.0], [79.0]], [[80.0]])), s1(s0([[81.0], [82.0]], [[83.0]]), s0([[84.0], [85.0]], [[86.0]])), s1(s0([[87.0], [88.0]], [[89.0]]), s0([[90.0], [91.0]], [[92.0]]))]) in
    let v4: Float = 93.0 in
    let initialResult: Float = 93.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()