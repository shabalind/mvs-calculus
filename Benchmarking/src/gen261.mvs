  struct s0 {
    var p0: [[Float]]
    var p1: [Float]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s2 {
    var p0: [s1]
    var p1: s0
  } in
  struct s3 {
    var p0: [s1]
    var p1: s2
  } in
  let f85: (Float) -> Float = (v0: Float) -> Float {
    let v4: [Float] = [v0, v0] in
    let v8: Float = v0 + v0 in
    let v2: Float = v4[1] in
    var v5: Float = v2 in
    var v3: Float = v0 in
    var v1: [Float] = v4 in
    v1[1] = v5 in
    let v10: Float = v1[0] in
    var v17: [Float] = v4 in
    let v18: Float = v17[1] in
    let v9: Float = v2 - v0 in
    let v11: [Float] = [v2, v3, v8, v8] in
    let v36: Float = v11[1] in
    var v40: [Float] = v4 in
    let v28: Float = v11[1] in
    var v15: [Float] = v17 in
    var v50: [Float] = v40 in
    let v27: [[Float]] = [v1, v1, v50, v15, v15, v50] in
    let v43: [[[Float]]] = [v27, v27, v27] in
    v40[0] = v5 in
    let v33: Float = v10 + v9 in
    var v26: [[[Float]]] = v43 in
    v1[0] = v9 in
    let v46: [[Float]] = v26[1] in
    let v55: [[Float]] = v26[0] in
    var v99: [[[Float]]] = v43 in
    var v65: [[Float]] = v55 in
    v50[0] = v9 in
    v99[0] = v46 in
    v3 = v36 in
    v26 = v99 in
    v15[1] = v33 in
    v50[1] = v9 in
    let v101: [Float] = v65[1] in
    v50[1] = v18 in
    v40 = v4 in
    var v141: Float = v28 in
    v50[1] = v141 in
    let v256: Float = v101[1] in
    v50[0] = v3 in
    v256
  } in
  let noinline_f0: ([s2], s3, Float) -> Float = (v0: [s2], v1: s3, v2: Float) -> Float {
    let v9: Float = v2 / v2 in
    let v19: Float = f85(v9) in
    let v30: Float = f85(v19) in
    v30
  } in
  fun loop(i: Int, v0: [s2], v1: s3, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2([s1([s0([[0.0]], [1.0], [[2.0]]), s0([[3.0]], [4.0], [[5.0]]), s0([[6.0]], [7.0], [[8.0]])], s0([[9.0]], [10.0], [[11.0]])), s1([s0([[12.0]], [13.0], [[14.0]]), s0([[15.0]], [16.0], [[17.0]]), s0([[18.0]], [19.0], [[20.0]])], s0([[21.0]], [22.0], [[23.0]])), s1([s0([[24.0]], [25.0], [[26.0]]), s0([[27.0]], [28.0], [[29.0]]), s0([[30.0]], [31.0], [[32.0]])], s0([[33.0]], [34.0], [[35.0]]))], s0([[36.0]], [37.0], [[38.0]]))] in
    let v1: s3 = s3([s1([s0([[39.0]], [40.0], [[41.0]]), s0([[42.0]], [43.0], [[44.0]]), s0([[45.0]], [46.0], [[47.0]])], s0([[48.0]], [49.0], [[50.0]]))], s2([s1([s0([[51.0]], [52.0], [[53.0]]), s0([[54.0]], [55.0], [[56.0]]), s0([[57.0]], [58.0], [[59.0]])], s0([[60.0]], [61.0], [[62.0]])), s1([s0([[63.0]], [64.0], [[65.0]]), s0([[66.0]], [67.0], [[68.0]]), s0([[69.0]], [70.0], [[71.0]])], s0([[72.0]], [73.0], [[74.0]])), s1([s0([[75.0]], [76.0], [[77.0]]), s0([[78.0]], [79.0], [[80.0]]), s0([[81.0]], [82.0], [[83.0]])], s0([[84.0]], [85.0], [[86.0]]))], s0([[87.0]], [88.0], [[89.0]]))) in
    let v2: Float = 90.0 in
    let initialResult: Float = 90.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()