  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: s0
    var p1: [s1]
  } in
  struct s4 {
    var p0: [s0]
    var p1: [s0]
  } in
  let f3: (s0) -> s0 = (v0: s0) -> s0 {
    var v5: s0 = v0 in
    let v4: [[Float]] = v0.p0 in
    v5.p0 = v4 in
    let v1: [[Float]] = v5.p1 in
    var v2: s0 = v0 in
    let v17: [[Float]] = v0.p0 in
    let v34: [[Float]] = v5.p1 in
    let v14: [[Float]] = v5.p1 in
    v5.p1 = v1 in
    v2.p0 = v17 in
    let v30: [[Float]] = v0.p1 in
    v5.p1 = v14 in
    v2.p1 = v30 in
    v2.p1 = v1 in
    v5.p1 = v34 in
    v5.p1 = v30 in
    let v54: [s0] = [v5, v2] in
    v2.p0 = v4 in
    let v97: s0 = v54[0] in
    v97
  } in
  let noinline_f0: (s2, s4, Float) -> Float = (v0: s2, v1: s4, v2: Float) -> Float {
    let v9: [s0] = v1.p0 in
    let v4: s0 = v9[2] in
    let v10: s0 = f3(v4) in
    let v16: [[Float]] = v10.p1 in
    let v28: [Float] = v16[1] in
    let v58: Float = v28[0] in
    let v56: Float = v28[0] in
    let v64: Float = v56 * v58 in
    let v137: Float = v64 / v64 in
    v137
  } in
  fun loop(i: Int, v0: s2, v1: s4, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(s0([[0.0]], [[1.0], [2.0]]), [s1(s0([[3.0]], [[4.0], [5.0]]), [s0([[6.0]], [[7.0], [8.0]]), s0([[9.0]], [[10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0]])]), s1(s0([[15.0]], [[16.0], [17.0]]), [s0([[18.0]], [[19.0], [20.0]]), s0([[21.0]], [[22.0], [23.0]]), s0([[24.0]], [[25.0], [26.0]])]), s1(s0([[27.0]], [[28.0], [29.0]]), [s0([[30.0]], [[31.0], [32.0]]), s0([[33.0]], [[34.0], [35.0]]), s0([[36.0]], [[37.0], [38.0]])])]) in
    let v1: s4 = s4([s0([[39.0]], [[40.0], [41.0]]), s0([[42.0]], [[43.0], [44.0]]), s0([[45.0]], [[46.0], [47.0]])], [s0([[48.0]], [[49.0], [50.0]]), s0([[51.0]], [[52.0], [53.0]]), s0([[54.0]], [[55.0], [56.0]])]) in
    let v2: Float = 57.0 in
    let initialResult: Float = 57.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()