  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
  } in
  struct s2 {
    var p0: [[s0]]
    var p1: [[s1]]
  } in
  struct s3 {
    var p0: [s2]
    var p1: s1
  } in
  let f45: (s3) -> s3 = (v0: s3) -> s3 {
    let v1: s1 = v0.p1 in
    let v10: [[s0]] = v1.p0 in
    let v12: [[s0]] = v1.p0 in
    let v7: [s0] = v10[0] in
    var v14: [[s0]] = v12 in
    let v8: [s0] = v10[0] in
    let v6: [s0] = v1.p1 in
    var v16: [s0] = v6 in
    v14[0] = v8 in
    var v22: s1 = v1 in
    let v26: [s0] = v1.p1 in
    let v21: [s0] = v22.p1 in
    v22.p1 = v26 in
    v22.p0 = v14 in
    v22.p0 = v14 in
    v14[0] = v7 in
    v22.p1 = v16 in
    var v123: s3 = v0 in
    let v38: [s0] = v14[0] in
    v22.p0 = v12 in
    v14[0] = v38 in
    v22.p1 = v21 in
    v123.p1 = v22 in
    var v263: s3 = v123 in
    v263
  } in
  let noinline_f0: (s3, Float) -> Float = (v0: s3, v1: Float) -> Float {
    let v4: s3 = f45(v0) in
    var v6: Float = v1 in
    let v7: s1 = v4.p1 in
    let v26: [[s0]] = v7.p0 in
    let v21: [s0] = v26[0] in
    let v29: s0 = v21[0] in
    let v31: [[Float]] = v29.p2 in
    let v62: [Float] = v31[0] in
    var v51: [Float] = v62 in
    let v68: Float = v51[0] in
    let v41: Float = v6 * v68 in
    v51[0] = v1 in
    v41
  } in
  fun loop(i: Int, v0: s3, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3([s2([[s0([[0.0], [1.0]], [[2.0]], [[3.0]])], [s0([[4.0], [5.0]], [[6.0]], [[7.0]])], [s0([[8.0], [9.0]], [[10.0]], [[11.0]])]], [[s1([[s0([[12.0], [13.0]], [[14.0]], [[15.0]])]], [s0([[16.0], [17.0]], [[18.0]], [[19.0]]), s0([[20.0], [21.0]], [[22.0]], [[23.0]])])]]), s2([[s0([[24.0], [25.0]], [[26.0]], [[27.0]])], [s0([[28.0], [29.0]], [[30.0]], [[31.0]])], [s0([[32.0], [33.0]], [[34.0]], [[35.0]])]], [[s1([[s0([[36.0], [37.0]], [[38.0]], [[39.0]])]], [s0([[40.0], [41.0]], [[42.0]], [[43.0]]), s0([[44.0], [45.0]], [[46.0]], [[47.0]])])]]), s2([[s0([[48.0], [49.0]], [[50.0]], [[51.0]])], [s0([[52.0], [53.0]], [[54.0]], [[55.0]])], [s0([[56.0], [57.0]], [[58.0]], [[59.0]])]], [[s1([[s0([[60.0], [61.0]], [[62.0]], [[63.0]])]], [s0([[64.0], [65.0]], [[66.0]], [[67.0]]), s0([[68.0], [69.0]], [[70.0]], [[71.0]])])]])], s1([[s0([[72.0], [73.0]], [[74.0]], [[75.0]])]], [s0([[76.0], [77.0]], [[78.0]], [[79.0]]), s0([[80.0], [81.0]], [[82.0]], [[83.0]])])) in
    let v1: Float = 84.0 in
    let initialResult: Float = 84.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()