  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  let f37: (Float) -> Float = (v0: Float) -> Float {
    var v2: Float = v0 in
    var v7: Float = v0 in
    var v6: Float = v2 in
    var v1: Float = v0 in
    var v3: Float = v2 in
    v6 = v1 in
    var v9: Float = v2 in
    var v20: Float = v3 in
    let v15: [Float] = [v7, v20, v3, v9, v3] in
    var v11: [Float] = v15 in
    v11[1] = v6 in
    let v23: Float = v15[0] in
    var v27: [Float] = v11 in
    let v17: Float = v27[3] in
    v11[1] = v17 in
    v27[1] = v23 in
    var v30: [Float] = v27 in
    var v37: [Float] = v30 in
    let v33: Float = v37[2] in
    var v34: Float = v33 in
    v34
  } in
  let noinline_f0: (s1, [[s0]], Float) -> Float = (v0: s1, v1: [[s0]], v2: Float) -> Float {
    var v3: Float = v2 in
    let v8: Float = f37(v2) in
    var v5: Float = v8 in
    let v11: Float = f37(v5) in
    let v23: Float = v11 + v3 in
    let v50: Float = f37(v23) in
    v50
  } in
  fun loop(i: Int, v0: s1, v1: [[s0]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([s0([[0.0]], [[1.0], [2.0]]), s0([[3.0]], [[4.0], [5.0]]), s0([[6.0]], [[7.0], [8.0]])], [s0([[9.0]], [[10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0]])]) in
    let v1: [[s0]] = [[s0([[15.0]], [[16.0], [17.0]])], [s0([[18.0]], [[19.0], [20.0]])]] in
    let v2: Float = 21.0 in
    let initialResult: Float = 21.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()