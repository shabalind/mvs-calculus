  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
  } in
  let f70: (s0) -> s0 = (v0: s0) -> s0 {
    v0
  } in
  let f68: (s0) -> s0 = (v0: s0) -> s0 {
    var v1: s0 = v0 in
    let v5: [[Float]] = v1.p0 in
    let v2: [s0] = [v0] in
    let v9: s0 = f70(v1) in
    var v3: [s0] = v2 in
    let v12: [[Float]] = v1.p0 in
    v1.p0 = v5 in
    let v18: [[[Float]]] = [v12, v5, v5, v5, v5, v5] in
    let v10: s0 = f70(v9) in
    v3[0] = v9 in
    let v8: s0 = f70(v10) in
    let v17: [[Float]] = v18[1] in
    let v13: [[Float]] = v10.p0 in
    let v22: s0 = f70(v10) in
    v1.p0 = v12 in
    let v36: s0 = f70(v22) in
    v1.p0 = v17 in
    v1.p0 = v13 in
    let v39: s0 = f70(v8) in
    v3[0] = v39 in
    var v31: [s0] = v3 in
    var v32: [[[Float]]] = v18 in
    let v42: [[Float]] = v36.p1 in
    let v34: [[Float]] = v32[0] in
    let v113: s0 = s0(v34, v42) in
    let v41: s0 = v31[0] in
    let v100: [[Float]] = v41.p0 in
    v32[0] = v100 in
    v113
  } in
  let f13: ([s1]) -> [s1] = (v0: [s1]) -> [s1] {
    v0
  } in
  let noinline_f0: ([s1], Float) -> Float = (v0: [s1], v1: Float) -> Float {
    let v7: [s1] = f13(v0) in
    let v5: s1 = v7[0] in
    let v11: s1 = v7[0] in
    let v14: s1 = v7[0] in
    var v4: s1 = v5 in
    let v18: s0 = v14.p0 in
    let v34: s0 = v11.p0 in
    let v16: s0 = f68(v34) in
    let v17: s0 = v4.p0 in
    let v35: s1 = v0[0] in
    v4.p0 = v18 in
    let v69: s0 = f70(v16) in
    v4.p0 = v69 in
    v4.p0 = v17 in
    let v39: [[Float]] = v17.p1 in
    v4.p0 = v17 in
    let v24: [Float] = v39[2] in
    let v54: s0 = v35.p0 in
    let v38: [[Float]] = v54.p0 in
    let v82: s0 = s0(v38, v39) in
    var v104: [Float] = v24 in
    v4.p0 = v82 in
    v4.p0 = v16 in
    v4.p0 = v69 in
    let v144: Float = v104[0] in
    v144
  } in
  fun loop(i: Int, v0: [s1], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1(s0([[0.0]], [[1.0], [2.0], [3.0]]))] in
    let v1: Float = 4.0 in
    let initialResult: Float = 4.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()