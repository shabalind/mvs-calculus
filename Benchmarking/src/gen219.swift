  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s3 {
    var p0: s0
    var p1: [s0]
  }
  func f46(_ v0: s0) -> s0 {
    var v8: s0 = v0
    v8 = v0
    var v12: s0 = v8
    let v10: [[Double]] = v12.p1
    let v49: [[Double]] = v0.p0
    v12.p0 = v49
    var v51: s0 = v12
    v8.p1 = v10
    v8.p0 = v49
    return v51
  }
  @inline(never)
  func f0(_ v0: [s3], _ v1: s3, _ v2: [[s3]], _ v3: [[s1]], _ v4: Double) -> Double {
    var v5: Double = v4
    let v7: s0 = v1.p0
    let v21: s0 = f46(v7)
    let v16: [[Double]] = v21.p1
    let v28: Double = v5 * v4
    let v30: [Double] = v16[0]
    let v19: Double = v30[0]
    var v42: Double = v4
    var v41: Double = v4
    let v56: [Double] = [v28, v42, v28, v19, v4]
    let v83: Double = v56[0]
    let v155: Double = v41 + v83
    return v155
  }
  func benchmark() {
    let v0: [s3] = [s3(p0: s0(p0: [[0.0]], p1: [[1.0], [2.0], [3.0]]), p1: [s0(p0: [[4.0]], p1: [[5.0], [6.0], [7.0]]), s0(p0: [[8.0]], p1: [[9.0], [10.0], [11.0]]), s0(p0: [[12.0]], p1: [[13.0], [14.0], [15.0]])]), s3(p0: s0(p0: [[16.0]], p1: [[17.0], [18.0], [19.0]]), p1: [s0(p0: [[20.0]], p1: [[21.0], [22.0], [23.0]]), s0(p0: [[24.0]], p1: [[25.0], [26.0], [27.0]]), s0(p0: [[28.0]], p1: [[29.0], [30.0], [31.0]])]), s3(p0: s0(p0: [[32.0]], p1: [[33.0], [34.0], [35.0]]), p1: [s0(p0: [[36.0]], p1: [[37.0], [38.0], [39.0]]), s0(p0: [[40.0]], p1: [[41.0], [42.0], [43.0]]), s0(p0: [[44.0]], p1: [[45.0], [46.0], [47.0]])])]
    let v1: s3 = s3(p0: s0(p0: [[48.0]], p1: [[49.0], [50.0], [51.0]]), p1: [s0(p0: [[52.0]], p1: [[53.0], [54.0], [55.0]]), s0(p0: [[56.0]], p1: [[57.0], [58.0], [59.0]]), s0(p0: [[60.0]], p1: [[61.0], [62.0], [63.0]])])
    let v2: [[s3]] = [[s3(p0: s0(p0: [[64.0]], p1: [[65.0], [66.0], [67.0]]), p1: [s0(p0: [[68.0]], p1: [[69.0], [70.0], [71.0]]), s0(p0: [[72.0]], p1: [[73.0], [74.0], [75.0]]), s0(p0: [[76.0]], p1: [[77.0], [78.0], [79.0]])])], [s3(p0: s0(p0: [[80.0]], p1: [[81.0], [82.0], [83.0]]), p1: [s0(p0: [[84.0]], p1: [[85.0], [86.0], [87.0]]), s0(p0: [[88.0]], p1: [[89.0], [90.0], [91.0]]), s0(p0: [[92.0]], p1: [[93.0], [94.0], [95.0]])])]]
    let v3: [[s1]] = [[s1(p0: s0(p0: [[96.0]], p1: [[97.0], [98.0], [99.0]]), p1: s0(p0: [[100.0]], p1: [[101.0], [102.0], [103.0]]))]]
    let v4: Double = 104.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 104.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
