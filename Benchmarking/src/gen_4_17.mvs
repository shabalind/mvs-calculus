  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: (s0, Float) -> Float = (v0: s0, v1: Float) -> Float {
    let v5: Float = v1 * v1 in
    let v7: [[Float]] = v0.p0 in
    let v6: [[Float]] = v0.p0 in
    let v8: [Float] = v7[1] in
    let v12: [Float] = v7[1] in
    var v47: [Float] = v8 in
    v47 = v12 in
    v47[0] = v5 in
    let v21: [Float] = v6[0] in
    let v26: Float = v47[0] in
    v47 = v12 in
    v47 = v21 in
    v26
  } in
  fun loop(i: Int, v0: s0, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]) in
    let v1: Float = 5.0 in
    let initialResult: Float = 5.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()