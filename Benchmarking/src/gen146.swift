  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s2 {
    var p0: [[s0]]
    var p1: [s0]
  }
  struct s3 {
    var p0: [[s2]]
    var p1: s0
  }
  struct s5 {
    var p0: [[s3]]
    var p1: s2
  }
  struct s6 {
    var p0: s5
    var p1: [[s0]]
  }
  struct s8 {
    var p0: Double
    var p1: [[s0]]
  }
  func f52(_ v0: Double) -> Double {
    var v2: Double = v0
    var v4: Double = v0
    var v6: Double = v4
    var v3: Double = v6
    var v9: Double = v0
    let v13: [Double] = [v3, v4, v0, v9]
    let v10: Double = v13[1]
    var v12: Double = v6
    var v16: [Double] = v13
    var v25: [Double] = v16
    v25[2] = v2
    v16[0] = v12
    v4 = v10
    let v19: Double = v25[2]
    return v19
  }
  @inline(never)
  func f0(_ v0: s0, _ v1: [s8], _ v2: [s6], _ v3: s3, _ v4: Double) -> Double {
    let v9: Double = f52(v4)
    let v21: Double = v9 + v4
    let v23: Double = v21 * v21
    return v23
  }
  func benchmark() {
    let v0: s0 = s0(p0: [[0.0], [1.0]], p1: [[2.0]])
    let v1: [s8] = [s8(p0: 3.0, p1: [[s0(p0: [[4.0], [5.0]], p1: [[6.0]])], [s0(p0: [[7.0], [8.0]], p1: [[9.0]])], [s0(p0: [[10.0], [11.0]], p1: [[12.0]])]]), s8(p0: 13.0, p1: [[s0(p0: [[14.0], [15.0]], p1: [[16.0]])], [s0(p0: [[17.0], [18.0]], p1: [[19.0]])], [s0(p0: [[20.0], [21.0]], p1: [[22.0]])]])]
    let v2: [s6] = [s6(p0: s5(p0: [[s3(p0: [[s2(p0: [[s0(p0: [[23.0], [24.0]], p1: [[25.0]])], [s0(p0: [[26.0], [27.0]], p1: [[28.0]])], [s0(p0: [[29.0], [30.0]], p1: [[31.0]])]], p1: [s0(p0: [[32.0], [33.0]], p1: [[34.0]]), s0(p0: [[35.0], [36.0]], p1: [[37.0]])])], [s2(p0: [[s0(p0: [[38.0], [39.0]], p1: [[40.0]])], [s0(p0: [[41.0], [42.0]], p1: [[43.0]])], [s0(p0: [[44.0], [45.0]], p1: [[46.0]])]], p1: [s0(p0: [[47.0], [48.0]], p1: [[49.0]]), s0(p0: [[50.0], [51.0]], p1: [[52.0]])])], [s2(p0: [[s0(p0: [[53.0], [54.0]], p1: [[55.0]])], [s0(p0: [[56.0], [57.0]], p1: [[58.0]])], [s0(p0: [[59.0], [60.0]], p1: [[61.0]])]], p1: [s0(p0: [[62.0], [63.0]], p1: [[64.0]]), s0(p0: [[65.0], [66.0]], p1: [[67.0]])])]], p1: s0(p0: [[68.0], [69.0]], p1: [[70.0]]))]], p1: s2(p0: [[s0(p0: [[71.0], [72.0]], p1: [[73.0]])], [s0(p0: [[74.0], [75.0]], p1: [[76.0]])], [s0(p0: [[77.0], [78.0]], p1: [[79.0]])]], p1: [s0(p0: [[80.0], [81.0]], p1: [[82.0]]), s0(p0: [[83.0], [84.0]], p1: [[85.0]])])), p1: [[s0(p0: [[86.0], [87.0]], p1: [[88.0]])], [s0(p0: [[89.0], [90.0]], p1: [[91.0]])]]), s6(p0: s5(p0: [[s3(p0: [[s2(p0: [[s0(p0: [[92.0], [93.0]], p1: [[94.0]])], [s0(p0: [[95.0], [96.0]], p1: [[97.0]])], [s0(p0: [[98.0], [99.0]], p1: [[100.0]])]], p1: [s0(p0: [[101.0], [102.0]], p1: [[103.0]]), s0(p0: [[104.0], [105.0]], p1: [[106.0]])])], [s2(p0: [[s0(p0: [[107.0], [108.0]], p1: [[109.0]])], [s0(p0: [[110.0], [111.0]], p1: [[112.0]])], [s0(p0: [[113.0], [114.0]], p1: [[115.0]])]], p1: [s0(p0: [[116.0], [117.0]], p1: [[118.0]]), s0(p0: [[119.0], [120.0]], p1: [[121.0]])])], [s2(p0: [[s0(p0: [[122.0], [123.0]], p1: [[124.0]])], [s0(p0: [[125.0], [126.0]], p1: [[127.0]])], [s0(p0: [[128.0], [129.0]], p1: [[130.0]])]], p1: [s0(p0: [[131.0], [132.0]], p1: [[133.0]]), s0(p0: [[134.0], [135.0]], p1: [[136.0]])])]], p1: s0(p0: [[137.0], [138.0]], p1: [[139.0]]))]], p1: s2(p0: [[s0(p0: [[140.0], [141.0]], p1: [[142.0]])], [s0(p0: [[143.0], [144.0]], p1: [[145.0]])], [s0(p0: [[146.0], [147.0]], p1: [[148.0]])]], p1: [s0(p0: [[149.0], [150.0]], p1: [[151.0]]), s0(p0: [[152.0], [153.0]], p1: [[154.0]])])), p1: [[s0(p0: [[155.0], [156.0]], p1: [[157.0]])], [s0(p0: [[158.0], [159.0]], p1: [[160.0]])]]), s6(p0: s5(p0: [[s3(p0: [[s2(p0: [[s0(p0: [[161.0], [162.0]], p1: [[163.0]])], [s0(p0: [[164.0], [165.0]], p1: [[166.0]])], [s0(p0: [[167.0], [168.0]], p1: [[169.0]])]], p1: [s0(p0: [[170.0], [171.0]], p1: [[172.0]]), s0(p0: [[173.0], [174.0]], p1: [[175.0]])])], [s2(p0: [[s0(p0: [[176.0], [177.0]], p1: [[178.0]])], [s0(p0: [[179.0], [180.0]], p1: [[181.0]])], [s0(p0: [[182.0], [183.0]], p1: [[184.0]])]], p1: [s0(p0: [[185.0], [186.0]], p1: [[187.0]]), s0(p0: [[188.0], [189.0]], p1: [[190.0]])])], [s2(p0: [[s0(p0: [[191.0], [192.0]], p1: [[193.0]])], [s0(p0: [[194.0], [195.0]], p1: [[196.0]])], [s0(p0: [[197.0], [198.0]], p1: [[199.0]])]], p1: [s0(p0: [[200.0], [201.0]], p1: [[202.0]]), s0(p0: [[203.0], [204.0]], p1: [[205.0]])])]], p1: s0(p0: [[206.0], [207.0]], p1: [[208.0]]))]], p1: s2(p0: [[s0(p0: [[209.0], [210.0]], p1: [[211.0]])], [s0(p0: [[212.0], [213.0]], p1: [[214.0]])], [s0(p0: [[215.0], [216.0]], p1: [[217.0]])]], p1: [s0(p0: [[218.0], [219.0]], p1: [[220.0]]), s0(p0: [[221.0], [222.0]], p1: [[223.0]])])), p1: [[s0(p0: [[224.0], [225.0]], p1: [[226.0]])], [s0(p0: [[227.0], [228.0]], p1: [[229.0]])]])]
    let v3: s3 = s3(p0: [[s2(p0: [[s0(p0: [[230.0], [231.0]], p1: [[232.0]])], [s0(p0: [[233.0], [234.0]], p1: [[235.0]])], [s0(p0: [[236.0], [237.0]], p1: [[238.0]])]], p1: [s0(p0: [[239.0], [240.0]], p1: [[241.0]]), s0(p0: [[242.0], [243.0]], p1: [[244.0]])])], [s2(p0: [[s0(p0: [[245.0], [246.0]], p1: [[247.0]])], [s0(p0: [[248.0], [249.0]], p1: [[250.0]])], [s0(p0: [[251.0], [252.0]], p1: [[253.0]])]], p1: [s0(p0: [[254.0], [255.0]], p1: [[256.0]]), s0(p0: [[257.0], [258.0]], p1: [[259.0]])])], [s2(p0: [[s0(p0: [[260.0], [261.0]], p1: [[262.0]])], [s0(p0: [[263.0], [264.0]], p1: [[265.0]])], [s0(p0: [[266.0], [267.0]], p1: [[268.0]])]], p1: [s0(p0: [[269.0], [270.0]], p1: [[271.0]]), s0(p0: [[272.0], [273.0]], p1: [[274.0]])])]], p1: s0(p0: [[275.0], [276.0]], p1: [[277.0]]))
    let v4: Double = 278.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 278.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
