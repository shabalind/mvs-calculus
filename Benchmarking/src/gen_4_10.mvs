  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  let noinline_f0: ([s0], s1, Float) -> Float = (v0: [s0], v1: s1, v2: Float) -> Float {
    var v7: Float = v2 in
    let v3: s0 = v0[0] in
    let v8: [[Float]] = v3.p1 in
    let v14: [Float] = v8[2] in
    v7 = v2 in
    let v15: Float = v14[0] in
    let v25: s0 = v1.p0 in
    var v23: [Float] = v14 in
    var v17: [Float] = v23 in
    let v40: Float = v14[0] in
    let v32: [[Float]] = v25.p0 in
    let v31: [Float] = v32[0] in
    v23 = v31 in
    v17[0] = v2 in
    v23[0] = v15 in
    v23[0] = v7 in
    let v109: Float = v17[0] in
    v23[0] = v40 in
    let v139: Float = v7 + v109 in
    v139
  } in
  fun loop(i: Int, v0: [s0], v1: s1, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0]], [[1.0], [2.0], [3.0]]), s0([[4.0]], [[5.0], [6.0], [7.0]])] in
    let v1: s1 = s1(s0([[8.0]], [[9.0], [10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0], [15.0]])) in
    let v2: Float = 16.0 in
    let initialResult: Float = 16.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()