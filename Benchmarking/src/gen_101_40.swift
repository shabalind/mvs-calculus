  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [Double]
  }
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  }
  struct s2 {
    var p0: [s0]
    var p1: [[s0]]
    var p2: s1
  }
  struct s3 {
    var p0: [s1]
    var p1: [s1]
  }
  struct s6 {
    var p0: [s1]
    var p1: [s2]
  }
  @inline(never)
  func f0(_ v0: s6, _ v1: s3, _ v2: Double) -> Double {
    let v3: [s1] = v0.p0
    let v9: s1 = v3[0]
    let v14: [s2] = v0.p1
    let v48: s0 = v9.p0
    var v16: s0 = v48
    let v25: s2 = v14[0]
    let v29: [s0] = v25.p0
    let v65: s0 = v29[0]
    let v70: [[Double]] = v65.p0
    let v78: [Double] = v16.p1
    let v211: Double = v78[1]
    v16.p0 = v70
    return v211
  }
  func benchmark() {
    let v0: s6 = s6(p0: [s1(p0: s0(p0: [[0.0], [1.0], [2.0]], p1: [3.0, 4.0, 5.0]), p1: [[s0(p0: [[6.0], [7.0], [8.0]], p1: [9.0, 10.0, 11.0])], [s0(p0: [[12.0], [13.0], [14.0]], p1: [15.0, 16.0, 17.0])], [s0(p0: [[18.0], [19.0], [20.0]], p1: [21.0, 22.0, 23.0])]])], p1: [s2(p0: [s0(p0: [[24.0], [25.0], [26.0]], p1: [27.0, 28.0, 29.0]), s0(p0: [[30.0], [31.0], [32.0]], p1: [33.0, 34.0, 35.0]), s0(p0: [[36.0], [37.0], [38.0]], p1: [39.0, 40.0, 41.0])], p1: [[s0(p0: [[42.0], [43.0], [44.0]], p1: [45.0, 46.0, 47.0])], [s0(p0: [[48.0], [49.0], [50.0]], p1: [51.0, 52.0, 53.0])]], p2: s1(p0: s0(p0: [[54.0], [55.0], [56.0]], p1: [57.0, 58.0, 59.0]), p1: [[s0(p0: [[60.0], [61.0], [62.0]], p1: [63.0, 64.0, 65.0])], [s0(p0: [[66.0], [67.0], [68.0]], p1: [69.0, 70.0, 71.0])], [s0(p0: [[72.0], [73.0], [74.0]], p1: [75.0, 76.0, 77.0])]])), s2(p0: [s0(p0: [[78.0], [79.0], [80.0]], p1: [81.0, 82.0, 83.0]), s0(p0: [[84.0], [85.0], [86.0]], p1: [87.0, 88.0, 89.0]), s0(p0: [[90.0], [91.0], [92.0]], p1: [93.0, 94.0, 95.0])], p1: [[s0(p0: [[96.0], [97.0], [98.0]], p1: [99.0, 100.0, 101.0])], [s0(p0: [[102.0], [103.0], [104.0]], p1: [105.0, 106.0, 107.0])]], p2: s1(p0: s0(p0: [[108.0], [109.0], [110.0]], p1: [111.0, 112.0, 113.0]), p1: [[s0(p0: [[114.0], [115.0], [116.0]], p1: [117.0, 118.0, 119.0])], [s0(p0: [[120.0], [121.0], [122.0]], p1: [123.0, 124.0, 125.0])], [s0(p0: [[126.0], [127.0], [128.0]], p1: [129.0, 130.0, 131.0])]]))])
    let v1: s3 = s3(p0: [s1(p0: s0(p0: [[132.0], [133.0], [134.0]], p1: [135.0, 136.0, 137.0]), p1: [[s0(p0: [[138.0], [139.0], [140.0]], p1: [141.0, 142.0, 143.0])], [s0(p0: [[144.0], [145.0], [146.0]], p1: [147.0, 148.0, 149.0])], [s0(p0: [[150.0], [151.0], [152.0]], p1: [153.0, 154.0, 155.0])]]), s1(p0: s0(p0: [[156.0], [157.0], [158.0]], p1: [159.0, 160.0, 161.0]), p1: [[s0(p0: [[162.0], [163.0], [164.0]], p1: [165.0, 166.0, 167.0])], [s0(p0: [[168.0], [169.0], [170.0]], p1: [171.0, 172.0, 173.0])], [s0(p0: [[174.0], [175.0], [176.0]], p1: [177.0, 178.0, 179.0])]]), s1(p0: s0(p0: [[180.0], [181.0], [182.0]], p1: [183.0, 184.0, 185.0]), p1: [[s0(p0: [[186.0], [187.0], [188.0]], p1: [189.0, 190.0, 191.0])], [s0(p0: [[192.0], [193.0], [194.0]], p1: [195.0, 196.0, 197.0])], [s0(p0: [[198.0], [199.0], [200.0]], p1: [201.0, 202.0, 203.0])]])], p1: [s1(p0: s0(p0: [[204.0], [205.0], [206.0]], p1: [207.0, 208.0, 209.0]), p1: [[s0(p0: [[210.0], [211.0], [212.0]], p1: [213.0, 214.0, 215.0])], [s0(p0: [[216.0], [217.0], [218.0]], p1: [219.0, 220.0, 221.0])], [s0(p0: [[222.0], [223.0], [224.0]], p1: [225.0, 226.0, 227.0])]])])
    let v2: Double = 228.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 228.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
