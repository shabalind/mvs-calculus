  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: s1
    var p1: [s1]
  }
  struct s3 {
    var p0: s2
    var p1: s2
  }
  struct s4 {
    var p0: [[s1]]
    var p1: s1
  }
  func f103(_ v0: s1) -> s1 {
    var v7: s1 = v0
    let v4: s0 = v0.p0
    var v5: s0 = v4
    var v2: s0 = v4
    var v3: s1 = v7
    let v9: [[Double]] = v2.p0
    var v6: s0 = v4
    let v1: s0 = v3.p0
    let v12: [Double] = v9[0]
    let v8: s0 = v3.p1
    let v16: [s1] = [v7, v0, v3, v7, v7, v7, v0]
    v5.p0 = v9
    let v11: s1 = v16[5]
    var v26: [s1] = v16
    let v24: s0 = v7.p1
    v26[0] = v11
    let v23: [Double] = v9[0]
    let v17: [[Double]] = v8.p0
    v26[5] = v0
    let v22: s1 = s1(p0: v5, p1: v4)
    let v29: [[s1]] = [v26]
    let v56: s1 = v16[2]
    let v32: [[Double]] = v4.p0
    var v25: [[s1]] = v29
    let v42: s0 = v7.p0
    v6.p0 = v17
    let v34: [[Double]] = v4.p1
    v6.p0 = v9
    v26[1] = v3
    v6.p0 = v17
    let v31: [s1] = v25[0]
    var v50: s1 = v22
    var v45: s1 = v0
    var v73: [[Double]] = v32
    let v60: s1 = s1(p0: v5, p1: v6)
    v26[3] = v60
    v2.p0 = v9
    v7 = v11
    let v52: [s1] = v25[0]
    var v92: [s1] = v31
    v26[2] = v0
    let v41: s0 = v11.p0
    let v65: s0 = v50.p0
    v7.p0 = v65
    v25[0] = v92
    v92[2] = v11
    v5.p0 = v73
    var v113: s1 = v56
    var v140: [[Double]] = v34
    let v78: [s1] = v29[0]
    v6.p1 = v140
    v92[5] = v113
    v45.p1 = v42
    let v151: s0 = v45.p0
    v50.p0 = v6
    v73[0] = v23
    v25[0] = v78
    v140[2] = v12
    v7.p0 = v1
    v45.p0 = v4
    v50.p1 = v41
    v3.p0 = v24
    v3.p0 = v151
    let v108: s1 = v52[4]
    return v108
  }
  func f80(_ v0: s4) -> s4 {
    var v2: s4 = v0
    let v4: [[s1]] = v0.p0
    let v11: s1 = v0.p1
    let v37: s1 = f103(v11)
    v2 = v0
    v2.p0 = v4
    var v133: s4 = v2
    let v121: [[s1]] = v133.p0
    let v210: s4 = s4(p0: v121, p1: v37)
    return v210
  }
  func f73(_ v0: s4) -> s4 {
    var v9: s4 = v0
    let v34: [[s1]] = v9.p0
    let v48: s4 = f80(v9)
    v9.p0 = v34
    return v48
  }
  @inline(never)
  func f0(_ v0: s4, _ v1: [[s3]], _ v2: Double) -> Double {
    let v16: s4 = f73(v0)
    let v17: s1 = v16.p1
    let v24: s0 = v17.p1
    let v54: [[Double]] = v24.p1
    let v31: [Double] = v54[1]
    var v170: [Double] = v31
    var v152: [Double] = v170
    let v145: Double = v152[0]
    return v145
  }
  func benchmark() {
    let v0: s4 = s4(p0: [[s1(p0: s0(p0: [[0.0]], p1: [[1.0], [2.0], [3.0]]), p1: s0(p0: [[4.0]], p1: [[5.0], [6.0], [7.0]]))], [s1(p0: s0(p0: [[8.0]], p1: [[9.0], [10.0], [11.0]]), p1: s0(p0: [[12.0]], p1: [[13.0], [14.0], [15.0]]))]], p1: s1(p0: s0(p0: [[16.0]], p1: [[17.0], [18.0], [19.0]]), p1: s0(p0: [[20.0]], p1: [[21.0], [22.0], [23.0]])))
    let v1: [[s3]] = [[s3(p0: s2(p0: s1(p0: s0(p0: [[24.0]], p1: [[25.0], [26.0], [27.0]]), p1: s0(p0: [[28.0]], p1: [[29.0], [30.0], [31.0]])), p1: [s1(p0: s0(p0: [[32.0]], p1: [[33.0], [34.0], [35.0]]), p1: s0(p0: [[36.0]], p1: [[37.0], [38.0], [39.0]])), s1(p0: s0(p0: [[40.0]], p1: [[41.0], [42.0], [43.0]]), p1: s0(p0: [[44.0]], p1: [[45.0], [46.0], [47.0]])), s1(p0: s0(p0: [[48.0]], p1: [[49.0], [50.0], [51.0]]), p1: s0(p0: [[52.0]], p1: [[53.0], [54.0], [55.0]]))]), p1: s2(p0: s1(p0: s0(p0: [[56.0]], p1: [[57.0], [58.0], [59.0]]), p1: s0(p0: [[60.0]], p1: [[61.0], [62.0], [63.0]])), p1: [s1(p0: s0(p0: [[64.0]], p1: [[65.0], [66.0], [67.0]]), p1: s0(p0: [[68.0]], p1: [[69.0], [70.0], [71.0]])), s1(p0: s0(p0: [[72.0]], p1: [[73.0], [74.0], [75.0]]), p1: s0(p0: [[76.0]], p1: [[77.0], [78.0], [79.0]])), s1(p0: s0(p0: [[80.0]], p1: [[81.0], [82.0], [83.0]]), p1: s0(p0: [[84.0]], p1: [[85.0], [86.0], [87.0]]))]))], [s3(p0: s2(p0: s1(p0: s0(p0: [[88.0]], p1: [[89.0], [90.0], [91.0]]), p1: s0(p0: [[92.0]], p1: [[93.0], [94.0], [95.0]])), p1: [s1(p0: s0(p0: [[96.0]], p1: [[97.0], [98.0], [99.0]]), p1: s0(p0: [[100.0]], p1: [[101.0], [102.0], [103.0]])), s1(p0: s0(p0: [[104.0]], p1: [[105.0], [106.0], [107.0]]), p1: s0(p0: [[108.0]], p1: [[109.0], [110.0], [111.0]])), s1(p0: s0(p0: [[112.0]], p1: [[113.0], [114.0], [115.0]]), p1: s0(p0: [[116.0]], p1: [[117.0], [118.0], [119.0]]))]), p1: s2(p0: s1(p0: s0(p0: [[120.0]], p1: [[121.0], [122.0], [123.0]]), p1: s0(p0: [[124.0]], p1: [[125.0], [126.0], [127.0]])), p1: [s1(p0: s0(p0: [[128.0]], p1: [[129.0], [130.0], [131.0]]), p1: s0(p0: [[132.0]], p1: [[133.0], [134.0], [135.0]])), s1(p0: s0(p0: [[136.0]], p1: [[137.0], [138.0], [139.0]]), p1: s0(p0: [[140.0]], p1: [[141.0], [142.0], [143.0]])), s1(p0: s0(p0: [[144.0]], p1: [[145.0], [146.0], [147.0]]), p1: s0(p0: [[148.0]], p1: [[149.0], [150.0], [151.0]]))]))]]
    let v2: Double = 152.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 152.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
