  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  let noinline_f0: ([s0], s1, Float) -> Float = (v0: [s0], v1: s1, v2: Float) -> Float {
    let v5: [s0] = v1.p1 in
    let v4: s0 = v5[0] in
    var v8: Float = v2 in
    let v10: [[Float]] = v4.p1 in
    var v23: Float = v8 in
    var v16: Float = v23 in
    let v28: [Float] = v10[0] in
    let v18: Float = v28[0] in
    var v25: Float = v2 in
    v25 = v23 in
    let v93: Float = v16 / v25 in
    let v144: Float = v93 + v18 in
    v144
  } in
  fun loop(i: Int, v0: [s0], v1: s1, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0]], [[1.0]]), s0([[2.0]], [[3.0]])] in
    let v1: s1 = s1(s0([[4.0]], [[5.0]]), [s0([[6.0]], [[7.0]]), s0([[8.0]], [[9.0]])]) in
    let v2: Float = 10.0 in
    let initialResult: Float = 10.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()