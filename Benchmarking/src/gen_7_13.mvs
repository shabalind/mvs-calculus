  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
  } in
  struct s2 {
    var p0: [s0]
    var p1: [[s1]]
  } in
  struct s6 {
    var p0: [Float]
    var p1: [s0]
    var p2: [[s2]]
    var p3: [[s0]]
    var p4: s1
  } in
  struct s11 {
    var p0: [s1]
    var p1: s1
  } in
  struct s12 {
    var p0: [s1]
    var p1: s6
  } in
  let noinline_f0: ([s12], Float) -> Float = (v0: [s12], v1: Float) -> Float {
    var v3: [s12] = v0 in
    let v10: s12 = v3[1] in
    let v9: s12 = v0[0] in
    let v7: [s1] = v10.p0 in
    let v2: s1 = v7[1] in
    v3[1] = v9 in
    let v22: s11 = s11(v7, v2) in
    let v17: [s1] = v22.p0 in
    let v12: s6 = v9.p1 in
    var v19: s11 = v22 in
    v3[0] = v10 in
    let v15: s12 = v0[0] in
    v3[0] = v15 in
    var v24: s12 = v9 in
    let v32: s1 = v7[0] in
    v3[1] = v24 in
    let v45: [s1] = v10.p0 in
    let v34: [s0] = v2.p1 in
    let v29: s1 = v17[0] in
    let v37: s12 = v0[2] in
    let v59: s0 = v34[1] in
    v19.p0 = v7 in
    v24.p1 = v12 in
    let v66: [[Float]] = v59.p0 in
    v3[2] = v37 in
    let v38: [s1] = v19.p0 in
    v19.p1 = v2 in
    v19.p1 = v29 in
    let v76: s1 = v45[0] in
    let v54: [s1] = v10.p0 in
    v24.p0 = v38 in
    let v75: [Float] = v66[0] in
    v19.p1 = v32 in
    let v70: Float = v75[0] in
    let v55: s1 = v17[1] in
    var v144: s1 = v76 in
    v19.p1 = v144 in
    v19.p1 = v55 in
    v24.p0 = v54 in
    v70
  } in
  fun loop(i: Int, v0: [s12], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s12] = [s12([s1([[s0([[0.0], [1.0], [2.0]], [[3.0]])], [s0([[4.0], [5.0], [6.0]], [[7.0]])], [s0([[8.0], [9.0], [10.0]], [[11.0]])]], [s0([[12.0], [13.0], [14.0]], [[15.0]]), s0([[16.0], [17.0], [18.0]], [[19.0]])]), s1([[s0([[20.0], [21.0], [22.0]], [[23.0]])], [s0([[24.0], [25.0], [26.0]], [[27.0]])], [s0([[28.0], [29.0], [30.0]], [[31.0]])]], [s0([[32.0], [33.0], [34.0]], [[35.0]]), s0([[36.0], [37.0], [38.0]], [[39.0]])])], s6([40.0, 41.0], [s0([[42.0], [43.0], [44.0]], [[45.0]]), s0([[46.0], [47.0], [48.0]], [[49.0]]), s0([[50.0], [51.0], [52.0]], [[53.0]])], [[s2([s0([[54.0], [55.0], [56.0]], [[57.0]]), s0([[58.0], [59.0], [60.0]], [[61.0]])], [[s1([[s0([[62.0], [63.0], [64.0]], [[65.0]])], [s0([[66.0], [67.0], [68.0]], [[69.0]])], [s0([[70.0], [71.0], [72.0]], [[73.0]])]], [s0([[74.0], [75.0], [76.0]], [[77.0]]), s0([[78.0], [79.0], [80.0]], [[81.0]])])], [s1([[s0([[82.0], [83.0], [84.0]], [[85.0]])], [s0([[86.0], [87.0], [88.0]], [[89.0]])], [s0([[90.0], [91.0], [92.0]], [[93.0]])]], [s0([[94.0], [95.0], [96.0]], [[97.0]]), s0([[98.0], [99.0], [100.0]], [[101.0]])])]])]], [[s0([[102.0], [103.0], [104.0]], [[105.0]])], [s0([[106.0], [107.0], [108.0]], [[109.0]])]], s1([[s0([[110.0], [111.0], [112.0]], [[113.0]])], [s0([[114.0], [115.0], [116.0]], [[117.0]])], [s0([[118.0], [119.0], [120.0]], [[121.0]])]], [s0([[122.0], [123.0], [124.0]], [[125.0]]), s0([[126.0], [127.0], [128.0]], [[129.0]])]))), s12([s1([[s0([[130.0], [131.0], [132.0]], [[133.0]])], [s0([[134.0], [135.0], [136.0]], [[137.0]])], [s0([[138.0], [139.0], [140.0]], [[141.0]])]], [s0([[142.0], [143.0], [144.0]], [[145.0]]), s0([[146.0], [147.0], [148.0]], [[149.0]])]), s1([[s0([[150.0], [151.0], [152.0]], [[153.0]])], [s0([[154.0], [155.0], [156.0]], [[157.0]])], [s0([[158.0], [159.0], [160.0]], [[161.0]])]], [s0([[162.0], [163.0], [164.0]], [[165.0]]), s0([[166.0], [167.0], [168.0]], [[169.0]])])], s6([170.0, 171.0], [s0([[172.0], [173.0], [174.0]], [[175.0]]), s0([[176.0], [177.0], [178.0]], [[179.0]]), s0([[180.0], [181.0], [182.0]], [[183.0]])], [[s2([s0([[184.0], [185.0], [186.0]], [[187.0]]), s0([[188.0], [189.0], [190.0]], [[191.0]])], [[s1([[s0([[192.0], [193.0], [194.0]], [[195.0]])], [s0([[196.0], [197.0], [198.0]], [[199.0]])], [s0([[200.0], [201.0], [202.0]], [[203.0]])]], [s0([[204.0], [205.0], [206.0]], [[207.0]]), s0([[208.0], [209.0], [210.0]], [[211.0]])])], [s1([[s0([[212.0], [213.0], [214.0]], [[215.0]])], [s0([[216.0], [217.0], [218.0]], [[219.0]])], [s0([[220.0], [221.0], [222.0]], [[223.0]])]], [s0([[224.0], [225.0], [226.0]], [[227.0]]), s0([[228.0], [229.0], [230.0]], [[231.0]])])]])]], [[s0([[232.0], [233.0], [234.0]], [[235.0]])], [s0([[236.0], [237.0], [238.0]], [[239.0]])]], s1([[s0([[240.0], [241.0], [242.0]], [[243.0]])], [s0([[244.0], [245.0], [246.0]], [[247.0]])], [s0([[248.0], [249.0], [250.0]], [[251.0]])]], [s0([[252.0], [253.0], [254.0]], [[255.0]]), s0([[256.0], [257.0], [258.0]], [[259.0]])]))), s12([s1([[s0([[260.0], [261.0], [262.0]], [[263.0]])], [s0([[264.0], [265.0], [266.0]], [[267.0]])], [s0([[268.0], [269.0], [270.0]], [[271.0]])]], [s0([[272.0], [273.0], [274.0]], [[275.0]]), s0([[276.0], [277.0], [278.0]], [[279.0]])]), s1([[s0([[280.0], [281.0], [282.0]], [[283.0]])], [s0([[284.0], [285.0], [286.0]], [[287.0]])], [s0([[288.0], [289.0], [290.0]], [[291.0]])]], [s0([[292.0], [293.0], [294.0]], [[295.0]]), s0([[296.0], [297.0], [298.0]], [[299.0]])])], s6([300.0, 301.0], [s0([[302.0], [303.0], [304.0]], [[305.0]]), s0([[306.0], [307.0], [308.0]], [[309.0]]), s0([[310.0], [311.0], [312.0]], [[313.0]])], [[s2([s0([[314.0], [315.0], [316.0]], [[317.0]]), s0([[318.0], [319.0], [320.0]], [[321.0]])], [[s1([[s0([[322.0], [323.0], [324.0]], [[325.0]])], [s0([[326.0], [327.0], [328.0]], [[329.0]])], [s0([[330.0], [331.0], [332.0]], [[333.0]])]], [s0([[334.0], [335.0], [336.0]], [[337.0]]), s0([[338.0], [339.0], [340.0]], [[341.0]])])], [s1([[s0([[342.0], [343.0], [344.0]], [[345.0]])], [s0([[346.0], [347.0], [348.0]], [[349.0]])], [s0([[350.0], [351.0], [352.0]], [[353.0]])]], [s0([[354.0], [355.0], [356.0]], [[357.0]]), s0([[358.0], [359.0], [360.0]], [[361.0]])])]])]], [[s0([[362.0], [363.0], [364.0]], [[365.0]])], [s0([[366.0], [367.0], [368.0]], [[369.0]])]], s1([[s0([[370.0], [371.0], [372.0]], [[373.0]])], [s0([[374.0], [375.0], [376.0]], [[377.0]])], [s0([[378.0], [379.0], [380.0]], [[381.0]])]], [s0([[382.0], [383.0], [384.0]], [[385.0]]), s0([[386.0], [387.0], [388.0]], [[389.0]])])))] in
    let v1: Float = 390.0 in
    let initialResult: Float = 390.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()