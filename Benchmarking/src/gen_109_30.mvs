  struct s0 {
    var p0: [[Float]]
    var p1: Float
  } in
  struct s1 {
    var p0: s0
    var p1: s0
    var p2: s0
    var p3: [s0]
  } in
  struct s3 {
    var p0: s1
    var p1: [[s0]]
  } in
  struct s4 {
    var p0: [s3]
    var p1: Float
  } in
  struct s7 {
    var p0: [s4]
  } in
  struct s11 {
    var p0: [s7]
    var p1: s0
  } in
  let noinline_f0: (s7, [s11], Float) -> Float = (v0: s7, v1: [s11], v2: Float) -> Float {
    let v6: [s4] = v0.p0 in
    let v4: s4 = v6[0] in
    var v5: [s11] = v1 in
    let v13: s11 = v1[0] in
    let v8: s11 = v5[0] in
    v5[0] = v13 in
    let v10: s0 = v8.p1 in
    let v19: Float = v4.p1 in
    let v18: Float = v10.p1 in
    v5[0] = v8 in
    let v24: s4 = v6[0] in
    let v23: Float = v19 / v18 in
    let v48: Float = v24.p1 in
    let v124: Float = v19 * v48 in
    let v178: Float = v124 + v23 in
    var v118: Float = v178 in
    v118
  } in
  fun loop(i: Int, v0: s7, v1: [s11], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s7 = s7([s4([s3(s1(s0([[0.0]], 1.0), s0([[2.0]], 3.0), s0([[4.0]], 5.0), [s0([[6.0]], 7.0)]), [[s0([[8.0]], 9.0)], [s0([[10.0]], 11.0)], [s0([[12.0]], 13.0)]])], 14.0)]) in
    let v1: [s11] = [s11([s7([s4([s3(s1(s0([[15.0]], 16.0), s0([[17.0]], 18.0), s0([[19.0]], 20.0), [s0([[21.0]], 22.0)]), [[s0([[23.0]], 24.0)], [s0([[25.0]], 26.0)], [s0([[27.0]], 28.0)]])], 29.0)]), s7([s4([s3(s1(s0([[30.0]], 31.0), s0([[32.0]], 33.0), s0([[34.0]], 35.0), [s0([[36.0]], 37.0)]), [[s0([[38.0]], 39.0)], [s0([[40.0]], 41.0)], [s0([[42.0]], 43.0)]])], 44.0)]), s7([s4([s3(s1(s0([[45.0]], 46.0), s0([[47.0]], 48.0), s0([[49.0]], 50.0), [s0([[51.0]], 52.0)]), [[s0([[53.0]], 54.0)], [s0([[55.0]], 56.0)], [s0([[57.0]], 58.0)]])], 59.0)])], s0([[60.0]], 61.0))] in
    let v2: Float = 62.0 in
    let initialResult: Float = 62.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()