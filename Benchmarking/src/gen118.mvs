  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  let f31: (s0) -> s0 = (v0: s0) -> s0 {
    let v7: [[Float]] = v0.p0 in
    let v4: [Float] = v7[1] in
    var v8: s0 = v0 in
    v8 = v0 in
    var v15: [[Float]] = v7 in
    v15[1] = v4 in
    v8.p0 = v7 in
    v8.p0 = v15 in
    let v24: [[Float]] = v0.p1 in
    v8.p0 = v15 in
    let v29: [[Float]] = v0.p0 in
    let v31: [[Float]] = v0.p1 in
    let v65: [[Float]] = v0.p1 in
    var v46: [[Float]] = v7 in
    v8.p1 = v24 in
    v8.p0 = v7 in
    v8.p0 = v46 in
    v8.p0 = v29 in
    v8.p0 = v15 in
    let v56: [Float] = v31[0] in
    v15[1] = v56 in
    v8.p1 = v65 in
    var v36: s0 = v8 in
    v36
  } in
  let f23: (s1) -> s1 = (v0: s1) -> s1 {
    let v5: [s1] = [v0, v0] in
    let v32: s1 = v5[0] in
    v32
  } in
  let noinline_f0: ([[s1]], Float) -> Float = (v0: [[s1]], v1: Float) -> Float {
    var v6: [[s1]] = v0 in
    var v4: [[s1]] = v0 in
    var v9: Float = v1 in
    var v7: Float = v9 in
    let v3: [s1] = v6[2] in
    let v8: s1 = v3[0] in
    v4[0] = v3 in
    let v2: s1 = f23(v8) in
    let v5: s0 = v2.p0 in
    v7 = v1 in
    let v14: s1 = f23(v2) in
    let v18: [s1] = v0[1] in
    var v16: [[s1]] = v0 in
    let v10: s0 = v14.p0 in
    let v12: [s1] = v0[2] in
    v16[0] = v18 in
    v4[0] = v12 in
    let v13: Float = v1 * v7 in
    let v26: [[Float]] = v5.p0 in
    let v21: s0 = f31(v5) in
    let v17: [s1] = v0[0] in
    let v55: [[Float]] = v21.p1 in
    var v25: [[s1]] = v16 in
    v16 = v25 in
    let v31: [Float] = v55[0] in
    let v27: s1 = f23(v2) in
    var v41: [Float] = v31 in
    v25[1] = v17 in
    let v32: [Float] = v26[1] in
    v6[1] = v3 in
    var v38: [[Float]] = v55 in
    var v28: [[Float]] = v55 in
    let v61: [Float] = v26[0] in
    v41 = v32 in
    let v40: [s1] = v4[1] in
    v4[2] = v18 in
    var v86: s1 = v2 in
    v28[0] = v32 in
    let v52: s1 = v12[0] in
    let v36: s0 = f31(v10) in
    var v59: [[s1]] = v25 in
    v86.p0 = v36 in
    v86 = v27 in
    let v54: s0 = s0(v26, v38) in
    v16[1] = v40 in
    let v76: [Float] = v28[0] in
    let v158: Float = v76[0] in
    v86.p0 = v54 in
    var v124: [s1] = v12 in
    let v53: Float = v158 * v13 in
    let v133: Float = v61[0] in
    v41[0] = v13 in
    let v119: s0 = v52.p0 in
    v4[0] = v124 in
    var v134: [s1] = v18 in
    v59[0] = v17 in
    v41[0] = v53 in
    v6[1] = v17 in
    let v189: Float = v41[0] in
    let v194: s1 = f23(v86) in
    v86.p0 = v119 in
    v41[0] = v133 in
    let v163: [s1] = v59[0] in
    let v82: [s1] = v25[2] in
    v124[0] = v14 in
    v41[0] = v9 in
    v16[2] = v82 in
    v6[0] = v163 in
    v25[1] = v134 in
    let v465: s1 = f23(v194) in
    v134[0] = v465 in
    v189
  } in
  fun loop(i: Int, v0: [[s1]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s1]] = [[s1(s0([[0.0], [1.0]], [[2.0]]), s0([[3.0], [4.0]], [[5.0]]))], [s1(s0([[6.0], [7.0]], [[8.0]]), s0([[9.0], [10.0]], [[11.0]]))], [s1(s0([[12.0], [13.0]], [[14.0]]), s0([[15.0], [16.0]], [[17.0]]))]] in
    let v1: Float = 18.0 in
    let initialResult: Float = 18.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()