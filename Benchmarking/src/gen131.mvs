  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  let noinline_f0: ([s1], Float) -> Float = (v0: [s1], v1: Float) -> Float {
    let v7: s1 = v0[0] in
    let v2: s1 = v0[0] in
    let v5: s1 = v0[0] in
    let v4: [s0] = v2.p1 in
    var v6: s1 = v7 in
    let v10: [s0] = v7.p0 in
    let v9: [s0] = v7.p0 in
    var v8: s1 = v6 in
    v6.p0 = v9 in
    v8.p1 = v4 in
    let v18: [s0] = v8.p1 in
    v6.p0 = v9 in
    v8 = v5 in
    var v17: [s0] = v18 in
    let v14: s0 = v18[0] in
    v17[0] = v14 in
    let v11: [s0] = v7.p0 in
    let v24: s1 = v0[0] in
    let v28: s0 = v9[2] in
    v8.p0 = v10 in
    let v16: [s0] = v24.p0 in
    v6.p1 = v4 in
    let v22: s1 = s1(v11, v18) in
    v6.p0 = v16 in
    let v42: [[Float]] = v14.p1 in
    let v38: [Float] = v42[0] in
    let v48: [s0] = v22.p0 in
    let v47: s0 = v16[0] in
    v6.p1 = v17 in
    v8.p0 = v48 in
    var v37: [s0] = v18 in
    v8.p1 = v37 in
    v17[0] = v28 in
    let v27: Float = v38[0] in
    v6.p0 = v48 in
    v6.p0 = v48 in
    v37[0] = v47 in
    v27
  } in
  fun loop(i: Int, v0: [s1], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1([s0([[0.0], [1.0]], [[2.0], [3.0]]), s0([[4.0], [5.0]], [[6.0], [7.0]]), s0([[8.0], [9.0]], [[10.0], [11.0]])], [s0([[12.0], [13.0]], [[14.0], [15.0]])]), s1([s0([[16.0], [17.0]], [[18.0], [19.0]]), s0([[20.0], [21.0]], [[22.0], [23.0]]), s0([[24.0], [25.0]], [[26.0], [27.0]])], [s0([[28.0], [29.0]], [[30.0], [31.0]])])] in
    let v1: Float = 32.0 in
    let initialResult: Float = 32.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()