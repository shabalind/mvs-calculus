  let noinline_f0: ([[Float]], Float) -> Float = (v0: [[Float]], v1: Float) -> Float {
    var v3: [[Float]] = v0 in
    var v4: [[Float]] = v3 in
    var v6: [[Float]] = v3 in
    let v13: [Float] = v4[1] in
    v3[2] = v13 in
    var v14: [Float] = v13 in
    v6[2] = v13 in
    let v11: [[[Float]]] = [v3] in
    v6[2] = v14 in
    let v16: [[Float]] = v11[0] in
    var v24: [[Float]] = v6 in
    let v19: [Float] = v16[0] in
    var v26: Float = v1 in
    v4[2] = v19 in
    let v81: [Float] = v24[1] in
    v3[2] = v19 in
    v6[2] = v81 in
    v3[2] = v13 in
    let v85: Float = v81[0] in
    v14[0] = v26 in
    v85
  } in
  fun loop(i: Int, v0: [[Float]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0], [1.0], [2.0]] in
    let v1: Float = 3.0 in
    let initialResult: Float = 3.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()