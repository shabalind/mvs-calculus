  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[Float]]
  } in
  struct s6 {
    var p0: [[s0]]
    var p1: s1
  } in
  let noinline_f0: ([[s6]], Float) -> Float = (v0: [[s6]], v1: Float) -> Float {
    let v7: [s6] = v0[1] in
    var v3: Float = v1 in
    let v2: s6 = v7[0] in
    let v5: s1 = v2.p1 in
    let v10: s1 = v2.p1 in
    var v39: Float = v3 in
    let v45: [[Float]] = v10.p0 in
    let v59: [[Float]] = v5.p0 in
    var v38: [[Float]] = v59 in
    v38 = v45 in
    var v63: Float = v1 in
    let v79: [Float] = v38[0] in
    var v87: [Float] = v79 in
    let v123: Float = v87[0] in
    v38[0] = v79 in
    v87[0] = v63 in
    v63 = v39 in
    v123
  } in
  fun loop(i: Int, v0: [[s6]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s6]] = [[s6([[s0([[0.0]], [[1.0], [2.0]])], [s0([[3.0]], [[4.0], [5.0]])], [s0([[6.0]], [[7.0], [8.0]])]], s1([[9.0]]))], [s6([[s0([[10.0]], [[11.0], [12.0]])], [s0([[13.0]], [[14.0], [15.0]])], [s0([[16.0]], [[17.0], [18.0]])]], s1([[19.0]]))]] in
    let v1: Float = 20.0 in
    let initialResult: Float = 20.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()