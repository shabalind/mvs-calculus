  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
    var p3: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    let v3: [s0] = v0.p1 in
    var v7: Float = v1 in
    var v2: [s0] = v3 in
    let v4: s0 = v2[1] in
    let v12: s0 = v2[0] in
    let v9: [[Float]] = v4.p0 in
    let v13: [Float] = v9[0] in
    v7 = v1 in
    let v27: Float = v13[0] in
    v2[0] = v12 in
    var v42: Float = v7 in
    v42 = v27 in
    var v51: Float = v27 in
    var v104: Float = v42 in
    v104 = v51 in
    v42 = v27 in
    v104
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([s0([[0.0]], [[1.0], [2.0], [3.0]], [[4.0], [5.0], [6.0]], [[7.0], [8.0], [9.0]]), s0([[10.0]], [[11.0], [12.0], [13.0]], [[14.0], [15.0], [16.0]], [[17.0], [18.0], [19.0]])], [s0([[20.0]], [[21.0], [22.0], [23.0]], [[24.0], [25.0], [26.0]], [[27.0], [28.0], [29.0]]), s0([[30.0]], [[31.0], [32.0], [33.0]], [[34.0], [35.0], [36.0]], [[37.0], [38.0], [39.0]])]) in
    let v1: Float = 40.0 in
    let initialResult: Float = 40.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()