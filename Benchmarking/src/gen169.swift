  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: [s1]
    var p1: s1
  }
  struct s3 {
    var p0: s1
    var p1: s1
  }
  func f58(_ v0: [s1], _ v1: s1) -> [s1] {
    return v0
  }
  @inline(never)
  func f0(_ v0: s2, _ v1: [s2], _ v2: s3, _ v3: Double) -> Double {
    let v7: s2 = v1[1]
    let v20: [s1] = v7.p0
    let v14: s1 = v2.p1
    let v27: [s1] = f58(v20, v14)
    let v26: s1 = v27[1]
    let v23: s0 = v26.p0
    let v95: [[Double]] = v23.p0
    let v71: [Double] = v95[0]
    var v47: [Double] = v71
    let v42: Double = v47[0]
    var v63: Double = v42
    return v63
  }
  func benchmark() {
    let v0: s2 = s2(p0: [s1(p0: s0(p0: [[0.0]], p1: [[1.0], [2.0]], p2: [[3.0], [4.0]]), p1: [s0(p0: [[5.0]], p1: [[6.0], [7.0]], p2: [[8.0], [9.0]])]), s1(p0: s0(p0: [[10.0]], p1: [[11.0], [12.0]], p2: [[13.0], [14.0]]), p1: [s0(p0: [[15.0]], p1: [[16.0], [17.0]], p2: [[18.0], [19.0]])]), s1(p0: s0(p0: [[20.0]], p1: [[21.0], [22.0]], p2: [[23.0], [24.0]]), p1: [s0(p0: [[25.0]], p1: [[26.0], [27.0]], p2: [[28.0], [29.0]])])], p1: s1(p0: s0(p0: [[30.0]], p1: [[31.0], [32.0]], p2: [[33.0], [34.0]]), p1: [s0(p0: [[35.0]], p1: [[36.0], [37.0]], p2: [[38.0], [39.0]])]))
    let v1: [s2] = [s2(p0: [s1(p0: s0(p0: [[40.0]], p1: [[41.0], [42.0]], p2: [[43.0], [44.0]]), p1: [s0(p0: [[45.0]], p1: [[46.0], [47.0]], p2: [[48.0], [49.0]])]), s1(p0: s0(p0: [[50.0]], p1: [[51.0], [52.0]], p2: [[53.0], [54.0]]), p1: [s0(p0: [[55.0]], p1: [[56.0], [57.0]], p2: [[58.0], [59.0]])]), s1(p0: s0(p0: [[60.0]], p1: [[61.0], [62.0]], p2: [[63.0], [64.0]]), p1: [s0(p0: [[65.0]], p1: [[66.0], [67.0]], p2: [[68.0], [69.0]])])], p1: s1(p0: s0(p0: [[70.0]], p1: [[71.0], [72.0]], p2: [[73.0], [74.0]]), p1: [s0(p0: [[75.0]], p1: [[76.0], [77.0]], p2: [[78.0], [79.0]])])), s2(p0: [s1(p0: s0(p0: [[80.0]], p1: [[81.0], [82.0]], p2: [[83.0], [84.0]]), p1: [s0(p0: [[85.0]], p1: [[86.0], [87.0]], p2: [[88.0], [89.0]])]), s1(p0: s0(p0: [[90.0]], p1: [[91.0], [92.0]], p2: [[93.0], [94.0]]), p1: [s0(p0: [[95.0]], p1: [[96.0], [97.0]], p2: [[98.0], [99.0]])]), s1(p0: s0(p0: [[100.0]], p1: [[101.0], [102.0]], p2: [[103.0], [104.0]]), p1: [s0(p0: [[105.0]], p1: [[106.0], [107.0]], p2: [[108.0], [109.0]])])], p1: s1(p0: s0(p0: [[110.0]], p1: [[111.0], [112.0]], p2: [[113.0], [114.0]]), p1: [s0(p0: [[115.0]], p1: [[116.0], [117.0]], p2: [[118.0], [119.0]])])), s2(p0: [s1(p0: s0(p0: [[120.0]], p1: [[121.0], [122.0]], p2: [[123.0], [124.0]]), p1: [s0(p0: [[125.0]], p1: [[126.0], [127.0]], p2: [[128.0], [129.0]])]), s1(p0: s0(p0: [[130.0]], p1: [[131.0], [132.0]], p2: [[133.0], [134.0]]), p1: [s0(p0: [[135.0]], p1: [[136.0], [137.0]], p2: [[138.0], [139.0]])]), s1(p0: s0(p0: [[140.0]], p1: [[141.0], [142.0]], p2: [[143.0], [144.0]]), p1: [s0(p0: [[145.0]], p1: [[146.0], [147.0]], p2: [[148.0], [149.0]])])], p1: s1(p0: s0(p0: [[150.0]], p1: [[151.0], [152.0]], p2: [[153.0], [154.0]]), p1: [s0(p0: [[155.0]], p1: [[156.0], [157.0]], p2: [[158.0], [159.0]])]))]
    let v2: s3 = s3(p0: s1(p0: s0(p0: [[160.0]], p1: [[161.0], [162.0]], p2: [[163.0], [164.0]]), p1: [s0(p0: [[165.0]], p1: [[166.0], [167.0]], p2: [[168.0], [169.0]])]), p1: s1(p0: s0(p0: [[170.0]], p1: [[171.0], [172.0]], p2: [[173.0], [174.0]]), p1: [s0(p0: [[175.0]], p1: [[176.0], [177.0]], p2: [[178.0], [179.0]])]))
    let v3: Double = 180.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 180.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
