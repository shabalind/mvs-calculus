  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s2 {
    var p0: s0
    var p1: [s0]
  } in
  let f29: (Float) -> Float = (v0: Float) -> Float {
    var v5: Float = v0 in
    var v3: Float = v0 in
    var v8: Float = v3 in
    var v2: Float = v3 in
    let v7: [Float] = [v5, v5, v5] in
    let v4: Float = v7[0] in
    let v6: Float = v7[1] in
    var v12: Float = v8 in
    let v10: Float = v7[2] in
    let v13: Float = v7[2] in
    var v18: [Float] = v7 in
    v2 = v4 in
    v18[2] = v13 in
    var v15: [Float] = v7 in
    var v28: [Float] = v15 in
    v8 = v13 in
    var v16: [Float] = v28 in
    v15[1] = v6 in
    var v20: [Float] = v28 in
    v18[0] = v12 in
    let v67: Float = v15[2] in
    let v23: [[Float]] = [v28, v16, v28, v18, v18, v28, v15] in
    v28[0] = v0 in
    v15[1] = v67 in
    var v40: Float = v2 in
    v18[0] = v2 in
    var v29: Float = v0 in
    let v55: Float = v20[2] in
    let v33: [Float] = v23[6] in
    v28[1] = v40 in
    var v26: [[Float]] = v23 in
    v15[1] = v4 in
    let v25: Float = v13 * v29 in
    v18[1] = v25 in
    var v86: [[Float]] = v26 in
    v28[0] = v55 in
    v20[2] = v10 in
    v86[1] = v33 in
    let v101: [Float] = v26[4] in
    let v99: Float = v101[1] in
    let v80: Float = v7[1] in
    var v92: [Float] = v20 in
    var v47: Float = v80 in
    var v93: Float = v99 in
    let v144: [Float] = v86[0] in
    var v74: [Float] = v144 in
    v74[2] = v10 in
    let v168: Float = v16[0] in
    let v88: Float = v74[1] in
    let v191: [Float] = [v47, v80] in
    v18[2] = v168 in
    v86[1] = v92 in
    v20[0] = v93 in
    var v272: [Float] = v191 in
    let v94: Float = v272[0] in
    v74[0] = v94 in
    v88
  } in
  let noinline_f0: (s0, s2, [s1], Float) -> Float = (v0: s0, v1: s2, v2: [s1], v3: Float) -> Float {
    var v7: Float = v3 in
    let v14: Float = f29(v7) in
    v7 = v3 in
    let v29: Float = v7 - v14 in
    v29
  } in
  fun loop(i: Int, v0: s0, v1: s2, v2: [s1], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0], [2.0]], [[3.0]], [[4.0], [5.0]]) in
    let v1: s2 = s2(s0([[6.0], [7.0], [8.0]], [[9.0]], [[10.0], [11.0]]), [s0([[12.0], [13.0], [14.0]], [[15.0]], [[16.0], [17.0]])]) in
    let v2: [s1] = [s1([s0([[18.0], [19.0], [20.0]], [[21.0]], [[22.0], [23.0]])], s0([[24.0], [25.0], [26.0]], [[27.0]], [[28.0], [29.0]]))] in
    let v3: Float = 30.0 in
    let initialResult: Float = 30.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()