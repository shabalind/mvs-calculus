  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  } in
  struct s2 {
    var p0: s1
    var p1: [[s1]]
  } in
  struct s3 {
    var p0: [[s0]]
    var p1: [s0]
  } in
  struct s4 {
    var p0: s2
    var p1: [s3]
  } in
  struct s5 {
    var p0: [[s2]]
    var p1: s1
  } in
  struct s6 {
    var p0: s4
    var p1: [Float]
  } in
  let f3: (s1, Float, s4) -> Float = (v0: s1, v1: Float, v2: s4) -> Float {
    let v7: s0 = v0.p1 in
    let v26: [[Float]] = v7.p0 in
    let v28: [Float] = v26[0] in
    let v58: Float = v28[0] in
    let v96: Float = v58 / v58 in
    v96
  } in
  let f2: (s1) -> s1 = (v0: s1) -> s1 {
    var v3: s1 = v0 in
    v3
  } in
  let noinline_f0: ([[s2]], s6, [s5], [s3], [s0], s0, [s6], Float) -> Float = (v0: [[s2]], v1: s6, v2: [s5], v3: [s3], v4: [s0], v5: s0, v6: [s6], v7: Float) -> Float {
    let v21: s4 = v1.p0 in
    let v60: s2 = v21.p0 in
    let v37: s1 = v60.p0 in
    let v103: s1 = f2(v37) in
    let v33: Float = f3(v37, v7, v21) in
    let v41: Float = f3(v103, v7, v21) in
    let v74: Float = v33 + v33 in
    let v112: Float = v74 + v41 in
    v112
  } in
  fun loop(i: Int, v0: [[s2]], v1: s6, v2: [s5], v3: [s3], v4: [s0], v5: s0, v6: [s6], v7: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4, v5, v6, v7) in
      loop(i + 1, v0, v1, v2, v3, v4, v5, v6, v7, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s2]] = [[s2(s1([[s0([[0.0]], [[1.0], [2.0], [3.0]])]], s0([[4.0]], [[5.0], [6.0], [7.0]])), [[s1([[s0([[8.0]], [[9.0], [10.0], [11.0]])]], s0([[12.0]], [[13.0], [14.0], [15.0]]))]])], [s2(s1([[s0([[16.0]], [[17.0], [18.0], [19.0]])]], s0([[20.0]], [[21.0], [22.0], [23.0]])), [[s1([[s0([[24.0]], [[25.0], [26.0], [27.0]])]], s0([[28.0]], [[29.0], [30.0], [31.0]]))]])], [s2(s1([[s0([[32.0]], [[33.0], [34.0], [35.0]])]], s0([[36.0]], [[37.0], [38.0], [39.0]])), [[s1([[s0([[40.0]], [[41.0], [42.0], [43.0]])]], s0([[44.0]], [[45.0], [46.0], [47.0]]))]])]] in
    let v1: s6 = s6(s4(s2(s1([[s0([[48.0]], [[49.0], [50.0], [51.0]])]], s0([[52.0]], [[53.0], [54.0], [55.0]])), [[s1([[s0([[56.0]], [[57.0], [58.0], [59.0]])]], s0([[60.0]], [[61.0], [62.0], [63.0]]))]]), [s3([[s0([[64.0]], [[65.0], [66.0], [67.0]])]], [s0([[68.0]], [[69.0], [70.0], [71.0]])]), s3([[s0([[72.0]], [[73.0], [74.0], [75.0]])]], [s0([[76.0]], [[77.0], [78.0], [79.0]])])]), [80.0]) in
    let v2: [s5] = [s5([[s2(s1([[s0([[81.0]], [[82.0], [83.0], [84.0]])]], s0([[85.0]], [[86.0], [87.0], [88.0]])), [[s1([[s0([[89.0]], [[90.0], [91.0], [92.0]])]], s0([[93.0]], [[94.0], [95.0], [96.0]]))]])]], s1([[s0([[97.0]], [[98.0], [99.0], [100.0]])]], s0([[101.0]], [[102.0], [103.0], [104.0]])))] in
    let v3: [s3] = [s3([[s0([[105.0]], [[106.0], [107.0], [108.0]])]], [s0([[109.0]], [[110.0], [111.0], [112.0]])]), s3([[s0([[113.0]], [[114.0], [115.0], [116.0]])]], [s0([[117.0]], [[118.0], [119.0], [120.0]])])] in
    let v4: [s0] = [s0([[121.0]], [[122.0], [123.0], [124.0]])] in
    let v5: s0 = s0([[125.0]], [[126.0], [127.0], [128.0]]) in
    let v6: [s6] = [s6(s4(s2(s1([[s0([[129.0]], [[130.0], [131.0], [132.0]])]], s0([[133.0]], [[134.0], [135.0], [136.0]])), [[s1([[s0([[137.0]], [[138.0], [139.0], [140.0]])]], s0([[141.0]], [[142.0], [143.0], [144.0]]))]]), [s3([[s0([[145.0]], [[146.0], [147.0], [148.0]])]], [s0([[149.0]], [[150.0], [151.0], [152.0]])]), s3([[s0([[153.0]], [[154.0], [155.0], [156.0]])]], [s0([[157.0]], [[158.0], [159.0], [160.0]])])]), [161.0]), s6(s4(s2(s1([[s0([[162.0]], [[163.0], [164.0], [165.0]])]], s0([[166.0]], [[167.0], [168.0], [169.0]])), [[s1([[s0([[170.0]], [[171.0], [172.0], [173.0]])]], s0([[174.0]], [[175.0], [176.0], [177.0]]))]]), [s3([[s0([[178.0]], [[179.0], [180.0], [181.0]])]], [s0([[182.0]], [[183.0], [184.0], [185.0]])]), s3([[s0([[186.0]], [[187.0], [188.0], [189.0]])]], [s0([[190.0]], [[191.0], [192.0], [193.0]])])]), [194.0])] in
    let v7: Float = 195.0 in
    let initialResult: Float = 195.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, v5, v6, v7, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()