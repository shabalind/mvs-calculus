  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s4 {
    var p0: [[s0]]
    var p1: [s0]
  } in
  struct s8 {
    var p0: s0
    var p1: s4
  } in
  let f19: (s0, s8) -> s8 = (v0: s0, v1: s8) -> s8 {
    var v6: s8 = v1 in
    v6
  } in
  let noinline_f0: (s8, Float) -> Float = (v0: s8, v1: Float) -> Float {
    var v5: s8 = v0 in
    let v3: s0 = v5.p0 in
    let v6: s8 = f19(v3, v5) in
    v5.p0 = v3 in
    v5 = v0 in
    v5.p0 = v3 in
    let v4: s0 = v6.p0 in
    var v13: s0 = v4 in
    let v11: [[Float]] = v3.p1 in
    let v9: s4 = v0.p1 in
    v13.p1 = v11 in
    var v2: [[Float]] = v11 in
    let v7: [Float] = v2[0] in
    let v20: s8 = f19(v13, v6) in
    var v8: [Float] = v7 in
    let v24: [[Float]] = v3.p0 in
    v8 = v7 in
    v5.p0 = v3 in
    let v23: s8 = f19(v3, v20) in
    let v36: [[Float]] = v4.p1 in
    let v26: Float = v7[0] in
    v2[0] = v7 in
    let v22: Float = v26 / v26 in
    let v35: s0 = s0(v24, v2) in
    let v48: [[Float]] = v13.p0 in
    var v30: [Float] = v8 in
    v2[0] = v7 in
    let v56: [[Float]] = v35.p0 in
    let v37: [Float] = v56[1] in
    v2[0] = v37 in
    v8[0] = v26 in
    v8[0] = v22 in
    let v33: Float = v8[0] in
    v30[0] = v26 in
    v13 = v35 in
    v5.p1 = v9 in
    let v109: s0 = v23.p0 in
    v5.p0 = v109 in
    v2[0] = v30 in
    v30 = v8 in
    v13.p1 = v36 in
    let v92: s0 = s0(v48, v36) in
    v13.p0 = v56 in
    v5.p0 = v92 in
    v5.p1 = v9 in
    v33
  } in
  fun loop(i: Int, v0: s8, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s8 = s8(s0([[0.0], [1.0], [2.0]], [[3.0]]), s4([[s0([[4.0], [5.0], [6.0]], [[7.0]])]], [s0([[8.0], [9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0], [14.0]], [[15.0]])])) in
    let v1: Float = 16.0 in
    let initialResult: Float = 16.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()