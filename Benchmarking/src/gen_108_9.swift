  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
  }
  struct s2 {
    var p0: s1
    var p1: s0
  }
  struct s3 {
    var p0: [s2]
    var p1: [s2]
  }
  struct s4 {
    var p0: [s2]
    var p1: [s1]
  }
  struct s5 {
    var p0: [s1]
    var p1: s4
  }
  struct s6 {
    var p0: [s2]
    var p1: [s0]
  }
  struct s7 {
    var p0: [[s3]]
    var p1: s5
  }
  @inline(never)
  func f0(_ v0: Double, _ v1: [[s0]], _ v2: s3, _ v3: [s7], _ v4: [[s1]], _ v5: [s7], _ v6: s6) -> Double {
    let v21: [s0] = v6.p1
    let v47: Double = v0 - v0
    let v25: s0 = v21[0]
    var v61: s0 = v25
    v61 = v25
    var v53: Double = v47
    let v60: [[Double]] = v61.p1
    var v63: [[Double]] = v60
    let v85: Double = v47 * v53
    let v65: [Double] = v63[0]
    let v132: Double = v65[0]
    let v118: Double = v85 + v132
    return v118
  }
  func benchmark() {
    let v0: Double = 0.0
    let v1: [[s0]] = [[s0(p0: [[1.0], [2.0], [3.0]], p1: [[4.0], [5.0], [6.0]])]]
    let v2: s3 = s3(p0: [s2(p0: s1(p0: s0(p0: [[7.0], [8.0], [9.0]], p1: [[10.0], [11.0], [12.0]])), p1: s0(p0: [[13.0], [14.0], [15.0]], p1: [[16.0], [17.0], [18.0]]))], p1: [s2(p0: s1(p0: s0(p0: [[19.0], [20.0], [21.0]], p1: [[22.0], [23.0], [24.0]])), p1: s0(p0: [[25.0], [26.0], [27.0]], p1: [[28.0], [29.0], [30.0]])), s2(p0: s1(p0: s0(p0: [[31.0], [32.0], [33.0]], p1: [[34.0], [35.0], [36.0]])), p1: s0(p0: [[37.0], [38.0], [39.0]], p1: [[40.0], [41.0], [42.0]]))])
    let v3: [s7] = [s7(p0: [[s3(p0: [s2(p0: s1(p0: s0(p0: [[43.0], [44.0], [45.0]], p1: [[46.0], [47.0], [48.0]])), p1: s0(p0: [[49.0], [50.0], [51.0]], p1: [[52.0], [53.0], [54.0]]))], p1: [s2(p0: s1(p0: s0(p0: [[55.0], [56.0], [57.0]], p1: [[58.0], [59.0], [60.0]])), p1: s0(p0: [[61.0], [62.0], [63.0]], p1: [[64.0], [65.0], [66.0]])), s2(p0: s1(p0: s0(p0: [[67.0], [68.0], [69.0]], p1: [[70.0], [71.0], [72.0]])), p1: s0(p0: [[73.0], [74.0], [75.0]], p1: [[76.0], [77.0], [78.0]]))])]], p1: s5(p0: [s1(p0: s0(p0: [[79.0], [80.0], [81.0]], p1: [[82.0], [83.0], [84.0]])), s1(p0: s0(p0: [[85.0], [86.0], [87.0]], p1: [[88.0], [89.0], [90.0]]))], p1: s4(p0: [s2(p0: s1(p0: s0(p0: [[91.0], [92.0], [93.0]], p1: [[94.0], [95.0], [96.0]])), p1: s0(p0: [[97.0], [98.0], [99.0]], p1: [[100.0], [101.0], [102.0]]))], p1: [s1(p0: s0(p0: [[103.0], [104.0], [105.0]], p1: [[106.0], [107.0], [108.0]])), s1(p0: s0(p0: [[109.0], [110.0], [111.0]], p1: [[112.0], [113.0], [114.0]]))])))]
    let v4: [[s1]] = [[s1(p0: s0(p0: [[115.0], [116.0], [117.0]], p1: [[118.0], [119.0], [120.0]]))], [s1(p0: s0(p0: [[121.0], [122.0], [123.0]], p1: [[124.0], [125.0], [126.0]]))], [s1(p0: s0(p0: [[127.0], [128.0], [129.0]], p1: [[130.0], [131.0], [132.0]]))]]
    let v5: [s7] = [s7(p0: [[s3(p0: [s2(p0: s1(p0: s0(p0: [[133.0], [134.0], [135.0]], p1: [[136.0], [137.0], [138.0]])), p1: s0(p0: [[139.0], [140.0], [141.0]], p1: [[142.0], [143.0], [144.0]]))], p1: [s2(p0: s1(p0: s0(p0: [[145.0], [146.0], [147.0]], p1: [[148.0], [149.0], [150.0]])), p1: s0(p0: [[151.0], [152.0], [153.0]], p1: [[154.0], [155.0], [156.0]])), s2(p0: s1(p0: s0(p0: [[157.0], [158.0], [159.0]], p1: [[160.0], [161.0], [162.0]])), p1: s0(p0: [[163.0], [164.0], [165.0]], p1: [[166.0], [167.0], [168.0]]))])]], p1: s5(p0: [s1(p0: s0(p0: [[169.0], [170.0], [171.0]], p1: [[172.0], [173.0], [174.0]])), s1(p0: s0(p0: [[175.0], [176.0], [177.0]], p1: [[178.0], [179.0], [180.0]]))], p1: s4(p0: [s2(p0: s1(p0: s0(p0: [[181.0], [182.0], [183.0]], p1: [[184.0], [185.0], [186.0]])), p1: s0(p0: [[187.0], [188.0], [189.0]], p1: [[190.0], [191.0], [192.0]]))], p1: [s1(p0: s0(p0: [[193.0], [194.0], [195.0]], p1: [[196.0], [197.0], [198.0]])), s1(p0: s0(p0: [[199.0], [200.0], [201.0]], p1: [[202.0], [203.0], [204.0]]))]))), s7(p0: [[s3(p0: [s2(p0: s1(p0: s0(p0: [[205.0], [206.0], [207.0]], p1: [[208.0], [209.0], [210.0]])), p1: s0(p0: [[211.0], [212.0], [213.0]], p1: [[214.0], [215.0], [216.0]]))], p1: [s2(p0: s1(p0: s0(p0: [[217.0], [218.0], [219.0]], p1: [[220.0], [221.0], [222.0]])), p1: s0(p0: [[223.0], [224.0], [225.0]], p1: [[226.0], [227.0], [228.0]])), s2(p0: s1(p0: s0(p0: [[229.0], [230.0], [231.0]], p1: [[232.0], [233.0], [234.0]])), p1: s0(p0: [[235.0], [236.0], [237.0]], p1: [[238.0], [239.0], [240.0]]))])]], p1: s5(p0: [s1(p0: s0(p0: [[241.0], [242.0], [243.0]], p1: [[244.0], [245.0], [246.0]])), s1(p0: s0(p0: [[247.0], [248.0], [249.0]], p1: [[250.0], [251.0], [252.0]]))], p1: s4(p0: [s2(p0: s1(p0: s0(p0: [[253.0], [254.0], [255.0]], p1: [[256.0], [257.0], [258.0]])), p1: s0(p0: [[259.0], [260.0], [261.0]], p1: [[262.0], [263.0], [264.0]]))], p1: [s1(p0: s0(p0: [[265.0], [266.0], [267.0]], p1: [[268.0], [269.0], [270.0]])), s1(p0: s0(p0: [[271.0], [272.0], [273.0]], p1: [[274.0], [275.0], [276.0]]))]))), s7(p0: [[s3(p0: [s2(p0: s1(p0: s0(p0: [[277.0], [278.0], [279.0]], p1: [[280.0], [281.0], [282.0]])), p1: s0(p0: [[283.0], [284.0], [285.0]], p1: [[286.0], [287.0], [288.0]]))], p1: [s2(p0: s1(p0: s0(p0: [[289.0], [290.0], [291.0]], p1: [[292.0], [293.0], [294.0]])), p1: s0(p0: [[295.0], [296.0], [297.0]], p1: [[298.0], [299.0], [300.0]])), s2(p0: s1(p0: s0(p0: [[301.0], [302.0], [303.0]], p1: [[304.0], [305.0], [306.0]])), p1: s0(p0: [[307.0], [308.0], [309.0]], p1: [[310.0], [311.0], [312.0]]))])]], p1: s5(p0: [s1(p0: s0(p0: [[313.0], [314.0], [315.0]], p1: [[316.0], [317.0], [318.0]])), s1(p0: s0(p0: [[319.0], [320.0], [321.0]], p1: [[322.0], [323.0], [324.0]]))], p1: s4(p0: [s2(p0: s1(p0: s0(p0: [[325.0], [326.0], [327.0]], p1: [[328.0], [329.0], [330.0]])), p1: s0(p0: [[331.0], [332.0], [333.0]], p1: [[334.0], [335.0], [336.0]]))], p1: [s1(p0: s0(p0: [[337.0], [338.0], [339.0]], p1: [[340.0], [341.0], [342.0]])), s1(p0: s0(p0: [[343.0], [344.0], [345.0]], p1: [[346.0], [347.0], [348.0]]))])))]
    let v6: s6 = s6(p0: [s2(p0: s1(p0: s0(p0: [[349.0], [350.0], [351.0]], p1: [[352.0], [353.0], [354.0]])), p1: s0(p0: [[355.0], [356.0], [357.0]], p1: [[358.0], [359.0], [360.0]])), s2(p0: s1(p0: s0(p0: [[361.0], [362.0], [363.0]], p1: [[364.0], [365.0], [366.0]])), p1: s0(p0: [[367.0], [368.0], [369.0]], p1: [[370.0], [371.0], [372.0]]))], p1: [s0(p0: [[373.0], [374.0], [375.0]], p1: [[376.0], [377.0], [378.0]]), s0(p0: [[379.0], [380.0], [381.0]], p1: [[382.0], [383.0], [384.0]]), s0(p0: [[385.0], [386.0], [387.0]], p1: [[388.0], [389.0], [390.0]])])
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = StructValue(Name(str='s6', ty=None), [[StructValue(Name(str='s2', ty=None), [StructValue(Name(str='s1', ty=None), [StructValue(Name(str='s0', ty=None), [[[349.0], [350.0], [351.0]], [[352.0], [353.0], [354.0]]])]), StructValue(Name(str='s0', ty=None), [[[355.0], [356.0], [357.0]], [[358.0], [359.0], [360.0]]])]), StructValue(Name(str='s2', ty=None), [StructValue(Name(str='s1', ty=None), [StructValue(Name(str='s0', ty=None), [[[361.0], [362.0], [363.0]], [[364.0], [365.0], [366.0]]])]), StructValue(Name(str='s0', ty=None), [[[367.0], [368.0], [369.0]], [[370.0], [371.0], [372.0]]])])], [StructValue(Name(str='s0', ty=None), [[[373.0], [374.0], [375.0]], [[376.0], [377.0], [378.0]]]), StructValue(Name(str='s0', ty=None), [[[379.0], [380.0], [381.0]], [[382.0], [383.0], [384.0]]]), StructValue(Name(str='s0', ty=None), [[[385.0], [386.0], [387.0]], [[388.0], [389.0], [390.0]]])]])
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4, v5, v6)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
