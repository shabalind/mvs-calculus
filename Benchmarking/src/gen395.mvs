  struct s0 {
    var p0: Float
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: [s1]
  } in
  struct s6 {
    var p0: [[s1]]
    var p1: [s2]
  } in
  let f25: (Float) -> Float = (v0: Float) -> Float {
    var v5: Float = v0 in
    let v7: Float = v0 * v5 in
    let v6: Float = v7 + v7 in
    var v1: Float = v5 in
    var v2: Float = v7 in
    var v10: Float = v5 in
    var v8: Float = v10 in
    var v4: Float = v2 in
    var v13: Float = v0 in
    var v9: Float = v2 in
    let v12: Float = v6 - v7 in
    var v25: Float = v12 in
    var v14: Float = v1 in
    var v16: Float = v8 in
    var v19: Float = v13 in
    let v43: Float = v25 / v9 in
    var v21: Float = v13 in
    var v22: Float = v16 in
    var v34: Float = v5 in
    var v20: Float = v6 in
    var v24: Float = v34 in
    var v11: Float = v14 in
    var v28: Float = v2 in
    var v17: Float = v28 in
    var v47: Float = v4 in
    var v27: Float = v7 in
    v10 = v2 in
    var v39: Float = v47 in
    v14 = v24 in
    var v57: Float = v27 in
    var v52: Float = v6 in
    var v90: Float = v21 in
    let v66: Float = v20 + v19 in
    let v101: [Float] = [v52, v25, v13, v57] in
    var v73: [Float] = v101 in
    let v78: Float = v101[0] in
    let v68: Float = v73[0] in
    v73[2] = v66 in
    v73[2] = v68 in
    v73[3] = v43 in
    let v245: [Float] = [v78, v90, v21, v17, v14, v22, v11] in
    var v111: [Float] = v245 in
    v27 = v39 in
    let v71: Float = v73[0] in
    v1 = v71 in
    var v160: [Float] = v111 in
    let v122: [[Float]] = [v245, v160, v160, v111, v111, v111, v111] in
    let v115: [Float] = v122[4] in
    v160[6] = v6 in
    v25 = v27 in
    let v150: Float = v115[2] in
    v111[4] = v6 in
    v150
  } in
  let noinline_f0: (s6, Float) -> Float = (v0: s6, v1: Float) -> Float {
    var v6: Float = v1 in
    let v13: Float = f25(v6) in
    v13
  } in
  fun loop(i: Int, v0: s6, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s6 = s6([[s1(s0(0.0, [[1.0]]), s0(2.0, [[3.0]]))], [s1(s0(4.0, [[5.0]]), s0(6.0, [[7.0]]))]], [s2([s0(8.0, [[9.0]]), s0(10.0, [[11.0]])], [s1(s0(12.0, [[13.0]]), s0(14.0, [[15.0]]))]), s2([s0(16.0, [[17.0]]), s0(18.0, [[19.0]])], [s1(s0(20.0, [[21.0]]), s0(22.0, [[23.0]]))]), s2([s0(24.0, [[25.0]]), s0(26.0, [[27.0]])], [s1(s0(28.0, [[29.0]]), s0(30.0, [[31.0]]))])]) in
    let v1: Float = 32.0 in
    let initialResult: Float = 32.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()