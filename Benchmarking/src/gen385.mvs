  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [[s0]]
    var p1: s0
  } in
  let f46: (s0) -> s0 = (v0: s0) -> s0 {
    var v4: s0 = v0 in
    let v6: [s0] = [v0, v4] in
    var v1: s0 = v4 in
    v4 = v0 in
    var v11: s0 = v1 in
    let v3: [[Float]] = v0.p0 in
    v11.p0 = v3 in
    let v8: [[Float]] = v11.p1 in
    let v17: s0 = v6[1] in
    let v10: [[Float]] = v17.p1 in
    var v23: [[Float]] = v8 in
    var v20: [[Float]] = v23 in
    v20 = v10 in
    v4.p1 = v20 in
    v1.p0 = v3 in
    v4.p1 = v20 in
    v4.p1 = v20 in
    var v16: s0 = v11 in
    v4.p1 = v10 in
    v16
  } in
  let f42: (s1) -> s1 = (v0: s1) -> s1 {
    var v4: s1 = v0 in
    let v7: s0 = v0.p0 in
    let v2: s0 = f46(v7) in
    let v1: s0 = v0.p0 in
    var v3: s0 = v2 in
    let v11: s0 = v4.p1 in
    let v5: s0 = f46(v3) in
    let v12: [[Float]] = v11.p1 in
    v4.p1 = v1 in
    let v15: s1 = s1(v1, v5) in
    v3.p1 = v12 in
    v15
  } in
  let f40: (s0) -> s0 = (v0: s0) -> s0 {
    let v6: s0 = f46(v0) in
    let v13: [[Float]] = v6.p0 in
    let v25: s0 = f46(v0) in
    let v26: s0 = f46(v25) in
    var v33: s0 = v25 in
    v33.p0 = v13 in
    v33 = v26 in
    let v32: s0 = f46(v33) in
    let v51: s0 = f46(v32) in
    v51
  } in
  let f33: (s0) -> s0 = (v0: s0) -> s0 {
    var v6: s0 = v0 in
    let v3: [[Float]] = v6.p0 in
    let v2: [Float] = v3[0] in
    var v8: [Float] = v2 in
    let v4: s0 = f46(v0) in
    v6.p0 = v3 in
    let v5: [[Float]] = v0.p0 in
    let v1: s1 = s1(v4, v6) in
    let v13: s0 = v1.p1 in
    let v14: s0 = f46(v0) in
    let v23: [Float] = v3[1] in
    var v15: [[Float]] = v5 in
    let v11: s1 = s1(v4, v14) in
    v15[0] = v8 in
    let v12: Float = v23[0] in
    let v7: [Float] = v3[1] in
    let v18: s0 = v11.p0 in
    let v28: s0 = f46(v14) in
    let v16: [Float] = v5[1] in
    let v19: s1 = f42(v11) in
    var v24: [[Float]] = v3 in
    let v25: s1 = f42(v1) in
    let v32: s0 = v25.p0 in
    v8 = v7 in
    v6.p0 = v5 in
    let v43: s0 = f46(v28) in
    var v20: [[Float]] = v15 in
    let v22: s0 = f40(v13) in
    let v42: Float = v2[0] in
    let v30: [s1] = [v19, v25, v11, v19, v11, v1, v25] in
    v20 = v5 in
    let v33: s0 = f46(v43) in
    let v61: [Float] = v24[0] in
    v6.p0 = v5 in
    v15[1] = v61 in
    var v60: [s1] = v30 in
    var v35: [[Float]] = v24 in
    v24[0] = v16 in
    let v66: s1 = v60[5] in
    let v75: s0 = v11.p1 in
    v35[1] = v8 in
    v35 = v3 in
    var v41: [Float] = v8 in
    v6.p0 = v20 in
    let v51: [[Float]] = v22.p1 in
    let v96: [[Float]] = v0.p0 in
    let v40: s1 = f42(v66) in
    var v101: [[Float]] = v51 in
    let v65: s0 = v40.p0 in
    v6.p0 = v5 in
    let v94: s1 = f42(v66) in
    let v64: [s0] = [v0, v65] in
    var v83: Float = v12 in
    let v142: [[Float]] = v75.p0 in
    v24[1] = v41 in
    let v58: s0 = v64[1] in
    let v73: [[Float]] = v18.p1 in
    let v123: s1 = f42(v94) in
    let v105: s0 = f40(v32) in
    v6.p1 = v101 in
    v20[0] = v61 in
    var v86: [Float] = v41 in
    let v133: s0 = v11.p0 in
    let v89: [[Float]] = v105.p0 in
    v6.p0 = v35 in
    v6.p0 = v3 in
    let v52: s0 = f40(v133) in
    let v137: [[Float]] = v58.p1 in
    let v108: [[Float]] = v0.p1 in
    let v144: Float = v12 * v42 in
    let v208: s1 = f42(v123) in
    v6.p1 = v73 in
    v8[0] = v83 in
    v6.p1 = v108 in
    let v117: [[Float]] = v52.p0 in
    v6.p0 = v96 in
    let v155: s0 = v208.p0 in
    var v69: [[Float]] = v117 in
    v6.p0 = v89 in
    var v291: s0 = v155 in
    let v162: [[Float]] = v33.p1 in
    v291.p0 = v142 in
    v86[0] = v144 in
    v291.p1 = v162 in
    v8 = v86 in
    v291.p1 = v137 in
    v6.p0 = v69 in
    v6.p0 = v35 in
    v291
  } in
  let f26: (Float) -> Float = (v0: Float) -> Float {
    var v6: Float = v0 in
    var v3: Float = v0 in
    var v7: Float = v3 in
    var v5: Float = v0 in
    var v2: Float = v5 in
    var v1: Float = v7 in
    var v8: Float = v5 in
    v7 = v0 in
    var v4: Float = v2 in
    var v18: Float = v8 in
    let v19: Float = v0 + v3 in
    var v12: Float = v2 in
    let v11: Float = v0 - v6 in
    var v13: Float = v4 in
    v18 = v0 in
    v5 = v2 in
    var v16: Float = v11 in
    var v25: Float = v1 in
    var v30: Float = v18 in
    var v17: Float = v12 in
    let v46: Float = v30 + v6 in
    let v9: [Float] = [v25, v5, v17, v46, v16, v17] in
    let v23: [Float] = [v30, v25, v19, v11, v13, v6] in
    let v22: Float = v23[3] in
    var v26: [Float] = v9 in
    let v29: Float = v26[0] in
    v26[0] = v6 in
    let v48: [Float] = [v22, v30, v11, v4, v29] in
    v26[2] = v5 in
    var v39: [Float] = v48 in
    let v58: Float = v39[1] in
    v58
  } in
  let f23: (s0, s0) -> s0 = (v0: s0, v1: s0) -> s0 {
    let v5: s0 = f46(v1) in
    let v4: [[Float]] = v1.p0 in
    let v13: [[Float]] = v5.p1 in
    let v9: [Float] = v4[1] in
    let v28: Float = v9[0] in
    let v18: [[Float]] = v1.p0 in
    let v15: [Float] = v13[0] in
    var v20: [Float] = v9 in
    let v12: [[Float]] = v1.p1 in
    let v65: Float = f26(v28) in
    let v24: Float = f26(v65) in
    v20[0] = v65 in
    v20[0] = v65 in
    var v17: [[Float]] = v4 in
    v17[1] = v20 in
    v20[0] = v28 in
    v17[1] = v15 in
    v20[0] = v24 in
    let v26: Float = v9[0] in
    let v30: s0 = s0(v17, v12) in
    let v27: [Float] = v12[1] in
    v17[0] = v27 in
    v20[0] = v26 in
    var v53: s0 = v30 in
    var v51: [[Float]] = v18 in
    v53.p0 = v51 in
    v17 = v18 in
    v53
  } in
  let f21: (s2) -> s2 = (v0: s2) -> s2 {
    v0
  } in
  let f20: (s2) -> s2 = (v0: s2) -> s2 {
    var v1: s2 = v0 in
    v1 = v0 in
    let v35: [[s0]] = v1.p0 in
    let v88: s2 = f21(v1) in
    v1.p0 = v35 in
    v88
  } in
  let f18: (s2) -> s2 = (v0: s2) -> s2 {
    let v5: s2 = f21(v0) in
    let v26: s2 = f20(v0) in
    let v46: [[s0]] = v5.p0 in
    let v159: s2 = f21(v26) in
    var v112: s2 = v159 in
    v112.p0 = v46 in
    let v254: s2 = f20(v112) in
    v254
  } in
  let f9: (s2) -> s2 = (v0: s2) -> s2 {
    v0
  } in
  let f6: (s0) -> s0 = (v0: s0) -> s0 {
    let v1: [s0] = [v0, v0, v0, v0, v0] in
    let v7: s1 = s1(v0, v0) in
    let v3: s0 = v1[2] in
    let v6: s0 = v1[3] in
    let v9: s0 = v7.p1 in
    let v2: [[Float]] = v3.p1 in
    let v12: [Float] = v2[0] in
    var v15: [[Float]] = v2 in
    v15[0] = v12 in
    var v14: s0 = v9 in
    var v25: [[Float]] = v15 in
    v14.p1 = v2 in
    let v19: s0 = f23(v14, v14) in
    let v28: [[Float]] = v3.p1 in
    let v22: s0 = f33(v19) in
    v14.p1 = v15 in
    v14.p1 = v25 in
    v14.p1 = v28 in
    v14 = v6 in
    v22
  } in
  let noinline_f0: ([s2], Float) -> Float = (v0: [s2], v1: Float) -> Float {
    let v5: s2 = v0[0] in
    var v7: [s2] = v0 in
    let v2: s2 = f9(v5) in
    v7[0] = v2 in
    let v4: s2 = f9(v2) in
    let v9: s2 = v7[0] in
    let v15: s2 = f9(v2) in
    var v8: s2 = v9 in
    v7[0] = v2 in
    let v14: s2 = v7[0] in
    let v29: s2 = f18(v4) in
    let v17: s2 = f18(v14) in
    let v21: s0 = v9.p1 in
    let v33: s0 = f6(v21) in
    v7[0] = v15 in
    let v35: s0 = v17.p1 in
    let v25: s0 = f33(v33) in
    let v67: [[Float]] = v35.p1 in
    var v37: s0 = v25 in
    var v34: [[Float]] = v67 in
    v37.p1 = v34 in
    v7[0] = v5 in
    let v50: [Float] = v34[0] in
    let v48: Float = v50[0] in
    let v117: [[Float]] = v37.p1 in
    v8 = v5 in
    v7[0] = v8 in
    let v87: [Float] = v117[2] in
    v7[0] = v29 in
    var v151: Float = v48 in
    v34[1] = v87 in
    v151
  } in
  fun loop(i: Int, v0: [s2], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2([[s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]])], [s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]])], [s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]])]], s0([[15.0], [16.0]], [[17.0], [18.0], [19.0]]))] in
    let v1: Float = 20.0 in
    let initialResult: Float = 20.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()