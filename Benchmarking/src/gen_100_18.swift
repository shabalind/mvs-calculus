  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: Double
    var p1: [s0]
  }
  struct s2 {
    var p0: s0
  }
  struct s3 {
    var p0: s1
    var p1: [s1]
  }
  struct s5 {
    var p0: [[s3]]
    var p1: [[s0]]
  }
  func f42(_ v0: s0) -> s0 {
    let v1: [s0] = [v0, v0, v0, v0, v0, v0, v0]
    let v2: s2 = s2(p0: v0)
    let v7: s0 = v1[4]
    let v5: s0 = v2.p0
    let v14: [[Double]] = v5.p0
    var v19: [s0] = v1
    let v18: [[Double]] = v7.p0
    let v45: [[[Double]]] = [v18, v14, v18, v18]
    let v36: s0 = v19[1]
    let v122: [[Double]] = v45[1]
    let v114: [[Double]] = v36.p1
    let v161: s0 = s0(p0: v122, p1: v114)
    return v161
  }
  @inline(never)
  func f0(_ v0: [s5], _ v1: [s2], _ v2: Double) -> Double {
    var v4: [s2] = v1
    var v12: Double = v2
    let v37: s2 = v4[0]
    let v43: s0 = v37.p0
    let v58: s0 = f42(v43)
    let v45: s0 = f42(v58)
    let v209: [[Double]] = v45.p0
    let v84: [Double] = v209[2]
    let v105: Double = v84[0]
    let v149: Double = v105 + v12
    return v149
  }
  func benchmark() {
    let v0: [s5] = [s5(p0: [[s3(p0: s1(p0: 0.0, p1: [s0(p0: [[1.0], [2.0], [3.0]], p1: [[4.0], [5.0]]), s0(p0: [[6.0], [7.0], [8.0]], p1: [[9.0], [10.0]]), s0(p0: [[11.0], [12.0], [13.0]], p1: [[14.0], [15.0]])]), p1: [s1(p0: 16.0, p1: [s0(p0: [[17.0], [18.0], [19.0]], p1: [[20.0], [21.0]]), s0(p0: [[22.0], [23.0], [24.0]], p1: [[25.0], [26.0]]), s0(p0: [[27.0], [28.0], [29.0]], p1: [[30.0], [31.0]])]), s1(p0: 32.0, p1: [s0(p0: [[33.0], [34.0], [35.0]], p1: [[36.0], [37.0]]), s0(p0: [[38.0], [39.0], [40.0]], p1: [[41.0], [42.0]]), s0(p0: [[43.0], [44.0], [45.0]], p1: [[46.0], [47.0]])]), s1(p0: 48.0, p1: [s0(p0: [[49.0], [50.0], [51.0]], p1: [[52.0], [53.0]]), s0(p0: [[54.0], [55.0], [56.0]], p1: [[57.0], [58.0]]), s0(p0: [[59.0], [60.0], [61.0]], p1: [[62.0], [63.0]])])])], [s3(p0: s1(p0: 64.0, p1: [s0(p0: [[65.0], [66.0], [67.0]], p1: [[68.0], [69.0]]), s0(p0: [[70.0], [71.0], [72.0]], p1: [[73.0], [74.0]]), s0(p0: [[75.0], [76.0], [77.0]], p1: [[78.0], [79.0]])]), p1: [s1(p0: 80.0, p1: [s0(p0: [[81.0], [82.0], [83.0]], p1: [[84.0], [85.0]]), s0(p0: [[86.0], [87.0], [88.0]], p1: [[89.0], [90.0]]), s0(p0: [[91.0], [92.0], [93.0]], p1: [[94.0], [95.0]])]), s1(p0: 96.0, p1: [s0(p0: [[97.0], [98.0], [99.0]], p1: [[100.0], [101.0]]), s0(p0: [[102.0], [103.0], [104.0]], p1: [[105.0], [106.0]]), s0(p0: [[107.0], [108.0], [109.0]], p1: [[110.0], [111.0]])]), s1(p0: 112.0, p1: [s0(p0: [[113.0], [114.0], [115.0]], p1: [[116.0], [117.0]]), s0(p0: [[118.0], [119.0], [120.0]], p1: [[121.0], [122.0]]), s0(p0: [[123.0], [124.0], [125.0]], p1: [[126.0], [127.0]])])])], [s3(p0: s1(p0: 128.0, p1: [s0(p0: [[129.0], [130.0], [131.0]], p1: [[132.0], [133.0]]), s0(p0: [[134.0], [135.0], [136.0]], p1: [[137.0], [138.0]]), s0(p0: [[139.0], [140.0], [141.0]], p1: [[142.0], [143.0]])]), p1: [s1(p0: 144.0, p1: [s0(p0: [[145.0], [146.0], [147.0]], p1: [[148.0], [149.0]]), s0(p0: [[150.0], [151.0], [152.0]], p1: [[153.0], [154.0]]), s0(p0: [[155.0], [156.0], [157.0]], p1: [[158.0], [159.0]])]), s1(p0: 160.0, p1: [s0(p0: [[161.0], [162.0], [163.0]], p1: [[164.0], [165.0]]), s0(p0: [[166.0], [167.0], [168.0]], p1: [[169.0], [170.0]]), s0(p0: [[171.0], [172.0], [173.0]], p1: [[174.0], [175.0]])]), s1(p0: 176.0, p1: [s0(p0: [[177.0], [178.0], [179.0]], p1: [[180.0], [181.0]]), s0(p0: [[182.0], [183.0], [184.0]], p1: [[185.0], [186.0]]), s0(p0: [[187.0], [188.0], [189.0]], p1: [[190.0], [191.0]])])])]], p1: [[s0(p0: [[192.0], [193.0], [194.0]], p1: [[195.0], [196.0]])], [s0(p0: [[197.0], [198.0], [199.0]], p1: [[200.0], [201.0]])]]), s5(p0: [[s3(p0: s1(p0: 202.0, p1: [s0(p0: [[203.0], [204.0], [205.0]], p1: [[206.0], [207.0]]), s0(p0: [[208.0], [209.0], [210.0]], p1: [[211.0], [212.0]]), s0(p0: [[213.0], [214.0], [215.0]], p1: [[216.0], [217.0]])]), p1: [s1(p0: 218.0, p1: [s0(p0: [[219.0], [220.0], [221.0]], p1: [[222.0], [223.0]]), s0(p0: [[224.0], [225.0], [226.0]], p1: [[227.0], [228.0]]), s0(p0: [[229.0], [230.0], [231.0]], p1: [[232.0], [233.0]])]), s1(p0: 234.0, p1: [s0(p0: [[235.0], [236.0], [237.0]], p1: [[238.0], [239.0]]), s0(p0: [[240.0], [241.0], [242.0]], p1: [[243.0], [244.0]]), s0(p0: [[245.0], [246.0], [247.0]], p1: [[248.0], [249.0]])]), s1(p0: 250.0, p1: [s0(p0: [[251.0], [252.0], [253.0]], p1: [[254.0], [255.0]]), s0(p0: [[256.0], [257.0], [258.0]], p1: [[259.0], [260.0]]), s0(p0: [[261.0], [262.0], [263.0]], p1: [[264.0], [265.0]])])])], [s3(p0: s1(p0: 266.0, p1: [s0(p0: [[267.0], [268.0], [269.0]], p1: [[270.0], [271.0]]), s0(p0: [[272.0], [273.0], [274.0]], p1: [[275.0], [276.0]]), s0(p0: [[277.0], [278.0], [279.0]], p1: [[280.0], [281.0]])]), p1: [s1(p0: 282.0, p1: [s0(p0: [[283.0], [284.0], [285.0]], p1: [[286.0], [287.0]]), s0(p0: [[288.0], [289.0], [290.0]], p1: [[291.0], [292.0]]), s0(p0: [[293.0], [294.0], [295.0]], p1: [[296.0], [297.0]])]), s1(p0: 298.0, p1: [s0(p0: [[299.0], [300.0], [301.0]], p1: [[302.0], [303.0]]), s0(p0: [[304.0], [305.0], [306.0]], p1: [[307.0], [308.0]]), s0(p0: [[309.0], [310.0], [311.0]], p1: [[312.0], [313.0]])]), s1(p0: 314.0, p1: [s0(p0: [[315.0], [316.0], [317.0]], p1: [[318.0], [319.0]]), s0(p0: [[320.0], [321.0], [322.0]], p1: [[323.0], [324.0]]), s0(p0: [[325.0], [326.0], [327.0]], p1: [[328.0], [329.0]])])])], [s3(p0: s1(p0: 330.0, p1: [s0(p0: [[331.0], [332.0], [333.0]], p1: [[334.0], [335.0]]), s0(p0: [[336.0], [337.0], [338.0]], p1: [[339.0], [340.0]]), s0(p0: [[341.0], [342.0], [343.0]], p1: [[344.0], [345.0]])]), p1: [s1(p0: 346.0, p1: [s0(p0: [[347.0], [348.0], [349.0]], p1: [[350.0], [351.0]]), s0(p0: [[352.0], [353.0], [354.0]], p1: [[355.0], [356.0]]), s0(p0: [[357.0], [358.0], [359.0]], p1: [[360.0], [361.0]])]), s1(p0: 362.0, p1: [s0(p0: [[363.0], [364.0], [365.0]], p1: [[366.0], [367.0]]), s0(p0: [[368.0], [369.0], [370.0]], p1: [[371.0], [372.0]]), s0(p0: [[373.0], [374.0], [375.0]], p1: [[376.0], [377.0]])]), s1(p0: 378.0, p1: [s0(p0: [[379.0], [380.0], [381.0]], p1: [[382.0], [383.0]]), s0(p0: [[384.0], [385.0], [386.0]], p1: [[387.0], [388.0]]), s0(p0: [[389.0], [390.0], [391.0]], p1: [[392.0], [393.0]])])])]], p1: [[s0(p0: [[394.0], [395.0], [396.0]], p1: [[397.0], [398.0]])], [s0(p0: [[399.0], [400.0], [401.0]], p1: [[402.0], [403.0]])]]), s5(p0: [[s3(p0: s1(p0: 404.0, p1: [s0(p0: [[405.0], [406.0], [407.0]], p1: [[408.0], [409.0]]), s0(p0: [[410.0], [411.0], [412.0]], p1: [[413.0], [414.0]]), s0(p0: [[415.0], [416.0], [417.0]], p1: [[418.0], [419.0]])]), p1: [s1(p0: 420.0, p1: [s0(p0: [[421.0], [422.0], [423.0]], p1: [[424.0], [425.0]]), s0(p0: [[426.0], [427.0], [428.0]], p1: [[429.0], [430.0]]), s0(p0: [[431.0], [432.0], [433.0]], p1: [[434.0], [435.0]])]), s1(p0: 436.0, p1: [s0(p0: [[437.0], [438.0], [439.0]], p1: [[440.0], [441.0]]), s0(p0: [[442.0], [443.0], [444.0]], p1: [[445.0], [446.0]]), s0(p0: [[447.0], [448.0], [449.0]], p1: [[450.0], [451.0]])]), s1(p0: 452.0, p1: [s0(p0: [[453.0], [454.0], [455.0]], p1: [[456.0], [457.0]]), s0(p0: [[458.0], [459.0], [460.0]], p1: [[461.0], [462.0]]), s0(p0: [[463.0], [464.0], [465.0]], p1: [[466.0], [467.0]])])])], [s3(p0: s1(p0: 468.0, p1: [s0(p0: [[469.0], [470.0], [471.0]], p1: [[472.0], [473.0]]), s0(p0: [[474.0], [475.0], [476.0]], p1: [[477.0], [478.0]]), s0(p0: [[479.0], [480.0], [481.0]], p1: [[482.0], [483.0]])]), p1: [s1(p0: 484.0, p1: [s0(p0: [[485.0], [486.0], [487.0]], p1: [[488.0], [489.0]]), s0(p0: [[490.0], [491.0], [492.0]], p1: [[493.0], [494.0]]), s0(p0: [[495.0], [496.0], [497.0]], p1: [[498.0], [499.0]])]), s1(p0: 500.0, p1: [s0(p0: [[501.0], [502.0], [503.0]], p1: [[504.0], [505.0]]), s0(p0: [[506.0], [507.0], [508.0]], p1: [[509.0], [510.0]]), s0(p0: [[511.0], [512.0], [513.0]], p1: [[514.0], [515.0]])]), s1(p0: 516.0, p1: [s0(p0: [[517.0], [518.0], [519.0]], p1: [[520.0], [521.0]]), s0(p0: [[522.0], [523.0], [524.0]], p1: [[525.0], [526.0]]), s0(p0: [[527.0], [528.0], [529.0]], p1: [[530.0], [531.0]])])])], [s3(p0: s1(p0: 532.0, p1: [s0(p0: [[533.0], [534.0], [535.0]], p1: [[536.0], [537.0]]), s0(p0: [[538.0], [539.0], [540.0]], p1: [[541.0], [542.0]]), s0(p0: [[543.0], [544.0], [545.0]], p1: [[546.0], [547.0]])]), p1: [s1(p0: 548.0, p1: [s0(p0: [[549.0], [550.0], [551.0]], p1: [[552.0], [553.0]]), s0(p0: [[554.0], [555.0], [556.0]], p1: [[557.0], [558.0]]), s0(p0: [[559.0], [560.0], [561.0]], p1: [[562.0], [563.0]])]), s1(p0: 564.0, p1: [s0(p0: [[565.0], [566.0], [567.0]], p1: [[568.0], [569.0]]), s0(p0: [[570.0], [571.0], [572.0]], p1: [[573.0], [574.0]]), s0(p0: [[575.0], [576.0], [577.0]], p1: [[578.0], [579.0]])]), s1(p0: 580.0, p1: [s0(p0: [[581.0], [582.0], [583.0]], p1: [[584.0], [585.0]]), s0(p0: [[586.0], [587.0], [588.0]], p1: [[589.0], [590.0]]), s0(p0: [[591.0], [592.0], [593.0]], p1: [[594.0], [595.0]])])])]], p1: [[s0(p0: [[596.0], [597.0], [598.0]], p1: [[599.0], [600.0]])], [s0(p0: [[601.0], [602.0], [603.0]], p1: [[604.0], [605.0]])]])]
    let v1: [s2] = [s2(p0: s0(p0: [[606.0], [607.0], [608.0]], p1: [[609.0], [610.0]]))]
    let v2: Double = 611.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 611.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
