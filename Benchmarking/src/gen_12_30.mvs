  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: s0
    var p1: [[s1]]
  } in
  let noinline_f0: (s2, s2, s0, s2, Float) -> Float = (v0: s2, v1: s2, v2: s0, v3: s2, v4: Float) -> Float {
    let v7: [[Float]] = v2.p0 in
    let v5: [[s1]] = v0.p1 in
    let v9: [s1] = v5[1] in
    let v6: s1 = v9[0] in
    let v13: [s0] = v6.p0 in
    let v22: [Float] = v7[2] in
    let v31: s0 = v13[2] in
    let v37: Float = v22[0] in
    let v39: [[Float]] = v31.p1 in
    let v48: [Float] = v39[2] in
    var v80: [Float] = v48 in
    let v167: Float = v80[0] in
    let v193: Float = v167 + v37 in
    v193
  } in
  fun loop(i: Int, v0: s2, v1: s2, v2: s0, v3: s2, v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]], [[6.0]]), [[s1([s0([[7.0], [8.0], [9.0]], [[10.0], [11.0], [12.0]], [[13.0]]), s0([[14.0], [15.0], [16.0]], [[17.0], [18.0], [19.0]], [[20.0]]), s0([[21.0], [22.0], [23.0]], [[24.0], [25.0], [26.0]], [[27.0]])], [[s0([[28.0], [29.0], [30.0]], [[31.0], [32.0], [33.0]], [[34.0]])]])], [s1([s0([[35.0], [36.0], [37.0]], [[38.0], [39.0], [40.0]], [[41.0]]), s0([[42.0], [43.0], [44.0]], [[45.0], [46.0], [47.0]], [[48.0]]), s0([[49.0], [50.0], [51.0]], [[52.0], [53.0], [54.0]], [[55.0]])], [[s0([[56.0], [57.0], [58.0]], [[59.0], [60.0], [61.0]], [[62.0]])]])]]) in
    let v1: s2 = s2(s0([[63.0], [64.0], [65.0]], [[66.0], [67.0], [68.0]], [[69.0]]), [[s1([s0([[70.0], [71.0], [72.0]], [[73.0], [74.0], [75.0]], [[76.0]]), s0([[77.0], [78.0], [79.0]], [[80.0], [81.0], [82.0]], [[83.0]]), s0([[84.0], [85.0], [86.0]], [[87.0], [88.0], [89.0]], [[90.0]])], [[s0([[91.0], [92.0], [93.0]], [[94.0], [95.0], [96.0]], [[97.0]])]])], [s1([s0([[98.0], [99.0], [100.0]], [[101.0], [102.0], [103.0]], [[104.0]]), s0([[105.0], [106.0], [107.0]], [[108.0], [109.0], [110.0]], [[111.0]]), s0([[112.0], [113.0], [114.0]], [[115.0], [116.0], [117.0]], [[118.0]])], [[s0([[119.0], [120.0], [121.0]], [[122.0], [123.0], [124.0]], [[125.0]])]])]]) in
    let v2: s0 = s0([[126.0], [127.0], [128.0]], [[129.0], [130.0], [131.0]], [[132.0]]) in
    let v3: s2 = s2(s0([[133.0], [134.0], [135.0]], [[136.0], [137.0], [138.0]], [[139.0]]), [[s1([s0([[140.0], [141.0], [142.0]], [[143.0], [144.0], [145.0]], [[146.0]]), s0([[147.0], [148.0], [149.0]], [[150.0], [151.0], [152.0]], [[153.0]]), s0([[154.0], [155.0], [156.0]], [[157.0], [158.0], [159.0]], [[160.0]])], [[s0([[161.0], [162.0], [163.0]], [[164.0], [165.0], [166.0]], [[167.0]])]])], [s1([s0([[168.0], [169.0], [170.0]], [[171.0], [172.0], [173.0]], [[174.0]]), s0([[175.0], [176.0], [177.0]], [[178.0], [179.0], [180.0]], [[181.0]]), s0([[182.0], [183.0], [184.0]], [[185.0], [186.0], [187.0]], [[188.0]])], [[s0([[189.0], [190.0], [191.0]], [[192.0], [193.0], [194.0]], [[195.0]])]])]]) in
    let v4: Float = 196.0 in
    let initialResult: Float = 196.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()