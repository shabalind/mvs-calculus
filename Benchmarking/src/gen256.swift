  import Dispatch
  struct s0 {
    var p0: [Double]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: s0
    var p1: s0
  }
  struct s3 {
    var p0: Double
    var p1: s2
  }
  struct s4 {
    var p0: [s2]
    var p1: [[s0]]
    var p2: s3
    var p3: s3
    var p4: s0
    var p5: s2
    var p6: s1
  }
  struct s5 {
    var p0: s4
    var p1: s3
  }
  struct s6 {
    var p0: s4
    var p1: s4
  }
  struct s7 {
    var p0: s6
    var p1: s5
    var p2: s0
    var p3: s3
  }
  func f83(_ v0: s3) -> s3 {
    var v2: s3 = v0
    let v12: s2 = v0.p1
    var v5: s3 = v2
    v5.p1 = v12
    let v11: s0 = v12.p0
    let v30: s0 = v12.p0
    v2.p1 = v12
    v2.p1 = v12
    var v22: s0 = v11
    let v66: [Double] = v22.p0
    var v17: [Double] = v66
    let v20: Double = v17[0]
    v22.p0 = v66
    v5.p0 = v20
    let v71: s2 = v5.p1
    v22 = v30
    v2.p1 = v71
    return v2
  }
  @inline(never)
  func f0(_ v0: [s7], _ v1: [[s3]], _ v2: [s1], _ v3: Double) -> Double {
    var v5: Double = v3
    let v25: Double = v5 - v5
    var v19: Double = v5
    var v21: [s7] = v0
    var v18: [s7] = v21
    let v46: Double = v3 / v19
    v19 = v3
    let v17: s7 = v18[0]
    let v26: s3 = v17.p3
    let v30: s3 = f83(v26)
    v18 = v21
    let v32: Double = v30.p0
    var v47: Double = v32
    v21[0] = v17
    let v43: [Double] = [v25, v46, v47, v3, v19]
    let v49: s7 = v0[0]
    let v93: Double = v43[1]
    v18[0] = v49
    return v93
  }
  func benchmark() {
    let v0: [s7] = [s7(p0: s6(p0: s4(p0: [s2(p0: s0(p0: [0.0, 1.0], p1: [[2.0]]), p1: s0(p0: [3.0, 4.0], p1: [[5.0]]))], p1: [[s0(p0: [6.0, 7.0], p1: [[8.0]])]], p2: s3(p0: 9.0, p1: s2(p0: s0(p0: [10.0, 11.0], p1: [[12.0]]), p1: s0(p0: [13.0, 14.0], p1: [[15.0]]))), p3: s3(p0: 16.0, p1: s2(p0: s0(p0: [17.0, 18.0], p1: [[19.0]]), p1: s0(p0: [20.0, 21.0], p1: [[22.0]]))), p4: s0(p0: [23.0, 24.0], p1: [[25.0]]), p5: s2(p0: s0(p0: [26.0, 27.0], p1: [[28.0]]), p1: s0(p0: [29.0, 30.0], p1: [[31.0]])), p6: s1(p0: s0(p0: [32.0, 33.0], p1: [[34.0]]), p1: s0(p0: [35.0, 36.0], p1: [[37.0]]))), p1: s4(p0: [s2(p0: s0(p0: [38.0, 39.0], p1: [[40.0]]), p1: s0(p0: [41.0, 42.0], p1: [[43.0]]))], p1: [[s0(p0: [44.0, 45.0], p1: [[46.0]])]], p2: s3(p0: 47.0, p1: s2(p0: s0(p0: [48.0, 49.0], p1: [[50.0]]), p1: s0(p0: [51.0, 52.0], p1: [[53.0]]))), p3: s3(p0: 54.0, p1: s2(p0: s0(p0: [55.0, 56.0], p1: [[57.0]]), p1: s0(p0: [58.0, 59.0], p1: [[60.0]]))), p4: s0(p0: [61.0, 62.0], p1: [[63.0]]), p5: s2(p0: s0(p0: [64.0, 65.0], p1: [[66.0]]), p1: s0(p0: [67.0, 68.0], p1: [[69.0]])), p6: s1(p0: s0(p0: [70.0, 71.0], p1: [[72.0]]), p1: s0(p0: [73.0, 74.0], p1: [[75.0]])))), p1: s5(p0: s4(p0: [s2(p0: s0(p0: [76.0, 77.0], p1: [[78.0]]), p1: s0(p0: [79.0, 80.0], p1: [[81.0]]))], p1: [[s0(p0: [82.0, 83.0], p1: [[84.0]])]], p2: s3(p0: 85.0, p1: s2(p0: s0(p0: [86.0, 87.0], p1: [[88.0]]), p1: s0(p0: [89.0, 90.0], p1: [[91.0]]))), p3: s3(p0: 92.0, p1: s2(p0: s0(p0: [93.0, 94.0], p1: [[95.0]]), p1: s0(p0: [96.0, 97.0], p1: [[98.0]]))), p4: s0(p0: [99.0, 100.0], p1: [[101.0]]), p5: s2(p0: s0(p0: [102.0, 103.0], p1: [[104.0]]), p1: s0(p0: [105.0, 106.0], p1: [[107.0]])), p6: s1(p0: s0(p0: [108.0, 109.0], p1: [[110.0]]), p1: s0(p0: [111.0, 112.0], p1: [[113.0]]))), p1: s3(p0: 114.0, p1: s2(p0: s0(p0: [115.0, 116.0], p1: [[117.0]]), p1: s0(p0: [118.0, 119.0], p1: [[120.0]])))), p2: s0(p0: [121.0, 122.0], p1: [[123.0]]), p3: s3(p0: 124.0, p1: s2(p0: s0(p0: [125.0, 126.0], p1: [[127.0]]), p1: s0(p0: [128.0, 129.0], p1: [[130.0]]))))]
    let v1: [[s3]] = [[s3(p0: 131.0, p1: s2(p0: s0(p0: [132.0, 133.0], p1: [[134.0]]), p1: s0(p0: [135.0, 136.0], p1: [[137.0]])))], [s3(p0: 138.0, p1: s2(p0: s0(p0: [139.0, 140.0], p1: [[141.0]]), p1: s0(p0: [142.0, 143.0], p1: [[144.0]])))]]
    let v2: [s1] = [s1(p0: s0(p0: [145.0, 146.0], p1: [[147.0]]), p1: s0(p0: [148.0, 149.0], p1: [[150.0]]))]
    let v3: Double = 151.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 151.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
