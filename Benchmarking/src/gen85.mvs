  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: ([[s0]], Float) -> Float = (v0: [[s0]], v1: Float) -> Float {
    var v2: Float = v1 in
    var v3: Float = v1 in
    v3 = v2 in
    var v22: Float = v3 in
    let v31: Float = v1 / v1 in
    let v30: Float = v31 * v31 in
    var v27: Float = v31 in
    let v37: Float = v22 * v30 in
    let v178: [Float] = [v1, v3, v2, v31, v37, v37, v27] in
    let v81: Float = v178[1] in
    v81
  } in
  fun loop(i: Int, v0: [[s0]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s0]] = [[s0([[0.0]], [[1.0], [2.0]])], [s0([[3.0]], [[4.0], [5.0]])], [s0([[6.0]], [[7.0], [8.0]])]] in
    let v1: Float = 9.0 in
    let initialResult: Float = 9.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()