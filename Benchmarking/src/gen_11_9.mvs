  struct s0 {
    var p0: [Float]
  } in
  struct s2 {
    var p0: s0
    var p1: [[s0]]
  } in
  let f84: (s2) -> s2 = (v0: s2) -> s2 {
    let v1: [[s0]] = v0.p1 in
    var v3: [[s0]] = v1 in
    let v4: s0 = v0.p0 in
    let v6: [s0] = v3[0] in
    var v2: s2 = v0 in
    v3[1] = v6 in
    var v5: [s0] = v6 in
    let v9: s0 = v0.p0 in
    v2.p0 = v4 in
    let v16: [[s0]] = v2.p1 in
    v2.p0 = v4 in
    v3[1] = v5 in
    v2.p1 = v3 in
    v3[0] = v6 in
    v5[0] = v9 in
    v5[0] = v4 in
    let v13: s2 = s2(v4, v16) in
    v5[0] = v9 in
    v13
  } in
  let f75: (s0, s0) -> s0 = (v0: s0, v1: s0) -> s0 {
    var v6: s0 = v0 in
    var v3: s0 = v6 in
    v3 = v1 in
    let v4: [Float] = v0.p0 in
    let v9: [Float] = v6.p0 in
    var v13: s0 = v3 in
    let v11: [Float] = v1.p0 in
    let v19: s0 = s0(v4) in
    v13.p0 = v11 in
    var v24: [Float] = v4 in
    v13 = v1 in
    v6 = v3 in
    let v18: [Float] = v13.p0 in
    var v12: [Float] = v24 in
    var v26: [Float] = v9 in
    var v31: [Float] = v12 in
    v3.p0 = v24 in
    let v34: [Float] = v19.p0 in
    let v22: [[Float]] = [v26, v4, v31, v34, v18, v11] in
    let v29: [Float] = v22[4] in
    v24 = v29 in
    v13
  } in
  let noinline_f0: ([s2], Float) -> Float = (v0: [s2], v1: Float) -> Float {
    let v7: s2 = v0[0] in
    let v2: s2 = f84(v7) in
    let v8: s2 = f84(v2) in
    let v18: s0 = v8.p0 in
    let v19: s0 = f75(v18, v18) in
    let v23: s0 = f75(v19, v19) in
    let v69: [Float] = v23.p0 in
    let v100: Float = v69[1] in
    v100
  } in
  fun loop(i: Int, v0: [s2], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2(s0([0.0, 1.0]), [[s0([2.0, 3.0])], [s0([4.0, 5.0])]]), s2(s0([6.0, 7.0]), [[s0([8.0, 9.0])], [s0([10.0, 11.0])]])] in
    let v1: Float = 12.0 in
    let initialResult: Float = 12.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()