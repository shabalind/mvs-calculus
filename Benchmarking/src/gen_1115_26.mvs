  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s2 {
    var p0: [s1]
    var p1: [[s1]]
    var p2: s0
    var p3: [s0]
  } in
  struct s6 {
    var p0: s2
    var p1: s0
  } in
  let f68: (Float) -> Float = (v0: Float) -> Float {
    let v5: Float = v0 * v0 in
    var v2: Float = v5 in
    v2 = v5 in
    var v7: Float = v2 in
    var v4: Float = v7 in
    var v1: Float = v5 in
    var v3: Float = v0 in
    var v6: Float = v2 in
    var v8: Float = v6 in
    let v14: Float = v8 - v3 in
    var v11: Float = v1 in
    v6 = v11 in
    var v19: Float = v14 in
    var v15: Float = v4 in
    var v16: Float = v15 in
    let v9: [Float] = [v11, v19, v15, v4] in
    let v21: Float = v9[0] in
    let v52: Float = v16 + v21 in
    v52
  } in
  let noinline_f0: (s6, Float) -> Float = (v0: s6, v1: Float) -> Float {
    var v11: Float = v1 in
    let v26: Float = f68(v11) in
    v26
  } in
  fun loop(i: Int, v0: s6, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s6 = s6(s2([s1([s0([[0.0], [1.0]], [[2.0]]), s0([[3.0], [4.0]], [[5.0]])], s0([[6.0], [7.0]], [[8.0]])), s1([s0([[9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0]], [[14.0]])], s0([[15.0], [16.0]], [[17.0]]))], [[s1([s0([[18.0], [19.0]], [[20.0]]), s0([[21.0], [22.0]], [[23.0]])], s0([[24.0], [25.0]], [[26.0]]))], [s1([s0([[27.0], [28.0]], [[29.0]]), s0([[30.0], [31.0]], [[32.0]])], s0([[33.0], [34.0]], [[35.0]]))], [s1([s0([[36.0], [37.0]], [[38.0]]), s0([[39.0], [40.0]], [[41.0]])], s0([[42.0], [43.0]], [[44.0]]))]], s0([[45.0], [46.0]], [[47.0]]), [s0([[48.0], [49.0]], [[50.0]])]), s0([[51.0], [52.0]], [[53.0]])) in
    let v1: Float = 54.0 in
    let initialResult: Float = 54.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()