  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: s0
    var p1: s0
  } in
  struct s3 {
    var p0: s1
    var p1: [s0]
  } in
  struct s6 {
    var p0: [[s0]]
    var p1: s3
  } in
  let noinline_f0: (s6, Float) -> Float = (v0: s6, v1: Float) -> Float {
    let v3: [[s0]] = v0.p0 in
    let v15: [s0] = v3[0] in
    var v21: [s0] = v15 in
    let v16: s0 = v21[0] in
    v21[0] = v16 in
    let v33: s0 = v21[0] in
    let v20: s2 = s2(v33, v33) in
    let v32: s0 = v20.p1 in
    let v43: [[Float]] = v32.p0 in
    let v82: [Float] = v43[0] in
    let v71: Float = v82[0] in
    v71
  } in
  fun loop(i: Int, v0: s6, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s6 = s6([[s0([[0.0]], [[1.0], [2.0]])], [s0([[3.0]], [[4.0], [5.0]])], [s0([[6.0]], [[7.0], [8.0]])]], s3(s1(s0([[9.0]], [[10.0], [11.0]]), [[s0([[12.0]], [[13.0], [14.0]])], [s0([[15.0]], [[16.0], [17.0]])], [s0([[18.0]], [[19.0], [20.0]])]]), [s0([[21.0]], [[22.0], [23.0]]), s0([[24.0]], [[25.0], [26.0]])])) in
    let v1: Float = 27.0 in
    let initialResult: Float = 27.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()