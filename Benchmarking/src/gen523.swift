  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s2 {
    var p0: s0
    var p1: [s1]
  }
  struct s4 {
    var p0: s1
    var p1: [Double]
  }
  @inline(never)
  func f0(_ v0: [s4], _ v1: [s2], _ v2: Double) -> Double {
    let v6: s4 = v0[0]
    let v8: Double = v2 * v2
    let v3: s4 = v0[0]
    var v10: Double = v2
    let v13: Double = v8 / v2
    let v12: [Double] = v6.p1
    let v16: [Double] = v3.p1
    var v17: [Double] = v16
    v17 = v12
    var v87: Double = v2
    v10 = v2
    let v28: Double = v16[0]
    v17[0] = v10
    let v51: Double = v17[0]
    v17[0] = v28
    v17[0] = v87
    v87 = v13
    return v51
  }
  func benchmark() {
    let v0: [s4] = [s4(p0: s1(p0: [s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0]])], p1: [s0(p0: [[5.0], [6.0], [7.0]], p1: [[8.0], [9.0]]), s0(p0: [[10.0], [11.0], [12.0]], p1: [[13.0], [14.0]]), s0(p0: [[15.0], [16.0], [17.0]], p1: [[18.0], [19.0]])]), p1: [20.0])]
    let v1: [s2] = [s2(p0: s0(p0: [[21.0], [22.0], [23.0]], p1: [[24.0], [25.0]]), p1: [s1(p0: [s0(p0: [[26.0], [27.0], [28.0]], p1: [[29.0], [30.0]])], p1: [s0(p0: [[31.0], [32.0], [33.0]], p1: [[34.0], [35.0]]), s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0], [40.0]]), s0(p0: [[41.0], [42.0], [43.0]], p1: [[44.0], [45.0]])]), s1(p0: [s0(p0: [[46.0], [47.0], [48.0]], p1: [[49.0], [50.0]])], p1: [s0(p0: [[51.0], [52.0], [53.0]], p1: [[54.0], [55.0]]), s0(p0: [[56.0], [57.0], [58.0]], p1: [[59.0], [60.0]]), s0(p0: [[61.0], [62.0], [63.0]], p1: [[64.0], [65.0]])]), s1(p0: [s0(p0: [[66.0], [67.0], [68.0]], p1: [[69.0], [70.0]])], p1: [s0(p0: [[71.0], [72.0], [73.0]], p1: [[74.0], [75.0]]), s0(p0: [[76.0], [77.0], [78.0]], p1: [[79.0], [80.0]]), s0(p0: [[81.0], [82.0], [83.0]], p1: [[84.0], [85.0]])])]), s2(p0: s0(p0: [[86.0], [87.0], [88.0]], p1: [[89.0], [90.0]]), p1: [s1(p0: [s0(p0: [[91.0], [92.0], [93.0]], p1: [[94.0], [95.0]])], p1: [s0(p0: [[96.0], [97.0], [98.0]], p1: [[99.0], [100.0]]), s0(p0: [[101.0], [102.0], [103.0]], p1: [[104.0], [105.0]]), s0(p0: [[106.0], [107.0], [108.0]], p1: [[109.0], [110.0]])]), s1(p0: [s0(p0: [[111.0], [112.0], [113.0]], p1: [[114.0], [115.0]])], p1: [s0(p0: [[116.0], [117.0], [118.0]], p1: [[119.0], [120.0]]), s0(p0: [[121.0], [122.0], [123.0]], p1: [[124.0], [125.0]]), s0(p0: [[126.0], [127.0], [128.0]], p1: [[129.0], [130.0]])]), s1(p0: [s0(p0: [[131.0], [132.0], [133.0]], p1: [[134.0], [135.0]])], p1: [s0(p0: [[136.0], [137.0], [138.0]], p1: [[139.0], [140.0]]), s0(p0: [[141.0], [142.0], [143.0]], p1: [[144.0], [145.0]]), s0(p0: [[146.0], [147.0], [148.0]], p1: [[149.0], [150.0]])])]), s2(p0: s0(p0: [[151.0], [152.0], [153.0]], p1: [[154.0], [155.0]]), p1: [s1(p0: [s0(p0: [[156.0], [157.0], [158.0]], p1: [[159.0], [160.0]])], p1: [s0(p0: [[161.0], [162.0], [163.0]], p1: [[164.0], [165.0]]), s0(p0: [[166.0], [167.0], [168.0]], p1: [[169.0], [170.0]]), s0(p0: [[171.0], [172.0], [173.0]], p1: [[174.0], [175.0]])]), s1(p0: [s0(p0: [[176.0], [177.0], [178.0]], p1: [[179.0], [180.0]])], p1: [s0(p0: [[181.0], [182.0], [183.0]], p1: [[184.0], [185.0]]), s0(p0: [[186.0], [187.0], [188.0]], p1: [[189.0], [190.0]]), s0(p0: [[191.0], [192.0], [193.0]], p1: [[194.0], [195.0]])]), s1(p0: [s0(p0: [[196.0], [197.0], [198.0]], p1: [[199.0], [200.0]])], p1: [s0(p0: [[201.0], [202.0], [203.0]], p1: [[204.0], [205.0]]), s0(p0: [[206.0], [207.0], [208.0]], p1: [[209.0], [210.0]]), s0(p0: [[211.0], [212.0], [213.0]], p1: [[214.0], [215.0]])])])]
    let v2: Double = 216.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 216.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
