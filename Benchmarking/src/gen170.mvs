  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: [[s0]]
    var p1: [[s1]]
    var p2: [s1]
    var p3: [[s1]]
  } in
  let f62: (Float) -> Float = (v0: Float) -> Float {
    var v6: Float = v0 in
    let v2: Float = v0 * v6 in
    let v7: [Float] = [v2] in
    let v5: Float = v7[0] in
    var v1: [Float] = v7 in
    var v3: [Float] = v1 in
    let v8: Float = v1[0] in
    let v20: Float = v7[0] in
    var v11: [Float] = v7 in
    var v10: [Float] = v3 in
    var v14: [Float] = v10 in
    var v13: Float = v2 in
    let v25: Float = v11[0] in
    var v16: Float = v5 in
    var v15: Float = v8 in
    let v22: Float = v3[0] in
    v14[0] = v15 in
    let v30: Float = v7[0] in
    v14[0] = v30 in
    v11[0] = v20 in
    let v18: Float = v14[0] in
    var v17: [Float] = v14 in
    v17[0] = v13 in
    var v35: [Float] = v17 in
    v35[0] = v25 in
    v11[0] = v22 in
    let v23: Float = v14[0] in
    let v46: Float = v10[0] in
    let v21: Float = v35[0] in
    let v29: Float = v1[0] in
    v3[0] = v46 in
    v3 = v1 in
    v1[0] = v0 in
    var v24: [Float] = v35 in
    v17[0] = v6 in
    var v71: Float = v18 in
    v24[0] = v23 in
    let v54: Float = v1[0] in
    let v43: Float = v35[0] in
    let v58: Float = v7[0] in
    v3[0] = v0 in
    var v68: [Float] = v14 in
    v11[0] = v23 in
    let v38: Float = v68[0] in
    v24[0] = v29 in
    let v75: [Float] = [v15, v54, v16, v21, v16, v58] in
    var v77: Float = v13 in
    v3[0] = v71 in
    var v59: [Float] = v75 in
    v3[0] = v58 in
    let v89: Float = v59[0] in
    v3[0] = v77 in
    v17[0] = v38 in
    v17 = v24 in
    let v53: Float = v89 / v21 in
    v11[0] = v43 in
    v53
  } in
  let noinline_f0: (s2, Float) -> Float = (v0: s2, v1: Float) -> Float {
    let v31: Float = v1 * v1 in
    let v72: Float = f62(v1) in
    let v103: Float = v1 / v72 in
    var v213: Float = v103 in
    let v109: Float = v213 - v31 in
    v109
  } in
  fun loop(i: Int, v0: s2, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2([[s0([[0.0]], [[1.0], [2.0], [3.0]])], [s0([[4.0]], [[5.0], [6.0], [7.0]])], [s0([[8.0]], [[9.0], [10.0], [11.0]])]], [[s1(s0([[12.0]], [[13.0], [14.0], [15.0]]), [s0([[16.0]], [[17.0], [18.0], [19.0]]), s0([[20.0]], [[21.0], [22.0], [23.0]]), s0([[24.0]], [[25.0], [26.0], [27.0]])])], [s1(s0([[28.0]], [[29.0], [30.0], [31.0]]), [s0([[32.0]], [[33.0], [34.0], [35.0]]), s0([[36.0]], [[37.0], [38.0], [39.0]]), s0([[40.0]], [[41.0], [42.0], [43.0]])])]], [s1(s0([[44.0]], [[45.0], [46.0], [47.0]]), [s0([[48.0]], [[49.0], [50.0], [51.0]]), s0([[52.0]], [[53.0], [54.0], [55.0]]), s0([[56.0]], [[57.0], [58.0], [59.0]])]), s1(s0([[60.0]], [[61.0], [62.0], [63.0]]), [s0([[64.0]], [[65.0], [66.0], [67.0]]), s0([[68.0]], [[69.0], [70.0], [71.0]]), s0([[72.0]], [[73.0], [74.0], [75.0]])])], [[s1(s0([[76.0]], [[77.0], [78.0], [79.0]]), [s0([[80.0]], [[81.0], [82.0], [83.0]]), s0([[84.0]], [[85.0], [86.0], [87.0]]), s0([[88.0]], [[89.0], [90.0], [91.0]])])], [s1(s0([[92.0]], [[93.0], [94.0], [95.0]]), [s0([[96.0]], [[97.0], [98.0], [99.0]]), s0([[100.0]], [[101.0], [102.0], [103.0]]), s0([[104.0]], [[105.0], [106.0], [107.0]])])], [s1(s0([[108.0]], [[109.0], [110.0], [111.0]]), [s0([[112.0]], [[113.0], [114.0], [115.0]]), s0([[116.0]], [[117.0], [118.0], [119.0]]), s0([[120.0]], [[121.0], [122.0], [123.0]])])]]) in
    let v1: Float = 124.0 in
    let initialResult: Float = 124.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()