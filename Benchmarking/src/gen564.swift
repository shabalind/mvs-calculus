  import Dispatch
  struct s0 {
    var p0: Double
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s2 {
    var p0: s0
    var p1: s0
  }
  struct s3 {
    var p0: s2
    var p1: [[s0]]
  }
  struct s4 {
    var p0: [s1]
    var p1: s1
  }
  struct s5 {
    var p0: s2
    var p1: s2
  }
  struct s6 {
    var p0: [s3]
    var p1: s4
    var p2: [s4]
    var p3: [s1]
    var p4: [[s4]]
  }
  func f14(_ v0: Double) -> Double {
    var v1: Double = v0
    let v6: Double = v1 - v1
    var v3: Double = v6
    var v2: Double = v0
    var v5: Double = v3
    var v4: Double = v2
    let v7: [Double] = [v5, v4, v2, v4, v2, v4]
    var v9: [Double] = v7
    let v8: Double = v7[4]
    v9[0] = v2
    var v11: [Double] = v9
    var v13: [Double] = v7
    var v18: [Double] = v13
    let v12: Double = v13[1]
    var v22: [Double] = v18
    var v19: Double = v6
    v11[1] = v2
    v13[0] = v1
    let v21: Double = v22[3]
    let v33: Double = v22[3]
    v13[4] = v1
    v19 = v3
    let v29: Double = v7[3]
    var v50: Double = v33
    v22[3] = v29
    v18 = v11
    var v72: Double = v19
    v18[3] = v8
    v50 = v21
    v13[1] = v12
    let v73: [Double] = [v8, v4]
    var v45: Double = v2
    v9[0] = v45
    v1 = v19
    let v145: Double = v73[1]
    var v68: Double = v72
    v19 = v145
    v45 = v68
    return v50
  }
  @inline(never)
  func f0(_ v0: [s5], _ v1: s5, _ v2: s0, _ v3: s6, _ v4: [s3], _ v5: s3, _ v6: [Double], _ v7: Double) -> Double {
    let v12: Double = v6[0]
    let v10: Double = f14(v12)
    return v10
  }
  func benchmark() {
    let v0: [s5] = [s5(p0: s2(p0: s0(p0: 0.0, p1: [[1.0]], p2: [[2.0]], p3: [[3.0], [4.0], [5.0]]), p1: s0(p0: 6.0, p1: [[7.0]], p2: [[8.0]], p3: [[9.0], [10.0], [11.0]])), p1: s2(p0: s0(p0: 12.0, p1: [[13.0]], p2: [[14.0]], p3: [[15.0], [16.0], [17.0]]), p1: s0(p0: 18.0, p1: [[19.0]], p2: [[20.0]], p3: [[21.0], [22.0], [23.0]])))]
    let v1: s5 = s5(p0: s2(p0: s0(p0: 24.0, p1: [[25.0]], p2: [[26.0]], p3: [[27.0], [28.0], [29.0]]), p1: s0(p0: 30.0, p1: [[31.0]], p2: [[32.0]], p3: [[33.0], [34.0], [35.0]])), p1: s2(p0: s0(p0: 36.0, p1: [[37.0]], p2: [[38.0]], p3: [[39.0], [40.0], [41.0]]), p1: s0(p0: 42.0, p1: [[43.0]], p2: [[44.0]], p3: [[45.0], [46.0], [47.0]])))
    let v2: s0 = s0(p0: 48.0, p1: [[49.0]], p2: [[50.0]], p3: [[51.0], [52.0], [53.0]])
    let v3: s6 = s6(p0: [s3(p0: s2(p0: s0(p0: 54.0, p1: [[55.0]], p2: [[56.0]], p3: [[57.0], [58.0], [59.0]]), p1: s0(p0: 60.0, p1: [[61.0]], p2: [[62.0]], p3: [[63.0], [64.0], [65.0]])), p1: [[s0(p0: 66.0, p1: [[67.0]], p2: [[68.0]], p3: [[69.0], [70.0], [71.0]])], [s0(p0: 72.0, p1: [[73.0]], p2: [[74.0]], p3: [[75.0], [76.0], [77.0]])]])], p1: s4(p0: [s1(p0: [s0(p0: 78.0, p1: [[79.0]], p2: [[80.0]], p3: [[81.0], [82.0], [83.0]])], p1: [s0(p0: 84.0, p1: [[85.0]], p2: [[86.0]], p3: [[87.0], [88.0], [89.0]]), s0(p0: 90.0, p1: [[91.0]], p2: [[92.0]], p3: [[93.0], [94.0], [95.0]]), s0(p0: 96.0, p1: [[97.0]], p2: [[98.0]], p3: [[99.0], [100.0], [101.0]])]), s1(p0: [s0(p0: 102.0, p1: [[103.0]], p2: [[104.0]], p3: [[105.0], [106.0], [107.0]])], p1: [s0(p0: 108.0, p1: [[109.0]], p2: [[110.0]], p3: [[111.0], [112.0], [113.0]]), s0(p0: 114.0, p1: [[115.0]], p2: [[116.0]], p3: [[117.0], [118.0], [119.0]]), s0(p0: 120.0, p1: [[121.0]], p2: [[122.0]], p3: [[123.0], [124.0], [125.0]])]), s1(p0: [s0(p0: 126.0, p1: [[127.0]], p2: [[128.0]], p3: [[129.0], [130.0], [131.0]])], p1: [s0(p0: 132.0, p1: [[133.0]], p2: [[134.0]], p3: [[135.0], [136.0], [137.0]]), s0(p0: 138.0, p1: [[139.0]], p2: [[140.0]], p3: [[141.0], [142.0], [143.0]]), s0(p0: 144.0, p1: [[145.0]], p2: [[146.0]], p3: [[147.0], [148.0], [149.0]])])], p1: s1(p0: [s0(p0: 150.0, p1: [[151.0]], p2: [[152.0]], p3: [[153.0], [154.0], [155.0]])], p1: [s0(p0: 156.0, p1: [[157.0]], p2: [[158.0]], p3: [[159.0], [160.0], [161.0]]), s0(p0: 162.0, p1: [[163.0]], p2: [[164.0]], p3: [[165.0], [166.0], [167.0]]), s0(p0: 168.0, p1: [[169.0]], p2: [[170.0]], p3: [[171.0], [172.0], [173.0]])])), p2: [s4(p0: [s1(p0: [s0(p0: 174.0, p1: [[175.0]], p2: [[176.0]], p3: [[177.0], [178.0], [179.0]])], p1: [s0(p0: 180.0, p1: [[181.0]], p2: [[182.0]], p3: [[183.0], [184.0], [185.0]]), s0(p0: 186.0, p1: [[187.0]], p2: [[188.0]], p3: [[189.0], [190.0], [191.0]]), s0(p0: 192.0, p1: [[193.0]], p2: [[194.0]], p3: [[195.0], [196.0], [197.0]])]), s1(p0: [s0(p0: 198.0, p1: [[199.0]], p2: [[200.0]], p3: [[201.0], [202.0], [203.0]])], p1: [s0(p0: 204.0, p1: [[205.0]], p2: [[206.0]], p3: [[207.0], [208.0], [209.0]]), s0(p0: 210.0, p1: [[211.0]], p2: [[212.0]], p3: [[213.0], [214.0], [215.0]]), s0(p0: 216.0, p1: [[217.0]], p2: [[218.0]], p3: [[219.0], [220.0], [221.0]])]), s1(p0: [s0(p0: 222.0, p1: [[223.0]], p2: [[224.0]], p3: [[225.0], [226.0], [227.0]])], p1: [s0(p0: 228.0, p1: [[229.0]], p2: [[230.0]], p3: [[231.0], [232.0], [233.0]]), s0(p0: 234.0, p1: [[235.0]], p2: [[236.0]], p3: [[237.0], [238.0], [239.0]]), s0(p0: 240.0, p1: [[241.0]], p2: [[242.0]], p3: [[243.0], [244.0], [245.0]])])], p1: s1(p0: [s0(p0: 246.0, p1: [[247.0]], p2: [[248.0]], p3: [[249.0], [250.0], [251.0]])], p1: [s0(p0: 252.0, p1: [[253.0]], p2: [[254.0]], p3: [[255.0], [256.0], [257.0]]), s0(p0: 258.0, p1: [[259.0]], p2: [[260.0]], p3: [[261.0], [262.0], [263.0]]), s0(p0: 264.0, p1: [[265.0]], p2: [[266.0]], p3: [[267.0], [268.0], [269.0]])])), s4(p0: [s1(p0: [s0(p0: 270.0, p1: [[271.0]], p2: [[272.0]], p3: [[273.0], [274.0], [275.0]])], p1: [s0(p0: 276.0, p1: [[277.0]], p2: [[278.0]], p3: [[279.0], [280.0], [281.0]]), s0(p0: 282.0, p1: [[283.0]], p2: [[284.0]], p3: [[285.0], [286.0], [287.0]]), s0(p0: 288.0, p1: [[289.0]], p2: [[290.0]], p3: [[291.0], [292.0], [293.0]])]), s1(p0: [s0(p0: 294.0, p1: [[295.0]], p2: [[296.0]], p3: [[297.0], [298.0], [299.0]])], p1: [s0(p0: 300.0, p1: [[301.0]], p2: [[302.0]], p3: [[303.0], [304.0], [305.0]]), s0(p0: 306.0, p1: [[307.0]], p2: [[308.0]], p3: [[309.0], [310.0], [311.0]]), s0(p0: 312.0, p1: [[313.0]], p2: [[314.0]], p3: [[315.0], [316.0], [317.0]])]), s1(p0: [s0(p0: 318.0, p1: [[319.0]], p2: [[320.0]], p3: [[321.0], [322.0], [323.0]])], p1: [s0(p0: 324.0, p1: [[325.0]], p2: [[326.0]], p3: [[327.0], [328.0], [329.0]]), s0(p0: 330.0, p1: [[331.0]], p2: [[332.0]], p3: [[333.0], [334.0], [335.0]]), s0(p0: 336.0, p1: [[337.0]], p2: [[338.0]], p3: [[339.0], [340.0], [341.0]])])], p1: s1(p0: [s0(p0: 342.0, p1: [[343.0]], p2: [[344.0]], p3: [[345.0], [346.0], [347.0]])], p1: [s0(p0: 348.0, p1: [[349.0]], p2: [[350.0]], p3: [[351.0], [352.0], [353.0]]), s0(p0: 354.0, p1: [[355.0]], p2: [[356.0]], p3: [[357.0], [358.0], [359.0]]), s0(p0: 360.0, p1: [[361.0]], p2: [[362.0]], p3: [[363.0], [364.0], [365.0]])])), s4(p0: [s1(p0: [s0(p0: 366.0, p1: [[367.0]], p2: [[368.0]], p3: [[369.0], [370.0], [371.0]])], p1: [s0(p0: 372.0, p1: [[373.0]], p2: [[374.0]], p3: [[375.0], [376.0], [377.0]]), s0(p0: 378.0, p1: [[379.0]], p2: [[380.0]], p3: [[381.0], [382.0], [383.0]]), s0(p0: 384.0, p1: [[385.0]], p2: [[386.0]], p3: [[387.0], [388.0], [389.0]])]), s1(p0: [s0(p0: 390.0, p1: [[391.0]], p2: [[392.0]], p3: [[393.0], [394.0], [395.0]])], p1: [s0(p0: 396.0, p1: [[397.0]], p2: [[398.0]], p3: [[399.0], [400.0], [401.0]]), s0(p0: 402.0, p1: [[403.0]], p2: [[404.0]], p3: [[405.0], [406.0], [407.0]]), s0(p0: 408.0, p1: [[409.0]], p2: [[410.0]], p3: [[411.0], [412.0], [413.0]])]), s1(p0: [s0(p0: 414.0, p1: [[415.0]], p2: [[416.0]], p3: [[417.0], [418.0], [419.0]])], p1: [s0(p0: 420.0, p1: [[421.0]], p2: [[422.0]], p3: [[423.0], [424.0], [425.0]]), s0(p0: 426.0, p1: [[427.0]], p2: [[428.0]], p3: [[429.0], [430.0], [431.0]]), s0(p0: 432.0, p1: [[433.0]], p2: [[434.0]], p3: [[435.0], [436.0], [437.0]])])], p1: s1(p0: [s0(p0: 438.0, p1: [[439.0]], p2: [[440.0]], p3: [[441.0], [442.0], [443.0]])], p1: [s0(p0: 444.0, p1: [[445.0]], p2: [[446.0]], p3: [[447.0], [448.0], [449.0]]), s0(p0: 450.0, p1: [[451.0]], p2: [[452.0]], p3: [[453.0], [454.0], [455.0]]), s0(p0: 456.0, p1: [[457.0]], p2: [[458.0]], p3: [[459.0], [460.0], [461.0]])]))], p3: [s1(p0: [s0(p0: 462.0, p1: [[463.0]], p2: [[464.0]], p3: [[465.0], [466.0], [467.0]])], p1: [s0(p0: 468.0, p1: [[469.0]], p2: [[470.0]], p3: [[471.0], [472.0], [473.0]]), s0(p0: 474.0, p1: [[475.0]], p2: [[476.0]], p3: [[477.0], [478.0], [479.0]]), s0(p0: 480.0, p1: [[481.0]], p2: [[482.0]], p3: [[483.0], [484.0], [485.0]])]), s1(p0: [s0(p0: 486.0, p1: [[487.0]], p2: [[488.0]], p3: [[489.0], [490.0], [491.0]])], p1: [s0(p0: 492.0, p1: [[493.0]], p2: [[494.0]], p3: [[495.0], [496.0], [497.0]]), s0(p0: 498.0, p1: [[499.0]], p2: [[500.0]], p3: [[501.0], [502.0], [503.0]]), s0(p0: 504.0, p1: [[505.0]], p2: [[506.0]], p3: [[507.0], [508.0], [509.0]])])], p4: [[s4(p0: [s1(p0: [s0(p0: 510.0, p1: [[511.0]], p2: [[512.0]], p3: [[513.0], [514.0], [515.0]])], p1: [s0(p0: 516.0, p1: [[517.0]], p2: [[518.0]], p3: [[519.0], [520.0], [521.0]]), s0(p0: 522.0, p1: [[523.0]], p2: [[524.0]], p3: [[525.0], [526.0], [527.0]]), s0(p0: 528.0, p1: [[529.0]], p2: [[530.0]], p3: [[531.0], [532.0], [533.0]])]), s1(p0: [s0(p0: 534.0, p1: [[535.0]], p2: [[536.0]], p3: [[537.0], [538.0], [539.0]])], p1: [s0(p0: 540.0, p1: [[541.0]], p2: [[542.0]], p3: [[543.0], [544.0], [545.0]]), s0(p0: 546.0, p1: [[547.0]], p2: [[548.0]], p3: [[549.0], [550.0], [551.0]]), s0(p0: 552.0, p1: [[553.0]], p2: [[554.0]], p3: [[555.0], [556.0], [557.0]])]), s1(p0: [s0(p0: 558.0, p1: [[559.0]], p2: [[560.0]], p3: [[561.0], [562.0], [563.0]])], p1: [s0(p0: 564.0, p1: [[565.0]], p2: [[566.0]], p3: [[567.0], [568.0], [569.0]]), s0(p0: 570.0, p1: [[571.0]], p2: [[572.0]], p3: [[573.0], [574.0], [575.0]]), s0(p0: 576.0, p1: [[577.0]], p2: [[578.0]], p3: [[579.0], [580.0], [581.0]])])], p1: s1(p0: [s0(p0: 582.0, p1: [[583.0]], p2: [[584.0]], p3: [[585.0], [586.0], [587.0]])], p1: [s0(p0: 588.0, p1: [[589.0]], p2: [[590.0]], p3: [[591.0], [592.0], [593.0]]), s0(p0: 594.0, p1: [[595.0]], p2: [[596.0]], p3: [[597.0], [598.0], [599.0]]), s0(p0: 600.0, p1: [[601.0]], p2: [[602.0]], p3: [[603.0], [604.0], [605.0]])]))], [s4(p0: [s1(p0: [s0(p0: 606.0, p1: [[607.0]], p2: [[608.0]], p3: [[609.0], [610.0], [611.0]])], p1: [s0(p0: 612.0, p1: [[613.0]], p2: [[614.0]], p3: [[615.0], [616.0], [617.0]]), s0(p0: 618.0, p1: [[619.0]], p2: [[620.0]], p3: [[621.0], [622.0], [623.0]]), s0(p0: 624.0, p1: [[625.0]], p2: [[626.0]], p3: [[627.0], [628.0], [629.0]])]), s1(p0: [s0(p0: 630.0, p1: [[631.0]], p2: [[632.0]], p3: [[633.0], [634.0], [635.0]])], p1: [s0(p0: 636.0, p1: [[637.0]], p2: [[638.0]], p3: [[639.0], [640.0], [641.0]]), s0(p0: 642.0, p1: [[643.0]], p2: [[644.0]], p3: [[645.0], [646.0], [647.0]]), s0(p0: 648.0, p1: [[649.0]], p2: [[650.0]], p3: [[651.0], [652.0], [653.0]])]), s1(p0: [s0(p0: 654.0, p1: [[655.0]], p2: [[656.0]], p3: [[657.0], [658.0], [659.0]])], p1: [s0(p0: 660.0, p1: [[661.0]], p2: [[662.0]], p3: [[663.0], [664.0], [665.0]]), s0(p0: 666.0, p1: [[667.0]], p2: [[668.0]], p3: [[669.0], [670.0], [671.0]]), s0(p0: 672.0, p1: [[673.0]], p2: [[674.0]], p3: [[675.0], [676.0], [677.0]])])], p1: s1(p0: [s0(p0: 678.0, p1: [[679.0]], p2: [[680.0]], p3: [[681.0], [682.0], [683.0]])], p1: [s0(p0: 684.0, p1: [[685.0]], p2: [[686.0]], p3: [[687.0], [688.0], [689.0]]), s0(p0: 690.0, p1: [[691.0]], p2: [[692.0]], p3: [[693.0], [694.0], [695.0]]), s0(p0: 696.0, p1: [[697.0]], p2: [[698.0]], p3: [[699.0], [700.0], [701.0]])]))]])
    let v4: [s3] = [s3(p0: s2(p0: s0(p0: 702.0, p1: [[703.0]], p2: [[704.0]], p3: [[705.0], [706.0], [707.0]]), p1: s0(p0: 708.0, p1: [[709.0]], p2: [[710.0]], p3: [[711.0], [712.0], [713.0]])), p1: [[s0(p0: 714.0, p1: [[715.0]], p2: [[716.0]], p3: [[717.0], [718.0], [719.0]])], [s0(p0: 720.0, p1: [[721.0]], p2: [[722.0]], p3: [[723.0], [724.0], [725.0]])]]), s3(p0: s2(p0: s0(p0: 726.0, p1: [[727.0]], p2: [[728.0]], p3: [[729.0], [730.0], [731.0]]), p1: s0(p0: 732.0, p1: [[733.0]], p2: [[734.0]], p3: [[735.0], [736.0], [737.0]])), p1: [[s0(p0: 738.0, p1: [[739.0]], p2: [[740.0]], p3: [[741.0], [742.0], [743.0]])], [s0(p0: 744.0, p1: [[745.0]], p2: [[746.0]], p3: [[747.0], [748.0], [749.0]])]]), s3(p0: s2(p0: s0(p0: 750.0, p1: [[751.0]], p2: [[752.0]], p3: [[753.0], [754.0], [755.0]]), p1: s0(p0: 756.0, p1: [[757.0]], p2: [[758.0]], p3: [[759.0], [760.0], [761.0]])), p1: [[s0(p0: 762.0, p1: [[763.0]], p2: [[764.0]], p3: [[765.0], [766.0], [767.0]])], [s0(p0: 768.0, p1: [[769.0]], p2: [[770.0]], p3: [[771.0], [772.0], [773.0]])]])]
    let v5: s3 = s3(p0: s2(p0: s0(p0: 774.0, p1: [[775.0]], p2: [[776.0]], p3: [[777.0], [778.0], [779.0]]), p1: s0(p0: 780.0, p1: [[781.0]], p2: [[782.0]], p3: [[783.0], [784.0], [785.0]])), p1: [[s0(p0: 786.0, p1: [[787.0]], p2: [[788.0]], p3: [[789.0], [790.0], [791.0]])], [s0(p0: 792.0, p1: [[793.0]], p2: [[794.0]], p3: [[795.0], [796.0], [797.0]])]])
    let v6: [Double] = [798.0]
    let v7: Double = 799.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 799.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4, v5, v6, v7)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
