  struct s0 {
    var p0: [Float]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
    var p2: [s0]
    var p3: [s0]
  } in
  struct s2 {
    var p0: s0
    var p1: s1
    var p2: s1
    var p3: s0
    var p4: s0
    var p5: s1
    var p6: [s0]
    var p7: s0
  } in
  struct s4 {
    var p0: s1
    var p1: s1
  } in
  let noinline_f0: (s2, Float) -> Float = (v0: s2, v1: Float) -> Float {
    let v2: s1 = v0.p1 in
    let v5: s1 = v0.p1 in
    var v8: s1 = v5 in
    let v10: [s1] = [v2] in
    let v3: [s1] = [v2, v2, v5, v2, v8] in
    let v4: s1 = v3[1] in
    var v9: s2 = v0 in
    var v13: [s1] = v3 in
    let v14: s1 = v10[0] in
    var v17: [s1] = v13 in
    let v12: [s0] = v4.p3 in
    let v15: s0 = v9.p7 in
    v8.p0 = v15 in
    var v11: s1 = v2 in
    let v16: s0 = v5.p0 in
    v13[3] = v4 in
    v11.p0 = v16 in
    v17[0] = v8 in
    let v23: s0 = v12[0] in
    v13[2] = v8 in
    let v22: s0 = v0.p0 in
    let v26: s1 = v10[0] in
    v13[0] = v11 in
    let v50: s0 = v8.p0 in
    let v28: s1 = v0.p5 in
    v9.p1 = v4 in
    let v55: s4 = s4(v5, v8) in
    let v21: s1 = v55.p1 in
    v8.p1 = v50 in
    v9.p2 = v14 in
    var v43: s2 = v0 in
    v11.p3 = v12 in
    v9 = v43 in
    var v32: s4 = v55 in
    v8 = v14 in
    v43.p1 = v21 in
    var v52: s1 = v8 in
    v52.p1 = v22 in
    v8.p0 = v23 in
    v32.p1 = v11 in
    v52.p1 = v15 in
    let v61: s1 = v32.p1 in
    v43.p1 = v52 in
    let v86: [s0] = v28.p2 in
    v8 = v5 in
    v52.p2 = v86 in
    let v44: s0 = v9.p3 in
    v32.p1 = v2 in
    v9.p1 = v61 in
    var v80: s0 = v44 in
    let v137: [Float] = v80.p0 in
    v32.p1 = v26 in
    v32.p0 = v52 in
    let v119: s1 = v17[3] in
    var v97: s1 = v119 in
    let v114: Float = v137[0] in
    v32.p0 = v97 in
    v17 = v13 in
    v114
  } in
  fun loop(i: Int, v0: s2, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(s0([0.0], [[1.0], [2.0]]), s1(s0([3.0], [[4.0], [5.0]]), s0([6.0], [[7.0], [8.0]]), [s0([9.0], [[10.0], [11.0]]), s0([12.0], [[13.0], [14.0]])], [s0([15.0], [[16.0], [17.0]])]), s1(s0([18.0], [[19.0], [20.0]]), s0([21.0], [[22.0], [23.0]]), [s0([24.0], [[25.0], [26.0]]), s0([27.0], [[28.0], [29.0]])], [s0([30.0], [[31.0], [32.0]])]), s0([33.0], [[34.0], [35.0]]), s0([36.0], [[37.0], [38.0]]), s1(s0([39.0], [[40.0], [41.0]]), s0([42.0], [[43.0], [44.0]]), [s0([45.0], [[46.0], [47.0]]), s0([48.0], [[49.0], [50.0]])], [s0([51.0], [[52.0], [53.0]])]), [s0([54.0], [[55.0], [56.0]]), s0([57.0], [[58.0], [59.0]])], s0([60.0], [[61.0], [62.0]])) in
    let v1: Float = 63.0 in
    let initialResult: Float = 63.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()