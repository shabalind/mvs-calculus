  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  } in
  struct s2 {
    var p0: s1
    var p1: s1
  } in
  let noinline_f0: (s2, Float) -> Float = (v0: s2, v1: Float) -> Float {
    var v4: Float = v1 in
    var v15: Float = v1 in
    let v12: Float = v1 * v1 in
    var v46: Float = v1 in
    var v32: Float = v4 in
    var v36: Float = v32 in
    let v165: Float = v46 / v12 in
    var v113: Float = v165 in
    let v141: Float = v46 - v36 in
    let v81: Float = v141 / v15 in
    let v105: Float = v113 + v81 in
    v105
  } in
  fun loop(i: Int, v0: s2, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(s1([[s0([[0.0]], [[1.0], [2.0], [3.0]])]], s0([[4.0]], [[5.0], [6.0], [7.0]])), s1([[s0([[8.0]], [[9.0], [10.0], [11.0]])]], s0([[12.0]], [[13.0], [14.0], [15.0]]))) in
    let v1: Float = 16.0 in
    let initialResult: Float = 16.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()