  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let f30: (Float) -> Float = (v0: Float) -> Float {
    var v6: Float = v0 in
    let v3: Float = v6 * v0 in
    let v4: Float = v6 * v3 in
    var v2: Float = v6 in
    var v1: Float = v2 in
    var v7: Float = v3 in
    var v15: Float = v4 in
    let v21: [Float] = [v15, v4] in
    var v22: [Float] = v21 in
    v22[1] = v7 in
    v22[0] = v0 in
    v22[0] = v1 in
    let v13: Float = v22[0] in
    v6 = v7 in
    v13
  } in
  let noinline_f0: (s0, Float) -> Float = (v0: s0, v1: Float) -> Float {
    let v4: Float = f30(v1) in
    let v12: Float = f30(v1) in
    let v7: Float = f30(v1) in
    var v19: Float = v1 in
    var v51: Float = v12 in
    let v30: Float = f30(v51) in
    let v38: [Float] = [v51, v4, v19, v1, v30, v7] in
    let v49: Float = v38[5] in
    v51 = v1 in
    var v56: [Float] = v38 in
    let v61: Float = f30(v1) in
    v56[3] = v49 in
    v56[3] = v61 in
    var v74: [Float] = v56 in
    let v96: Float = v74[1] in
    v74[1] = v7 in
    v96
  } in
  fun loop(i: Int, v0: s0, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0]], [[2.0], [3.0]]) in
    let v1: Float = 4.0 in
    let initialResult: Float = 4.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()