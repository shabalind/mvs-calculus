  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
  }
  struct s2 {
    var p0: [[s1]]
    var p1: s0
  }
  struct s3 {
    var p0: [s2]
    var p1: s0
  }
  struct s6 {
    var p0: [s2]
    var p1: s0
  }
  @inline(never)
  func f0(_ v0: [s6], _ v1: s3, _ v2: Double) -> Double {
    let v4: s0 = v1.p1
    let v6: [[Double]] = v4.p1
    var v5: s0 = v4
    v5.p0 = v6
    v5.p0 = v6
    let v13: [[Double]] = v5.p1
    let v21: [[Double]] = v4.p0
    v5.p0 = v21
    let v27: [Double] = v13[0]
    let v44: [Double] = v6[0]
    let v49: Double = v27[0]
    let v39: Double = v44[0]
    var v52: Double = v49
    var v73: Double = v39
    let v121: Double = v52 / v73
    return v121
  }
  func benchmark() {
    let v0: [s6] = [s6(p0: [s2(p0: [[s1(p0: [[s0(p0: [[0.0]], p1: [[1.0]])]], p1: [s0(p0: [[2.0]], p1: [[3.0]]), s0(p0: [[4.0]], p1: [[5.0]])])], [s1(p0: [[s0(p0: [[6.0]], p1: [[7.0]])]], p1: [s0(p0: [[8.0]], p1: [[9.0]]), s0(p0: [[10.0]], p1: [[11.0]])])], [s1(p0: [[s0(p0: [[12.0]], p1: [[13.0]])]], p1: [s0(p0: [[14.0]], p1: [[15.0]]), s0(p0: [[16.0]], p1: [[17.0]])])]], p1: s0(p0: [[18.0]], p1: [[19.0]]))], p1: s0(p0: [[20.0]], p1: [[21.0]])), s6(p0: [s2(p0: [[s1(p0: [[s0(p0: [[22.0]], p1: [[23.0]])]], p1: [s0(p0: [[24.0]], p1: [[25.0]]), s0(p0: [[26.0]], p1: [[27.0]])])], [s1(p0: [[s0(p0: [[28.0]], p1: [[29.0]])]], p1: [s0(p0: [[30.0]], p1: [[31.0]]), s0(p0: [[32.0]], p1: [[33.0]])])], [s1(p0: [[s0(p0: [[34.0]], p1: [[35.0]])]], p1: [s0(p0: [[36.0]], p1: [[37.0]]), s0(p0: [[38.0]], p1: [[39.0]])])]], p1: s0(p0: [[40.0]], p1: [[41.0]]))], p1: s0(p0: [[42.0]], p1: [[43.0]]))]
    let v1: s3 = s3(p0: [s2(p0: [[s1(p0: [[s0(p0: [[44.0]], p1: [[45.0]])]], p1: [s0(p0: [[46.0]], p1: [[47.0]]), s0(p0: [[48.0]], p1: [[49.0]])])], [s1(p0: [[s0(p0: [[50.0]], p1: [[51.0]])]], p1: [s0(p0: [[52.0]], p1: [[53.0]]), s0(p0: [[54.0]], p1: [[55.0]])])], [s1(p0: [[s0(p0: [[56.0]], p1: [[57.0]])]], p1: [s0(p0: [[58.0]], p1: [[59.0]]), s0(p0: [[60.0]], p1: [[61.0]])])]], p1: s0(p0: [[62.0]], p1: [[63.0]])), s2(p0: [[s1(p0: [[s0(p0: [[64.0]], p1: [[65.0]])]], p1: [s0(p0: [[66.0]], p1: [[67.0]]), s0(p0: [[68.0]], p1: [[69.0]])])], [s1(p0: [[s0(p0: [[70.0]], p1: [[71.0]])]], p1: [s0(p0: [[72.0]], p1: [[73.0]]), s0(p0: [[74.0]], p1: [[75.0]])])], [s1(p0: [[s0(p0: [[76.0]], p1: [[77.0]])]], p1: [s0(p0: [[78.0]], p1: [[79.0]]), s0(p0: [[80.0]], p1: [[81.0]])])]], p1: s0(p0: [[82.0]], p1: [[83.0]]))], p1: s0(p0: [[84.0]], p1: [[85.0]]))
    let v2: Double = 86.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 86.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
