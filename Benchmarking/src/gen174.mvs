  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let f20: ([Float], Float) -> Float = (v0: [Float], v1: Float) -> Float {
    var v4: [Float] = v0 in
    var v3: [Float] = v4 in
    let v5: [[Float]] = [v3, v0, v3, v4] in
    let v8: [Float] = v5[3] in
    let v15: [[Float]] = [v3, v0, v4, v8, v4] in
    let v17: Float = v0[0] in
    v4[0] = v17 in
    var v41: [[Float]] = v15 in
    let v42: [Float] = v41[4] in
    let v166: Float = v42[0] in
    let v105: Float = v17 * v166 in
    v41[4] = v4 in
    v105
  } in
  let noinline_f0: ([s0], [[s0]], Float) -> Float = (v0: [s0], v1: [[s0]], v2: Float) -> Float {
    var v12: [[s0]] = v1 in
    let v15: [s0] = v12[0] in
    var v21: [s0] = v15 in
    let v24: s0 = v21[0] in
    v21[0] = v24 in
    let v20: [[Float]] = v24.p0 in
    let v38: [Float] = v20[1] in
    let v52: Float = f20(v38, v2) in
    v52
  } in
  fun loop(i: Int, v0: [s0], v1: [[s0]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]]), s0([[6.0], [7.0], [8.0]], [[9.0], [10.0], [11.0]])] in
    let v1: [[s0]] = [[s0([[12.0], [13.0], [14.0]], [[15.0], [16.0], [17.0]])], [s0([[18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0]])]] in
    let v2: Float = 24.0 in
    let initialResult: Float = 24.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()