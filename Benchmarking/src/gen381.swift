  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: s0
    var p1: s1
  }
  struct s3 {
    var p0: s1
    var p1: s1
  }
  struct s4 {
    var p0: [[s3]]
    var p1: [[s2]]
  }
  struct s6 {
    var p0: s2
    var p1: [[s4]]
  }
  struct s7 {
    var p0: s1
    var p1: s3
  }
  func f25(_ v0: s3) -> s3 {
    let v7: s1 = v0.p0
    let v1: s1 = v0.p0
    let v6: s0 = v7.p1
    let v4: s3 = s3(p0: v7, p1: v1)
    var v8: s3 = v0
    var v12: s1 = v7
    v8.p0 = v12
    let v11: [s3] = [v0]
    let v2: s2 = s2(p0: v6, p1: v7)
    var v5: [s3] = v11
    v8 = v4
    v5[0] = v4
    var v15: [s3] = v5
    v15[0] = v4
    let v26: s3 = v15[0]
    let v18: s1 = v8.p0
    let v17: s0 = v2.p0
    v8.p1 = v18
    v5[0] = v8
    v15[0] = v0
    v5[0] = v26
    v12.p1 = v17
    var v55: s3 = v26
    return v55
  }
  func f16(_ v0: [Double]) -> [Double] {
    let v2: Double = v0[0]
    var v4: [Double] = v0
    v4[0] = v2
    let v5: Double = v4[0]
    v4[0] = v5
    let v6: Double = v4[0]
    var v1: [Double] = v0
    v4 = v1
    var v7: Double = v6
    var v10: [Double] = v1
    v10[0] = v7
    return v10
  }
  func f14(_ v0: s1) -> s1 {
    var v1: s1 = v0
    let v6: s0 = v1.p1
    let v8: [[Double]] = v6.p1
    v1.p0 = v6
    let v7: s0 = v0.p0
    let v59: s0 = v0.p1
    let v27: s0 = v1.p0
    var v11: s1 = v0
    v1.p1 = v7
    let v19: s0 = v11.p0
    var v15: s0 = v27
    v1.p0 = v59
    v1.p0 = v15
    v11.p1 = v7
    v11.p0 = v7
    v15 = v6
    var v42: s1 = v0
    let v53: s0 = v0.p0
    v42.p1 = v19
    let v106: s0 = v1.p1
    v42.p1 = v106
    var v164: s0 = v53
    v1.p1 = v59
    v1.p0 = v164
    v15.p1 = v8
    return v42
  }
  func f4(_ v0: s7) -> s7 {
    var v3: s7 = v0
    var v8: s7 = v0
    var v2: s7 = v3
    var v1: s7 = v8
    var v4: s7 = v8
    var v6: s7 = v3
    let v5: s1 = v4.p0
    let v7: s1 = f14(v5)
    let v10: s1 = f14(v5)
    let v19: s1 = v1.p0
    v3.p0 = v19
    var v18: s1 = v5
    let v12: s1 = f14(v7)
    var v11: s7 = v1
    let v21: s1 = f14(v18)
    v11.p0 = v21
    var v16: s7 = v11
    v8.p0 = v12
    let v22: s1 = f14(v12)
    let v42: s3 = v2.p1
    var v41: s7 = v11
    let v69: s3 = v0.p1
    let v38: s3 = f25(v42)
    v2 = v16
    v3.p1 = v38
    var v29: s3 = v38
    v4.p1 = v38
    var v50: s3 = v38
    v2.p0 = v22
    let v34: s3 = f25(v29)
    v8.p1 = v34
    v8.p1 = v38
    v3.p1 = v69
    v50.p0 = v10
    let v61: s3 = f25(v50)
    v1 = v6
    v11.p1 = v61
    return v41
  }
  @inline(never)
  func f0(_ v0: [s6], _ v1: [s1], _ v2: [s7], _ v3: Double) -> Double {
    var v5: [s1] = v1
    var v6: [s1] = v1
    let v13: s7 = v2[1]
    let v8: s7 = f4(v13)
    let v20: s1 = v8.p0
    v5[0] = v20
    v5[1] = v20
    var v7: s1 = v20
    let v22: s1 = v6[0]
    v6[2] = v7
    var v23: s1 = v7
    let v24: s0 = v22.p0
    let v12: [[Double]] = v24.p0
    var v31: s1 = v20
    var v18: s0 = v24
    v18.p0 = v12
    v7.p1 = v18
    v5[2] = v31
    v31.p0 = v18
    v31.p1 = v24
    v18.p0 = v12
    let v38: s0 = v20.p1
    let v70: s0 = v23.p0
    let v66: s2 = s2(p0: v38, p1: v23)
    v7.p0 = v38
    let v85: [[Double]] = v18.p1
    let v62: s1 = v66.p1
    v31.p1 = v38
    let v33: s0 = v66.p0
    let v42: s1 = v66.p1
    var v61: [s1] = v5
    v23.p1 = v33
    v5[0] = v62
    let v59: [Double] = v12[0]
    v5[0] = v62
    v7.p0 = v70
    let v65: [Double] = f16(v59)
    v18.p1 = v85
    v31.p1 = v38
    let v128: s1 = v61[2]
    v6[1] = v128
    v61[0] = v42
    let v160: Double = v65[0]
    return v160
  }
  func benchmark() {
    let v0: [s6] = [s6(p0: s2(p0: s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0]]), p1: s1(p0: s0(p0: [[4.0], [5.0], [6.0]], p1: [[7.0]]), p1: s0(p0: [[8.0], [9.0], [10.0]], p1: [[11.0]]))), p1: [[s4(p0: [[s3(p0: s1(p0: s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0]]), p1: s0(p0: [[16.0], [17.0], [18.0]], p1: [[19.0]])), p1: s1(p0: s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0]]), p1: s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0]])))], [s3(p0: s1(p0: s0(p0: [[28.0], [29.0], [30.0]], p1: [[31.0]]), p1: s0(p0: [[32.0], [33.0], [34.0]], p1: [[35.0]])), p1: s1(p0: s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0]]), p1: s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0]])))], [s3(p0: s1(p0: s0(p0: [[44.0], [45.0], [46.0]], p1: [[47.0]]), p1: s0(p0: [[48.0], [49.0], [50.0]], p1: [[51.0]])), p1: s1(p0: s0(p0: [[52.0], [53.0], [54.0]], p1: [[55.0]]), p1: s0(p0: [[56.0], [57.0], [58.0]], p1: [[59.0]])))]], p1: [[s2(p0: s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0]]), p1: s1(p0: s0(p0: [[64.0], [65.0], [66.0]], p1: [[67.0]]), p1: s0(p0: [[68.0], [69.0], [70.0]], p1: [[71.0]])))], [s2(p0: s0(p0: [[72.0], [73.0], [74.0]], p1: [[75.0]]), p1: s1(p0: s0(p0: [[76.0], [77.0], [78.0]], p1: [[79.0]]), p1: s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0]])))], [s2(p0: s0(p0: [[84.0], [85.0], [86.0]], p1: [[87.0]]), p1: s1(p0: s0(p0: [[88.0], [89.0], [90.0]], p1: [[91.0]]), p1: s0(p0: [[92.0], [93.0], [94.0]], p1: [[95.0]])))]])], [s4(p0: [[s3(p0: s1(p0: s0(p0: [[96.0], [97.0], [98.0]], p1: [[99.0]]), p1: s0(p0: [[100.0], [101.0], [102.0]], p1: [[103.0]])), p1: s1(p0: s0(p0: [[104.0], [105.0], [106.0]], p1: [[107.0]]), p1: s0(p0: [[108.0], [109.0], [110.0]], p1: [[111.0]])))], [s3(p0: s1(p0: s0(p0: [[112.0], [113.0], [114.0]], p1: [[115.0]]), p1: s0(p0: [[116.0], [117.0], [118.0]], p1: [[119.0]])), p1: s1(p0: s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0]]), p1: s0(p0: [[124.0], [125.0], [126.0]], p1: [[127.0]])))], [s3(p0: s1(p0: s0(p0: [[128.0], [129.0], [130.0]], p1: [[131.0]]), p1: s0(p0: [[132.0], [133.0], [134.0]], p1: [[135.0]])), p1: s1(p0: s0(p0: [[136.0], [137.0], [138.0]], p1: [[139.0]]), p1: s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0]])))]], p1: [[s2(p0: s0(p0: [[144.0], [145.0], [146.0]], p1: [[147.0]]), p1: s1(p0: s0(p0: [[148.0], [149.0], [150.0]], p1: [[151.0]]), p1: s0(p0: [[152.0], [153.0], [154.0]], p1: [[155.0]])))], [s2(p0: s0(p0: [[156.0], [157.0], [158.0]], p1: [[159.0]]), p1: s1(p0: s0(p0: [[160.0], [161.0], [162.0]], p1: [[163.0]]), p1: s0(p0: [[164.0], [165.0], [166.0]], p1: [[167.0]])))], [s2(p0: s0(p0: [[168.0], [169.0], [170.0]], p1: [[171.0]]), p1: s1(p0: s0(p0: [[172.0], [173.0], [174.0]], p1: [[175.0]]), p1: s0(p0: [[176.0], [177.0], [178.0]], p1: [[179.0]])))]])]]), s6(p0: s2(p0: s0(p0: [[180.0], [181.0], [182.0]], p1: [[183.0]]), p1: s1(p0: s0(p0: [[184.0], [185.0], [186.0]], p1: [[187.0]]), p1: s0(p0: [[188.0], [189.0], [190.0]], p1: [[191.0]]))), p1: [[s4(p0: [[s3(p0: s1(p0: s0(p0: [[192.0], [193.0], [194.0]], p1: [[195.0]]), p1: s0(p0: [[196.0], [197.0], [198.0]], p1: [[199.0]])), p1: s1(p0: s0(p0: [[200.0], [201.0], [202.0]], p1: [[203.0]]), p1: s0(p0: [[204.0], [205.0], [206.0]], p1: [[207.0]])))], [s3(p0: s1(p0: s0(p0: [[208.0], [209.0], [210.0]], p1: [[211.0]]), p1: s0(p0: [[212.0], [213.0], [214.0]], p1: [[215.0]])), p1: s1(p0: s0(p0: [[216.0], [217.0], [218.0]], p1: [[219.0]]), p1: s0(p0: [[220.0], [221.0], [222.0]], p1: [[223.0]])))], [s3(p0: s1(p0: s0(p0: [[224.0], [225.0], [226.0]], p1: [[227.0]]), p1: s0(p0: [[228.0], [229.0], [230.0]], p1: [[231.0]])), p1: s1(p0: s0(p0: [[232.0], [233.0], [234.0]], p1: [[235.0]]), p1: s0(p0: [[236.0], [237.0], [238.0]], p1: [[239.0]])))]], p1: [[s2(p0: s0(p0: [[240.0], [241.0], [242.0]], p1: [[243.0]]), p1: s1(p0: s0(p0: [[244.0], [245.0], [246.0]], p1: [[247.0]]), p1: s0(p0: [[248.0], [249.0], [250.0]], p1: [[251.0]])))], [s2(p0: s0(p0: [[252.0], [253.0], [254.0]], p1: [[255.0]]), p1: s1(p0: s0(p0: [[256.0], [257.0], [258.0]], p1: [[259.0]]), p1: s0(p0: [[260.0], [261.0], [262.0]], p1: [[263.0]])))], [s2(p0: s0(p0: [[264.0], [265.0], [266.0]], p1: [[267.0]]), p1: s1(p0: s0(p0: [[268.0], [269.0], [270.0]], p1: [[271.0]]), p1: s0(p0: [[272.0], [273.0], [274.0]], p1: [[275.0]])))]])], [s4(p0: [[s3(p0: s1(p0: s0(p0: [[276.0], [277.0], [278.0]], p1: [[279.0]]), p1: s0(p0: [[280.0], [281.0], [282.0]], p1: [[283.0]])), p1: s1(p0: s0(p0: [[284.0], [285.0], [286.0]], p1: [[287.0]]), p1: s0(p0: [[288.0], [289.0], [290.0]], p1: [[291.0]])))], [s3(p0: s1(p0: s0(p0: [[292.0], [293.0], [294.0]], p1: [[295.0]]), p1: s0(p0: [[296.0], [297.0], [298.0]], p1: [[299.0]])), p1: s1(p0: s0(p0: [[300.0], [301.0], [302.0]], p1: [[303.0]]), p1: s0(p0: [[304.0], [305.0], [306.0]], p1: [[307.0]])))], [s3(p0: s1(p0: s0(p0: [[308.0], [309.0], [310.0]], p1: [[311.0]]), p1: s0(p0: [[312.0], [313.0], [314.0]], p1: [[315.0]])), p1: s1(p0: s0(p0: [[316.0], [317.0], [318.0]], p1: [[319.0]]), p1: s0(p0: [[320.0], [321.0], [322.0]], p1: [[323.0]])))]], p1: [[s2(p0: s0(p0: [[324.0], [325.0], [326.0]], p1: [[327.0]]), p1: s1(p0: s0(p0: [[328.0], [329.0], [330.0]], p1: [[331.0]]), p1: s0(p0: [[332.0], [333.0], [334.0]], p1: [[335.0]])))], [s2(p0: s0(p0: [[336.0], [337.0], [338.0]], p1: [[339.0]]), p1: s1(p0: s0(p0: [[340.0], [341.0], [342.0]], p1: [[343.0]]), p1: s0(p0: [[344.0], [345.0], [346.0]], p1: [[347.0]])))], [s2(p0: s0(p0: [[348.0], [349.0], [350.0]], p1: [[351.0]]), p1: s1(p0: s0(p0: [[352.0], [353.0], [354.0]], p1: [[355.0]]), p1: s0(p0: [[356.0], [357.0], [358.0]], p1: [[359.0]])))]])]]), s6(p0: s2(p0: s0(p0: [[360.0], [361.0], [362.0]], p1: [[363.0]]), p1: s1(p0: s0(p0: [[364.0], [365.0], [366.0]], p1: [[367.0]]), p1: s0(p0: [[368.0], [369.0], [370.0]], p1: [[371.0]]))), p1: [[s4(p0: [[s3(p0: s1(p0: s0(p0: [[372.0], [373.0], [374.0]], p1: [[375.0]]), p1: s0(p0: [[376.0], [377.0], [378.0]], p1: [[379.0]])), p1: s1(p0: s0(p0: [[380.0], [381.0], [382.0]], p1: [[383.0]]), p1: s0(p0: [[384.0], [385.0], [386.0]], p1: [[387.0]])))], [s3(p0: s1(p0: s0(p0: [[388.0], [389.0], [390.0]], p1: [[391.0]]), p1: s0(p0: [[392.0], [393.0], [394.0]], p1: [[395.0]])), p1: s1(p0: s0(p0: [[396.0], [397.0], [398.0]], p1: [[399.0]]), p1: s0(p0: [[400.0], [401.0], [402.0]], p1: [[403.0]])))], [s3(p0: s1(p0: s0(p0: [[404.0], [405.0], [406.0]], p1: [[407.0]]), p1: s0(p0: [[408.0], [409.0], [410.0]], p1: [[411.0]])), p1: s1(p0: s0(p0: [[412.0], [413.0], [414.0]], p1: [[415.0]]), p1: s0(p0: [[416.0], [417.0], [418.0]], p1: [[419.0]])))]], p1: [[s2(p0: s0(p0: [[420.0], [421.0], [422.0]], p1: [[423.0]]), p1: s1(p0: s0(p0: [[424.0], [425.0], [426.0]], p1: [[427.0]]), p1: s0(p0: [[428.0], [429.0], [430.0]], p1: [[431.0]])))], [s2(p0: s0(p0: [[432.0], [433.0], [434.0]], p1: [[435.0]]), p1: s1(p0: s0(p0: [[436.0], [437.0], [438.0]], p1: [[439.0]]), p1: s0(p0: [[440.0], [441.0], [442.0]], p1: [[443.0]])))], [s2(p0: s0(p0: [[444.0], [445.0], [446.0]], p1: [[447.0]]), p1: s1(p0: s0(p0: [[448.0], [449.0], [450.0]], p1: [[451.0]]), p1: s0(p0: [[452.0], [453.0], [454.0]], p1: [[455.0]])))]])], [s4(p0: [[s3(p0: s1(p0: s0(p0: [[456.0], [457.0], [458.0]], p1: [[459.0]]), p1: s0(p0: [[460.0], [461.0], [462.0]], p1: [[463.0]])), p1: s1(p0: s0(p0: [[464.0], [465.0], [466.0]], p1: [[467.0]]), p1: s0(p0: [[468.0], [469.0], [470.0]], p1: [[471.0]])))], [s3(p0: s1(p0: s0(p0: [[472.0], [473.0], [474.0]], p1: [[475.0]]), p1: s0(p0: [[476.0], [477.0], [478.0]], p1: [[479.0]])), p1: s1(p0: s0(p0: [[480.0], [481.0], [482.0]], p1: [[483.0]]), p1: s0(p0: [[484.0], [485.0], [486.0]], p1: [[487.0]])))], [s3(p0: s1(p0: s0(p0: [[488.0], [489.0], [490.0]], p1: [[491.0]]), p1: s0(p0: [[492.0], [493.0], [494.0]], p1: [[495.0]])), p1: s1(p0: s0(p0: [[496.0], [497.0], [498.0]], p1: [[499.0]]), p1: s0(p0: [[500.0], [501.0], [502.0]], p1: [[503.0]])))]], p1: [[s2(p0: s0(p0: [[504.0], [505.0], [506.0]], p1: [[507.0]]), p1: s1(p0: s0(p0: [[508.0], [509.0], [510.0]], p1: [[511.0]]), p1: s0(p0: [[512.0], [513.0], [514.0]], p1: [[515.0]])))], [s2(p0: s0(p0: [[516.0], [517.0], [518.0]], p1: [[519.0]]), p1: s1(p0: s0(p0: [[520.0], [521.0], [522.0]], p1: [[523.0]]), p1: s0(p0: [[524.0], [525.0], [526.0]], p1: [[527.0]])))], [s2(p0: s0(p0: [[528.0], [529.0], [530.0]], p1: [[531.0]]), p1: s1(p0: s0(p0: [[532.0], [533.0], [534.0]], p1: [[535.0]]), p1: s0(p0: [[536.0], [537.0], [538.0]], p1: [[539.0]])))]])]])]
    let v1: [s1] = [s1(p0: s0(p0: [[540.0], [541.0], [542.0]], p1: [[543.0]]), p1: s0(p0: [[544.0], [545.0], [546.0]], p1: [[547.0]])), s1(p0: s0(p0: [[548.0], [549.0], [550.0]], p1: [[551.0]]), p1: s0(p0: [[552.0], [553.0], [554.0]], p1: [[555.0]])), s1(p0: s0(p0: [[556.0], [557.0], [558.0]], p1: [[559.0]]), p1: s0(p0: [[560.0], [561.0], [562.0]], p1: [[563.0]]))]
    let v2: [s7] = [s7(p0: s1(p0: s0(p0: [[564.0], [565.0], [566.0]], p1: [[567.0]]), p1: s0(p0: [[568.0], [569.0], [570.0]], p1: [[571.0]])), p1: s3(p0: s1(p0: s0(p0: [[572.0], [573.0], [574.0]], p1: [[575.0]]), p1: s0(p0: [[576.0], [577.0], [578.0]], p1: [[579.0]])), p1: s1(p0: s0(p0: [[580.0], [581.0], [582.0]], p1: [[583.0]]), p1: s0(p0: [[584.0], [585.0], [586.0]], p1: [[587.0]])))), s7(p0: s1(p0: s0(p0: [[588.0], [589.0], [590.0]], p1: [[591.0]]), p1: s0(p0: [[592.0], [593.0], [594.0]], p1: [[595.0]])), p1: s3(p0: s1(p0: s0(p0: [[596.0], [597.0], [598.0]], p1: [[599.0]]), p1: s0(p0: [[600.0], [601.0], [602.0]], p1: [[603.0]])), p1: s1(p0: s0(p0: [[604.0], [605.0], [606.0]], p1: [[607.0]]), p1: s0(p0: [[608.0], [609.0], [610.0]], p1: [[611.0]]))))]
    let v3: Double = 612.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 612.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
