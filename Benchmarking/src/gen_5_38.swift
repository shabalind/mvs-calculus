  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: s0
    var p1: s0
  }
  struct s3 {
    var p0: s2
    var p1: s1
  }
  struct s4 {
    var p0: s3
    var p1: Double
  }
  struct s5 {
    var p0: [s2]
    var p1: [s0]
  }
  struct s6 {
    var p0: [s1]
    var p1: s4
  }
  func f17(_ v0: [s5], _ v1: Double) -> Double {
    let v8: s5 = v0[0]
    let v2: [s0] = v8.p1
    let v4: s0 = v2[0]
    let v23: Double = v1 - v1
    let v73: [[Double]] = v4.p1
    let v129: [Double] = v73[0]
    var v45: Double = v23
    let v39: Double = v129[0]
    let v65: Double = v39 + v45
    let v114: Double = v65 * v23
    let v193: Double = v39 - v114
    return v193
  }
  @inline(never)
  func f0(_ v0: [s3], _ v1: [s6], _ v2: [[s5]], _ v3: Double) -> Double {
    let v15: Double = v3 * v3
    let v30: [s5] = v2[1]
    let v73: [s5] = v2[0]
    let v36: Double = f17(v30, v15)
    let v50: Double = f17(v73, v36)
    return v50
  }
  func benchmark() {
    let v0: [s3] = [s3(p0: s2(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0], [4.0]]), p1: s0(p0: [[5.0], [6.0]], p1: [[7.0], [8.0], [9.0]])), p1: s1(p0: s0(p0: [[10.0], [11.0]], p1: [[12.0], [13.0], [14.0]]), p1: s0(p0: [[15.0], [16.0]], p1: [[17.0], [18.0], [19.0]]))), s3(p0: s2(p0: s0(p0: [[20.0], [21.0]], p1: [[22.0], [23.0], [24.0]]), p1: s0(p0: [[25.0], [26.0]], p1: [[27.0], [28.0], [29.0]])), p1: s1(p0: s0(p0: [[30.0], [31.0]], p1: [[32.0], [33.0], [34.0]]), p1: s0(p0: [[35.0], [36.0]], p1: [[37.0], [38.0], [39.0]]))), s3(p0: s2(p0: s0(p0: [[40.0], [41.0]], p1: [[42.0], [43.0], [44.0]]), p1: s0(p0: [[45.0], [46.0]], p1: [[47.0], [48.0], [49.0]])), p1: s1(p0: s0(p0: [[50.0], [51.0]], p1: [[52.0], [53.0], [54.0]]), p1: s0(p0: [[55.0], [56.0]], p1: [[57.0], [58.0], [59.0]])))]
    let v1: [s6] = [s6(p0: [s1(p0: s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0], [64.0]]), p1: s0(p0: [[65.0], [66.0]], p1: [[67.0], [68.0], [69.0]])), s1(p0: s0(p0: [[70.0], [71.0]], p1: [[72.0], [73.0], [74.0]]), p1: s0(p0: [[75.0], [76.0]], p1: [[77.0], [78.0], [79.0]]))], p1: s4(p0: s3(p0: s2(p0: s0(p0: [[80.0], [81.0]], p1: [[82.0], [83.0], [84.0]]), p1: s0(p0: [[85.0], [86.0]], p1: [[87.0], [88.0], [89.0]])), p1: s1(p0: s0(p0: [[90.0], [91.0]], p1: [[92.0], [93.0], [94.0]]), p1: s0(p0: [[95.0], [96.0]], p1: [[97.0], [98.0], [99.0]]))), p1: 100.0)), s6(p0: [s1(p0: s0(p0: [[101.0], [102.0]], p1: [[103.0], [104.0], [105.0]]), p1: s0(p0: [[106.0], [107.0]], p1: [[108.0], [109.0], [110.0]])), s1(p0: s0(p0: [[111.0], [112.0]], p1: [[113.0], [114.0], [115.0]]), p1: s0(p0: [[116.0], [117.0]], p1: [[118.0], [119.0], [120.0]]))], p1: s4(p0: s3(p0: s2(p0: s0(p0: [[121.0], [122.0]], p1: [[123.0], [124.0], [125.0]]), p1: s0(p0: [[126.0], [127.0]], p1: [[128.0], [129.0], [130.0]])), p1: s1(p0: s0(p0: [[131.0], [132.0]], p1: [[133.0], [134.0], [135.0]]), p1: s0(p0: [[136.0], [137.0]], p1: [[138.0], [139.0], [140.0]]))), p1: 141.0)), s6(p0: [s1(p0: s0(p0: [[142.0], [143.0]], p1: [[144.0], [145.0], [146.0]]), p1: s0(p0: [[147.0], [148.0]], p1: [[149.0], [150.0], [151.0]])), s1(p0: s0(p0: [[152.0], [153.0]], p1: [[154.0], [155.0], [156.0]]), p1: s0(p0: [[157.0], [158.0]], p1: [[159.0], [160.0], [161.0]]))], p1: s4(p0: s3(p0: s2(p0: s0(p0: [[162.0], [163.0]], p1: [[164.0], [165.0], [166.0]]), p1: s0(p0: [[167.0], [168.0]], p1: [[169.0], [170.0], [171.0]])), p1: s1(p0: s0(p0: [[172.0], [173.0]], p1: [[174.0], [175.0], [176.0]]), p1: s0(p0: [[177.0], [178.0]], p1: [[179.0], [180.0], [181.0]]))), p1: 182.0))]
    let v2: [[s5]] = [[s5(p0: [s2(p0: s0(p0: [[183.0], [184.0]], p1: [[185.0], [186.0], [187.0]]), p1: s0(p0: [[188.0], [189.0]], p1: [[190.0], [191.0], [192.0]])), s2(p0: s0(p0: [[193.0], [194.0]], p1: [[195.0], [196.0], [197.0]]), p1: s0(p0: [[198.0], [199.0]], p1: [[200.0], [201.0], [202.0]])), s2(p0: s0(p0: [[203.0], [204.0]], p1: [[205.0], [206.0], [207.0]]), p1: s0(p0: [[208.0], [209.0]], p1: [[210.0], [211.0], [212.0]]))], p1: [s0(p0: [[213.0], [214.0]], p1: [[215.0], [216.0], [217.0]]), s0(p0: [[218.0], [219.0]], p1: [[220.0], [221.0], [222.0]]), s0(p0: [[223.0], [224.0]], p1: [[225.0], [226.0], [227.0]])])], [s5(p0: [s2(p0: s0(p0: [[228.0], [229.0]], p1: [[230.0], [231.0], [232.0]]), p1: s0(p0: [[233.0], [234.0]], p1: [[235.0], [236.0], [237.0]])), s2(p0: s0(p0: [[238.0], [239.0]], p1: [[240.0], [241.0], [242.0]]), p1: s0(p0: [[243.0], [244.0]], p1: [[245.0], [246.0], [247.0]])), s2(p0: s0(p0: [[248.0], [249.0]], p1: [[250.0], [251.0], [252.0]]), p1: s0(p0: [[253.0], [254.0]], p1: [[255.0], [256.0], [257.0]]))], p1: [s0(p0: [[258.0], [259.0]], p1: [[260.0], [261.0], [262.0]]), s0(p0: [[263.0], [264.0]], p1: [[265.0], [266.0], [267.0]]), s0(p0: [[268.0], [269.0]], p1: [[270.0], [271.0], [272.0]])])]]
    let v3: Double = 273.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 273.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
