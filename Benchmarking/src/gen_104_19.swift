  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
  }
  struct s2 {
    var p0: s1
    var p1: s0
  }
  struct s3 {
    var p0: s2
    var p1: s0
  }
  @inline(never)
  func f0(_ v0: [s2], _ v1: Double, _ v2: [s0], _ v3: [s1], _ v4: s3, _ v5: s2, _ v6: [s1]) -> Double {
    let v30: Double = v1 * v1
    let v16: s0 = v2[1]
    let v19: [[Double]] = v16.p1
    let v37: [Double] = v19[0]
    let v36: Double = v37[0]
    let v17: [[Double]] = v16.p1
    let v39: [Double] = v17[1]
    let v47: Double = v39[0]
    let v67: Double = v36 / v30
    var v161: Double = v47
    let v147: Double = v161 + v67
    return v147
  }
  func benchmark() {
    let v0: [s2] = [s2(p0: s1(p0: [s0(p0: [[0.0]], p1: [[1.0], [2.0], [3.0]])], p1: [[s0(p0: [[4.0]], p1: [[5.0], [6.0], [7.0]])], [s0(p0: [[8.0]], p1: [[9.0], [10.0], [11.0]])]]), p1: s0(p0: [[12.0]], p1: [[13.0], [14.0], [15.0]])), s2(p0: s1(p0: [s0(p0: [[16.0]], p1: [[17.0], [18.0], [19.0]])], p1: [[s0(p0: [[20.0]], p1: [[21.0], [22.0], [23.0]])], [s0(p0: [[24.0]], p1: [[25.0], [26.0], [27.0]])]]), p1: s0(p0: [[28.0]], p1: [[29.0], [30.0], [31.0]])), s2(p0: s1(p0: [s0(p0: [[32.0]], p1: [[33.0], [34.0], [35.0]])], p1: [[s0(p0: [[36.0]], p1: [[37.0], [38.0], [39.0]])], [s0(p0: [[40.0]], p1: [[41.0], [42.0], [43.0]])]]), p1: s0(p0: [[44.0]], p1: [[45.0], [46.0], [47.0]]))]
    let v1: Double = 48.0
    let v2: [s0] = [s0(p0: [[49.0]], p1: [[50.0], [51.0], [52.0]]), s0(p0: [[53.0]], p1: [[54.0], [55.0], [56.0]]), s0(p0: [[57.0]], p1: [[58.0], [59.0], [60.0]])]
    let v3: [s1] = [s1(p0: [s0(p0: [[61.0]], p1: [[62.0], [63.0], [64.0]])], p1: [[s0(p0: [[65.0]], p1: [[66.0], [67.0], [68.0]])], [s0(p0: [[69.0]], p1: [[70.0], [71.0], [72.0]])]])]
    let v4: s3 = s3(p0: s2(p0: s1(p0: [s0(p0: [[73.0]], p1: [[74.0], [75.0], [76.0]])], p1: [[s0(p0: [[77.0]], p1: [[78.0], [79.0], [80.0]])], [s0(p0: [[81.0]], p1: [[82.0], [83.0], [84.0]])]]), p1: s0(p0: [[85.0]], p1: [[86.0], [87.0], [88.0]])), p1: s0(p0: [[89.0]], p1: [[90.0], [91.0], [92.0]]))
    let v5: s2 = s2(p0: s1(p0: [s0(p0: [[93.0]], p1: [[94.0], [95.0], [96.0]])], p1: [[s0(p0: [[97.0]], p1: [[98.0], [99.0], [100.0]])], [s0(p0: [[101.0]], p1: [[102.0], [103.0], [104.0]])]]), p1: s0(p0: [[105.0]], p1: [[106.0], [107.0], [108.0]]))
    let v6: [s1] = [s1(p0: [s0(p0: [[109.0]], p1: [[110.0], [111.0], [112.0]])], p1: [[s0(p0: [[113.0]], p1: [[114.0], [115.0], [116.0]])], [s0(p0: [[117.0]], p1: [[118.0], [119.0], [120.0]])]]), s1(p0: [s0(p0: [[121.0]], p1: [[122.0], [123.0], [124.0]])], p1: [[s0(p0: [[125.0]], p1: [[126.0], [127.0], [128.0]])], [s0(p0: [[129.0]], p1: [[130.0], [131.0], [132.0]])]])]
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = [StructValue(Name(str='s1', ty=None), [[StructValue(Name(str='s0', ty=None), [[[109.0]], [[110.0], [111.0], [112.0]]])], [[StructValue(Name(str='s0', ty=None), [[[113.0]], [[114.0], [115.0], [116.0]]])], [StructValue(Name(str='s0', ty=None), [[[117.0]], [[118.0], [119.0], [120.0]]])]]]), StructValue(Name(str='s1', ty=None), [[StructValue(Name(str='s0', ty=None), [[[121.0]], [[122.0], [123.0], [124.0]]])], [[StructValue(Name(str='s0', ty=None), [[[125.0]], [[126.0], [127.0], [128.0]]])], [StructValue(Name(str='s0', ty=None), [[[129.0]], [[130.0], [131.0], [132.0]]])]]])]
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4, v5, v6)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
