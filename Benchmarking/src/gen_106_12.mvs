  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s0
    var p1: [s1]
  } in
  let noinline_f0: ([s0], [s2], Float) -> Float = (v0: [s0], v1: [s2], v2: Float) -> Float {
    let v7: s0 = v0[0] in
    let v6: [[Float]] = v7.p0 in
    let v8: [Float] = v6[1] in
    var v4: [[Float]] = v6 in
    let v20: Float = v8[0] in
    v4[1] = v8 in
    let v50: [Float] = v4[0] in
    let v71: [Float] = v4[1] in
    let v75: Float = v50[0] in
    v4[0] = v71 in
    var v150: Float = v75 in
    let v55: Float = v20 - v150 in
    v55
  } in
  fun loop(i: Int, v0: [s0], v1: [s2], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0]], [[2.0], [3.0]])] in
    let v1: [s2] = [s2(s0([[4.0], [5.0]], [[6.0], [7.0]]), [s1(s0([[8.0], [9.0]], [[10.0], [11.0]]), s0([[12.0], [13.0]], [[14.0], [15.0]]))])] in
    let v2: Float = 16.0 in
    let initialResult: Float = 16.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()