  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let f12: (Float) -> Float = (v0: Float) -> Float {
    let v2: Float = v0 + v0 in
    var v7: Float = v2 in
    let v4: [Float] = [v7, v0, v7] in
    let v6: Float = v4[1] in
    v7 = v0 in
    var v3: Float = v2 in
    let v5: Float = v4[2] in
    var v8: Float = v5 in
    let v13: Float = v4[1] in
    var v1: [Float] = v4 in
    var v10: [Float] = v4 in
    v1[0] = v7 in
    v10[1] = v3 in
    let v25: Float = v1[0] in
    let v23: [Float] = [v6, v6, v7, v6, v13, v13, v6] in
    var v18: [Float] = v23 in
    let v9: Float = v23[1] in
    let v19: Float = v6 / v25 in
    v1[2] = v6 in
    v1[1] = v8 in
    let v21: Float = v2 + v7 in
    var v37: [Float] = v10 in
    let v73: Float = v10[0] in
    v18[6] = v19 in
    var v38: [Float] = v23 in
    var v20: [Float] = v18 in
    let v35: Float = v4[0] in
    var v63: [Float] = v20 in
    let v48: Float = v37[1] in
    v18[2] = v21 in
    var v52: Float = v6 in
    let v56: Float = v38[1] in
    v18[1] = v35 in
    v38[6] = v48 in
    v1[2] = v52 in
    v20[4] = v56 in
    v3 = v73 in
    var v77: [Float] = v38 in
    let v148: Float = v63[4] in
    v63[2] = v8 in
    v18 = v77 in
    v20[5] = v9 in
    v148
  } in
  let noinline_f0: ([s0], Float) -> Float = (v0: [s0], v1: Float) -> Float {
    let v21: Float = f12(v1) in
    let v17: Float = f12(v21) in
    v17
  } in
  fun loop(i: Int, v0: [s0], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]), s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]])] in
    let v1: Float = 10.0 in
    let initialResult: Float = 10.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()