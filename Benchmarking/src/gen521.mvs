  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
    var p3: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s0
    var p1: [s1]
  } in
  struct s8 {
    var p0: s2
    var p1: [[s2]]
  } in
  let f29: (Float) -> Float = (v0: Float) -> Float {
    var v3: Float = v0 in
    var v7: Float = v0 in
    v3 = v7 in
    var v6: Float = v3 in
    v3 = v6 in
    var v2: Float = v0 in
    var v9: Float = v2 in
    var v12: Float = v9 in
    let v13: [Float] = [v3, v12] in
    v7 = v2 in
    let v33: [[Float]] = [v13, v13, v13, v13, v13, v13, v13] in
    let v39: [Float] = v33[0] in
    var v25: [Float] = v13 in
    let v35: Float = v39[0] in
    var v19: [Float] = v25 in
    v19[0] = v7 in
    var v27: [Float] = v19 in
    let v48: Float = v27[1] in
    v27[0] = v35 in
    v48
  } in
  let noinline_f0: (s8, Float) -> Float = (v0: s8, v1: Float) -> Float {
    let v5: Float = f29(v1) in
    var v7: Float = v5 in
    v7
  } in
  fun loop(i: Int, v0: s8, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s8 = s8(s2(s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]], [[5.0], [6.0]], [[7.0], [8.0]]), [s1(s0([[9.0], [10.0]], [[11.0], [12.0], [13.0]], [[14.0], [15.0]], [[16.0], [17.0]]), s0([[18.0], [19.0]], [[20.0], [21.0], [22.0]], [[23.0], [24.0]], [[25.0], [26.0]]))]), [[s2(s0([[27.0], [28.0]], [[29.0], [30.0], [31.0]], [[32.0], [33.0]], [[34.0], [35.0]]), [s1(s0([[36.0], [37.0]], [[38.0], [39.0], [40.0]], [[41.0], [42.0]], [[43.0], [44.0]]), s0([[45.0], [46.0]], [[47.0], [48.0], [49.0]], [[50.0], [51.0]], [[52.0], [53.0]]))])], [s2(s0([[54.0], [55.0]], [[56.0], [57.0], [58.0]], [[59.0], [60.0]], [[61.0], [62.0]]), [s1(s0([[63.0], [64.0]], [[65.0], [66.0], [67.0]], [[68.0], [69.0]], [[70.0], [71.0]]), s0([[72.0], [73.0]], [[74.0], [75.0], [76.0]], [[77.0], [78.0]], [[79.0], [80.0]]))])]]) in
    let v1: Float = 81.0 in
    let initialResult: Float = 81.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()