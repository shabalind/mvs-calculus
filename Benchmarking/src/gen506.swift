  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: s1
    var p1: [[s0]]
  }
  struct s3 {
    var p0: s2
    var p1: s1
  }
  struct s4 {
    var p0: s1
    var p1: [s3]
  }
  struct s5 {
    var p0: [[s3]]
    var p1: s0
  }
  struct s6 {
    var p0: [s5]
    var p1: s0
    var p2: s3
    var p3: [[s4]]
  }
  func f48(_ v0: Double) -> Double {
    var v2: Double = v0
    var v9: Double = v0
    var v5: Double = v2
    var v8: Double = v5
    var v3: Double = v0
    let v6: Double = v8 + v9
    var v4: Double = v8
    let v11: [Double] = [v3, v6, v2, v4]
    let v13: Double = v11[0]
    let v14: Double = v11[1]
    var v18: [Double] = v11
    v18[0] = v14
    v18[0] = v14
    v18[0] = v6
    v5 = v13
    v18[0] = v3
    v18[3] = v6
    let v68: Double = v18[0]
    return v68
  }
  func f21(_ v0: s0) -> s0 {
    let v7: [[Double]] = v0.p1
    let v6: [[[Double]]] = [v7, v7, v7, v7, v7, v7]
    let v1: [Double] = v7[2]
    let v2: [[Double]] = v6[2]
    let v8: [[Double]] = v0.p0
    let v12: [[Double]] = v0.p1
    let v11: [[Double]] = v0.p1
    var v14: [[Double]] = v8
    let v15: [[Double]] = v0.p1
    var v23: [[Double]] = v8
    v14[0] = v1
    v14[0] = v1
    let v19: [[[Double]]] = [v8]
    let v25: [[Double]] = v19[0]
    let v28: [[Double]] = v0.p1
    var v24: s0 = v0
    let v41: [[Double]] = v24.p0
    let v59: [[Double]] = v0.p1
    v24.p1 = v28
    let v51: [[Double]] = v24.p1
    let v53: [[Double]] = v0.p0
    v24.p0 = v14
    v24.p1 = v15
    v24.p1 = v2
    let v33: [Double] = v51[0]
    var v103: [[Double]] = v53
    let v42: [Double] = v28[0]
    v14[0] = v33
    v24.p1 = v15
    v24.p0 = v23
    v24.p0 = v41
    v24.p1 = v12
    let v86: [[Double]] = v24.p1
    var v67: s0 = v0
    var v69: [[Double]] = v86
    v24.p0 = v41
    v67.p1 = v7
    let v161: [[Double]] = v67.p1
    v67.p1 = v161
    v67.p0 = v25
    let v52: [[Double]] = v0.p0
    var v60: s0 = v0
    v24.p0 = v103
    let v180: [Double] = v53[0]
    v69 = v161
    v24.p0 = v52
    v24.p1 = v59
    var v46: [Double] = v42
    v67.p1 = v7
    let v66: [[Double]] = v60.p1
    v69[1] = v180
    var v96: s0 = v60
    v60.p1 = v51
    v96.p1 = v66
    let v163: [[Double]] = v0.p1
    v24.p0 = v25
    v24.p1 = v11
    v24.p1 = v163
    v96.p1 = v69
    v23[0] = v46
    v103[0] = v33
    return v96
  }
  func f18(_ v0: s1) -> s1 {
    var v5: s1 = v0
    var v1: s1 = v5
    let v6: s0 = v1.p1
    let v7: s0 = f21(v6)
    let v2: s0 = f21(v6)
    let v10: s0 = f21(v2)
    let v9: [[Double]] = v2.p0
    let v8: s0 = f21(v7)
    let v15: s0 = f21(v10)
    let v11: s0 = v1.p0
    var v13: s0 = v8
    v5.p0 = v15
    let v14: s0 = f21(v7)
    var v34: s0 = v11
    let v32: [[Double]] = v11.p0
    let v28: [[Double]] = v15.p0
    v5.p1 = v11
    v34.p0 = v9
    let v24: [[Double]] = v34.p1
    v34.p0 = v32
    var v51: [[Double]] = v24
    var v26: [[Double]] = v28
    var v54: s1 = v5
    v13.p1 = v51
    v34.p0 = v26
    v34 = v15
    v54.p1 = v10
    v54.p1 = v14
    v5.p0 = v13
    v13.p0 = v28
    return v54
  }
  @inline(never)
  func f0(_ v0: [s3], _ v1: [s6], _ v2: Double) -> Double {
    let v8: s3 = v0[0]
    let v11: s3 = v0[0]
    let v13: s3 = v0[0]
    let v30: s1 = v8.p1
    var v23: s3 = v13
    let v45: s2 = v8.p0
    let v33: s1 = v23.p1
    let v32: s1 = f18(v33)
    v23 = v11
    v23.p1 = v30
    v23.p0 = v45
    let v41: s1 = f18(v32)
    let v31: s0 = v41.p0
    let v42: [[Double]] = v31.p0
    let v64: [Double] = v42[0]
    let v96: Double = v64[0]
    let v175: Double = f48(v96)
    return v175
  }
  func benchmark() {
    let v0: [s3] = [s3(p0: s2(p0: s1(p0: s0(p0: [[0.0]], p1: [[1.0], [2.0], [3.0]]), p1: s0(p0: [[4.0]], p1: [[5.0], [6.0], [7.0]])), p1: [[s0(p0: [[8.0]], p1: [[9.0], [10.0], [11.0]])]]), p1: s1(p0: s0(p0: [[12.0]], p1: [[13.0], [14.0], [15.0]]), p1: s0(p0: [[16.0]], p1: [[17.0], [18.0], [19.0]])))]
    let v1: [s6] = [s6(p0: [s5(p0: [[s3(p0: s2(p0: s1(p0: s0(p0: [[20.0]], p1: [[21.0], [22.0], [23.0]]), p1: s0(p0: [[24.0]], p1: [[25.0], [26.0], [27.0]])), p1: [[s0(p0: [[28.0]], p1: [[29.0], [30.0], [31.0]])]]), p1: s1(p0: s0(p0: [[32.0]], p1: [[33.0], [34.0], [35.0]]), p1: s0(p0: [[36.0]], p1: [[37.0], [38.0], [39.0]])))], [s3(p0: s2(p0: s1(p0: s0(p0: [[40.0]], p1: [[41.0], [42.0], [43.0]]), p1: s0(p0: [[44.0]], p1: [[45.0], [46.0], [47.0]])), p1: [[s0(p0: [[48.0]], p1: [[49.0], [50.0], [51.0]])]]), p1: s1(p0: s0(p0: [[52.0]], p1: [[53.0], [54.0], [55.0]]), p1: s0(p0: [[56.0]], p1: [[57.0], [58.0], [59.0]])))]], p1: s0(p0: [[60.0]], p1: [[61.0], [62.0], [63.0]])), s5(p0: [[s3(p0: s2(p0: s1(p0: s0(p0: [[64.0]], p1: [[65.0], [66.0], [67.0]]), p1: s0(p0: [[68.0]], p1: [[69.0], [70.0], [71.0]])), p1: [[s0(p0: [[72.0]], p1: [[73.0], [74.0], [75.0]])]]), p1: s1(p0: s0(p0: [[76.0]], p1: [[77.0], [78.0], [79.0]]), p1: s0(p0: [[80.0]], p1: [[81.0], [82.0], [83.0]])))], [s3(p0: s2(p0: s1(p0: s0(p0: [[84.0]], p1: [[85.0], [86.0], [87.0]]), p1: s0(p0: [[88.0]], p1: [[89.0], [90.0], [91.0]])), p1: [[s0(p0: [[92.0]], p1: [[93.0], [94.0], [95.0]])]]), p1: s1(p0: s0(p0: [[96.0]], p1: [[97.0], [98.0], [99.0]]), p1: s0(p0: [[100.0]], p1: [[101.0], [102.0], [103.0]])))]], p1: s0(p0: [[104.0]], p1: [[105.0], [106.0], [107.0]])), s5(p0: [[s3(p0: s2(p0: s1(p0: s0(p0: [[108.0]], p1: [[109.0], [110.0], [111.0]]), p1: s0(p0: [[112.0]], p1: [[113.0], [114.0], [115.0]])), p1: [[s0(p0: [[116.0]], p1: [[117.0], [118.0], [119.0]])]]), p1: s1(p0: s0(p0: [[120.0]], p1: [[121.0], [122.0], [123.0]]), p1: s0(p0: [[124.0]], p1: [[125.0], [126.0], [127.0]])))], [s3(p0: s2(p0: s1(p0: s0(p0: [[128.0]], p1: [[129.0], [130.0], [131.0]]), p1: s0(p0: [[132.0]], p1: [[133.0], [134.0], [135.0]])), p1: [[s0(p0: [[136.0]], p1: [[137.0], [138.0], [139.0]])]]), p1: s1(p0: s0(p0: [[140.0]], p1: [[141.0], [142.0], [143.0]]), p1: s0(p0: [[144.0]], p1: [[145.0], [146.0], [147.0]])))]], p1: s0(p0: [[148.0]], p1: [[149.0], [150.0], [151.0]]))], p1: s0(p0: [[152.0]], p1: [[153.0], [154.0], [155.0]]), p2: s3(p0: s2(p0: s1(p0: s0(p0: [[156.0]], p1: [[157.0], [158.0], [159.0]]), p1: s0(p0: [[160.0]], p1: [[161.0], [162.0], [163.0]])), p1: [[s0(p0: [[164.0]], p1: [[165.0], [166.0], [167.0]])]]), p1: s1(p0: s0(p0: [[168.0]], p1: [[169.0], [170.0], [171.0]]), p1: s0(p0: [[172.0]], p1: [[173.0], [174.0], [175.0]]))), p3: [[s4(p0: s1(p0: s0(p0: [[176.0]], p1: [[177.0], [178.0], [179.0]]), p1: s0(p0: [[180.0]], p1: [[181.0], [182.0], [183.0]])), p1: [s3(p0: s2(p0: s1(p0: s0(p0: [[184.0]], p1: [[185.0], [186.0], [187.0]]), p1: s0(p0: [[188.0]], p1: [[189.0], [190.0], [191.0]])), p1: [[s0(p0: [[192.0]], p1: [[193.0], [194.0], [195.0]])]]), p1: s1(p0: s0(p0: [[196.0]], p1: [[197.0], [198.0], [199.0]]), p1: s0(p0: [[200.0]], p1: [[201.0], [202.0], [203.0]])))])]]), s6(p0: [s5(p0: [[s3(p0: s2(p0: s1(p0: s0(p0: [[204.0]], p1: [[205.0], [206.0], [207.0]]), p1: s0(p0: [[208.0]], p1: [[209.0], [210.0], [211.0]])), p1: [[s0(p0: [[212.0]], p1: [[213.0], [214.0], [215.0]])]]), p1: s1(p0: s0(p0: [[216.0]], p1: [[217.0], [218.0], [219.0]]), p1: s0(p0: [[220.0]], p1: [[221.0], [222.0], [223.0]])))], [s3(p0: s2(p0: s1(p0: s0(p0: [[224.0]], p1: [[225.0], [226.0], [227.0]]), p1: s0(p0: [[228.0]], p1: [[229.0], [230.0], [231.0]])), p1: [[s0(p0: [[232.0]], p1: [[233.0], [234.0], [235.0]])]]), p1: s1(p0: s0(p0: [[236.0]], p1: [[237.0], [238.0], [239.0]]), p1: s0(p0: [[240.0]], p1: [[241.0], [242.0], [243.0]])))]], p1: s0(p0: [[244.0]], p1: [[245.0], [246.0], [247.0]])), s5(p0: [[s3(p0: s2(p0: s1(p0: s0(p0: [[248.0]], p1: [[249.0], [250.0], [251.0]]), p1: s0(p0: [[252.0]], p1: [[253.0], [254.0], [255.0]])), p1: [[s0(p0: [[256.0]], p1: [[257.0], [258.0], [259.0]])]]), p1: s1(p0: s0(p0: [[260.0]], p1: [[261.0], [262.0], [263.0]]), p1: s0(p0: [[264.0]], p1: [[265.0], [266.0], [267.0]])))], [s3(p0: s2(p0: s1(p0: s0(p0: [[268.0]], p1: [[269.0], [270.0], [271.0]]), p1: s0(p0: [[272.0]], p1: [[273.0], [274.0], [275.0]])), p1: [[s0(p0: [[276.0]], p1: [[277.0], [278.0], [279.0]])]]), p1: s1(p0: s0(p0: [[280.0]], p1: [[281.0], [282.0], [283.0]]), p1: s0(p0: [[284.0]], p1: [[285.0], [286.0], [287.0]])))]], p1: s0(p0: [[288.0]], p1: [[289.0], [290.0], [291.0]])), s5(p0: [[s3(p0: s2(p0: s1(p0: s0(p0: [[292.0]], p1: [[293.0], [294.0], [295.0]]), p1: s0(p0: [[296.0]], p1: [[297.0], [298.0], [299.0]])), p1: [[s0(p0: [[300.0]], p1: [[301.0], [302.0], [303.0]])]]), p1: s1(p0: s0(p0: [[304.0]], p1: [[305.0], [306.0], [307.0]]), p1: s0(p0: [[308.0]], p1: [[309.0], [310.0], [311.0]])))], [s3(p0: s2(p0: s1(p0: s0(p0: [[312.0]], p1: [[313.0], [314.0], [315.0]]), p1: s0(p0: [[316.0]], p1: [[317.0], [318.0], [319.0]])), p1: [[s0(p0: [[320.0]], p1: [[321.0], [322.0], [323.0]])]]), p1: s1(p0: s0(p0: [[324.0]], p1: [[325.0], [326.0], [327.0]]), p1: s0(p0: [[328.0]], p1: [[329.0], [330.0], [331.0]])))]], p1: s0(p0: [[332.0]], p1: [[333.0], [334.0], [335.0]]))], p1: s0(p0: [[336.0]], p1: [[337.0], [338.0], [339.0]]), p2: s3(p0: s2(p0: s1(p0: s0(p0: [[340.0]], p1: [[341.0], [342.0], [343.0]]), p1: s0(p0: [[344.0]], p1: [[345.0], [346.0], [347.0]])), p1: [[s0(p0: [[348.0]], p1: [[349.0], [350.0], [351.0]])]]), p1: s1(p0: s0(p0: [[352.0]], p1: [[353.0], [354.0], [355.0]]), p1: s0(p0: [[356.0]], p1: [[357.0], [358.0], [359.0]]))), p3: [[s4(p0: s1(p0: s0(p0: [[360.0]], p1: [[361.0], [362.0], [363.0]]), p1: s0(p0: [[364.0]], p1: [[365.0], [366.0], [367.0]])), p1: [s3(p0: s2(p0: s1(p0: s0(p0: [[368.0]], p1: [[369.0], [370.0], [371.0]]), p1: s0(p0: [[372.0]], p1: [[373.0], [374.0], [375.0]])), p1: [[s0(p0: [[376.0]], p1: [[377.0], [378.0], [379.0]])]]), p1: s1(p0: s0(p0: [[380.0]], p1: [[381.0], [382.0], [383.0]]), p1: s0(p0: [[384.0]], p1: [[385.0], [386.0], [387.0]])))])]])]
    let v2: Double = 388.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 388.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
