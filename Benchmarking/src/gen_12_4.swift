  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: Double
    var p1: s0
  }
  struct s3 {
    var p0: s1
    var p1: [s0]
  }
  struct s4 {
    var p0: s3
    var p1: s1
  }
  struct s5 {
    var p0: [s0]
    var p1: [s4]
    var p2: [s4]
    var p3: [s1]
    var p4: [s3]
  }
  struct s8 {
    var p0: s0
    var p1: [s5]
  }
  func f49(_ v0: s8, _ v1: [[Double]]) -> [[Double]] {
    var v5: [[Double]] = v1
    var v4: [[Double]] = v1
    let v10: [[[Double]]] = [v4, v1, v1, v1, v4, v5]
    let v8: [[[Double]]] = [v1, v4, v4, v1, v1]
    var v6: [[[Double]]] = v10
    let v29: [[Double]] = v8[0]
    v4 = v29
    let v203: [[Double]] = v6[5]
    return v203
  }
  func f45(_ v0: s8) -> s8 {
    var v5: s8 = v0
    var v3: s8 = v0
    let v6: [s5] = v5.p1
    let v1: s0 = v5.p0
    let v7: [s5] = v3.p1
    let v13: s8 = s8(p0: v1, p1: v7)
    var v4: s8 = v3
    v4.p1 = v6
    v5.p1 = v7
    var v11: s0 = v1
    v3.p0 = v11
    var v8: s0 = v11
    let v18: s5 = v7[0]
    let v32: [s5] = v3.p1
    var v51: s0 = v1
    let v19: s8 = s8(p0: v1, p1: v6)
    v5.p0 = v51
    let v29: [s4] = v18.p1
    let v36: s4 = v29[0]
    let v30: [[Double]] = v11.p0
    let v20: s1 = v36.p1
    v8.p1 = v30
    let v40: [[Double]] = v8.p0
    let v39: [Double] = v30[2]
    let v45: [[Double]] = f49(v13, v40)
    let v46: s0 = v20.p1
    var v54: [[Double]] = v45
    let v78: [[Double]] = f49(v5, v54)
    let v86: [[Double]] = f49(v19, v40)
    let v56: s0 = v0.p0
    var v64: [Double] = v39
    let v58: [Double] = v40[2]
    v5.p1 = v32
    v4.p0 = v56
    v54[2] = v58
    v8.p1 = v86
    var v124: s0 = v46
    v5.p0 = v124
    v11.p1 = v54
    v54[1] = v64
    v11.p0 = v78
    return v4
  }
  @inline(never)
  func f0(_ v0: s8, _ v1: Double) -> Double {
    let v6: s8 = f45(v0)
    let v3: s0 = v6.p0
    var v7: s0 = v3
    let v11: [[Double]] = v7.p1
    let v13: [Double] = v11[1]
    v7.p0 = v11
    let v63: Double = v13[0]
    return v63
  }
  func benchmark() {
    let v0: s8 = s8(p0: s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0], [5.0]]), p1: [s5(p0: [s0(p0: [[6.0], [7.0], [8.0]], p1: [[9.0], [10.0], [11.0]]), s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0], [16.0], [17.0]])], p1: [s4(p0: s3(p0: s1(p0: 18.0, p1: s0(p0: [[19.0], [20.0], [21.0]], p1: [[22.0], [23.0], [24.0]])), p1: [s0(p0: [[25.0], [26.0], [27.0]], p1: [[28.0], [29.0], [30.0]])]), p1: s1(p0: 31.0, p1: s0(p0: [[32.0], [33.0], [34.0]], p1: [[35.0], [36.0], [37.0]]))), s4(p0: s3(p0: s1(p0: 38.0, p1: s0(p0: [[39.0], [40.0], [41.0]], p1: [[42.0], [43.0], [44.0]])), p1: [s0(p0: [[45.0], [46.0], [47.0]], p1: [[48.0], [49.0], [50.0]])]), p1: s1(p0: 51.0, p1: s0(p0: [[52.0], [53.0], [54.0]], p1: [[55.0], [56.0], [57.0]])))], p2: [s4(p0: s3(p0: s1(p0: 58.0, p1: s0(p0: [[59.0], [60.0], [61.0]], p1: [[62.0], [63.0], [64.0]])), p1: [s0(p0: [[65.0], [66.0], [67.0]], p1: [[68.0], [69.0], [70.0]])]), p1: s1(p0: 71.0, p1: s0(p0: [[72.0], [73.0], [74.0]], p1: [[75.0], [76.0], [77.0]]))), s4(p0: s3(p0: s1(p0: 78.0, p1: s0(p0: [[79.0], [80.0], [81.0]], p1: [[82.0], [83.0], [84.0]])), p1: [s0(p0: [[85.0], [86.0], [87.0]], p1: [[88.0], [89.0], [90.0]])]), p1: s1(p0: 91.0, p1: s0(p0: [[92.0], [93.0], [94.0]], p1: [[95.0], [96.0], [97.0]])))], p3: [s1(p0: 98.0, p1: s0(p0: [[99.0], [100.0], [101.0]], p1: [[102.0], [103.0], [104.0]]))], p4: [s3(p0: s1(p0: 105.0, p1: s0(p0: [[106.0], [107.0], [108.0]], p1: [[109.0], [110.0], [111.0]])), p1: [s0(p0: [[112.0], [113.0], [114.0]], p1: [[115.0], [116.0], [117.0]])]), s3(p0: s1(p0: 118.0, p1: s0(p0: [[119.0], [120.0], [121.0]], p1: [[122.0], [123.0], [124.0]])), p1: [s0(p0: [[125.0], [126.0], [127.0]], p1: [[128.0], [129.0], [130.0]])]), s3(p0: s1(p0: 131.0, p1: s0(p0: [[132.0], [133.0], [134.0]], p1: [[135.0], [136.0], [137.0]])), p1: [s0(p0: [[138.0], [139.0], [140.0]], p1: [[141.0], [142.0], [143.0]])])]), s5(p0: [s0(p0: [[144.0], [145.0], [146.0]], p1: [[147.0], [148.0], [149.0]]), s0(p0: [[150.0], [151.0], [152.0]], p1: [[153.0], [154.0], [155.0]])], p1: [s4(p0: s3(p0: s1(p0: 156.0, p1: s0(p0: [[157.0], [158.0], [159.0]], p1: [[160.0], [161.0], [162.0]])), p1: [s0(p0: [[163.0], [164.0], [165.0]], p1: [[166.0], [167.0], [168.0]])]), p1: s1(p0: 169.0, p1: s0(p0: [[170.0], [171.0], [172.0]], p1: [[173.0], [174.0], [175.0]]))), s4(p0: s3(p0: s1(p0: 176.0, p1: s0(p0: [[177.0], [178.0], [179.0]], p1: [[180.0], [181.0], [182.0]])), p1: [s0(p0: [[183.0], [184.0], [185.0]], p1: [[186.0], [187.0], [188.0]])]), p1: s1(p0: 189.0, p1: s0(p0: [[190.0], [191.0], [192.0]], p1: [[193.0], [194.0], [195.0]])))], p2: [s4(p0: s3(p0: s1(p0: 196.0, p1: s0(p0: [[197.0], [198.0], [199.0]], p1: [[200.0], [201.0], [202.0]])), p1: [s0(p0: [[203.0], [204.0], [205.0]], p1: [[206.0], [207.0], [208.0]])]), p1: s1(p0: 209.0, p1: s0(p0: [[210.0], [211.0], [212.0]], p1: [[213.0], [214.0], [215.0]]))), s4(p0: s3(p0: s1(p0: 216.0, p1: s0(p0: [[217.0], [218.0], [219.0]], p1: [[220.0], [221.0], [222.0]])), p1: [s0(p0: [[223.0], [224.0], [225.0]], p1: [[226.0], [227.0], [228.0]])]), p1: s1(p0: 229.0, p1: s0(p0: [[230.0], [231.0], [232.0]], p1: [[233.0], [234.0], [235.0]])))], p3: [s1(p0: 236.0, p1: s0(p0: [[237.0], [238.0], [239.0]], p1: [[240.0], [241.0], [242.0]]))], p4: [s3(p0: s1(p0: 243.0, p1: s0(p0: [[244.0], [245.0], [246.0]], p1: [[247.0], [248.0], [249.0]])), p1: [s0(p0: [[250.0], [251.0], [252.0]], p1: [[253.0], [254.0], [255.0]])]), s3(p0: s1(p0: 256.0, p1: s0(p0: [[257.0], [258.0], [259.0]], p1: [[260.0], [261.0], [262.0]])), p1: [s0(p0: [[263.0], [264.0], [265.0]], p1: [[266.0], [267.0], [268.0]])]), s3(p0: s1(p0: 269.0, p1: s0(p0: [[270.0], [271.0], [272.0]], p1: [[273.0], [274.0], [275.0]])), p1: [s0(p0: [[276.0], [277.0], [278.0]], p1: [[279.0], [280.0], [281.0]])])])])
    let v1: Double = 282.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 282.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
