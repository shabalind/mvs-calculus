  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: s0
    var p1: s1
  } in
  struct s3 {
    var p0: [s1]
    var p1: s1
  } in
  struct s4 {
    var p0: [s1]
    var p1: [s2]
  } in
  struct s5 {
    var p0: s4
    var p1: [[s3]]
  } in
  struct s8 {
    var p0: s0
    var p1: s5
  } in
  struct s10 {
    var p0: s8
  } in
  let f56: (Float) -> Float = (v0: Float) -> Float {
    var v3: Float = v0 in
    var v5: Float = v0 in
    var v15: Float = v0 in
    var v4: Float = v0 in
    var v1: Float = v0 in
    var v7: Float = v4 in
    var v9: Float = v15 in
    v4 = v5 in
    var v8: Float = v7 in
    var v11: Float = v8 in
    var v10: Float = v1 in
    var v21: Float = v15 in
    var v30: Float = v3 in
    v21 = v4 in
    let v25: [Float] = [v11, v11, v9, v30, v10] in
    let v27: Float = v25[0] in
    var v57: [Float] = v25 in
    var v36: [Float] = v57 in
    v36[3] = v7 in
    v57[2] = v27 in
    var v72: [Float] = v36 in
    v72[4] = v21 in
    var v32: [Float] = v72 in
    var v38: [Float] = v32 in
    var v60: [Float] = v38 in
    let v42: Float = v60[0] in
    v42
  } in
  let noinline_f0: (s10, Float) -> Float = (v0: s10, v1: Float) -> Float {
    var v8: Float = v1 in
    let v5: Float = v1 + v8 in
    let v7: Float = f56(v8) in
    var v37: Float = v1 in
    let v54: Float = v37 + v7 in
    let v120: Float = v5 * v54 in
    v37 = v8 in
    v120
  } in
  fun loop(i: Int, v0: s10, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s10 = s10(s8(s0([[0.0]], [[1.0], [2.0], [3.0]]), s5(s4([s1(s0([[4.0]], [[5.0], [6.0], [7.0]]), [[s0([[8.0]], [[9.0], [10.0], [11.0]])], [s0([[12.0]], [[13.0], [14.0], [15.0]])]])], [s2(s0([[16.0]], [[17.0], [18.0], [19.0]]), s1(s0([[20.0]], [[21.0], [22.0], [23.0]]), [[s0([[24.0]], [[25.0], [26.0], [27.0]])], [s0([[28.0]], [[29.0], [30.0], [31.0]])]])), s2(s0([[32.0]], [[33.0], [34.0], [35.0]]), s1(s0([[36.0]], [[37.0], [38.0], [39.0]]), [[s0([[40.0]], [[41.0], [42.0], [43.0]])], [s0([[44.0]], [[45.0], [46.0], [47.0]])]]))]), [[s3([s1(s0([[48.0]], [[49.0], [50.0], [51.0]]), [[s0([[52.0]], [[53.0], [54.0], [55.0]])], [s0([[56.0]], [[57.0], [58.0], [59.0]])]]), s1(s0([[60.0]], [[61.0], [62.0], [63.0]]), [[s0([[64.0]], [[65.0], [66.0], [67.0]])], [s0([[68.0]], [[69.0], [70.0], [71.0]])]]), s1(s0([[72.0]], [[73.0], [74.0], [75.0]]), [[s0([[76.0]], [[77.0], [78.0], [79.0]])], [s0([[80.0]], [[81.0], [82.0], [83.0]])]])], s1(s0([[84.0]], [[85.0], [86.0], [87.0]]), [[s0([[88.0]], [[89.0], [90.0], [91.0]])], [s0([[92.0]], [[93.0], [94.0], [95.0]])]]))]]))) in
    let v1: Float = 96.0 in
    let initialResult: Float = 96.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()