  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
    var p2: s0
  } in
  struct s2 {
    var p0: s1
    var p1: [[s0]]
  } in
  let f4: ([s0]) -> [s0] = (v0: [s0]) -> [s0] {
    let v2: s0 = v0[0] in
    let v7: s0 = v0[0] in
    let v6: s0 = v0[0] in
    let v3: [[Float]] = v7.p1 in
    var v9: s0 = v2 in
    var v14: [s0] = v0 in
    v14 = v0 in
    let v15: [[Float]] = v2.p0 in
    v9.p1 = v3 in
    let v27: [[Float]] = v6.p0 in
    let v16: [[Float]] = v9.p1 in
    v9.p1 = v16 in
    v14[0] = v9 in
    v9.p0 = v27 in
    v9.p0 = v15 in
    v14[0] = v7 in
    var v53: [s0] = v14 in
    v53 = v14 in
    v9.p0 = v15 in
    v53
  } in
  let noinline_f0: ([s2], [[s0]], Float) -> Float = (v0: [s2], v1: [[s0]], v2: Float) -> Float {
    var v8: [[s0]] = v1 in
    let v4: [s0] = v8[0] in
    let v12: [s0] = f4(v4) in
    let v11: [Float] = [v2] in
    var v3: [Float] = v11 in
    let v13: Float = v3[0] in
    let v20: [s0] = f4(v4) in
    var v29: [Float] = v11 in
    let v26: [s0] = f4(v20) in
    let v24: Float = v2 / v2 in
    v29[0] = v13 in
    var v27: Float = v2 in
    let v16: [s0] = f4(v12) in
    v8[0] = v16 in
    let v40: [Float] = [v24] in
    v3[0] = v2 in
    v3[0] = v27 in
    let v83: s0 = v26[0] in
    let v46: [s0] = f4(v4) in
    let v53: Float = v29[0] in
    var v87: Float = v53 in
    let v90: [[Float]] = v83.p0 in
    v8[1] = v46 in
    let v81: [Float] = v90[0] in
    v8[0] = v46 in
    v29 = v40 in
    v29 = v81 in
    v29[0] = v53 in
    v87
  } in
  fun loop(i: Int, v0: [s2], v1: [[s0]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2(s1(s0([[0.0]], [[1.0], [2.0], [3.0]]), [s0([[4.0]], [[5.0], [6.0], [7.0]])], s0([[8.0]], [[9.0], [10.0], [11.0]])), [[s0([[12.0]], [[13.0], [14.0], [15.0]])], [s0([[16.0]], [[17.0], [18.0], [19.0]])], [s0([[20.0]], [[21.0], [22.0], [23.0]])]]), s2(s1(s0([[24.0]], [[25.0], [26.0], [27.0]]), [s0([[28.0]], [[29.0], [30.0], [31.0]])], s0([[32.0]], [[33.0], [34.0], [35.0]])), [[s0([[36.0]], [[37.0], [38.0], [39.0]])], [s0([[40.0]], [[41.0], [42.0], [43.0]])], [s0([[44.0]], [[45.0], [46.0], [47.0]])]]), s2(s1(s0([[48.0]], [[49.0], [50.0], [51.0]]), [s0([[52.0]], [[53.0], [54.0], [55.0]])], s0([[56.0]], [[57.0], [58.0], [59.0]])), [[s0([[60.0]], [[61.0], [62.0], [63.0]])], [s0([[64.0]], [[65.0], [66.0], [67.0]])], [s0([[68.0]], [[69.0], [70.0], [71.0]])]])] in
    let v1: [[s0]] = [[s0([[72.0]], [[73.0], [74.0], [75.0]])], [s0([[76.0]], [[77.0], [78.0], [79.0]])]] in
    let v2: Float = 80.0 in
    let initialResult: Float = 80.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()