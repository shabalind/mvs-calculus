  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [Double]
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
    var p2: [s0]
    var p3: [s0]
    var p4: s0
  }
  struct s2 {
    var p0: s1
    var p1: [s1]
  }
  @inline(never)
  func f0(_ v0: [[s2]], _ v1: Double) -> Double {
    var v3: [[s2]] = v0
    var v8: [[s2]] = v3
    let v10: [s2] = v8[0]
    let v2: s2 = v10[0]
    var v15: [[s2]] = v8
    let v30: [s2] = v15[0]
    let v14: [s1] = v2.p1
    v3[0] = v30
    v8[0] = v30
    let v46: [s2] = v3[0]
    let v32: s1 = v14[0]
    let v36: s0 = v32.p4
    v8[0] = v10
    let v162: [Double] = v36.p2
    v15[0] = v46
    let v101: Double = v162[0]
    return v101
  }
  func benchmark() {
    let v0: [[s2]] = [[s2(p0: s1(p0: [s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0]], p2: [4.0]), s0(p0: [[5.0], [6.0]], p1: [[7.0], [8.0]], p2: [9.0])], p1: [s0(p0: [[10.0], [11.0]], p1: [[12.0], [13.0]], p2: [14.0])], p2: [s0(p0: [[15.0], [16.0]], p1: [[17.0], [18.0]], p2: [19.0])], p3: [s0(p0: [[20.0], [21.0]], p1: [[22.0], [23.0]], p2: [24.0]), s0(p0: [[25.0], [26.0]], p1: [[27.0], [28.0]], p2: [29.0]), s0(p0: [[30.0], [31.0]], p1: [[32.0], [33.0]], p2: [34.0])], p4: s0(p0: [[35.0], [36.0]], p1: [[37.0], [38.0]], p2: [39.0])), p1: [s1(p0: [s0(p0: [[40.0], [41.0]], p1: [[42.0], [43.0]], p2: [44.0]), s0(p0: [[45.0], [46.0]], p1: [[47.0], [48.0]], p2: [49.0])], p1: [s0(p0: [[50.0], [51.0]], p1: [[52.0], [53.0]], p2: [54.0])], p2: [s0(p0: [[55.0], [56.0]], p1: [[57.0], [58.0]], p2: [59.0])], p3: [s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0]], p2: [64.0]), s0(p0: [[65.0], [66.0]], p1: [[67.0], [68.0]], p2: [69.0]), s0(p0: [[70.0], [71.0]], p1: [[72.0], [73.0]], p2: [74.0])], p4: s0(p0: [[75.0], [76.0]], p1: [[77.0], [78.0]], p2: [79.0])), s1(p0: [s0(p0: [[80.0], [81.0]], p1: [[82.0], [83.0]], p2: [84.0]), s0(p0: [[85.0], [86.0]], p1: [[87.0], [88.0]], p2: [89.0])], p1: [s0(p0: [[90.0], [91.0]], p1: [[92.0], [93.0]], p2: [94.0])], p2: [s0(p0: [[95.0], [96.0]], p1: [[97.0], [98.0]], p2: [99.0])], p3: [s0(p0: [[100.0], [101.0]], p1: [[102.0], [103.0]], p2: [104.0]), s0(p0: [[105.0], [106.0]], p1: [[107.0], [108.0]], p2: [109.0]), s0(p0: [[110.0], [111.0]], p1: [[112.0], [113.0]], p2: [114.0])], p4: s0(p0: [[115.0], [116.0]], p1: [[117.0], [118.0]], p2: [119.0]))])]]
    let v1: Double = 120.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 120.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
