  let noinline_f0: ([[Float]], Float) -> Float = (v0: [[Float]], v1: Float) -> Float {
    let v4: Float = v1 + v1 in
    var v3: Float = v4 in
    var v8: Float = v4 in
    let v13: [Float] = [v3, v3, v8, v1, v3, v3] in
    var v17: Float = v1 in
    let v11: Float = v13[0] in
    var v18: [Float] = v13 in
    let v22: Float = v13[1] in
    var v21: [Float] = v13 in
    v21 = v18 in
    v18[5] = v11 in
    var v19: [Float] = v21 in
    let v55: Float = v19[0] in
    v19[1] = v1 in
    v19[3] = v22 in
    v18[0] = v17 in
    v19 = v18 in
    v55
  } in
  fun loop(i: Int, v0: [[Float]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0]] in
    let v1: Float = 1.0 in
    let initialResult: Float = 1.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()