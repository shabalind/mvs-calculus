  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [[s0]]
  } in
  struct s3 {
    var p0: s2
    var p1: [s1]
  } in
  struct s4 {
    var p0: s1
    var p1: s3
  } in
  let noinline_f0: (s4, Float) -> Float = (v0: s4, v1: Float) -> Float {
    let v4: s1 = v0.p0 in
    var v2: Float = v1 in
    let v10: s0 = v4.p1 in
    let v48: s0 = v4.p1 in
    let v22: [[Float]] = v48.p0 in
    let v16: [[Float]] = v10.p0 in
    let v36: [Float] = v16[0] in
    let v47: [Float] = v22[0] in
    var v54: [Float] = v36 in
    v54[0] = v2 in
    v54 = v47 in
    let v142: Float = v54[0] in
    v142
  } in
  fun loop(i: Int, v0: s4, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s4 = s4(s1(s0([[0.0], [1.0]], [[2.0]]), s0([[3.0], [4.0]], [[5.0]])), s3(s2([[s0([[6.0], [7.0]], [[8.0]])]]), [s1(s0([[9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0]], [[14.0]]))])) in
    let v1: Float = 15.0 in
    let initialResult: Float = 15.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()