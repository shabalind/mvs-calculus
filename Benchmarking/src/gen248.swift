  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s3 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s7 {
    var p0: s3
    var p1: [s3]
  }
  struct s8 {
    var p0: s3
    var p1: [[s0]]
  }
  func f57(_ v0: [[s0]]) -> [[s0]] {
    let v3: [s0] = v0[0]
    var v2: [[s0]] = v0
    var v7: [[s0]] = v2
    var v20: [[s0]] = v2
    let v47: [[[s0]]] = [v20, v7, v2]
    var v60: [s0] = v3
    v2[0] = v60
    let v97: [[s0]] = v47[0]
    var v153: [[s0]] = v97
    v2[0] = v3
    return v153
  }
  func f25(_ v0: [[s7]]) -> [[s7]] {
    var v6: [[s7]] = v0
    let v8: [[[s7]]] = [v0, v6, v0, v0]
    v6 = v0
    let v10: [s7] = v6[0]
    v6[0] = v10
    var v13: [s7] = v10
    let v3: [s7] = v0[1]
    var v11: [[s7]] = v6
    v11[0] = v3
    v11[1] = v13
    let v62: [[s7]] = v8[1]
    v11 = v62
    return v11
  }
  func f8(_ v0: s3) -> s3 {
    var v8: s3 = v0
    var v13: s3 = v8
    let v30: [s3] = [v0, v13, v8, v8, v8, v8, v8]
    let v16: [s0] = v13.p0
    v8.p0 = v16
    let v88: s3 = v30[3]
    v13 = v0
    v8.p0 = v16
    return v88
  }
  @inline(never)
  func f0(_ v0: s8, _ v1: [[s7]], _ v2: Double) -> Double {
    let v7: [s7] = v1[0]
    let v6: s3 = v0.p0
    let v4: [[s7]] = f25(v1)
    var v5: s3 = v6
    var v22: s8 = v0
    var v8: s8 = v0
    let v10: [s0] = v5.p0
    v22.p0 = v6
    v8 = v22
    let v12: s3 = v8.p0
    let v18: s0 = v10[0]
    v5.p0 = v10
    var v15: s0 = v18
    let v21: [s7] = v4[0]
    var v31: [s7] = v7
    v8.p0 = v5
    v22.p0 = v6
    let v26: [[s0]] = v8.p1
    let v55: [[Double]] = v15.p0
    let v36: [[s0]] = f57(v26)
    let v116: s3 = f8(v12)
    let v45: s7 = v31[0]
    let v85: [s0] = v36[0]
    v31[0] = v45
    let v54: s3 = v45.p0
    let v51: [s0] = v116.p0
    v5.p0 = v85
    let v66: [[s0]] = f57(v26)
    let v86: s7 = v21[0]
    let v100: [Double] = v55[2]
    v5.p0 = v51
    v31[0] = v86
    v22.p1 = v66
    v8.p0 = v54
    let v186: Double = v100[0]
    return v186
  }
  func benchmark() {
    let v0: s8 = s8(p0: s3(p0: [s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0]])], p1: [s0(p0: [[5.0], [6.0], [7.0]], p1: [[8.0], [9.0]]), s0(p0: [[10.0], [11.0], [12.0]], p1: [[13.0], [14.0]]), s0(p0: [[15.0], [16.0], [17.0]], p1: [[18.0], [19.0]])]), p1: [[s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0], [24.0]])]])
    let v1: [[s7]] = [[s7(p0: s3(p0: [s0(p0: [[25.0], [26.0], [27.0]], p1: [[28.0], [29.0]])], p1: [s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0]]), s0(p0: [[35.0], [36.0], [37.0]], p1: [[38.0], [39.0]]), s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0], [44.0]])]), p1: [s3(p0: [s0(p0: [[45.0], [46.0], [47.0]], p1: [[48.0], [49.0]])], p1: [s0(p0: [[50.0], [51.0], [52.0]], p1: [[53.0], [54.0]]), s0(p0: [[55.0], [56.0], [57.0]], p1: [[58.0], [59.0]]), s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0], [64.0]])]), s3(p0: [s0(p0: [[65.0], [66.0], [67.0]], p1: [[68.0], [69.0]])], p1: [s0(p0: [[70.0], [71.0], [72.0]], p1: [[73.0], [74.0]]), s0(p0: [[75.0], [76.0], [77.0]], p1: [[78.0], [79.0]]), s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0], [84.0]])]), s3(p0: [s0(p0: [[85.0], [86.0], [87.0]], p1: [[88.0], [89.0]])], p1: [s0(p0: [[90.0], [91.0], [92.0]], p1: [[93.0], [94.0]]), s0(p0: [[95.0], [96.0], [97.0]], p1: [[98.0], [99.0]]), s0(p0: [[100.0], [101.0], [102.0]], p1: [[103.0], [104.0]])])])], [s7(p0: s3(p0: [s0(p0: [[105.0], [106.0], [107.0]], p1: [[108.0], [109.0]])], p1: [s0(p0: [[110.0], [111.0], [112.0]], p1: [[113.0], [114.0]]), s0(p0: [[115.0], [116.0], [117.0]], p1: [[118.0], [119.0]]), s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0], [124.0]])]), p1: [s3(p0: [s0(p0: [[125.0], [126.0], [127.0]], p1: [[128.0], [129.0]])], p1: [s0(p0: [[130.0], [131.0], [132.0]], p1: [[133.0], [134.0]]), s0(p0: [[135.0], [136.0], [137.0]], p1: [[138.0], [139.0]]), s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0], [144.0]])]), s3(p0: [s0(p0: [[145.0], [146.0], [147.0]], p1: [[148.0], [149.0]])], p1: [s0(p0: [[150.0], [151.0], [152.0]], p1: [[153.0], [154.0]]), s0(p0: [[155.0], [156.0], [157.0]], p1: [[158.0], [159.0]]), s0(p0: [[160.0], [161.0], [162.0]], p1: [[163.0], [164.0]])]), s3(p0: [s0(p0: [[165.0], [166.0], [167.0]], p1: [[168.0], [169.0]])], p1: [s0(p0: [[170.0], [171.0], [172.0]], p1: [[173.0], [174.0]]), s0(p0: [[175.0], [176.0], [177.0]], p1: [[178.0], [179.0]]), s0(p0: [[180.0], [181.0], [182.0]], p1: [[183.0], [184.0]])])])]]
    let v2: Double = 185.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 185.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
