  struct s0 {
    var p0: Float
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  let f17: (s0) -> s0 = (v0: s0) -> s0 {
    var v5: s0 = v0 in
    let v2: [[Float]] = v0.p1 in
    let v10: [[Float]] = v0.p1 in
    let v9: [s0] = [v5, v0] in
    v5.p1 = v10 in
    let v8: Float = v5.p0 in
    let v13: s0 = v9[1] in
    v5 = v13 in
    v5.p1 = v10 in
    v5 = v13 in
    v5.p0 = v8 in
    v5.p1 = v2 in
    v5
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    let v5: s0 = v0.p1 in
    var v7: s0 = v5 in
    let v9: s0 = f17(v5) in
    let v12: Float = v9.p0 in
    let v18: [[Float]] = v7.p1 in
    let v16: [Float] = v18[0] in
    let v13: Float = v16[0] in
    var v48: Float = v12 in
    var v34: Float = v13 in
    let v84: [[Float]] = v9.p1 in
    v7.p1 = v84 in
    v7.p0 = v48 in
    v34
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([s0(0.0, [[1.0]])], s0(2.0, [[3.0]])) in
    let v1: Float = 4.0 in
    let initialResult: Float = 4.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()