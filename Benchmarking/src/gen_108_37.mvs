  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
    var p2: s0
  } in
  struct s2 {
    var p0: s0
    var p1: s1
  } in
  struct s3 {
    var p0: [s0]
    var p1: s2
  } in
  struct s7 {
    var p0: s0
    var p1: s3
  } in
  struct s9 {
    var p0: s1
    var p1: s7
  } in
  let noinline_f0: (s9, Float) -> Float = (v0: s9, v1: Float) -> Float {
    let v4: s1 = v0.p0 in
    let v8: [s0] = v4.p0 in
    let v9: s0 = v8[0] in
    let v30: [[Float]] = v9.p0 in
    let v42: [Float] = v30[0] in
    let v44: [[Float]] = v9.p1 in
    let v64: [Float] = v44[0] in
    var v47: [Float] = v64 in
    let v49: Float = v42[0] in
    var v80: Float = v49 in
    let v86: Float = v47[0] in
    let v183: Float = v86 * v80 in
    v183
  } in
  fun loop(i: Int, v0: s9, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s9 = s9(s1([s0([[0.0]], [[1.0]])], s0([[2.0]], [[3.0]]), s0([[4.0]], [[5.0]])), s7(s0([[6.0]], [[7.0]]), s3([s0([[8.0]], [[9.0]]), s0([[10.0]], [[11.0]]), s0([[12.0]], [[13.0]])], s2(s0([[14.0]], [[15.0]]), s1([s0([[16.0]], [[17.0]])], s0([[18.0]], [[19.0]]), s0([[20.0]], [[21.0]])))))) in
    let v1: Float = 22.0 in
    let initialResult: Float = 22.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()