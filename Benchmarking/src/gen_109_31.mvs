  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
  } in
  struct s2 {
    var p0: s1
    var p1: [s0]
  } in
  struct s3 {
    var p0: [s2]
    var p1: [[s2]]
  } in
  let f60: (Float) -> Float = (v0: Float) -> Float {
    var v7: Float = v0 in
    var v6: Float = v0 in
    var v1: Float = v0 in
    var v8: Float = v6 in
    var v5: Float = v0 in
    var v10: Float = v8 in
    v7 = v0 in
    v10 = v7 in
    v1 = v0 in
    var v12: Float = v5 in
    var v18: Float = v8 in
    var v24: Float = v7 in
    var v3: Float = v10 in
    var v11: Float = v0 in
    v5 = v8 in
    var v28: Float = v24 in
    var v21: Float = v28 in
    v5 = v1 in
    var v16: Float = v5 in
    var v25: Float = v6 in
    var v15: Float = v16 in
    let v17: Float = v11 - v12 in
    var v42: Float = v15 in
    let v31: [Float] = [v42, v3, v25, v21, v5, v18] in
    var v33: [Float] = v31 in
    var v50: [Float] = v33 in
    v50[1] = v17 in
    let v39: Float = v50[2] in
    v39
  } in
  let noinline_f0: ([[s3]], s3, Float) -> Float = (v0: [[s3]], v1: s3, v2: Float) -> Float {
    let v15: Float = f60(v2) in
    v15
  } in
  fun loop(i: Int, v0: [[s3]], v1: s3, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s3]] = [[s3([s2(s1(s0([[0.0]], [[1.0]])), [s0([[2.0]], [[3.0]]), s0([[4.0]], [[5.0]]), s0([[6.0]], [[7.0]])]), s2(s1(s0([[8.0]], [[9.0]])), [s0([[10.0]], [[11.0]]), s0([[12.0]], [[13.0]]), s0([[14.0]], [[15.0]])]), s2(s1(s0([[16.0]], [[17.0]])), [s0([[18.0]], [[19.0]]), s0([[20.0]], [[21.0]]), s0([[22.0]], [[23.0]])])], [[s2(s1(s0([[24.0]], [[25.0]])), [s0([[26.0]], [[27.0]]), s0([[28.0]], [[29.0]]), s0([[30.0]], [[31.0]])])]])]] in
    let v1: s3 = s3([s2(s1(s0([[32.0]], [[33.0]])), [s0([[34.0]], [[35.0]]), s0([[36.0]], [[37.0]]), s0([[38.0]], [[39.0]])]), s2(s1(s0([[40.0]], [[41.0]])), [s0([[42.0]], [[43.0]]), s0([[44.0]], [[45.0]]), s0([[46.0]], [[47.0]])]), s2(s1(s0([[48.0]], [[49.0]])), [s0([[50.0]], [[51.0]]), s0([[52.0]], [[53.0]]), s0([[54.0]], [[55.0]])])], [[s2(s1(s0([[56.0]], [[57.0]])), [s0([[58.0]], [[59.0]]), s0([[60.0]], [[61.0]]), s0([[62.0]], [[63.0]])])]]) in
    let v2: Float = 64.0 in
    let initialResult: Float = 64.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()