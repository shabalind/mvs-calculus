  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: s1
    var p1: s0
  } in
  struct s3 {
    var p0: s2
    var p1: s0
  } in
  let noinline_f0: ([s2], Float, [s0], [s1], s3, s2, [s1]) -> Float = (v0: [s2], v1: Float, v2: [s0], v3: [s1], v4: s3, v5: s2, v6: [s1]) -> Float {
    let v30: Float = v1 * v1 in
    let v16: s0 = v2[1] in
    let v19: [[Float]] = v16.p1 in
    let v37: [Float] = v19[0] in
    let v36: Float = v37[0] in
    let v17: [[Float]] = v16.p1 in
    let v39: [Float] = v17[1] in
    let v47: Float = v39[0] in
    let v67: Float = v36 / v30 in
    var v161: Float = v47 in
    let v147: Float = v161 + v67 in
    v147
  } in
  fun loop(i: Int, v0: [s2], v1: Float, v2: [s0], v3: [s1], v4: s3, v5: s2, v6: [s1], result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4, v5, v6) in
      loop(i + 1, v0, v1, v2, v3, v4, v5, v6, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2(s1([s0([[0.0]], [[1.0], [2.0], [3.0]])], [[s0([[4.0]], [[5.0], [6.0], [7.0]])], [s0([[8.0]], [[9.0], [10.0], [11.0]])]]), s0([[12.0]], [[13.0], [14.0], [15.0]])), s2(s1([s0([[16.0]], [[17.0], [18.0], [19.0]])], [[s0([[20.0]], [[21.0], [22.0], [23.0]])], [s0([[24.0]], [[25.0], [26.0], [27.0]])]]), s0([[28.0]], [[29.0], [30.0], [31.0]])), s2(s1([s0([[32.0]], [[33.0], [34.0], [35.0]])], [[s0([[36.0]], [[37.0], [38.0], [39.0]])], [s0([[40.0]], [[41.0], [42.0], [43.0]])]]), s0([[44.0]], [[45.0], [46.0], [47.0]]))] in
    let v1: Float = 48.0 in
    let v2: [s0] = [s0([[49.0]], [[50.0], [51.0], [52.0]]), s0([[53.0]], [[54.0], [55.0], [56.0]]), s0([[57.0]], [[58.0], [59.0], [60.0]])] in
    let v3: [s1] = [s1([s0([[61.0]], [[62.0], [63.0], [64.0]])], [[s0([[65.0]], [[66.0], [67.0], [68.0]])], [s0([[69.0]], [[70.0], [71.0], [72.0]])]])] in
    let v4: s3 = s3(s2(s1([s0([[73.0]], [[74.0], [75.0], [76.0]])], [[s0([[77.0]], [[78.0], [79.0], [80.0]])], [s0([[81.0]], [[82.0], [83.0], [84.0]])]]), s0([[85.0]], [[86.0], [87.0], [88.0]])), s0([[89.0]], [[90.0], [91.0], [92.0]])) in
    let v5: s2 = s2(s1([s0([[93.0]], [[94.0], [95.0], [96.0]])], [[s0([[97.0]], [[98.0], [99.0], [100.0]])], [s0([[101.0]], [[102.0], [103.0], [104.0]])]]), s0([[105.0]], [[106.0], [107.0], [108.0]])) in
    let v6: [s1] = [s1([s0([[109.0]], [[110.0], [111.0], [112.0]])], [[s0([[113.0]], [[114.0], [115.0], [116.0]])], [s0([[117.0]], [[118.0], [119.0], [120.0]])]]), s1([s0([[121.0]], [[122.0], [123.0], [124.0]])], [[s0([[125.0]], [[126.0], [127.0], [128.0]])], [s0([[129.0]], [[130.0], [131.0], [132.0]])]])] in
    let initialResult: Float = [s1([s0([[109.0]], [[110.0], [111.0], [112.0]])], [[s0([[113.0]], [[114.0], [115.0], [116.0]])], [s0([[117.0]], [[118.0], [119.0], [120.0]])]]), s1([s0([[121.0]], [[122.0], [123.0], [124.0]])], [[s0([[125.0]], [[126.0], [127.0], [128.0]])], [s0([[129.0]], [[130.0], [131.0], [132.0]])]])] in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, v5, v6, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()