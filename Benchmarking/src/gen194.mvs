  struct s0 {
    var p0: Float
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  let f81: (Float) -> Float = (v0: Float) -> Float {
    var v6: Float = v0 in
    var v1: Float = v6 in
    var v5: Float = v6 in
    var v3: Float = v5 in
    var v9: Float = v3 in
    var v13: Float = v0 in
    var v4: Float = v6 in
    let v2: [Float] = [v5, v0, v13, v4, v1, v5] in
    let v10: Float = v2[3] in
    let v14: Float = v2[2] in
    var v19: [Float] = v2 in
    let v12: Float = v2[4] in
    let v17: Float = v2[3] in
    v19[5] = v6 in
    let v16: Float = v19[5] in
    let v43: [Float] = [v17, v9, v14, v16, v10, v14, v9] in
    v19[0] = v9 in
    let v20: [[Float]] = [v43, v43, v43, v43, v43, v43] in
    v19[1] = v12 in
    v6 = v4 in
    var v32: [Float] = v2 in
    var v25: [[Float]] = v20 in
    let v23: [Float] = v20[4] in
    v1 = v12 in
    var v33: [[Float]] = v25 in
    v32 = v19 in
    let v41: [Float] = v33[0] in
    let v71: Float = v32[2] in
    v9 = v71 in
    let v121: Float = v41[5] in
    v33[4] = v23 in
    v121
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    let v6: [s0] = v0.p1 in
    let v4: s0 = v6[2] in
    let v18: [[Float]] = v4.p1 in
    let v14: [Float] = v18[0] in
    let v39: Float = v14[0] in
    let v24: Float = f81(v39) in
    v24
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1(s0(0.0, [[1.0], [2.0]]), [s0(3.0, [[4.0], [5.0]]), s0(6.0, [[7.0], [8.0]]), s0(9.0, [[10.0], [11.0]])]) in
    let v1: Float = 12.0 in
    let initialResult: Float = 12.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()