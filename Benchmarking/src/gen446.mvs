  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
    var p2: [s0]
  } in
  struct s2 {
    var p0: s0
    var p1: s1
  } in
  let f65: (Float) -> Float = (v0: Float) -> Float {
    var v1: Float = v0 in
    var v8: Float = v0 in
    var v7: Float = v1 in
    var v3: Float = v7 in
    v7 = v0 in
    var v5: Float = v0 in
    var v6: Float = v3 in
    var v16: Float = v7 in
    let v17: [Float] = [v16, v0, v16, v7, v16, v7, v6] in
    v16 = v8 in
    let v21: Float = v17[3] in
    v1 = v21 in
    v1 = v3 in
    let v14: Float = v17[4] in
    var v9: [Float] = v17 in
    let v13: [[Float]] = [v17, v17, v9, v9] in
    let v30: [Float] = v13[1] in
    v9[6] = v6 in
    var v25: [[Float]] = v13 in
    v25 = v13 in
    let v23: [Float] = v25[2] in
    var v31: [[Float]] = v13 in
    var v18: [[Float]] = v31 in
    let v24: [Float] = v18[0] in
    v9[2] = v5 in
    v31[1] = v23 in
    v25[0] = v9 in
    v31[1] = v30 in
    let v19: Float = v23[2] in
    let v47: [Float] = v18[1] in
    v25[1] = v47 in
    v31[0] = v30 in
    var v55: [Float] = v24 in
    v25[1] = v55 in
    let v58: Float = v14 / v19 in
    v58
  } in
  let noinline_f0: (s1, [s2], Float) -> Float = (v0: s1, v1: [s2], v2: Float) -> Float {
    let v13: Float = f65(v2) in
    var v37: Float = v13 in
    var v42: Float = v37 in
    v42
  } in
  fun loop(i: Int, v0: s1, v1: [s2], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1(s0([[0.0]], [[1.0], [2.0]]), s0([[3.0]], [[4.0], [5.0]]), [s0([[6.0]], [[7.0], [8.0]]), s0([[9.0]], [[10.0], [11.0]])]) in
    let v1: [s2] = [s2(s0([[12.0]], [[13.0], [14.0]]), s1(s0([[15.0]], [[16.0], [17.0]]), s0([[18.0]], [[19.0], [20.0]]), [s0([[21.0]], [[22.0], [23.0]]), s0([[24.0]], [[25.0], [26.0]])]))] in
    let v2: Float = 27.0 in
    let initialResult: Float = 27.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()