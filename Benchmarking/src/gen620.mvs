  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s3 {
    var p0: [s1]
    var p1: s2
  } in
  let f22: (Float) -> Float = (v0: Float) -> Float {
    let v6: Float = v0 + v0 in
    var v5: Float = v6 in
    var v1: Float = v0 in
    v1 = v5 in
    var v3: Float = v1 in
    var v8: Float = v6 in
    var v11: Float = v8 in
    var v12: Float = v5 in
    var v4: Float = v8 in
    v3 = v4 in
    var v17: Float = v12 in
    var v14: Float = v3 in
    var v2: Float = v11 in
    var v15: Float = v14 in
    var v10: Float = v14 in
    let v27: [Float] = [v15, v10, v17] in
    let v30: [[Float]] = [v27, v27, v27, v27, v27, v27] in
    let v20: Float = v11 + v17 in
    v14 = v2 in
    let v46: [Float] = v30[0] in
    let v23: [Float] = v30[0] in
    let v16: Float = v5 + v4 in
    var v24: [Float] = v46 in
    var v13: [Float] = v46 in
    v13[1] = v20 in
    v24[1] = v20 in
    var v34: [[Float]] = v30 in
    v13[2] = v14 in
    v13[0] = v8 in
    v13[1] = v1 in
    var v41: [Float] = v27 in
    let v60: [Float] = v34[1] in
    let v32: [Float] = v30[4] in
    v15 = v3 in
    var v53: [Float] = v13 in
    v13[2] = v3 in
    var v56: [Float] = v32 in
    var v35: [Float] = v60 in
    v24[2] = v3 in
    v35[2] = v16 in
    v24[1] = v1 in
    v34[4] = v56 in
    let v96: Float = v35[0] in
    var v52: [Float] = v53 in
    let v65: Float = v52[1] in
    let v117: Float = v41[1] in
    v41[0] = v20 in
    v52[1] = v117 in
    let v105: [Float] = [v8, v96, v1, v20, v96, v65] in
    var v115: [Float] = v105 in
    v41[1] = v96 in
    let v148: Float = v115[5] in
    v52[1] = v4 in
    let v79: Float = v24[0] in
    v34[0] = v23 in
    v35[2] = v79 in
    var v94: Float = v148 in
    v94
  } in
  let noinline_f0: (s3, [[s2]], Float) -> Float = (v0: s3, v1: [[s2]], v2: Float) -> Float {
    let v16: Float = v2 / v2 in
    let v19: [Float] = [v16, v16, v16, v16, v16, v2, v2] in
    let v36: Float = f22(v2) in
    let v77: Float = v19[2] in
    let v60: Float = f22(v77) in
    let v123: Float = f22(v60) in
    let v232: Float = v123 * v36 in
    v232
  } in
  fun loop(i: Int, v0: s3, v1: [[s2]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3([s1(s0([[0.0], [1.0], [2.0]], [[3.0]]), [[s0([[4.0], [5.0], [6.0]], [[7.0]])]])], s2([s0([[8.0], [9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0], [14.0]], [[15.0]]), s0([[16.0], [17.0], [18.0]], [[19.0]])], [s0([[20.0], [21.0], [22.0]], [[23.0]])])) in
    let v1: [[s2]] = [[s2([s0([[24.0], [25.0], [26.0]], [[27.0]]), s0([[28.0], [29.0], [30.0]], [[31.0]]), s0([[32.0], [33.0], [34.0]], [[35.0]])], [s0([[36.0], [37.0], [38.0]], [[39.0]])])], [s2([s0([[40.0], [41.0], [42.0]], [[43.0]]), s0([[44.0], [45.0], [46.0]], [[47.0]]), s0([[48.0], [49.0], [50.0]], [[51.0]])], [s0([[52.0], [53.0], [54.0]], [[55.0]])])]] in
    let v2: Float = 56.0 in
    let initialResult: Float = 56.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()