  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s3 {
    var p0: [s0]
    var p1: [s2]
  } in
  struct s5 {
    var p0: [s2]
    var p1: s2
    var p2: [s3]
    var p3: s2
  } in
  struct s6 {
    var p0: [[s5]]
    var p1: s1
  } in
  struct s7 {
    var p0: s6
    var p1: s2
  } in
  let noinline_f0: (s7, Float) -> Float = (v0: s7, v1: Float) -> Float {
    let v6: s6 = v0.p0 in
    var v7: s6 = v6 in
    let v5: s1 = v7.p1 in
    let v8: s6 = v0.p0 in
    var v10: s1 = v5 in
    let v13: [[s5]] = v6.p0 in
    let v9: [s5] = v13[0] in
    let v18: [s5] = v13[0] in
    let v16: s5 = v18[0] in
    let v23: s5 = v9[0] in
    let v14: [[s5]] = v8.p0 in
    var v41: s5 = v16 in
    let v29: s2 = v41.p1 in
    let v40: [s3] = v16.p2 in
    let v22: s2 = v23.p3 in
    let v21: [s3] = v23.p2 in
    let v26: s0 = v10.p1 in
    let v48: [[Float]] = v26.p1 in
    v7.p1 = v5 in
    v7.p0 = v13 in
    v7.p1 = v10 in
    var v67: [s3] = v21 in
    let v44: s5 = v9[0] in
    let v49: [Float] = v48[0] in
    v41 = v16 in
    let v25: s3 = v21[0] in
    v67[0] = v25 in
    let v80: s3 = v40[0] in
    let v32: [[Float]] = [v49, v49, v49, v49, v49, v49] in
    v7.p0 = v13 in
    let v37: [Float] = v32[2] in
    v67[0] = v80 in
    let v34: [s0] = v29.p0 in
    let v94: s0 = v34[0] in
    let v66: s0 = v34[0] in
    v41 = v44 in
    let v39: [s2] = v80.p1 in
    v67[0] = v80 in
    v10.p0 = v94 in
    let v72: s0 = v34[0] in
    v41.p1 = v22 in
    v41.p2 = v67 in
    v7.p0 = v14 in
    let v62: s2 = v39[0] in
    var v165: [[s5]] = v14 in
    v41.p3 = v62 in
    v10.p1 = v72 in
    let v91: Float = v37[0] in
    v10.p0 = v66 in
    v7.p1 = v5 in
    v7.p0 = v165 in
    v91
  } in
  fun loop(i: Int, v0: s7, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s7 = s7(s6([[s5([s2([s0([[0.0]], [[1.0], [2.0]])], [s0([[3.0]], [[4.0], [5.0]]), s0([[6.0]], [[7.0], [8.0]]), s0([[9.0]], [[10.0], [11.0]])])], s2([s0([[12.0]], [[13.0], [14.0]])], [s0([[15.0]], [[16.0], [17.0]]), s0([[18.0]], [[19.0], [20.0]]), s0([[21.0]], [[22.0], [23.0]])]), [s3([s0([[24.0]], [[25.0], [26.0]]), s0([[27.0]], [[28.0], [29.0]]), s0([[30.0]], [[31.0], [32.0]])], [s2([s0([[33.0]], [[34.0], [35.0]])], [s0([[36.0]], [[37.0], [38.0]]), s0([[39.0]], [[40.0], [41.0]]), s0([[42.0]], [[43.0], [44.0]])])])], s2([s0([[45.0]], [[46.0], [47.0]])], [s0([[48.0]], [[49.0], [50.0]]), s0([[51.0]], [[52.0], [53.0]]), s0([[54.0]], [[55.0], [56.0]])]))]], s1(s0([[57.0]], [[58.0], [59.0]]), s0([[60.0]], [[61.0], [62.0]]))), s2([s0([[63.0]], [[64.0], [65.0]])], [s0([[66.0]], [[67.0], [68.0]]), s0([[69.0]], [[70.0], [71.0]]), s0([[72.0]], [[73.0], [74.0]])])) in
    let v1: Float = 75.0 in
    let initialResult: Float = 75.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()