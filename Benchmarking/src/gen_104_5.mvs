  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: ([s0], s0, s0, s0, Float) -> Float = (v0: [s0], v1: s0, v2: s0, v3: s0, v4: Float) -> Float {
    let v28: [Float] = [v4, v4, v4] in
    let v14: Float = v4 + v4 in
    let v31: Float = v28[1] in
    var v40: [Float] = v28 in
    let v35: [Float] = [v4, v4, v4, v4, v14] in
    let v46: Float = v40[0] in
    v40[0] = v31 in
    var v74: [Float] = v40 in
    v74[1] = v46 in
    var v45: [Float] = v74 in
    v45[0] = v46 in
    let v115: Float = v35[1] in
    v74[1] = v115 in
    var v152: [Float] = v45 in
    let v406: Float = v152[0] in
    v406
  } in
  fun loop(i: Int, v0: [s0], v1: s0, v2: s0, v3: s0, v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0], [2.0]], [[3.0]]), s0([[4.0], [5.0], [6.0]], [[7.0]])] in
    let v1: s0 = s0([[8.0], [9.0], [10.0]], [[11.0]]) in
    let v2: s0 = s0([[12.0], [13.0], [14.0]], [[15.0]]) in
    let v3: s0 = s0([[16.0], [17.0], [18.0]], [[19.0]]) in
    let v4: Float = 20.0 in
    let initialResult: Float = 20.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()