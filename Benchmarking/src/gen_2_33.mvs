  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
    var p3: [Float]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  let noinline_f0: ([s1], Float) -> Float = (v0: [s1], v1: Float) -> Float {
    let v5: s1 = v0[0] in
    let v10: s0 = v5.p0 in
    let v26: [s0] = v5.p1 in
    let v2: s0 = v26[1] in
    let v8: [Float] = v2.p3 in
    let v9: Float = v8[1] in
    let v36: [[Float]] = v10.p0 in
    let v76: [Float] = v36[1] in
    let v144: Float = v76[0] in
    let v93: Float = v144 / v9 in
    v93
  } in
  fun loop(i: Int, v0: [s1], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1(s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]], [[5.0], [6.0], [7.0]], [8.0, 9.0]), [s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]], [[15.0], [16.0], [17.0]], [18.0, 19.0]), s0([[20.0], [21.0], [22.0]], [[23.0], [24.0]], [[25.0], [26.0], [27.0]], [28.0, 29.0])]), s1(s0([[30.0], [31.0], [32.0]], [[33.0], [34.0]], [[35.0], [36.0], [37.0]], [38.0, 39.0]), [s0([[40.0], [41.0], [42.0]], [[43.0], [44.0]], [[45.0], [46.0], [47.0]], [48.0, 49.0]), s0([[50.0], [51.0], [52.0]], [[53.0], [54.0]], [[55.0], [56.0], [57.0]], [58.0, 59.0])])] in
    let v1: Float = 60.0 in
    let initialResult: Float = 60.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()