  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
    var p2: s0
  } in
  struct s3 {
    var p0: s0
    var p1: s1
  } in
  struct s4 {
    var p0: s3
    var p1: [s0]
  } in
  struct s6 {
    var p0: [s4]
    var p1: [Float]
  } in
  struct s8 {
    var p0: [s6]
    var p1: s4
  } in
  let noinline_f0: (s8, s8, Float) -> Float = (v0: s8, v1: s8, v2: Float) -> Float {
    var v5: Float = v2 in
    var v11: Float = v5 in
    var v8: Float = v11 in
    let v3: Float = v8 / v2 in
    var v6: Float = v5 in
    let v15: s4 = v0.p1 in
    let v43: s3 = v15.p0 in
    let v53: s0 = v43.p0 in
    let v34: [[Float]] = v53.p0 in
    let v44: [Float] = v34[0] in
    let v100: [[Float]] = v53.p0 in
    let v36: Float = v5 * v3 in
    let v67: Float = v44[0] in
    var v79: [[Float]] = v100 in
    let v102: Float = v36 + v6 in
    v79[1] = v44 in
    let v194: [Float] = v79[0] in
    let v173: Float = v194[0] in
    v8 = v173 in
    v6 = v67 in
    v11 = v67 in
    v102
  } in
  fun loop(i: Int, v0: s8, v1: s8, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s8 = s8([s6([s4(s3(s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]), s1(s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]]), [s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]]), s0([[15.0], [16.0]], [[17.0], [18.0], [19.0]])], s0([[20.0], [21.0]], [[22.0], [23.0], [24.0]]))), [s0([[25.0], [26.0]], [[27.0], [28.0], [29.0]]), s0([[30.0], [31.0]], [[32.0], [33.0], [34.0]])])], [35.0, 36.0]), s6([s4(s3(s0([[37.0], [38.0]], [[39.0], [40.0], [41.0]]), s1(s0([[42.0], [43.0]], [[44.0], [45.0], [46.0]]), [s0([[47.0], [48.0]], [[49.0], [50.0], [51.0]]), s0([[52.0], [53.0]], [[54.0], [55.0], [56.0]])], s0([[57.0], [58.0]], [[59.0], [60.0], [61.0]]))), [s0([[62.0], [63.0]], [[64.0], [65.0], [66.0]]), s0([[67.0], [68.0]], [[69.0], [70.0], [71.0]])])], [72.0, 73.0]), s6([s4(s3(s0([[74.0], [75.0]], [[76.0], [77.0], [78.0]]), s1(s0([[79.0], [80.0]], [[81.0], [82.0], [83.0]]), [s0([[84.0], [85.0]], [[86.0], [87.0], [88.0]]), s0([[89.0], [90.0]], [[91.0], [92.0], [93.0]])], s0([[94.0], [95.0]], [[96.0], [97.0], [98.0]]))), [s0([[99.0], [100.0]], [[101.0], [102.0], [103.0]]), s0([[104.0], [105.0]], [[106.0], [107.0], [108.0]])])], [109.0, 110.0])], s4(s3(s0([[111.0], [112.0]], [[113.0], [114.0], [115.0]]), s1(s0([[116.0], [117.0]], [[118.0], [119.0], [120.0]]), [s0([[121.0], [122.0]], [[123.0], [124.0], [125.0]]), s0([[126.0], [127.0]], [[128.0], [129.0], [130.0]])], s0([[131.0], [132.0]], [[133.0], [134.0], [135.0]]))), [s0([[136.0], [137.0]], [[138.0], [139.0], [140.0]]), s0([[141.0], [142.0]], [[143.0], [144.0], [145.0]])])) in
    let v1: s8 = s8([s6([s4(s3(s0([[146.0], [147.0]], [[148.0], [149.0], [150.0]]), s1(s0([[151.0], [152.0]], [[153.0], [154.0], [155.0]]), [s0([[156.0], [157.0]], [[158.0], [159.0], [160.0]]), s0([[161.0], [162.0]], [[163.0], [164.0], [165.0]])], s0([[166.0], [167.0]], [[168.0], [169.0], [170.0]]))), [s0([[171.0], [172.0]], [[173.0], [174.0], [175.0]]), s0([[176.0], [177.0]], [[178.0], [179.0], [180.0]])])], [181.0, 182.0]), s6([s4(s3(s0([[183.0], [184.0]], [[185.0], [186.0], [187.0]]), s1(s0([[188.0], [189.0]], [[190.0], [191.0], [192.0]]), [s0([[193.0], [194.0]], [[195.0], [196.0], [197.0]]), s0([[198.0], [199.0]], [[200.0], [201.0], [202.0]])], s0([[203.0], [204.0]], [[205.0], [206.0], [207.0]]))), [s0([[208.0], [209.0]], [[210.0], [211.0], [212.0]]), s0([[213.0], [214.0]], [[215.0], [216.0], [217.0]])])], [218.0, 219.0]), s6([s4(s3(s0([[220.0], [221.0]], [[222.0], [223.0], [224.0]]), s1(s0([[225.0], [226.0]], [[227.0], [228.0], [229.0]]), [s0([[230.0], [231.0]], [[232.0], [233.0], [234.0]]), s0([[235.0], [236.0]], [[237.0], [238.0], [239.0]])], s0([[240.0], [241.0]], [[242.0], [243.0], [244.0]]))), [s0([[245.0], [246.0]], [[247.0], [248.0], [249.0]]), s0([[250.0], [251.0]], [[252.0], [253.0], [254.0]])])], [255.0, 256.0])], s4(s3(s0([[257.0], [258.0]], [[259.0], [260.0], [261.0]]), s1(s0([[262.0], [263.0]], [[264.0], [265.0], [266.0]]), [s0([[267.0], [268.0]], [[269.0], [270.0], [271.0]]), s0([[272.0], [273.0]], [[274.0], [275.0], [276.0]])], s0([[277.0], [278.0]], [[279.0], [280.0], [281.0]]))), [s0([[282.0], [283.0]], [[284.0], [285.0], [286.0]]), s0([[287.0], [288.0]], [[289.0], [290.0], [291.0]])])) in
    let v2: Float = 292.0 in
    let initialResult: Float = 292.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()