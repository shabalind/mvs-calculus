  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
  } in
  struct s2 {
    var p0: s0
    var p1: s0
  } in
  struct s3 {
    var p0: [s0]
    var p1: s2
  } in
  let f21: (s0) -> s0 = (v0: s0) -> s0 {
    var v7: s0 = v0 in
    v7 = v0 in
    let v5: [s0] = [v7, v7, v7, v0, v0, v0, v0] in
    let v4: [s0] = [v0, v7, v0, v0, v0, v7, v7] in
    let v2: s0 = v5[4] in
    let v3: [[Float]] = v7.p1 in
    var v6: [[Float]] = v3 in
    let v11: s0 = v4[5] in
    v7.p1 = v6 in
    var v10: s0 = v11 in
    var v9: s0 = v2 in
    v10.p1 = v6 in
    var v15: s0 = v0 in
    let v14: [Float] = v3[0] in
    v10.p1 = v6 in
    v6[1] = v14 in
    v6[1] = v14 in
    let v17: [[Float]] = v2.p0 in
    let v41: [[Float]] = v7.p1 in
    let v16: [[Float]] = v9.p0 in
    let v18: [Float] = v41[1] in
    var v19: [Float] = v14 in
    v6[1] = v19 in
    let v20: s0 = v5[3] in
    v6[1] = v14 in
    let v30: s0 = v4[5] in
    let v29: [[Float]] = v20.p0 in
    var v21: s0 = v2 in
    let v22: [Float] = v17[0] in
    let v23: [[Float]] = v11.p0 in
    v21.p0 = v29 in
    v6[0] = v14 in
    let v31: s0 = v5[4] in
    var v27: [s0] = v5 in
    v10.p0 = v29 in
    v15.p0 = v16 in
    let v51: s0 = v27[4] in
    let v55: s0 = v27[5] in
    let v49: Float = v19[0] in
    v21 = v9 in
    v27[4] = v21 in
    let v40: [Float] = v23[0] in
    var v37: Float = v49 in
    v19[0] = v49 in
    v19[0] = v49 in
    v27[3] = v21 in
    v6[0] = v18 in
    v6[0] = v22 in
    let v60: [[Float]] = v15.p1 in
    v10.p1 = v60 in
    v21 = v31 in
    let v46: [[Float]] = v20.p0 in
    v9.p0 = v23 in
    let v42: s0 = v5[4] in
    let v36: s2 = s2(v31, v30) in
    let v73: [[Float]] = v42.p1 in
    v7.p1 = v6 in
    v19[0] = v37 in
    v19[0] = v49 in
    let v74: s0 = v36.p0 in
    let v63: [[Float]] = v55.p1 in
    let v52: [[Float]] = v10.p0 in
    v27[0] = v74 in
    v7.p0 = v52 in
    v6[0] = v40 in
    v9.p1 = v73 in
    v9.p0 = v23 in
    v6[0] = v22 in
    v9.p0 = v46 in
    v9.p1 = v63 in
    v51
  } in
  let noinline_f0: (s3, s1, [s3], Float) -> Float = (v0: s3, v1: s1, v2: [s3], v3: Float) -> Float {
    var v5: s3 = v0 in
    var v7: s3 = v5 in
    var v9: s3 = v7 in
    let v8: s2 = v5.p1 in
    let v14: [s0] = v9.p0 in
    let v13: s0 = v14[0] in
    let v21: s3 = v2[0] in
    let v17: s0 = f21(v13) in
    var v22: s0 = v17 in
    v5 = v9 in
    let v33: [[Float]] = v17.p1 in
    v9.p0 = v14 in
    let v51: s0 = v8.p0 in
    let v45: [[Float]] = v51.p1 in
    var v66: [[Float]] = v33 in
    let v98: s2 = v21.p1 in
    let v60: [[Float]] = v22.p1 in
    let v106: [Float] = v60[1] in
    v22.p1 = v45 in
    v7.p1 = v98 in
    v22.p1 = v33 in
    v22.p1 = v66 in
    let v93: Float = v106[0] in
    v93
  } in
  fun loop(i: Int, v0: s3, v1: s1, v2: [s3], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3([s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]])], s2(s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]]), s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]]))) in
    let v1: s1 = s1([[s0([[15.0], [16.0], [17.0]], [[18.0], [19.0]])], [s0([[20.0], [21.0], [22.0]], [[23.0], [24.0]])]], [s0([[25.0], [26.0], [27.0]], [[28.0], [29.0]]), s0([[30.0], [31.0], [32.0]], [[33.0], [34.0]])]) in
    let v2: [s3] = [s3([s0([[35.0], [36.0], [37.0]], [[38.0], [39.0]])], s2(s0([[40.0], [41.0], [42.0]], [[43.0], [44.0]]), s0([[45.0], [46.0], [47.0]], [[48.0], [49.0]])))] in
    let v3: Float = 50.0 in
    let initialResult: Float = 50.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()