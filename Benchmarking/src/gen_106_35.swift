  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: Double
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: s1
    var p1: [s0]
  }
  struct s4 {
    var p0: s2
    var p1: [s1]
  }
  @inline(never)
  func f0(_ v0: [s2], _ v1: [[s1]], _ v2: s2, _ v3: [s2], _ v4: [[s4]], _ v5: [[s1]], _ v6: [s0], _ v7: Double) -> Double {
    let v8: Double = v7 + v7
    let v10: [s1] = v5[0]
    let v20: s1 = v10[0]
    let v17: s0 = v20.p1
    let v14: Double = v17.p1
    let v29: s0 = v6[1]
    let v47: Double = v8 * v14
    let v22: [[Double]] = v29.p0
    let v55: [Double] = v22[2]
    let v45: Double = v55[0]
    let v84: Double = v14 / v7
    let v136: [Double] = [v45, v8, v84, v14, v47]
    let v262: Double = v136[3]
    return v262
  }
  func benchmark() {
    let v0: [s2] = [s2(p0: s1(p0: s0(p0: [[0.0], [1.0], [2.0]], p1: 3.0), p1: s0(p0: [[4.0], [5.0], [6.0]], p1: 7.0)), p1: [s0(p0: [[8.0], [9.0], [10.0]], p1: 11.0), s0(p0: [[12.0], [13.0], [14.0]], p1: 15.0), s0(p0: [[16.0], [17.0], [18.0]], p1: 19.0)]), s2(p0: s1(p0: s0(p0: [[20.0], [21.0], [22.0]], p1: 23.0), p1: s0(p0: [[24.0], [25.0], [26.0]], p1: 27.0)), p1: [s0(p0: [[28.0], [29.0], [30.0]], p1: 31.0), s0(p0: [[32.0], [33.0], [34.0]], p1: 35.0), s0(p0: [[36.0], [37.0], [38.0]], p1: 39.0)])]
    let v1: [[s1]] = [[s1(p0: s0(p0: [[40.0], [41.0], [42.0]], p1: 43.0), p1: s0(p0: [[44.0], [45.0], [46.0]], p1: 47.0))]]
    let v2: s2 = s2(p0: s1(p0: s0(p0: [[48.0], [49.0], [50.0]], p1: 51.0), p1: s0(p0: [[52.0], [53.0], [54.0]], p1: 55.0)), p1: [s0(p0: [[56.0], [57.0], [58.0]], p1: 59.0), s0(p0: [[60.0], [61.0], [62.0]], p1: 63.0), s0(p0: [[64.0], [65.0], [66.0]], p1: 67.0)])
    let v3: [s2] = [s2(p0: s1(p0: s0(p0: [[68.0], [69.0], [70.0]], p1: 71.0), p1: s0(p0: [[72.0], [73.0], [74.0]], p1: 75.0)), p1: [s0(p0: [[76.0], [77.0], [78.0]], p1: 79.0), s0(p0: [[80.0], [81.0], [82.0]], p1: 83.0), s0(p0: [[84.0], [85.0], [86.0]], p1: 87.0)]), s2(p0: s1(p0: s0(p0: [[88.0], [89.0], [90.0]], p1: 91.0), p1: s0(p0: [[92.0], [93.0], [94.0]], p1: 95.0)), p1: [s0(p0: [[96.0], [97.0], [98.0]], p1: 99.0), s0(p0: [[100.0], [101.0], [102.0]], p1: 103.0), s0(p0: [[104.0], [105.0], [106.0]], p1: 107.0)]), s2(p0: s1(p0: s0(p0: [[108.0], [109.0], [110.0]], p1: 111.0), p1: s0(p0: [[112.0], [113.0], [114.0]], p1: 115.0)), p1: [s0(p0: [[116.0], [117.0], [118.0]], p1: 119.0), s0(p0: [[120.0], [121.0], [122.0]], p1: 123.0), s0(p0: [[124.0], [125.0], [126.0]], p1: 127.0)])]
    let v4: [[s4]] = [[s4(p0: s2(p0: s1(p0: s0(p0: [[128.0], [129.0], [130.0]], p1: 131.0), p1: s0(p0: [[132.0], [133.0], [134.0]], p1: 135.0)), p1: [s0(p0: [[136.0], [137.0], [138.0]], p1: 139.0), s0(p0: [[140.0], [141.0], [142.0]], p1: 143.0), s0(p0: [[144.0], [145.0], [146.0]], p1: 147.0)]), p1: [s1(p0: s0(p0: [[148.0], [149.0], [150.0]], p1: 151.0), p1: s0(p0: [[152.0], [153.0], [154.0]], p1: 155.0))])]]
    let v5: [[s1]] = [[s1(p0: s0(p0: [[156.0], [157.0], [158.0]], p1: 159.0), p1: s0(p0: [[160.0], [161.0], [162.0]], p1: 163.0))], [s1(p0: s0(p0: [[164.0], [165.0], [166.0]], p1: 167.0), p1: s0(p0: [[168.0], [169.0], [170.0]], p1: 171.0))], [s1(p0: s0(p0: [[172.0], [173.0], [174.0]], p1: 175.0), p1: s0(p0: [[176.0], [177.0], [178.0]], p1: 179.0))]]
    let v6: [s0] = [s0(p0: [[180.0], [181.0], [182.0]], p1: 183.0), s0(p0: [[184.0], [185.0], [186.0]], p1: 187.0), s0(p0: [[188.0], [189.0], [190.0]], p1: 191.0)]
    let v7: Double = 192.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 192.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4, v5, v6, v7)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
