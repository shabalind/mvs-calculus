  struct s0 {
    var p0: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: [s0]
    var p1: s0
    var p2: s0
    var p3: s1
  } in
  struct s3 {
    var p0: [[s1]]
    var p1: [s1]
    var p2: [s0]
    var p3: [s2]
    var p4: s1
  } in
  struct s5 {
    var p0: [s3]
    var p1: s1
  } in
  struct s6 {
    var p0: [s5]
    var p1: [s5]
  } in
  struct s13 {
    var p0: s3
    var p1: [s6]
  } in
  let f40: (Float) -> Float = (v0: Float) -> Float {
    var v7: Float = v0 in
    var v5: Float = v7 in
    var v9: Float = v0 in
    var v3: Float = v5 in
    var v8: Float = v9 in
    var v2: Float = v7 in
    var v14: Float = v2 in
    var v15: Float = v0 in
    let v24: Float = v3 / v14 in
    let v42: [Float] = [v24, v15, v24, v3, v8, v0] in
    var v30: [Float] = v42 in
    var v16: [Float] = v42 in
    var v31: Float = v9 in
    v16[4] = v14 in
    let v78: Float = v30[4] in
    v16[4] = v78 in
    var v49: [Float] = v16 in
    v30[3] = v78 in
    v16[3] = v3 in
    v49[1] = v31 in
    let v105: Float = v49[2] in
    v105
  } in
  let noinline_f0: (s13, Float) -> Float = (v0: s13, v1: Float) -> Float {
    var v4: Float = v1 in
    var v6: Float = v4 in
    var v16: Float = v4 in
    var v40: Float = v16 in
    let v32: Float = v6 + v1 in
    let v29: Float = f40(v40) in
    let v42: Float = f40(v40) in
    let v46: Float = v32 / v42 in
    let v91: Float = f40(v29) in
    v4 = v46 in
    v91
  } in
  fun loop(i: Int, v0: s13, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s13 = s13(s3([[s1(s0([[0.0]]), [s0([[1.0]])])]], [s1(s0([[2.0]]), [s0([[3.0]])])], [s0([[4.0]])], [s2([s0([[5.0]]), s0([[6.0]]), s0([[7.0]])], s0([[8.0]]), s0([[9.0]]), s1(s0([[10.0]]), [s0([[11.0]])])), s2([s0([[12.0]]), s0([[13.0]]), s0([[14.0]])], s0([[15.0]]), s0([[16.0]]), s1(s0([[17.0]]), [s0([[18.0]])]))], s1(s0([[19.0]]), [s0([[20.0]])])), [s6([s5([s3([[s1(s0([[21.0]]), [s0([[22.0]])])]], [s1(s0([[23.0]]), [s0([[24.0]])])], [s0([[25.0]])], [s2([s0([[26.0]]), s0([[27.0]]), s0([[28.0]])], s0([[29.0]]), s0([[30.0]]), s1(s0([[31.0]]), [s0([[32.0]])])), s2([s0([[33.0]]), s0([[34.0]]), s0([[35.0]])], s0([[36.0]]), s0([[37.0]]), s1(s0([[38.0]]), [s0([[39.0]])]))], s1(s0([[40.0]]), [s0([[41.0]])]))], s1(s0([[42.0]]), [s0([[43.0]])])), s5([s3([[s1(s0([[44.0]]), [s0([[45.0]])])]], [s1(s0([[46.0]]), [s0([[47.0]])])], [s0([[48.0]])], [s2([s0([[49.0]]), s0([[50.0]]), s0([[51.0]])], s0([[52.0]]), s0([[53.0]]), s1(s0([[54.0]]), [s0([[55.0]])])), s2([s0([[56.0]]), s0([[57.0]]), s0([[58.0]])], s0([[59.0]]), s0([[60.0]]), s1(s0([[61.0]]), [s0([[62.0]])]))], s1(s0([[63.0]]), [s0([[64.0]])]))], s1(s0([[65.0]]), [s0([[66.0]])])), s5([s3([[s1(s0([[67.0]]), [s0([[68.0]])])]], [s1(s0([[69.0]]), [s0([[70.0]])])], [s0([[71.0]])], [s2([s0([[72.0]]), s0([[73.0]]), s0([[74.0]])], s0([[75.0]]), s0([[76.0]]), s1(s0([[77.0]]), [s0([[78.0]])])), s2([s0([[79.0]]), s0([[80.0]]), s0([[81.0]])], s0([[82.0]]), s0([[83.0]]), s1(s0([[84.0]]), [s0([[85.0]])]))], s1(s0([[86.0]]), [s0([[87.0]])]))], s1(s0([[88.0]]), [s0([[89.0]])]))], [s5([s3([[s1(s0([[90.0]]), [s0([[91.0]])])]], [s1(s0([[92.0]]), [s0([[93.0]])])], [s0([[94.0]])], [s2([s0([[95.0]]), s0([[96.0]]), s0([[97.0]])], s0([[98.0]]), s0([[99.0]]), s1(s0([[100.0]]), [s0([[101.0]])])), s2([s0([[102.0]]), s0([[103.0]]), s0([[104.0]])], s0([[105.0]]), s0([[106.0]]), s1(s0([[107.0]]), [s0([[108.0]])]))], s1(s0([[109.0]]), [s0([[110.0]])]))], s1(s0([[111.0]]), [s0([[112.0]])])), s5([s3([[s1(s0([[113.0]]), [s0([[114.0]])])]], [s1(s0([[115.0]]), [s0([[116.0]])])], [s0([[117.0]])], [s2([s0([[118.0]]), s0([[119.0]]), s0([[120.0]])], s0([[121.0]]), s0([[122.0]]), s1(s0([[123.0]]), [s0([[124.0]])])), s2([s0([[125.0]]), s0([[126.0]]), s0([[127.0]])], s0([[128.0]]), s0([[129.0]]), s1(s0([[130.0]]), [s0([[131.0]])]))], s1(s0([[132.0]]), [s0([[133.0]])]))], s1(s0([[134.0]]), [s0([[135.0]])]))]), s6([s5([s3([[s1(s0([[136.0]]), [s0([[137.0]])])]], [s1(s0([[138.0]]), [s0([[139.0]])])], [s0([[140.0]])], [s2([s0([[141.0]]), s0([[142.0]]), s0([[143.0]])], s0([[144.0]]), s0([[145.0]]), s1(s0([[146.0]]), [s0([[147.0]])])), s2([s0([[148.0]]), s0([[149.0]]), s0([[150.0]])], s0([[151.0]]), s0([[152.0]]), s1(s0([[153.0]]), [s0([[154.0]])]))], s1(s0([[155.0]]), [s0([[156.0]])]))], s1(s0([[157.0]]), [s0([[158.0]])])), s5([s3([[s1(s0([[159.0]]), [s0([[160.0]])])]], [s1(s0([[161.0]]), [s0([[162.0]])])], [s0([[163.0]])], [s2([s0([[164.0]]), s0([[165.0]]), s0([[166.0]])], s0([[167.0]]), s0([[168.0]]), s1(s0([[169.0]]), [s0([[170.0]])])), s2([s0([[171.0]]), s0([[172.0]]), s0([[173.0]])], s0([[174.0]]), s0([[175.0]]), s1(s0([[176.0]]), [s0([[177.0]])]))], s1(s0([[178.0]]), [s0([[179.0]])]))], s1(s0([[180.0]]), [s0([[181.0]])])), s5([s3([[s1(s0([[182.0]]), [s0([[183.0]])])]], [s1(s0([[184.0]]), [s0([[185.0]])])], [s0([[186.0]])], [s2([s0([[187.0]]), s0([[188.0]]), s0([[189.0]])], s0([[190.0]]), s0([[191.0]]), s1(s0([[192.0]]), [s0([[193.0]])])), s2([s0([[194.0]]), s0([[195.0]]), s0([[196.0]])], s0([[197.0]]), s0([[198.0]]), s1(s0([[199.0]]), [s0([[200.0]])]))], s1(s0([[201.0]]), [s0([[202.0]])]))], s1(s0([[203.0]]), [s0([[204.0]])]))], [s5([s3([[s1(s0([[205.0]]), [s0([[206.0]])])]], [s1(s0([[207.0]]), [s0([[208.0]])])], [s0([[209.0]])], [s2([s0([[210.0]]), s0([[211.0]]), s0([[212.0]])], s0([[213.0]]), s0([[214.0]]), s1(s0([[215.0]]), [s0([[216.0]])])), s2([s0([[217.0]]), s0([[218.0]]), s0([[219.0]])], s0([[220.0]]), s0([[221.0]]), s1(s0([[222.0]]), [s0([[223.0]])]))], s1(s0([[224.0]]), [s0([[225.0]])]))], s1(s0([[226.0]]), [s0([[227.0]])])), s5([s3([[s1(s0([[228.0]]), [s0([[229.0]])])]], [s1(s0([[230.0]]), [s0([[231.0]])])], [s0([[232.0]])], [s2([s0([[233.0]]), s0([[234.0]]), s0([[235.0]])], s0([[236.0]]), s0([[237.0]]), s1(s0([[238.0]]), [s0([[239.0]])])), s2([s0([[240.0]]), s0([[241.0]]), s0([[242.0]])], s0([[243.0]]), s0([[244.0]]), s1(s0([[245.0]]), [s0([[246.0]])]))], s1(s0([[247.0]]), [s0([[248.0]])]))], s1(s0([[249.0]]), [s0([[250.0]])]))])]) in
    let v1: Float = 251.0 in
    let initialResult: Float = 251.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()