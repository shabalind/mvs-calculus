  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: s1
    var p1: s1
  }
  struct s7 {
    var p0: [[s2]]
    var p1: [s0]
  }
  struct s8 {
    var p0: [[s7]]
    var p1: [s7]
  }
  @inline(never)
  func f0(_ v0: s8, _ v1: Double) -> Double {
    var v6: Double = v1
    v6 = v1
    let v14: [Double] = [v6, v6, v6, v6, v6, v1]
    let v17: Double = v14[5]
    let v33: Double = v14[1]
    let v23: Double = v33 + v33
    var v31: Double = v17
    let v82: Double = v23 - v31
    var v65: Double = v82
    let v68: Double = v31 - v65
    return v68
  }
  func benchmark() {
    let v0: s8 = s8(p0: [[s7(p0: [[s2(p0: s1(p0: s0(p0: [[0.0]], p1: [[1.0], [2.0]]), p1: [s0(p0: [[3.0]], p1: [[4.0], [5.0]])]), p1: s1(p0: s0(p0: [[6.0]], p1: [[7.0], [8.0]]), p1: [s0(p0: [[9.0]], p1: [[10.0], [11.0]])]))], [s2(p0: s1(p0: s0(p0: [[12.0]], p1: [[13.0], [14.0]]), p1: [s0(p0: [[15.0]], p1: [[16.0], [17.0]])]), p1: s1(p0: s0(p0: [[18.0]], p1: [[19.0], [20.0]]), p1: [s0(p0: [[21.0]], p1: [[22.0], [23.0]])]))]], p1: [s0(p0: [[24.0]], p1: [[25.0], [26.0]]), s0(p0: [[27.0]], p1: [[28.0], [29.0]])])]], p1: [s7(p0: [[s2(p0: s1(p0: s0(p0: [[30.0]], p1: [[31.0], [32.0]]), p1: [s0(p0: [[33.0]], p1: [[34.0], [35.0]])]), p1: s1(p0: s0(p0: [[36.0]], p1: [[37.0], [38.0]]), p1: [s0(p0: [[39.0]], p1: [[40.0], [41.0]])]))], [s2(p0: s1(p0: s0(p0: [[42.0]], p1: [[43.0], [44.0]]), p1: [s0(p0: [[45.0]], p1: [[46.0], [47.0]])]), p1: s1(p0: s0(p0: [[48.0]], p1: [[49.0], [50.0]]), p1: [s0(p0: [[51.0]], p1: [[52.0], [53.0]])]))]], p1: [s0(p0: [[54.0]], p1: [[55.0], [56.0]]), s0(p0: [[57.0]], p1: [[58.0], [59.0]])]), s7(p0: [[s2(p0: s1(p0: s0(p0: [[60.0]], p1: [[61.0], [62.0]]), p1: [s0(p0: [[63.0]], p1: [[64.0], [65.0]])]), p1: s1(p0: s0(p0: [[66.0]], p1: [[67.0], [68.0]]), p1: [s0(p0: [[69.0]], p1: [[70.0], [71.0]])]))], [s2(p0: s1(p0: s0(p0: [[72.0]], p1: [[73.0], [74.0]]), p1: [s0(p0: [[75.0]], p1: [[76.0], [77.0]])]), p1: s1(p0: s0(p0: [[78.0]], p1: [[79.0], [80.0]]), p1: [s0(p0: [[81.0]], p1: [[82.0], [83.0]])]))]], p1: [s0(p0: [[84.0]], p1: [[85.0], [86.0]]), s0(p0: [[87.0]], p1: [[88.0], [89.0]])])])
    let v1: Double = 90.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 90.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
