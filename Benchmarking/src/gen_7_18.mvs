  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s3 {
    var p0: s0
    var p1: s0
  } in
  struct s5 {
    var p0: s3
    var p1: [[Float]]
  } in
  let f8: (Float) -> Float = (v0: Float) -> Float {
    var v5: Float = v0 in
    v5 = v0 in
    let v4: Float = v0 / v5 in
    var v3: Float = v4 in
    var v7: Float = v3 in
    var v23: Float = v4 in
    var v2: Float = v23 in
    var v6: Float = v4 in
    var v10: Float = v4 in
    var v11: Float = v3 in
    var v16: Float = v23 in
    var v18: Float = v10 in
    let v13: Float = v2 * v6 in
    var v17: Float = v13 in
    v17 = v16 in
    var v21: Float = v11 in
    var v37: Float = v4 in
    let v39: Float = v3 + v6 in
    var v31: Float = v7 in
    v6 = v21 in
    var v45: Float = v39 in
    var v32: Float = v5 in
    var v60: Float = v0 in
    v11 = v3 in
    var v65: Float = v16 in
    let v58: [Float] = [v2, v60, v65] in
    var v26: [Float] = v58 in
    v26[0] = v3 in
    v26[2] = v31 in
    v26[2] = v32 in
    v26[1] = v45 in
    v26[2] = v37 in
    v26[1] = v18 in
    var v51: [Float] = v26 in
    v26[2] = v17 in
    v26[1] = v17 in
    v26[1] = v17 in
    let v81: Float = v51[0] in
    v26[2] = v17 in
    v81
  } in
  let noinline_f0: ([s5], Float) -> Float = (v0: [s5], v1: Float) -> Float {
    var v5: Float = v1 in
    let v4: Float = f8(v1) in
    let v3: Float = f8(v4) in
    let v37: Float = f8(v3) in
    let v45: Float = v5 - v37 in
    v45
  } in
  fun loop(i: Int, v0: [s5], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s5] = [s5(s3(s0([[0.0]], [[1.0]]), s0([[2.0]], [[3.0]])), [[4.0], [5.0], [6.0]]), s5(s3(s0([[7.0]], [[8.0]]), s0([[9.0]], [[10.0]])), [[11.0], [12.0], [13.0]])] in
    let v1: Float = 14.0 in
    let initialResult: Float = 14.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()