  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: [s0]
    var p1: [[s0]]
  } in
  struct s3 {
    var p0: s2
    var p1: s1
  } in
  struct s7 {
    var p0: [s1]
    var p1: s3
  } in
  let f2: ([[s0]]) -> [[s0]] = (v0: [[s0]]) -> [[s0]] {
    var v3: [[s0]] = v0 in
    v3 = v0 in
    var v1: [[s0]] = v0 in
    var v2: [[s0]] = v1 in
    var v6: [[s0]] = v0 in
    let v7: [s0] = v1[1] in
    v3[2] = v7 in
    var v4: [[s0]] = v6 in
    var v8: [s0] = v7 in
    let v9: [s0] = v1[1] in
    v3[1] = v8 in
    let v5: s0 = v8[0] in
    var v12: s0 = v5 in
    let v16: s0 = v8[0] in
    let v20: [[Float]] = v12.p1 in
    v1[1] = v8 in
    let v10: [[Float]] = v16.p0 in
    var v11: [[Float]] = v20 in
    let v21: [[Float]] = v5.p0 in
    let v15: [[Float]] = v16.p0 in
    let v22: [[Float]] = v5.p0 in
    var v14: [[Float]] = v21 in
    let v25: s0 = v8[0] in
    let v34: [Float] = v14[1] in
    let v24: [[Float]] = v16.p1 in
    let v13: s0 = s0(v21, v20) in
    var v43: [s0] = v7 in
    v12.p1 = v20 in
    let v32: [Float] = v15[0] in
    let v30: [[Float]] = v25.p0 in
    let v17: [[Float]] = v25.p1 in
    var v33: [Float] = v32 in
    v3[1] = v9 in
    v4[0] = v43 in
    v3[2] = v43 in
    var v29: [[Float]] = v20 in
    let v39: Float = v32[0] in
    let v35: [[Float]] = v13.p1 in
    let v19: Float = v34[0] in
    v14[0] = v33 in
    let v26: [Float] = v17[1] in
    let v73: s0 = v8[0] in
    v12.p1 = v29 in
    var v58: [s0] = v9 in
    v4[1] = v58 in
    v11 = v20 in
    let v59: [s0] = v2[2] in
    v33[0] = v19 in
    let v97: [s0] = v6[2] in
    let v31: s0 = v97[0] in
    let v36: [[Float]] = v73.p0 in
    let v48: s0 = s0(v36, v35) in
    v58[0] = v48 in
    let v38: Float = v19 * v39 in
    let v93: [[Float]] = v25.p0 in
    v12.p1 = v29 in
    let v37: [s0] = v4[2] in
    v11[1] = v26 in
    var v23: s0 = v31 in
    let v70: [[[Float]]] = [v17, v35, v24] in
    let v84: [[Float]] = v48.p1 in
    v23.p1 = v17 in
    var v52: [Float] = v26 in
    v14[1] = v52 in
    v12.p1 = v20 in
    let v104: s0 = v59[0] in
    let v81: [[Float]] = v70[0] in
    v12.p1 = v84 in
    v12.p0 = v93 in
    v12.p0 = v15 in
    let v45: [[Float]] = v23.p1 in
    let v86: [s0] = v3[1] in
    v23.p0 = v22 in
    let v124: s1 = s1(v12, v6) in
    var v51: Float = v19 in
    v2[0] = v8 in
    let v56: s0 = v124.p0 in
    v23.p1 = v84 in
    let v66: [s0] = v3[0] in
    var v90: [s0] = v9 in
    v11[0] = v34 in
    v33[0] = v38 in
    let v78: Float = v19 + v51 in
    v12.p1 = v17 in
    v4[0] = v9 in
    let v72: [[Float]] = v104.p1 in
    v90[0] = v56 in
    v8 = v7 in
    v2[1] = v37 in
    v12.p0 = v36 in
    var v169: [[s0]] = v3 in
    v169[0] = v90 in
    v43[0] = v31 in
    v90[0] = v25 in
    v169[2] = v66 in
    v23.p1 = v81 in
    let v155: Float = v78 * v51 in
    v23.p0 = v30 in
    v23.p1 = v72 in
    v12.p1 = v45 in
    v52[0] = v155 in
    v3[1] = v86 in
    let v100: [s0] = v2[0] in
    v12.p0 = v10 in
    v12.p1 = v11 in
    v2[0] = v58 in
    v2[1] = v100 in
    v8[0] = v12 in
    v169
  } in
  let noinline_f0: (s7, Float) -> Float = (v0: s7, v1: Float) -> Float {
    let v5: s3 = v0.p1 in
    let v4: s2 = v5.p0 in
    let v11: [[s0]] = v4.p1 in
    let v16: [[s0]] = f2(v11) in
    let v12: [s0] = v16[0] in
    let v18: s0 = v12[0] in
    var v13: s0 = v18 in
    let v26: [[Float]] = v13.p0 in
    let v37: [Float] = v26[0] in
    v13.p0 = v26 in
    let v63: [[Float]] = v13.p0 in
    v13.p0 = v63 in
    v13.p0 = v26 in
    v13.p0 = v26 in
    let v159: Float = v37[0] in
    v159
  } in
  fun loop(i: Int, v0: s7, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s7 = s7([s1(s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]), [[s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]])], [s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]])], [s0([[15.0], [16.0]], [[17.0], [18.0], [19.0]])]]), s1(s0([[20.0], [21.0]], [[22.0], [23.0], [24.0]]), [[s0([[25.0], [26.0]], [[27.0], [28.0], [29.0]])], [s0([[30.0], [31.0]], [[32.0], [33.0], [34.0]])], [s0([[35.0], [36.0]], [[37.0], [38.0], [39.0]])]]), s1(s0([[40.0], [41.0]], [[42.0], [43.0], [44.0]]), [[s0([[45.0], [46.0]], [[47.0], [48.0], [49.0]])], [s0([[50.0], [51.0]], [[52.0], [53.0], [54.0]])], [s0([[55.0], [56.0]], [[57.0], [58.0], [59.0]])]])], s3(s2([s0([[60.0], [61.0]], [[62.0], [63.0], [64.0]]), s0([[65.0], [66.0]], [[67.0], [68.0], [69.0]])], [[s0([[70.0], [71.0]], [[72.0], [73.0], [74.0]])], [s0([[75.0], [76.0]], [[77.0], [78.0], [79.0]])], [s0([[80.0], [81.0]], [[82.0], [83.0], [84.0]])]]), s1(s0([[85.0], [86.0]], [[87.0], [88.0], [89.0]]), [[s0([[90.0], [91.0]], [[92.0], [93.0], [94.0]])], [s0([[95.0], [96.0]], [[97.0], [98.0], [99.0]])], [s0([[100.0], [101.0]], [[102.0], [103.0], [104.0]])]]))) in
    let v1: Float = 105.0 in
    let initialResult: Float = 105.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()