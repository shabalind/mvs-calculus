  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s2 {
    var p0: [[s0]]
    var p1: [s0]
  } in
  let noinline_f0: ([s2], s2, Float) -> Float = (v0: [s2], v1: s2, v2: Float) -> Float {
    let v8: s2 = v0[1] in
    let v7: [s0] = v8.p1 in
    let v12: Float = v2 + v2 in
    let v49: s0 = v7[0] in
    let v25: [[Float]] = v49.p1 in
    let v48: [Float] = v25[0] in
    var v106: Float = v12 in
    var v194: [Float] = v48 in
    let v64: Float = v194[0] in
    let v142: Float = v64 / v106 in
    var v91: Float = v106 in
    v194[0] = v142 in
    let v304: [Float] = [v12, v106, v91, v2, v142] in
    let v81: Float = v304[4] in
    v81
  } in
  fun loop(i: Int, v0: [s2], v1: s2, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2([[s0([[0.0], [1.0], [2.0]], [[3.0]])]], [s0([[4.0], [5.0], [6.0]], [[7.0]])]), s2([[s0([[8.0], [9.0], [10.0]], [[11.0]])]], [s0([[12.0], [13.0], [14.0]], [[15.0]])])] in
    let v1: s2 = s2([[s0([[16.0], [17.0], [18.0]], [[19.0]])]], [s0([[20.0], [21.0], [22.0]], [[23.0]])]) in
    let v2: Float = 24.0 in
    let initialResult: Float = 24.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()