  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s5 {
    var p0: s0
    var p1: s1
  } in
  let noinline_f0: (s5, Float) -> Float = (v0: s5, v1: Float) -> Float {
    let v2: [Float] = [v1, v1] in
    let v4: Float = v2[1] in
    let v9: Float = v1 + v4 in
    var v13: [Float] = v2 in
    let v21: Float = v13[0] in
    let v18: Float = v2[0] in
    v13[0] = v18 in
    v13[1] = v4 in
    var v31: Float = v21 in
    v13[0] = v4 in
    v13[1] = v4 in
    v13[0] = v18 in
    var v77: Float = v4 in
    v13[0] = v77 in
    let v83: Float = v31 / v9 in
    v83
  } in
  fun loop(i: Int, v0: s5, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s5 = s5(s0([[0.0]], [[1.0], [2.0], [3.0]]), s1([s0([[4.0]], [[5.0], [6.0], [7.0]])], [s0([[8.0]], [[9.0], [10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0], [15.0]]), s0([[16.0]], [[17.0], [18.0], [19.0]])])) in
    let v1: Float = 20.0 in
    let initialResult: Float = 20.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()