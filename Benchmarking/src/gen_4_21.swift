  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  }
  struct s2 {
    var p0: s0
    var p1: s0
  }
  struct s3 {
    var p0: s2
    var p1: s0
  }
  struct s4 {
    var p0: [s3]
    var p1: s1
  }
  struct s5 {
    var p0: [s1]
    var p1: [s3]
  }
  func f24(_ v0: Double) -> Double {
    var v4: Double = v0
    var v6: Double = v4
    var v5: Double = v0
    var v2: Double = v5
    let v12: [Double] = [v5, v6, v2]
    var v9: Double = v4
    var v8: [Double] = v12
    var v17: [Double] = v8
    var v18: [Double] = v17
    let v26: Double = v8[2]
    let v10: Double = v12[2]
    v18[0] = v9
    var v31: Double = v9
    let v35: Double = v18[0]
    let v61: Double = v18[2]
    var v45: Double = v5
    v17[2] = v6
    v18[0] = v35
    v17[1] = v10
    v18[2] = v31
    v4 = v45
    v18[0] = v26
    v17[0] = v6
    return v61
  }
  @inline(never)
  func f0(_ v0: [[s2]], _ v1: s1, _ v2: [[s4]], _ v3: [[s5]], _ v4: Double) -> Double {
    let v18: Double = f24(v4)
    let v34: Double = f24(v18)
    let v28: Double = v34 - v18
    let v30: Double = v28 + v18
    return v30
  }
  func benchmark() {
    let v0: [[s2]] = [[s2(p0: s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0]]), p1: s0(p0: [[5.0], [6.0], [7.0]], p1: [[8.0], [9.0]]))], [s2(p0: s0(p0: [[10.0], [11.0], [12.0]], p1: [[13.0], [14.0]]), p1: s0(p0: [[15.0], [16.0], [17.0]], p1: [[18.0], [19.0]]))], [s2(p0: s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0], [24.0]]), p1: s0(p0: [[25.0], [26.0], [27.0]], p1: [[28.0], [29.0]]))]]
    let v1: s1 = s1(p0: s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0]]), p1: [[s0(p0: [[35.0], [36.0], [37.0]], p1: [[38.0], [39.0]])]])
    let v2: [[s4]] = [[s4(p0: [s3(p0: s2(p0: s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0], [44.0]]), p1: s0(p0: [[45.0], [46.0], [47.0]], p1: [[48.0], [49.0]])), p1: s0(p0: [[50.0], [51.0], [52.0]], p1: [[53.0], [54.0]]))], p1: s1(p0: s0(p0: [[55.0], [56.0], [57.0]], p1: [[58.0], [59.0]]), p1: [[s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0], [64.0]])]]))], [s4(p0: [s3(p0: s2(p0: s0(p0: [[65.0], [66.0], [67.0]], p1: [[68.0], [69.0]]), p1: s0(p0: [[70.0], [71.0], [72.0]], p1: [[73.0], [74.0]])), p1: s0(p0: [[75.0], [76.0], [77.0]], p1: [[78.0], [79.0]]))], p1: s1(p0: s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0], [84.0]]), p1: [[s0(p0: [[85.0], [86.0], [87.0]], p1: [[88.0], [89.0]])]]))], [s4(p0: [s3(p0: s2(p0: s0(p0: [[90.0], [91.0], [92.0]], p1: [[93.0], [94.0]]), p1: s0(p0: [[95.0], [96.0], [97.0]], p1: [[98.0], [99.0]])), p1: s0(p0: [[100.0], [101.0], [102.0]], p1: [[103.0], [104.0]]))], p1: s1(p0: s0(p0: [[105.0], [106.0], [107.0]], p1: [[108.0], [109.0]]), p1: [[s0(p0: [[110.0], [111.0], [112.0]], p1: [[113.0], [114.0]])]]))]]
    let v3: [[s5]] = [[s5(p0: [s1(p0: s0(p0: [[115.0], [116.0], [117.0]], p1: [[118.0], [119.0]]), p1: [[s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0], [124.0]])]])], p1: [s3(p0: s2(p0: s0(p0: [[125.0], [126.0], [127.0]], p1: [[128.0], [129.0]]), p1: s0(p0: [[130.0], [131.0], [132.0]], p1: [[133.0], [134.0]])), p1: s0(p0: [[135.0], [136.0], [137.0]], p1: [[138.0], [139.0]])), s3(p0: s2(p0: s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0], [144.0]]), p1: s0(p0: [[145.0], [146.0], [147.0]], p1: [[148.0], [149.0]])), p1: s0(p0: [[150.0], [151.0], [152.0]], p1: [[153.0], [154.0]]))])], [s5(p0: [s1(p0: s0(p0: [[155.0], [156.0], [157.0]], p1: [[158.0], [159.0]]), p1: [[s0(p0: [[160.0], [161.0], [162.0]], p1: [[163.0], [164.0]])]])], p1: [s3(p0: s2(p0: s0(p0: [[165.0], [166.0], [167.0]], p1: [[168.0], [169.0]]), p1: s0(p0: [[170.0], [171.0], [172.0]], p1: [[173.0], [174.0]])), p1: s0(p0: [[175.0], [176.0], [177.0]], p1: [[178.0], [179.0]])), s3(p0: s2(p0: s0(p0: [[180.0], [181.0], [182.0]], p1: [[183.0], [184.0]]), p1: s0(p0: [[185.0], [186.0], [187.0]], p1: [[188.0], [189.0]])), p1: s0(p0: [[190.0], [191.0], [192.0]], p1: [[193.0], [194.0]]))])], [s5(p0: [s1(p0: s0(p0: [[195.0], [196.0], [197.0]], p1: [[198.0], [199.0]]), p1: [[s0(p0: [[200.0], [201.0], [202.0]], p1: [[203.0], [204.0]])]])], p1: [s3(p0: s2(p0: s0(p0: [[205.0], [206.0], [207.0]], p1: [[208.0], [209.0]]), p1: s0(p0: [[210.0], [211.0], [212.0]], p1: [[213.0], [214.0]])), p1: s0(p0: [[215.0], [216.0], [217.0]], p1: [[218.0], [219.0]])), s3(p0: s2(p0: s0(p0: [[220.0], [221.0], [222.0]], p1: [[223.0], [224.0]]), p1: s0(p0: [[225.0], [226.0], [227.0]], p1: [[228.0], [229.0]])), p1: s0(p0: [[230.0], [231.0], [232.0]], p1: [[233.0], [234.0]]))])]]
    let v4: Double = 235.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 235.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
