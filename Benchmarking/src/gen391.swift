  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s2 {
    var p0: [s1]
    var p1: [[s0]]
    var p2: s0
  }
  struct s4 {
    var p0: s2
    var p1: [s0]
  }
  struct s7 {
    var p0: [s4]
    var p1: [s0]
  }
  func f44(_ v0: s0) -> s0 {
    var v1: s0 = v0
    var v3: s0 = v1
    var v5: s0 = v1
    let v2: [[Double]] = v5.p0
    var v12: [[Double]] = v2
    let v9: [[Double]] = v3.p0
    var v7: [[Double]] = v12
    v1.p1 = v2
    var v8: s0 = v3
    let v14: [Double] = v9[2]
    let v11: [Double] = v2[2]
    v7[1] = v14
    let v17: [[Double]] = v5.p0
    v8.p1 = v17
    v3.p0 = v9
    let v35: [[Double]] = v8.p2
    var v16: s0 = v1
    v5.p1 = v7
    let v20: [[Double]] = v16.p2
    let v28: [[Double]] = v8.p0
    v7[2] = v11
    var v38: [[Double]] = v9
    var v24: [[Double]] = v20
    let v36: [[Double]] = v0.p2
    v16.p0 = v28
    v1.p0 = v28
    v8.p1 = v38
    v16.p0 = v9
    v24 = v36
    v1.p1 = v28
    v16.p2 = v24
    let v61: [[Double]] = v0.p2
    v16.p2 = v61
    v38 = v12
    v16.p0 = v12
    v24 = v35
    v3.p2 = v35
    let v110: [[Double]] = v16.p0
    v16.p2 = v24
    v3.p2 = v20
    var v94: s0 = v16
    v3.p1 = v38
    v94 = v16
    v94.p1 = v110
    v94.p2 = v35
    v8.p0 = v110
    return v94
  }
  @inline(never)
  func f0(_ v0: [s7], _ v1: Double) -> Double {
    var v7: Double = v1
    let v3: s7 = v0[0]
    let v11: [s0] = v3.p1
    let v15: s0 = v11[0]
    let v13: s0 = f44(v15)
    let v9: [[Double]] = v13.p2
    let v32: [Double] = v9[0]
    let v36: Double = v32[0]
    let v23: Double = v7 - v36
    return v23
  }
  func benchmark() {
    let v0: [s7] = [s7(p0: [s4(p0: s2(p0: [s1(p0: [s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0], [5.0]], p2: [[6.0]])], p1: [s0(p0: [[7.0], [8.0], [9.0]], p1: [[10.0], [11.0], [12.0]], p2: [[13.0]]), s0(p0: [[14.0], [15.0], [16.0]], p1: [[17.0], [18.0], [19.0]], p2: [[20.0]]), s0(p0: [[21.0], [22.0], [23.0]], p1: [[24.0], [25.0], [26.0]], p2: [[27.0]])])], p1: [[s0(p0: [[28.0], [29.0], [30.0]], p1: [[31.0], [32.0], [33.0]], p2: [[34.0]])]], p2: s0(p0: [[35.0], [36.0], [37.0]], p1: [[38.0], [39.0], [40.0]], p2: [[41.0]])), p1: [s0(p0: [[42.0], [43.0], [44.0]], p1: [[45.0], [46.0], [47.0]], p2: [[48.0]])]), s4(p0: s2(p0: [s1(p0: [s0(p0: [[49.0], [50.0], [51.0]], p1: [[52.0], [53.0], [54.0]], p2: [[55.0]])], p1: [s0(p0: [[56.0], [57.0], [58.0]], p1: [[59.0], [60.0], [61.0]], p2: [[62.0]]), s0(p0: [[63.0], [64.0], [65.0]], p1: [[66.0], [67.0], [68.0]], p2: [[69.0]]), s0(p0: [[70.0], [71.0], [72.0]], p1: [[73.0], [74.0], [75.0]], p2: [[76.0]])])], p1: [[s0(p0: [[77.0], [78.0], [79.0]], p1: [[80.0], [81.0], [82.0]], p2: [[83.0]])]], p2: s0(p0: [[84.0], [85.0], [86.0]], p1: [[87.0], [88.0], [89.0]], p2: [[90.0]])), p1: [s0(p0: [[91.0], [92.0], [93.0]], p1: [[94.0], [95.0], [96.0]], p2: [[97.0]])]), s4(p0: s2(p0: [s1(p0: [s0(p0: [[98.0], [99.0], [100.0]], p1: [[101.0], [102.0], [103.0]], p2: [[104.0]])], p1: [s0(p0: [[105.0], [106.0], [107.0]], p1: [[108.0], [109.0], [110.0]], p2: [[111.0]]), s0(p0: [[112.0], [113.0], [114.0]], p1: [[115.0], [116.0], [117.0]], p2: [[118.0]]), s0(p0: [[119.0], [120.0], [121.0]], p1: [[122.0], [123.0], [124.0]], p2: [[125.0]])])], p1: [[s0(p0: [[126.0], [127.0], [128.0]], p1: [[129.0], [130.0], [131.0]], p2: [[132.0]])]], p2: s0(p0: [[133.0], [134.0], [135.0]], p1: [[136.0], [137.0], [138.0]], p2: [[139.0]])), p1: [s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0], [144.0], [145.0]], p2: [[146.0]])])], p1: [s0(p0: [[147.0], [148.0], [149.0]], p1: [[150.0], [151.0], [152.0]], p2: [[153.0]])]), s7(p0: [s4(p0: s2(p0: [s1(p0: [s0(p0: [[154.0], [155.0], [156.0]], p1: [[157.0], [158.0], [159.0]], p2: [[160.0]])], p1: [s0(p0: [[161.0], [162.0], [163.0]], p1: [[164.0], [165.0], [166.0]], p2: [[167.0]]), s0(p0: [[168.0], [169.0], [170.0]], p1: [[171.0], [172.0], [173.0]], p2: [[174.0]]), s0(p0: [[175.0], [176.0], [177.0]], p1: [[178.0], [179.0], [180.0]], p2: [[181.0]])])], p1: [[s0(p0: [[182.0], [183.0], [184.0]], p1: [[185.0], [186.0], [187.0]], p2: [[188.0]])]], p2: s0(p0: [[189.0], [190.0], [191.0]], p1: [[192.0], [193.0], [194.0]], p2: [[195.0]])), p1: [s0(p0: [[196.0], [197.0], [198.0]], p1: [[199.0], [200.0], [201.0]], p2: [[202.0]])]), s4(p0: s2(p0: [s1(p0: [s0(p0: [[203.0], [204.0], [205.0]], p1: [[206.0], [207.0], [208.0]], p2: [[209.0]])], p1: [s0(p0: [[210.0], [211.0], [212.0]], p1: [[213.0], [214.0], [215.0]], p2: [[216.0]]), s0(p0: [[217.0], [218.0], [219.0]], p1: [[220.0], [221.0], [222.0]], p2: [[223.0]]), s0(p0: [[224.0], [225.0], [226.0]], p1: [[227.0], [228.0], [229.0]], p2: [[230.0]])])], p1: [[s0(p0: [[231.0], [232.0], [233.0]], p1: [[234.0], [235.0], [236.0]], p2: [[237.0]])]], p2: s0(p0: [[238.0], [239.0], [240.0]], p1: [[241.0], [242.0], [243.0]], p2: [[244.0]])), p1: [s0(p0: [[245.0], [246.0], [247.0]], p1: [[248.0], [249.0], [250.0]], p2: [[251.0]])]), s4(p0: s2(p0: [s1(p0: [s0(p0: [[252.0], [253.0], [254.0]], p1: [[255.0], [256.0], [257.0]], p2: [[258.0]])], p1: [s0(p0: [[259.0], [260.0], [261.0]], p1: [[262.0], [263.0], [264.0]], p2: [[265.0]]), s0(p0: [[266.0], [267.0], [268.0]], p1: [[269.0], [270.0], [271.0]], p2: [[272.0]]), s0(p0: [[273.0], [274.0], [275.0]], p1: [[276.0], [277.0], [278.0]], p2: [[279.0]])])], p1: [[s0(p0: [[280.0], [281.0], [282.0]], p1: [[283.0], [284.0], [285.0]], p2: [[286.0]])]], p2: s0(p0: [[287.0], [288.0], [289.0]], p1: [[290.0], [291.0], [292.0]], p2: [[293.0]])), p1: [s0(p0: [[294.0], [295.0], [296.0]], p1: [[297.0], [298.0], [299.0]], p2: [[300.0]])])], p1: [s0(p0: [[301.0], [302.0], [303.0]], p1: [[304.0], [305.0], [306.0]], p2: [[307.0]])])]
    let v1: Double = 308.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 308.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
