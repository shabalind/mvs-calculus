  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: [[s0]]
    var p1: [[s0]]
  } in
  struct s3 {
    var p0: s2
    var p1: s0
  } in
  struct s4 {
    var p0: [s3]
    var p1: s1
  } in
  struct s5 {
    var p0: [s2]
    var p1: s4
  } in
  struct s6 {
    var p0: s3
    var p1: s3
    var p2: [s5]
    var p3: s4
    var p4: [s3]
    var p5: [s2]
  } in
  struct s7 {
    var p0: Float
    var p1: [[s4]]
  } in
  struct s8 {
    var p0: s0
    var p1: s1
  } in
  struct s10 {
    var p0: s4
    var p1: s7
  } in
  struct s11 {
    var p0: s6
    var p1: s10
  } in
  let noinline_f0: (s11, [[s8]], s2, s0, Float) -> Float = (v0: s11, v1: [[s8]], v2: s2, v3: s0, v4: Float) -> Float {
    let v30: [[Float]] = v3.p0 in
    let v18: s10 = v0.p1 in
    let v80: [Float] = v30[0] in
    var v38: [Float] = v80 in
    let v81: s7 = v18.p1 in
    v38[0] = v4 in
    let v161: Float = v38[0] in
    let v84: Float = v81.p0 in
    v38[0] = v84 in
    var v234: Float = v161 in
    v234
  } in
  fun loop(i: Int, v0: s11, v1: [[s8]], v2: s2, v3: s0, v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s11 = s11(s6(s3(s2([[s0([[0.0]], [[1.0]])], [s0([[2.0]], [[3.0]])]], [[s0([[4.0]], [[5.0]])], [s0([[6.0]], [[7.0]])], [s0([[8.0]], [[9.0]])]]), s0([[10.0]], [[11.0]])), s3(s2([[s0([[12.0]], [[13.0]])], [s0([[14.0]], [[15.0]])]], [[s0([[16.0]], [[17.0]])], [s0([[18.0]], [[19.0]])], [s0([[20.0]], [[21.0]])]]), s0([[22.0]], [[23.0]])), [s5([s2([[s0([[24.0]], [[25.0]])], [s0([[26.0]], [[27.0]])]], [[s0([[28.0]], [[29.0]])], [s0([[30.0]], [[31.0]])], [s0([[32.0]], [[33.0]])]]), s2([[s0([[34.0]], [[35.0]])], [s0([[36.0]], [[37.0]])]], [[s0([[38.0]], [[39.0]])], [s0([[40.0]], [[41.0]])], [s0([[42.0]], [[43.0]])]]), s2([[s0([[44.0]], [[45.0]])], [s0([[46.0]], [[47.0]])]], [[s0([[48.0]], [[49.0]])], [s0([[50.0]], [[51.0]])], [s0([[52.0]], [[53.0]])]])], s4([s3(s2([[s0([[54.0]], [[55.0]])], [s0([[56.0]], [[57.0]])]], [[s0([[58.0]], [[59.0]])], [s0([[60.0]], [[61.0]])], [s0([[62.0]], [[63.0]])]]), s0([[64.0]], [[65.0]])), s3(s2([[s0([[66.0]], [[67.0]])], [s0([[68.0]], [[69.0]])]], [[s0([[70.0]], [[71.0]])], [s0([[72.0]], [[73.0]])], [s0([[74.0]], [[75.0]])]]), s0([[76.0]], [[77.0]]))], s1(s0([[78.0]], [[79.0]]), [s0([[80.0]], [[81.0]])])))], s4([s3(s2([[s0([[82.0]], [[83.0]])], [s0([[84.0]], [[85.0]])]], [[s0([[86.0]], [[87.0]])], [s0([[88.0]], [[89.0]])], [s0([[90.0]], [[91.0]])]]), s0([[92.0]], [[93.0]])), s3(s2([[s0([[94.0]], [[95.0]])], [s0([[96.0]], [[97.0]])]], [[s0([[98.0]], [[99.0]])], [s0([[100.0]], [[101.0]])], [s0([[102.0]], [[103.0]])]]), s0([[104.0]], [[105.0]]))], s1(s0([[106.0]], [[107.0]]), [s0([[108.0]], [[109.0]])])), [s3(s2([[s0([[110.0]], [[111.0]])], [s0([[112.0]], [[113.0]])]], [[s0([[114.0]], [[115.0]])], [s0([[116.0]], [[117.0]])], [s0([[118.0]], [[119.0]])]]), s0([[120.0]], [[121.0]]))], [s2([[s0([[122.0]], [[123.0]])], [s0([[124.0]], [[125.0]])]], [[s0([[126.0]], [[127.0]])], [s0([[128.0]], [[129.0]])], [s0([[130.0]], [[131.0]])]]), s2([[s0([[132.0]], [[133.0]])], [s0([[134.0]], [[135.0]])]], [[s0([[136.0]], [[137.0]])], [s0([[138.0]], [[139.0]])], [s0([[140.0]], [[141.0]])]])]), s10(s4([s3(s2([[s0([[142.0]], [[143.0]])], [s0([[144.0]], [[145.0]])]], [[s0([[146.0]], [[147.0]])], [s0([[148.0]], [[149.0]])], [s0([[150.0]], [[151.0]])]]), s0([[152.0]], [[153.0]])), s3(s2([[s0([[154.0]], [[155.0]])], [s0([[156.0]], [[157.0]])]], [[s0([[158.0]], [[159.0]])], [s0([[160.0]], [[161.0]])], [s0([[162.0]], [[163.0]])]]), s0([[164.0]], [[165.0]]))], s1(s0([[166.0]], [[167.0]]), [s0([[168.0]], [[169.0]])])), s7(170.0, [[s4([s3(s2([[s0([[171.0]], [[172.0]])], [s0([[173.0]], [[174.0]])]], [[s0([[175.0]], [[176.0]])], [s0([[177.0]], [[178.0]])], [s0([[179.0]], [[180.0]])]]), s0([[181.0]], [[182.0]])), s3(s2([[s0([[183.0]], [[184.0]])], [s0([[185.0]], [[186.0]])]], [[s0([[187.0]], [[188.0]])], [s0([[189.0]], [[190.0]])], [s0([[191.0]], [[192.0]])]]), s0([[193.0]], [[194.0]]))], s1(s0([[195.0]], [[196.0]]), [s0([[197.0]], [[198.0]])]))]]))) in
    let v1: [[s8]] = [[s8(s0([[199.0]], [[200.0]]), s1(s0([[201.0]], [[202.0]]), [s0([[203.0]], [[204.0]])]))], [s8(s0([[205.0]], [[206.0]]), s1(s0([[207.0]], [[208.0]]), [s0([[209.0]], [[210.0]])]))]] in
    let v2: s2 = s2([[s0([[211.0]], [[212.0]])], [s0([[213.0]], [[214.0]])]], [[s0([[215.0]], [[216.0]])], [s0([[217.0]], [[218.0]])], [s0([[219.0]], [[220.0]])]]) in
    let v3: s0 = s0([[221.0]], [[222.0]]) in
    let v4: Float = 223.0 in
    let initialResult: Float = 223.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()