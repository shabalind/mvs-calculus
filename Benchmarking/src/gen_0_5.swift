  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
    var p2: s0
  }
  struct s3 {
    var p0: s0
    var p1: s1
  }
  struct s4 {
    var p0: s3
    var p1: [s0]
  }
  struct s6 {
    var p0: [s4]
    var p1: [Double]
  }
  struct s8 {
    var p0: [s6]
    var p1: s4
  }
  @inline(never)
  func f0(_ v0: s8, _ v1: s8, _ v2: Double) -> Double {
    var v5: Double = v2
    var v11: Double = v5
    var v8: Double = v11
    let v3: Double = v8 / v2
    var v6: Double = v5
    let v15: s4 = v0.p1
    let v43: s3 = v15.p0
    let v53: s0 = v43.p0
    let v34: [[Double]] = v53.p0
    let v44: [Double] = v34[0]
    let v100: [[Double]] = v53.p0
    let v36: Double = v5 * v3
    let v67: Double = v44[0]
    var v79: [[Double]] = v100
    let v102: Double = v36 + v6
    v79[1] = v44
    let v194: [Double] = v79[0]
    let v173: Double = v194[0]
    v8 = v173
    v6 = v67
    v11 = v67
    return v102
  }
  func benchmark() {
    let v0: s8 = s8(p0: [s6(p0: [s4(p0: s3(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0], [4.0]]), p1: s1(p0: s0(p0: [[5.0], [6.0]], p1: [[7.0], [8.0], [9.0]]), p1: [s0(p0: [[10.0], [11.0]], p1: [[12.0], [13.0], [14.0]]), s0(p0: [[15.0], [16.0]], p1: [[17.0], [18.0], [19.0]])], p2: s0(p0: [[20.0], [21.0]], p1: [[22.0], [23.0], [24.0]]))), p1: [s0(p0: [[25.0], [26.0]], p1: [[27.0], [28.0], [29.0]]), s0(p0: [[30.0], [31.0]], p1: [[32.0], [33.0], [34.0]])])], p1: [35.0, 36.0]), s6(p0: [s4(p0: s3(p0: s0(p0: [[37.0], [38.0]], p1: [[39.0], [40.0], [41.0]]), p1: s1(p0: s0(p0: [[42.0], [43.0]], p1: [[44.0], [45.0], [46.0]]), p1: [s0(p0: [[47.0], [48.0]], p1: [[49.0], [50.0], [51.0]]), s0(p0: [[52.0], [53.0]], p1: [[54.0], [55.0], [56.0]])], p2: s0(p0: [[57.0], [58.0]], p1: [[59.0], [60.0], [61.0]]))), p1: [s0(p0: [[62.0], [63.0]], p1: [[64.0], [65.0], [66.0]]), s0(p0: [[67.0], [68.0]], p1: [[69.0], [70.0], [71.0]])])], p1: [72.0, 73.0]), s6(p0: [s4(p0: s3(p0: s0(p0: [[74.0], [75.0]], p1: [[76.0], [77.0], [78.0]]), p1: s1(p0: s0(p0: [[79.0], [80.0]], p1: [[81.0], [82.0], [83.0]]), p1: [s0(p0: [[84.0], [85.0]], p1: [[86.0], [87.0], [88.0]]), s0(p0: [[89.0], [90.0]], p1: [[91.0], [92.0], [93.0]])], p2: s0(p0: [[94.0], [95.0]], p1: [[96.0], [97.0], [98.0]]))), p1: [s0(p0: [[99.0], [100.0]], p1: [[101.0], [102.0], [103.0]]), s0(p0: [[104.0], [105.0]], p1: [[106.0], [107.0], [108.0]])])], p1: [109.0, 110.0])], p1: s4(p0: s3(p0: s0(p0: [[111.0], [112.0]], p1: [[113.0], [114.0], [115.0]]), p1: s1(p0: s0(p0: [[116.0], [117.0]], p1: [[118.0], [119.0], [120.0]]), p1: [s0(p0: [[121.0], [122.0]], p1: [[123.0], [124.0], [125.0]]), s0(p0: [[126.0], [127.0]], p1: [[128.0], [129.0], [130.0]])], p2: s0(p0: [[131.0], [132.0]], p1: [[133.0], [134.0], [135.0]]))), p1: [s0(p0: [[136.0], [137.0]], p1: [[138.0], [139.0], [140.0]]), s0(p0: [[141.0], [142.0]], p1: [[143.0], [144.0], [145.0]])]))
    let v1: s8 = s8(p0: [s6(p0: [s4(p0: s3(p0: s0(p0: [[146.0], [147.0]], p1: [[148.0], [149.0], [150.0]]), p1: s1(p0: s0(p0: [[151.0], [152.0]], p1: [[153.0], [154.0], [155.0]]), p1: [s0(p0: [[156.0], [157.0]], p1: [[158.0], [159.0], [160.0]]), s0(p0: [[161.0], [162.0]], p1: [[163.0], [164.0], [165.0]])], p2: s0(p0: [[166.0], [167.0]], p1: [[168.0], [169.0], [170.0]]))), p1: [s0(p0: [[171.0], [172.0]], p1: [[173.0], [174.0], [175.0]]), s0(p0: [[176.0], [177.0]], p1: [[178.0], [179.0], [180.0]])])], p1: [181.0, 182.0]), s6(p0: [s4(p0: s3(p0: s0(p0: [[183.0], [184.0]], p1: [[185.0], [186.0], [187.0]]), p1: s1(p0: s0(p0: [[188.0], [189.0]], p1: [[190.0], [191.0], [192.0]]), p1: [s0(p0: [[193.0], [194.0]], p1: [[195.0], [196.0], [197.0]]), s0(p0: [[198.0], [199.0]], p1: [[200.0], [201.0], [202.0]])], p2: s0(p0: [[203.0], [204.0]], p1: [[205.0], [206.0], [207.0]]))), p1: [s0(p0: [[208.0], [209.0]], p1: [[210.0], [211.0], [212.0]]), s0(p0: [[213.0], [214.0]], p1: [[215.0], [216.0], [217.0]])])], p1: [218.0, 219.0]), s6(p0: [s4(p0: s3(p0: s0(p0: [[220.0], [221.0]], p1: [[222.0], [223.0], [224.0]]), p1: s1(p0: s0(p0: [[225.0], [226.0]], p1: [[227.0], [228.0], [229.0]]), p1: [s0(p0: [[230.0], [231.0]], p1: [[232.0], [233.0], [234.0]]), s0(p0: [[235.0], [236.0]], p1: [[237.0], [238.0], [239.0]])], p2: s0(p0: [[240.0], [241.0]], p1: [[242.0], [243.0], [244.0]]))), p1: [s0(p0: [[245.0], [246.0]], p1: [[247.0], [248.0], [249.0]]), s0(p0: [[250.0], [251.0]], p1: [[252.0], [253.0], [254.0]])])], p1: [255.0, 256.0])], p1: s4(p0: s3(p0: s0(p0: [[257.0], [258.0]], p1: [[259.0], [260.0], [261.0]]), p1: s1(p0: s0(p0: [[262.0], [263.0]], p1: [[264.0], [265.0], [266.0]]), p1: [s0(p0: [[267.0], [268.0]], p1: [[269.0], [270.0], [271.0]]), s0(p0: [[272.0], [273.0]], p1: [[274.0], [275.0], [276.0]])], p2: s0(p0: [[277.0], [278.0]], p1: [[279.0], [280.0], [281.0]]))), p1: [s0(p0: [[282.0], [283.0]], p1: [[284.0], [285.0], [286.0]]), s0(p0: [[287.0], [288.0]], p1: [[289.0], [290.0], [291.0]])]))
    let v2: Double = 292.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 292.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
