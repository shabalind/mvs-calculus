  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s2 {
    var p0: s0
    var p1: s0
  } in
  struct s3 {
    var p0: s0
    var p1: [[s0]]
    var p2: [[s2]]
  } in
  struct s7 {
    var p0: s3
    var p1: [[s3]]
  } in
  let f115: (s3) -> s3 = (v0: s3) -> s3 {
    var v4: s3 = v0 in
    v4 = v0 in
    let v2: [[s2]] = v4.p2 in
    var v5: s3 = v4 in
    v5.p2 = v2 in
    v5.p2 = v2 in
    let v8: [s2] = v2[0] in
    var v3: [[s2]] = v2 in
    var v1: s3 = v5 in
    v3[0] = v8 in
    let v10: [s2] = v2[2] in
    v4.p2 = v3 in
    v3[2] = v10 in
    v5.p2 = v3 in
    v3[1] = v10 in
    let v7: [[s0]] = v5.p1 in
    v5.p2 = v2 in
    v1.p1 = v7 in
    let v9: [[s2]] = v5.p2 in
    let v27: [[s0]] = v5.p1 in
    var v12: [[s2]] = v9 in
    let v67: [s2] = v12[1] in
    v1.p1 = v27 in
    v1.p1 = v7 in
    v3[1] = v67 in
    v12[0] = v10 in
    v1
  } in
  let f103: (s0) -> s0 = (v0: s0) -> s0 {
    let v5: [[Float]] = v0.p0 in
    let v1: [[Float]] = v0.p1 in
    let v7: s2 = s2(v0, v0) in
    var v4: s0 = v0 in
    var v3: s2 = v7 in
    v3.p0 = v0 in
    var v6: s2 = v7 in
    var v2: [[Float]] = v5 in
    let v19: [[Float]] = v4.p0 in
    var v10: s0 = v0 in
    let v15: [[Float]] = v10.p1 in
    let v12: [Float] = v1[2] in
    v6.p1 = v10 in
    var v14: s0 = v10 in
    var v16: s2 = v7 in
    let v17: s0 = v7.p1 in
    let v35: s0 = v6.p1 in
    let v41: [[Float]] = v35.p0 in
    v14.p1 = v15 in
    let v25: s0 = v16.p0 in
    let v39: [Float] = v5[1] in
    let v21: Float = v12[0] in
    v4.p0 = v2 in
    v6 = v3 in
    let v34: s2 = s2(v14, v14) in
    v14.p0 = v5 in
    v6.p0 = v25 in
    let v95: [Float] = v41[1] in
    let v44: s0 = v7.p0 in
    v2[1] = v95 in
    v10 = v14 in
    var v60: s2 = v34 in
    var v101: Float = v21 in
    var v42: s0 = v44 in
    v6.p0 = v42 in
    v60.p0 = v4 in
    v4 = v17 in
    let v79: [[Float]] = v14.p1 in
    var v125: [Float] = v39 in
    v10.p0 = v19 in
    v2[0] = v125 in
    v4.p1 = v79 in
    let v85: s0 = v60.p1 in
    v125[0] = v101 in
    v85
  } in
  let f101: (s3, [s7]) -> s3 = (v0: s3, v1: [s7]) -> s3 {
    let v5: s3 = f115(v0) in
    let v12: s3 = f115(v5) in
    let v15: s3 = f115(v5) in
    let v29: s0 = v5.p0 in
    let v21: [[s0]] = v12.p1 in
    let v28: s3 = f115(v12) in
    let v24: [[Float]] = v29.p1 in
    var v54: [[Float]] = v24 in
    let v85: s3 = f115(v28) in
    var v27: s3 = v15 in
    let v53: [Float] = v54[0] in
    var v50: s0 = v29 in
    v50.p1 = v54 in
    v27.p0 = v50 in
    let v68: s0 = v85.p0 in
    v54[1] = v53 in
    v27.p0 = v68 in
    v27.p0 = v29 in
    v27.p1 = v21 in
    let v90: s3 = f115(v27) in
    v90
  } in
  let noinline_f0: ([s7], Float) -> Float = (v0: [s7], v1: Float) -> Float {
    let v2: s7 = v0[1] in
    let v6: s3 = v2.p0 in
    let v3: s3 = f101(v6, v0) in
    let v10: s7 = v0[0] in
    let v36: s3 = f101(v3, v0) in
    let v27: s0 = v36.p0 in
    var v22: s0 = v27 in
    let v46: s0 = v6.p0 in
    let v26: [[Float]] = v46.p1 in
    v22.p1 = v26 in
    v22 = v27 in
    let v65: s0 = f103(v22) in
    let v62: [[Float]] = v65.p1 in
    v22.p1 = v62 in
    let v53: s3 = v10.p0 in
    let v174: [[Float]] = v27.p1 in
    v22.p1 = v174 in
    let v111: [Float] = v62[0] in
    let v90: Float = v111[0] in
    let v119: s0 = v53.p0 in
    let v197: [[Float]] = v119.p1 in
    v22.p1 = v197 in
    v22.p1 = v174 in
    v22.p1 = v197 in
    v90
  } in
  fun loop(i: Int, v0: [s7], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s7] = [s7(s3(s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]), [[s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]])], [s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]])]], [[s2(s0([[15.0], [16.0]], [[17.0], [18.0], [19.0]]), s0([[20.0], [21.0]], [[22.0], [23.0], [24.0]]))], [s2(s0([[25.0], [26.0]], [[27.0], [28.0], [29.0]]), s0([[30.0], [31.0]], [[32.0], [33.0], [34.0]]))], [s2(s0([[35.0], [36.0]], [[37.0], [38.0], [39.0]]), s0([[40.0], [41.0]], [[42.0], [43.0], [44.0]]))]]), [[s3(s0([[45.0], [46.0]], [[47.0], [48.0], [49.0]]), [[s0([[50.0], [51.0]], [[52.0], [53.0], [54.0]])], [s0([[55.0], [56.0]], [[57.0], [58.0], [59.0]])]], [[s2(s0([[60.0], [61.0]], [[62.0], [63.0], [64.0]]), s0([[65.0], [66.0]], [[67.0], [68.0], [69.0]]))], [s2(s0([[70.0], [71.0]], [[72.0], [73.0], [74.0]]), s0([[75.0], [76.0]], [[77.0], [78.0], [79.0]]))], [s2(s0([[80.0], [81.0]], [[82.0], [83.0], [84.0]]), s0([[85.0], [86.0]], [[87.0], [88.0], [89.0]]))]])]]), s7(s3(s0([[90.0], [91.0]], [[92.0], [93.0], [94.0]]), [[s0([[95.0], [96.0]], [[97.0], [98.0], [99.0]])], [s0([[100.0], [101.0]], [[102.0], [103.0], [104.0]])]], [[s2(s0([[105.0], [106.0]], [[107.0], [108.0], [109.0]]), s0([[110.0], [111.0]], [[112.0], [113.0], [114.0]]))], [s2(s0([[115.0], [116.0]], [[117.0], [118.0], [119.0]]), s0([[120.0], [121.0]], [[122.0], [123.0], [124.0]]))], [s2(s0([[125.0], [126.0]], [[127.0], [128.0], [129.0]]), s0([[130.0], [131.0]], [[132.0], [133.0], [134.0]]))]]), [[s3(s0([[135.0], [136.0]], [[137.0], [138.0], [139.0]]), [[s0([[140.0], [141.0]], [[142.0], [143.0], [144.0]])], [s0([[145.0], [146.0]], [[147.0], [148.0], [149.0]])]], [[s2(s0([[150.0], [151.0]], [[152.0], [153.0], [154.0]]), s0([[155.0], [156.0]], [[157.0], [158.0], [159.0]]))], [s2(s0([[160.0], [161.0]], [[162.0], [163.0], [164.0]]), s0([[165.0], [166.0]], [[167.0], [168.0], [169.0]]))], [s2(s0([[170.0], [171.0]], [[172.0], [173.0], [174.0]]), s0([[175.0], [176.0]], [[177.0], [178.0], [179.0]]))]])]]), s7(s3(s0([[180.0], [181.0]], [[182.0], [183.0], [184.0]]), [[s0([[185.0], [186.0]], [[187.0], [188.0], [189.0]])], [s0([[190.0], [191.0]], [[192.0], [193.0], [194.0]])]], [[s2(s0([[195.0], [196.0]], [[197.0], [198.0], [199.0]]), s0([[200.0], [201.0]], [[202.0], [203.0], [204.0]]))], [s2(s0([[205.0], [206.0]], [[207.0], [208.0], [209.0]]), s0([[210.0], [211.0]], [[212.0], [213.0], [214.0]]))], [s2(s0([[215.0], [216.0]], [[217.0], [218.0], [219.0]]), s0([[220.0], [221.0]], [[222.0], [223.0], [224.0]]))]]), [[s3(s0([[225.0], [226.0]], [[227.0], [228.0], [229.0]]), [[s0([[230.0], [231.0]], [[232.0], [233.0], [234.0]])], [s0([[235.0], [236.0]], [[237.0], [238.0], [239.0]])]], [[s2(s0([[240.0], [241.0]], [[242.0], [243.0], [244.0]]), s0([[245.0], [246.0]], [[247.0], [248.0], [249.0]]))], [s2(s0([[250.0], [251.0]], [[252.0], [253.0], [254.0]]), s0([[255.0], [256.0]], [[257.0], [258.0], [259.0]]))], [s2(s0([[260.0], [261.0]], [[262.0], [263.0], [264.0]]), s0([[265.0], [266.0]], [[267.0], [268.0], [269.0]]))]])]])] in
    let v1: Float = 270.0 in
    let initialResult: Float = 270.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()