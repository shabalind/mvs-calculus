  import Dispatch
  struct s0 {
    var p0: [Double]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s2 {
    var p0: s0
    var p1: [s0]
  }
  struct s3 {
    var p0: s2
    var p1: [s0]
  }
  struct s4 {
    var p0: [s3]
    var p1: [s3]
  }
  struct s7 {
    var p0: [[s1]]
    var p1: s4
    var p2: s0
    var p3: s0
    var p4: [s2]
    var p5: s0
    var p6: s1
    var p7: Double
  }
  func f57(_ v0: [s3], _ v1: s4) -> [s3] {
    let v4: [s3] = v1.p0
    return v4
  }
  func f56(_ v0: s1) -> s1 {
    var v4: s1 = v0
    let v6: [s0] = v0.p1
    var v7: [s0] = v6
    let v3: s0 = v6[2]
    v4.p1 = v6
    let v2: [s0] = v0.p1
    v4.p1 = v7
    var v1: s1 = v0
    let v14: s0 = v7[1]
    let v8: [s0] = v1.p0
    var v20: s1 = v4
    let v5: s0 = v8[1]
    var v9: [s0] = v8
    let v12: s0 = v9[1]
    v1.p1 = v2
    v7[1] = v3
    v4.p0 = v9
    var v17: s0 = v14
    v9[1] = v17
    let v21: [Double] = v5.p0
    let v15: [s1] = [v0, v1, v4, v1, v20, v4, v0]
    let v13: s1 = v15[2]
    v20.p0 = v8
    let v16: s1 = v15[1]
    var v18: [s1] = v15
    let v28: [[Double]] = v12.p1
    v18[6] = v20
    var v27: [Double] = v21
    let v35: [s0] = v13.p1
    v4.p0 = v9
    let v33: [[Double]] = [v21, v27, v27, v27, v27, v21]
    let v26: s0 = v8[1]
    let v31: [Double] = v33[2]
    let v47: s1 = v18[5]
    v18[5] = v20
    let v30: [[Double]] = v17.p1
    v7 = v35
    v7[2] = v26
    let v49: [s0] = v4.p1
    let v50: s0 = s0(p0: v31, p1: v28)
    v20.p0 = v8
    let v82: [s0] = v16.p0
    v7 = v49
    v9[1] = v50
    v17.p1 = v30
    var v95: s1 = v47
    var v70: [s0] = v2
    v95.p0 = v82
    let v59: [s0] = v20.p1
    let v67: [s0] = v16.p0
    v95.p0 = v67
    v1.p1 = v70
    var v123: [s0] = v67
    v20.p1 = v59
    v4.p0 = v123
    v20.p1 = v49
    return v95
  }
  func f36(_ v0: s7) -> s7 {
    let v4: s1 = v0.p6
    let v5: s1 = f56(v4)
    let v7: s0 = v0.p5
    var v2: s1 = v5
    let v1: [Double] = v7.p0
    let v20: Double = v1[0]
    let v8: Double = v1[2]
    let v12: Double = v1[0]
    let v24: s1 = f56(v2)
    var v21: Double = v8
    var v29: s7 = v0
    let v25: s1 = f56(v5)
    let v16: s1 = f56(v4)
    let v23: s4 = v0.p1
    v29.p6 = v5
    v29.p2 = v7
    v29.p5 = v7
    var v19: Double = v20
    let v34: Double = v19 + v12
    v29.p6 = v24
    let v28: [s3] = v23.p0
    v2 = v16
    let v26: [s3] = f57(v28, v23)
    var v48: Double = v21
    v2 = v25
    let v67: Double = v34 + v34
    v29.p7 = v8
    let v97: s3 = v26[0]
    let v45: [s0] = v97.p1
    v29.p5 = v7
    let v56: s0 = v0.p2
    v29.p5 = v56
    let v89: Double = v48 / v67
    let v248: s0 = v45[0]
    v29.p3 = v248
    v29.p7 = v89
    return v29
  }
  func f10(_ v0: s7) -> s7 {
    let v4: s7 = f36(v0)
    let v3: [s7] = [v0, v0, v4, v0, v4, v0, v0]
    let v10: s7 = v3[2]
    let v25: s7 = f36(v10)
    return v25
  }
  @inline(never)
  func f0(_ v0: [s7], _ v1: Double) -> Double {
    var v2: Double = v1
    let v4: s7 = v0[1]
    let v3: s7 = f36(v4)
    let v10: s7 = f10(v3)
    let v6: s7 = f36(v3)
    let v17: s0 = v10.p3
    let v23: [Double] = v17.p0
    let v27: s7 = f36(v6)
    var v28: Double = v2
    let v68: Double = v27.p7
    let v52: Double = v23[0]
    let v51: Double = v68 * v28
    let v64: Double = v52 / v51
    return v64
  }
  func benchmark() {
    let v0: [s7] = [s7(p0: [[s1(p0: [s0(p0: [0.0, 1.0, 2.0], p1: [[3.0], [4.0], [5.0]]), s0(p0: [6.0, 7.0, 8.0], p1: [[9.0], [10.0], [11.0]])], p1: [s0(p0: [12.0, 13.0, 14.0], p1: [[15.0], [16.0], [17.0]]), s0(p0: [18.0, 19.0, 20.0], p1: [[21.0], [22.0], [23.0]]), s0(p0: [24.0, 25.0, 26.0], p1: [[27.0], [28.0], [29.0]])])], [s1(p0: [s0(p0: [30.0, 31.0, 32.0], p1: [[33.0], [34.0], [35.0]]), s0(p0: [36.0, 37.0, 38.0], p1: [[39.0], [40.0], [41.0]])], p1: [s0(p0: [42.0, 43.0, 44.0], p1: [[45.0], [46.0], [47.0]]), s0(p0: [48.0, 49.0, 50.0], p1: [[51.0], [52.0], [53.0]]), s0(p0: [54.0, 55.0, 56.0], p1: [[57.0], [58.0], [59.0]])])], [s1(p0: [s0(p0: [60.0, 61.0, 62.0], p1: [[63.0], [64.0], [65.0]]), s0(p0: [66.0, 67.0, 68.0], p1: [[69.0], [70.0], [71.0]])], p1: [s0(p0: [72.0, 73.0, 74.0], p1: [[75.0], [76.0], [77.0]]), s0(p0: [78.0, 79.0, 80.0], p1: [[81.0], [82.0], [83.0]]), s0(p0: [84.0, 85.0, 86.0], p1: [[87.0], [88.0], [89.0]])])]], p1: s4(p0: [s3(p0: s2(p0: s0(p0: [90.0, 91.0, 92.0], p1: [[93.0], [94.0], [95.0]]), p1: [s0(p0: [96.0, 97.0, 98.0], p1: [[99.0], [100.0], [101.0]]), s0(p0: [102.0, 103.0, 104.0], p1: [[105.0], [106.0], [107.0]]), s0(p0: [108.0, 109.0, 110.0], p1: [[111.0], [112.0], [113.0]])]), p1: [s0(p0: [114.0, 115.0, 116.0], p1: [[117.0], [118.0], [119.0]])])], p1: [s3(p0: s2(p0: s0(p0: [120.0, 121.0, 122.0], p1: [[123.0], [124.0], [125.0]]), p1: [s0(p0: [126.0, 127.0, 128.0], p1: [[129.0], [130.0], [131.0]]), s0(p0: [132.0, 133.0, 134.0], p1: [[135.0], [136.0], [137.0]]), s0(p0: [138.0, 139.0, 140.0], p1: [[141.0], [142.0], [143.0]])]), p1: [s0(p0: [144.0, 145.0, 146.0], p1: [[147.0], [148.0], [149.0]])]), s3(p0: s2(p0: s0(p0: [150.0, 151.0, 152.0], p1: [[153.0], [154.0], [155.0]]), p1: [s0(p0: [156.0, 157.0, 158.0], p1: [[159.0], [160.0], [161.0]]), s0(p0: [162.0, 163.0, 164.0], p1: [[165.0], [166.0], [167.0]]), s0(p0: [168.0, 169.0, 170.0], p1: [[171.0], [172.0], [173.0]])]), p1: [s0(p0: [174.0, 175.0, 176.0], p1: [[177.0], [178.0], [179.0]])])]), p2: s0(p0: [180.0, 181.0, 182.0], p1: [[183.0], [184.0], [185.0]]), p3: s0(p0: [186.0, 187.0, 188.0], p1: [[189.0], [190.0], [191.0]]), p4: [s2(p0: s0(p0: [192.0, 193.0, 194.0], p1: [[195.0], [196.0], [197.0]]), p1: [s0(p0: [198.0, 199.0, 200.0], p1: [[201.0], [202.0], [203.0]]), s0(p0: [204.0, 205.0, 206.0], p1: [[207.0], [208.0], [209.0]]), s0(p0: [210.0, 211.0, 212.0], p1: [[213.0], [214.0], [215.0]])]), s2(p0: s0(p0: [216.0, 217.0, 218.0], p1: [[219.0], [220.0], [221.0]]), p1: [s0(p0: [222.0, 223.0, 224.0], p1: [[225.0], [226.0], [227.0]]), s0(p0: [228.0, 229.0, 230.0], p1: [[231.0], [232.0], [233.0]]), s0(p0: [234.0, 235.0, 236.0], p1: [[237.0], [238.0], [239.0]])]), s2(p0: s0(p0: [240.0, 241.0, 242.0], p1: [[243.0], [244.0], [245.0]]), p1: [s0(p0: [246.0, 247.0, 248.0], p1: [[249.0], [250.0], [251.0]]), s0(p0: [252.0, 253.0, 254.0], p1: [[255.0], [256.0], [257.0]]), s0(p0: [258.0, 259.0, 260.0], p1: [[261.0], [262.0], [263.0]])])], p5: s0(p0: [264.0, 265.0, 266.0], p1: [[267.0], [268.0], [269.0]]), p6: s1(p0: [s0(p0: [270.0, 271.0, 272.0], p1: [[273.0], [274.0], [275.0]]), s0(p0: [276.0, 277.0, 278.0], p1: [[279.0], [280.0], [281.0]])], p1: [s0(p0: [282.0, 283.0, 284.0], p1: [[285.0], [286.0], [287.0]]), s0(p0: [288.0, 289.0, 290.0], p1: [[291.0], [292.0], [293.0]]), s0(p0: [294.0, 295.0, 296.0], p1: [[297.0], [298.0], [299.0]])]), p7: 300.0), s7(p0: [[s1(p0: [s0(p0: [301.0, 302.0, 303.0], p1: [[304.0], [305.0], [306.0]]), s0(p0: [307.0, 308.0, 309.0], p1: [[310.0], [311.0], [312.0]])], p1: [s0(p0: [313.0, 314.0, 315.0], p1: [[316.0], [317.0], [318.0]]), s0(p0: [319.0, 320.0, 321.0], p1: [[322.0], [323.0], [324.0]]), s0(p0: [325.0, 326.0, 327.0], p1: [[328.0], [329.0], [330.0]])])], [s1(p0: [s0(p0: [331.0, 332.0, 333.0], p1: [[334.0], [335.0], [336.0]]), s0(p0: [337.0, 338.0, 339.0], p1: [[340.0], [341.0], [342.0]])], p1: [s0(p0: [343.0, 344.0, 345.0], p1: [[346.0], [347.0], [348.0]]), s0(p0: [349.0, 350.0, 351.0], p1: [[352.0], [353.0], [354.0]]), s0(p0: [355.0, 356.0, 357.0], p1: [[358.0], [359.0], [360.0]])])], [s1(p0: [s0(p0: [361.0, 362.0, 363.0], p1: [[364.0], [365.0], [366.0]]), s0(p0: [367.0, 368.0, 369.0], p1: [[370.0], [371.0], [372.0]])], p1: [s0(p0: [373.0, 374.0, 375.0], p1: [[376.0], [377.0], [378.0]]), s0(p0: [379.0, 380.0, 381.0], p1: [[382.0], [383.0], [384.0]]), s0(p0: [385.0, 386.0, 387.0], p1: [[388.0], [389.0], [390.0]])])]], p1: s4(p0: [s3(p0: s2(p0: s0(p0: [391.0, 392.0, 393.0], p1: [[394.0], [395.0], [396.0]]), p1: [s0(p0: [397.0, 398.0, 399.0], p1: [[400.0], [401.0], [402.0]]), s0(p0: [403.0, 404.0, 405.0], p1: [[406.0], [407.0], [408.0]]), s0(p0: [409.0, 410.0, 411.0], p1: [[412.0], [413.0], [414.0]])]), p1: [s0(p0: [415.0, 416.0, 417.0], p1: [[418.0], [419.0], [420.0]])])], p1: [s3(p0: s2(p0: s0(p0: [421.0, 422.0, 423.0], p1: [[424.0], [425.0], [426.0]]), p1: [s0(p0: [427.0, 428.0, 429.0], p1: [[430.0], [431.0], [432.0]]), s0(p0: [433.0, 434.0, 435.0], p1: [[436.0], [437.0], [438.0]]), s0(p0: [439.0, 440.0, 441.0], p1: [[442.0], [443.0], [444.0]])]), p1: [s0(p0: [445.0, 446.0, 447.0], p1: [[448.0], [449.0], [450.0]])]), s3(p0: s2(p0: s0(p0: [451.0, 452.0, 453.0], p1: [[454.0], [455.0], [456.0]]), p1: [s0(p0: [457.0, 458.0, 459.0], p1: [[460.0], [461.0], [462.0]]), s0(p0: [463.0, 464.0, 465.0], p1: [[466.0], [467.0], [468.0]]), s0(p0: [469.0, 470.0, 471.0], p1: [[472.0], [473.0], [474.0]])]), p1: [s0(p0: [475.0, 476.0, 477.0], p1: [[478.0], [479.0], [480.0]])])]), p2: s0(p0: [481.0, 482.0, 483.0], p1: [[484.0], [485.0], [486.0]]), p3: s0(p0: [487.0, 488.0, 489.0], p1: [[490.0], [491.0], [492.0]]), p4: [s2(p0: s0(p0: [493.0, 494.0, 495.0], p1: [[496.0], [497.0], [498.0]]), p1: [s0(p0: [499.0, 500.0, 501.0], p1: [[502.0], [503.0], [504.0]]), s0(p0: [505.0, 506.0, 507.0], p1: [[508.0], [509.0], [510.0]]), s0(p0: [511.0, 512.0, 513.0], p1: [[514.0], [515.0], [516.0]])]), s2(p0: s0(p0: [517.0, 518.0, 519.0], p1: [[520.0], [521.0], [522.0]]), p1: [s0(p0: [523.0, 524.0, 525.0], p1: [[526.0], [527.0], [528.0]]), s0(p0: [529.0, 530.0, 531.0], p1: [[532.0], [533.0], [534.0]]), s0(p0: [535.0, 536.0, 537.0], p1: [[538.0], [539.0], [540.0]])]), s2(p0: s0(p0: [541.0, 542.0, 543.0], p1: [[544.0], [545.0], [546.0]]), p1: [s0(p0: [547.0, 548.0, 549.0], p1: [[550.0], [551.0], [552.0]]), s0(p0: [553.0, 554.0, 555.0], p1: [[556.0], [557.0], [558.0]]), s0(p0: [559.0, 560.0, 561.0], p1: [[562.0], [563.0], [564.0]])])], p5: s0(p0: [565.0, 566.0, 567.0], p1: [[568.0], [569.0], [570.0]]), p6: s1(p0: [s0(p0: [571.0, 572.0, 573.0], p1: [[574.0], [575.0], [576.0]]), s0(p0: [577.0, 578.0, 579.0], p1: [[580.0], [581.0], [582.0]])], p1: [s0(p0: [583.0, 584.0, 585.0], p1: [[586.0], [587.0], [588.0]]), s0(p0: [589.0, 590.0, 591.0], p1: [[592.0], [593.0], [594.0]]), s0(p0: [595.0, 596.0, 597.0], p1: [[598.0], [599.0], [600.0]])]), p7: 601.0)]
    let v1: Double = 602.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 602.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
