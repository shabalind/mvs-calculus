  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
  }
  struct s2 {
    var p0: [s0]
    var p1: s1
  }
  struct s3 {
    var p0: [s2]
    var p1: s2
  }
  struct s4 {
    var p0: [s2]
    var p1: s3
  }
  struct s5 {
    var p0: s1
    var p1: s0
  }
  struct s6 {
    var p0: s5
    var p1: s1
  }
  struct s7 {
    var p0: s6
    var p1: s6
  }
  struct s8 {
    var p0: s4
    var p1: s7
  }
  struct s10 {
    var p0: s4
    var p1: [s8]
  }
  struct s11 {
    var p0: [s4]
    var p1: Double
    var p2: [[s4]]
  }
  func f120(_ v0: s0) -> s0 {
    var v1: s0 = v0
    let v7: [[Double]] = v1.p0
    v1.p0 = v7
    let v4: [[Double]] = v1.p1
    v1.p1 = v4
    v1.p0 = v7
    return v1
  }
  func f51(_ v0: s0) -> s0 {
    let v1: s0 = f120(v0)
    let v94: [[Double]] = v1.p0
    var v100: s0 = v1
    v100.p0 = v94
    return v100
  }
  @inline(never)
  func f0(_ v0: s6, _ v1: s5, _ v2: [[s11]], _ v3: s10, _ v4: Double) -> Double {
    let v8: s5 = v0.p0
    let v18: s1 = v8.p0
    let v21: s0 = v18.p0
    let v49: s1 = v0.p1
    var v20: s0 = v21
    let v23: [[Double]] = v20.p0
    let v194: s0 = v49.p0
    let v65: [Double] = v23[0]
    let v145: s0 = f51(v194)
    let v312: [[Double]] = v145.p1
    v20.p1 = v312
    let v158: Double = v65[0]
    return v158
  }
  func benchmark() {
    let v0: s6 = s6(p0: s5(p0: s1(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0]])), p1: s0(p0: [[3.0], [4.0]], p1: [[5.0]])), p1: s1(p0: s0(p0: [[6.0], [7.0]], p1: [[8.0]])))
    let v1: s5 = s5(p0: s1(p0: s0(p0: [[9.0], [10.0]], p1: [[11.0]])), p1: s0(p0: [[12.0], [13.0]], p1: [[14.0]]))
    let v2: [[s11]] = [[s11(p0: [s4(p0: [s2(p0: [s0(p0: [[15.0], [16.0]], p1: [[17.0]]), s0(p0: [[18.0], [19.0]], p1: [[20.0]]), s0(p0: [[21.0], [22.0]], p1: [[23.0]])], p1: s1(p0: s0(p0: [[24.0], [25.0]], p1: [[26.0]])))], p1: s3(p0: [s2(p0: [s0(p0: [[27.0], [28.0]], p1: [[29.0]]), s0(p0: [[30.0], [31.0]], p1: [[32.0]]), s0(p0: [[33.0], [34.0]], p1: [[35.0]])], p1: s1(p0: s0(p0: [[36.0], [37.0]], p1: [[38.0]])))], p1: s2(p0: [s0(p0: [[39.0], [40.0]], p1: [[41.0]]), s0(p0: [[42.0], [43.0]], p1: [[44.0]]), s0(p0: [[45.0], [46.0]], p1: [[47.0]])], p1: s1(p0: s0(p0: [[48.0], [49.0]], p1: [[50.0]]))))), s4(p0: [s2(p0: [s0(p0: [[51.0], [52.0]], p1: [[53.0]]), s0(p0: [[54.0], [55.0]], p1: [[56.0]]), s0(p0: [[57.0], [58.0]], p1: [[59.0]])], p1: s1(p0: s0(p0: [[60.0], [61.0]], p1: [[62.0]])))], p1: s3(p0: [s2(p0: [s0(p0: [[63.0], [64.0]], p1: [[65.0]]), s0(p0: [[66.0], [67.0]], p1: [[68.0]]), s0(p0: [[69.0], [70.0]], p1: [[71.0]])], p1: s1(p0: s0(p0: [[72.0], [73.0]], p1: [[74.0]])))], p1: s2(p0: [s0(p0: [[75.0], [76.0]], p1: [[77.0]]), s0(p0: [[78.0], [79.0]], p1: [[80.0]]), s0(p0: [[81.0], [82.0]], p1: [[83.0]])], p1: s1(p0: s0(p0: [[84.0], [85.0]], p1: [[86.0]]))))), s4(p0: [s2(p0: [s0(p0: [[87.0], [88.0]], p1: [[89.0]]), s0(p0: [[90.0], [91.0]], p1: [[92.0]]), s0(p0: [[93.0], [94.0]], p1: [[95.0]])], p1: s1(p0: s0(p0: [[96.0], [97.0]], p1: [[98.0]])))], p1: s3(p0: [s2(p0: [s0(p0: [[99.0], [100.0]], p1: [[101.0]]), s0(p0: [[102.0], [103.0]], p1: [[104.0]]), s0(p0: [[105.0], [106.0]], p1: [[107.0]])], p1: s1(p0: s0(p0: [[108.0], [109.0]], p1: [[110.0]])))], p1: s2(p0: [s0(p0: [[111.0], [112.0]], p1: [[113.0]]), s0(p0: [[114.0], [115.0]], p1: [[116.0]]), s0(p0: [[117.0], [118.0]], p1: [[119.0]])], p1: s1(p0: s0(p0: [[120.0], [121.0]], p1: [[122.0]])))))], p1: 123.0, p2: [[s4(p0: [s2(p0: [s0(p0: [[124.0], [125.0]], p1: [[126.0]]), s0(p0: [[127.0], [128.0]], p1: [[129.0]]), s0(p0: [[130.0], [131.0]], p1: [[132.0]])], p1: s1(p0: s0(p0: [[133.0], [134.0]], p1: [[135.0]])))], p1: s3(p0: [s2(p0: [s0(p0: [[136.0], [137.0]], p1: [[138.0]]), s0(p0: [[139.0], [140.0]], p1: [[141.0]]), s0(p0: [[142.0], [143.0]], p1: [[144.0]])], p1: s1(p0: s0(p0: [[145.0], [146.0]], p1: [[147.0]])))], p1: s2(p0: [s0(p0: [[148.0], [149.0]], p1: [[150.0]]), s0(p0: [[151.0], [152.0]], p1: [[153.0]]), s0(p0: [[154.0], [155.0]], p1: [[156.0]])], p1: s1(p0: s0(p0: [[157.0], [158.0]], p1: [[159.0]])))))]])], [s11(p0: [s4(p0: [s2(p0: [s0(p0: [[160.0], [161.0]], p1: [[162.0]]), s0(p0: [[163.0], [164.0]], p1: [[165.0]]), s0(p0: [[166.0], [167.0]], p1: [[168.0]])], p1: s1(p0: s0(p0: [[169.0], [170.0]], p1: [[171.0]])))], p1: s3(p0: [s2(p0: [s0(p0: [[172.0], [173.0]], p1: [[174.0]]), s0(p0: [[175.0], [176.0]], p1: [[177.0]]), s0(p0: [[178.0], [179.0]], p1: [[180.0]])], p1: s1(p0: s0(p0: [[181.0], [182.0]], p1: [[183.0]])))], p1: s2(p0: [s0(p0: [[184.0], [185.0]], p1: [[186.0]]), s0(p0: [[187.0], [188.0]], p1: [[189.0]]), s0(p0: [[190.0], [191.0]], p1: [[192.0]])], p1: s1(p0: s0(p0: [[193.0], [194.0]], p1: [[195.0]]))))), s4(p0: [s2(p0: [s0(p0: [[196.0], [197.0]], p1: [[198.0]]), s0(p0: [[199.0], [200.0]], p1: [[201.0]]), s0(p0: [[202.0], [203.0]], p1: [[204.0]])], p1: s1(p0: s0(p0: [[205.0], [206.0]], p1: [[207.0]])))], p1: s3(p0: [s2(p0: [s0(p0: [[208.0], [209.0]], p1: [[210.0]]), s0(p0: [[211.0], [212.0]], p1: [[213.0]]), s0(p0: [[214.0], [215.0]], p1: [[216.0]])], p1: s1(p0: s0(p0: [[217.0], [218.0]], p1: [[219.0]])))], p1: s2(p0: [s0(p0: [[220.0], [221.0]], p1: [[222.0]]), s0(p0: [[223.0], [224.0]], p1: [[225.0]]), s0(p0: [[226.0], [227.0]], p1: [[228.0]])], p1: s1(p0: s0(p0: [[229.0], [230.0]], p1: [[231.0]]))))), s4(p0: [s2(p0: [s0(p0: [[232.0], [233.0]], p1: [[234.0]]), s0(p0: [[235.0], [236.0]], p1: [[237.0]]), s0(p0: [[238.0], [239.0]], p1: [[240.0]])], p1: s1(p0: s0(p0: [[241.0], [242.0]], p1: [[243.0]])))], p1: s3(p0: [s2(p0: [s0(p0: [[244.0], [245.0]], p1: [[246.0]]), s0(p0: [[247.0], [248.0]], p1: [[249.0]]), s0(p0: [[250.0], [251.0]], p1: [[252.0]])], p1: s1(p0: s0(p0: [[253.0], [254.0]], p1: [[255.0]])))], p1: s2(p0: [s0(p0: [[256.0], [257.0]], p1: [[258.0]]), s0(p0: [[259.0], [260.0]], p1: [[261.0]]), s0(p0: [[262.0], [263.0]], p1: [[264.0]])], p1: s1(p0: s0(p0: [[265.0], [266.0]], p1: [[267.0]])))))], p1: 268.0, p2: [[s4(p0: [s2(p0: [s0(p0: [[269.0], [270.0]], p1: [[271.0]]), s0(p0: [[272.0], [273.0]], p1: [[274.0]]), s0(p0: [[275.0], [276.0]], p1: [[277.0]])], p1: s1(p0: s0(p0: [[278.0], [279.0]], p1: [[280.0]])))], p1: s3(p0: [s2(p0: [s0(p0: [[281.0], [282.0]], p1: [[283.0]]), s0(p0: [[284.0], [285.0]], p1: [[286.0]]), s0(p0: [[287.0], [288.0]], p1: [[289.0]])], p1: s1(p0: s0(p0: [[290.0], [291.0]], p1: [[292.0]])))], p1: s2(p0: [s0(p0: [[293.0], [294.0]], p1: [[295.0]]), s0(p0: [[296.0], [297.0]], p1: [[298.0]]), s0(p0: [[299.0], [300.0]], p1: [[301.0]])], p1: s1(p0: s0(p0: [[302.0], [303.0]], p1: [[304.0]])))))]])], [s11(p0: [s4(p0: [s2(p0: [s0(p0: [[305.0], [306.0]], p1: [[307.0]]), s0(p0: [[308.0], [309.0]], p1: [[310.0]]), s0(p0: [[311.0], [312.0]], p1: [[313.0]])], p1: s1(p0: s0(p0: [[314.0], [315.0]], p1: [[316.0]])))], p1: s3(p0: [s2(p0: [s0(p0: [[317.0], [318.0]], p1: [[319.0]]), s0(p0: [[320.0], [321.0]], p1: [[322.0]]), s0(p0: [[323.0], [324.0]], p1: [[325.0]])], p1: s1(p0: s0(p0: [[326.0], [327.0]], p1: [[328.0]])))], p1: s2(p0: [s0(p0: [[329.0], [330.0]], p1: [[331.0]]), s0(p0: [[332.0], [333.0]], p1: [[334.0]]), s0(p0: [[335.0], [336.0]], p1: [[337.0]])], p1: s1(p0: s0(p0: [[338.0], [339.0]], p1: [[340.0]]))))), s4(p0: [s2(p0: [s0(p0: [[341.0], [342.0]], p1: [[343.0]]), s0(p0: [[344.0], [345.0]], p1: [[346.0]]), s0(p0: [[347.0], [348.0]], p1: [[349.0]])], p1: s1(p0: s0(p0: [[350.0], [351.0]], p1: [[352.0]])))], p1: s3(p0: [s2(p0: [s0(p0: [[353.0], [354.0]], p1: [[355.0]]), s0(p0: [[356.0], [357.0]], p1: [[358.0]]), s0(p0: [[359.0], [360.0]], p1: [[361.0]])], p1: s1(p0: s0(p0: [[362.0], [363.0]], p1: [[364.0]])))], p1: s2(p0: [s0(p0: [[365.0], [366.0]], p1: [[367.0]]), s0(p0: [[368.0], [369.0]], p1: [[370.0]]), s0(p0: [[371.0], [372.0]], p1: [[373.0]])], p1: s1(p0: s0(p0: [[374.0], [375.0]], p1: [[376.0]]))))), s4(p0: [s2(p0: [s0(p0: [[377.0], [378.0]], p1: [[379.0]]), s0(p0: [[380.0], [381.0]], p1: [[382.0]]), s0(p0: [[383.0], [384.0]], p1: [[385.0]])], p1: s1(p0: s0(p0: [[386.0], [387.0]], p1: [[388.0]])))], p1: s3(p0: [s2(p0: [s0(p0: [[389.0], [390.0]], p1: [[391.0]]), s0(p0: [[392.0], [393.0]], p1: [[394.0]]), s0(p0: [[395.0], [396.0]], p1: [[397.0]])], p1: s1(p0: s0(p0: [[398.0], [399.0]], p1: [[400.0]])))], p1: s2(p0: [s0(p0: [[401.0], [402.0]], p1: [[403.0]]), s0(p0: [[404.0], [405.0]], p1: [[406.0]]), s0(p0: [[407.0], [408.0]], p1: [[409.0]])], p1: s1(p0: s0(p0: [[410.0], [411.0]], p1: [[412.0]])))))], p1: 413.0, p2: [[s4(p0: [s2(p0: [s0(p0: [[414.0], [415.0]], p1: [[416.0]]), s0(p0: [[417.0], [418.0]], p1: [[419.0]]), s0(p0: [[420.0], [421.0]], p1: [[422.0]])], p1: s1(p0: s0(p0: [[423.0], [424.0]], p1: [[425.0]])))], p1: s3(p0: [s2(p0: [s0(p0: [[426.0], [427.0]], p1: [[428.0]]), s0(p0: [[429.0], [430.0]], p1: [[431.0]]), s0(p0: [[432.0], [433.0]], p1: [[434.0]])], p1: s1(p0: s0(p0: [[435.0], [436.0]], p1: [[437.0]])))], p1: s2(p0: [s0(p0: [[438.0], [439.0]], p1: [[440.0]]), s0(p0: [[441.0], [442.0]], p1: [[443.0]]), s0(p0: [[444.0], [445.0]], p1: [[446.0]])], p1: s1(p0: s0(p0: [[447.0], [448.0]], p1: [[449.0]])))))]])]]
    let v3: s10 = s10(p0: s4(p0: [s2(p0: [s0(p0: [[450.0], [451.0]], p1: [[452.0]]), s0(p0: [[453.0], [454.0]], p1: [[455.0]]), s0(p0: [[456.0], [457.0]], p1: [[458.0]])], p1: s1(p0: s0(p0: [[459.0], [460.0]], p1: [[461.0]])))], p1: s3(p0: [s2(p0: [s0(p0: [[462.0], [463.0]], p1: [[464.0]]), s0(p0: [[465.0], [466.0]], p1: [[467.0]]), s0(p0: [[468.0], [469.0]], p1: [[470.0]])], p1: s1(p0: s0(p0: [[471.0], [472.0]], p1: [[473.0]])))], p1: s2(p0: [s0(p0: [[474.0], [475.0]], p1: [[476.0]]), s0(p0: [[477.0], [478.0]], p1: [[479.0]]), s0(p0: [[480.0], [481.0]], p1: [[482.0]])], p1: s1(p0: s0(p0: [[483.0], [484.0]], p1: [[485.0]]))))), p1: [s8(p0: s4(p0: [s2(p0: [s0(p0: [[486.0], [487.0]], p1: [[488.0]]), s0(p0: [[489.0], [490.0]], p1: [[491.0]]), s0(p0: [[492.0], [493.0]], p1: [[494.0]])], p1: s1(p0: s0(p0: [[495.0], [496.0]], p1: [[497.0]])))], p1: s3(p0: [s2(p0: [s0(p0: [[498.0], [499.0]], p1: [[500.0]]), s0(p0: [[501.0], [502.0]], p1: [[503.0]]), s0(p0: [[504.0], [505.0]], p1: [[506.0]])], p1: s1(p0: s0(p0: [[507.0], [508.0]], p1: [[509.0]])))], p1: s2(p0: [s0(p0: [[510.0], [511.0]], p1: [[512.0]]), s0(p0: [[513.0], [514.0]], p1: [[515.0]]), s0(p0: [[516.0], [517.0]], p1: [[518.0]])], p1: s1(p0: s0(p0: [[519.0], [520.0]], p1: [[521.0]]))))), p1: s7(p0: s6(p0: s5(p0: s1(p0: s0(p0: [[522.0], [523.0]], p1: [[524.0]])), p1: s0(p0: [[525.0], [526.0]], p1: [[527.0]])), p1: s1(p0: s0(p0: [[528.0], [529.0]], p1: [[530.0]]))), p1: s6(p0: s5(p0: s1(p0: s0(p0: [[531.0], [532.0]], p1: [[533.0]])), p1: s0(p0: [[534.0], [535.0]], p1: [[536.0]])), p1: s1(p0: s0(p0: [[537.0], [538.0]], p1: [[539.0]]))))), s8(p0: s4(p0: [s2(p0: [s0(p0: [[540.0], [541.0]], p1: [[542.0]]), s0(p0: [[543.0], [544.0]], p1: [[545.0]]), s0(p0: [[546.0], [547.0]], p1: [[548.0]])], p1: s1(p0: s0(p0: [[549.0], [550.0]], p1: [[551.0]])))], p1: s3(p0: [s2(p0: [s0(p0: [[552.0], [553.0]], p1: [[554.0]]), s0(p0: [[555.0], [556.0]], p1: [[557.0]]), s0(p0: [[558.0], [559.0]], p1: [[560.0]])], p1: s1(p0: s0(p0: [[561.0], [562.0]], p1: [[563.0]])))], p1: s2(p0: [s0(p0: [[564.0], [565.0]], p1: [[566.0]]), s0(p0: [[567.0], [568.0]], p1: [[569.0]]), s0(p0: [[570.0], [571.0]], p1: [[572.0]])], p1: s1(p0: s0(p0: [[573.0], [574.0]], p1: [[575.0]]))))), p1: s7(p0: s6(p0: s5(p0: s1(p0: s0(p0: [[576.0], [577.0]], p1: [[578.0]])), p1: s0(p0: [[579.0], [580.0]], p1: [[581.0]])), p1: s1(p0: s0(p0: [[582.0], [583.0]], p1: [[584.0]]))), p1: s6(p0: s5(p0: s1(p0: s0(p0: [[585.0], [586.0]], p1: [[587.0]])), p1: s0(p0: [[588.0], [589.0]], p1: [[590.0]])), p1: s1(p0: s0(p0: [[591.0], [592.0]], p1: [[593.0]]))))), s8(p0: s4(p0: [s2(p0: [s0(p0: [[594.0], [595.0]], p1: [[596.0]]), s0(p0: [[597.0], [598.0]], p1: [[599.0]]), s0(p0: [[600.0], [601.0]], p1: [[602.0]])], p1: s1(p0: s0(p0: [[603.0], [604.0]], p1: [[605.0]])))], p1: s3(p0: [s2(p0: [s0(p0: [[606.0], [607.0]], p1: [[608.0]]), s0(p0: [[609.0], [610.0]], p1: [[611.0]]), s0(p0: [[612.0], [613.0]], p1: [[614.0]])], p1: s1(p0: s0(p0: [[615.0], [616.0]], p1: [[617.0]])))], p1: s2(p0: [s0(p0: [[618.0], [619.0]], p1: [[620.0]]), s0(p0: [[621.0], [622.0]], p1: [[623.0]]), s0(p0: [[624.0], [625.0]], p1: [[626.0]])], p1: s1(p0: s0(p0: [[627.0], [628.0]], p1: [[629.0]]))))), p1: s7(p0: s6(p0: s5(p0: s1(p0: s0(p0: [[630.0], [631.0]], p1: [[632.0]])), p1: s0(p0: [[633.0], [634.0]], p1: [[635.0]])), p1: s1(p0: s0(p0: [[636.0], [637.0]], p1: [[638.0]]))), p1: s6(p0: s5(p0: s1(p0: s0(p0: [[639.0], [640.0]], p1: [[641.0]])), p1: s0(p0: [[642.0], [643.0]], p1: [[644.0]])), p1: s1(p0: s0(p0: [[645.0], [646.0]], p1: [[647.0]])))))])
    let v4: Double = 648.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 648.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
