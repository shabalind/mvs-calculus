  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: [[s0]]
    var p1: [s1]
  } in
  struct s3 {
    var p0: s2
    var p1: [[s0]]
  } in
  struct s5 {
    var p0: [s0]
    var p1: [s2]
  } in
  struct s6 {
    var p0: [s5]
    var p1: [[s3]]
  } in
  let f117: (s1) -> s1 = (v0: s1) -> s1 {
    v0
  } in
  let f101: (s1) -> s1 = (v0: s1) -> s1 {
    let v2: s1 = f117(v0) in
    v2
  } in
  let f85: ([s0], [s5]) -> [s0] = (v0: [s0], v1: [s5]) -> [s0] {
    let v174: s5 = v1[0] in
    let v216: [s0] = v174.p0 in
    v216
  } in
  let f80: (s5, s1) -> s1 = (v0: s5, v1: s1) -> s1 {
    var v5: s1 = v1 in
    let v3: [[s0]] = v1.p1 in
    let v7: s1 = f117(v5) in
    let v9: [[s0]] = v1.p1 in
    let v6: s1 = f117(v7) in
    let v10: [s0] = v0.p0 in
    var v8: [[s0]] = v9 in
    v5.p1 = v9 in
    v5.p1 = v3 in
    let v32: [s0] = v3[2] in
    var v26: s1 = v7 in
    v5.p1 = v8 in
    let v33: s1 = f117(v26) in
    let v22: s1 = f101(v6) in
    let v16: s1 = f117(v7) in
    let v40: [[s0]] = v6.p1 in
    v8[0] = v32 in
    v8[2] = v10 in
    let v47: [[s0]] = v22.p1 in
    let v38: [s2] = v0.p1 in
    v8[2] = v32 in
    v5.p1 = v8 in
    v26.p1 = v40 in
    v5.p1 = v47 in
    let v49: [s0] = v16.p0 in
    var v64: [s0] = v49 in
    let v57: s1 = f117(v33) in
    let v120: s2 = v38[0] in
    let v70: [[s0]] = v120.p0 in
    let v39: [s0] = v70[1] in
    v5.p0 = v64 in
    v5.p0 = v49 in
    let v188: s1 = f101(v57) in
    v26.p0 = v64 in
    let v51: s1 = f117(v188) in
    v8[2] = v39 in
    v51
  } in
  let f1: (s5, s5) -> s5 = (v0: s5, v1: s5) -> s5 {
    var v58: s5 = v1 in
    v58
  } in
  let noinline_f0: (s1, s3, s5, s6, Float) -> Float = (v0: s1, v1: s3, v2: s5, v3: s6, v4: Float) -> Float {
    let v19: [[s0]] = v1.p1 in
    let v7: [s5] = v3.p0 in
    let v6: [s0] = v19[2] in
    let v5: s1 = f101(v0) in
    var v11: s5 = v2 in
    let v9: [[s0]] = v5.p1 in
    let v13: s5 = f1(v11, v2) in
    var v15: [[s0]] = v9 in
    var v10: [s0] = v6 in
    v15[0] = v10 in
    let v30: s1 = f80(v11, v0) in
    let v23: s5 = f1(v2, v11) in
    v11.p0 = v10 in
    let v35: [s0] = v15[1] in
    let v12: s1 = f80(v23, v30) in
    let v16: [s0] = v12.p0 in
    let v29: s0 = v16[0] in
    v15[1] = v6 in
    let v34: [s0] = f85(v35, v7) in
    let v21: [[Float]] = v29.p1 in
    let v18: [s2] = v2.p1 in
    v15[2] = v35 in
    let v52: [s2] = v13.p1 in
    v11.p1 = v18 in
    var v89: [[Float]] = v21 in
    let v48: s2 = v52[0] in
    v11.p0 = v10 in
    let v38: [Float] = v89[0] in
    let v80: s0 = v16[0] in
    v11.p1 = v18 in
    v89[0] = v38 in
    v11.p0 = v34 in
    let v95: [[s0]] = v48.p0 in
    let v145: [s0] = v95[1] in
    v15[2] = v145 in
    let v105: Float = v38[0] in
    v15[2] = v145 in
    v10[0] = v80 in
    v105
  } in
  fun loop(i: Int, v0: s1, v1: s3, v2: s5, v3: s6, v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([s0([[0.0], [1.0], [2.0]], [[3.0]]), s0([[4.0], [5.0], [6.0]], [[7.0]])], [[s0([[8.0], [9.0], [10.0]], [[11.0]])], [s0([[12.0], [13.0], [14.0]], [[15.0]])], [s0([[16.0], [17.0], [18.0]], [[19.0]])]]) in
    let v1: s3 = s3(s2([[s0([[20.0], [21.0], [22.0]], [[23.0]])], [s0([[24.0], [25.0], [26.0]], [[27.0]])]], [s1([s0([[28.0], [29.0], [30.0]], [[31.0]]), s0([[32.0], [33.0], [34.0]], [[35.0]])], [[s0([[36.0], [37.0], [38.0]], [[39.0]])], [s0([[40.0], [41.0], [42.0]], [[43.0]])], [s0([[44.0], [45.0], [46.0]], [[47.0]])]])]), [[s0([[48.0], [49.0], [50.0]], [[51.0]])], [s0([[52.0], [53.0], [54.0]], [[55.0]])], [s0([[56.0], [57.0], [58.0]], [[59.0]])]]) in
    let v2: s5 = s5([s0([[60.0], [61.0], [62.0]], [[63.0]])], [s2([[s0([[64.0], [65.0], [66.0]], [[67.0]])], [s0([[68.0], [69.0], [70.0]], [[71.0]])]], [s1([s0([[72.0], [73.0], [74.0]], [[75.0]]), s0([[76.0], [77.0], [78.0]], [[79.0]])], [[s0([[80.0], [81.0], [82.0]], [[83.0]])], [s0([[84.0], [85.0], [86.0]], [[87.0]])], [s0([[88.0], [89.0], [90.0]], [[91.0]])]])]), s2([[s0([[92.0], [93.0], [94.0]], [[95.0]])], [s0([[96.0], [97.0], [98.0]], [[99.0]])]], [s1([s0([[100.0], [101.0], [102.0]], [[103.0]]), s0([[104.0], [105.0], [106.0]], [[107.0]])], [[s0([[108.0], [109.0], [110.0]], [[111.0]])], [s0([[112.0], [113.0], [114.0]], [[115.0]])], [s0([[116.0], [117.0], [118.0]], [[119.0]])]])])]) in
    let v3: s6 = s6([s5([s0([[120.0], [121.0], [122.0]], [[123.0]])], [s2([[s0([[124.0], [125.0], [126.0]], [[127.0]])], [s0([[128.0], [129.0], [130.0]], [[131.0]])]], [s1([s0([[132.0], [133.0], [134.0]], [[135.0]]), s0([[136.0], [137.0], [138.0]], [[139.0]])], [[s0([[140.0], [141.0], [142.0]], [[143.0]])], [s0([[144.0], [145.0], [146.0]], [[147.0]])], [s0([[148.0], [149.0], [150.0]], [[151.0]])]])]), s2([[s0([[152.0], [153.0], [154.0]], [[155.0]])], [s0([[156.0], [157.0], [158.0]], [[159.0]])]], [s1([s0([[160.0], [161.0], [162.0]], [[163.0]]), s0([[164.0], [165.0], [166.0]], [[167.0]])], [[s0([[168.0], [169.0], [170.0]], [[171.0]])], [s0([[172.0], [173.0], [174.0]], [[175.0]])], [s0([[176.0], [177.0], [178.0]], [[179.0]])]])])])], [[s3(s2([[s0([[180.0], [181.0], [182.0]], [[183.0]])], [s0([[184.0], [185.0], [186.0]], [[187.0]])]], [s1([s0([[188.0], [189.0], [190.0]], [[191.0]]), s0([[192.0], [193.0], [194.0]], [[195.0]])], [[s0([[196.0], [197.0], [198.0]], [[199.0]])], [s0([[200.0], [201.0], [202.0]], [[203.0]])], [s0([[204.0], [205.0], [206.0]], [[207.0]])]])]), [[s0([[208.0], [209.0], [210.0]], [[211.0]])], [s0([[212.0], [213.0], [214.0]], [[215.0]])], [s0([[216.0], [217.0], [218.0]], [[219.0]])]])], [s3(s2([[s0([[220.0], [221.0], [222.0]], [[223.0]])], [s0([[224.0], [225.0], [226.0]], [[227.0]])]], [s1([s0([[228.0], [229.0], [230.0]], [[231.0]]), s0([[232.0], [233.0], [234.0]], [[235.0]])], [[s0([[236.0], [237.0], [238.0]], [[239.0]])], [s0([[240.0], [241.0], [242.0]], [[243.0]])], [s0([[244.0], [245.0], [246.0]], [[247.0]])]])]), [[s0([[248.0], [249.0], [250.0]], [[251.0]])], [s0([[252.0], [253.0], [254.0]], [[255.0]])], [s0([[256.0], [257.0], [258.0]], [[259.0]])]])]]) in
    let v4: Float = 260.0 in
    let initialResult: Float = 260.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()