  struct s0 {
    var p0: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s2 {
    var p0: s1
    var p1: s1
  } in
  struct s3 {
    var p0: s0
    var p1: s0
  } in
  struct s5 {
    var p0: s2
    var p1: [s2]
  } in
  struct s6 {
    var p0: [s2]
  } in
  let f25: (s3) -> s3 = (v0: s3) -> s3 {
    let v2: s0 = v0.p0 in
    var v8: s0 = v2 in
    let v6: [[Float]] = v2.p0 in
    var v3: s3 = v0 in
    let v9: s0 = v3.p1 in
    v3 = v0 in
    var v7: s0 = v2 in
    v3.p1 = v9 in
    v3.p1 = v7 in
    let v10: s0 = v3.p0 in
    let v15: [[Float]] = v10.p0 in
    let v13: [[Float]] = v8.p0 in
    var v21: s0 = v8 in
    v7.p0 = v6 in
    let v20: [[Float]] = v21.p0 in
    let v33: s0 = v3.p1 in
    var v24: s0 = v9 in
    v21.p0 = v13 in
    v21.p0 = v6 in
    v21 = v7 in
    let v22: [[Float]] = v2.p0 in
    v21 = v10 in
    v7.p0 = v22 in
    v7.p0 = v20 in
    v3.p0 = v24 in
    let v18: s0 = v0.p1 in
    var v48: s3 = v3 in
    v3.p1 = v7 in
    var v47: s0 = v33 in
    v24.p0 = v13 in
    let v36: s0 = v48.p0 in
    let v41: s3 = s3(v36, v47) in
    var v125: s0 = v18 in
    v3.p0 = v9 in
    v7.p0 = v15 in
    let v85: [[Float]] = v125.p0 in
    v3.p1 = v2 in
    v47 = v21 in
    v47.p0 = v6 in
    v47.p0 = v85 in
    v41
  } in
  let f14: (s3) -> s3 = (v0: s3) -> s3 {
    let v6: s3 = f25(v0) in
    let v3: s3 = f25(v6) in
    let v13: s3 = f25(v3) in
    let v71: s3 = f25(v13) in
    let v22: s3 = f25(v71) in
    let v54: s3 = f25(v22) in
    v54
  } in
  let noinline_f0: (s6, s6, [[s5]], [s2], s0, s5, s5, s0, Float) -> Float = (v0: s6, v1: s6, v2: [[s5]], v3: [s2], v4: s0, v5: s5, v6: s5, v7: s0, v8: Float) -> Float {
    let v14: s3 = s3(v7, v7) in
    let v22: s3 = f14(v14) in
    let v33: s0 = v22.p1 in
    let v35: [[Float]] = v33.p0 in
    let v38: [Float] = v35[0] in
    let v109: Float = v38[0] in
    v109
  } in
  fun loop(i: Int, v0: s6, v1: s6, v2: [[s5]], v3: [s2], v4: s0, v5: s5, v6: s5, v7: s0, v8: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4, v5, v6, v7, v8) in
      loop(i + 1, v0, v1, v2, v3, v4, v5, v6, v7, v8, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s6 = s6([s2(s1([s0([[0.0]])], s0([[1.0]])), s1([s0([[2.0]])], s0([[3.0]])))]) in
    let v1: s6 = s6([s2(s1([s0([[4.0]])], s0([[5.0]])), s1([s0([[6.0]])], s0([[7.0]])))]) in
    let v2: [[s5]] = [[s5(s2(s1([s0([[8.0]])], s0([[9.0]])), s1([s0([[10.0]])], s0([[11.0]]))), [s2(s1([s0([[12.0]])], s0([[13.0]])), s1([s0([[14.0]])], s0([[15.0]])))])], [s5(s2(s1([s0([[16.0]])], s0([[17.0]])), s1([s0([[18.0]])], s0([[19.0]]))), [s2(s1([s0([[20.0]])], s0([[21.0]])), s1([s0([[22.0]])], s0([[23.0]])))])]] in
    let v3: [s2] = [s2(s1([s0([[24.0]])], s0([[25.0]])), s1([s0([[26.0]])], s0([[27.0]]))), s2(s1([s0([[28.0]])], s0([[29.0]])), s1([s0([[30.0]])], s0([[31.0]])))] in
    let v4: s0 = s0([[32.0]]) in
    let v5: s5 = s5(s2(s1([s0([[33.0]])], s0([[34.0]])), s1([s0([[35.0]])], s0([[36.0]]))), [s2(s1([s0([[37.0]])], s0([[38.0]])), s1([s0([[39.0]])], s0([[40.0]])))]) in
    let v6: s5 = s5(s2(s1([s0([[41.0]])], s0([[42.0]])), s1([s0([[43.0]])], s0([[44.0]]))), [s2(s1([s0([[45.0]])], s0([[46.0]])), s1([s0([[47.0]])], s0([[48.0]])))]) in
    let v7: s0 = s0([[49.0]]) in
    let v8: Float = 50.0 in
    let initialResult: Float = 50.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, v5, v6, v7, v8, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()