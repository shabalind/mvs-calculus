  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: s0
  }
  struct s2 {
    var p0: [s0]
    var p1: [s1]
    var p2: s0
    var p3: [s1]
    var p4: [s1]
  }
  struct s4 {
    var p0: s2
    var p1: [Double]
  }
  @inline(never)
  func f0(_ v0: [s4], _ v1: [s2], _ v2: Double) -> Double {
    let v7: s2 = v1[2]
    var v5: s2 = v7
    let v4: [s1] = v5.p1
    let v18: [s0] = v5.p0
    let v30: [s1] = v7.p1
    v5.p3 = v4
    let v8: s0 = v18[1]
    v5.p1 = v30
    v5.p1 = v30
    v5.p3 = v4
    v5.p3 = v4
    let v32: [[Double]] = v8.p1
    let v42: [Double] = v32[0]
    v5.p4 = v30
    let v135: Double = v42[0]
    return v135
  }
  func benchmark() {
    let v0: [s4] = [s4(p0: s2(p0: [s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0]]), s0(p0: [[5.0], [6.0], [7.0]], p1: [[8.0], [9.0]])], p1: [s1(p0: [s0(p0: [[10.0], [11.0], [12.0]], p1: [[13.0], [14.0]])], p1: s0(p0: [[15.0], [16.0], [17.0]], p1: [[18.0], [19.0]]))], p2: s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0], [24.0]]), p3: [s1(p0: [s0(p0: [[25.0], [26.0], [27.0]], p1: [[28.0], [29.0]])], p1: s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0]]))], p4: [s1(p0: [s0(p0: [[35.0], [36.0], [37.0]], p1: [[38.0], [39.0]])], p1: s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0], [44.0]]))]), p1: [45.0]), s4(p0: s2(p0: [s0(p0: [[46.0], [47.0], [48.0]], p1: [[49.0], [50.0]]), s0(p0: [[51.0], [52.0], [53.0]], p1: [[54.0], [55.0]])], p1: [s1(p0: [s0(p0: [[56.0], [57.0], [58.0]], p1: [[59.0], [60.0]])], p1: s0(p0: [[61.0], [62.0], [63.0]], p1: [[64.0], [65.0]]))], p2: s0(p0: [[66.0], [67.0], [68.0]], p1: [[69.0], [70.0]]), p3: [s1(p0: [s0(p0: [[71.0], [72.0], [73.0]], p1: [[74.0], [75.0]])], p1: s0(p0: [[76.0], [77.0], [78.0]], p1: [[79.0], [80.0]]))], p4: [s1(p0: [s0(p0: [[81.0], [82.0], [83.0]], p1: [[84.0], [85.0]])], p1: s0(p0: [[86.0], [87.0], [88.0]], p1: [[89.0], [90.0]]))]), p1: [91.0]), s4(p0: s2(p0: [s0(p0: [[92.0], [93.0], [94.0]], p1: [[95.0], [96.0]]), s0(p0: [[97.0], [98.0], [99.0]], p1: [[100.0], [101.0]])], p1: [s1(p0: [s0(p0: [[102.0], [103.0], [104.0]], p1: [[105.0], [106.0]])], p1: s0(p0: [[107.0], [108.0], [109.0]], p1: [[110.0], [111.0]]))], p2: s0(p0: [[112.0], [113.0], [114.0]], p1: [[115.0], [116.0]]), p3: [s1(p0: [s0(p0: [[117.0], [118.0], [119.0]], p1: [[120.0], [121.0]])], p1: s0(p0: [[122.0], [123.0], [124.0]], p1: [[125.0], [126.0]]))], p4: [s1(p0: [s0(p0: [[127.0], [128.0], [129.0]], p1: [[130.0], [131.0]])], p1: s0(p0: [[132.0], [133.0], [134.0]], p1: [[135.0], [136.0]]))]), p1: [137.0])]
    let v1: [s2] = [s2(p0: [s0(p0: [[138.0], [139.0], [140.0]], p1: [[141.0], [142.0]]), s0(p0: [[143.0], [144.0], [145.0]], p1: [[146.0], [147.0]])], p1: [s1(p0: [s0(p0: [[148.0], [149.0], [150.0]], p1: [[151.0], [152.0]])], p1: s0(p0: [[153.0], [154.0], [155.0]], p1: [[156.0], [157.0]]))], p2: s0(p0: [[158.0], [159.0], [160.0]], p1: [[161.0], [162.0]]), p3: [s1(p0: [s0(p0: [[163.0], [164.0], [165.0]], p1: [[166.0], [167.0]])], p1: s0(p0: [[168.0], [169.0], [170.0]], p1: [[171.0], [172.0]]))], p4: [s1(p0: [s0(p0: [[173.0], [174.0], [175.0]], p1: [[176.0], [177.0]])], p1: s0(p0: [[178.0], [179.0], [180.0]], p1: [[181.0], [182.0]]))]), s2(p0: [s0(p0: [[183.0], [184.0], [185.0]], p1: [[186.0], [187.0]]), s0(p0: [[188.0], [189.0], [190.0]], p1: [[191.0], [192.0]])], p1: [s1(p0: [s0(p0: [[193.0], [194.0], [195.0]], p1: [[196.0], [197.0]])], p1: s0(p0: [[198.0], [199.0], [200.0]], p1: [[201.0], [202.0]]))], p2: s0(p0: [[203.0], [204.0], [205.0]], p1: [[206.0], [207.0]]), p3: [s1(p0: [s0(p0: [[208.0], [209.0], [210.0]], p1: [[211.0], [212.0]])], p1: s0(p0: [[213.0], [214.0], [215.0]], p1: [[216.0], [217.0]]))], p4: [s1(p0: [s0(p0: [[218.0], [219.0], [220.0]], p1: [[221.0], [222.0]])], p1: s0(p0: [[223.0], [224.0], [225.0]], p1: [[226.0], [227.0]]))]), s2(p0: [s0(p0: [[228.0], [229.0], [230.0]], p1: [[231.0], [232.0]]), s0(p0: [[233.0], [234.0], [235.0]], p1: [[236.0], [237.0]])], p1: [s1(p0: [s0(p0: [[238.0], [239.0], [240.0]], p1: [[241.0], [242.0]])], p1: s0(p0: [[243.0], [244.0], [245.0]], p1: [[246.0], [247.0]]))], p2: s0(p0: [[248.0], [249.0], [250.0]], p1: [[251.0], [252.0]]), p3: [s1(p0: [s0(p0: [[253.0], [254.0], [255.0]], p1: [[256.0], [257.0]])], p1: s0(p0: [[258.0], [259.0], [260.0]], p1: [[261.0], [262.0]]))], p4: [s1(p0: [s0(p0: [[263.0], [264.0], [265.0]], p1: [[266.0], [267.0]])], p1: s0(p0: [[268.0], [269.0], [270.0]], p1: [[271.0], [272.0]]))])]
    let v2: Double = 273.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 273.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
