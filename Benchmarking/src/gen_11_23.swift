  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: [[s1]]
    var p1: s1
    var p2: [[s0]]
  }
  struct s4 {
    var p0: [s1]
    var p1: [[s2]]
    var p2: s1
  }
  struct s7 {
    var p0: s0
    var p1: s2
  }
  @inline(never)
  func f0(_ v0: [s4], _ v1: [[s7]], _ v2: [s4], _ v3: Double) -> Double {
    let v4: [s7] = v1[2]
    var v6: [s7] = v4
    let v9: s7 = v6[0]
    let v13: s0 = v9.p0
    v6[0] = v9
    let v36: [[Double]] = v13.p1
    let v44: Double = v3 + v3
    var v50: Double = v44
    let v84: [Double] = v36[1]
    let v106: Double = v84[0]
    let v103: Double = v106 * v50
    return v103
  }
  func benchmark() {
    let v0: [s4] = [s4(p0: [s1(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0]], p2: [[4.0]]), p1: s0(p0: [[5.0], [6.0]], p1: [[7.0], [8.0]], p2: [[9.0]]))], p1: [[s2(p0: [[s1(p0: s0(p0: [[10.0], [11.0]], p1: [[12.0], [13.0]], p2: [[14.0]]), p1: s0(p0: [[15.0], [16.0]], p1: [[17.0], [18.0]], p2: [[19.0]]))], [s1(p0: s0(p0: [[20.0], [21.0]], p1: [[22.0], [23.0]], p2: [[24.0]]), p1: s0(p0: [[25.0], [26.0]], p1: [[27.0], [28.0]], p2: [[29.0]]))], [s1(p0: s0(p0: [[30.0], [31.0]], p1: [[32.0], [33.0]], p2: [[34.0]]), p1: s0(p0: [[35.0], [36.0]], p1: [[37.0], [38.0]], p2: [[39.0]]))]], p1: s1(p0: s0(p0: [[40.0], [41.0]], p1: [[42.0], [43.0]], p2: [[44.0]]), p1: s0(p0: [[45.0], [46.0]], p1: [[47.0], [48.0]], p2: [[49.0]])), p2: [[s0(p0: [[50.0], [51.0]], p1: [[52.0], [53.0]], p2: [[54.0]])]])], [s2(p0: [[s1(p0: s0(p0: [[55.0], [56.0]], p1: [[57.0], [58.0]], p2: [[59.0]]), p1: s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0]], p2: [[64.0]]))], [s1(p0: s0(p0: [[65.0], [66.0]], p1: [[67.0], [68.0]], p2: [[69.0]]), p1: s0(p0: [[70.0], [71.0]], p1: [[72.0], [73.0]], p2: [[74.0]]))], [s1(p0: s0(p0: [[75.0], [76.0]], p1: [[77.0], [78.0]], p2: [[79.0]]), p1: s0(p0: [[80.0], [81.0]], p1: [[82.0], [83.0]], p2: [[84.0]]))]], p1: s1(p0: s0(p0: [[85.0], [86.0]], p1: [[87.0], [88.0]], p2: [[89.0]]), p1: s0(p0: [[90.0], [91.0]], p1: [[92.0], [93.0]], p2: [[94.0]])), p2: [[s0(p0: [[95.0], [96.0]], p1: [[97.0], [98.0]], p2: [[99.0]])]])], [s2(p0: [[s1(p0: s0(p0: [[100.0], [101.0]], p1: [[102.0], [103.0]], p2: [[104.0]]), p1: s0(p0: [[105.0], [106.0]], p1: [[107.0], [108.0]], p2: [[109.0]]))], [s1(p0: s0(p0: [[110.0], [111.0]], p1: [[112.0], [113.0]], p2: [[114.0]]), p1: s0(p0: [[115.0], [116.0]], p1: [[117.0], [118.0]], p2: [[119.0]]))], [s1(p0: s0(p0: [[120.0], [121.0]], p1: [[122.0], [123.0]], p2: [[124.0]]), p1: s0(p0: [[125.0], [126.0]], p1: [[127.0], [128.0]], p2: [[129.0]]))]], p1: s1(p0: s0(p0: [[130.0], [131.0]], p1: [[132.0], [133.0]], p2: [[134.0]]), p1: s0(p0: [[135.0], [136.0]], p1: [[137.0], [138.0]], p2: [[139.0]])), p2: [[s0(p0: [[140.0], [141.0]], p1: [[142.0], [143.0]], p2: [[144.0]])]])]], p2: s1(p0: s0(p0: [[145.0], [146.0]], p1: [[147.0], [148.0]], p2: [[149.0]]), p1: s0(p0: [[150.0], [151.0]], p1: [[152.0], [153.0]], p2: [[154.0]])))]
    let v1: [[s7]] = [[s7(p0: s0(p0: [[155.0], [156.0]], p1: [[157.0], [158.0]], p2: [[159.0]]), p1: s2(p0: [[s1(p0: s0(p0: [[160.0], [161.0]], p1: [[162.0], [163.0]], p2: [[164.0]]), p1: s0(p0: [[165.0], [166.0]], p1: [[167.0], [168.0]], p2: [[169.0]]))], [s1(p0: s0(p0: [[170.0], [171.0]], p1: [[172.0], [173.0]], p2: [[174.0]]), p1: s0(p0: [[175.0], [176.0]], p1: [[177.0], [178.0]], p2: [[179.0]]))], [s1(p0: s0(p0: [[180.0], [181.0]], p1: [[182.0], [183.0]], p2: [[184.0]]), p1: s0(p0: [[185.0], [186.0]], p1: [[187.0], [188.0]], p2: [[189.0]]))]], p1: s1(p0: s0(p0: [[190.0], [191.0]], p1: [[192.0], [193.0]], p2: [[194.0]]), p1: s0(p0: [[195.0], [196.0]], p1: [[197.0], [198.0]], p2: [[199.0]])), p2: [[s0(p0: [[200.0], [201.0]], p1: [[202.0], [203.0]], p2: [[204.0]])]]))], [s7(p0: s0(p0: [[205.0], [206.0]], p1: [[207.0], [208.0]], p2: [[209.0]]), p1: s2(p0: [[s1(p0: s0(p0: [[210.0], [211.0]], p1: [[212.0], [213.0]], p2: [[214.0]]), p1: s0(p0: [[215.0], [216.0]], p1: [[217.0], [218.0]], p2: [[219.0]]))], [s1(p0: s0(p0: [[220.0], [221.0]], p1: [[222.0], [223.0]], p2: [[224.0]]), p1: s0(p0: [[225.0], [226.0]], p1: [[227.0], [228.0]], p2: [[229.0]]))], [s1(p0: s0(p0: [[230.0], [231.0]], p1: [[232.0], [233.0]], p2: [[234.0]]), p1: s0(p0: [[235.0], [236.0]], p1: [[237.0], [238.0]], p2: [[239.0]]))]], p1: s1(p0: s0(p0: [[240.0], [241.0]], p1: [[242.0], [243.0]], p2: [[244.0]]), p1: s0(p0: [[245.0], [246.0]], p1: [[247.0], [248.0]], p2: [[249.0]])), p2: [[s0(p0: [[250.0], [251.0]], p1: [[252.0], [253.0]], p2: [[254.0]])]]))], [s7(p0: s0(p0: [[255.0], [256.0]], p1: [[257.0], [258.0]], p2: [[259.0]]), p1: s2(p0: [[s1(p0: s0(p0: [[260.0], [261.0]], p1: [[262.0], [263.0]], p2: [[264.0]]), p1: s0(p0: [[265.0], [266.0]], p1: [[267.0], [268.0]], p2: [[269.0]]))], [s1(p0: s0(p0: [[270.0], [271.0]], p1: [[272.0], [273.0]], p2: [[274.0]]), p1: s0(p0: [[275.0], [276.0]], p1: [[277.0], [278.0]], p2: [[279.0]]))], [s1(p0: s0(p0: [[280.0], [281.0]], p1: [[282.0], [283.0]], p2: [[284.0]]), p1: s0(p0: [[285.0], [286.0]], p1: [[287.0], [288.0]], p2: [[289.0]]))]], p1: s1(p0: s0(p0: [[290.0], [291.0]], p1: [[292.0], [293.0]], p2: [[294.0]]), p1: s0(p0: [[295.0], [296.0]], p1: [[297.0], [298.0]], p2: [[299.0]])), p2: [[s0(p0: [[300.0], [301.0]], p1: [[302.0], [303.0]], p2: [[304.0]])]]))]]
    let v2: [s4] = [s4(p0: [s1(p0: s0(p0: [[305.0], [306.0]], p1: [[307.0], [308.0]], p2: [[309.0]]), p1: s0(p0: [[310.0], [311.0]], p1: [[312.0], [313.0]], p2: [[314.0]]))], p1: [[s2(p0: [[s1(p0: s0(p0: [[315.0], [316.0]], p1: [[317.0], [318.0]], p2: [[319.0]]), p1: s0(p0: [[320.0], [321.0]], p1: [[322.0], [323.0]], p2: [[324.0]]))], [s1(p0: s0(p0: [[325.0], [326.0]], p1: [[327.0], [328.0]], p2: [[329.0]]), p1: s0(p0: [[330.0], [331.0]], p1: [[332.0], [333.0]], p2: [[334.0]]))], [s1(p0: s0(p0: [[335.0], [336.0]], p1: [[337.0], [338.0]], p2: [[339.0]]), p1: s0(p0: [[340.0], [341.0]], p1: [[342.0], [343.0]], p2: [[344.0]]))]], p1: s1(p0: s0(p0: [[345.0], [346.0]], p1: [[347.0], [348.0]], p2: [[349.0]]), p1: s0(p0: [[350.0], [351.0]], p1: [[352.0], [353.0]], p2: [[354.0]])), p2: [[s0(p0: [[355.0], [356.0]], p1: [[357.0], [358.0]], p2: [[359.0]])]])], [s2(p0: [[s1(p0: s0(p0: [[360.0], [361.0]], p1: [[362.0], [363.0]], p2: [[364.0]]), p1: s0(p0: [[365.0], [366.0]], p1: [[367.0], [368.0]], p2: [[369.0]]))], [s1(p0: s0(p0: [[370.0], [371.0]], p1: [[372.0], [373.0]], p2: [[374.0]]), p1: s0(p0: [[375.0], [376.0]], p1: [[377.0], [378.0]], p2: [[379.0]]))], [s1(p0: s0(p0: [[380.0], [381.0]], p1: [[382.0], [383.0]], p2: [[384.0]]), p1: s0(p0: [[385.0], [386.0]], p1: [[387.0], [388.0]], p2: [[389.0]]))]], p1: s1(p0: s0(p0: [[390.0], [391.0]], p1: [[392.0], [393.0]], p2: [[394.0]]), p1: s0(p0: [[395.0], [396.0]], p1: [[397.0], [398.0]], p2: [[399.0]])), p2: [[s0(p0: [[400.0], [401.0]], p1: [[402.0], [403.0]], p2: [[404.0]])]])], [s2(p0: [[s1(p0: s0(p0: [[405.0], [406.0]], p1: [[407.0], [408.0]], p2: [[409.0]]), p1: s0(p0: [[410.0], [411.0]], p1: [[412.0], [413.0]], p2: [[414.0]]))], [s1(p0: s0(p0: [[415.0], [416.0]], p1: [[417.0], [418.0]], p2: [[419.0]]), p1: s0(p0: [[420.0], [421.0]], p1: [[422.0], [423.0]], p2: [[424.0]]))], [s1(p0: s0(p0: [[425.0], [426.0]], p1: [[427.0], [428.0]], p2: [[429.0]]), p1: s0(p0: [[430.0], [431.0]], p1: [[432.0], [433.0]], p2: [[434.0]]))]], p1: s1(p0: s0(p0: [[435.0], [436.0]], p1: [[437.0], [438.0]], p2: [[439.0]]), p1: s0(p0: [[440.0], [441.0]], p1: [[442.0], [443.0]], p2: [[444.0]])), p2: [[s0(p0: [[445.0], [446.0]], p1: [[447.0], [448.0]], p2: [[449.0]])]])]], p2: s1(p0: s0(p0: [[450.0], [451.0]], p1: [[452.0], [453.0]], p2: [[454.0]]), p1: s0(p0: [[455.0], [456.0]], p1: [[457.0], [458.0]], p2: [[459.0]]))), s4(p0: [s1(p0: s0(p0: [[460.0], [461.0]], p1: [[462.0], [463.0]], p2: [[464.0]]), p1: s0(p0: [[465.0], [466.0]], p1: [[467.0], [468.0]], p2: [[469.0]]))], p1: [[s2(p0: [[s1(p0: s0(p0: [[470.0], [471.0]], p1: [[472.0], [473.0]], p2: [[474.0]]), p1: s0(p0: [[475.0], [476.0]], p1: [[477.0], [478.0]], p2: [[479.0]]))], [s1(p0: s0(p0: [[480.0], [481.0]], p1: [[482.0], [483.0]], p2: [[484.0]]), p1: s0(p0: [[485.0], [486.0]], p1: [[487.0], [488.0]], p2: [[489.0]]))], [s1(p0: s0(p0: [[490.0], [491.0]], p1: [[492.0], [493.0]], p2: [[494.0]]), p1: s0(p0: [[495.0], [496.0]], p1: [[497.0], [498.0]], p2: [[499.0]]))]], p1: s1(p0: s0(p0: [[500.0], [501.0]], p1: [[502.0], [503.0]], p2: [[504.0]]), p1: s0(p0: [[505.0], [506.0]], p1: [[507.0], [508.0]], p2: [[509.0]])), p2: [[s0(p0: [[510.0], [511.0]], p1: [[512.0], [513.0]], p2: [[514.0]])]])], [s2(p0: [[s1(p0: s0(p0: [[515.0], [516.0]], p1: [[517.0], [518.0]], p2: [[519.0]]), p1: s0(p0: [[520.0], [521.0]], p1: [[522.0], [523.0]], p2: [[524.0]]))], [s1(p0: s0(p0: [[525.0], [526.0]], p1: [[527.0], [528.0]], p2: [[529.0]]), p1: s0(p0: [[530.0], [531.0]], p1: [[532.0], [533.0]], p2: [[534.0]]))], [s1(p0: s0(p0: [[535.0], [536.0]], p1: [[537.0], [538.0]], p2: [[539.0]]), p1: s0(p0: [[540.0], [541.0]], p1: [[542.0], [543.0]], p2: [[544.0]]))]], p1: s1(p0: s0(p0: [[545.0], [546.0]], p1: [[547.0], [548.0]], p2: [[549.0]]), p1: s0(p0: [[550.0], [551.0]], p1: [[552.0], [553.0]], p2: [[554.0]])), p2: [[s0(p0: [[555.0], [556.0]], p1: [[557.0], [558.0]], p2: [[559.0]])]])], [s2(p0: [[s1(p0: s0(p0: [[560.0], [561.0]], p1: [[562.0], [563.0]], p2: [[564.0]]), p1: s0(p0: [[565.0], [566.0]], p1: [[567.0], [568.0]], p2: [[569.0]]))], [s1(p0: s0(p0: [[570.0], [571.0]], p1: [[572.0], [573.0]], p2: [[574.0]]), p1: s0(p0: [[575.0], [576.0]], p1: [[577.0], [578.0]], p2: [[579.0]]))], [s1(p0: s0(p0: [[580.0], [581.0]], p1: [[582.0], [583.0]], p2: [[584.0]]), p1: s0(p0: [[585.0], [586.0]], p1: [[587.0], [588.0]], p2: [[589.0]]))]], p1: s1(p0: s0(p0: [[590.0], [591.0]], p1: [[592.0], [593.0]], p2: [[594.0]]), p1: s0(p0: [[595.0], [596.0]], p1: [[597.0], [598.0]], p2: [[599.0]])), p2: [[s0(p0: [[600.0], [601.0]], p1: [[602.0], [603.0]], p2: [[604.0]])]])]], p2: s1(p0: s0(p0: [[605.0], [606.0]], p1: [[607.0], [608.0]], p2: [[609.0]]), p1: s0(p0: [[610.0], [611.0]], p1: [[612.0], [613.0]], p2: [[614.0]])))]
    let v3: Double = 615.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 615.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
