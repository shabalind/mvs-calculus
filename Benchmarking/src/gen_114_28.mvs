  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: [s1]
    var p1: [Float]
  } in
  struct s3 {
    var p0: [[s2]]
    var p1: s1
  } in
  struct s5 {
    var p0: s2
    var p1: s2
  } in
  struct s6 {
    var p0: s3
    var p1: s2
  } in
  let f76: (Float) -> Float = (v0: Float) -> Float {
    let v1: Float = v0 + v0 in
    var v6: Float = v0 in
    var v8: Float = v1 in
    var v7: Float = v0 in
    var v3: Float = v6 in
    var v4: Float = v0 in
    var v2: Float = v8 in
    var v13: Float = v6 in
    var v9: Float = v2 in
    var v12: Float = v1 in
    var v25: Float = v6 in
    var v18: Float = v25 in
    v9 = v4 in
    var v20: Float = v0 in
    var v37: Float = v13 in
    v37 = v9 in
    var v29: Float = v20 in
    var v36: Float = v12 in
    var v16: Float = v18 in
    var v32: Float = v20 in
    let v30: [Float] = [v16, v8] in
    var v23: [Float] = v30 in
    v3 = v37 in
    var v21: [Float] = v23 in
    v3 = v20 in
    let v33: Float = v30[1] in
    var v24: Float = v3 in
    var v83: [Float] = v21 in
    let v28: Float = v23[1] in
    let v26: Float = v83[0] in
    v83[1] = v37 in
    var v93: Float = v28 in
    var v51: [Float] = v30 in
    v51[0] = v25 in
    v23[1] = v93 in
    var v27: Float = v29 in
    v21[1] = v32 in
    let v81: Float = v6 * v33 in
    v51[1] = v12 in
    var v52: [Float] = v23 in
    v52[0] = v7 in
    let v103: [[Float]] = [v51, v52, v21, v83, v30, v52] in
    v51[1] = v32 in
    let v61: [Float] = v103[0] in
    let v70: Float = v21[1] in
    let v56: Float = v61[1] in
    v83[0] = v81 in
    v83[0] = v24 in
    v18 = v36 in
    v25 = v70 in
    v83[1] = v56 in
    v21[0] = v27 in
    v32 = v12 in
    v26
  } in
  let f29: (Float) -> Float = (v0: Float) -> Float {
    var v4: Float = v0 in
    var v8: Float = v4 in
    let v3: [Float] = [v8, v8, v0, v8, v8] in
    var v7: Float = v4 in
    var v2: [Float] = v3 in
    let v17: Float = v3[4] in
    let v15: [[Float]] = [v2, v3, v3, v3, v3, v3, v3] in
    let v13: [Float] = v15[2] in
    var v11: [[Float]] = v15 in
    let v18: Float = v13[4] in
    v2[4] = v17 in
    let v14: Float = v3[1] in
    v11[2] = v3 in
    v11[1] = v13 in
    var v20: [Float] = v3 in
    let v35: Float = v20[4] in
    let v21: Float = f76(v7) in
    let v27: [[[Float]]] = [v11, v15, v15, v15, v11, v11, v11] in
    v11[5] = v3 in
    v4 = v35 in
    let v97: Float = f76(v21) in
    let v38: Float = f76(v8) in
    let v46: Float = f76(v38) in
    let v67: [[Float]] = v27[1] in
    v2[4] = v14 in
    let v52: [Float] = v67[1] in
    var v133: [Float] = v52 in
    v20[0] = v46 in
    v2[0] = v97 in
    let v81: Float = v133[0] in
    let v96: [Float] = [v81] in
    v2[1] = v18 in
    var v356: [Float] = v96 in
    let v165: Float = v356[0] in
    v165
  } in
  let noinline_f0: (s6, s5, Float) -> Float = (v0: s6, v1: s5, v2: Float) -> Float {
    let v4: Float = f29(v2) in
    var v8: Float = v4 in
    var v9: Float = v4 in
    let v22: Float = v8 + v8 in
    let v40: Float = v22 * v9 in
    v9 = v40 in
    v8 = v40 in
    var v80: Float = v8 in
    let v52: Float = v80 / v40 in
    v52
  } in
  fun loop(i: Int, v0: s6, v1: s5, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s6 = s6(s3([[s2([s1(s0([[0.0], [1.0]], [[2.0], [3.0]]), [s0([[4.0], [5.0]], [[6.0], [7.0]]), s0([[8.0], [9.0]], [[10.0], [11.0]]), s0([[12.0], [13.0]], [[14.0], [15.0]])]), s1(s0([[16.0], [17.0]], [[18.0], [19.0]]), [s0([[20.0], [21.0]], [[22.0], [23.0]]), s0([[24.0], [25.0]], [[26.0], [27.0]]), s0([[28.0], [29.0]], [[30.0], [31.0]])]), s1(s0([[32.0], [33.0]], [[34.0], [35.0]]), [s0([[36.0], [37.0]], [[38.0], [39.0]]), s0([[40.0], [41.0]], [[42.0], [43.0]]), s0([[44.0], [45.0]], [[46.0], [47.0]])])], [48.0, 49.0])], [s2([s1(s0([[50.0], [51.0]], [[52.0], [53.0]]), [s0([[54.0], [55.0]], [[56.0], [57.0]]), s0([[58.0], [59.0]], [[60.0], [61.0]]), s0([[62.0], [63.0]], [[64.0], [65.0]])]), s1(s0([[66.0], [67.0]], [[68.0], [69.0]]), [s0([[70.0], [71.0]], [[72.0], [73.0]]), s0([[74.0], [75.0]], [[76.0], [77.0]]), s0([[78.0], [79.0]], [[80.0], [81.0]])]), s1(s0([[82.0], [83.0]], [[84.0], [85.0]]), [s0([[86.0], [87.0]], [[88.0], [89.0]]), s0([[90.0], [91.0]], [[92.0], [93.0]]), s0([[94.0], [95.0]], [[96.0], [97.0]])])], [98.0, 99.0])], [s2([s1(s0([[100.0], [101.0]], [[102.0], [103.0]]), [s0([[104.0], [105.0]], [[106.0], [107.0]]), s0([[108.0], [109.0]], [[110.0], [111.0]]), s0([[112.0], [113.0]], [[114.0], [115.0]])]), s1(s0([[116.0], [117.0]], [[118.0], [119.0]]), [s0([[120.0], [121.0]], [[122.0], [123.0]]), s0([[124.0], [125.0]], [[126.0], [127.0]]), s0([[128.0], [129.0]], [[130.0], [131.0]])]), s1(s0([[132.0], [133.0]], [[134.0], [135.0]]), [s0([[136.0], [137.0]], [[138.0], [139.0]]), s0([[140.0], [141.0]], [[142.0], [143.0]]), s0([[144.0], [145.0]], [[146.0], [147.0]])])], [148.0, 149.0])]], s1(s0([[150.0], [151.0]], [[152.0], [153.0]]), [s0([[154.0], [155.0]], [[156.0], [157.0]]), s0([[158.0], [159.0]], [[160.0], [161.0]]), s0([[162.0], [163.0]], [[164.0], [165.0]])])), s2([s1(s0([[166.0], [167.0]], [[168.0], [169.0]]), [s0([[170.0], [171.0]], [[172.0], [173.0]]), s0([[174.0], [175.0]], [[176.0], [177.0]]), s0([[178.0], [179.0]], [[180.0], [181.0]])]), s1(s0([[182.0], [183.0]], [[184.0], [185.0]]), [s0([[186.0], [187.0]], [[188.0], [189.0]]), s0([[190.0], [191.0]], [[192.0], [193.0]]), s0([[194.0], [195.0]], [[196.0], [197.0]])]), s1(s0([[198.0], [199.0]], [[200.0], [201.0]]), [s0([[202.0], [203.0]], [[204.0], [205.0]]), s0([[206.0], [207.0]], [[208.0], [209.0]]), s0([[210.0], [211.0]], [[212.0], [213.0]])])], [214.0, 215.0])) in
    let v1: s5 = s5(s2([s1(s0([[216.0], [217.0]], [[218.0], [219.0]]), [s0([[220.0], [221.0]], [[222.0], [223.0]]), s0([[224.0], [225.0]], [[226.0], [227.0]]), s0([[228.0], [229.0]], [[230.0], [231.0]])]), s1(s0([[232.0], [233.0]], [[234.0], [235.0]]), [s0([[236.0], [237.0]], [[238.0], [239.0]]), s0([[240.0], [241.0]], [[242.0], [243.0]]), s0([[244.0], [245.0]], [[246.0], [247.0]])]), s1(s0([[248.0], [249.0]], [[250.0], [251.0]]), [s0([[252.0], [253.0]], [[254.0], [255.0]]), s0([[256.0], [257.0]], [[258.0], [259.0]]), s0([[260.0], [261.0]], [[262.0], [263.0]])])], [264.0, 265.0]), s2([s1(s0([[266.0], [267.0]], [[268.0], [269.0]]), [s0([[270.0], [271.0]], [[272.0], [273.0]]), s0([[274.0], [275.0]], [[276.0], [277.0]]), s0([[278.0], [279.0]], [[280.0], [281.0]])]), s1(s0([[282.0], [283.0]], [[284.0], [285.0]]), [s0([[286.0], [287.0]], [[288.0], [289.0]]), s0([[290.0], [291.0]], [[292.0], [293.0]]), s0([[294.0], [295.0]], [[296.0], [297.0]])]), s1(s0([[298.0], [299.0]], [[300.0], [301.0]]), [s0([[302.0], [303.0]], [[304.0], [305.0]]), s0([[306.0], [307.0]], [[308.0], [309.0]]), s0([[310.0], [311.0]], [[312.0], [313.0]])])], [314.0, 315.0])) in
    let v2: Float = 316.0 in
    let initialResult: Float = 316.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()