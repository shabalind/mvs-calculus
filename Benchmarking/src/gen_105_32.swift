  import Dispatch
  struct s0 {
    var p0: [Double]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: s0
  }
  struct s2 {
    var p0: s1
    var p1: [Double]
  }
  struct s3 {
    var p0: [s2]
    var p1: s1
  }
  struct s4 {
    var p0: s1
    var p1: s2
  }
  struct s5 {
    var p0: s4
    var p1: s3
  }
  struct s6 {
    var p0: [Double]
    var p1: s1
  }
  struct s8 {
    var p0: [[s6]]
    var p1: [s5]
  }
  func f47(_ v0: s1) -> s1 {
    let v7: s0 = v0.p1
    var v3: s1 = v0
    let v24: [Double] = v7.p0
    let v37: s2 = s2(p0: v3, p1: v24)
    let v25: s1 = v37.p0
    return v25
  }
  @inline(never)
  func f0(_ v0: [[s8]], _ v1: s1, _ v2: Double) -> Double {
    let v6: s1 = f47(v1)
    let v10: s0 = v6.p1
    let v14: [Double] = v10.p0
    let v60: Double = v14[0]
    return v60
  }
  func benchmark() {
    let v0: [[s8]] = [[s8(p0: [[s6(p0: [0.0, 1.0], p1: s1(p0: [s0(p0: [2.0], p1: [[3.0]]), s0(p0: [4.0], p1: [[5.0]])], p1: s0(p0: [6.0], p1: [[7.0]])))], [s6(p0: [8.0, 9.0], p1: s1(p0: [s0(p0: [10.0], p1: [[11.0]]), s0(p0: [12.0], p1: [[13.0]])], p1: s0(p0: [14.0], p1: [[15.0]])))], [s6(p0: [16.0, 17.0], p1: s1(p0: [s0(p0: [18.0], p1: [[19.0]]), s0(p0: [20.0], p1: [[21.0]])], p1: s0(p0: [22.0], p1: [[23.0]])))]], p1: [s5(p0: s4(p0: s1(p0: [s0(p0: [24.0], p1: [[25.0]]), s0(p0: [26.0], p1: [[27.0]])], p1: s0(p0: [28.0], p1: [[29.0]])), p1: s2(p0: s1(p0: [s0(p0: [30.0], p1: [[31.0]]), s0(p0: [32.0], p1: [[33.0]])], p1: s0(p0: [34.0], p1: [[35.0]])), p1: [36.0])), p1: s3(p0: [s2(p0: s1(p0: [s0(p0: [37.0], p1: [[38.0]]), s0(p0: [39.0], p1: [[40.0]])], p1: s0(p0: [41.0], p1: [[42.0]])), p1: [43.0]), s2(p0: s1(p0: [s0(p0: [44.0], p1: [[45.0]]), s0(p0: [46.0], p1: [[47.0]])], p1: s0(p0: [48.0], p1: [[49.0]])), p1: [50.0]), s2(p0: s1(p0: [s0(p0: [51.0], p1: [[52.0]]), s0(p0: [53.0], p1: [[54.0]])], p1: s0(p0: [55.0], p1: [[56.0]])), p1: [57.0])], p1: s1(p0: [s0(p0: [58.0], p1: [[59.0]]), s0(p0: [60.0], p1: [[61.0]])], p1: s0(p0: [62.0], p1: [[63.0]]))))])], [s8(p0: [[s6(p0: [64.0, 65.0], p1: s1(p0: [s0(p0: [66.0], p1: [[67.0]]), s0(p0: [68.0], p1: [[69.0]])], p1: s0(p0: [70.0], p1: [[71.0]])))], [s6(p0: [72.0, 73.0], p1: s1(p0: [s0(p0: [74.0], p1: [[75.0]]), s0(p0: [76.0], p1: [[77.0]])], p1: s0(p0: [78.0], p1: [[79.0]])))], [s6(p0: [80.0, 81.0], p1: s1(p0: [s0(p0: [82.0], p1: [[83.0]]), s0(p0: [84.0], p1: [[85.0]])], p1: s0(p0: [86.0], p1: [[87.0]])))]], p1: [s5(p0: s4(p0: s1(p0: [s0(p0: [88.0], p1: [[89.0]]), s0(p0: [90.0], p1: [[91.0]])], p1: s0(p0: [92.0], p1: [[93.0]])), p1: s2(p0: s1(p0: [s0(p0: [94.0], p1: [[95.0]]), s0(p0: [96.0], p1: [[97.0]])], p1: s0(p0: [98.0], p1: [[99.0]])), p1: [100.0])), p1: s3(p0: [s2(p0: s1(p0: [s0(p0: [101.0], p1: [[102.0]]), s0(p0: [103.0], p1: [[104.0]])], p1: s0(p0: [105.0], p1: [[106.0]])), p1: [107.0]), s2(p0: s1(p0: [s0(p0: [108.0], p1: [[109.0]]), s0(p0: [110.0], p1: [[111.0]])], p1: s0(p0: [112.0], p1: [[113.0]])), p1: [114.0]), s2(p0: s1(p0: [s0(p0: [115.0], p1: [[116.0]]), s0(p0: [117.0], p1: [[118.0]])], p1: s0(p0: [119.0], p1: [[120.0]])), p1: [121.0])], p1: s1(p0: [s0(p0: [122.0], p1: [[123.0]]), s0(p0: [124.0], p1: [[125.0]])], p1: s0(p0: [126.0], p1: [[127.0]]))))])]]
    let v1: s1 = s1(p0: [s0(p0: [128.0], p1: [[129.0]]), s0(p0: [130.0], p1: [[131.0]])], p1: s0(p0: [132.0], p1: [[133.0]]))
    let v2: Double = 134.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 134.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
