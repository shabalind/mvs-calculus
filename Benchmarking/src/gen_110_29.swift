  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: [[s1]]
    var p1: [s0]
  }
  struct s3 {
    var p0: s2
    var p1: s2
    var p2: [[s0]]
    var p3: [[s1]]
  }
  struct s4 {
    var p0: [[s0]]
    var p1: s1
    var p2: s1
    var p3: [[s1]]
    var p4: [[Double]]
  }
  struct s5 {
    var p0: s4
    var p1: [[s2]]
  }
  struct s7 {
    var p0: s5
    var p1: [s2]
  }
  struct s8 {
    var p0: [[s5]]
    var p1: s4
  }
  func f15(_ v0: Double) -> Double {
    var v4: Double = v0
    var v2: Double = v4
    var v5: Double = v2
    var v7: Double = v5
    let v9: [Double] = [v7, v7, v4, v0, v2, v2, v5]
    var v23: [Double] = v9
    var v27: [Double] = v23
    var v13: [Double] = v27
    v13[3] = v5
    var v24: [Double] = v13
    v13 = v24
    let v51: Double = v13[0]
    return v51
  }
  @inline(never)
  func f0(_ v0: s3, _ v1: [s7], _ v2: [s8], _ v3: Double) -> Double {
    let v6: Double = f15(v3)
    let v11: Double = f15(v6)
    var v13: Double = v6
    let v36: Double = v13 / v11
    return v36
  }
  func benchmark() {
    let v0: s3 = s3(p0: s2(p0: [[s1(p0: s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0]]), p1: s0(p0: [[5.0], [6.0], [7.0]], p1: [[8.0], [9.0]]))], [s1(p0: s0(p0: [[10.0], [11.0], [12.0]], p1: [[13.0], [14.0]]), p1: s0(p0: [[15.0], [16.0], [17.0]], p1: [[18.0], [19.0]]))]], p1: [s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0], [24.0]])]), p1: s2(p0: [[s1(p0: s0(p0: [[25.0], [26.0], [27.0]], p1: [[28.0], [29.0]]), p1: s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0]]))], [s1(p0: s0(p0: [[35.0], [36.0], [37.0]], p1: [[38.0], [39.0]]), p1: s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0], [44.0]]))]], p1: [s0(p0: [[45.0], [46.0], [47.0]], p1: [[48.0], [49.0]])]), p2: [[s0(p0: [[50.0], [51.0], [52.0]], p1: [[53.0], [54.0]])]], p3: [[s1(p0: s0(p0: [[55.0], [56.0], [57.0]], p1: [[58.0], [59.0]]), p1: s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0], [64.0]]))], [s1(p0: s0(p0: [[65.0], [66.0], [67.0]], p1: [[68.0], [69.0]]), p1: s0(p0: [[70.0], [71.0], [72.0]], p1: [[73.0], [74.0]]))], [s1(p0: s0(p0: [[75.0], [76.0], [77.0]], p1: [[78.0], [79.0]]), p1: s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0], [84.0]]))]])
    let v1: [s7] = [s7(p0: s5(p0: s4(p0: [[s0(p0: [[85.0], [86.0], [87.0]], p1: [[88.0], [89.0]])]], p1: s1(p0: s0(p0: [[90.0], [91.0], [92.0]], p1: [[93.0], [94.0]]), p1: s0(p0: [[95.0], [96.0], [97.0]], p1: [[98.0], [99.0]])), p2: s1(p0: s0(p0: [[100.0], [101.0], [102.0]], p1: [[103.0], [104.0]]), p1: s0(p0: [[105.0], [106.0], [107.0]], p1: [[108.0], [109.0]])), p3: [[s1(p0: s0(p0: [[110.0], [111.0], [112.0]], p1: [[113.0], [114.0]]), p1: s0(p0: [[115.0], [116.0], [117.0]], p1: [[118.0], [119.0]]))], [s1(p0: s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0], [124.0]]), p1: s0(p0: [[125.0], [126.0], [127.0]], p1: [[128.0], [129.0]]))]], p4: [[130.0], [131.0], [132.0]]), p1: [[s2(p0: [[s1(p0: s0(p0: [[133.0], [134.0], [135.0]], p1: [[136.0], [137.0]]), p1: s0(p0: [[138.0], [139.0], [140.0]], p1: [[141.0], [142.0]]))], [s1(p0: s0(p0: [[143.0], [144.0], [145.0]], p1: [[146.0], [147.0]]), p1: s0(p0: [[148.0], [149.0], [150.0]], p1: [[151.0], [152.0]]))]], p1: [s0(p0: [[153.0], [154.0], [155.0]], p1: [[156.0], [157.0]])])]]), p1: [s2(p0: [[s1(p0: s0(p0: [[158.0], [159.0], [160.0]], p1: [[161.0], [162.0]]), p1: s0(p0: [[163.0], [164.0], [165.0]], p1: [[166.0], [167.0]]))], [s1(p0: s0(p0: [[168.0], [169.0], [170.0]], p1: [[171.0], [172.0]]), p1: s0(p0: [[173.0], [174.0], [175.0]], p1: [[176.0], [177.0]]))]], p1: [s0(p0: [[178.0], [179.0], [180.0]], p1: [[181.0], [182.0]])])]), s7(p0: s5(p0: s4(p0: [[s0(p0: [[183.0], [184.0], [185.0]], p1: [[186.0], [187.0]])]], p1: s1(p0: s0(p0: [[188.0], [189.0], [190.0]], p1: [[191.0], [192.0]]), p1: s0(p0: [[193.0], [194.0], [195.0]], p1: [[196.0], [197.0]])), p2: s1(p0: s0(p0: [[198.0], [199.0], [200.0]], p1: [[201.0], [202.0]]), p1: s0(p0: [[203.0], [204.0], [205.0]], p1: [[206.0], [207.0]])), p3: [[s1(p0: s0(p0: [[208.0], [209.0], [210.0]], p1: [[211.0], [212.0]]), p1: s0(p0: [[213.0], [214.0], [215.0]], p1: [[216.0], [217.0]]))], [s1(p0: s0(p0: [[218.0], [219.0], [220.0]], p1: [[221.0], [222.0]]), p1: s0(p0: [[223.0], [224.0], [225.0]], p1: [[226.0], [227.0]]))]], p4: [[228.0], [229.0], [230.0]]), p1: [[s2(p0: [[s1(p0: s0(p0: [[231.0], [232.0], [233.0]], p1: [[234.0], [235.0]]), p1: s0(p0: [[236.0], [237.0], [238.0]], p1: [[239.0], [240.0]]))], [s1(p0: s0(p0: [[241.0], [242.0], [243.0]], p1: [[244.0], [245.0]]), p1: s0(p0: [[246.0], [247.0], [248.0]], p1: [[249.0], [250.0]]))]], p1: [s0(p0: [[251.0], [252.0], [253.0]], p1: [[254.0], [255.0]])])]]), p1: [s2(p0: [[s1(p0: s0(p0: [[256.0], [257.0], [258.0]], p1: [[259.0], [260.0]]), p1: s0(p0: [[261.0], [262.0], [263.0]], p1: [[264.0], [265.0]]))], [s1(p0: s0(p0: [[266.0], [267.0], [268.0]], p1: [[269.0], [270.0]]), p1: s0(p0: [[271.0], [272.0], [273.0]], p1: [[274.0], [275.0]]))]], p1: [s0(p0: [[276.0], [277.0], [278.0]], p1: [[279.0], [280.0]])])]), s7(p0: s5(p0: s4(p0: [[s0(p0: [[281.0], [282.0], [283.0]], p1: [[284.0], [285.0]])]], p1: s1(p0: s0(p0: [[286.0], [287.0], [288.0]], p1: [[289.0], [290.0]]), p1: s0(p0: [[291.0], [292.0], [293.0]], p1: [[294.0], [295.0]])), p2: s1(p0: s0(p0: [[296.0], [297.0], [298.0]], p1: [[299.0], [300.0]]), p1: s0(p0: [[301.0], [302.0], [303.0]], p1: [[304.0], [305.0]])), p3: [[s1(p0: s0(p0: [[306.0], [307.0], [308.0]], p1: [[309.0], [310.0]]), p1: s0(p0: [[311.0], [312.0], [313.0]], p1: [[314.0], [315.0]]))], [s1(p0: s0(p0: [[316.0], [317.0], [318.0]], p1: [[319.0], [320.0]]), p1: s0(p0: [[321.0], [322.0], [323.0]], p1: [[324.0], [325.0]]))]], p4: [[326.0], [327.0], [328.0]]), p1: [[s2(p0: [[s1(p0: s0(p0: [[329.0], [330.0], [331.0]], p1: [[332.0], [333.0]]), p1: s0(p0: [[334.0], [335.0], [336.0]], p1: [[337.0], [338.0]]))], [s1(p0: s0(p0: [[339.0], [340.0], [341.0]], p1: [[342.0], [343.0]]), p1: s0(p0: [[344.0], [345.0], [346.0]], p1: [[347.0], [348.0]]))]], p1: [s0(p0: [[349.0], [350.0], [351.0]], p1: [[352.0], [353.0]])])]]), p1: [s2(p0: [[s1(p0: s0(p0: [[354.0], [355.0], [356.0]], p1: [[357.0], [358.0]]), p1: s0(p0: [[359.0], [360.0], [361.0]], p1: [[362.0], [363.0]]))], [s1(p0: s0(p0: [[364.0], [365.0], [366.0]], p1: [[367.0], [368.0]]), p1: s0(p0: [[369.0], [370.0], [371.0]], p1: [[372.0], [373.0]]))]], p1: [s0(p0: [[374.0], [375.0], [376.0]], p1: [[377.0], [378.0]])])])]
    let v2: [s8] = [s8(p0: [[s5(p0: s4(p0: [[s0(p0: [[379.0], [380.0], [381.0]], p1: [[382.0], [383.0]])]], p1: s1(p0: s0(p0: [[384.0], [385.0], [386.0]], p1: [[387.0], [388.0]]), p1: s0(p0: [[389.0], [390.0], [391.0]], p1: [[392.0], [393.0]])), p2: s1(p0: s0(p0: [[394.0], [395.0], [396.0]], p1: [[397.0], [398.0]]), p1: s0(p0: [[399.0], [400.0], [401.0]], p1: [[402.0], [403.0]])), p3: [[s1(p0: s0(p0: [[404.0], [405.0], [406.0]], p1: [[407.0], [408.0]]), p1: s0(p0: [[409.0], [410.0], [411.0]], p1: [[412.0], [413.0]]))], [s1(p0: s0(p0: [[414.0], [415.0], [416.0]], p1: [[417.0], [418.0]]), p1: s0(p0: [[419.0], [420.0], [421.0]], p1: [[422.0], [423.0]]))]], p4: [[424.0], [425.0], [426.0]]), p1: [[s2(p0: [[s1(p0: s0(p0: [[427.0], [428.0], [429.0]], p1: [[430.0], [431.0]]), p1: s0(p0: [[432.0], [433.0], [434.0]], p1: [[435.0], [436.0]]))], [s1(p0: s0(p0: [[437.0], [438.0], [439.0]], p1: [[440.0], [441.0]]), p1: s0(p0: [[442.0], [443.0], [444.0]], p1: [[445.0], [446.0]]))]], p1: [s0(p0: [[447.0], [448.0], [449.0]], p1: [[450.0], [451.0]])])]])], [s5(p0: s4(p0: [[s0(p0: [[452.0], [453.0], [454.0]], p1: [[455.0], [456.0]])]], p1: s1(p0: s0(p0: [[457.0], [458.0], [459.0]], p1: [[460.0], [461.0]]), p1: s0(p0: [[462.0], [463.0], [464.0]], p1: [[465.0], [466.0]])), p2: s1(p0: s0(p0: [[467.0], [468.0], [469.0]], p1: [[470.0], [471.0]]), p1: s0(p0: [[472.0], [473.0], [474.0]], p1: [[475.0], [476.0]])), p3: [[s1(p0: s0(p0: [[477.0], [478.0], [479.0]], p1: [[480.0], [481.0]]), p1: s0(p0: [[482.0], [483.0], [484.0]], p1: [[485.0], [486.0]]))], [s1(p0: s0(p0: [[487.0], [488.0], [489.0]], p1: [[490.0], [491.0]]), p1: s0(p0: [[492.0], [493.0], [494.0]], p1: [[495.0], [496.0]]))]], p4: [[497.0], [498.0], [499.0]]), p1: [[s2(p0: [[s1(p0: s0(p0: [[500.0], [501.0], [502.0]], p1: [[503.0], [504.0]]), p1: s0(p0: [[505.0], [506.0], [507.0]], p1: [[508.0], [509.0]]))], [s1(p0: s0(p0: [[510.0], [511.0], [512.0]], p1: [[513.0], [514.0]]), p1: s0(p0: [[515.0], [516.0], [517.0]], p1: [[518.0], [519.0]]))]], p1: [s0(p0: [[520.0], [521.0], [522.0]], p1: [[523.0], [524.0]])])]])], [s5(p0: s4(p0: [[s0(p0: [[525.0], [526.0], [527.0]], p1: [[528.0], [529.0]])]], p1: s1(p0: s0(p0: [[530.0], [531.0], [532.0]], p1: [[533.0], [534.0]]), p1: s0(p0: [[535.0], [536.0], [537.0]], p1: [[538.0], [539.0]])), p2: s1(p0: s0(p0: [[540.0], [541.0], [542.0]], p1: [[543.0], [544.0]]), p1: s0(p0: [[545.0], [546.0], [547.0]], p1: [[548.0], [549.0]])), p3: [[s1(p0: s0(p0: [[550.0], [551.0], [552.0]], p1: [[553.0], [554.0]]), p1: s0(p0: [[555.0], [556.0], [557.0]], p1: [[558.0], [559.0]]))], [s1(p0: s0(p0: [[560.0], [561.0], [562.0]], p1: [[563.0], [564.0]]), p1: s0(p0: [[565.0], [566.0], [567.0]], p1: [[568.0], [569.0]]))]], p4: [[570.0], [571.0], [572.0]]), p1: [[s2(p0: [[s1(p0: s0(p0: [[573.0], [574.0], [575.0]], p1: [[576.0], [577.0]]), p1: s0(p0: [[578.0], [579.0], [580.0]], p1: [[581.0], [582.0]]))], [s1(p0: s0(p0: [[583.0], [584.0], [585.0]], p1: [[586.0], [587.0]]), p1: s0(p0: [[588.0], [589.0], [590.0]], p1: [[591.0], [592.0]]))]], p1: [s0(p0: [[593.0], [594.0], [595.0]], p1: [[596.0], [597.0]])])]])]], p1: s4(p0: [[s0(p0: [[598.0], [599.0], [600.0]], p1: [[601.0], [602.0]])]], p1: s1(p0: s0(p0: [[603.0], [604.0], [605.0]], p1: [[606.0], [607.0]]), p1: s0(p0: [[608.0], [609.0], [610.0]], p1: [[611.0], [612.0]])), p2: s1(p0: s0(p0: [[613.0], [614.0], [615.0]], p1: [[616.0], [617.0]]), p1: s0(p0: [[618.0], [619.0], [620.0]], p1: [[621.0], [622.0]])), p3: [[s1(p0: s0(p0: [[623.0], [624.0], [625.0]], p1: [[626.0], [627.0]]), p1: s0(p0: [[628.0], [629.0], [630.0]], p1: [[631.0], [632.0]]))], [s1(p0: s0(p0: [[633.0], [634.0], [635.0]], p1: [[636.0], [637.0]]), p1: s0(p0: [[638.0], [639.0], [640.0]], p1: [[641.0], [642.0]]))]], p4: [[643.0], [644.0], [645.0]]))]
    let v3: Double = 646.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 646.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
