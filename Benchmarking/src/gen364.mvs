  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s2 {
    var p0: s0
    var p1: s0
  } in
  struct s3 {
    var p0: s2
    var p1: [s2]
  } in
  struct s5 {
    var p0: [[s2]]
    var p1: s2
    var p2: s0
  } in
  struct s6 {
    var p0: s5
    var p1: Float
  } in
  struct s9 {
    var p0: s3
    var p1: s6
  } in
  let f5: (s6) -> s6 = (v0: s6) -> s6 {
    var v1: s6 = v0 in
    let v6: [s6] = [v0, v0] in
    let v4: s6 = v6[0] in
    let v2: Float = v0.p1 in
    let v8: s6 = v6[0] in
    v1.p1 = v2 in
    let v7: Float = v8.p1 in
    let v3: Float = v1.p1 in
    v1.p1 = v3 in
    let v12: s6 = v6[0] in
    v1.p1 = v7 in
    let v5: s6 = v6[0] in
    let v11: s5 = v5.p0 in
    v1.p0 = v11 in
    v1.p1 = v2 in
    let v15: s5 = v12.p0 in
    let v17: Float = v4.p1 in
    let v35: s6 = v6[0] in
    var v18: s6 = v0 in
    let v34: Float = v18.p1 in
    let v64: Float = v35.p1 in
    v1.p1 = v64 in
    let v32: [s5] = [v11, v11, v11, v15] in
    let v53: Float = v17 + v3 in
    var v29: Float = v53 in
    v18.p1 = v34 in
    var v56: Float = v34 in
    v18.p1 = v56 in
    v18.p1 = v64 in
    v18.p1 = v3 in
    v18.p1 = v29 in
    let v84: s5 = v32[0] in
    let v184: s6 = s6(v84, v56) in
    v184
  } in
  let noinline_f0: ([[s9]], Float) -> Float = (v0: [[s9]], v1: Float) -> Float {
    let v4: [s9] = v0[0] in
    var v5: [s9] = v4 in
    let v3: [s9] = v0[0] in
    let v11: s9 = v5[0] in
    let v7: s3 = v11.p0 in
    let v6: s2 = v7.p0 in
    let v10: s0 = v6.p0 in
    v5[0] = v11 in
    let v2: Float = v1 * v1 in
    let v22: s9 = v4[0] in
    let v8: Float = v1 / v1 in
    var v15: Float = v2 in
    var v18: Float = v1 in
    let v14: s9 = v3[0] in
    var v43: s9 = v22 in
    v5[0] = v43 in
    v43.p0 = v7 in
    var v17: Float = v15 in
    let v29: s6 = v14.p1 in
    let v39: [s6] = [v29, v29] in
    v43.p0 = v7 in
    let v37: [[Float]] = v10.p1 in
    let v135: s6 = v39[0] in
    let v55: s6 = f5(v135) in
    let v75: Float = v55.p1 in
    let v46: [Float] = v37[1] in
    v17 = v8 in
    let v82: Float = v46[0] in
    let v116: [Float] = [v8, v17, v75, v18, v75, v82, v2] in
    let v96: Float = v116[4] in
    v96
  } in
  fun loop(i: Int, v0: [[s9]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s9]] = [[s9(s3(s2(s0([[0.0]], [[1.0], [2.0]]), s0([[3.0]], [[4.0], [5.0]])), [s2(s0([[6.0]], [[7.0], [8.0]]), s0([[9.0]], [[10.0], [11.0]])), s2(s0([[12.0]], [[13.0], [14.0]]), s0([[15.0]], [[16.0], [17.0]])), s2(s0([[18.0]], [[19.0], [20.0]]), s0([[21.0]], [[22.0], [23.0]]))]), s6(s5([[s2(s0([[24.0]], [[25.0], [26.0]]), s0([[27.0]], [[28.0], [29.0]]))]], s2(s0([[30.0]], [[31.0], [32.0]]), s0([[33.0]], [[34.0], [35.0]])), s0([[36.0]], [[37.0], [38.0]])), 39.0))]] in
    let v1: Float = 40.0 in
    let initialResult: Float = 40.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()