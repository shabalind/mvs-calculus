  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: Double
    var p1: s0
  }
  struct s2 {
    var p0: [s1]
    var p1: [s1]
    var p2: [s1]
    var p3: [s0]
  }
  struct s3 {
    var p0: s1
    var p1: [s0]
  }
  struct s4 {
    var p0: s3
    var p1: s0
  }
  struct s5 {
    var p0: [s2]
    var p1: s2
  }
  struct s8 {
    var p0: s3
    var p1: [s1]
  }
  func f22(_ v0: s2) -> s2 {
    var v1: s2 = v0
    var v5: s2 = v1
    var v11: s2 = v5
    v11 = v0
    return v11
  }
  func f18(_ v0: [s2]) -> [s2] {
    let v7: s2 = v0[1]
    let v5: s2 = f22(v7)
    var v8: s2 = v5
    let v10: s2 = f22(v8)
    let v9: [s1] = v10.p0
    v8.p0 = v9
    let v11: s2 = f22(v10)
    v8.p0 = v9
    v8.p0 = v9
    let v62: s5 = s5(p0: v0, p1: v11)
    let v71: [s2] = v62.p0
    return v71
  }
  @inline(never)
  func f0(_ v0: s3, _ v1: [s2], _ v2: [s4], _ v3: Double) -> Double {
    let v9: [s2] = f18(v1)
    var v8: [s2] = v9
    var v7: Double = v3
    let v17: Double = v7 + v3
    var v13: s3 = v0
    let v14: s2 = v8[0]
    let v22: [s1] = v14.p2
    let v16: s1 = v22[0]
    let v28: [s1] = v14.p1
    v8[1] = v14
    v13.p0 = v16
    let v19: s8 = s8(p0: v0, p1: v28)
    var v15: [s1] = v28
    v13.p0 = v16
    let v64: s8 = s8(p0: v13, p1: v15)
    let v59: s1 = v0.p0
    let v48: s3 = v19.p0
    v15[0] = v59
    let v54: [s1] = v64.p1
    let v82: [s1] = [v16, v59, v59, v16, v16, v59]
    v13 = v48
    let v119: s1 = v82[5]
    var v90: [s1] = v54
    v13.p0 = v119
    let v176: Double = v7 * v17
    let v130: s1 = v90[0]
    let v213: Double = v130.p0
    v13.p0 = v59
    var v98: Double = v213
    let v171: [Double] = [v213, v17, v98, v98, v176, v213, v98]
    let v301: Double = v171[4]
    v90[0] = v119
    return v301
  }
  func benchmark() {
    let v0: s3 = s3(p0: s1(p0: 0.0, p1: s0(p0: [[1.0], [2.0], [3.0]], p1: [[4.0], [5.0]])), p1: [s0(p0: [[6.0], [7.0], [8.0]], p1: [[9.0], [10.0]])])
    let v1: [s2] = [s2(p0: [s1(p0: 11.0, p1: s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0], [16.0]])), s1(p0: 17.0, p1: s0(p0: [[18.0], [19.0], [20.0]], p1: [[21.0], [22.0]]))], p1: [s1(p0: 23.0, p1: s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0], [28.0]]))], p2: [s1(p0: 29.0, p1: s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0]]))], p3: [s0(p0: [[35.0], [36.0], [37.0]], p1: [[38.0], [39.0]]), s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0], [44.0]])]), s2(p0: [s1(p0: 45.0, p1: s0(p0: [[46.0], [47.0], [48.0]], p1: [[49.0], [50.0]])), s1(p0: 51.0, p1: s0(p0: [[52.0], [53.0], [54.0]], p1: [[55.0], [56.0]]))], p1: [s1(p0: 57.0, p1: s0(p0: [[58.0], [59.0], [60.0]], p1: [[61.0], [62.0]]))], p2: [s1(p0: 63.0, p1: s0(p0: [[64.0], [65.0], [66.0]], p1: [[67.0], [68.0]]))], p3: [s0(p0: [[69.0], [70.0], [71.0]], p1: [[72.0], [73.0]]), s0(p0: [[74.0], [75.0], [76.0]], p1: [[77.0], [78.0]])]), s2(p0: [s1(p0: 79.0, p1: s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0], [84.0]])), s1(p0: 85.0, p1: s0(p0: [[86.0], [87.0], [88.0]], p1: [[89.0], [90.0]]))], p1: [s1(p0: 91.0, p1: s0(p0: [[92.0], [93.0], [94.0]], p1: [[95.0], [96.0]]))], p2: [s1(p0: 97.0, p1: s0(p0: [[98.0], [99.0], [100.0]], p1: [[101.0], [102.0]]))], p3: [s0(p0: [[103.0], [104.0], [105.0]], p1: [[106.0], [107.0]]), s0(p0: [[108.0], [109.0], [110.0]], p1: [[111.0], [112.0]])])]
    let v2: [s4] = [s4(p0: s3(p0: s1(p0: 113.0, p1: s0(p0: [[114.0], [115.0], [116.0]], p1: [[117.0], [118.0]])), p1: [s0(p0: [[119.0], [120.0], [121.0]], p1: [[122.0], [123.0]])]), p1: s0(p0: [[124.0], [125.0], [126.0]], p1: [[127.0], [128.0]])), s4(p0: s3(p0: s1(p0: 129.0, p1: s0(p0: [[130.0], [131.0], [132.0]], p1: [[133.0], [134.0]])), p1: [s0(p0: [[135.0], [136.0], [137.0]], p1: [[138.0], [139.0]])]), p1: s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0], [144.0]]))]
    let v3: Double = 145.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 145.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
