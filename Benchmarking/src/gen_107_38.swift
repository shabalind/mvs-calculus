  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
  }
  struct s2 {
    var p0: [[s0]]
    var p1: [s1]
  }
  struct s3 {
    var p0: s2
    var p1: [[s0]]
  }
  struct s5 {
    var p0: [s0]
    var p1: [s2]
  }
  struct s6 {
    var p0: [s5]
    var p1: [[s3]]
  }
  func f117(_ v0: s1) -> s1 {
    return v0
  }
  func f101(_ v0: s1) -> s1 {
    let v2: s1 = f117(v0)
    return v2
  }
  func f85(_ v0: [s0], _ v1: [s5]) -> [s0] {
    let v174: s5 = v1[0]
    let v216: [s0] = v174.p0
    return v216
  }
  func f80(_ v0: s5, _ v1: s1) -> s1 {
    var v5: s1 = v1
    let v3: [[s0]] = v1.p1
    let v7: s1 = f117(v5)
    let v9: [[s0]] = v1.p1
    let v6: s1 = f117(v7)
    let v10: [s0] = v0.p0
    var v8: [[s0]] = v9
    v5.p1 = v9
    v5.p1 = v3
    let v32: [s0] = v3[2]
    var v26: s1 = v7
    v5.p1 = v8
    let v33: s1 = f117(v26)
    let v22: s1 = f101(v6)
    let v16: s1 = f117(v7)
    let v40: [[s0]] = v6.p1
    v8[0] = v32
    v8[2] = v10
    let v47: [[s0]] = v22.p1
    let v38: [s2] = v0.p1
    v8[2] = v32
    v5.p1 = v8
    v26.p1 = v40
    v5.p1 = v47
    let v49: [s0] = v16.p0
    var v64: [s0] = v49
    let v57: s1 = f117(v33)
    let v120: s2 = v38[0]
    let v70: [[s0]] = v120.p0
    let v39: [s0] = v70[1]
    v5.p0 = v64
    v5.p0 = v49
    let v188: s1 = f101(v57)
    v26.p0 = v64
    let v51: s1 = f117(v188)
    v8[2] = v39
    return v51
  }
  func f1(_ v0: s5, _ v1: s5) -> s5 {
    var v58: s5 = v1
    return v58
  }
  @inline(never)
  func f0(_ v0: s1, _ v1: s3, _ v2: s5, _ v3: s6, _ v4: Double) -> Double {
    let v19: [[s0]] = v1.p1
    let v7: [s5] = v3.p0
    let v6: [s0] = v19[2]
    let v5: s1 = f101(v0)
    var v11: s5 = v2
    let v9: [[s0]] = v5.p1
    let v13: s5 = f1(v11, v2)
    var v15: [[s0]] = v9
    var v10: [s0] = v6
    v15[0] = v10
    let v30: s1 = f80(v11, v0)
    let v23: s5 = f1(v2, v11)
    v11.p0 = v10
    let v35: [s0] = v15[1]
    let v12: s1 = f80(v23, v30)
    let v16: [s0] = v12.p0
    let v29: s0 = v16[0]
    v15[1] = v6
    let v34: [s0] = f85(v35, v7)
    let v21: [[Double]] = v29.p1
    let v18: [s2] = v2.p1
    v15[2] = v35
    let v52: [s2] = v13.p1
    v11.p1 = v18
    var v89: [[Double]] = v21
    let v48: s2 = v52[0]
    v11.p0 = v10
    let v38: [Double] = v89[0]
    let v80: s0 = v16[0]
    v11.p1 = v18
    v89[0] = v38
    v11.p0 = v34
    let v95: [[s0]] = v48.p0
    let v145: [s0] = v95[1]
    v15[2] = v145
    let v105: Double = v38[0]
    v15[2] = v145
    v10[0] = v80
    return v105
  }
  func benchmark() {
    let v0: s1 = s1(p0: [s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0]]), s0(p0: [[4.0], [5.0], [6.0]], p1: [[7.0]])], p1: [[s0(p0: [[8.0], [9.0], [10.0]], p1: [[11.0]])], [s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0]])], [s0(p0: [[16.0], [17.0], [18.0]], p1: [[19.0]])]])
    let v1: s3 = s3(p0: s2(p0: [[s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0]])], [s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0]])]], p1: [s1(p0: [s0(p0: [[28.0], [29.0], [30.0]], p1: [[31.0]]), s0(p0: [[32.0], [33.0], [34.0]], p1: [[35.0]])], p1: [[s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0]])], [s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0]])], [s0(p0: [[44.0], [45.0], [46.0]], p1: [[47.0]])]])]), p1: [[s0(p0: [[48.0], [49.0], [50.0]], p1: [[51.0]])], [s0(p0: [[52.0], [53.0], [54.0]], p1: [[55.0]])], [s0(p0: [[56.0], [57.0], [58.0]], p1: [[59.0]])]])
    let v2: s5 = s5(p0: [s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0]])], p1: [s2(p0: [[s0(p0: [[64.0], [65.0], [66.0]], p1: [[67.0]])], [s0(p0: [[68.0], [69.0], [70.0]], p1: [[71.0]])]], p1: [s1(p0: [s0(p0: [[72.0], [73.0], [74.0]], p1: [[75.0]]), s0(p0: [[76.0], [77.0], [78.0]], p1: [[79.0]])], p1: [[s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0]])], [s0(p0: [[84.0], [85.0], [86.0]], p1: [[87.0]])], [s0(p0: [[88.0], [89.0], [90.0]], p1: [[91.0]])]])]), s2(p0: [[s0(p0: [[92.0], [93.0], [94.0]], p1: [[95.0]])], [s0(p0: [[96.0], [97.0], [98.0]], p1: [[99.0]])]], p1: [s1(p0: [s0(p0: [[100.0], [101.0], [102.0]], p1: [[103.0]]), s0(p0: [[104.0], [105.0], [106.0]], p1: [[107.0]])], p1: [[s0(p0: [[108.0], [109.0], [110.0]], p1: [[111.0]])], [s0(p0: [[112.0], [113.0], [114.0]], p1: [[115.0]])], [s0(p0: [[116.0], [117.0], [118.0]], p1: [[119.0]])]])])])
    let v3: s6 = s6(p0: [s5(p0: [s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0]])], p1: [s2(p0: [[s0(p0: [[124.0], [125.0], [126.0]], p1: [[127.0]])], [s0(p0: [[128.0], [129.0], [130.0]], p1: [[131.0]])]], p1: [s1(p0: [s0(p0: [[132.0], [133.0], [134.0]], p1: [[135.0]]), s0(p0: [[136.0], [137.0], [138.0]], p1: [[139.0]])], p1: [[s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0]])], [s0(p0: [[144.0], [145.0], [146.0]], p1: [[147.0]])], [s0(p0: [[148.0], [149.0], [150.0]], p1: [[151.0]])]])]), s2(p0: [[s0(p0: [[152.0], [153.0], [154.0]], p1: [[155.0]])], [s0(p0: [[156.0], [157.0], [158.0]], p1: [[159.0]])]], p1: [s1(p0: [s0(p0: [[160.0], [161.0], [162.0]], p1: [[163.0]]), s0(p0: [[164.0], [165.0], [166.0]], p1: [[167.0]])], p1: [[s0(p0: [[168.0], [169.0], [170.0]], p1: [[171.0]])], [s0(p0: [[172.0], [173.0], [174.0]], p1: [[175.0]])], [s0(p0: [[176.0], [177.0], [178.0]], p1: [[179.0]])]])])])], p1: [[s3(p0: s2(p0: [[s0(p0: [[180.0], [181.0], [182.0]], p1: [[183.0]])], [s0(p0: [[184.0], [185.0], [186.0]], p1: [[187.0]])]], p1: [s1(p0: [s0(p0: [[188.0], [189.0], [190.0]], p1: [[191.0]]), s0(p0: [[192.0], [193.0], [194.0]], p1: [[195.0]])], p1: [[s0(p0: [[196.0], [197.0], [198.0]], p1: [[199.0]])], [s0(p0: [[200.0], [201.0], [202.0]], p1: [[203.0]])], [s0(p0: [[204.0], [205.0], [206.0]], p1: [[207.0]])]])]), p1: [[s0(p0: [[208.0], [209.0], [210.0]], p1: [[211.0]])], [s0(p0: [[212.0], [213.0], [214.0]], p1: [[215.0]])], [s0(p0: [[216.0], [217.0], [218.0]], p1: [[219.0]])]])], [s3(p0: s2(p0: [[s0(p0: [[220.0], [221.0], [222.0]], p1: [[223.0]])], [s0(p0: [[224.0], [225.0], [226.0]], p1: [[227.0]])]], p1: [s1(p0: [s0(p0: [[228.0], [229.0], [230.0]], p1: [[231.0]]), s0(p0: [[232.0], [233.0], [234.0]], p1: [[235.0]])], p1: [[s0(p0: [[236.0], [237.0], [238.0]], p1: [[239.0]])], [s0(p0: [[240.0], [241.0], [242.0]], p1: [[243.0]])], [s0(p0: [[244.0], [245.0], [246.0]], p1: [[247.0]])]])]), p1: [[s0(p0: [[248.0], [249.0], [250.0]], p1: [[251.0]])], [s0(p0: [[252.0], [253.0], [254.0]], p1: [[255.0]])], [s0(p0: [[256.0], [257.0], [258.0]], p1: [[259.0]])]])]])
    let v4: Double = 260.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 260.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
