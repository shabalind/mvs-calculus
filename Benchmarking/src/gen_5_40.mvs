  struct s0 {
    var p0: [[Float]]
    var p1: Float
    var p2: [[Float]]
    var p3: [[Float]]
    var p4: [[Float]]
    var p5: [[Float]]
    var p6: [[Float]]
    var p7: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  let f84: (s1) -> s1 = (v0: s1) -> s1 {
    var v5: s1 = v0 in
    let v7: [s0] = v5.p0 in
    var v4: s1 = v0 in
    let v12: s0 = v5.p1 in
    var v3: s0 = v12 in
    let v11: s0 = v0.p1 in
    let v2: s0 = v7[1] in
    let v8: [s0] = v4.p0 in
    let v16: s0 = v4.p1 in
    var v10: s1 = v4 in
    var v25: s0 = v16 in
    var v20: s1 = v5 in
    let v14: [s0] = v4.p0 in
    let v18: [s0] = v20.p0 in
    let v13: s1 = s1(v18, v25) in
    let v26: [[Float]] = v25.p4 in
    v4.p1 = v2 in
    var v29: [[Float]] = v26 in
    let v23: [[Float]] = v3.p4 in
    var v37: s1 = v4 in
    let v45: s0 = v10.p1 in
    var v28: [[Float]] = v23 in
    v10.p1 = v11 in
    v10.p0 = v8 in
    let v55: s0 = v0.p1 in
    v5.p1 = v45 in
    let v60: s0 = v14[1] in
    v3.p4 = v29 in
    let v31: s0 = v13.p1 in
    let v39: [s1] = [v4, v0, v13, v37, v20, v13, v10] in
    v37.p1 = v55 in
    let v63: s1 = v39[0] in
    v4.p0 = v7 in
    v25.p4 = v28 in
    let v83: [Float] = v23[0] in
    let v64: [s1] = [v13, v0, v63, v10] in
    var v163: [s1] = v64 in
    v163[3] = v37 in
    v37.p1 = v31 in
    v3.p6 = v23 in
    v4.p0 = v8 in
    let v96: s1 = v39[2] in
    let v178: s1 = v163[3] in
    v28[0] = v83 in
    v10.p1 = v60 in
    v163[0] = v96 in
    v178
  } in
  let f79: ([Float]) -> [Float] = (v0: [Float]) -> [Float] {
    var v5: [Float] = v0 in
    var v6: [Float] = v0 in
    let v4: Float = v5[0] in
    var v3: Float = v4 in
    var v9: Float = v4 in
    var v1: Float = v3 in
    let v2: Float = v0[0] in
    let v10: Float = v6[0] in
    v5[0] = v2 in
    v6[0] = v9 in
    var v14: [Float] = v5 in
    let v17: Float = v5[0] in
    let v30: Float = v5[0] in
    v5[0] = v9 in
    var v12: [Float] = v6 in
    v12 = v6 in
    v12[0] = v2 in
    var v16: [Float] = v14 in
    let v20: Float = v12[0] in
    v16[0] = v1 in
    let v35: Float = v6[0] in
    let v13: [Float] = [v9, v9, v4, v35, v10, v30, v35] in
    v16[0] = v17 in
    var v47: [Float] = v13 in
    let v22: Float = v47[4] in
    let v42: Float = v47[3] in
    v6[0] = v22 in
    var v50: [Float] = v16 in
    v50 = v6 in
    v6[0] = v42 in
    v47[3] = v20 in
    v50
  } in
  let f70: (s0) -> s0 = (v0: s0) -> s0 {
    let v5: [[Float]] = v0.p6 in
    let v4: [Float] = v5[0] in
    var v12: s0 = v0 in
    let v6: [Float] = f79(v4) in
    v12.p6 = v5 in
    let v8: [[Float]] = v12.p0 in
    var v16: [[Float]] = v8 in
    v12 = v0 in
    v16[0] = v6 in
    v16[0] = v6 in
    let v22: [[Float]] = v0.p7 in
    v12.p3 = v16 in
    v12.p0 = v16 in
    v12.p7 = v22 in
    v12
  } in
  let f60: (s1) -> s1 = (v0: s1) -> s1 {
    let v4: [s1] = [v0, v0, v0, v0, v0, v0] in
    let v2: s1 = v4[3] in
    let v7: s1 = f84(v0) in
    let v3: [s0] = v7.p0 in
    let v19: s0 = v3[0] in
    let v13: s1 = s1(v3, v19) in
    let v41: s0 = f70(v19) in
    var v24: [s0] = v3 in
    var v78: s1 = v13 in
    v24[1] = v41 in
    v78 = v2 in
    v78.p0 = v24 in
    v78
  } in
  let noinline_f0: ([s0], [[s1]], Float) -> Float = (v0: [s0], v1: [[s1]], v2: Float) -> Float {
    let v5: [s1] = v1[0] in
    let v6: Float = v2 - v2 in
    var v7: [s1] = v5 in
    let v13: s1 = v7[0] in
    let v20: Float = v2 * v2 in
    let v17: s0 = v13.p1 in
    let v18: s1 = f84(v13) in
    let v40: [[Float]] = v17.p4 in
    var v34: [[Float]] = v40 in
    var v42: Float = v20 in
    let v68: [Float] = v34[0] in
    var v67: [Float] = v68 in
    let v45: s1 = f60(v18) in
    var v32: [Float] = v68 in
    let v80: Float = v6 / v42 in
    v32 = v67 in
    v7[0] = v45 in
    var v94: [Float] = v32 in
    let v76: Float = v94[0] in
    v32[0] = v80 in
    let v140: Float = v67[0] in
    let v208: Float = v140 * v76 in
    v208
  } in
  fun loop(i: Int, v0: [s0], v1: [[s1]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0]], 1.0, [[2.0], [3.0]], [[4.0]], [[5.0]], [[6.0], [7.0]], [[8.0]], [[9.0], [10.0], [11.0]]), s0([[12.0]], 13.0, [[14.0], [15.0]], [[16.0]], [[17.0]], [[18.0], [19.0]], [[20.0]], [[21.0], [22.0], [23.0]]), s0([[24.0]], 25.0, [[26.0], [27.0]], [[28.0]], [[29.0]], [[30.0], [31.0]], [[32.0]], [[33.0], [34.0], [35.0]])] in
    let v1: [[s1]] = [[s1([s0([[36.0]], 37.0, [[38.0], [39.0]], [[40.0]], [[41.0]], [[42.0], [43.0]], [[44.0]], [[45.0], [46.0], [47.0]]), s0([[48.0]], 49.0, [[50.0], [51.0]], [[52.0]], [[53.0]], [[54.0], [55.0]], [[56.0]], [[57.0], [58.0], [59.0]])], s0([[60.0]], 61.0, [[62.0], [63.0]], [[64.0]], [[65.0]], [[66.0], [67.0]], [[68.0]], [[69.0], [70.0], [71.0]]))], [s1([s0([[72.0]], 73.0, [[74.0], [75.0]], [[76.0]], [[77.0]], [[78.0], [79.0]], [[80.0]], [[81.0], [82.0], [83.0]]), s0([[84.0]], 85.0, [[86.0], [87.0]], [[88.0]], [[89.0]], [[90.0], [91.0]], [[92.0]], [[93.0], [94.0], [95.0]])], s0([[96.0]], 97.0, [[98.0], [99.0]], [[100.0]], [[101.0]], [[102.0], [103.0]], [[104.0]], [[105.0], [106.0], [107.0]]))], [s1([s0([[108.0]], 109.0, [[110.0], [111.0]], [[112.0]], [[113.0]], [[114.0], [115.0]], [[116.0]], [[117.0], [118.0], [119.0]]), s0([[120.0]], 121.0, [[122.0], [123.0]], [[124.0]], [[125.0]], [[126.0], [127.0]], [[128.0]], [[129.0], [130.0], [131.0]])], s0([[132.0]], 133.0, [[134.0], [135.0]], [[136.0]], [[137.0]], [[138.0], [139.0]], [[140.0]], [[141.0], [142.0], [143.0]]))]] in
    let v2: Float = 144.0 in
    let initialResult: Float = 144.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()