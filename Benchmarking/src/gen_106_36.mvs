  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    let v6: s0 = v0.p1 in
    let v12: [[Float]] = v6.p0 in
    let v8: [Float] = v12[2] in
    let v2: Float = v8[0] in
    var v10: Float = v1 in
    let v28: [Float] = v12[2] in
    let v25: Float = v28[0] in
    let v20: Float = v10 / v25 in
    let v80: Float = v8[0] in
    v10 = v2 in
    let v152: Float = v20 / v80 in
    v152
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]), s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]])], s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]])) in
    let v1: Float = 15.0 in
    let initialResult: Float = 15.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()