  struct s0 {
    var p0: [[Float]]
    var p1: Float
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  } in
  struct s2 {
    var p0: [s1]
    var p1: s1
  } in
  struct s3 {
    var p0: [[s2]]
    var p1: s2
  } in
  struct s4 {
    var p0: s1
    var p1: [s0]
  } in
  let f5: (s4) -> s4 = (v0: s4) -> s4 {
    let v4: [s0] = v0.p1 in
    var v7: s4 = v0 in
    var v2: [s0] = v4 in
    let v1: s0 = v2[0] in
    let v9: s0 = v2[0] in
    v7.p1 = v2 in
    let v3: [[Float]] = v1.p0 in
    v7.p1 = v2 in
    var v11: s0 = v1 in
    let v13: s0 = v2[0] in
    v7.p1 = v2 in
    let v6: [[Float]] = v11.p0 in
    let v10: Float = v9.p1 in
    let v18: [Float] = v6[1] in
    let v24: [Float] = v6[0] in
    var v16: s0 = v11 in
    let v21: Float = v24[0] in
    let v15: Float = v10 + v10 in
    v11.p1 = v10 in
    let v23: [[Float]] = v16.p0 in
    var v27: s0 = v13 in
    let v14: [Float] = v3[0] in
    v27.p0 = v3 in
    var v42: s4 = v0 in
    v2[0] = v11 in
    var v20: s4 = v42 in
    let v22: s1 = v0.p0 in
    let v32: s1 = v7.p0 in
    var v53: [[Float]] = v3 in
    let v28: s1 = v7.p0 in
    let v85: s0 = v4[0] in
    var v31: [[Float]] = v23 in
    let v30: [[s0]] = v22.p0 in
    v31[0] = v18 in
    v16.p0 = v53 in
    let v25: Float = v14[0] in
    var v59: s4 = v7 in
    v42.p0 = v28 in
    var v92: [Float] = v18 in
    var v50: [[Float]] = v23 in
    let v54: [s0] = v30[0] in
    v20 = v0 in
    let v83: s1 = v20.p0 in
    v59.p0 = v32 in
    let v52: s0 = v28.p1 in
    let v58: [[Float]] = v85.p0 in
    v7.p0 = v83 in
    var v72: s1 = v28 in
    let v97: [s0] = [v85, v27, v27, v85] in
    let v45: s0 = v97[2] in
    v50 = v31 in
    v92[0] = v15 in
    let v113: Float = v21 - v25 in
    v59.p1 = v54 in
    let v44: [s0] = v30[0] in
    v72.p1 = v45 in
    let v73: Float = v52.p1 in
    let v74: s0 = v44[0] in
    let v108: [[s0]] = v72.p0 in
    v50[0] = v24 in
    let v105: s1 = s1(v108, v11) in
    let v185: [Float] = v23[0] in
    v11.p1 = v73 in
    v27 = v16 in
    v53[1] = v185 in
    let v84: [Float] = v58[1] in
    v20.p0 = v105 in
    let v143: s0 = v72.p1 in
    v16.p1 = v113 in
    v27.p0 = v50 in
    v31[0] = v92 in
    v50[1] = v92 in
    v72.p1 = v74 in
    v2[0] = v143 in
    v72.p1 = v85 in
    v50[1] = v84 in
    v59
  } in
  let f4: ([s2], s4) -> s4 = (v0: [s2], v1: s4) -> s4 {
    let v3: s4 = f5(v1) in
    var v4: s4 = v3 in
    var v8: s4 = v4 in
    let v2: s2 = v0[0] in
    let v10: s4 = f5(v8) in
    let v16: s4 = f5(v10) in
    let v27: [s0] = v16.p1 in
    var v37: [s0] = v27 in
    let v28: s1 = v2.p1 in
    let v56: [s0] = v16.p1 in
    v4.p1 = v37 in
    v4.p1 = v27 in
    v4.p0 = v28 in
    var v122: s4 = v4 in
    v8.p1 = v37 in
    v122.p1 = v56 in
    v8.p1 = v37 in
    v122
  } in
  let noinline_f0: (s3, [[s3]], [s4], Float) -> Float = (v0: s3, v1: [[s3]], v2: [s4], v3: Float) -> Float {
    var v6: Float = v3 in
    var v8: Float = v3 in
    var v7: [s4] = v2 in
    v7 = v2 in
    let v16: [[s2]] = v0.p0 in
    let v26: [s2] = v16[0] in
    var v15: [s4] = v7 in
    let v59: s4 = v7[2] in
    var v25: [s4] = v2 in
    let v24: s4 = f4(v26, v59) in
    v25[0] = v24 in
    let v35: [s0] = v24.p1 in
    v7 = v15 in
    let v49: s0 = v35[0] in
    let v85: Float = v49.p1 in
    v7 = v25 in
    let v188: Float = v8 * v85 in
    let v54: Float = v188 / v6 in
    v15[0] = v59 in
    v54
  } in
  fun loop(i: Int, v0: s3, v1: [[s3]], v2: [s4], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3([[s2([s1([[s0([[0.0], [1.0]], 2.0)]], s0([[3.0], [4.0]], 5.0)), s1([[s0([[6.0], [7.0]], 8.0)]], s0([[9.0], [10.0]], 11.0))], s1([[s0([[12.0], [13.0]], 14.0)]], s0([[15.0], [16.0]], 17.0)))], [s2([s1([[s0([[18.0], [19.0]], 20.0)]], s0([[21.0], [22.0]], 23.0)), s1([[s0([[24.0], [25.0]], 26.0)]], s0([[27.0], [28.0]], 29.0))], s1([[s0([[30.0], [31.0]], 32.0)]], s0([[33.0], [34.0]], 35.0)))]], s2([s1([[s0([[36.0], [37.0]], 38.0)]], s0([[39.0], [40.0]], 41.0)), s1([[s0([[42.0], [43.0]], 44.0)]], s0([[45.0], [46.0]], 47.0))], s1([[s0([[48.0], [49.0]], 50.0)]], s0([[51.0], [52.0]], 53.0)))) in
    let v1: [[s3]] = [[s3([[s2([s1([[s0([[54.0], [55.0]], 56.0)]], s0([[57.0], [58.0]], 59.0)), s1([[s0([[60.0], [61.0]], 62.0)]], s0([[63.0], [64.0]], 65.0))], s1([[s0([[66.0], [67.0]], 68.0)]], s0([[69.0], [70.0]], 71.0)))], [s2([s1([[s0([[72.0], [73.0]], 74.0)]], s0([[75.0], [76.0]], 77.0)), s1([[s0([[78.0], [79.0]], 80.0)]], s0([[81.0], [82.0]], 83.0))], s1([[s0([[84.0], [85.0]], 86.0)]], s0([[87.0], [88.0]], 89.0)))]], s2([s1([[s0([[90.0], [91.0]], 92.0)]], s0([[93.0], [94.0]], 95.0)), s1([[s0([[96.0], [97.0]], 98.0)]], s0([[99.0], [100.0]], 101.0))], s1([[s0([[102.0], [103.0]], 104.0)]], s0([[105.0], [106.0]], 107.0))))]] in
    let v2: [s4] = [s4(s1([[s0([[108.0], [109.0]], 110.0)]], s0([[111.0], [112.0]], 113.0)), [s0([[114.0], [115.0]], 116.0)]), s4(s1([[s0([[117.0], [118.0]], 119.0)]], s0([[120.0], [121.0]], 122.0)), [s0([[123.0], [124.0]], 125.0)]), s4(s1([[s0([[126.0], [127.0]], 128.0)]], s0([[129.0], [130.0]], 131.0)), [s0([[132.0], [133.0]], 134.0)])] in
    let v3: Float = 135.0 in
    let initialResult: Float = 135.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()