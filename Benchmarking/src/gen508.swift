  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s4 {
    var p0: s1
    var p1: Double
  }
  struct s8 {
    var p0: s0
    var p1: [[s1]]
  }
  @inline(never)
  func f0(_ v0: [[s8]], _ v1: Double, _ v2: s4) -> Double {
    let v4: Double = v1 - v1
    let v9: Double = v2.p1
    let v3: Double = v2.p1
    let v19: Double = v2.p1
    let v14: [Double] = [v3, v1, v9, v3, v19]
    var v15: [Double] = v14
    var v30: [Double] = v15
    v15[2] = v3
    v30[3] = v19
    v30[4] = v4
    let v237: Double = v30[1]
    return v237
  }
  func benchmark() {
    let v0: [[s8]] = [[s8(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0]], p2: [[3.0], [4.0], [5.0]]), p1: [[s1(p0: s0(p0: [[6.0], [7.0]], p1: [[8.0]], p2: [[9.0], [10.0], [11.0]]), p1: [s0(p0: [[12.0], [13.0]], p1: [[14.0]], p2: [[15.0], [16.0], [17.0]]), s0(p0: [[18.0], [19.0]], p1: [[20.0]], p2: [[21.0], [22.0], [23.0]]), s0(p0: [[24.0], [25.0]], p1: [[26.0]], p2: [[27.0], [28.0], [29.0]])])], [s1(p0: s0(p0: [[30.0], [31.0]], p1: [[32.0]], p2: [[33.0], [34.0], [35.0]]), p1: [s0(p0: [[36.0], [37.0]], p1: [[38.0]], p2: [[39.0], [40.0], [41.0]]), s0(p0: [[42.0], [43.0]], p1: [[44.0]], p2: [[45.0], [46.0], [47.0]]), s0(p0: [[48.0], [49.0]], p1: [[50.0]], p2: [[51.0], [52.0], [53.0]])])], [s1(p0: s0(p0: [[54.0], [55.0]], p1: [[56.0]], p2: [[57.0], [58.0], [59.0]]), p1: [s0(p0: [[60.0], [61.0]], p1: [[62.0]], p2: [[63.0], [64.0], [65.0]]), s0(p0: [[66.0], [67.0]], p1: [[68.0]], p2: [[69.0], [70.0], [71.0]]), s0(p0: [[72.0], [73.0]], p1: [[74.0]], p2: [[75.0], [76.0], [77.0]])])]])], [s8(p0: s0(p0: [[78.0], [79.0]], p1: [[80.0]], p2: [[81.0], [82.0], [83.0]]), p1: [[s1(p0: s0(p0: [[84.0], [85.0]], p1: [[86.0]], p2: [[87.0], [88.0], [89.0]]), p1: [s0(p0: [[90.0], [91.0]], p1: [[92.0]], p2: [[93.0], [94.0], [95.0]]), s0(p0: [[96.0], [97.0]], p1: [[98.0]], p2: [[99.0], [100.0], [101.0]]), s0(p0: [[102.0], [103.0]], p1: [[104.0]], p2: [[105.0], [106.0], [107.0]])])], [s1(p0: s0(p0: [[108.0], [109.0]], p1: [[110.0]], p2: [[111.0], [112.0], [113.0]]), p1: [s0(p0: [[114.0], [115.0]], p1: [[116.0]], p2: [[117.0], [118.0], [119.0]]), s0(p0: [[120.0], [121.0]], p1: [[122.0]], p2: [[123.0], [124.0], [125.0]]), s0(p0: [[126.0], [127.0]], p1: [[128.0]], p2: [[129.0], [130.0], [131.0]])])], [s1(p0: s0(p0: [[132.0], [133.0]], p1: [[134.0]], p2: [[135.0], [136.0], [137.0]]), p1: [s0(p0: [[138.0], [139.0]], p1: [[140.0]], p2: [[141.0], [142.0], [143.0]]), s0(p0: [[144.0], [145.0]], p1: [[146.0]], p2: [[147.0], [148.0], [149.0]]), s0(p0: [[150.0], [151.0]], p1: [[152.0]], p2: [[153.0], [154.0], [155.0]])])]])]]
    let v1: Double = 156.0
    let v2: s4 = s4(p0: s1(p0: s0(p0: [[157.0], [158.0]], p1: [[159.0]], p2: [[160.0], [161.0], [162.0]]), p1: [s0(p0: [[163.0], [164.0]], p1: [[165.0]], p2: [[166.0], [167.0], [168.0]]), s0(p0: [[169.0], [170.0]], p1: [[171.0]], p2: [[172.0], [173.0], [174.0]]), s0(p0: [[175.0], [176.0]], p1: [[177.0]], p2: [[178.0], [179.0], [180.0]])]), p1: 181.0)
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = StructValue(Name(str='s4', ty=None), [StructValue(Name(str='s1', ty=None), [StructValue(Name(str='s0', ty=None), [[[157.0], [158.0]], [[159.0]], [[160.0], [161.0], [162.0]]]), [StructValue(Name(str='s0', ty=None), [[[163.0], [164.0]], [[165.0]], [[166.0], [167.0], [168.0]]]), StructValue(Name(str='s0', ty=None), [[[169.0], [170.0]], [[171.0]], [[172.0], [173.0], [174.0]]]), StructValue(Name(str='s0', ty=None), [[[175.0], [176.0]], [[177.0]], [[178.0], [179.0], [180.0]]])]]), 181.0])
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
