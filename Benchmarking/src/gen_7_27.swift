  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s3 {
    var p0: [s1]
    var p1: [s0]
  }
  struct s4 {
    var p0: s3
    var p1: s3
  }
  struct s10 {
    var p0: s1
    var p1: [[s4]]
  }
  @inline(never)
  func f0(_ v0: [s10], _ v1: Double) -> Double {
    var v7: Double = v1
    let v3: Double = v7 + v1
    var v9: Double = v7
    var v10: Double = v9
    var v113: Double = v1
    var v44: Double = v10
    var v99: Double = v3
    let v95: Double = v44 * v10
    v44 = v1
    v44 = v99
    v9 = v113
    let v157: Double = v95 * v113
    return v157
  }
  func benchmark() {
    let v0: [s10] = [s10(p0: s1(p0: [s0(p0: [[0.0]], p1: [[1.0], [2.0], [3.0]], p2: [[4.0], [5.0]]), s0(p0: [[6.0]], p1: [[7.0], [8.0], [9.0]], p2: [[10.0], [11.0]]), s0(p0: [[12.0]], p1: [[13.0], [14.0], [15.0]], p2: [[16.0], [17.0]])], p1: [s0(p0: [[18.0]], p1: [[19.0], [20.0], [21.0]], p2: [[22.0], [23.0]])]), p1: [[s4(p0: s3(p0: [s1(p0: [s0(p0: [[24.0]], p1: [[25.0], [26.0], [27.0]], p2: [[28.0], [29.0]]), s0(p0: [[30.0]], p1: [[31.0], [32.0], [33.0]], p2: [[34.0], [35.0]]), s0(p0: [[36.0]], p1: [[37.0], [38.0], [39.0]], p2: [[40.0], [41.0]])], p1: [s0(p0: [[42.0]], p1: [[43.0], [44.0], [45.0]], p2: [[46.0], [47.0]])])], p1: [s0(p0: [[48.0]], p1: [[49.0], [50.0], [51.0]], p2: [[52.0], [53.0]]), s0(p0: [[54.0]], p1: [[55.0], [56.0], [57.0]], p2: [[58.0], [59.0]])]), p1: s3(p0: [s1(p0: [s0(p0: [[60.0]], p1: [[61.0], [62.0], [63.0]], p2: [[64.0], [65.0]]), s0(p0: [[66.0]], p1: [[67.0], [68.0], [69.0]], p2: [[70.0], [71.0]]), s0(p0: [[72.0]], p1: [[73.0], [74.0], [75.0]], p2: [[76.0], [77.0]])], p1: [s0(p0: [[78.0]], p1: [[79.0], [80.0], [81.0]], p2: [[82.0], [83.0]])])], p1: [s0(p0: [[84.0]], p1: [[85.0], [86.0], [87.0]], p2: [[88.0], [89.0]]), s0(p0: [[90.0]], p1: [[91.0], [92.0], [93.0]], p2: [[94.0], [95.0]])]))], [s4(p0: s3(p0: [s1(p0: [s0(p0: [[96.0]], p1: [[97.0], [98.0], [99.0]], p2: [[100.0], [101.0]]), s0(p0: [[102.0]], p1: [[103.0], [104.0], [105.0]], p2: [[106.0], [107.0]]), s0(p0: [[108.0]], p1: [[109.0], [110.0], [111.0]], p2: [[112.0], [113.0]])], p1: [s0(p0: [[114.0]], p1: [[115.0], [116.0], [117.0]], p2: [[118.0], [119.0]])])], p1: [s0(p0: [[120.0]], p1: [[121.0], [122.0], [123.0]], p2: [[124.0], [125.0]]), s0(p0: [[126.0]], p1: [[127.0], [128.0], [129.0]], p2: [[130.0], [131.0]])]), p1: s3(p0: [s1(p0: [s0(p0: [[132.0]], p1: [[133.0], [134.0], [135.0]], p2: [[136.0], [137.0]]), s0(p0: [[138.0]], p1: [[139.0], [140.0], [141.0]], p2: [[142.0], [143.0]]), s0(p0: [[144.0]], p1: [[145.0], [146.0], [147.0]], p2: [[148.0], [149.0]])], p1: [s0(p0: [[150.0]], p1: [[151.0], [152.0], [153.0]], p2: [[154.0], [155.0]])])], p1: [s0(p0: [[156.0]], p1: [[157.0], [158.0], [159.0]], p2: [[160.0], [161.0]]), s0(p0: [[162.0]], p1: [[163.0], [164.0], [165.0]], p2: [[166.0], [167.0]])]))], [s4(p0: s3(p0: [s1(p0: [s0(p0: [[168.0]], p1: [[169.0], [170.0], [171.0]], p2: [[172.0], [173.0]]), s0(p0: [[174.0]], p1: [[175.0], [176.0], [177.0]], p2: [[178.0], [179.0]]), s0(p0: [[180.0]], p1: [[181.0], [182.0], [183.0]], p2: [[184.0], [185.0]])], p1: [s0(p0: [[186.0]], p1: [[187.0], [188.0], [189.0]], p2: [[190.0], [191.0]])])], p1: [s0(p0: [[192.0]], p1: [[193.0], [194.0], [195.0]], p2: [[196.0], [197.0]]), s0(p0: [[198.0]], p1: [[199.0], [200.0], [201.0]], p2: [[202.0], [203.0]])]), p1: s3(p0: [s1(p0: [s0(p0: [[204.0]], p1: [[205.0], [206.0], [207.0]], p2: [[208.0], [209.0]]), s0(p0: [[210.0]], p1: [[211.0], [212.0], [213.0]], p2: [[214.0], [215.0]]), s0(p0: [[216.0]], p1: [[217.0], [218.0], [219.0]], p2: [[220.0], [221.0]])], p1: [s0(p0: [[222.0]], p1: [[223.0], [224.0], [225.0]], p2: [[226.0], [227.0]])])], p1: [s0(p0: [[228.0]], p1: [[229.0], [230.0], [231.0]], p2: [[232.0], [233.0]]), s0(p0: [[234.0]], p1: [[235.0], [236.0], [237.0]], p2: [[238.0], [239.0]])]))]]), s10(p0: s1(p0: [s0(p0: [[240.0]], p1: [[241.0], [242.0], [243.0]], p2: [[244.0], [245.0]]), s0(p0: [[246.0]], p1: [[247.0], [248.0], [249.0]], p2: [[250.0], [251.0]]), s0(p0: [[252.0]], p1: [[253.0], [254.0], [255.0]], p2: [[256.0], [257.0]])], p1: [s0(p0: [[258.0]], p1: [[259.0], [260.0], [261.0]], p2: [[262.0], [263.0]])]), p1: [[s4(p0: s3(p0: [s1(p0: [s0(p0: [[264.0]], p1: [[265.0], [266.0], [267.0]], p2: [[268.0], [269.0]]), s0(p0: [[270.0]], p1: [[271.0], [272.0], [273.0]], p2: [[274.0], [275.0]]), s0(p0: [[276.0]], p1: [[277.0], [278.0], [279.0]], p2: [[280.0], [281.0]])], p1: [s0(p0: [[282.0]], p1: [[283.0], [284.0], [285.0]], p2: [[286.0], [287.0]])])], p1: [s0(p0: [[288.0]], p1: [[289.0], [290.0], [291.0]], p2: [[292.0], [293.0]]), s0(p0: [[294.0]], p1: [[295.0], [296.0], [297.0]], p2: [[298.0], [299.0]])]), p1: s3(p0: [s1(p0: [s0(p0: [[300.0]], p1: [[301.0], [302.0], [303.0]], p2: [[304.0], [305.0]]), s0(p0: [[306.0]], p1: [[307.0], [308.0], [309.0]], p2: [[310.0], [311.0]]), s0(p0: [[312.0]], p1: [[313.0], [314.0], [315.0]], p2: [[316.0], [317.0]])], p1: [s0(p0: [[318.0]], p1: [[319.0], [320.0], [321.0]], p2: [[322.0], [323.0]])])], p1: [s0(p0: [[324.0]], p1: [[325.0], [326.0], [327.0]], p2: [[328.0], [329.0]]), s0(p0: [[330.0]], p1: [[331.0], [332.0], [333.0]], p2: [[334.0], [335.0]])]))], [s4(p0: s3(p0: [s1(p0: [s0(p0: [[336.0]], p1: [[337.0], [338.0], [339.0]], p2: [[340.0], [341.0]]), s0(p0: [[342.0]], p1: [[343.0], [344.0], [345.0]], p2: [[346.0], [347.0]]), s0(p0: [[348.0]], p1: [[349.0], [350.0], [351.0]], p2: [[352.0], [353.0]])], p1: [s0(p0: [[354.0]], p1: [[355.0], [356.0], [357.0]], p2: [[358.0], [359.0]])])], p1: [s0(p0: [[360.0]], p1: [[361.0], [362.0], [363.0]], p2: [[364.0], [365.0]]), s0(p0: [[366.0]], p1: [[367.0], [368.0], [369.0]], p2: [[370.0], [371.0]])]), p1: s3(p0: [s1(p0: [s0(p0: [[372.0]], p1: [[373.0], [374.0], [375.0]], p2: [[376.0], [377.0]]), s0(p0: [[378.0]], p1: [[379.0], [380.0], [381.0]], p2: [[382.0], [383.0]]), s0(p0: [[384.0]], p1: [[385.0], [386.0], [387.0]], p2: [[388.0], [389.0]])], p1: [s0(p0: [[390.0]], p1: [[391.0], [392.0], [393.0]], p2: [[394.0], [395.0]])])], p1: [s0(p0: [[396.0]], p1: [[397.0], [398.0], [399.0]], p2: [[400.0], [401.0]]), s0(p0: [[402.0]], p1: [[403.0], [404.0], [405.0]], p2: [[406.0], [407.0]])]))], [s4(p0: s3(p0: [s1(p0: [s0(p0: [[408.0]], p1: [[409.0], [410.0], [411.0]], p2: [[412.0], [413.0]]), s0(p0: [[414.0]], p1: [[415.0], [416.0], [417.0]], p2: [[418.0], [419.0]]), s0(p0: [[420.0]], p1: [[421.0], [422.0], [423.0]], p2: [[424.0], [425.0]])], p1: [s0(p0: [[426.0]], p1: [[427.0], [428.0], [429.0]], p2: [[430.0], [431.0]])])], p1: [s0(p0: [[432.0]], p1: [[433.0], [434.0], [435.0]], p2: [[436.0], [437.0]]), s0(p0: [[438.0]], p1: [[439.0], [440.0], [441.0]], p2: [[442.0], [443.0]])]), p1: s3(p0: [s1(p0: [s0(p0: [[444.0]], p1: [[445.0], [446.0], [447.0]], p2: [[448.0], [449.0]]), s0(p0: [[450.0]], p1: [[451.0], [452.0], [453.0]], p2: [[454.0], [455.0]]), s0(p0: [[456.0]], p1: [[457.0], [458.0], [459.0]], p2: [[460.0], [461.0]])], p1: [s0(p0: [[462.0]], p1: [[463.0], [464.0], [465.0]], p2: [[466.0], [467.0]])])], p1: [s0(p0: [[468.0]], p1: [[469.0], [470.0], [471.0]], p2: [[472.0], [473.0]]), s0(p0: [[474.0]], p1: [[475.0], [476.0], [477.0]], p2: [[478.0], [479.0]])]))]]), s10(p0: s1(p0: [s0(p0: [[480.0]], p1: [[481.0], [482.0], [483.0]], p2: [[484.0], [485.0]]), s0(p0: [[486.0]], p1: [[487.0], [488.0], [489.0]], p2: [[490.0], [491.0]]), s0(p0: [[492.0]], p1: [[493.0], [494.0], [495.0]], p2: [[496.0], [497.0]])], p1: [s0(p0: [[498.0]], p1: [[499.0], [500.0], [501.0]], p2: [[502.0], [503.0]])]), p1: [[s4(p0: s3(p0: [s1(p0: [s0(p0: [[504.0]], p1: [[505.0], [506.0], [507.0]], p2: [[508.0], [509.0]]), s0(p0: [[510.0]], p1: [[511.0], [512.0], [513.0]], p2: [[514.0], [515.0]]), s0(p0: [[516.0]], p1: [[517.0], [518.0], [519.0]], p2: [[520.0], [521.0]])], p1: [s0(p0: [[522.0]], p1: [[523.0], [524.0], [525.0]], p2: [[526.0], [527.0]])])], p1: [s0(p0: [[528.0]], p1: [[529.0], [530.0], [531.0]], p2: [[532.0], [533.0]]), s0(p0: [[534.0]], p1: [[535.0], [536.0], [537.0]], p2: [[538.0], [539.0]])]), p1: s3(p0: [s1(p0: [s0(p0: [[540.0]], p1: [[541.0], [542.0], [543.0]], p2: [[544.0], [545.0]]), s0(p0: [[546.0]], p1: [[547.0], [548.0], [549.0]], p2: [[550.0], [551.0]]), s0(p0: [[552.0]], p1: [[553.0], [554.0], [555.0]], p2: [[556.0], [557.0]])], p1: [s0(p0: [[558.0]], p1: [[559.0], [560.0], [561.0]], p2: [[562.0], [563.0]])])], p1: [s0(p0: [[564.0]], p1: [[565.0], [566.0], [567.0]], p2: [[568.0], [569.0]]), s0(p0: [[570.0]], p1: [[571.0], [572.0], [573.0]], p2: [[574.0], [575.0]])]))], [s4(p0: s3(p0: [s1(p0: [s0(p0: [[576.0]], p1: [[577.0], [578.0], [579.0]], p2: [[580.0], [581.0]]), s0(p0: [[582.0]], p1: [[583.0], [584.0], [585.0]], p2: [[586.0], [587.0]]), s0(p0: [[588.0]], p1: [[589.0], [590.0], [591.0]], p2: [[592.0], [593.0]])], p1: [s0(p0: [[594.0]], p1: [[595.0], [596.0], [597.0]], p2: [[598.0], [599.0]])])], p1: [s0(p0: [[600.0]], p1: [[601.0], [602.0], [603.0]], p2: [[604.0], [605.0]]), s0(p0: [[606.0]], p1: [[607.0], [608.0], [609.0]], p2: [[610.0], [611.0]])]), p1: s3(p0: [s1(p0: [s0(p0: [[612.0]], p1: [[613.0], [614.0], [615.0]], p2: [[616.0], [617.0]]), s0(p0: [[618.0]], p1: [[619.0], [620.0], [621.0]], p2: [[622.0], [623.0]]), s0(p0: [[624.0]], p1: [[625.0], [626.0], [627.0]], p2: [[628.0], [629.0]])], p1: [s0(p0: [[630.0]], p1: [[631.0], [632.0], [633.0]], p2: [[634.0], [635.0]])])], p1: [s0(p0: [[636.0]], p1: [[637.0], [638.0], [639.0]], p2: [[640.0], [641.0]]), s0(p0: [[642.0]], p1: [[643.0], [644.0], [645.0]], p2: [[646.0], [647.0]])]))], [s4(p0: s3(p0: [s1(p0: [s0(p0: [[648.0]], p1: [[649.0], [650.0], [651.0]], p2: [[652.0], [653.0]]), s0(p0: [[654.0]], p1: [[655.0], [656.0], [657.0]], p2: [[658.0], [659.0]]), s0(p0: [[660.0]], p1: [[661.0], [662.0], [663.0]], p2: [[664.0], [665.0]])], p1: [s0(p0: [[666.0]], p1: [[667.0], [668.0], [669.0]], p2: [[670.0], [671.0]])])], p1: [s0(p0: [[672.0]], p1: [[673.0], [674.0], [675.0]], p2: [[676.0], [677.0]]), s0(p0: [[678.0]], p1: [[679.0], [680.0], [681.0]], p2: [[682.0], [683.0]])]), p1: s3(p0: [s1(p0: [s0(p0: [[684.0]], p1: [[685.0], [686.0], [687.0]], p2: [[688.0], [689.0]]), s0(p0: [[690.0]], p1: [[691.0], [692.0], [693.0]], p2: [[694.0], [695.0]]), s0(p0: [[696.0]], p1: [[697.0], [698.0], [699.0]], p2: [[700.0], [701.0]])], p1: [s0(p0: [[702.0]], p1: [[703.0], [704.0], [705.0]], p2: [[706.0], [707.0]])])], p1: [s0(p0: [[708.0]], p1: [[709.0], [710.0], [711.0]], p2: [[712.0], [713.0]]), s0(p0: [[714.0]], p1: [[715.0], [716.0], [717.0]], p2: [[718.0], [719.0]])]))]])]
    let v1: Double = 720.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 720.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
