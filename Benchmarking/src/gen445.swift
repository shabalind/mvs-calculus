  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  }
  struct s3 {
    var p0: [s0]
    var p1: s1
  }
  struct s4 {
    var p0: [s1]
    var p1: s0
  }
  struct s13 {
    var p0: [[s1]]
    var p1: [[s1]]
  }
  func f32(_ v0: s1) -> s1 {
    var v3: s1 = v0
    var v1: s1 = v3
    let v7: [[s0]] = v3.p1
    let v5: [[s0]] = v3.p1
    let v9: [s0] = v7[0]
    let v2: s0 = v9[0]
    v1.p0 = v2
    var v6: s1 = v0
    var v16: s0 = v2
    v1.p1 = v5
    var v15: [s0] = v9
    var v11: s0 = v2
    v3.p0 = v16
    v15[0] = v11
    let v12: s3 = s3(p0: v15, p1: v6)
    v15[0] = v11
    v15[0] = v11
    v15[0] = v2
    v6.p0 = v2
    var v40: [[s0]] = v7
    var v54: s3 = v12
    v40[0] = v9
    v1.p1 = v5
    let v58: s1 = v54.p1
    var v48: s3 = v12
    v3.p1 = v5
    v6.p1 = v40
    v40[2] = v9
    v15[0] = v11
    v1 = v58
    var v77: s1 = v1
    v48.p1 = v77
    v77.p1 = v5
    let v87: [[Double]] = v16.p1
    v3 = v58
    v16.p1 = v87
    let v166: s1 = v48.p1
    return v166
  }
  func f30(_ v0: s1) -> s1 {
    let v2: s1 = f32(v0)
    let v8: s1 = f32(v2)
    let v17: s1 = f32(v8)
    return v17
  }
  @inline(never)
  func f0(_ v0: s3, _ v1: s4, _ v2: [s13], _ v3: Double) -> Double {
    let v6: s1 = v0.p1
    let v5: s1 = f30(v6)
    let v10: s1 = f30(v5)
    let v11: s0 = v10.p0
    let v35: [[Double]] = v11.p1
    let v19: [Double] = v35[0]
    let v43: [Double] = v35[1]
    let v179: [[Double]] = [v19, v19, v43, v19]
    let v180: [Double] = v179[0]
    let v150: Double = v180[0]
    return v150
  }
  func benchmark() {
    let v0: s3 = s3(p0: [s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0], [4.0]])], p1: s1(p0: s0(p0: [[5.0], [6.0]], p1: [[7.0], [8.0], [9.0]]), p1: [[s0(p0: [[10.0], [11.0]], p1: [[12.0], [13.0], [14.0]])], [s0(p0: [[15.0], [16.0]], p1: [[17.0], [18.0], [19.0]])], [s0(p0: [[20.0], [21.0]], p1: [[22.0], [23.0], [24.0]])]]))
    let v1: s4 = s4(p0: [s1(p0: s0(p0: [[25.0], [26.0]], p1: [[27.0], [28.0], [29.0]]), p1: [[s0(p0: [[30.0], [31.0]], p1: [[32.0], [33.0], [34.0]])], [s0(p0: [[35.0], [36.0]], p1: [[37.0], [38.0], [39.0]])], [s0(p0: [[40.0], [41.0]], p1: [[42.0], [43.0], [44.0]])]]), s1(p0: s0(p0: [[45.0], [46.0]], p1: [[47.0], [48.0], [49.0]]), p1: [[s0(p0: [[50.0], [51.0]], p1: [[52.0], [53.0], [54.0]])], [s0(p0: [[55.0], [56.0]], p1: [[57.0], [58.0], [59.0]])], [s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0], [64.0]])]]), s1(p0: s0(p0: [[65.0], [66.0]], p1: [[67.0], [68.0], [69.0]]), p1: [[s0(p0: [[70.0], [71.0]], p1: [[72.0], [73.0], [74.0]])], [s0(p0: [[75.0], [76.0]], p1: [[77.0], [78.0], [79.0]])], [s0(p0: [[80.0], [81.0]], p1: [[82.0], [83.0], [84.0]])]])], p1: s0(p0: [[85.0], [86.0]], p1: [[87.0], [88.0], [89.0]]))
    let v2: [s13] = [s13(p0: [[s1(p0: s0(p0: [[90.0], [91.0]], p1: [[92.0], [93.0], [94.0]]), p1: [[s0(p0: [[95.0], [96.0]], p1: [[97.0], [98.0], [99.0]])], [s0(p0: [[100.0], [101.0]], p1: [[102.0], [103.0], [104.0]])], [s0(p0: [[105.0], [106.0]], p1: [[107.0], [108.0], [109.0]])]])]], p1: [[s1(p0: s0(p0: [[110.0], [111.0]], p1: [[112.0], [113.0], [114.0]]), p1: [[s0(p0: [[115.0], [116.0]], p1: [[117.0], [118.0], [119.0]])], [s0(p0: [[120.0], [121.0]], p1: [[122.0], [123.0], [124.0]])], [s0(p0: [[125.0], [126.0]], p1: [[127.0], [128.0], [129.0]])]])]])]
    let v3: Double = 130.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 130.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
