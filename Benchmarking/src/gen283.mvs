  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let f32: ([Float]) -> [Float] = (v0: [Float]) -> [Float] {
    let v5: Float = v0[0] in
    var v1: Float = v5 in
    var v2: Float = v1 in
    var v4: [Float] = v0 in
    var v6: [Float] = v0 in
    var v7: Float = v1 in
    let v8: Float = v2 + v7 in
    v6[0] = v5 in
    var v11: [Float] = v0 in
    var v12: [Float] = v6 in
    v12[0] = v7 in
    v4[0] = v8 in
    var v14: Float = v8 in
    var v13: [Float] = v4 in
    var v18: [Float] = v12 in
    let v19: Float = v11[0] in
    let v49: Float = v4[0] in
    let v16: Float = v6[0] in
    let v38: Float = v13[0] in
    let v25: Float = v18[0] in
    var v53: Float = v14 in
    let v20: [[Float]] = [v12] in
    let v29: [Float] = v20[0] in
    let v31: [Float] = v20[0] in
    var v30: [[Float]] = v20 in
    var v60: [Float] = v18 in
    var v44: [[Float]] = v30 in
    var v34: [[Float]] = v44 in
    v18[0] = v38 in
    var v58: [[Float]] = v30 in
    v2 = v19 in
    var v28: [[Float]] = v58 in
    v60[0] = v49 in
    v30[0] = v4 in
    let v50: [Float] = v28[0] in
    let v43: [Float] = v44[0] in
    v11[0] = v25 in
    let v46: [Float] = v34[0] in
    var v68: [[Float]] = v34 in
    var v77: [Float] = v50 in
    v34[0] = v77 in
    let v103: [Float] = v68[0] in
    v34[0] = v46 in
    v6[0] = v2 in
    v60[0] = v49 in
    let v112: [Float] = v58[0] in
    let v136: Float = v103[0] in
    let v41: Float = v112[0] in
    v58[0] = v46 in
    let v96: Float = v60[0] in
    v18[0] = v96 in
    v12[0] = v41 in
    let v100: [[Float]] = [v46, v12, v31, v6, v29, v11] in
    var v80: [[Float]] = v100 in
    v30[0] = v29 in
    v80[1] = v43 in
    v80[4] = v13 in
    let v94: [Float] = v80[0] in
    v12[0] = v16 in
    v18[0] = v5 in
    v53 = v136 in
    var v79: [Float] = v46 in
    v4[0] = v53 in
    v79 = v94 in
    v79
  } in
  let noinline_f0: ([s0], Float) -> Float = (v0: [s0], v1: Float) -> Float {
    let v3: [Float] = [v1, v1, v1, v1, v1] in
    let v5: s0 = v0[1] in
    let v7: [[Float]] = v5.p0 in
    let v2: [Float] = v7[0] in
    var v8: [Float] = v2 in
    let v21: Float = v2[0] in
    var v11: Float = v21 in
    var v10: [Float] = v8 in
    var v13: Float = v11 in
    v10[0] = v11 in
    let v17: Float = v3[1] in
    let v28: [Float] = f32(v10) in
    v8[0] = v17 in
    v8[0] = v11 in
    var v58: Float = v1 in
    let v40: Float = v13 + v58 in
    v8[0] = v40 in
    let v62: [Float] = f32(v28) in
    let v55: Float = v62[0] in
    v8 = v28 in
    v55
  } in
  fun loop(i: Int, v0: [s0], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0]], [[1.0], [2.0], [3.0]]), s0([[4.0]], [[5.0], [6.0], [7.0]]), s0([[8.0]], [[9.0], [10.0], [11.0]])] in
    let v1: Float = 12.0 in
    let initialResult: Float = 12.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()