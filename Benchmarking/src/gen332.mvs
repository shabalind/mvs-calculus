  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: [s1]
    var p1: s1
  } in
  struct s3 {
    var p0: s2
    var p1: s0
  } in
  let f97: (s2) -> s2 = (v0: s2) -> s2 {
    let v8: [s2] = [v0, v0] in
    let v11: s2 = v8[0] in
    v11
  } in
  let f92: (s2) -> s2 = (v0: s2) -> s2 {
    let v6: s2 = f97(v0) in
    let v15: s2 = f97(v6) in
    let v46: [s2] = [v15, v15] in
    let v44: s2 = v46[1] in
    let v83: s2 = f97(v44) in
    let v136: s2 = f97(v83) in
    v136
  } in
  let f68: (Float) -> Float = (v0: Float) -> Float {
    let v7: Float = v0 / v0 in
    var v4: Float = v0 in
    let v6: [Float] = [v7] in
    var v2: [Float] = v6 in
    let v1: Float = v6[0] in
    let v5: Float = v2[0] in
    v2[0] = v4 in
    let v9: Float = v2[0] in
    let v8: [Float] = [v5, v0] in
    v2[0] = v7 in
    let v18: Float = v2[0] in
    v2[0] = v1 in
    var v10: [Float] = v8 in
    v10[1] = v9 in
    let v16: Float = v10[0] in
    v4 = v5 in
    v2[0] = v18 in
    var v42: Float = v16 in
    v42
  } in
  let f48: (s2) -> s2 = (v0: s2) -> s2 {
    let v1: [s1] = v0.p0 in
    let v5: s1 = v0.p1 in
    let v7: s2 = s2(v1, v5) in
    var v6: [s1] = v1 in
    let v3: s1 = v1[0] in
    var v4: s2 = v7 in
    v4.p0 = v6 in
    let v22: s1 = v1[0] in
    var v14: s1 = v22 in
    v6[0] = v22 in
    let v18: s1 = v1[0] in
    let v15: [[s1]] = [v1] in
    v6[0] = v14 in
    let v16: s0 = v18.p0 in
    let v28: [s1] = v15[0] in
    let v20: [s1] = v4.p0 in
    v4.p1 = v3 in
    let v38: s1 = v28[0] in
    v6 = v20 in
    let v40: s2 = s2(v6, v38) in
    v14.p0 = v16 in
    let v37: s0 = v22.p0 in
    v6[0] = v18 in
    let v81: s3 = s3(v40, v37) in
    let v148: s2 = v81.p0 in
    let v91: s2 = f92(v148) in
    v91
  } in
  let noinline_f0: (s2, Float) -> Float = (v0: s2, v1: Float) -> Float {
    let v6: [s1] = v0.p0 in
    var v4: [s1] = v6 in
    let v5: s1 = v4[1] in
    var v3: s2 = v0 in
    v3.p1 = v5 in
    let v8: s1 = v0.p1 in
    let v9: [s1] = v3.p0 in
    let v2: s2 = f48(v0) in
    let v17: s2 = f97(v0) in
    v4[0] = v5 in
    let v11: s1 = v2.p1 in
    v4[0] = v11 in
    let v19: [s1] = v17.p0 in
    v3.p1 = v5 in
    v4 = v19 in
    let v27: [s0] = v5.p1 in
    let v36: s0 = v27[2] in
    let v23: [[Float]] = v36.p1 in
    v3.p1 = v5 in
    v3.p1 = v8 in
    v3 = v17 in
    v3.p0 = v9 in
    let v76: [Float] = v23[0] in
    v4 = v9 in
    v4 = v6 in
    let v211: Float = v76[0] in
    var v98: Float = v211 in
    v4[0] = v11 in
    let v191: Float = f68(v98) in
    v191
  } in
  fun loop(i: Int, v0: s2, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2([s1(s0([[0.0], [1.0]], [[2.0]]), [s0([[3.0], [4.0]], [[5.0]]), s0([[6.0], [7.0]], [[8.0]]), s0([[9.0], [10.0]], [[11.0]])]), s1(s0([[12.0], [13.0]], [[14.0]]), [s0([[15.0], [16.0]], [[17.0]]), s0([[18.0], [19.0]], [[20.0]]), s0([[21.0], [22.0]], [[23.0]])])], s1(s0([[24.0], [25.0]], [[26.0]]), [s0([[27.0], [28.0]], [[29.0]]), s0([[30.0], [31.0]], [[32.0]]), s0([[33.0], [34.0]], [[35.0]])])) in
    let v1: Float = 36.0 in
    let initialResult: Float = 36.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()