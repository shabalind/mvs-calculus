  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: Double
    var p1: [[s0]]
  }
  struct s2 {
    var p0: [s1]
    var p1: s1
  }
  struct s3 {
    var p0: s2
    var p1: s2
  }
  struct s4 {
    var p0: [[s3]]
    var p1: [[s0]]
  }
  struct s5 {
    var p0: s0
    var p1: [s1]
  }
  struct s9 {
    var p0: s5
    var p1: [[s5]]
  }
  func f43(_ v0: s1) -> s1 {
    let v6: Double = v0.p0
    var v5: Double = v6
    let v7: [[s0]] = v0.p1
    let v8: s1 = s1(p0: v5, p1: v7)
    return v8
  }
  func f34(_ v0: s0) -> s0 {
    let v6: [[Double]] = v0.p0
    let v9: [[Double]] = v0.p1
    let v5: [[Double]] = v0.p0
    let v4: [[Double]] = v0.p0
    let v8: [Double] = v4[0]
    var v18: [[Double]] = v4
    var v13: s0 = v0
    let v10: [Double] = v6[0]
    var v41: [[Double]] = v9
    let v25: Double = v8[0]
    var v16: Double = v25
    var v15: [Double] = v10
    v15[0] = v16
    var v19: [[Double]] = v9
    let v37: [[Double]] = v13.p1
    v18[0] = v15
    v13.p1 = v9
    let v23: [Double] = v5[0]
    let v24: s0 = s0(p0: v18, p1: v41)
    let v54: [Double] = v18[0]
    v41 = v37
    v13 = v24
    let v75: [[Double]] = v24.p1
    v19[1] = v23
    v13.p1 = v19
    let v77: [Double] = v75[0]
    let v32: [Double] = v37[1]
    var v30: s0 = v13
    let v67: [[Double]] = v30.p0
    v30.p1 = v19
    v18[0] = v15
    v41[2] = v77
    v30.p1 = v75
    v41[0] = v32
    let v69: [Double] = v4[0]
    v18[0] = v54
    v41[2] = v54
    let v89: [Double] = v67[0]
    v41[1] = v89
    let v114: [[Double]] = v13.p1
    v30.p1 = v114
    v41[1] = v69
    v30.p1 = v9
    v30.p1 = v41
    v13.p1 = v75
    return v30
  }
  func f32(_ v0: s1) -> s1 {
    let v4: s1 = f43(v0)
    let v2: [[s0]] = v4.p1
    let v1: [s0] = v2[0]
    let v8: [s0] = v2[0]
    var v5: [s0] = v1
    let v29: [s0] = v2[0]
    let v13: s1 = f43(v0)
    var v15: [[s0]] = v2
    v15[0] = v5
    let v11: Double = v13.p0
    let v19: s1 = s1(p0: v11, p1: v15)
    v15[0] = v29
    let v22: s0 = v8[0]
    let v52: [[s0]] = v19.p1
    v5[0] = v22
    v5[0] = v22
    v5[0] = v22
    let v69: Double = v0.p0
    let v77: s0 = f34(v22)
    let v82: s0 = f34(v77)
    let v51: s0 = f34(v82)
    v5[0] = v51
    let v84: s1 = s1(p0: v69, p1: v52)
    v5[0] = v22
    return v84
  }
  func f31(_ v0: s1) -> s1 {
    let v4: s1 = f43(v0)
    let v2: s1 = f43(v4)
    let v1: s1 = f32(v2)
    var v3: s1 = v1
    let v6: Double = v3.p0
    v3.p0 = v6
    var v7: Double = v6
    v3.p0 = v6
    let v5: s1 = f32(v0)
    let v11: s1 = f32(v5)
    let v8: [[s0]] = v11.p1
    let v18: [s0] = v8[0]
    let v12: Double = v2.p0
    v3.p0 = v7
    let v15: [[s0]] = v0.p1
    let v17: s1 = f43(v4)
    let v20: s1 = s1(p0: v12, p1: v8)
    var v73: s1 = v17
    let v30: s1 = f32(v3)
    v73.p1 = v8
    v73.p1 = v15
    let v38: s1 = f43(v73)
    var v32: [[s0]] = v8
    let v58: Double = v38.p0
    v3.p1 = v15
    v73.p1 = v15
    let v39: [s0] = v32[0]
    v32[0] = v39
    let v80: [[[s0]]] = [v8, v8, v8, v8, v32, v8, v32]
    let v182: [[s0]] = v3.p1
    let v46: s1 = f32(v30)
    let v94: [s0] = v8[0]
    v3 = v46
    let v63: s1 = f32(v20)
    let v162: [[s0]] = v63.p1
    var v90: [[s0]] = v182
    v90[0] = v94
    let v207: [[s0]] = v80[4]
    v73.p1 = v162
    let v131: s1 = s1(p0: v58, p1: v207)
    v90[0] = v18
    v73.p1 = v90
    return v131
  }
  func f12(_ v0: s1) -> s1 {
    let v6: s1 = f43(v0)
    var v3: s1 = v6
    let v4: s1 = f43(v3)
    let v7: s1 = f31(v4)
    let v8: s1 = f32(v6)
    var v11: s1 = v3
    let v2: s1 = f31(v7)
    let v9: Double = v11.p0
    let v14: [[s0]] = v8.p1
    let v13: Double = v2.p0
    v3 = v2
    let v16: [[s0]] = v8.p1
    let v12: s1 = f43(v2)
    let v25: s1 = s1(p0: v9, p1: v16)
    v3.p0 = v9
    let v18: Double = v3.p0
    var v32: Double = v9
    v3 = v12
    let v17: s1 = f32(v4)
    v3.p0 = v18
    var v21: s1 = v8
    v21.p0 = v18
    var v19: [[s0]] = v16
    let v41: [s0] = v19[0]
    v19[0] = v41
    var v49: s1 = v17
    v32 = v13
    v3.p1 = v19
    let v27: Double = v25.p0
    v11.p1 = v14
    v11.p0 = v27
    v49.p0 = v32
    v11.p1 = v16
    var v66: [[s0]] = v14
    v21.p1 = v19
    let v54: Double = v21.p0
    var v209: s1 = v49
    v11.p1 = v66
    v49.p0 = v54
    return v209
  }
  @inline(never)
  func f0(_ v0: [[s2]], _ v1: s4, _ v2: [s9], _ v3: Double) -> Double {
    let v4: [s2] = v0[0]
    let v9: s2 = v4[0]
    let v14: s1 = v9.p1
    let v19: s1 = f12(v14)
    let v143: Double = v19.p0
    let v56: Double = v3 / v3
    let v79: Double = v56 - v143
    return v79
  }
  func benchmark() {
    let v0: [[s2]] = [[s2(p0: [s1(p0: 0.0, p1: [[s0(p0: [[1.0]], p1: [[2.0], [3.0], [4.0]])]]), s1(p0: 5.0, p1: [[s0(p0: [[6.0]], p1: [[7.0], [8.0], [9.0]])]])], p1: s1(p0: 10.0, p1: [[s0(p0: [[11.0]], p1: [[12.0], [13.0], [14.0]])]]))]]
    let v1: s4 = s4(p0: [[s3(p0: s2(p0: [s1(p0: 15.0, p1: [[s0(p0: [[16.0]], p1: [[17.0], [18.0], [19.0]])]]), s1(p0: 20.0, p1: [[s0(p0: [[21.0]], p1: [[22.0], [23.0], [24.0]])]])], p1: s1(p0: 25.0, p1: [[s0(p0: [[26.0]], p1: [[27.0], [28.0], [29.0]])]])), p1: s2(p0: [s1(p0: 30.0, p1: [[s0(p0: [[31.0]], p1: [[32.0], [33.0], [34.0]])]]), s1(p0: 35.0, p1: [[s0(p0: [[36.0]], p1: [[37.0], [38.0], [39.0]])]])], p1: s1(p0: 40.0, p1: [[s0(p0: [[41.0]], p1: [[42.0], [43.0], [44.0]])]])))], [s3(p0: s2(p0: [s1(p0: 45.0, p1: [[s0(p0: [[46.0]], p1: [[47.0], [48.0], [49.0]])]]), s1(p0: 50.0, p1: [[s0(p0: [[51.0]], p1: [[52.0], [53.0], [54.0]])]])], p1: s1(p0: 55.0, p1: [[s0(p0: [[56.0]], p1: [[57.0], [58.0], [59.0]])]])), p1: s2(p0: [s1(p0: 60.0, p1: [[s0(p0: [[61.0]], p1: [[62.0], [63.0], [64.0]])]]), s1(p0: 65.0, p1: [[s0(p0: [[66.0]], p1: [[67.0], [68.0], [69.0]])]])], p1: s1(p0: 70.0, p1: [[s0(p0: [[71.0]], p1: [[72.0], [73.0], [74.0]])]])))], [s3(p0: s2(p0: [s1(p0: 75.0, p1: [[s0(p0: [[76.0]], p1: [[77.0], [78.0], [79.0]])]]), s1(p0: 80.0, p1: [[s0(p0: [[81.0]], p1: [[82.0], [83.0], [84.0]])]])], p1: s1(p0: 85.0, p1: [[s0(p0: [[86.0]], p1: [[87.0], [88.0], [89.0]])]])), p1: s2(p0: [s1(p0: 90.0, p1: [[s0(p0: [[91.0]], p1: [[92.0], [93.0], [94.0]])]]), s1(p0: 95.0, p1: [[s0(p0: [[96.0]], p1: [[97.0], [98.0], [99.0]])]])], p1: s1(p0: 100.0, p1: [[s0(p0: [[101.0]], p1: [[102.0], [103.0], [104.0]])]])))]], p1: [[s0(p0: [[105.0]], p1: [[106.0], [107.0], [108.0]])]])
    let v2: [s9] = [s9(p0: s5(p0: s0(p0: [[109.0]], p1: [[110.0], [111.0], [112.0]]), p1: [s1(p0: 113.0, p1: [[s0(p0: [[114.0]], p1: [[115.0], [116.0], [117.0]])]]), s1(p0: 118.0, p1: [[s0(p0: [[119.0]], p1: [[120.0], [121.0], [122.0]])]]), s1(p0: 123.0, p1: [[s0(p0: [[124.0]], p1: [[125.0], [126.0], [127.0]])]])]), p1: [[s5(p0: s0(p0: [[128.0]], p1: [[129.0], [130.0], [131.0]]), p1: [s1(p0: 132.0, p1: [[s0(p0: [[133.0]], p1: [[134.0], [135.0], [136.0]])]]), s1(p0: 137.0, p1: [[s0(p0: [[138.0]], p1: [[139.0], [140.0], [141.0]])]]), s1(p0: 142.0, p1: [[s0(p0: [[143.0]], p1: [[144.0], [145.0], [146.0]])]])])]]), s9(p0: s5(p0: s0(p0: [[147.0]], p1: [[148.0], [149.0], [150.0]]), p1: [s1(p0: 151.0, p1: [[s0(p0: [[152.0]], p1: [[153.0], [154.0], [155.0]])]]), s1(p0: 156.0, p1: [[s0(p0: [[157.0]], p1: [[158.0], [159.0], [160.0]])]]), s1(p0: 161.0, p1: [[s0(p0: [[162.0]], p1: [[163.0], [164.0], [165.0]])]])]), p1: [[s5(p0: s0(p0: [[166.0]], p1: [[167.0], [168.0], [169.0]]), p1: [s1(p0: 170.0, p1: [[s0(p0: [[171.0]], p1: [[172.0], [173.0], [174.0]])]]), s1(p0: 175.0, p1: [[s0(p0: [[176.0]], p1: [[177.0], [178.0], [179.0]])]]), s1(p0: 180.0, p1: [[s0(p0: [[181.0]], p1: [[182.0], [183.0], [184.0]])]])])]]), s9(p0: s5(p0: s0(p0: [[185.0]], p1: [[186.0], [187.0], [188.0]]), p1: [s1(p0: 189.0, p1: [[s0(p0: [[190.0]], p1: [[191.0], [192.0], [193.0]])]]), s1(p0: 194.0, p1: [[s0(p0: [[195.0]], p1: [[196.0], [197.0], [198.0]])]]), s1(p0: 199.0, p1: [[s0(p0: [[200.0]], p1: [[201.0], [202.0], [203.0]])]])]), p1: [[s5(p0: s0(p0: [[204.0]], p1: [[205.0], [206.0], [207.0]]), p1: [s1(p0: 208.0, p1: [[s0(p0: [[209.0]], p1: [[210.0], [211.0], [212.0]])]]), s1(p0: 213.0, p1: [[s0(p0: [[214.0]], p1: [[215.0], [216.0], [217.0]])]]), s1(p0: 218.0, p1: [[s0(p0: [[219.0]], p1: [[220.0], [221.0], [222.0]])]])])]])]
    let v3: Double = 223.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 223.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
