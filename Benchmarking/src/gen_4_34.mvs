  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
  } in
  struct s2 {
    var p0: s0
    var p1: [s1]
    var p2: [s0]
  } in
  struct s3 {
    var p0: s1
    var p1: [[s0]]
  } in
  struct s4 {
    var p0: s3
    var p1: [[s3]]
  } in
  struct s5 {
    var p0: [[s2]]
    var p1: s4
  } in
  struct s6 {
    var p0: s2
    var p1: [s4]
  } in
  struct s8 {
    var p0: [s5]
    var p1: s6
  } in
  let noinline_f0: (s8, [s0], Float) -> Float = (v0: s8, v1: [s0], v2: Float) -> Float {
    let v6: s6 = v0.p1 in
    var v3: [s0] = v1 in
    let v17: [s4] = v6.p1 in
    let v10: s0 = v3[0] in
    let v19: s0 = v3[1] in
    let v20: s4 = v17[0] in
    let v21: [[Float]] = v10.p1 in
    let v22: s3 = v20.p0 in
    let v63: [Float] = v21[0] in
    let v46: Float = v63[0] in
    let v41: [[s0]] = v22.p1 in
    let v56: [s0] = v41[0] in
    let v40: Float = v63[0] in
    let v43: Float = v63[0] in
    v3[1] = v19 in
    let v57: Float = v46 * v43 in
    let v100: s0 = v56[0] in
    v3[1] = v100 in
    let v212: Float = v57 / v40 in
    v212
  } in
  fun loop(i: Int, v0: s8, v1: [s0], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s8 = s8([s5([[s2(s0([[0.0]], [[1.0]]), [s1([[s0([[2.0]], [[3.0]])], [s0([[4.0]], [[5.0]])], [s0([[6.0]], [[7.0]])]]), s1([[s0([[8.0]], [[9.0]])], [s0([[10.0]], [[11.0]])], [s0([[12.0]], [[13.0]])]])], [s0([[14.0]], [[15.0]])])], [s2(s0([[16.0]], [[17.0]]), [s1([[s0([[18.0]], [[19.0]])], [s0([[20.0]], [[21.0]])], [s0([[22.0]], [[23.0]])]]), s1([[s0([[24.0]], [[25.0]])], [s0([[26.0]], [[27.0]])], [s0([[28.0]], [[29.0]])]])], [s0([[30.0]], [[31.0]])])], [s2(s0([[32.0]], [[33.0]]), [s1([[s0([[34.0]], [[35.0]])], [s0([[36.0]], [[37.0]])], [s0([[38.0]], [[39.0]])]]), s1([[s0([[40.0]], [[41.0]])], [s0([[42.0]], [[43.0]])], [s0([[44.0]], [[45.0]])]])], [s0([[46.0]], [[47.0]])])]], s4(s3(s1([[s0([[48.0]], [[49.0]])], [s0([[50.0]], [[51.0]])], [s0([[52.0]], [[53.0]])]]), [[s0([[54.0]], [[55.0]])]]), [[s3(s1([[s0([[56.0]], [[57.0]])], [s0([[58.0]], [[59.0]])], [s0([[60.0]], [[61.0]])]]), [[s0([[62.0]], [[63.0]])]])], [s3(s1([[s0([[64.0]], [[65.0]])], [s0([[66.0]], [[67.0]])], [s0([[68.0]], [[69.0]])]]), [[s0([[70.0]], [[71.0]])]])]])), s5([[s2(s0([[72.0]], [[73.0]]), [s1([[s0([[74.0]], [[75.0]])], [s0([[76.0]], [[77.0]])], [s0([[78.0]], [[79.0]])]]), s1([[s0([[80.0]], [[81.0]])], [s0([[82.0]], [[83.0]])], [s0([[84.0]], [[85.0]])]])], [s0([[86.0]], [[87.0]])])], [s2(s0([[88.0]], [[89.0]]), [s1([[s0([[90.0]], [[91.0]])], [s0([[92.0]], [[93.0]])], [s0([[94.0]], [[95.0]])]]), s1([[s0([[96.0]], [[97.0]])], [s0([[98.0]], [[99.0]])], [s0([[100.0]], [[101.0]])]])], [s0([[102.0]], [[103.0]])])], [s2(s0([[104.0]], [[105.0]]), [s1([[s0([[106.0]], [[107.0]])], [s0([[108.0]], [[109.0]])], [s0([[110.0]], [[111.0]])]]), s1([[s0([[112.0]], [[113.0]])], [s0([[114.0]], [[115.0]])], [s0([[116.0]], [[117.0]])]])], [s0([[118.0]], [[119.0]])])]], s4(s3(s1([[s0([[120.0]], [[121.0]])], [s0([[122.0]], [[123.0]])], [s0([[124.0]], [[125.0]])]]), [[s0([[126.0]], [[127.0]])]]), [[s3(s1([[s0([[128.0]], [[129.0]])], [s0([[130.0]], [[131.0]])], [s0([[132.0]], [[133.0]])]]), [[s0([[134.0]], [[135.0]])]])], [s3(s1([[s0([[136.0]], [[137.0]])], [s0([[138.0]], [[139.0]])], [s0([[140.0]], [[141.0]])]]), [[s0([[142.0]], [[143.0]])]])]])), s5([[s2(s0([[144.0]], [[145.0]]), [s1([[s0([[146.0]], [[147.0]])], [s0([[148.0]], [[149.0]])], [s0([[150.0]], [[151.0]])]]), s1([[s0([[152.0]], [[153.0]])], [s0([[154.0]], [[155.0]])], [s0([[156.0]], [[157.0]])]])], [s0([[158.0]], [[159.0]])])], [s2(s0([[160.0]], [[161.0]]), [s1([[s0([[162.0]], [[163.0]])], [s0([[164.0]], [[165.0]])], [s0([[166.0]], [[167.0]])]]), s1([[s0([[168.0]], [[169.0]])], [s0([[170.0]], [[171.0]])], [s0([[172.0]], [[173.0]])]])], [s0([[174.0]], [[175.0]])])], [s2(s0([[176.0]], [[177.0]]), [s1([[s0([[178.0]], [[179.0]])], [s0([[180.0]], [[181.0]])], [s0([[182.0]], [[183.0]])]]), s1([[s0([[184.0]], [[185.0]])], [s0([[186.0]], [[187.0]])], [s0([[188.0]], [[189.0]])]])], [s0([[190.0]], [[191.0]])])]], s4(s3(s1([[s0([[192.0]], [[193.0]])], [s0([[194.0]], [[195.0]])], [s0([[196.0]], [[197.0]])]]), [[s0([[198.0]], [[199.0]])]]), [[s3(s1([[s0([[200.0]], [[201.0]])], [s0([[202.0]], [[203.0]])], [s0([[204.0]], [[205.0]])]]), [[s0([[206.0]], [[207.0]])]])], [s3(s1([[s0([[208.0]], [[209.0]])], [s0([[210.0]], [[211.0]])], [s0([[212.0]], [[213.0]])]]), [[s0([[214.0]], [[215.0]])]])]]))], s6(s2(s0([[216.0]], [[217.0]]), [s1([[s0([[218.0]], [[219.0]])], [s0([[220.0]], [[221.0]])], [s0([[222.0]], [[223.0]])]]), s1([[s0([[224.0]], [[225.0]])], [s0([[226.0]], [[227.0]])], [s0([[228.0]], [[229.0]])]])], [s0([[230.0]], [[231.0]])]), [s4(s3(s1([[s0([[232.0]], [[233.0]])], [s0([[234.0]], [[235.0]])], [s0([[236.0]], [[237.0]])]]), [[s0([[238.0]], [[239.0]])]]), [[s3(s1([[s0([[240.0]], [[241.0]])], [s0([[242.0]], [[243.0]])], [s0([[244.0]], [[245.0]])]]), [[s0([[246.0]], [[247.0]])]])], [s3(s1([[s0([[248.0]], [[249.0]])], [s0([[250.0]], [[251.0]])], [s0([[252.0]], [[253.0]])]]), [[s0([[254.0]], [[255.0]])]])]])])) in
    let v1: [s0] = [s0([[256.0]], [[257.0]]), s0([[258.0]], [[259.0]])] in
    let v2: Float = 260.0 in
    let initialResult: Float = 260.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()