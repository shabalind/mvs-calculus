  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: s1
  } in
  struct s3 {
    var p0: [s1]
    var p1: s2
  } in
  let noinline_f0: (s3, [s1], Float) -> Float = (v0: s3, v1: [s1], v2: Float) -> Float {
    let v4: [s1] = v0.p0 in
    let v15: s1 = v4[1] in
    let v6: s0 = v15.p0 in
    let v12: [[Float]] = v6.p1 in
    let v36: [Float] = v12[0] in
    let v80: Float = v36[0] in
    let v34: Float = v80 + v2 in
    var v74: Float = v34 in
    let v100: Float = v80 * v34 in
    let v90: Float = v74 * v100 in
    let v105: [Float] = [v90, v90] in
    let v174: Float = v105[1] in
    v174
  } in
  fun loop(i: Int, v0: s3, v1: [s1], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3([s1(s0([[0.0]], [[1.0], [2.0]]), s0([[3.0]], [[4.0], [5.0]])), s1(s0([[6.0]], [[7.0], [8.0]]), s0([[9.0]], [[10.0], [11.0]]))], s2([s0([[12.0]], [[13.0], [14.0]])], s1(s0([[15.0]], [[16.0], [17.0]]), s0([[18.0]], [[19.0], [20.0]])))) in
    let v1: [s1] = [s1(s0([[21.0]], [[22.0], [23.0]]), s0([[24.0]], [[25.0], [26.0]])), s1(s0([[27.0]], [[28.0], [29.0]]), s0([[30.0]], [[31.0], [32.0]]))] in
    let v2: Float = 33.0 in
    let initialResult: Float = 33.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()