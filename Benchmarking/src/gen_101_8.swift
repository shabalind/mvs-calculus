  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
    var p2: s0
    var p3: [s0]
    var p4: s0
    var p5: s0
  }
  struct s3 {
    var p0: s1
    var p1: s1
  }
  struct s4 {
    var p0: s0
    var p1: [[s3]]
  }
  struct s5 {
    var p0: s0
    var p1: s0
  }
  struct s11 {
    var p0: s5
    var p1: s4
  }
  func f18(_ v0: s4) -> s4 {
    let v7: s0 = v0.p0
    let v4: [[s3]] = v0.p1
    let v1: [s0] = [v7, v7]
    let v8: s0 = v1[0]
    var v3: [[s3]] = v4
    var v5: s0 = v8
    var v15: [s0] = v1
    v15[0] = v5
    var v9: s0 = v5
    let v11: [[Double]] = v9.p0
    var v17: s4 = v0
    v15[1] = v8
    var v16: [s0] = v15
    let v14: [[Double]] = v9.p1
    var v18: s0 = v9
    v16[0] = v18
    let v21: s0 = v15[1]
    v5.p0 = v11
    let v19: [[Double]] = v21.p0
    v5.p1 = v14
    let v23: [[Double]] = v9.p1
    v15[1] = v9
    v9.p1 = v23
    v5.p1 = v14
    v17.p1 = v3
    let v38: s0 = v16[0]
    v15[1] = v38
    let v65: s0 = s0(p0: v19, p1: v23)
    var v105: [[Double]] = v11
    v17.p0 = v21
    v17.p0 = v65
    v5.p0 = v105
    return v17
  }
  func f17(_ v0: s11) -> s11 {
    var v2: s11 = v0
    var v6: s11 = v2
    var v1: s11 = v6
    let v3: s4 = v0.p1
    let v7: s4 = v1.p1
    var v8: s4 = v3
    var v9: s4 = v8
    let v17: s4 = v2.p1
    var v4: s11 = v1
    var v10: s4 = v17
    let v21: s4 = f18(v9)
    v2.p1 = v21
    let v25: [[s3]] = v10.p1
    let v12: [s11] = [v2, v4, v1]
    let v15: s0 = v8.p0
    v4.p1 = v7
    let v41: s11 = v12[2]
    v10.p0 = v15
    v9.p1 = v25
    let v71: [[s3]] = v8.p1
    let v98: s11 = v12[1]
    let v33: s4 = f18(v8)
    var v51: s11 = v41
    v4 = v98
    let v83: s4 = f18(v9)
    v1.p1 = v83
    v51.p1 = v33
    v8.p1 = v71
    return v51
  }
  @inline(never)
  func f0(_ v0: s11, _ v1: Double) -> Double {
    let v2: s11 = f17(v0)
    let v7: s11 = f17(v2)
    let v6: s5 = v7.p0
    var v4: s5 = v6
    let v12: s0 = v4.p1
    var v21: s0 = v12
    v4 = v6
    v4.p0 = v12
    let v29: [[Double]] = v12.p0
    v21.p0 = v29
    let v33: [Double] = v29[1]
    var v41: [Double] = v33
    let v40: Double = v33[0]
    let v80: [[Double]] = [v33, v41]
    v41[0] = v40
    let v55: [Double] = [v40, v40]
    let v30: Double = v55[0]
    v4.p1 = v21
    let v45: Double = v55[1]
    v21.p0 = v80
    let v71: Double = v30 + v45
    return v71
  }
  func benchmark() {
    let v0: s11 = s11(p0: s5(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0], [4.0]]), p1: s0(p0: [[5.0], [6.0]], p1: [[7.0], [8.0], [9.0]])), p1: s4(p0: s0(p0: [[10.0], [11.0]], p1: [[12.0], [13.0], [14.0]]), p1: [[s3(p0: s1(p0: s0(p0: [[15.0], [16.0]], p1: [[17.0], [18.0], [19.0]]), p1: s0(p0: [[20.0], [21.0]], p1: [[22.0], [23.0], [24.0]]), p2: s0(p0: [[25.0], [26.0]], p1: [[27.0], [28.0], [29.0]]), p3: [s0(p0: [[30.0], [31.0]], p1: [[32.0], [33.0], [34.0]]), s0(p0: [[35.0], [36.0]], p1: [[37.0], [38.0], [39.0]])], p4: s0(p0: [[40.0], [41.0]], p1: [[42.0], [43.0], [44.0]]), p5: s0(p0: [[45.0], [46.0]], p1: [[47.0], [48.0], [49.0]])), p1: s1(p0: s0(p0: [[50.0], [51.0]], p1: [[52.0], [53.0], [54.0]]), p1: s0(p0: [[55.0], [56.0]], p1: [[57.0], [58.0], [59.0]]), p2: s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0], [64.0]]), p3: [s0(p0: [[65.0], [66.0]], p1: [[67.0], [68.0], [69.0]]), s0(p0: [[70.0], [71.0]], p1: [[72.0], [73.0], [74.0]])], p4: s0(p0: [[75.0], [76.0]], p1: [[77.0], [78.0], [79.0]]), p5: s0(p0: [[80.0], [81.0]], p1: [[82.0], [83.0], [84.0]])))], [s3(p0: s1(p0: s0(p0: [[85.0], [86.0]], p1: [[87.0], [88.0], [89.0]]), p1: s0(p0: [[90.0], [91.0]], p1: [[92.0], [93.0], [94.0]]), p2: s0(p0: [[95.0], [96.0]], p1: [[97.0], [98.0], [99.0]]), p3: [s0(p0: [[100.0], [101.0]], p1: [[102.0], [103.0], [104.0]]), s0(p0: [[105.0], [106.0]], p1: [[107.0], [108.0], [109.0]])], p4: s0(p0: [[110.0], [111.0]], p1: [[112.0], [113.0], [114.0]]), p5: s0(p0: [[115.0], [116.0]], p1: [[117.0], [118.0], [119.0]])), p1: s1(p0: s0(p0: [[120.0], [121.0]], p1: [[122.0], [123.0], [124.0]]), p1: s0(p0: [[125.0], [126.0]], p1: [[127.0], [128.0], [129.0]]), p2: s0(p0: [[130.0], [131.0]], p1: [[132.0], [133.0], [134.0]]), p3: [s0(p0: [[135.0], [136.0]], p1: [[137.0], [138.0], [139.0]]), s0(p0: [[140.0], [141.0]], p1: [[142.0], [143.0], [144.0]])], p4: s0(p0: [[145.0], [146.0]], p1: [[147.0], [148.0], [149.0]]), p5: s0(p0: [[150.0], [151.0]], p1: [[152.0], [153.0], [154.0]])))], [s3(p0: s1(p0: s0(p0: [[155.0], [156.0]], p1: [[157.0], [158.0], [159.0]]), p1: s0(p0: [[160.0], [161.0]], p1: [[162.0], [163.0], [164.0]]), p2: s0(p0: [[165.0], [166.0]], p1: [[167.0], [168.0], [169.0]]), p3: [s0(p0: [[170.0], [171.0]], p1: [[172.0], [173.0], [174.0]]), s0(p0: [[175.0], [176.0]], p1: [[177.0], [178.0], [179.0]])], p4: s0(p0: [[180.0], [181.0]], p1: [[182.0], [183.0], [184.0]]), p5: s0(p0: [[185.0], [186.0]], p1: [[187.0], [188.0], [189.0]])), p1: s1(p0: s0(p0: [[190.0], [191.0]], p1: [[192.0], [193.0], [194.0]]), p1: s0(p0: [[195.0], [196.0]], p1: [[197.0], [198.0], [199.0]]), p2: s0(p0: [[200.0], [201.0]], p1: [[202.0], [203.0], [204.0]]), p3: [s0(p0: [[205.0], [206.0]], p1: [[207.0], [208.0], [209.0]]), s0(p0: [[210.0], [211.0]], p1: [[212.0], [213.0], [214.0]])], p4: s0(p0: [[215.0], [216.0]], p1: [[217.0], [218.0], [219.0]]), p5: s0(p0: [[220.0], [221.0]], p1: [[222.0], [223.0], [224.0]])))]]))
    let v1: Double = 225.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 225.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
