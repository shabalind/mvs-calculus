  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
  } in
  let f38: (Float) -> Float = (v0: Float) -> Float {
    var v4: Float = v0 in
    var v7: Float = v4 in
    var v8: Float = v4 in
    let v6: Float = v0 + v8 in
    var v5: Float = v4 in
    var v2: Float = v5 in
    let v3: [Float] = [v4, v2, v7, v4] in
    let v1: Float = v3[2] in
    let v10: Float = v3[0] in
    let v9: Float = v0 / v4 in
    let v46: Float = v0 - v1 in
    v5 = v1 in
    var v11: [Float] = v3 in
    var v18: Float = v0 in
    var v12: Float = v7 in
    let v14: [[Float]] = [v11] in
    let v21: Float = v9 - v4 in
    let v17: [Float] = v14[0] in
    var v29: Float = v6 in
    var v34: Float = v18 in
    v11[3] = v34 in
    let v24: Float = v17[2] in
    let v35: Float = v11[3] in
    let v45: [Float] = [v24, v4, v29, v35, v10, v46, v4] in
    var v31: [Float] = v45 in
    var v41: Float = v5 in
    let v57: Float = v9 / v12 in
    v31[6] = v29 in
    var v87: [Float] = v17 in
    v11[3] = v6 in
    let v70: Float = v87[3] in
    v11[3] = v41 in
    v11[0] = v57 in
    let v49: Float = v45[6] in
    var v80: [Float] = v31 in
    v80[4] = v49 in
    let v82: Float = v80[0] in
    v12 = v70 in
    v11[1] = v21 in
    v82
  } in
  let noinline_f0: ([s0], [s0], [s0], [s1], [[s0]], [s1], [[s1]], Float) -> Float = (v0: [s0], v1: [s0], v2: [s0], v3: [s1], v4: [[s0]], v5: [s1], v6: [[s1]], v7: Float) -> Float {
    let v8: Float = f38(v7) in
    let v30: Float = f38(v7) in
    let v32: Float = v8 + v7 in
    let v56: Float = v32 / v30 in
    let v34: [Float] = [v56, v56] in
    let v58: Float = v8 - v30 in
    let v98: Float = v34[0] in
    let v119: Float = v98 + v58 in
    v119
  } in
  fun loop(i: Int, v0: [s0], v1: [s0], v2: [s0], v3: [s1], v4: [[s0]], v5: [s1], v6: [[s1]], v7: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4, v5, v6, v7) in
      loop(i + 1, v0, v1, v2, v3, v4, v5, v6, v7, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0], [2.0]], [[3.0]])] in
    let v1: [s0] = [s0([[4.0], [5.0], [6.0]], [[7.0]]), s0([[8.0], [9.0], [10.0]], [[11.0]])] in
    let v2: [s0] = [s0([[12.0], [13.0], [14.0]], [[15.0]]), s0([[16.0], [17.0], [18.0]], [[19.0]]), s0([[20.0], [21.0], [22.0]], [[23.0]])] in
    let v3: [s1] = [s1([[s0([[24.0], [25.0], [26.0]], [[27.0]])]], [s0([[28.0], [29.0], [30.0]], [[31.0]]), s0([[32.0], [33.0], [34.0]], [[35.0]]), s0([[36.0], [37.0], [38.0]], [[39.0]])])] in
    let v4: [[s0]] = [[s0([[40.0], [41.0], [42.0]], [[43.0]])], [s0([[44.0], [45.0], [46.0]], [[47.0]])], [s0([[48.0], [49.0], [50.0]], [[51.0]])]] in
    let v5: [s1] = [s1([[s0([[52.0], [53.0], [54.0]], [[55.0]])]], [s0([[56.0], [57.0], [58.0]], [[59.0]]), s0([[60.0], [61.0], [62.0]], [[63.0]]), s0([[64.0], [65.0], [66.0]], [[67.0]])]), s1([[s0([[68.0], [69.0], [70.0]], [[71.0]])]], [s0([[72.0], [73.0], [74.0]], [[75.0]]), s0([[76.0], [77.0], [78.0]], [[79.0]]), s0([[80.0], [81.0], [82.0]], [[83.0]])])] in
    let v6: [[s1]] = [[s1([[s0([[84.0], [85.0], [86.0]], [[87.0]])]], [s0([[88.0], [89.0], [90.0]], [[91.0]]), s0([[92.0], [93.0], [94.0]], [[95.0]]), s0([[96.0], [97.0], [98.0]], [[99.0]])])], [s1([[s0([[100.0], [101.0], [102.0]], [[103.0]])]], [s0([[104.0], [105.0], [106.0]], [[107.0]]), s0([[108.0], [109.0], [110.0]], [[111.0]]), s0([[112.0], [113.0], [114.0]], [[115.0]])])], [s1([[s0([[116.0], [117.0], [118.0]], [[119.0]])]], [s0([[120.0], [121.0], [122.0]], [[123.0]]), s0([[124.0], [125.0], [126.0]], [[127.0]]), s0([[128.0], [129.0], [130.0]], [[131.0]])])]] in
    let v7: Float = 132.0 in
    let initialResult: Float = 132.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, v5, v6, v7, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()