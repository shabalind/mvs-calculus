  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s2 {
    var p0: s0
    var p1: s0
    var p2: s1
  } in
  struct s3 {
    var p0: [[s1]]
    var p1: [s2]
  } in
  struct s5 {
    var p0: s1
    var p1: [[s3]]
  } in
  let f89: (s1) -> s1 = (v0: s1) -> s1 {
    let v6: [s0] = v0.p1 in
    let v2: s0 = v6[2] in
    let v4: [[Float]] = v2.p0 in
    var v7: s1 = v0 in
    var v5: [[Float]] = v4 in
    v5 = v4 in
    var v3: s0 = v2 in
    var v9: s0 = v3 in
    let v8: [[Float]] = v9.p0 in
    var v15: [s0] = v6 in
    v7 = v0 in
    let v28: [s0] = v7.p1 in
    let v12: s0 = v15[2] in
    var v18: s1 = v0 in
    let v13: [Float] = v5[1] in
    v5[0] = v13 in
    var v10: [Float] = v13 in
    var v21: s1 = v0 in
    v18.p1 = v6 in
    v9.p0 = v5 in
    var v27: [[Float]] = v5 in
    v5[0] = v10 in
    v27[1] = v13 in
    let v23: [s0] = v21.p0 in
    v5[1] = v13 in
    let v22: [[Float]] = v2.p0 in
    let v26: [[Float]] = v12.p0 in
    v3.p0 = v4 in
    v15 = v28 in
    v3.p0 = v8 in
    let v33: [Float] = v26[2] in
    var v56: [s0] = v23 in
    let v25: [s0] = v18.p0 in
    v27[2] = v33 in
    let v52: [[[Float]]] = [v26, v26, v4, v4, v27, v22, v27] in
    let v49: [s0] = v21.p1 in
    let v39: [[Float]] = v52[4] in
    let v65: s0 = v25[0] in
    v21.p0 = v56 in
    v56[0] = v9 in
    let v50: s1 = s1(v56, v15) in
    var v44: [[Float]] = v39 in
    v18.p1 = v15 in
    let v75: [[Float]] = v3.p1 in
    v56[0] = v65 in
    v18 = v50 in
    v7.p1 = v49 in
    let v55: [Float] = v75[0] in
    var v163: [s0] = v23 in
    v27[2] = v55 in
    v21.p0 = v23 in
    v21.p0 = v163 in
    var v121: s1 = v50 in
    v3.p0 = v44 in
    v121
  } in
  let noinline_f0: (s5, s2, Float) -> Float = (v0: s5, v1: s2, v2: Float) -> Float {
    let v6: s1 = v0.p0 in
    let v13: s1 = f89(v6) in
    var v23: s2 = v1 in
    let v10: s0 = v23.p0 in
    let v18: [[Float]] = v10.p1 in
    let v25: [Float] = v18[0] in
    let v36: Float = v25[0] in
    let v24: Float = v25[0] in
    let v22: [s1] = [v6] in
    v23.p1 = v10 in
    let v83: s1 = v22[0] in
    v23.p2 = v83 in
    v23.p2 = v83 in
    v23.p2 = v13 in
    let v283: Float = v36 + v24 in
    v283
  } in
  fun loop(i: Int, v0: s5, v1: s2, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s5 = s5(s1([s0([[0.0], [1.0], [2.0]], [[3.0]])], [s0([[4.0], [5.0], [6.0]], [[7.0]]), s0([[8.0], [9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0], [14.0]], [[15.0]])]), [[s3([[s1([s0([[16.0], [17.0], [18.0]], [[19.0]])], [s0([[20.0], [21.0], [22.0]], [[23.0]]), s0([[24.0], [25.0], [26.0]], [[27.0]]), s0([[28.0], [29.0], [30.0]], [[31.0]])])], [s1([s0([[32.0], [33.0], [34.0]], [[35.0]])], [s0([[36.0], [37.0], [38.0]], [[39.0]]), s0([[40.0], [41.0], [42.0]], [[43.0]]), s0([[44.0], [45.0], [46.0]], [[47.0]])])]], [s2(s0([[48.0], [49.0], [50.0]], [[51.0]]), s0([[52.0], [53.0], [54.0]], [[55.0]]), s1([s0([[56.0], [57.0], [58.0]], [[59.0]])], [s0([[60.0], [61.0], [62.0]], [[63.0]]), s0([[64.0], [65.0], [66.0]], [[67.0]]), s0([[68.0], [69.0], [70.0]], [[71.0]])]))])], [s3([[s1([s0([[72.0], [73.0], [74.0]], [[75.0]])], [s0([[76.0], [77.0], [78.0]], [[79.0]]), s0([[80.0], [81.0], [82.0]], [[83.0]]), s0([[84.0], [85.0], [86.0]], [[87.0]])])], [s1([s0([[88.0], [89.0], [90.0]], [[91.0]])], [s0([[92.0], [93.0], [94.0]], [[95.0]]), s0([[96.0], [97.0], [98.0]], [[99.0]]), s0([[100.0], [101.0], [102.0]], [[103.0]])])]], [s2(s0([[104.0], [105.0], [106.0]], [[107.0]]), s0([[108.0], [109.0], [110.0]], [[111.0]]), s1([s0([[112.0], [113.0], [114.0]], [[115.0]])], [s0([[116.0], [117.0], [118.0]], [[119.0]]), s0([[120.0], [121.0], [122.0]], [[123.0]]), s0([[124.0], [125.0], [126.0]], [[127.0]])]))])]]) in
    let v1: s2 = s2(s0([[128.0], [129.0], [130.0]], [[131.0]]), s0([[132.0], [133.0], [134.0]], [[135.0]]), s1([s0([[136.0], [137.0], [138.0]], [[139.0]])], [s0([[140.0], [141.0], [142.0]], [[143.0]]), s0([[144.0], [145.0], [146.0]], [[147.0]]), s0([[148.0], [149.0], [150.0]], [[151.0]])])) in
    let v2: Float = 152.0 in
    let initialResult: Float = 152.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()