  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s2 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s3 {
    var p0: [[s2]]
    var p1: [s0]
  } in
  struct s5 {
    var p0: s3
    var p1: s0
  } in
  let noinline_f0: ([[s0]], s5, Float) -> Float = (v0: [[s0]], v1: s5, v2: Float) -> Float {
    var v8: Float = v2 in
    let v3: s0 = v1.p1 in
    let v10: [[Float]] = v3.p0 in
    let v11: [Float] = v10[1] in
    var v4: Float = v8 in
    let v17: Float = v11[0] in
    let v13: [Float] = v10[1] in
    let v14: Float = v4 * v17 in
    let v25: Float = v13[0] in
    var v41: Float = v14 in
    let v62: [Float] = v10[2] in
    var v68: [Float] = v62 in
    v8 = v41 in
    var v61: Float = v25 in
    v68[0] = v61 in
    v68[0] = v14 in
    let v77: Float = v68[0] in
    v77
  } in
  fun loop(i: Int, v0: [[s0]], v1: s5, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s0]] = [[s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]])]] in
    let v1: s5 = s5(s3([[s2(s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]]), [[s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]])], [s0([[15.0], [16.0], [17.0]], [[18.0], [19.0]])], [s0([[20.0], [21.0], [22.0]], [[23.0], [24.0]])]])], [s2(s0([[25.0], [26.0], [27.0]], [[28.0], [29.0]]), [[s0([[30.0], [31.0], [32.0]], [[33.0], [34.0]])], [s0([[35.0], [36.0], [37.0]], [[38.0], [39.0]])], [s0([[40.0], [41.0], [42.0]], [[43.0], [44.0]])]])]], [s0([[45.0], [46.0], [47.0]], [[48.0], [49.0]])]), s0([[50.0], [51.0], [52.0]], [[53.0], [54.0]])) in
    let v2: Float = 55.0 in
    let initialResult: Float = 55.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()