  struct s0 {
    var p0: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
    var p2: s0
  } in
  struct s2 {
    var p0: s1
    var p1: [s0]
  } in
  let noinline_f0: (s2, Float) -> Float = (v0: s2, v1: Float) -> Float {
    let v8: s1 = v0.p0 in
    let v2: s0 = v8.p2 in
    let v6: [[Float]] = v2.p0 in
    var v4: [[Float]] = v6 in
    let v9: [Float] = v4[0] in
    let v14: [Float] = v4[0] in
    v4[0] = v14 in
    let v21: Float = v14[0] in
    v4[0] = v9 in
    let v23: Float = v14[0] in
    var v19: Float = v23 in
    v4[0] = v9 in
    let v69: Float = v1 * v23 in
    let v68: Float = v19 - v69 in
    v4[0] = v14 in
    let v71: [Float] = [v69, v68, v21] in
    var v144: [Float] = v71 in
    let v280: Float = v144[0] in
    v280
  } in
  fun loop(i: Int, v0: s2, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(s1([s0([[0.0]]), s0([[1.0]]), s0([[2.0]])], [[s0([[3.0]])]], s0([[4.0]])), [s0([[5.0]])]) in
    let v1: Float = 6.0 in
    let initialResult: Float = 6.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()