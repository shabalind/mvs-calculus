  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
    var p4: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s2 {
    var p0: s1
    var p1: [s0]
  }
  struct s4 {
    var p0: [[s1]]
    var p1: s2
  }
  @inline(never)
  func f0(_ v0: [s1], _ v1: s1, _ v2: [[s0]], _ v3: s4, _ v4: Double) -> Double {
    var v5: Double = v4
    let v12: [s0] = v1.p1
    let v11: s0 = v12[0]
    let v17: [[Double]] = v11.p4
    let v36: [Double] = v17[0]
    let v61: Double = v36[0]
    var v82: [[Double]] = v17
    let v48: [Double] = v82[0]
    let v102: Double = v48[0]
    var v147: Double = v5
    var v78: Double = v4
    let v81: [Double] = [v5, v147, v78, v102, v78, v4, v61]
    let v175: Double = v81[2]
    return v175
  }
  func benchmark() {
    let v0: [s1] = [s1(p0: [s0(p0: [[0.0]], p1: [[1.0], [2.0]], p2: [[3.0], [4.0], [5.0]], p3: [[6.0]], p4: [[7.0], [8.0]])], p1: [s0(p0: [[9.0]], p1: [[10.0], [11.0]], p2: [[12.0], [13.0], [14.0]], p3: [[15.0]], p4: [[16.0], [17.0]])]), s1(p0: [s0(p0: [[18.0]], p1: [[19.0], [20.0]], p2: [[21.0], [22.0], [23.0]], p3: [[24.0]], p4: [[25.0], [26.0]])], p1: [s0(p0: [[27.0]], p1: [[28.0], [29.0]], p2: [[30.0], [31.0], [32.0]], p3: [[33.0]], p4: [[34.0], [35.0]])])]
    let v1: s1 = s1(p0: [s0(p0: [[36.0]], p1: [[37.0], [38.0]], p2: [[39.0], [40.0], [41.0]], p3: [[42.0]], p4: [[43.0], [44.0]])], p1: [s0(p0: [[45.0]], p1: [[46.0], [47.0]], p2: [[48.0], [49.0], [50.0]], p3: [[51.0]], p4: [[52.0], [53.0]])])
    let v2: [[s0]] = [[s0(p0: [[54.0]], p1: [[55.0], [56.0]], p2: [[57.0], [58.0], [59.0]], p3: [[60.0]], p4: [[61.0], [62.0]])], [s0(p0: [[63.0]], p1: [[64.0], [65.0]], p2: [[66.0], [67.0], [68.0]], p3: [[69.0]], p4: [[70.0], [71.0]])], [s0(p0: [[72.0]], p1: [[73.0], [74.0]], p2: [[75.0], [76.0], [77.0]], p3: [[78.0]], p4: [[79.0], [80.0]])]]
    let v3: s4 = s4(p0: [[s1(p0: [s0(p0: [[81.0]], p1: [[82.0], [83.0]], p2: [[84.0], [85.0], [86.0]], p3: [[87.0]], p4: [[88.0], [89.0]])], p1: [s0(p0: [[90.0]], p1: [[91.0], [92.0]], p2: [[93.0], [94.0], [95.0]], p3: [[96.0]], p4: [[97.0], [98.0]])])], [s1(p0: [s0(p0: [[99.0]], p1: [[100.0], [101.0]], p2: [[102.0], [103.0], [104.0]], p3: [[105.0]], p4: [[106.0], [107.0]])], p1: [s0(p0: [[108.0]], p1: [[109.0], [110.0]], p2: [[111.0], [112.0], [113.0]], p3: [[114.0]], p4: [[115.0], [116.0]])])], [s1(p0: [s0(p0: [[117.0]], p1: [[118.0], [119.0]], p2: [[120.0], [121.0], [122.0]], p3: [[123.0]], p4: [[124.0], [125.0]])], p1: [s0(p0: [[126.0]], p1: [[127.0], [128.0]], p2: [[129.0], [130.0], [131.0]], p3: [[132.0]], p4: [[133.0], [134.0]])])]], p1: s2(p0: s1(p0: [s0(p0: [[135.0]], p1: [[136.0], [137.0]], p2: [[138.0], [139.0], [140.0]], p3: [[141.0]], p4: [[142.0], [143.0]])], p1: [s0(p0: [[144.0]], p1: [[145.0], [146.0]], p2: [[147.0], [148.0], [149.0]], p3: [[150.0]], p4: [[151.0], [152.0]])]), p1: [s0(p0: [[153.0]], p1: [[154.0], [155.0]], p2: [[156.0], [157.0], [158.0]], p3: [[159.0]], p4: [[160.0], [161.0]])]))
    let v4: Double = 162.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 162.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
