  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: ([s0], Float) -> Float = (v0: [s0], v1: Float) -> Float {
    let v7: s0 = v0[0] in
    var v5: [s0] = v0 in
    let v4: [[Float]] = v7.p1 in
    let v3: s0 = v0[0] in
    let v9: [[Float]] = v7.p1 in
    let v2: [[Float]] = v7.p0 in
    var v6: [s0] = v0 in
    let v17: s0 = s0(v2, v4) in
    var v10: [[Float]] = v2 in
    var v13: s0 = v3 in
    let v8: [Float] = v2[1] in
    let v11: [[Float]] = v13.p1 in
    let v12: [[Float]] = v3.p1 in
    v13.p1 = v11 in
    let v22: [Float] = v2[0] in
    v6[0] = v17 in
    let v15: [[Float]] = v17.p0 in
    v13.p1 = v9 in
    let v31: [Float] = v4[2] in
    var v46: [[Float]] = v15 in
    let v29: s0 = v6[0] in
    v10[1] = v22 in
    let v16: [[Float]] = v13.p0 in
    v13.p1 = v11 in
    var v23: [s0] = v0 in
    let v24: [[Float]] = v3.p1 in
    let v19: s0 = v5[0] in
    let v43: [[Float]] = v17.p1 in
    let v45: [[Float]] = v29.p1 in
    v13.p1 = v24 in
    v10[1] = v31 in
    v23[0] = v3 in
    v46[0] = v8 in
    v13.p1 = v43 in
    v6[0] = v29 in
    let v39: [[Float]] = v19.p1 in
    let v28: [[Float]] = v7.p1 in
    v13.p1 = v28 in
    v23[0] = v29 in
    let v55: s0 = s0(v46, v39) in
    let v51: [[Float]] = v55.p1 in
    v13.p0 = v15 in
    v46[1] = v31 in
    v13.p0 = v10 in
    let v34: [[Float]] = v17.p1 in
    v13.p1 = v39 in
    v13.p1 = v51 in
    v13.p0 = v46 in
    v13.p1 = v28 in
    v13.p1 = v51 in
    v6[0] = v7 in
    let v53: [Float] = v34[0] in
    var v42: [s0] = v23 in
    v13.p1 = v39 in
    v46[1] = v22 in
    let v40: s0 = v42[0] in
    v13.p1 = v45 in
    v13.p0 = v16 in
    v10[1] = v53 in
    let v65: [[Float]] = v29.p1 in
    v23 = v0 in
    v13.p1 = v12 in
    let v87: [Float] = v51[2] in
    v5[0] = v40 in
    let v156: Float = v87[0] in
    v46 = v16 in
    v13.p1 = v65 in
    v156
  } in
  fun loop(i: Int, v0: [s0], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]])] in
    let v1: Float = 5.0 in
    let initialResult: Float = 5.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()