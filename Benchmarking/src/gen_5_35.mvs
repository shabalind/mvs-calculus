  struct s0 {
    var p0: [Float]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
    var p2: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: s1
  } in
  struct s3 {
    var p0: s2
    var p1: [s0]
  } in
  let f36: (Float) -> Float = (v0: Float) -> Float {
    var v2: Float = v0 in
    var v7: Float = v2 in
    var v3: Float = v7 in
    v3
  } in
  let noinline_f0: ([s3], Float) -> Float = (v0: [s3], v1: Float) -> Float {
    let v7: Float = f36(v1) in
    var v5: Float = v7 in
    let v4: Float = f36(v5) in
    var v17: Float = v1 in
    v17 = v5 in
    let v41: Float = v5 + v4 in
    let v190: Float = v5 / v17 in
    let v137: Float = v41 + v190 in
    v137
  } in
  fun loop(i: Int, v0: [s3], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s3] = [s3(s2([s0([0.0, 1.0], [[2.0]]), s0([3.0, 4.0], [[5.0]]), s0([6.0, 7.0], [[8.0]])], s1(s0([9.0, 10.0], [[11.0]]), [[s0([12.0, 13.0], [[14.0]])], [s0([15.0, 16.0], [[17.0]])]], s0([18.0, 19.0], [[20.0]]))), [s0([21.0, 22.0], [[23.0]])])] in
    let v1: Float = 24.0 in
    let initialResult: Float = 24.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()