  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: s0
    var p1: [[s1]]
  }
  struct s3 {
    var p0: s0
    var p1: [s2]
  }
  struct s4 {
    var p0: [[s2]]
    var p1: s2
    var p2: s0
  }
  struct s5 {
    var p0: s2
    var p1: s4
  }
  func f117(_ v0: s2, _ v1: s4) -> s4 {
    let v2: s0 = v0.p0
    let v3: [[Double]] = v2.p0
    var v13: s4 = v1
    let v5: s0 = v13.p2
    var v15: s0 = v2
    let v14: [[s2]] = v13.p0
    v13.p0 = v14
    var v26: s4 = v1
    let v30: s2 = v26.p1
    var v17: s0 = v15
    let v35: [s0] = [v15]
    var v40: [s0] = v35
    let v123: [[Double]] = v17.p0
    v40[0] = v17
    var v25: s0 = v5
    var v33: s4 = v1
    v13 = v26
    let v46: s0 = v40[0]
    let v52: s1 = s1(p0: v25, p1: v46)
    v33.p1 = v30
    v40[0] = v5
    let v101: s0 = v52.p1
    v25.p0 = v3
    let v76: s0 = v52.p1
    v17.p0 = v123
    v33.p2 = v76
    v15 = v101
    return v33
  }
  func f110(_ v0: [s2]) -> [s2] {
    let v5: s2 = v0[0]
    var v8: [s2] = v0
    let v3: [[s1]] = v5.p1
    let v6: [s1] = v3[0]
    let v2: s2 = v0[0]
    let v11: s2 = v0[0]
    let v7: s2 = v0[0]
    v8[0] = v11
    v8[0] = v11
    let v4: s0 = v7.p0
    let v9: [[s1]] = v11.p1
    v8[0] = v7
    var v15: s2 = v2
    v15.p1 = v9
    let v10: s1 = s1(p0: v4, p1: v4)
    let v23: [[s1]] = v5.p1
    let v13: s0 = v10.p0
    v8[0] = v5
    v8[0] = v7
    let v24: s2 = s2(p0: v13, p1: v9)
    v15.p1 = v23
    var v27: [s2] = v8
    let v35: [s0] = [v4, v13, v13, v13]
    v8[0] = v2
    v27[0] = v15
    var v33: [s0] = v35
    v27[0] = v5
    let v32: s0 = v24.p0
    v33[3] = v32
    let v21: s1 = v6[0]
    v33[3] = v4
    v27[0] = v24
    v8[0] = v15
    var v39: [s0] = v35
    v8[0] = v2
    v8[0] = v2
    let v89: s0 = v33[1]
    v15.p0 = v89
    let v31: s0 = v2.p0
    v8 = v27
    var v83: [s0] = v39
    let v78: s0 = v21.p1
    let v47: s0 = v5.p0
    let v179: s0 = v83[0]
    v33[0] = v179
    v15.p0 = v31
    v83[0] = v47
    v83 = v39
    v33[1] = v179
    v39[3] = v78
    return v27
  }
  func f102(_ v0: [Double]) -> [Double] {
    let v3: Double = v0[0]
    var v7: Double = v3
    let v5: Double = v0[0]
    let v10: Double = v0[0]
    let v1: [Double] = [v5, v3, v3]
    var v2: [Double] = v0
    v2[0] = v5
    var v8: [Double] = v0
    var v11: [Double] = v8
    var v6: [Double] = v8
    v11[0] = v5
    let v9: Double = v1[2]
    var v14: [Double] = v1
    var v13: [Double] = v6
    let v24: Double = v14[1]
    let v17: Double = v14[2]
    v6[0] = v5
    let v28: Double = v1[1]
    var v15: [Double] = v1
    v6[0] = v17
    let v25: Double = v0[0]
    let v18: Double = v11[0]
    var v34: [Double] = v1
    var v35: Double = v25
    let v42: Double = v14[2]
    var v27: Double = v9
    let v31: Double = v15[1]
    let v64: Double = v14[0]
    var v32: [Double] = v34
    let v29: Double = v11[0]
    let v23: Double = v11[0]
    v13[0] = v7
    v13[0] = v7
    var v22: [Double] = v14
    let v45: Double = v13[0]
    v32[1] = v24
    let v48: Double = v13[0]
    v14[1] = v35
    v15 = v22
    let v53: Double = v32[2]
    var v63: [Double] = v2
    v32[0] = v53
    v14[2] = v10
    let v26: [[Double]] = [v0, v11, v2, v11, v2, v8]
    v14[2] = v48
    let v41: [Double] = [v27, v45, v27, v23, v45, v18, v5]
    let v110: Double = v63[0]
    v22[2] = v25
    var v100: Double = v9
    v22[0] = v53
    v15[2] = v29
    v14[0] = v100
    v63[0] = v23
    let v56: [[[Double]]] = [v26, v26]
    v11[0] = v42
    v11[0] = v23
    let v79: [[Double]] = v56[0]
    let v81: Double = v41[5]
    var v65: [[Double]] = v79
    v11[0] = v81
    v22 = v1
    let v120: [Double] = v65[1]
    let v154: Double = v7 * v64
    v35 = v31
    v65[1] = v13
    v2[0] = v28
    v34[1] = v154
    v7 = v110
    return v120
  }
  func f96(_ v0: [s4]) -> [s4] {
    var v6: [s4] = v0
    let v1: s4 = v6[0]
    var v2: s4 = v1
    v6[0] = v2
    v6 = v0
    let v3: s0 = v1.p2
    var v5: s0 = v3
    v2.p2 = v3
    v6[0] = v1
    v6[0] = v1
    var v11: [s4] = v0
    let v8: s1 = s1(p0: v5, p1: v3)
    v6[0] = v2
    v11 = v6
    let v10: s4 = v6[0]
    let v7: s4 = v11[0]
    let v16: s0 = v8.p0
    let v12: [[s2]] = v10.p0
    v2.p2 = v16
    var v30: [[s2]] = v12
    var v9: [[s2]] = v30
    var v15: [[s2]] = v30
    v2.p2 = v3
    let v20: [s2] = v15[1]
    let v21: [s2] = f110(v20)
    let v19: [s2] = f110(v20)
    let v38: s2 = v20[0]
    var v41: s4 = v10
    let v18: s4 = v6[0]
    let v13: s4 = f117(v38, v10)
    v30[1] = v20
    v41.p1 = v38
    let v22: [[Double]] = v3.p0
    let v24: [[s2]] = v18.p0
    let v28: [s2] = f110(v20)
    v41.p0 = v24
    let v31: s2 = v7.p1
    let v35: [s2] = v30[1]
    var v29: [s2] = v21
    let v42: s2 = v19[0]
    let v58: [s2] = f110(v19)
    v9[1] = v35
    v9[1] = v58
    let v44: s4 = f117(v38, v1)
    let v27: s4 = f117(v42, v13)
    v30[0] = v58
    v29[0] = v31
    v5.p0 = v22
    v5.p0 = v22
    v9[0] = v29
    v6[0] = v7
    var v92: s4 = v44
    var v34: [s4] = v0
    var v66: s4 = v7
    v11[0] = v13
    var v55: s4 = v44
    let v32: s5 = s5(p0: v31, p1: v27)
    let v76: [s2] = f110(v28)
    v30[0] = v35
    var v175: s2 = v38
    var v62: [[Double]] = v22
    v92.p1 = v175
    v30[1] = v76
    let v118: s4 = f117(v31, v55)
    var v72: s5 = v32
    v6[0] = v66
    let v103: s4 = v72.p1
    let v93: s4 = f117(v42, v118)
    v41.p1 = v38
    let v85: [[s2]] = v41.p0
    var v109: [s2] = v76
    v15[0] = v20
    v55.p0 = v85
    let v111: s2 = v28[0]
    let v98: s2 = v109[0]
    v2.p0 = v15
    v72.p0 = v111
    v9[0] = v58
    v92 = v103
    var v147: [s4] = v34
    v72.p1 = v92
    v147[0] = v93
    let v162: s2 = v72.p0
    v2.p0 = v9
    v5.p0 = v62
    v29[0] = v98
    v109[0] = v162
    return v147
  }
  func f42(_ v0: Double, _ v1: [[s4]]) -> Double {
    var v5: [[s4]] = v1
    let v2: [s4] = v5[0]
    let v16: s4 = v2[0]
    let v11: [s4] = f96(v2)
    let v10: s0 = v16.p2
    var v42: s0 = v10
    let v32: [[Double]] = v42.p0
    let v54: [Double] = v32[0]
    v5[0] = v2
    let v22: [[Double]] = v10.p1
    var v65: [[Double]] = v32
    v65[0] = v54
    v65[0] = v54
    let v28: [Double] = f102(v54)
    v42.p0 = v65
    let v49: Double = v54[0]
    v65[0] = v28
    let v101: [Double] = v22[0]
    var v51: [[Double]] = v22
    let v74: [Double] = v51[1]
    v51 = v22
    v5[2] = v11
    v51[1] = v101
    v65[0] = v74
    v51[0] = v54
    var v77: Double = v49
    v65[0] = v74
    var v124: [Double] = v28
    v51[0] = v124
    return v77
  }
  @inline(never)
  func f0(_ v0: [s3], _ v1: [[s4]], _ v2: Double) -> Double {
    let v5: Double = f42(v2, v1)
    var v13: Double = v5
    var v19: Double = v13
    let v24: Double = v19 / v19
    return v24
  }
  func benchmark() {
    let v0: [s3] = [s3(p0: s0(p0: [[0.0]], p1: [[1.0], [2.0]]), p1: [s2(p0: s0(p0: [[3.0]], p1: [[4.0], [5.0]]), p1: [[s1(p0: s0(p0: [[6.0]], p1: [[7.0], [8.0]]), p1: s0(p0: [[9.0]], p1: [[10.0], [11.0]]))], [s1(p0: s0(p0: [[12.0]], p1: [[13.0], [14.0]]), p1: s0(p0: [[15.0]], p1: [[16.0], [17.0]]))]]), s2(p0: s0(p0: [[18.0]], p1: [[19.0], [20.0]]), p1: [[s1(p0: s0(p0: [[21.0]], p1: [[22.0], [23.0]]), p1: s0(p0: [[24.0]], p1: [[25.0], [26.0]]))], [s1(p0: s0(p0: [[27.0]], p1: [[28.0], [29.0]]), p1: s0(p0: [[30.0]], p1: [[31.0], [32.0]]))]])]), s3(p0: s0(p0: [[33.0]], p1: [[34.0], [35.0]]), p1: [s2(p0: s0(p0: [[36.0]], p1: [[37.0], [38.0]]), p1: [[s1(p0: s0(p0: [[39.0]], p1: [[40.0], [41.0]]), p1: s0(p0: [[42.0]], p1: [[43.0], [44.0]]))], [s1(p0: s0(p0: [[45.0]], p1: [[46.0], [47.0]]), p1: s0(p0: [[48.0]], p1: [[49.0], [50.0]]))]]), s2(p0: s0(p0: [[51.0]], p1: [[52.0], [53.0]]), p1: [[s1(p0: s0(p0: [[54.0]], p1: [[55.0], [56.0]]), p1: s0(p0: [[57.0]], p1: [[58.0], [59.0]]))], [s1(p0: s0(p0: [[60.0]], p1: [[61.0], [62.0]]), p1: s0(p0: [[63.0]], p1: [[64.0], [65.0]]))]])]), s3(p0: s0(p0: [[66.0]], p1: [[67.0], [68.0]]), p1: [s2(p0: s0(p0: [[69.0]], p1: [[70.0], [71.0]]), p1: [[s1(p0: s0(p0: [[72.0]], p1: [[73.0], [74.0]]), p1: s0(p0: [[75.0]], p1: [[76.0], [77.0]]))], [s1(p0: s0(p0: [[78.0]], p1: [[79.0], [80.0]]), p1: s0(p0: [[81.0]], p1: [[82.0], [83.0]]))]]), s2(p0: s0(p0: [[84.0]], p1: [[85.0], [86.0]]), p1: [[s1(p0: s0(p0: [[87.0]], p1: [[88.0], [89.0]]), p1: s0(p0: [[90.0]], p1: [[91.0], [92.0]]))], [s1(p0: s0(p0: [[93.0]], p1: [[94.0], [95.0]]), p1: s0(p0: [[96.0]], p1: [[97.0], [98.0]]))]])])]
    let v1: [[s4]] = [[s4(p0: [[s2(p0: s0(p0: [[99.0]], p1: [[100.0], [101.0]]), p1: [[s1(p0: s0(p0: [[102.0]], p1: [[103.0], [104.0]]), p1: s0(p0: [[105.0]], p1: [[106.0], [107.0]]))], [s1(p0: s0(p0: [[108.0]], p1: [[109.0], [110.0]]), p1: s0(p0: [[111.0]], p1: [[112.0], [113.0]]))]])], [s2(p0: s0(p0: [[114.0]], p1: [[115.0], [116.0]]), p1: [[s1(p0: s0(p0: [[117.0]], p1: [[118.0], [119.0]]), p1: s0(p0: [[120.0]], p1: [[121.0], [122.0]]))], [s1(p0: s0(p0: [[123.0]], p1: [[124.0], [125.0]]), p1: s0(p0: [[126.0]], p1: [[127.0], [128.0]]))]])]], p1: s2(p0: s0(p0: [[129.0]], p1: [[130.0], [131.0]]), p1: [[s1(p0: s0(p0: [[132.0]], p1: [[133.0], [134.0]]), p1: s0(p0: [[135.0]], p1: [[136.0], [137.0]]))], [s1(p0: s0(p0: [[138.0]], p1: [[139.0], [140.0]]), p1: s0(p0: [[141.0]], p1: [[142.0], [143.0]]))]]), p2: s0(p0: [[144.0]], p1: [[145.0], [146.0]]))], [s4(p0: [[s2(p0: s0(p0: [[147.0]], p1: [[148.0], [149.0]]), p1: [[s1(p0: s0(p0: [[150.0]], p1: [[151.0], [152.0]]), p1: s0(p0: [[153.0]], p1: [[154.0], [155.0]]))], [s1(p0: s0(p0: [[156.0]], p1: [[157.0], [158.0]]), p1: s0(p0: [[159.0]], p1: [[160.0], [161.0]]))]])], [s2(p0: s0(p0: [[162.0]], p1: [[163.0], [164.0]]), p1: [[s1(p0: s0(p0: [[165.0]], p1: [[166.0], [167.0]]), p1: s0(p0: [[168.0]], p1: [[169.0], [170.0]]))], [s1(p0: s0(p0: [[171.0]], p1: [[172.0], [173.0]]), p1: s0(p0: [[174.0]], p1: [[175.0], [176.0]]))]])]], p1: s2(p0: s0(p0: [[177.0]], p1: [[178.0], [179.0]]), p1: [[s1(p0: s0(p0: [[180.0]], p1: [[181.0], [182.0]]), p1: s0(p0: [[183.0]], p1: [[184.0], [185.0]]))], [s1(p0: s0(p0: [[186.0]], p1: [[187.0], [188.0]]), p1: s0(p0: [[189.0]], p1: [[190.0], [191.0]]))]]), p2: s0(p0: [[192.0]], p1: [[193.0], [194.0]]))], [s4(p0: [[s2(p0: s0(p0: [[195.0]], p1: [[196.0], [197.0]]), p1: [[s1(p0: s0(p0: [[198.0]], p1: [[199.0], [200.0]]), p1: s0(p0: [[201.0]], p1: [[202.0], [203.0]]))], [s1(p0: s0(p0: [[204.0]], p1: [[205.0], [206.0]]), p1: s0(p0: [[207.0]], p1: [[208.0], [209.0]]))]])], [s2(p0: s0(p0: [[210.0]], p1: [[211.0], [212.0]]), p1: [[s1(p0: s0(p0: [[213.0]], p1: [[214.0], [215.0]]), p1: s0(p0: [[216.0]], p1: [[217.0], [218.0]]))], [s1(p0: s0(p0: [[219.0]], p1: [[220.0], [221.0]]), p1: s0(p0: [[222.0]], p1: [[223.0], [224.0]]))]])]], p1: s2(p0: s0(p0: [[225.0]], p1: [[226.0], [227.0]]), p1: [[s1(p0: s0(p0: [[228.0]], p1: [[229.0], [230.0]]), p1: s0(p0: [[231.0]], p1: [[232.0], [233.0]]))], [s1(p0: s0(p0: [[234.0]], p1: [[235.0], [236.0]]), p1: s0(p0: [[237.0]], p1: [[238.0], [239.0]]))]]), p2: s0(p0: [[240.0]], p1: [[241.0], [242.0]]))]]
    let v2: Double = 243.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 243.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
