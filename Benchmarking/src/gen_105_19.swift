  import Dispatch
  struct s0 {
    var p0: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: s0
  }
  struct s2 {
    var p0: s1
    var p1: [[s0]]
  }
  struct s4 {
    var p0: [s1]
    var p1: s1
  }
  @inline(never)
  func f0(_ v0: [s4], _ v1: [s2], _ v2: [s2], _ v3: Double) -> Double {
    var v6: [s4] = v0
    let v13: s4 = v6[0]
    let v20: [s1] = v13.p0
    let v9: s1 = v20[0]
    let v17: s0 = v9.p1
    v6[0] = v13
    var v33: s0 = v17
    let v41: [[Double]] = v33.p0
    let v31: [Double] = v41[2]
    let v57: [[Double]] = v17.p0
    v33.p0 = v57
    v33.p0 = v41
    let v245: Double = v31[0]
    return v245
  }
  func benchmark() {
    let v0: [s4] = [s4(p0: [s1(p0: [s0(p0: [[0.0], [1.0], [2.0]])], p1: s0(p0: [[3.0], [4.0], [5.0]]))], p1: s1(p0: [s0(p0: [[6.0], [7.0], [8.0]])], p1: s0(p0: [[9.0], [10.0], [11.0]]))), s4(p0: [s1(p0: [s0(p0: [[12.0], [13.0], [14.0]])], p1: s0(p0: [[15.0], [16.0], [17.0]]))], p1: s1(p0: [s0(p0: [[18.0], [19.0], [20.0]])], p1: s0(p0: [[21.0], [22.0], [23.0]])))]
    let v1: [s2] = [s2(p0: s1(p0: [s0(p0: [[24.0], [25.0], [26.0]])], p1: s0(p0: [[27.0], [28.0], [29.0]])), p1: [[s0(p0: [[30.0], [31.0], [32.0]])], [s0(p0: [[33.0], [34.0], [35.0]])], [s0(p0: [[36.0], [37.0], [38.0]])]]), s2(p0: s1(p0: [s0(p0: [[39.0], [40.0], [41.0]])], p1: s0(p0: [[42.0], [43.0], [44.0]])), p1: [[s0(p0: [[45.0], [46.0], [47.0]])], [s0(p0: [[48.0], [49.0], [50.0]])], [s0(p0: [[51.0], [52.0], [53.0]])]])]
    let v2: [s2] = [s2(p0: s1(p0: [s0(p0: [[54.0], [55.0], [56.0]])], p1: s0(p0: [[57.0], [58.0], [59.0]])), p1: [[s0(p0: [[60.0], [61.0], [62.0]])], [s0(p0: [[63.0], [64.0], [65.0]])], [s0(p0: [[66.0], [67.0], [68.0]])]]), s2(p0: s1(p0: [s0(p0: [[69.0], [70.0], [71.0]])], p1: s0(p0: [[72.0], [73.0], [74.0]])), p1: [[s0(p0: [[75.0], [76.0], [77.0]])], [s0(p0: [[78.0], [79.0], [80.0]])], [s0(p0: [[81.0], [82.0], [83.0]])]])]
    let v3: Double = 84.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 84.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
