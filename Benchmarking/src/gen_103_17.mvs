  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
  } in
  struct s2 {
    var p0: [[s1]]
    var p1: [s0]
  } in
  struct s8 {
    var p0: s2
    var p1: [s1]
  } in
  let f15: (s0) -> s0 = (v0: s0) -> s0 {
    var v5: s0 = v0 in
    var v3: s0 = v0 in
    let v4: [[Float]] = v3.p1 in
    v5.p1 = v4 in
    var v7: s0 = v0 in
    var v6: [[Float]] = v4 in
    let v10: [[Float]] = v3.p1 in
    let v27: [[Float]] = v0.p1 in
    let v14: [[Float]] = v0.p1 in
    let v15: [[Float]] = v7.p1 in
    var v25: [[Float]] = v14 in
    let v22: [Float] = v27[0] in
    v7.p1 = v10 in
    let v54: [Float] = v27[0] in
    let v32: [[Float]] = v7.p0 in
    v6[0] = v22 in
    v7.p2 = v15 in
    v7.p2 = v4 in
    let v86: [[Float]] = v5.p0 in
    let v42: [Float] = v86[0] in
    v25[0] = v54 in
    let v47: s0 = s0(v32, v15, v14) in
    v7.p0 = v86 in
    let v87: [[Float]] = v3.p1 in
    v6[0] = v42 in
    v5.p1 = v25 in
    v3.p1 = v6 in
    v5.p2 = v87 in
    v47
  } in
  let noinline_f0: (s8, Float, s8) -> Float = (v0: s8, v1: Float, v2: s8) -> Float {
    let v5: s2 = v2.p0 in
    let v3: [s0] = v5.p1 in
    let v7: s0 = v3[1] in
    let v4: s0 = v3[1] in
    let v11: s0 = f15(v7) in
    let v23: [[Float]] = v11.p0 in
    let v18: [Float] = v23[1] in
    let v32: Float = v1 / v1 in
    let v40: [[Float]] = v4.p2 in
    let v25: Float = v18[0] in
    let v77: [Float] = v40[0] in
    let v78: Float = v77[0] in
    let v86: Float = v32 / v25 in
    let v135: Float = v78 * v86 in
    v135
  } in
  fun loop(i: Int, v0: s8, v1: Float, v2: s8, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s8 = s8(s2([[s1([[s0([[0.0], [1.0]], [[2.0]], [[3.0]])], [s0([[4.0], [5.0]], [[6.0]], [[7.0]])]], [s0([[8.0], [9.0]], [[10.0]], [[11.0]])])], [s1([[s0([[12.0], [13.0]], [[14.0]], [[15.0]])], [s0([[16.0], [17.0]], [[18.0]], [[19.0]])]], [s0([[20.0], [21.0]], [[22.0]], [[23.0]])])], [s1([[s0([[24.0], [25.0]], [[26.0]], [[27.0]])], [s0([[28.0], [29.0]], [[30.0]], [[31.0]])]], [s0([[32.0], [33.0]], [[34.0]], [[35.0]])])]], [s0([[36.0], [37.0]], [[38.0]], [[39.0]]), s0([[40.0], [41.0]], [[42.0]], [[43.0]])]), [s1([[s0([[44.0], [45.0]], [[46.0]], [[47.0]])], [s0([[48.0], [49.0]], [[50.0]], [[51.0]])]], [s0([[52.0], [53.0]], [[54.0]], [[55.0]])])]) in
    let v1: Float = 56.0 in
    let v2: s8 = s8(s2([[s1([[s0([[57.0], [58.0]], [[59.0]], [[60.0]])], [s0([[61.0], [62.0]], [[63.0]], [[64.0]])]], [s0([[65.0], [66.0]], [[67.0]], [[68.0]])])], [s1([[s0([[69.0], [70.0]], [[71.0]], [[72.0]])], [s0([[73.0], [74.0]], [[75.0]], [[76.0]])]], [s0([[77.0], [78.0]], [[79.0]], [[80.0]])])], [s1([[s0([[81.0], [82.0]], [[83.0]], [[84.0]])], [s0([[85.0], [86.0]], [[87.0]], [[88.0]])]], [s0([[89.0], [90.0]], [[91.0]], [[92.0]])])]], [s0([[93.0], [94.0]], [[95.0]], [[96.0]]), s0([[97.0], [98.0]], [[99.0]], [[100.0]])]), [s1([[s0([[101.0], [102.0]], [[103.0]], [[104.0]])], [s0([[105.0], [106.0]], [[107.0]], [[108.0]])]], [s0([[109.0], [110.0]], [[111.0]], [[112.0]])])]) in
    let initialResult: Float = s8(s2([[s1([[s0([[57.0], [58.0]], [[59.0]], [[60.0]])], [s0([[61.0], [62.0]], [[63.0]], [[64.0]])]], [s0([[65.0], [66.0]], [[67.0]], [[68.0]])])], [s1([[s0([[69.0], [70.0]], [[71.0]], [[72.0]])], [s0([[73.0], [74.0]], [[75.0]], [[76.0]])]], [s0([[77.0], [78.0]], [[79.0]], [[80.0]])])], [s1([[s0([[81.0], [82.0]], [[83.0]], [[84.0]])], [s0([[85.0], [86.0]], [[87.0]], [[88.0]])]], [s0([[89.0], [90.0]], [[91.0]], [[92.0]])])]], [s0([[93.0], [94.0]], [[95.0]], [[96.0]]), s0([[97.0], [98.0]], [[99.0]], [[100.0]])]), [s1([[s0([[101.0], [102.0]], [[103.0]], [[104.0]])], [s0([[105.0], [106.0]], [[107.0]], [[108.0]])]], [s0([[109.0], [110.0]], [[111.0]], [[112.0]])])]) in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()