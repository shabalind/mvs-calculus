  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: s1
    var p1: Double
  }
  struct s3 {
    var p0: Double
    var p1: [s2]
  }
  struct s4 {
    var p0: s3
    var p1: s0
  }
  struct s7 {
    var p0: s2
    var p1: [s4]
  }
  struct s10 {
    var p0: s7
    var p1: s2
  }
  func f96(_ v0: s7) -> s7 {
    let v6: [s7] = [v0, v0, v0, v0, v0, v0, v0]
    let v9: s7 = v6[4]
    return v9
  }
  func f68(_ v0: s7) -> s7 {
    var v5: s7 = v0
    let v6: s7 = f96(v5)
    let v14: s7 = f96(v6)
    return v14
  }
  func f6(_ v0: s7) -> s7 {
    let v8: s7 = f68(v0)
    let v15: [s7] = [v8]
    let v13: s7 = v15[0]
    let v11: s7 = f96(v13)
    let v38: s7 = f96(v11)
    return v38
  }
  @inline(never)
  func f0(_ v0: [s7], _ v1: Double) -> Double {
    var v3: [s7] = v0
    let v2: s7 = v3[2]
    let v6: s7 = v3[1]
    let v7: s2 = v2.p0
    let v5: s1 = v7.p0
    let v11: s7 = f96(v6)
    let v9: s7 = f6(v6)
    v3[1] = v6
    let v13: s0 = v5.p0
    let v21: s10 = s10(p0: v6, p1: v7)
    v3[2] = v6
    let v40: s7 = v3[0]
    var v71: s10 = v21
    let v50: s7 = v3[2]
    v3[1] = v9
    v71.p1 = v7
    v3[0] = v40
    v3[1] = v50
    let v61: [[Double]] = v13.p1
    var v48: [s7] = v0
    let v77: s2 = v71.p1
    let v193: [Double] = v61[2]
    v71.p0 = v11
    let v73: Double = v193[0]
    let v291: s7 = v48[1]
    let v60: Double = v77.p1
    let v178: Double = v1 + v60
    v3[2] = v291
    let v124: Double = v178 * v73
    return v124
  }
  func benchmark() {
    let v0: [s7] = [s7(p0: s2(p0: s1(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0], [4.0]]), p1: [s0(p0: [[5.0], [6.0]], p1: [[7.0], [8.0], [9.0]])]), p1: 10.0), p1: [s4(p0: s3(p0: 11.0, p1: [s2(p0: s1(p0: s0(p0: [[12.0], [13.0]], p1: [[14.0], [15.0], [16.0]]), p1: [s0(p0: [[17.0], [18.0]], p1: [[19.0], [20.0], [21.0]])]), p1: 22.0), s2(p0: s1(p0: s0(p0: [[23.0], [24.0]], p1: [[25.0], [26.0], [27.0]]), p1: [s0(p0: [[28.0], [29.0]], p1: [[30.0], [31.0], [32.0]])]), p1: 33.0)]), p1: s0(p0: [[34.0], [35.0]], p1: [[36.0], [37.0], [38.0]])), s4(p0: s3(p0: 39.0, p1: [s2(p0: s1(p0: s0(p0: [[40.0], [41.0]], p1: [[42.0], [43.0], [44.0]]), p1: [s0(p0: [[45.0], [46.0]], p1: [[47.0], [48.0], [49.0]])]), p1: 50.0), s2(p0: s1(p0: s0(p0: [[51.0], [52.0]], p1: [[53.0], [54.0], [55.0]]), p1: [s0(p0: [[56.0], [57.0]], p1: [[58.0], [59.0], [60.0]])]), p1: 61.0)]), p1: s0(p0: [[62.0], [63.0]], p1: [[64.0], [65.0], [66.0]])), s4(p0: s3(p0: 67.0, p1: [s2(p0: s1(p0: s0(p0: [[68.0], [69.0]], p1: [[70.0], [71.0], [72.0]]), p1: [s0(p0: [[73.0], [74.0]], p1: [[75.0], [76.0], [77.0]])]), p1: 78.0), s2(p0: s1(p0: s0(p0: [[79.0], [80.0]], p1: [[81.0], [82.0], [83.0]]), p1: [s0(p0: [[84.0], [85.0]], p1: [[86.0], [87.0], [88.0]])]), p1: 89.0)]), p1: s0(p0: [[90.0], [91.0]], p1: [[92.0], [93.0], [94.0]]))]), s7(p0: s2(p0: s1(p0: s0(p0: [[95.0], [96.0]], p1: [[97.0], [98.0], [99.0]]), p1: [s0(p0: [[100.0], [101.0]], p1: [[102.0], [103.0], [104.0]])]), p1: 105.0), p1: [s4(p0: s3(p0: 106.0, p1: [s2(p0: s1(p0: s0(p0: [[107.0], [108.0]], p1: [[109.0], [110.0], [111.0]]), p1: [s0(p0: [[112.0], [113.0]], p1: [[114.0], [115.0], [116.0]])]), p1: 117.0), s2(p0: s1(p0: s0(p0: [[118.0], [119.0]], p1: [[120.0], [121.0], [122.0]]), p1: [s0(p0: [[123.0], [124.0]], p1: [[125.0], [126.0], [127.0]])]), p1: 128.0)]), p1: s0(p0: [[129.0], [130.0]], p1: [[131.0], [132.0], [133.0]])), s4(p0: s3(p0: 134.0, p1: [s2(p0: s1(p0: s0(p0: [[135.0], [136.0]], p1: [[137.0], [138.0], [139.0]]), p1: [s0(p0: [[140.0], [141.0]], p1: [[142.0], [143.0], [144.0]])]), p1: 145.0), s2(p0: s1(p0: s0(p0: [[146.0], [147.0]], p1: [[148.0], [149.0], [150.0]]), p1: [s0(p0: [[151.0], [152.0]], p1: [[153.0], [154.0], [155.0]])]), p1: 156.0)]), p1: s0(p0: [[157.0], [158.0]], p1: [[159.0], [160.0], [161.0]])), s4(p0: s3(p0: 162.0, p1: [s2(p0: s1(p0: s0(p0: [[163.0], [164.0]], p1: [[165.0], [166.0], [167.0]]), p1: [s0(p0: [[168.0], [169.0]], p1: [[170.0], [171.0], [172.0]])]), p1: 173.0), s2(p0: s1(p0: s0(p0: [[174.0], [175.0]], p1: [[176.0], [177.0], [178.0]]), p1: [s0(p0: [[179.0], [180.0]], p1: [[181.0], [182.0], [183.0]])]), p1: 184.0)]), p1: s0(p0: [[185.0], [186.0]], p1: [[187.0], [188.0], [189.0]]))]), s7(p0: s2(p0: s1(p0: s0(p0: [[190.0], [191.0]], p1: [[192.0], [193.0], [194.0]]), p1: [s0(p0: [[195.0], [196.0]], p1: [[197.0], [198.0], [199.0]])]), p1: 200.0), p1: [s4(p0: s3(p0: 201.0, p1: [s2(p0: s1(p0: s0(p0: [[202.0], [203.0]], p1: [[204.0], [205.0], [206.0]]), p1: [s0(p0: [[207.0], [208.0]], p1: [[209.0], [210.0], [211.0]])]), p1: 212.0), s2(p0: s1(p0: s0(p0: [[213.0], [214.0]], p1: [[215.0], [216.0], [217.0]]), p1: [s0(p0: [[218.0], [219.0]], p1: [[220.0], [221.0], [222.0]])]), p1: 223.0)]), p1: s0(p0: [[224.0], [225.0]], p1: [[226.0], [227.0], [228.0]])), s4(p0: s3(p0: 229.0, p1: [s2(p0: s1(p0: s0(p0: [[230.0], [231.0]], p1: [[232.0], [233.0], [234.0]]), p1: [s0(p0: [[235.0], [236.0]], p1: [[237.0], [238.0], [239.0]])]), p1: 240.0), s2(p0: s1(p0: s0(p0: [[241.0], [242.0]], p1: [[243.0], [244.0], [245.0]]), p1: [s0(p0: [[246.0], [247.0]], p1: [[248.0], [249.0], [250.0]])]), p1: 251.0)]), p1: s0(p0: [[252.0], [253.0]], p1: [[254.0], [255.0], [256.0]])), s4(p0: s3(p0: 257.0, p1: [s2(p0: s1(p0: s0(p0: [[258.0], [259.0]], p1: [[260.0], [261.0], [262.0]]), p1: [s0(p0: [[263.0], [264.0]], p1: [[265.0], [266.0], [267.0]])]), p1: 268.0), s2(p0: s1(p0: s0(p0: [[269.0], [270.0]], p1: [[271.0], [272.0], [273.0]]), p1: [s0(p0: [[274.0], [275.0]], p1: [[276.0], [277.0], [278.0]])]), p1: 279.0)]), p1: s0(p0: [[280.0], [281.0]], p1: [[282.0], [283.0], [284.0]]))])]
    let v1: Double = 285.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 285.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
