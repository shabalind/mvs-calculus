  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s4 {
    var p0: [s1]
    var p1: [[s0]]
  } in
  struct s5 {
    var p0: [[s1]]
    var p1: s4
  } in
  let f51: ([s1]) -> [s1] = (v0: [s1]) -> [s1] {
    v0
  } in
  let noinline_f0: (s5, Float) -> Float = (v0: s5, v1: Float) -> Float {
    let v7: Float = v1 + v1 in
    let v6: s4 = v0.p1 in
    let v3: [s1] = v6.p0 in
    let v4: [[s1]] = v0.p0 in
    let v2: [s1] = f51(v3) in
    var v10: [[s1]] = v4 in
    var v9: [s1] = v2 in
    v10[0] = v2 in
    let v19: [s1] = v6.p0 in
    v10[1] = v19 in
    v10 = v4 in
    var v18: Float = v7 in
    v10[1] = v2 in
    let v14: [s1] = v4[0] in
    let v15: s1 = v9[0] in
    let v27: [s0] = v15.p1 in
    var v16: s1 = v15 in
    v10[0] = v14 in
    let v42: s0 = v27[1] in
    let v24: s1 = v19[0] in
    v16.p0 = v27 in
    let v25: [s0] = v15.p0 in
    let v63: [[Float]] = v42.p0 in
    let v51: [Float] = v63[0] in
    v9[0] = v24 in
    var v48: s1 = v16 in
    v9[0] = v16 in
    let v114: Float = v51[0] in
    v10[1] = v2 in
    v48.p1 = v27 in
    let v91: Float = v18 - v1 in
    v48.p1 = v27 in
    v16.p1 = v27 in
    var v105: s1 = v16 in
    v9[0] = v48 in
    let v79: [s1] = v10[0] in
    v9[0] = v105 in
    let v73: Float = v114 / v91 in
    let v173: s1 = v79[0] in
    v9[0] = v173 in
    v105.p1 = v25 in
    v73
  } in
  fun loop(i: Int, v0: s5, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s5 = s5([[s1([s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]), s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]]), s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]])], [s0([[15.0], [16.0]], [[17.0], [18.0], [19.0]]), s0([[20.0], [21.0]], [[22.0], [23.0], [24.0]]), s0([[25.0], [26.0]], [[27.0], [28.0], [29.0]])])], [s1([s0([[30.0], [31.0]], [[32.0], [33.0], [34.0]]), s0([[35.0], [36.0]], [[37.0], [38.0], [39.0]]), s0([[40.0], [41.0]], [[42.0], [43.0], [44.0]])], [s0([[45.0], [46.0]], [[47.0], [48.0], [49.0]]), s0([[50.0], [51.0]], [[52.0], [53.0], [54.0]]), s0([[55.0], [56.0]], [[57.0], [58.0], [59.0]])])]], s4([s1([s0([[60.0], [61.0]], [[62.0], [63.0], [64.0]]), s0([[65.0], [66.0]], [[67.0], [68.0], [69.0]]), s0([[70.0], [71.0]], [[72.0], [73.0], [74.0]])], [s0([[75.0], [76.0]], [[77.0], [78.0], [79.0]]), s0([[80.0], [81.0]], [[82.0], [83.0], [84.0]]), s0([[85.0], [86.0]], [[87.0], [88.0], [89.0]])])], [[s0([[90.0], [91.0]], [[92.0], [93.0], [94.0]])]])) in
    let v1: Float = 95.0 in
    let initialResult: Float = 95.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()