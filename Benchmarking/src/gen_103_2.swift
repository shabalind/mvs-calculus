  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: s0
    var p1: s0
  }
  struct s3 {
    var p0: [[s1]]
    var p1: s2
  }
  struct s4 {
    var p0: s1
    var p1: [s3]
  }
  struct s5 {
    var p0: s4
  }
  struct s7 {
    var p0: s2
    var p1: s5
  }
  struct s8 {
    var p0: s7
    var p1: [s7]
  }
  struct s9 {
    var p0: s8
    var p1: [s1]
  }
  struct s11 {
    var p0: s9
    var p1: s2
  }
  struct s13 {
    var p0: s11
    var p1: [s5]
  }
  func f109(_ v0: s4) -> s4 {
    let v3: s1 = v0.p0
    var v6: s1 = v3
    var v7: s1 = v6
    v6 = v3
    var v5: s1 = v3
    v5 = v6
    var v4: s1 = v7
    let v11: [s3] = v0.p1
    let v9: s3 = v11[0]
    let v2: s2 = v9.p1
    let v25: s0 = v4.p1
    var v17: s4 = v0
    v17.p0 = v7
    v7.p0 = v25
    var v21: s2 = v2
    v4 = v5
    let v28: s0 = v21.p0
    let v16: s0 = v7.p0
    let v23: s0 = v21.p0
    var v38: s0 = v16
    let v62: [[Double]] = v25.p1
    v21.p0 = v25
    let v49: [s3] = v17.p1
    v6.p1 = v28
    v6.p0 = v23
    let v53: [[Double]] = v23.p0
    let v40: s0 = s0(p0: v53, p1: v62)
    let v57: s5 = s5(p0: v17)
    var v56: s5 = v57
    v5.p0 = v40
    var v92: s5 = v56
    let v75: s0 = v21.p0
    v7.p0 = v75
    v7.p1 = v38
    v92.p0 = v0
    let v142: s4 = v92.p0
    v17.p1 = v49
    v21.p1 = v38
    var v144: s4 = v142
    v38.p0 = v53
    return v144
  }
  func f100(_ v0: s4) -> s4 {
    let v7: s4 = f109(v0)
    let v4: [s3] = v0.p1
    let v6: s1 = v7.p0
    var v8: s1 = v6
    var v3: s4 = v7
    let v9: s4 = f109(v3)
    var v5: s1 = v6
    let v21: s4 = f109(v9)
    v3.p1 = v4
    let v1: [s3] = v3.p1
    var v2: s4 = v7
    var v13: [s3] = v1
    let v11: s3 = v4[0]
    var v14: s3 = v11
    v13[0] = v14
    let v16: s4 = f109(v21)
    var v19: s4 = v7
    v13[0] = v11
    var v24: [s3] = v1
    let v25: s3 = v13[0]
    v3.p1 = v24
    let v26: s3 = v4[0]
    let v52: s3 = v24[0]
    v3.p1 = v13
    var v39: s3 = v25
    let v47: s4 = f109(v7)
    var v54: s4 = v16
    let v30: s4 = f109(v2)
    v2.p1 = v24
    let v32: [[s1]] = v26.p0
    v3.p1 = v1
    let v22: s3 = v4[0]
    let v38: s3 = v13[0]
    let v35: s3 = v4[0]
    v14.p0 = v32
    v8 = v5
    v24[0] = v14
    v24[0] = v22
    v2 = v47
    let v61: [s3] = v19.p1
    v19.p0 = v5
    let v45: s3 = v61[0]
    let v40: s3 = v4[0]
    v24[0] = v26
    let v31: s2 = v26.p1
    let v84: s2 = v40.p1
    let v71: s0 = v8.p0
    var v36: s2 = v84
    v8.p0 = v71
    let v58: s0 = v31.p1
    v54.p0 = v5
    let v78: s2 = v52.p1
    let v41: s0 = v6.p1
    var v44: s1 = v8
    let v77: s0 = v8.p0
    v24[0] = v35
    var v67: s3 = v39
    v24[0] = v52
    v3 = v30
    v24[0] = v67
    v13[0] = v45
    v14.p0 = v32
    let v226: s0 = v78.p0
    v24[0] = v52
    v44.p1 = v226
    let v140: s0 = v5.p0
    let v75: s0 = v36.p1
    v3.p0 = v44
    v36.p0 = v77
    v3.p1 = v1
    v67.p1 = v78
    v5.p0 = v75
    v24[0] = v26
    v13[0] = v38
    v44.p1 = v58
    v44.p1 = v140
    v39.p1 = v84
    v8.p0 = v41
    return v54
  }
  func f68(_ v0: s0) -> s0 {
    return v0
  }
  func f49(_ v0: s1) -> s1 {
    var v21: s1 = v0
    let v13: s0 = v21.p0
    let v31: s0 = f68(v13)
    v21.p0 = v31
    return v21
  }
  func f32(_ v0: s1) -> s1 {
    var v6: s1 = v0
    let v2: s1 = f49(v6)
    let v7: [s1] = [v6, v6, v6, v2, v2, v0]
    var v4: [s1] = v7
    let v3: s1 = f49(v0)
    var v1: [s1] = v4
    let v10: [[s1]] = [v1, v7]
    let v5: s1 = f49(v3)
    var v19: [s1] = v4
    v4[4] = v3
    v1[3] = v6
    let v15: s0 = v0.p0
    let v12: s0 = f68(v15)
    var v14: s0 = v12
    v19[1] = v6
    let v16: s0 = v5.p0
    let v11: s1 = v19[5]
    var v30: [[s1]] = v10
    let v13: [s1] = v30[1]
    var v17: s0 = v14
    let v20: s1 = f49(v11)
    v6.p1 = v14
    v4 = v13
    v19[4] = v20
    v6.p0 = v17
    let v47: s1 = f49(v2)
    v6.p0 = v15
    let v27: s0 = v5.p1
    let v35: s0 = f68(v27)
    let v174: s1 = f49(v47)
    v4[1] = v47
    let v62: [[Double]] = v16.p1
    let v41: s1 = f49(v174)
    v1[1] = v47
    v6.p1 = v35
    v14.p1 = v62
    v19[5] = v41
    var v94: s1 = v20
    return v94
  }
  func f25(_ v0: s5) -> s5 {
    let v1: s4 = v0.p0
    let v4: s4 = f109(v1)
    var v62: s5 = v0
    v62.p0 = v4
    return v62
  }
  func f20(_ v0: Double, _ v1: s5) -> Double {
    let v8: s5 = f25(v1)
    var v5: Double = v0
    let v4: s4 = v8.p0
    let v2: Double = v5 - v0
    var v13: Double = v2
    let v20: s1 = v4.p0
    var v33: Double = v0
    let v43: s1 = f49(v20)
    let v36: s0 = v43.p1
    let v51: [[Double]] = v36.p1
    let v39: [Double] = v51[0]
    let v16: Double = v39[0]
    let v40: Double = v13 - v16
    v13 = v33
    return v40
  }
  func f16(_ v0: s1) -> s1 {
    let v4: s1 = f49(v0)
    let v3: [s1] = [v0, v4, v4, v4, v4, v4]
    var v8: [s1] = v3
    let v11: s1 = v8[4]
    return v11
  }
  func f5(_ v0: s5) -> s5 {
    let v3: s4 = v0.p0
    let v4: s5 = f25(v0)
    var v8: s5 = v4
    v8.p0 = v3
    v8.p0 = v3
    let v19: s4 = v4.p0
    let v16: s4 = v8.p0
    let v15: s4 = f109(v3)
    var v12: s5 = v8
    let v36: s5 = f25(v0)
    v8.p0 = v15
    let v27: s4 = f109(v3)
    let v49: [s4] = [v3, v3, v19, v15]
    v8.p0 = v27
    let v29: s4 = f109(v16)
    v12.p0 = v27
    let v60: s4 = v49[0]
    v8.p0 = v60
    v8.p0 = v19
    var v42: s4 = v15
    let v37: s5 = f25(v36)
    let v61: s4 = v37.p0
    v12.p0 = v27
    v12.p0 = v29
    v8.p0 = v61
    v8.p0 = v61
    v42 = v27
    v12.p0 = v3
    let v101: s4 = f100(v42)
    v8.p0 = v101
    v12.p0 = v3
    var v89: s5 = v8
    v12 = v89
    return v12
  }
  @inline(never)
  func f0(_ v0: s13, _ v1: s13, _ v2: Double) -> Double {
    let v6: s11 = v0.p0
    var v7: Double = v2
    var v3: s13 = v1
    let v4: [s5] = v3.p1
    v7 = v2
    let v5: s5 = v4[0]
    let v11: s4 = v5.p0
    let v14: s5 = v4[0]
    v3.p1 = v4
    v3.p0 = v6
    v3.p0 = v6
    let v30: s5 = v4[1]
    v3.p0 = v6
    v3.p1 = v4
    let v18: s4 = v30.p0
    v3 = v0
    v7 = v2
    var v12: s4 = v11
    let v26: s1 = v11.p0
    var v49: s5 = v14
    let v32: s1 = f32(v26)
    var v20: s11 = v6
    v49.p0 = v18
    var v50: s1 = v32
    let v74: s1 = f16(v26)
    let v41: s1 = f32(v74)
    var v75: s11 = v20
    v12.p0 = v26
    let v67: s5 = f5(v49)
    v12.p0 = v74
    v50 = v41
    v12.p0 = v50
    v12.p0 = v50
    var v82: Double = v2
    v49.p0 = v12
    let v220: Double = f20(v82, v67)
    v3.p0 = v75
    let v343: Double = v7 - v220
    return v343
  }
  func benchmark() {
    let v0: s13 = s13(p0: s11(p0: s9(p0: s8(p0: s7(p0: s2(p0: s0(p0: [[0.0]], p1: [[1.0], [2.0]]), p1: s0(p0: [[3.0]], p1: [[4.0], [5.0]])), p1: s5(p0: s4(p0: s1(p0: s0(p0: [[6.0]], p1: [[7.0], [8.0]]), p1: s0(p0: [[9.0]], p1: [[10.0], [11.0]])), p1: [s3(p0: [[s1(p0: s0(p0: [[12.0]], p1: [[13.0], [14.0]]), p1: s0(p0: [[15.0]], p1: [[16.0], [17.0]]))]], p1: s2(p0: s0(p0: [[18.0]], p1: [[19.0], [20.0]]), p1: s0(p0: [[21.0]], p1: [[22.0], [23.0]])))]))), p1: [s7(p0: s2(p0: s0(p0: [[24.0]], p1: [[25.0], [26.0]]), p1: s0(p0: [[27.0]], p1: [[28.0], [29.0]])), p1: s5(p0: s4(p0: s1(p0: s0(p0: [[30.0]], p1: [[31.0], [32.0]]), p1: s0(p0: [[33.0]], p1: [[34.0], [35.0]])), p1: [s3(p0: [[s1(p0: s0(p0: [[36.0]], p1: [[37.0], [38.0]]), p1: s0(p0: [[39.0]], p1: [[40.0], [41.0]]))]], p1: s2(p0: s0(p0: [[42.0]], p1: [[43.0], [44.0]]), p1: s0(p0: [[45.0]], p1: [[46.0], [47.0]])))])))]), p1: [s1(p0: s0(p0: [[48.0]], p1: [[49.0], [50.0]]), p1: s0(p0: [[51.0]], p1: [[52.0], [53.0]])), s1(p0: s0(p0: [[54.0]], p1: [[55.0], [56.0]]), p1: s0(p0: [[57.0]], p1: [[58.0], [59.0]]))]), p1: s2(p0: s0(p0: [[60.0]], p1: [[61.0], [62.0]]), p1: s0(p0: [[63.0]], p1: [[64.0], [65.0]]))), p1: [s5(p0: s4(p0: s1(p0: s0(p0: [[66.0]], p1: [[67.0], [68.0]]), p1: s0(p0: [[69.0]], p1: [[70.0], [71.0]])), p1: [s3(p0: [[s1(p0: s0(p0: [[72.0]], p1: [[73.0], [74.0]]), p1: s0(p0: [[75.0]], p1: [[76.0], [77.0]]))]], p1: s2(p0: s0(p0: [[78.0]], p1: [[79.0], [80.0]]), p1: s0(p0: [[81.0]], p1: [[82.0], [83.0]])))])), s5(p0: s4(p0: s1(p0: s0(p0: [[84.0]], p1: [[85.0], [86.0]]), p1: s0(p0: [[87.0]], p1: [[88.0], [89.0]])), p1: [s3(p0: [[s1(p0: s0(p0: [[90.0]], p1: [[91.0], [92.0]]), p1: s0(p0: [[93.0]], p1: [[94.0], [95.0]]))]], p1: s2(p0: s0(p0: [[96.0]], p1: [[97.0], [98.0]]), p1: s0(p0: [[99.0]], p1: [[100.0], [101.0]])))])), s5(p0: s4(p0: s1(p0: s0(p0: [[102.0]], p1: [[103.0], [104.0]]), p1: s0(p0: [[105.0]], p1: [[106.0], [107.0]])), p1: [s3(p0: [[s1(p0: s0(p0: [[108.0]], p1: [[109.0], [110.0]]), p1: s0(p0: [[111.0]], p1: [[112.0], [113.0]]))]], p1: s2(p0: s0(p0: [[114.0]], p1: [[115.0], [116.0]]), p1: s0(p0: [[117.0]], p1: [[118.0], [119.0]])))]))])
    let v1: s13 = s13(p0: s11(p0: s9(p0: s8(p0: s7(p0: s2(p0: s0(p0: [[120.0]], p1: [[121.0], [122.0]]), p1: s0(p0: [[123.0]], p1: [[124.0], [125.0]])), p1: s5(p0: s4(p0: s1(p0: s0(p0: [[126.0]], p1: [[127.0], [128.0]]), p1: s0(p0: [[129.0]], p1: [[130.0], [131.0]])), p1: [s3(p0: [[s1(p0: s0(p0: [[132.0]], p1: [[133.0], [134.0]]), p1: s0(p0: [[135.0]], p1: [[136.0], [137.0]]))]], p1: s2(p0: s0(p0: [[138.0]], p1: [[139.0], [140.0]]), p1: s0(p0: [[141.0]], p1: [[142.0], [143.0]])))]))), p1: [s7(p0: s2(p0: s0(p0: [[144.0]], p1: [[145.0], [146.0]]), p1: s0(p0: [[147.0]], p1: [[148.0], [149.0]])), p1: s5(p0: s4(p0: s1(p0: s0(p0: [[150.0]], p1: [[151.0], [152.0]]), p1: s0(p0: [[153.0]], p1: [[154.0], [155.0]])), p1: [s3(p0: [[s1(p0: s0(p0: [[156.0]], p1: [[157.0], [158.0]]), p1: s0(p0: [[159.0]], p1: [[160.0], [161.0]]))]], p1: s2(p0: s0(p0: [[162.0]], p1: [[163.0], [164.0]]), p1: s0(p0: [[165.0]], p1: [[166.0], [167.0]])))])))]), p1: [s1(p0: s0(p0: [[168.0]], p1: [[169.0], [170.0]]), p1: s0(p0: [[171.0]], p1: [[172.0], [173.0]])), s1(p0: s0(p0: [[174.0]], p1: [[175.0], [176.0]]), p1: s0(p0: [[177.0]], p1: [[178.0], [179.0]]))]), p1: s2(p0: s0(p0: [[180.0]], p1: [[181.0], [182.0]]), p1: s0(p0: [[183.0]], p1: [[184.0], [185.0]]))), p1: [s5(p0: s4(p0: s1(p0: s0(p0: [[186.0]], p1: [[187.0], [188.0]]), p1: s0(p0: [[189.0]], p1: [[190.0], [191.0]])), p1: [s3(p0: [[s1(p0: s0(p0: [[192.0]], p1: [[193.0], [194.0]]), p1: s0(p0: [[195.0]], p1: [[196.0], [197.0]]))]], p1: s2(p0: s0(p0: [[198.0]], p1: [[199.0], [200.0]]), p1: s0(p0: [[201.0]], p1: [[202.0], [203.0]])))])), s5(p0: s4(p0: s1(p0: s0(p0: [[204.0]], p1: [[205.0], [206.0]]), p1: s0(p0: [[207.0]], p1: [[208.0], [209.0]])), p1: [s3(p0: [[s1(p0: s0(p0: [[210.0]], p1: [[211.0], [212.0]]), p1: s0(p0: [[213.0]], p1: [[214.0], [215.0]]))]], p1: s2(p0: s0(p0: [[216.0]], p1: [[217.0], [218.0]]), p1: s0(p0: [[219.0]], p1: [[220.0], [221.0]])))])), s5(p0: s4(p0: s1(p0: s0(p0: [[222.0]], p1: [[223.0], [224.0]]), p1: s0(p0: [[225.0]], p1: [[226.0], [227.0]])), p1: [s3(p0: [[s1(p0: s0(p0: [[228.0]], p1: [[229.0], [230.0]]), p1: s0(p0: [[231.0]], p1: [[232.0], [233.0]]))]], p1: s2(p0: s0(p0: [[234.0]], p1: [[235.0], [236.0]]), p1: s0(p0: [[237.0]], p1: [[238.0], [239.0]])))]))])
    let v2: Double = 240.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 240.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
