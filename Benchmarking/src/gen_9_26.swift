  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: s0
    var p1: [s1]
  }
  struct s3 {
    var p0: s1
    var p1: [[s1]]
  }
  struct s4 {
    var p0: s3
    var p1: s3
  }
  struct s5 {
    var p0: [s2]
  }
  struct s6 {
    var p0: [s0]
    var p1: s5
    var p2: [[s4]]
    var p3: [s2]
    var p4: s3
  }
  struct s8 {
    var p0: s2
    var p1: s5
  }
  struct s9 {
    var p0: s0
    var p1: s6
  }
  struct s12 {
    var p0: s4
    var p1: s8
  }
  @inline(never)
  func f0(_ v0: Double, _ v1: s9, _ v2: s12, _ v3: [[s1]]) -> Double {
    let v4: [s1] = v3[0]
    let v10: s1 = v4[0]
    let v29: [s0] = v10.p1
    let v39: s0 = v1.p0
    let v84: s0 = v29[2]
    let v40: [[Double]] = v39.p0
    let v74: [[Double]] = v84.p1
    let v138: [[[Double]]] = [v74, v74, v40, v40]
    let v157: [[Double]] = v138[3]
    let v259: [Double] = v157[1]
    let v281: Double = v259[0]
    return v281
  }
  func benchmark() {
    let v0: Double = 0.0
    let v1: s9 = s9(p0: s0(p0: [[1.0], [2.0], [3.0]], p1: [[4.0], [5.0], [6.0]]), p1: s6(p0: [s0(p0: [[7.0], [8.0], [9.0]], p1: [[10.0], [11.0], [12.0]])], p1: s5(p0: [s2(p0: s0(p0: [[13.0], [14.0], [15.0]], p1: [[16.0], [17.0], [18.0]]), p1: [s1(p0: s0(p0: [[19.0], [20.0], [21.0]], p1: [[22.0], [23.0], [24.0]]), p1: [s0(p0: [[25.0], [26.0], [27.0]], p1: [[28.0], [29.0], [30.0]]), s0(p0: [[31.0], [32.0], [33.0]], p1: [[34.0], [35.0], [36.0]]), s0(p0: [[37.0], [38.0], [39.0]], p1: [[40.0], [41.0], [42.0]])]), s1(p0: s0(p0: [[43.0], [44.0], [45.0]], p1: [[46.0], [47.0], [48.0]]), p1: [s0(p0: [[49.0], [50.0], [51.0]], p1: [[52.0], [53.0], [54.0]]), s0(p0: [[55.0], [56.0], [57.0]], p1: [[58.0], [59.0], [60.0]]), s0(p0: [[61.0], [62.0], [63.0]], p1: [[64.0], [65.0], [66.0]])]), s1(p0: s0(p0: [[67.0], [68.0], [69.0]], p1: [[70.0], [71.0], [72.0]]), p1: [s0(p0: [[73.0], [74.0], [75.0]], p1: [[76.0], [77.0], [78.0]]), s0(p0: [[79.0], [80.0], [81.0]], p1: [[82.0], [83.0], [84.0]]), s0(p0: [[85.0], [86.0], [87.0]], p1: [[88.0], [89.0], [90.0]])])])]), p2: [[s4(p0: s3(p0: s1(p0: s0(p0: [[91.0], [92.0], [93.0]], p1: [[94.0], [95.0], [96.0]]), p1: [s0(p0: [[97.0], [98.0], [99.0]], p1: [[100.0], [101.0], [102.0]]), s0(p0: [[103.0], [104.0], [105.0]], p1: [[106.0], [107.0], [108.0]]), s0(p0: [[109.0], [110.0], [111.0]], p1: [[112.0], [113.0], [114.0]])]), p1: [[s1(p0: s0(p0: [[115.0], [116.0], [117.0]], p1: [[118.0], [119.0], [120.0]]), p1: [s0(p0: [[121.0], [122.0], [123.0]], p1: [[124.0], [125.0], [126.0]]), s0(p0: [[127.0], [128.0], [129.0]], p1: [[130.0], [131.0], [132.0]]), s0(p0: [[133.0], [134.0], [135.0]], p1: [[136.0], [137.0], [138.0]])])], [s1(p0: s0(p0: [[139.0], [140.0], [141.0]], p1: [[142.0], [143.0], [144.0]]), p1: [s0(p0: [[145.0], [146.0], [147.0]], p1: [[148.0], [149.0], [150.0]]), s0(p0: [[151.0], [152.0], [153.0]], p1: [[154.0], [155.0], [156.0]]), s0(p0: [[157.0], [158.0], [159.0]], p1: [[160.0], [161.0], [162.0]])])], [s1(p0: s0(p0: [[163.0], [164.0], [165.0]], p1: [[166.0], [167.0], [168.0]]), p1: [s0(p0: [[169.0], [170.0], [171.0]], p1: [[172.0], [173.0], [174.0]]), s0(p0: [[175.0], [176.0], [177.0]], p1: [[178.0], [179.0], [180.0]]), s0(p0: [[181.0], [182.0], [183.0]], p1: [[184.0], [185.0], [186.0]])])]]), p1: s3(p0: s1(p0: s0(p0: [[187.0], [188.0], [189.0]], p1: [[190.0], [191.0], [192.0]]), p1: [s0(p0: [[193.0], [194.0], [195.0]], p1: [[196.0], [197.0], [198.0]]), s0(p0: [[199.0], [200.0], [201.0]], p1: [[202.0], [203.0], [204.0]]), s0(p0: [[205.0], [206.0], [207.0]], p1: [[208.0], [209.0], [210.0]])]), p1: [[s1(p0: s0(p0: [[211.0], [212.0], [213.0]], p1: [[214.0], [215.0], [216.0]]), p1: [s0(p0: [[217.0], [218.0], [219.0]], p1: [[220.0], [221.0], [222.0]]), s0(p0: [[223.0], [224.0], [225.0]], p1: [[226.0], [227.0], [228.0]]), s0(p0: [[229.0], [230.0], [231.0]], p1: [[232.0], [233.0], [234.0]])])], [s1(p0: s0(p0: [[235.0], [236.0], [237.0]], p1: [[238.0], [239.0], [240.0]]), p1: [s0(p0: [[241.0], [242.0], [243.0]], p1: [[244.0], [245.0], [246.0]]), s0(p0: [[247.0], [248.0], [249.0]], p1: [[250.0], [251.0], [252.0]]), s0(p0: [[253.0], [254.0], [255.0]], p1: [[256.0], [257.0], [258.0]])])], [s1(p0: s0(p0: [[259.0], [260.0], [261.0]], p1: [[262.0], [263.0], [264.0]]), p1: [s0(p0: [[265.0], [266.0], [267.0]], p1: [[268.0], [269.0], [270.0]]), s0(p0: [[271.0], [272.0], [273.0]], p1: [[274.0], [275.0], [276.0]]), s0(p0: [[277.0], [278.0], [279.0]], p1: [[280.0], [281.0], [282.0]])])]]))]], p3: [s2(p0: s0(p0: [[283.0], [284.0], [285.0]], p1: [[286.0], [287.0], [288.0]]), p1: [s1(p0: s0(p0: [[289.0], [290.0], [291.0]], p1: [[292.0], [293.0], [294.0]]), p1: [s0(p0: [[295.0], [296.0], [297.0]], p1: [[298.0], [299.0], [300.0]]), s0(p0: [[301.0], [302.0], [303.0]], p1: [[304.0], [305.0], [306.0]]), s0(p0: [[307.0], [308.0], [309.0]], p1: [[310.0], [311.0], [312.0]])]), s1(p0: s0(p0: [[313.0], [314.0], [315.0]], p1: [[316.0], [317.0], [318.0]]), p1: [s0(p0: [[319.0], [320.0], [321.0]], p1: [[322.0], [323.0], [324.0]]), s0(p0: [[325.0], [326.0], [327.0]], p1: [[328.0], [329.0], [330.0]]), s0(p0: [[331.0], [332.0], [333.0]], p1: [[334.0], [335.0], [336.0]])]), s1(p0: s0(p0: [[337.0], [338.0], [339.0]], p1: [[340.0], [341.0], [342.0]]), p1: [s0(p0: [[343.0], [344.0], [345.0]], p1: [[346.0], [347.0], [348.0]]), s0(p0: [[349.0], [350.0], [351.0]], p1: [[352.0], [353.0], [354.0]]), s0(p0: [[355.0], [356.0], [357.0]], p1: [[358.0], [359.0], [360.0]])])]), s2(p0: s0(p0: [[361.0], [362.0], [363.0]], p1: [[364.0], [365.0], [366.0]]), p1: [s1(p0: s0(p0: [[367.0], [368.0], [369.0]], p1: [[370.0], [371.0], [372.0]]), p1: [s0(p0: [[373.0], [374.0], [375.0]], p1: [[376.0], [377.0], [378.0]]), s0(p0: [[379.0], [380.0], [381.0]], p1: [[382.0], [383.0], [384.0]]), s0(p0: [[385.0], [386.0], [387.0]], p1: [[388.0], [389.0], [390.0]])]), s1(p0: s0(p0: [[391.0], [392.0], [393.0]], p1: [[394.0], [395.0], [396.0]]), p1: [s0(p0: [[397.0], [398.0], [399.0]], p1: [[400.0], [401.0], [402.0]]), s0(p0: [[403.0], [404.0], [405.0]], p1: [[406.0], [407.0], [408.0]]), s0(p0: [[409.0], [410.0], [411.0]], p1: [[412.0], [413.0], [414.0]])]), s1(p0: s0(p0: [[415.0], [416.0], [417.0]], p1: [[418.0], [419.0], [420.0]]), p1: [s0(p0: [[421.0], [422.0], [423.0]], p1: [[424.0], [425.0], [426.0]]), s0(p0: [[427.0], [428.0], [429.0]], p1: [[430.0], [431.0], [432.0]]), s0(p0: [[433.0], [434.0], [435.0]], p1: [[436.0], [437.0], [438.0]])])]), s2(p0: s0(p0: [[439.0], [440.0], [441.0]], p1: [[442.0], [443.0], [444.0]]), p1: [s1(p0: s0(p0: [[445.0], [446.0], [447.0]], p1: [[448.0], [449.0], [450.0]]), p1: [s0(p0: [[451.0], [452.0], [453.0]], p1: [[454.0], [455.0], [456.0]]), s0(p0: [[457.0], [458.0], [459.0]], p1: [[460.0], [461.0], [462.0]]), s0(p0: [[463.0], [464.0], [465.0]], p1: [[466.0], [467.0], [468.0]])]), s1(p0: s0(p0: [[469.0], [470.0], [471.0]], p1: [[472.0], [473.0], [474.0]]), p1: [s0(p0: [[475.0], [476.0], [477.0]], p1: [[478.0], [479.0], [480.0]]), s0(p0: [[481.0], [482.0], [483.0]], p1: [[484.0], [485.0], [486.0]]), s0(p0: [[487.0], [488.0], [489.0]], p1: [[490.0], [491.0], [492.0]])]), s1(p0: s0(p0: [[493.0], [494.0], [495.0]], p1: [[496.0], [497.0], [498.0]]), p1: [s0(p0: [[499.0], [500.0], [501.0]], p1: [[502.0], [503.0], [504.0]]), s0(p0: [[505.0], [506.0], [507.0]], p1: [[508.0], [509.0], [510.0]]), s0(p0: [[511.0], [512.0], [513.0]], p1: [[514.0], [515.0], [516.0]])])])], p4: s3(p0: s1(p0: s0(p0: [[517.0], [518.0], [519.0]], p1: [[520.0], [521.0], [522.0]]), p1: [s0(p0: [[523.0], [524.0], [525.0]], p1: [[526.0], [527.0], [528.0]]), s0(p0: [[529.0], [530.0], [531.0]], p1: [[532.0], [533.0], [534.0]]), s0(p0: [[535.0], [536.0], [537.0]], p1: [[538.0], [539.0], [540.0]])]), p1: [[s1(p0: s0(p0: [[541.0], [542.0], [543.0]], p1: [[544.0], [545.0], [546.0]]), p1: [s0(p0: [[547.0], [548.0], [549.0]], p1: [[550.0], [551.0], [552.0]]), s0(p0: [[553.0], [554.0], [555.0]], p1: [[556.0], [557.0], [558.0]]), s0(p0: [[559.0], [560.0], [561.0]], p1: [[562.0], [563.0], [564.0]])])], [s1(p0: s0(p0: [[565.0], [566.0], [567.0]], p1: [[568.0], [569.0], [570.0]]), p1: [s0(p0: [[571.0], [572.0], [573.0]], p1: [[574.0], [575.0], [576.0]]), s0(p0: [[577.0], [578.0], [579.0]], p1: [[580.0], [581.0], [582.0]]), s0(p0: [[583.0], [584.0], [585.0]], p1: [[586.0], [587.0], [588.0]])])], [s1(p0: s0(p0: [[589.0], [590.0], [591.0]], p1: [[592.0], [593.0], [594.0]]), p1: [s0(p0: [[595.0], [596.0], [597.0]], p1: [[598.0], [599.0], [600.0]]), s0(p0: [[601.0], [602.0], [603.0]], p1: [[604.0], [605.0], [606.0]]), s0(p0: [[607.0], [608.0], [609.0]], p1: [[610.0], [611.0], [612.0]])])]])))
    let v2: s12 = s12(p0: s4(p0: s3(p0: s1(p0: s0(p0: [[613.0], [614.0], [615.0]], p1: [[616.0], [617.0], [618.0]]), p1: [s0(p0: [[619.0], [620.0], [621.0]], p1: [[622.0], [623.0], [624.0]]), s0(p0: [[625.0], [626.0], [627.0]], p1: [[628.0], [629.0], [630.0]]), s0(p0: [[631.0], [632.0], [633.0]], p1: [[634.0], [635.0], [636.0]])]), p1: [[s1(p0: s0(p0: [[637.0], [638.0], [639.0]], p1: [[640.0], [641.0], [642.0]]), p1: [s0(p0: [[643.0], [644.0], [645.0]], p1: [[646.0], [647.0], [648.0]]), s0(p0: [[649.0], [650.0], [651.0]], p1: [[652.0], [653.0], [654.0]]), s0(p0: [[655.0], [656.0], [657.0]], p1: [[658.0], [659.0], [660.0]])])], [s1(p0: s0(p0: [[661.0], [662.0], [663.0]], p1: [[664.0], [665.0], [666.0]]), p1: [s0(p0: [[667.0], [668.0], [669.0]], p1: [[670.0], [671.0], [672.0]]), s0(p0: [[673.0], [674.0], [675.0]], p1: [[676.0], [677.0], [678.0]]), s0(p0: [[679.0], [680.0], [681.0]], p1: [[682.0], [683.0], [684.0]])])], [s1(p0: s0(p0: [[685.0], [686.0], [687.0]], p1: [[688.0], [689.0], [690.0]]), p1: [s0(p0: [[691.0], [692.0], [693.0]], p1: [[694.0], [695.0], [696.0]]), s0(p0: [[697.0], [698.0], [699.0]], p1: [[700.0], [701.0], [702.0]]), s0(p0: [[703.0], [704.0], [705.0]], p1: [[706.0], [707.0], [708.0]])])]]), p1: s3(p0: s1(p0: s0(p0: [[709.0], [710.0], [711.0]], p1: [[712.0], [713.0], [714.0]]), p1: [s0(p0: [[715.0], [716.0], [717.0]], p1: [[718.0], [719.0], [720.0]]), s0(p0: [[721.0], [722.0], [723.0]], p1: [[724.0], [725.0], [726.0]]), s0(p0: [[727.0], [728.0], [729.0]], p1: [[730.0], [731.0], [732.0]])]), p1: [[s1(p0: s0(p0: [[733.0], [734.0], [735.0]], p1: [[736.0], [737.0], [738.0]]), p1: [s0(p0: [[739.0], [740.0], [741.0]], p1: [[742.0], [743.0], [744.0]]), s0(p0: [[745.0], [746.0], [747.0]], p1: [[748.0], [749.0], [750.0]]), s0(p0: [[751.0], [752.0], [753.0]], p1: [[754.0], [755.0], [756.0]])])], [s1(p0: s0(p0: [[757.0], [758.0], [759.0]], p1: [[760.0], [761.0], [762.0]]), p1: [s0(p0: [[763.0], [764.0], [765.0]], p1: [[766.0], [767.0], [768.0]]), s0(p0: [[769.0], [770.0], [771.0]], p1: [[772.0], [773.0], [774.0]]), s0(p0: [[775.0], [776.0], [777.0]], p1: [[778.0], [779.0], [780.0]])])], [s1(p0: s0(p0: [[781.0], [782.0], [783.0]], p1: [[784.0], [785.0], [786.0]]), p1: [s0(p0: [[787.0], [788.0], [789.0]], p1: [[790.0], [791.0], [792.0]]), s0(p0: [[793.0], [794.0], [795.0]], p1: [[796.0], [797.0], [798.0]]), s0(p0: [[799.0], [800.0], [801.0]], p1: [[802.0], [803.0], [804.0]])])]])), p1: s8(p0: s2(p0: s0(p0: [[805.0], [806.0], [807.0]], p1: [[808.0], [809.0], [810.0]]), p1: [s1(p0: s0(p0: [[811.0], [812.0], [813.0]], p1: [[814.0], [815.0], [816.0]]), p1: [s0(p0: [[817.0], [818.0], [819.0]], p1: [[820.0], [821.0], [822.0]]), s0(p0: [[823.0], [824.0], [825.0]], p1: [[826.0], [827.0], [828.0]]), s0(p0: [[829.0], [830.0], [831.0]], p1: [[832.0], [833.0], [834.0]])]), s1(p0: s0(p0: [[835.0], [836.0], [837.0]], p1: [[838.0], [839.0], [840.0]]), p1: [s0(p0: [[841.0], [842.0], [843.0]], p1: [[844.0], [845.0], [846.0]]), s0(p0: [[847.0], [848.0], [849.0]], p1: [[850.0], [851.0], [852.0]]), s0(p0: [[853.0], [854.0], [855.0]], p1: [[856.0], [857.0], [858.0]])]), s1(p0: s0(p0: [[859.0], [860.0], [861.0]], p1: [[862.0], [863.0], [864.0]]), p1: [s0(p0: [[865.0], [866.0], [867.0]], p1: [[868.0], [869.0], [870.0]]), s0(p0: [[871.0], [872.0], [873.0]], p1: [[874.0], [875.0], [876.0]]), s0(p0: [[877.0], [878.0], [879.0]], p1: [[880.0], [881.0], [882.0]])])]), p1: s5(p0: [s2(p0: s0(p0: [[883.0], [884.0], [885.0]], p1: [[886.0], [887.0], [888.0]]), p1: [s1(p0: s0(p0: [[889.0], [890.0], [891.0]], p1: [[892.0], [893.0], [894.0]]), p1: [s0(p0: [[895.0], [896.0], [897.0]], p1: [[898.0], [899.0], [900.0]]), s0(p0: [[901.0], [902.0], [903.0]], p1: [[904.0], [905.0], [906.0]]), s0(p0: [[907.0], [908.0], [909.0]], p1: [[910.0], [911.0], [912.0]])]), s1(p0: s0(p0: [[913.0], [914.0], [915.0]], p1: [[916.0], [917.0], [918.0]]), p1: [s0(p0: [[919.0], [920.0], [921.0]], p1: [[922.0], [923.0], [924.0]]), s0(p0: [[925.0], [926.0], [927.0]], p1: [[928.0], [929.0], [930.0]]), s0(p0: [[931.0], [932.0], [933.0]], p1: [[934.0], [935.0], [936.0]])]), s1(p0: s0(p0: [[937.0], [938.0], [939.0]], p1: [[940.0], [941.0], [942.0]]), p1: [s0(p0: [[943.0], [944.0], [945.0]], p1: [[946.0], [947.0], [948.0]]), s0(p0: [[949.0], [950.0], [951.0]], p1: [[952.0], [953.0], [954.0]]), s0(p0: [[955.0], [956.0], [957.0]], p1: [[958.0], [959.0], [960.0]])])])])))
    let v3: [[s1]] = [[s1(p0: s0(p0: [[961.0], [962.0], [963.0]], p1: [[964.0], [965.0], [966.0]]), p1: [s0(p0: [[967.0], [968.0], [969.0]], p1: [[970.0], [971.0], [972.0]]), s0(p0: [[973.0], [974.0], [975.0]], p1: [[976.0], [977.0], [978.0]]), s0(p0: [[979.0], [980.0], [981.0]], p1: [[982.0], [983.0], [984.0]])])]]
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = [[StructValue(Name(str='s1', ty=None), [StructValue(Name(str='s0', ty=None), [[[961.0], [962.0], [963.0]], [[964.0], [965.0], [966.0]]]), [StructValue(Name(str='s0', ty=None), [[[967.0], [968.0], [969.0]], [[970.0], [971.0], [972.0]]]), StructValue(Name(str='s0', ty=None), [[[973.0], [974.0], [975.0]], [[976.0], [977.0], [978.0]]]), StructValue(Name(str='s0', ty=None), [[[979.0], [980.0], [981.0]], [[982.0], [983.0], [984.0]]])]])]]
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
