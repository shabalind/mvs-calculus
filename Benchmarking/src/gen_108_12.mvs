  struct s0 {
    var p0: Float
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s2 {
    var p0: s1
    var p1: [s0]
    var p2: s0
    var p3: s1
    var p4: s0
  } in
  struct s3 {
    var p0: s0
    var p1: [[s2]]
  } in
  struct s5 {
    var p0: [s3]
    var p1: s3
  } in
  let f80: (s5) -> s5 = (v0: s5) -> s5 {
    let v4: s3 = v0.p1 in
    var v5: s5 = v0 in
    v5.p1 = v4 in
    var v16: s5 = v5 in
    v16
  } in
  let f66: (Float) -> Float = (v0: Float) -> Float {
    var v7: Float = v0 in
    v7 = v0 in
    var v5: Float = v7 in
    var v6: Float = v0 in
    v6 = v5 in
    v5 = v7 in
    var v4: Float = v0 in
    let v1: Float = v0 - v4 in
    var v9: Float = v6 in
    var v3: Float = v5 in
    var v15: Float = v0 in
    var v22: Float = v1 in
    var v21: Float = v3 in
    let v39: [Float] = [v7, v5, v5, v22, v3, v5, v21] in
    var v20: Float = v15 in
    let v11: Float = v39[4] in
    var v50: [Float] = v39 in
    var v80: [Float] = v50 in
    v50[3] = v20 in
    let v26: Float = v80[5] in
    let v31: Float = v80[4] in
    v80[2] = v11 in
    let v54: Float = v26 - v21 in
    var v64: Float = v54 in
    v80[4] = v11 in
    var v75: [Float] = v39 in
    v80[4] = v31 in
    v50 = v75 in
    v80[5] = v3 in
    v50[1] = v9 in
    v80[4] = v3 in
    v50[0] = v6 in
    v64
  } in
  let noinline_f0: ([s5], Float) -> Float = (v0: [s5], v1: Float) -> Float {
    let v8: s5 = v0[1] in
    let v7: [s3] = v8.p0 in
    let v18: s5 = f80(v8) in
    let v12: s3 = v18.p1 in
    let v19: [[s2]] = v12.p1 in
    var v32: s3 = v12 in
    let v30: s0 = v32.p0 in
    v32.p1 = v19 in
    let v41: Float = f66(v1) in
    let v51: [[Float]] = v30.p1 in
    let v33: [[s2]] = v32.p1 in
    let v29: [Float] = v51[0] in
    v32.p0 = v30 in
    let v37: s3 = v7[1] in
    var v27: [Float] = v29 in
    v32.p1 = v33 in
    v27[0] = v41 in
    let v82: [[s2]] = v37.p1 in
    v32.p1 = v82 in
    let v167: Float = v27[0] in
    v167
  } in
  fun loop(i: Int, v0: [s5], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s5] = [s5([s3(s0(0.0, [[1.0]]), [[s2(s1([s0(2.0, [[3.0]]), s0(4.0, [[5.0]]), s0(6.0, [[7.0]])], [s0(8.0, [[9.0]])]), [s0(10.0, [[11.0]]), s0(12.0, [[13.0]])], s0(14.0, [[15.0]]), s1([s0(16.0, [[17.0]]), s0(18.0, [[19.0]]), s0(20.0, [[21.0]])], [s0(22.0, [[23.0]])]), s0(24.0, [[25.0]]))]]), s3(s0(26.0, [[27.0]]), [[s2(s1([s0(28.0, [[29.0]]), s0(30.0, [[31.0]]), s0(32.0, [[33.0]])], [s0(34.0, [[35.0]])]), [s0(36.0, [[37.0]]), s0(38.0, [[39.0]])], s0(40.0, [[41.0]]), s1([s0(42.0, [[43.0]]), s0(44.0, [[45.0]]), s0(46.0, [[47.0]])], [s0(48.0, [[49.0]])]), s0(50.0, [[51.0]]))]])], s3(s0(52.0, [[53.0]]), [[s2(s1([s0(54.0, [[55.0]]), s0(56.0, [[57.0]]), s0(58.0, [[59.0]])], [s0(60.0, [[61.0]])]), [s0(62.0, [[63.0]]), s0(64.0, [[65.0]])], s0(66.0, [[67.0]]), s1([s0(68.0, [[69.0]]), s0(70.0, [[71.0]]), s0(72.0, [[73.0]])], [s0(74.0, [[75.0]])]), s0(76.0, [[77.0]]))]])), s5([s3(s0(78.0, [[79.0]]), [[s2(s1([s0(80.0, [[81.0]]), s0(82.0, [[83.0]]), s0(84.0, [[85.0]])], [s0(86.0, [[87.0]])]), [s0(88.0, [[89.0]]), s0(90.0, [[91.0]])], s0(92.0, [[93.0]]), s1([s0(94.0, [[95.0]]), s0(96.0, [[97.0]]), s0(98.0, [[99.0]])], [s0(100.0, [[101.0]])]), s0(102.0, [[103.0]]))]]), s3(s0(104.0, [[105.0]]), [[s2(s1([s0(106.0, [[107.0]]), s0(108.0, [[109.0]]), s0(110.0, [[111.0]])], [s0(112.0, [[113.0]])]), [s0(114.0, [[115.0]]), s0(116.0, [[117.0]])], s0(118.0, [[119.0]]), s1([s0(120.0, [[121.0]]), s0(122.0, [[123.0]]), s0(124.0, [[125.0]])], [s0(126.0, [[127.0]])]), s0(128.0, [[129.0]]))]])], s3(s0(130.0, [[131.0]]), [[s2(s1([s0(132.0, [[133.0]]), s0(134.0, [[135.0]]), s0(136.0, [[137.0]])], [s0(138.0, [[139.0]])]), [s0(140.0, [[141.0]]), s0(142.0, [[143.0]])], s0(144.0, [[145.0]]), s1([s0(146.0, [[147.0]]), s0(148.0, [[149.0]]), s0(150.0, [[151.0]])], [s0(152.0, [[153.0]])]), s0(154.0, [[155.0]]))]]))] in
    let v1: Float = 156.0 in
    let initialResult: Float = 156.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()