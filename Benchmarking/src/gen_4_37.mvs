  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s2 {
    var p0: [[s0]]
    var p1: [[s1]]
  } in
  struct s4 {
    var p0: [Float]
    var p1: s0
    var p2: s1
    var p3: s2
    var p4: [[s0]]
  } in
  struct s5 {
    var p0: s4
    var p1: s4
  } in
  struct s10 {
    var p0: s5
    var p1: s1
  } in
  let f13: (Float) -> Float = (v0: Float) -> Float {
    var v2: Float = v0 in
    let v1: Float = v0 + v0 in
    var v7: Float = v1 in
    v2 = v7 in
    v2 = v1 in
    var v4: Float = v1 in
    var v3: Float = v0 in
    var v5: Float = v2 in
    var v18: Float = v4 in
    var v13: Float = v3 in
    v13 = v0 in
    let v14: Float = v3 - v4 in
    v7 = v5 in
    let v20: Float = v18 - v5 in
    let v41: [Float] = [v13, v14] in
    var v30: [Float] = v41 in
    v30[0] = v13 in
    var v16: Float = v7 in
    let v36: Float = v30[1] in
    var v63: Float = v16 in
    v4 = v20 in
    v30[1] = v63 in
    v36
  } in
  let noinline_f0: ([s10], Float) -> Float = (v0: [s10], v1: Float) -> Float {
    let v7: Float = f13(v1) in
    var v9: Float = v7 in
    let v13: Float = f13(v9) in
    var v27: Float = v13 in
    var v39: Float = v13 in
    let v66: Float = v27 - v39 in
    v66
  } in
  fun loop(i: Int, v0: [s10], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s10] = [s10(s5(s4([0.0], s0([[1.0], [2.0], [3.0]], [[4.0]]), s1([s0([[5.0], [6.0], [7.0]], [[8.0]])], s0([[9.0], [10.0], [11.0]], [[12.0]])), s2([[s0([[13.0], [14.0], [15.0]], [[16.0]])]], [[s1([s0([[17.0], [18.0], [19.0]], [[20.0]])], s0([[21.0], [22.0], [23.0]], [[24.0]]))], [s1([s0([[25.0], [26.0], [27.0]], [[28.0]])], s0([[29.0], [30.0], [31.0]], [[32.0]]))], [s1([s0([[33.0], [34.0], [35.0]], [[36.0]])], s0([[37.0], [38.0], [39.0]], [[40.0]]))]]), [[s0([[41.0], [42.0], [43.0]], [[44.0]])], [s0([[45.0], [46.0], [47.0]], [[48.0]])]]), s4([49.0], s0([[50.0], [51.0], [52.0]], [[53.0]]), s1([s0([[54.0], [55.0], [56.0]], [[57.0]])], s0([[58.0], [59.0], [60.0]], [[61.0]])), s2([[s0([[62.0], [63.0], [64.0]], [[65.0]])]], [[s1([s0([[66.0], [67.0], [68.0]], [[69.0]])], s0([[70.0], [71.0], [72.0]], [[73.0]]))], [s1([s0([[74.0], [75.0], [76.0]], [[77.0]])], s0([[78.0], [79.0], [80.0]], [[81.0]]))], [s1([s0([[82.0], [83.0], [84.0]], [[85.0]])], s0([[86.0], [87.0], [88.0]], [[89.0]]))]]), [[s0([[90.0], [91.0], [92.0]], [[93.0]])], [s0([[94.0], [95.0], [96.0]], [[97.0]])]])), s1([s0([[98.0], [99.0], [100.0]], [[101.0]])], s0([[102.0], [103.0], [104.0]], [[105.0]]))), s10(s5(s4([106.0], s0([[107.0], [108.0], [109.0]], [[110.0]]), s1([s0([[111.0], [112.0], [113.0]], [[114.0]])], s0([[115.0], [116.0], [117.0]], [[118.0]])), s2([[s0([[119.0], [120.0], [121.0]], [[122.0]])]], [[s1([s0([[123.0], [124.0], [125.0]], [[126.0]])], s0([[127.0], [128.0], [129.0]], [[130.0]]))], [s1([s0([[131.0], [132.0], [133.0]], [[134.0]])], s0([[135.0], [136.0], [137.0]], [[138.0]]))], [s1([s0([[139.0], [140.0], [141.0]], [[142.0]])], s0([[143.0], [144.0], [145.0]], [[146.0]]))]]), [[s0([[147.0], [148.0], [149.0]], [[150.0]])], [s0([[151.0], [152.0], [153.0]], [[154.0]])]]), s4([155.0], s0([[156.0], [157.0], [158.0]], [[159.0]]), s1([s0([[160.0], [161.0], [162.0]], [[163.0]])], s0([[164.0], [165.0], [166.0]], [[167.0]])), s2([[s0([[168.0], [169.0], [170.0]], [[171.0]])]], [[s1([s0([[172.0], [173.0], [174.0]], [[175.0]])], s0([[176.0], [177.0], [178.0]], [[179.0]]))], [s1([s0([[180.0], [181.0], [182.0]], [[183.0]])], s0([[184.0], [185.0], [186.0]], [[187.0]]))], [s1([s0([[188.0], [189.0], [190.0]], [[191.0]])], s0([[192.0], [193.0], [194.0]], [[195.0]]))]]), [[s0([[196.0], [197.0], [198.0]], [[199.0]])], [s0([[200.0], [201.0], [202.0]], [[203.0]])]])), s1([s0([[204.0], [205.0], [206.0]], [[207.0]])], s0([[208.0], [209.0], [210.0]], [[211.0]])))] in
    let v1: Float = 212.0 in
    let initialResult: Float = 212.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()