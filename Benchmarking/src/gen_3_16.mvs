  struct s0 {
    var p0: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [[s1]]
    var p1: s1
  } in
  let f111: (Float) -> Float = (v0: Float) -> Float {
    var v3: Float = v0 in
    v3 = v0 in
    var v1: Float = v0 in
    var v7: Float = v1 in
    var v5: Float = v3 in
    var v4: Float = v5 in
    var v16: Float = v3 in
    var v9: Float = v16 in
    var v10: Float = v9 in
    var v8: Float = v1 in
    var v17: Float = v1 in
    var v41: Float = v5 in
    let v19: [Float] = [v9] in
    let v27: Float = v19[0] in
    var v35: [Float] = v19 in
    let v18: Float = v19[0] in
    v35[0] = v18 in
    var v37: [Float] = v35 in
    v37[0] = v27 in
    v37[0] = v17 in
    var v32: [Float] = v35 in
    var v38: [Float] = v35 in
    let v29: Float = v32[0] in
    let v66: [[Float]] = [v38, v35, v32, v37, v19, v32, v37] in
    var v40: Float = v41 in
    v35[0] = v4 in
    v37[0] = v10 in
    v32[0] = v29 in
    let v34: Float = v32[0] in
    let v54: [Float] = v66[6] in
    v38[0] = v29 in
    v37[0] = v7 in
    v35[0] = v7 in
    v17 = v4 in
    v37[0] = v34 in
    v38[0] = v0 in
    v32[0] = v40 in
    let v52: Float = v54[0] in
    v41 = v8 in
    v52
  } in
  let noinline_f0: ([s2], [s2], s1, [s1], Float) -> Float = (v0: [s2], v1: [s2], v2: s1, v3: [s1], v4: Float) -> Float {
    let v7: Float = f111(v4) in
    let v9: s0 = v2.p1 in
    let v19: [[Float]] = v9.p0 in
    let v32: [Float] = v19[0] in
    let v46: Float = v32[0] in
    var v26: [Float] = v32 in
    v26[0] = v46 in
    v26[0] = v7 in
    let v80: Float = v26[0] in
    let v62: Float = f111(v46) in
    let v194: Float = v62 + v80 in
    let v66: Float = v7 * v194 in
    let v141: Float = v66 / v46 in
    var v63: Float = v141 in
    v63
  } in
  fun loop(i: Int, v0: [s2], v1: [s2], v2: s1, v3: [s1], v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2([[s1(s0([[0.0], [1.0], [2.0]]), s0([[3.0], [4.0], [5.0]]))]], s1(s0([[6.0], [7.0], [8.0]]), s0([[9.0], [10.0], [11.0]])))] in
    let v1: [s2] = [s2([[s1(s0([[12.0], [13.0], [14.0]]), s0([[15.0], [16.0], [17.0]]))]], s1(s0([[18.0], [19.0], [20.0]]), s0([[21.0], [22.0], [23.0]]))), s2([[s1(s0([[24.0], [25.0], [26.0]]), s0([[27.0], [28.0], [29.0]]))]], s1(s0([[30.0], [31.0], [32.0]]), s0([[33.0], [34.0], [35.0]]))), s2([[s1(s0([[36.0], [37.0], [38.0]]), s0([[39.0], [40.0], [41.0]]))]], s1(s0([[42.0], [43.0], [44.0]]), s0([[45.0], [46.0], [47.0]])))] in
    let v2: s1 = s1(s0([[48.0], [49.0], [50.0]]), s0([[51.0], [52.0], [53.0]])) in
    let v3: [s1] = [s1(s0([[54.0], [55.0], [56.0]]), s0([[57.0], [58.0], [59.0]])), s1(s0([[60.0], [61.0], [62.0]]), s0([[63.0], [64.0], [65.0]]))] in
    let v4: Float = 66.0 in
    let initialResult: Float = 66.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()