  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s2 {
    var p0: s0
    var p1: s0
  } in
  struct s3 {
    var p0: [s2]
    var p1: s0
  } in
  let noinline_f0: (s3, [s2], Float) -> Float = (v0: s3, v1: [s2], v2: Float) -> Float {
    let v6: s2 = v1[0] in
    let v10: s0 = v6.p0 in
    let v20: [[Float]] = v10.p1 in
    let v19: [Float] = v20[0] in
    let v23: Float = v19[0] in
    let v33: [Float] = v20[0] in
    let v39: Float = v23 + v23 in
    let v44: Float = v33[0] in
    let v46: Float = v39 - v44 in
    let v77: Float = v46 - v2 in
    v77
  } in
  fun loop(i: Int, v0: s3, v1: [s2], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3([s2(s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]), s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]])), s2(s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]]), s0([[15.0], [16.0], [17.0]], [[18.0], [19.0]])), s2(s0([[20.0], [21.0], [22.0]], [[23.0], [24.0]]), s0([[25.0], [26.0], [27.0]], [[28.0], [29.0]]))], s0([[30.0], [31.0], [32.0]], [[33.0], [34.0]])) in
    let v1: [s2] = [s2(s0([[35.0], [36.0], [37.0]], [[38.0], [39.0]]), s0([[40.0], [41.0], [42.0]], [[43.0], [44.0]])), s2(s0([[45.0], [46.0], [47.0]], [[48.0], [49.0]]), s0([[50.0], [51.0], [52.0]], [[53.0], [54.0]]))] in
    let v2: Float = 55.0 in
    let initialResult: Float = 55.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()