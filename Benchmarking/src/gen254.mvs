  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s0
    var p1: [[s1]]
  } in
  struct s4 {
    var p0: s0
    var p1: [s2]
  } in
  let noinline_f0: (s4, Float) -> Float = (v0: s4, v1: Float) -> Float {
    let v4: Float = v1 + v1 in
    let v7: [Float] = [v4, v1, v4] in
    var v9: [Float] = v7 in
    let v5: Float = v1 / v1 in
    v9[2] = v5 in
    let v12: Float = v9[1] in
    v9[2] = v5 in
    var v8: Float = v12 in
    v9[0] = v8 in
    var v26: Float = v8 in
    v8 = v12 in
    var v34: Float = v4 in
    v9[1] = v4 in
    let v33: Float = v34 + v12 in
    v9[1] = v33 in
    v26
  } in
  fun loop(i: Int, v0: s4, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s4 = s4(s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]), [s2(s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]]), [[s1(s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]]), s0([[15.0], [16.0], [17.0]], [[18.0], [19.0]]))], [s1(s0([[20.0], [21.0], [22.0]], [[23.0], [24.0]]), s0([[25.0], [26.0], [27.0]], [[28.0], [29.0]]))]]), s2(s0([[30.0], [31.0], [32.0]], [[33.0], [34.0]]), [[s1(s0([[35.0], [36.0], [37.0]], [[38.0], [39.0]]), s0([[40.0], [41.0], [42.0]], [[43.0], [44.0]]))], [s1(s0([[45.0], [46.0], [47.0]], [[48.0], [49.0]]), s0([[50.0], [51.0], [52.0]], [[53.0], [54.0]]))]]), s2(s0([[55.0], [56.0], [57.0]], [[58.0], [59.0]]), [[s1(s0([[60.0], [61.0], [62.0]], [[63.0], [64.0]]), s0([[65.0], [66.0], [67.0]], [[68.0], [69.0]]))], [s1(s0([[70.0], [71.0], [72.0]], [[73.0], [74.0]]), s0([[75.0], [76.0], [77.0]], [[78.0], [79.0]]))]])]) in
    let v1: Float = 80.0 in
    let initialResult: Float = 80.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()