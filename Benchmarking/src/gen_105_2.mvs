  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let f4: (s0) -> s0 = (v0: s0) -> s0 {
    let v2: [[Float]] = v0.p0 in
    let v7: [[Float]] = v0.p1 in
    let v3: [[Float]] = v0.p0 in
    var v4: s0 = v0 in
    v4 = v0 in
    var v12: s0 = v4 in
    let v1: [[Float]] = v4.p1 in
    v4.p0 = v3 in
    v12.p0 = v3 in
    let v10: s0 = s0(v1, v7) in
    let v13: [[Float]] = v4.p1 in
    v12.p0 = v13 in
    let v8: [[Float]] = v4.p1 in
    v4.p1 = v3 in
    let v16: [[Float]] = v4.p1 in
    v12 = v10 in
    v12.p0 = v1 in
    let v45: [[Float]] = v10.p1 in
    let v49: [[Float]] = v4.p1 in
    var v59: [[Float]] = v45 in
    var v44: s0 = v0 in
    let v40: [[Float]] = v44.p1 in
    v12.p0 = v2 in
    v44.p1 = v45 in
    v4.p1 = v59 in
    v44.p0 = v16 in
    var v72: s0 = v12 in
    v44.p0 = v40 in
    let v79: [[Float]] = v72.p0 in
    let v127: s0 = s0(v3, v49) in
    var v66: s0 = v12 in
    v72.p0 = v8 in
    v66.p1 = v40 in
    v12 = v127 in
    v12.p1 = v2 in
    v66.p0 = v79 in
    v66
  } in
  let noinline_f0: (s0, [s0], [s0], s0, Float) -> Float = (v0: s0, v1: [s0], v2: [s0], v3: s0, v4: Float) -> Float {
    let v6: s0 = v2[0] in
    var v8: Float = v4 in
    let v15: s0 = f4(v3) in
    var v12: Float = v8 in
    var v32: s0 = v15 in
    let v11: s0 = v1[0] in
    let v21: [[Float]] = v6.p0 in
    let v16: s0 = v2[2] in
    let v17: [[Float]] = v16.p1 in
    let v48: s0 = f4(v3) in
    v32.p1 = v17 in
    v32.p0 = v21 in
    let v29: [[Float]] = v48.p1 in
    let v33: [[Float]] = v11.p0 in
    v32.p0 = v33 in
    let v44: [[Float]] = v32.p1 in
    let v27: [Float] = v44[2] in
    v32.p1 = v21 in
    let v76: Float = v12 - v12 in
    v32.p1 = v29 in
    var v96: [Float] = v27 in
    let v114: Float = v96[0] in
    let v108: [Float] = [v12, v76, v76, v114] in
    v96[0] = v114 in
    let v85: Float = v108[3] in
    v85
  } in
  fun loop(i: Int, v0: s0, v1: [s0], v2: [s0], v3: s0, v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]]) in
    let v1: [s0] = [s0([[6.0], [7.0], [8.0]], [[9.0], [10.0], [11.0]])] in
    let v2: [s0] = [s0([[12.0], [13.0], [14.0]], [[15.0], [16.0], [17.0]]), s0([[18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0]]), s0([[24.0], [25.0], [26.0]], [[27.0], [28.0], [29.0]])] in
    let v3: s0 = s0([[30.0], [31.0], [32.0]], [[33.0], [34.0], [35.0]]) in
    let v4: Float = 36.0 in
    let initialResult: Float = 36.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()