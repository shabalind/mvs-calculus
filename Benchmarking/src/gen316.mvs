  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s2 {
    var p0: [Float]
  } in
  struct s3 {
    var p0: s2
    var p1: s0
  } in
  struct s4 {
    var p0: s2
    var p1: [s2]
  } in
  struct s5 {
    var p0: s0
    var p1: s0
    var p2: [s2]
    var p3: s1
    var p4: [s2]
  } in
  let f31: ([s3]) -> [s3] = (v0: [s3]) -> [s3] {
    var v2: [s3] = v0 in
    let v7: [[s3]] = [v2, v2] in
    let v5: [s3] = v7[1] in
    var v21: [s3] = v5 in
    v21 = v0 in
    v21 = v2 in
    v2 = v0 in
    let v81: s3 = v2[2] in
    v21[1] = v81 in
    v21
  } in
  let f29: ([s1]) -> [s1] = (v0: [s1]) -> [s1] {
    var v7: [s1] = v0 in
    let v10: [[s1]] = [v7, v7, v0] in
    v7 = v0 in
    let v44: [s1] = v10[2] in
    v44
  } in
  let f25: (s3) -> s3 = (v0: s3) -> s3 {
    let v6: [s3] = [v0, v0, v0, v0, v0, v0, v0] in
    var v2: s3 = v0 in
    let v5: s2 = v2.p0 in
    let v9: [Float] = v5.p0 in
    let v7: s3 = v6[1] in
    let v13: Float = v9[1] in
    let v14: s0 = v2.p1 in
    v2.p1 = v14 in
    let v4: Float = v9[1] in
    var v25: [Float] = v9 in
    var v17: Float = v4 in
    let v35: Float = v9[1] in
    let v15: Float = v9[0] in
    var v18: s2 = v5 in
    var v36: Float = v35 in
    v25[0] = v36 in
    var v41: [Float] = v25 in
    var v12: s3 = v7 in
    let v16: s3 = v6[2] in
    v18.p0 = v25 in
    v25[1] = v13 in
    let v21: Float = v41[0] in
    v41[1] = v17 in
    v2 = v16 in
    v12.p0 = v18 in
    v2.p1 = v14 in
    v25[1] = v21 in
    v41[1] = v15 in
    v18.p0 = v9 in
    v12
  } in
  let f16: (s1) -> s1 = (v0: s1) -> s1 {
    var v1: s1 = v0 in
    var v5: s1 = v1 in
    v5 = v1 in
    let v3: s0 = v0.p1 in
    v5.p1 = v3 in
    var v2: s1 = v5 in
    v2
  } in
  let f5: (Float, s3) -> Float = (v0: Float, v1: s3) -> Float {
    let v2: s2 = v1.p0 in
    let v3: [Float] = v2.p0 in
    let v11: [[Float]] = [v3, v3, v3, v3, v3, v3] in
    let v16: [Float] = v11[4] in
    var v14: [[Float]] = v11 in
    v14[4] = v16 in
    let v22: [Float] = v14[5] in
    let v15: [Float] = v14[1] in
    let v44: Float = v22[1] in
    let v119: [Float] = v14[0] in
    v14[0] = v15 in
    v14[3] = v16 in
    var v184: [Float] = v119 in
    v14[5] = v184 in
    v14[0] = v3 in
    v44
  } in
  let noinline_f0: ([s3], [[s4]], [s5], Float) -> Float = (v0: [s3], v1: [[s4]], v2: [s5], v3: Float) -> Float {
    let v6: s5 = v2[0] in
    let v4: s3 = v0[1] in
    let v5: s1 = v6.p3 in
    var v11: s3 = v4 in
    let v18: [s1] = [v5, v5] in
    let v14: [s1] = f29(v18) in
    let v32: [s3] = f31(v0) in
    let v29: s3 = f25(v11) in
    let v59: s5 = v2[0] in
    let v47: s1 = v14[0] in
    let v33: Float = f5(v3, v29) in
    let v60: s3 = v32[1] in
    let v85: s0 = v59.p1 in
    let v70: s1 = f16(v47) in
    v11.p1 = v85 in
    let v74: s3 = f25(v60) in
    let v174: Float = f5(v33, v74) in
    let v165: s0 = v70.p1 in
    v11.p1 = v165 in
    v174
  } in
  fun loop(i: Int, v0: [s3], v1: [[s4]], v2: [s5], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s3] = [s3(s2([0.0, 1.0]), s0([[2.0], [3.0], [4.0]], [[5.0]])), s3(s2([6.0, 7.0]), s0([[8.0], [9.0], [10.0]], [[11.0]])), s3(s2([12.0, 13.0]), s0([[14.0], [15.0], [16.0]], [[17.0]]))] in
    let v1: [[s4]] = [[s4(s2([18.0, 19.0]), [s2([20.0, 21.0]), s2([22.0, 23.0]), s2([24.0, 25.0])])], [s4(s2([26.0, 27.0]), [s2([28.0, 29.0]), s2([30.0, 31.0]), s2([32.0, 33.0])])]] in
    let v2: [s5] = [s5(s0([[34.0], [35.0], [36.0]], [[37.0]]), s0([[38.0], [39.0], [40.0]], [[41.0]]), [s2([42.0, 43.0]), s2([44.0, 45.0])], s1([s0([[46.0], [47.0], [48.0]], [[49.0]]), s0([[50.0], [51.0], [52.0]], [[53.0]])], s0([[54.0], [55.0], [56.0]], [[57.0]])), [s2([58.0, 59.0]), s2([60.0, 61.0]), s2([62.0, 63.0])])] in
    let v3: Float = 64.0 in
    let initialResult: Float = 64.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()