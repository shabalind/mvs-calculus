  struct s0 {
    var p0: [Float]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: [s1]
    var p1: s0
  } in
  struct s4 {
    var p0: s2
    var p1: s1
  } in
  struct s6 {
    var p0: s4
    var p1: s0
  } in
  let f12: (s0) -> s0 = (v0: s0) -> s0 {
    let v2: [[Float]] = v0.p1 in
    var v5: s0 = v0 in
    var v16: [[Float]] = v2 in
    v5.p1 = v16 in
    v5
  } in
  let noinline_f0: ([s6], Float) -> Float = (v0: [s6], v1: Float) -> Float {
    let v6: s6 = v0[0] in
    let v2: s0 = v6.p1 in
    let v3: s0 = f12(v2) in
    let v7: [[Float]] = v3.p1 in
    let v14: [Float] = v7[1] in
    let v35: Float = v14[0] in
    v35
  } in
  fun loop(i: Int, v0: [s6], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s6] = [s6(s4(s2([s1(s0([0.0], [[1.0], [2.0], [3.0]]), [[s0([4.0], [[5.0], [6.0], [7.0]])]])], s0([8.0], [[9.0], [10.0], [11.0]])), s1(s0([12.0], [[13.0], [14.0], [15.0]]), [[s0([16.0], [[17.0], [18.0], [19.0]])]])), s0([20.0], [[21.0], [22.0], [23.0]]))] in
    let v1: Float = 24.0 in
    let initialResult: Float = 24.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()