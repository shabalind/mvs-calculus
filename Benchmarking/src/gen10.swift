  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: s1
    var p1: [s0]
  }
  struct s3 {
    var p0: s1
    var p1: [[s2]]
    var p2: [s1]
  }
  struct s4 {
    var p0: s0
    var p1: [s3]
  }
  struct s5 {
    var p0: s4
    var p1: s4
  }
  struct s7 {
    var p0: [s2]
    var p1: [s4]
  }
  struct s11 {
    var p0: [s5]
    var p1: [s2]
  }
  func f109(_ v0: s1) -> s1 {
    let v4: s0 = v0.p1
    var v7: s0 = v4
    var v2: s1 = v0
    let v5: s0 = v0.p1
    var v3: s0 = v5
    var v10: s0 = v3
    v2.p1 = v5
    let v18: s1 = s1(p0: v4, p1: v10)
    v2.p0 = v4
    let v1: s0 = v18.p0
    v2.p0 = v7
    var v15: s1 = v0
    v2.p0 = v7
    let v23: [s1] = [v15, v2, v18, v0, v18, v15, v18]
    let v21: s1 = v23[3]
    let v13: s1 = v23[3]
    let v22: s1 = v23[5]
    let v24: [[Double]] = v1.p0
    v10.p0 = v24
    let v34: s1 = v23[1]
    let v47: s1 = v23[1]
    v2 = v13
    let v20: s1 = v23[3]
    var v25: [s1] = v23
    let v27: s1 = v23[5]
    v25[3] = v47
    var v39: s1 = v22
    v25[0] = v21
    v25[0] = v0
    let v58: s1 = v25[0]
    var v65: [s1] = v25
    v25[4] = v27
    v25[2] = v34
    let v88: s0 = v34.p1
    var v71: [s1] = v65
    v25 = v71
    v71[2] = v39
    v65[5] = v20
    v2.p1 = v88
    return v58
  }
  func f94(_ v0: s1) -> s1 {
    let v2: s0 = v0.p1
    var v4: s1 = v0
    v4.p0 = v2
    v4.p0 = v2
    v4.p1 = v2
    let v5: s0 = v0.p1
    v4 = v0
    v4.p1 = v5
    var v1: s1 = v4
    let v13: s0 = v4.p0
    var v12: s1 = v0
    var v11: s0 = v2
    let v18: s0 = v1.p1
    v4.p0 = v2
    let v86: s1 = s1(p0: v18, p1: v13)
    let v65: s1 = f109(v12)
    let v60: s0 = v12.p0
    let v96: s1 = f109(v86)
    v4.p1 = v11
    v1 = v65
    v12.p1 = v60
    return v96
  }
  func f89(_ v0: [s0]) -> [s0] {
    var v7: [s0] = v0
    var v3: [s0] = v0
    let v2: s0 = v7[0]
    v7[0] = v2
    v7[0] = v2
    v7[0] = v2
    v3[0] = v2
    v7[0] = v2
    let v25: s0 = v7[0]
    let v40: s1 = s1(p0: v25, p1: v2)
    let v36: s0 = v40.p1
    v3[0] = v36
    v3[0] = v2
    v3[0] = v2
    return v3
  }
  func f83(_ v0: s2) -> s2 {
    var v6: s2 = v0
    var v3: s2 = v6
    var v5: s2 = v3
    let v7: s1 = v0.p0
    let v17: s1 = f94(v7)
    let v4: s0 = v17.p1
    var v2: s2 = v3
    v5.p0 = v7
    let v13: [s0] = v5.p1
    let v9: [s0] = f89(v13)
    let v10: [s0] = f89(v13)
    let v8: s1 = f94(v7)
    var v16: [s0] = v9
    let v21: s0 = v10[0]
    var v28: s1 = v7
    v28.p1 = v4
    let v23: s1 = f94(v28)
    v16[0] = v21
    v5.p0 = v17
    let v33: s1 = f94(v8)
    v3.p0 = v33
    let v49: s1 = f109(v33)
    v16[0] = v21
    let v76: s0 = v28.p1
    v16[0] = v76
    v2 = v0
    v3.p0 = v49
    var v139: s2 = v6
    let v124: [s0] = f89(v16)
    v139 = v2
    v6.p1 = v124
    v3.p0 = v23
    return v139
  }
  @inline(never)
  func f0(_ v0: s7, _ v1: [s2], _ v2: s11, _ v3: Double) -> Double {
    let v5: [s2] = v0.p0
    let v9: s2 = v5[0]
    let v12: s2 = f83(v9)
    let v17: s2 = f83(v12)
    let v20: s1 = v17.p0
    let v24: s0 = v20.p1
    var v27: s0 = v24
    let v49: [[Double]] = v27.p1
    let v44: [Double] = v49[1]
    let v52: Double = v44[0]
    return v52
  }
  func benchmark() {
    let v0: s7 = s7(p0: [s2(p0: s1(p0: s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0]]), p1: s0(p0: [[5.0], [6.0], [7.0]], p1: [[8.0], [9.0]])), p1: [s0(p0: [[10.0], [11.0], [12.0]], p1: [[13.0], [14.0]])])], p1: [s4(p0: s0(p0: [[15.0], [16.0], [17.0]], p1: [[18.0], [19.0]]), p1: [s3(p0: s1(p0: s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0], [24.0]]), p1: s0(p0: [[25.0], [26.0], [27.0]], p1: [[28.0], [29.0]])), p1: [[s2(p0: s1(p0: s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0]]), p1: s0(p0: [[35.0], [36.0], [37.0]], p1: [[38.0], [39.0]])), p1: [s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0], [44.0]])])], [s2(p0: s1(p0: s0(p0: [[45.0], [46.0], [47.0]], p1: [[48.0], [49.0]]), p1: s0(p0: [[50.0], [51.0], [52.0]], p1: [[53.0], [54.0]])), p1: [s0(p0: [[55.0], [56.0], [57.0]], p1: [[58.0], [59.0]])])]], p2: [s1(p0: s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0], [64.0]]), p1: s0(p0: [[65.0], [66.0], [67.0]], p1: [[68.0], [69.0]]))])])])
    let v1: [s2] = [s2(p0: s1(p0: s0(p0: [[70.0], [71.0], [72.0]], p1: [[73.0], [74.0]]), p1: s0(p0: [[75.0], [76.0], [77.0]], p1: [[78.0], [79.0]])), p1: [s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0], [84.0]])])]
    let v2: s11 = s11(p0: [s5(p0: s4(p0: s0(p0: [[85.0], [86.0], [87.0]], p1: [[88.0], [89.0]]), p1: [s3(p0: s1(p0: s0(p0: [[90.0], [91.0], [92.0]], p1: [[93.0], [94.0]]), p1: s0(p0: [[95.0], [96.0], [97.0]], p1: [[98.0], [99.0]])), p1: [[s2(p0: s1(p0: s0(p0: [[100.0], [101.0], [102.0]], p1: [[103.0], [104.0]]), p1: s0(p0: [[105.0], [106.0], [107.0]], p1: [[108.0], [109.0]])), p1: [s0(p0: [[110.0], [111.0], [112.0]], p1: [[113.0], [114.0]])])], [s2(p0: s1(p0: s0(p0: [[115.0], [116.0], [117.0]], p1: [[118.0], [119.0]]), p1: s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0], [124.0]])), p1: [s0(p0: [[125.0], [126.0], [127.0]], p1: [[128.0], [129.0]])])]], p2: [s1(p0: s0(p0: [[130.0], [131.0], [132.0]], p1: [[133.0], [134.0]]), p1: s0(p0: [[135.0], [136.0], [137.0]], p1: [[138.0], [139.0]]))])]), p1: s4(p0: s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0], [144.0]]), p1: [s3(p0: s1(p0: s0(p0: [[145.0], [146.0], [147.0]], p1: [[148.0], [149.0]]), p1: s0(p0: [[150.0], [151.0], [152.0]], p1: [[153.0], [154.0]])), p1: [[s2(p0: s1(p0: s0(p0: [[155.0], [156.0], [157.0]], p1: [[158.0], [159.0]]), p1: s0(p0: [[160.0], [161.0], [162.0]], p1: [[163.0], [164.0]])), p1: [s0(p0: [[165.0], [166.0], [167.0]], p1: [[168.0], [169.0]])])], [s2(p0: s1(p0: s0(p0: [[170.0], [171.0], [172.0]], p1: [[173.0], [174.0]]), p1: s0(p0: [[175.0], [176.0], [177.0]], p1: [[178.0], [179.0]])), p1: [s0(p0: [[180.0], [181.0], [182.0]], p1: [[183.0], [184.0]])])]], p2: [s1(p0: s0(p0: [[185.0], [186.0], [187.0]], p1: [[188.0], [189.0]]), p1: s0(p0: [[190.0], [191.0], [192.0]], p1: [[193.0], [194.0]]))])]))], p1: [s2(p0: s1(p0: s0(p0: [[195.0], [196.0], [197.0]], p1: [[198.0], [199.0]]), p1: s0(p0: [[200.0], [201.0], [202.0]], p1: [[203.0], [204.0]])), p1: [s0(p0: [[205.0], [206.0], [207.0]], p1: [[208.0], [209.0]])]), s2(p0: s1(p0: s0(p0: [[210.0], [211.0], [212.0]], p1: [[213.0], [214.0]]), p1: s0(p0: [[215.0], [216.0], [217.0]], p1: [[218.0], [219.0]])), p1: [s0(p0: [[220.0], [221.0], [222.0]], p1: [[223.0], [224.0]])])])
    let v3: Double = 225.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 225.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
