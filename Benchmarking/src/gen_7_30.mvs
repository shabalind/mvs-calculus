  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s1
    var p1: s0
  } in
  struct s5 {
    var p0: s0
    var p1: [s0]
  } in
  let noinline_f0: (s5, [s2], Float) -> Float = (v0: s5, v1: [s2], v2: Float) -> Float {
    let v6: s2 = v1[0] in
    let v9: s0 = v6.p1 in
    let v15: s2 = v1[1] in
    let v4: [[Float]] = v9.p1 in
    var v19: [[Float]] = v4 in
    let v11: [Float] = v19[0] in
    let v21: Float = v11[0] in
    let v24: s1 = v15.p0 in
    let v22: [Float] = v4[0] in
    v19[0] = v22 in
    let v53: [Float] = [v2, v21, v21] in
    let v27: s0 = v24.p0 in
    var v18: [Float] = v53 in
    let v17: [[Float]] = v27.p0 in
    let v30: [Float] = v17[1] in
    let v26: Float = v18[2] in
    let v115: Float = v18[2] in
    v18[2] = v115 in
    v19[0] = v30 in
    let v85: Float = v30[0] in
    let v55: [Float] = [v26, v85] in
    let v90: Float = v18[2] in
    let v128: Float = v55[0] in
    let v162: Float = v90 - v128 in
    v162
  } in
  fun loop(i: Int, v0: s5, v1: [s2], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s5 = s5(s0([[0.0], [1.0], [2.0]], [[3.0]]), [s0([[4.0], [5.0], [6.0]], [[7.0]]), s0([[8.0], [9.0], [10.0]], [[11.0]])]) in
    let v1: [s2] = [s2(s1(s0([[12.0], [13.0], [14.0]], [[15.0]]), s0([[16.0], [17.0], [18.0]], [[19.0]])), s0([[20.0], [21.0], [22.0]], [[23.0]])), s2(s1(s0([[24.0], [25.0], [26.0]], [[27.0]]), s0([[28.0], [29.0], [30.0]], [[31.0]])), s0([[32.0], [33.0], [34.0]], [[35.0]])), s2(s1(s0([[36.0], [37.0], [38.0]], [[39.0]]), s0([[40.0], [41.0], [42.0]], [[43.0]])), s0([[44.0], [45.0], [46.0]], [[47.0]]))] in
    let v2: Float = 48.0 in
    let initialResult: Float = 48.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()