  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s2 {
    var p0: [s1]
    var p1: [s1]
  } in
  struct s3 {
    var p0: s1
    var p1: s2
  } in
  struct s4 {
    var p0: s3
    var p1: s0
  } in
  struct s7 {
    var p0: [s0]
    var p1: [s1]
  } in
  struct s9 {
    var p0: [s7]
    var p1: s4
  } in
  struct s10 {
    var p0: [s2]
    var p1: [[s9]]
  } in
  let f93: (s0) -> s0 = (v0: s0) -> s0 {
    let v1: [[Float]] = v0.p1 in
    let v6: [Float] = v1[2] in
    let v7: [[Float]] = v0.p1 in
    let v5: [[[Float]]] = [v7, v7, v7] in
    let v4: [[Float]] = v0.p1 in
    let v2: Float = v6[0] in
    let v3: [[Float]] = v0.p0 in
    let v13: [[Float]] = v0.p0 in
    let v11: [[Float]] = v0.p1 in
    var v8: Float = v2 in
    let v15: [Float] = v4[2] in
    let v10: [[Float]] = v0.p1 in
    var v26: [Float] = v15 in
    var v21: Float = v8 in
    v26[0] = v21 in
    let v9: [[Float]] = v0.p0 in
    v26[0] = v8 in
    var v14: [[Float]] = v10 in
    var v17: [[[Float]]] = v5 in
    var v19: Float = v2 in
    var v18: [[Float]] = v9 in
    let v30: [[Float]] = v0.p0 in
    v18[0] = v6 in
    let v20: [[[Float]]] = [v30, v3, v3, v13, v30, v18] in
    let v55: [Float] = v9[1] in
    let v33: [[Float]] = v0.p0 in
    v18[1] = v15 in
    let v58: [[Float]] = v20[5] in
    v18 = v33 in
    let v38: [[Float]] = [v26, v6, v6, v55, v15, v55, v55] in
    v17[1] = v7 in
    v21 = v19 in
    let v27: [Float] = v10[1] in
    var v87: s0 = v0 in
    let v82: [Float] = v38[5] in
    let v46: [[Float]] = v17[1] in
    v17[2] = v46 in
    v87.p0 = v58 in
    let v37: [[Float]] = v5[1] in
    v14[1] = v27 in
    var v40: [Float] = v27 in
    v18[1] = v40 in
    v14[1] = v82 in
    v87.p0 = v58 in
    v14[1] = v27 in
    v87.p1 = v46 in
    let v51: [Float] = v11[1] in
    v14[1] = v51 in
    v87.p1 = v14 in
    v14 = v37 in
    v87
  } in
  let f89: ([s1], s0) -> s0 = (v0: [s1], v1: s0) -> s0 {
    let v3: s0 = f93(v1) in
    let v5: s0 = f93(v3) in
    v5
  } in
  let f54: (s10) -> s10 = (v0: s10) -> s10 {
    var v7: s10 = v0 in
    var v2: s10 = v0 in
    let v4: [s10] = [v2, v7, v0, v7, v2] in
    let v11: [[s9]] = v2.p1 in
    let v6: [s2] = v7.p0 in
    let v8: [s2] = v0.p0 in
    var v19: [[s9]] = v11 in
    let v21: [[s9]] = v0.p1 in
    v2.p0 = v6 in
    let v15: s10 = v4[0] in
    v7.p1 = v19 in
    let v20: [s2] = v2.p0 in
    v2.p0 = v8 in
    v7.p0 = v20 in
    v2.p0 = v6 in
    let v28: [s9] = v21[0] in
    var v71: [s2] = v20 in
    v7.p1 = v19 in
    v19[0] = v28 in
    v7 = v15 in
    v7.p0 = v71 in
    var v81: s10 = v7 in
    v2.p0 = v6 in
    v7.p0 = v20 in
    v81
  } in
  let noinline_f0: (s10, Float) -> Float = (v0: s10, v1: Float) -> Float {
    var v8: s10 = v0 in
    let v11: s10 = f54(v0) in
    let v4: [s2] = v8.p0 in
    let v6: s2 = v4[0] in
    v8.p0 = v4 in
    let v7: s2 = v4[1] in
    v8.p0 = v4 in
    let v17: [s2] = v11.p0 in
    let v18: [s1] = v7.p1 in
    let v19: s1 = v18[0] in
    var v28: [s2] = v4 in
    let v33: [s1] = v6.p0 in
    let v20: [s0] = v19.p0 in
    let v27: s0 = v20[0] in
    let v38: s0 = f93(v27) in
    let v56: s0 = f89(v33, v38) in
    v28 = v17 in
    let v39: [[Float]] = v56.p0 in
    var v103: [[Float]] = v39 in
    let v195: [Float] = v103[1] in
    v8.p0 = v28 in
    let v154: Float = v195[0] in
    v154
  } in
  fun loop(i: Int, v0: s10, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s10 = s10([s2([s1([s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]])], [s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]])]), s1([s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]])], [s0([[15.0], [16.0]], [[17.0], [18.0], [19.0]])]), s1([s0([[20.0], [21.0]], [[22.0], [23.0], [24.0]])], [s0([[25.0], [26.0]], [[27.0], [28.0], [29.0]])])], [s1([s0([[30.0], [31.0]], [[32.0], [33.0], [34.0]])], [s0([[35.0], [36.0]], [[37.0], [38.0], [39.0]])])]), s2([s1([s0([[40.0], [41.0]], [[42.0], [43.0], [44.0]])], [s0([[45.0], [46.0]], [[47.0], [48.0], [49.0]])]), s1([s0([[50.0], [51.0]], [[52.0], [53.0], [54.0]])], [s0([[55.0], [56.0]], [[57.0], [58.0], [59.0]])]), s1([s0([[60.0], [61.0]], [[62.0], [63.0], [64.0]])], [s0([[65.0], [66.0]], [[67.0], [68.0], [69.0]])])], [s1([s0([[70.0], [71.0]], [[72.0], [73.0], [74.0]])], [s0([[75.0], [76.0]], [[77.0], [78.0], [79.0]])])]), s2([s1([s0([[80.0], [81.0]], [[82.0], [83.0], [84.0]])], [s0([[85.0], [86.0]], [[87.0], [88.0], [89.0]])]), s1([s0([[90.0], [91.0]], [[92.0], [93.0], [94.0]])], [s0([[95.0], [96.0]], [[97.0], [98.0], [99.0]])]), s1([s0([[100.0], [101.0]], [[102.0], [103.0], [104.0]])], [s0([[105.0], [106.0]], [[107.0], [108.0], [109.0]])])], [s1([s0([[110.0], [111.0]], [[112.0], [113.0], [114.0]])], [s0([[115.0], [116.0]], [[117.0], [118.0], [119.0]])])])], [[s9([s7([s0([[120.0], [121.0]], [[122.0], [123.0], [124.0]]), s0([[125.0], [126.0]], [[127.0], [128.0], [129.0]])], [s1([s0([[130.0], [131.0]], [[132.0], [133.0], [134.0]])], [s0([[135.0], [136.0]], [[137.0], [138.0], [139.0]])]), s1([s0([[140.0], [141.0]], [[142.0], [143.0], [144.0]])], [s0([[145.0], [146.0]], [[147.0], [148.0], [149.0]])]), s1([s0([[150.0], [151.0]], [[152.0], [153.0], [154.0]])], [s0([[155.0], [156.0]], [[157.0], [158.0], [159.0]])])]), s7([s0([[160.0], [161.0]], [[162.0], [163.0], [164.0]]), s0([[165.0], [166.0]], [[167.0], [168.0], [169.0]])], [s1([s0([[170.0], [171.0]], [[172.0], [173.0], [174.0]])], [s0([[175.0], [176.0]], [[177.0], [178.0], [179.0]])]), s1([s0([[180.0], [181.0]], [[182.0], [183.0], [184.0]])], [s0([[185.0], [186.0]], [[187.0], [188.0], [189.0]])]), s1([s0([[190.0], [191.0]], [[192.0], [193.0], [194.0]])], [s0([[195.0], [196.0]], [[197.0], [198.0], [199.0]])])])], s4(s3(s1([s0([[200.0], [201.0]], [[202.0], [203.0], [204.0]])], [s0([[205.0], [206.0]], [[207.0], [208.0], [209.0]])]), s2([s1([s0([[210.0], [211.0]], [[212.0], [213.0], [214.0]])], [s0([[215.0], [216.0]], [[217.0], [218.0], [219.0]])]), s1([s0([[220.0], [221.0]], [[222.0], [223.0], [224.0]])], [s0([[225.0], [226.0]], [[227.0], [228.0], [229.0]])]), s1([s0([[230.0], [231.0]], [[232.0], [233.0], [234.0]])], [s0([[235.0], [236.0]], [[237.0], [238.0], [239.0]])])], [s1([s0([[240.0], [241.0]], [[242.0], [243.0], [244.0]])], [s0([[245.0], [246.0]], [[247.0], [248.0], [249.0]])])])), s0([[250.0], [251.0]], [[252.0], [253.0], [254.0]])))], [s9([s7([s0([[255.0], [256.0]], [[257.0], [258.0], [259.0]]), s0([[260.0], [261.0]], [[262.0], [263.0], [264.0]])], [s1([s0([[265.0], [266.0]], [[267.0], [268.0], [269.0]])], [s0([[270.0], [271.0]], [[272.0], [273.0], [274.0]])]), s1([s0([[275.0], [276.0]], [[277.0], [278.0], [279.0]])], [s0([[280.0], [281.0]], [[282.0], [283.0], [284.0]])]), s1([s0([[285.0], [286.0]], [[287.0], [288.0], [289.0]])], [s0([[290.0], [291.0]], [[292.0], [293.0], [294.0]])])]), s7([s0([[295.0], [296.0]], [[297.0], [298.0], [299.0]]), s0([[300.0], [301.0]], [[302.0], [303.0], [304.0]])], [s1([s0([[305.0], [306.0]], [[307.0], [308.0], [309.0]])], [s0([[310.0], [311.0]], [[312.0], [313.0], [314.0]])]), s1([s0([[315.0], [316.0]], [[317.0], [318.0], [319.0]])], [s0([[320.0], [321.0]], [[322.0], [323.0], [324.0]])]), s1([s0([[325.0], [326.0]], [[327.0], [328.0], [329.0]])], [s0([[330.0], [331.0]], [[332.0], [333.0], [334.0]])])])], s4(s3(s1([s0([[335.0], [336.0]], [[337.0], [338.0], [339.0]])], [s0([[340.0], [341.0]], [[342.0], [343.0], [344.0]])]), s2([s1([s0([[345.0], [346.0]], [[347.0], [348.0], [349.0]])], [s0([[350.0], [351.0]], [[352.0], [353.0], [354.0]])]), s1([s0([[355.0], [356.0]], [[357.0], [358.0], [359.0]])], [s0([[360.0], [361.0]], [[362.0], [363.0], [364.0]])]), s1([s0([[365.0], [366.0]], [[367.0], [368.0], [369.0]])], [s0([[370.0], [371.0]], [[372.0], [373.0], [374.0]])])], [s1([s0([[375.0], [376.0]], [[377.0], [378.0], [379.0]])], [s0([[380.0], [381.0]], [[382.0], [383.0], [384.0]])])])), s0([[385.0], [386.0]], [[387.0], [388.0], [389.0]])))]]) in
    let v1: Float = 390.0 in
    let initialResult: Float = 390.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()