  struct s0 {
    var p0: [[Float]]
    var p1: Float
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: s1
  } in
  struct s3 {
    var p0: [[s2]]
    var p1: [[s1]]
  } in
  struct s4 {
    var p0: s2
    var p1: s2
  } in
  struct s5 {
    var p0: s3
    var p1: s2
  } in
  let f30: (s1) -> s1 = (v0: s1) -> s1 {
    var v3: s1 = v0 in
    let v4: [s1] = [v0, v3, v3] in
    let v6: s1 = v4[1] in
    v6
  } in
  let f27: (s2) -> s2 = (v0: s2) -> s2 {
    let v4: s1 = v0.p0 in
    var v5: s1 = v4 in
    let v8: s1 = v0.p0 in
    let v2: [[s0]] = v4.p1 in
    var v1: [[s0]] = v2 in
    let v6: [[[s0]]] = [v2, v1, v2, v1, v2, v1] in
    let v10: s0 = v8.p0 in
    let v7: [s0] = v1[1] in
    var v17: s2 = v0 in
    var v13: [s0] = v7 in
    var v21: s0 = v10 in
    var v12: s2 = v17 in
    var v18: [[s0]] = v2 in
    v12.p0 = v5 in
    let v15: [[s0]] = v6[4] in
    var v27: [[s0]] = v18 in
    v18[0] = v13 in
    let v16: [s0] = v2[0] in
    let v43: s1 = v0.p0 in
    v5.p1 = v27 in
    let v25: Float = v10.p1 in
    let v26: s1 = f30(v5) in
    let v34: s1 = f30(v26) in
    v21.p1 = v25 in
    let v22: s1 = f30(v34) in
    v5 = v43 in
    let v38: s1 = f30(v22) in
    var v24: Float = v25 in
    var v32: s2 = v12 in
    v18 = v15 in
    v17.p0 = v38 in
    let v23: s1 = v12.p0 in
    v18[0] = v16 in
    let v28: s1 = f30(v23) in
    let v60: s0 = v16[0] in
    v5.p1 = v2 in
    let v63: s1 = f30(v8) in
    v13[0] = v60 in
    v21.p1 = v24 in
    v32.p0 = v63 in
    var v86: s2 = v32 in
    var v160: s2 = v86 in
    v5.p0 = v21 in
    v17.p0 = v28 in
    v160
  } in
  let noinline_f0: ([[s4]], [s5], Float) -> Float = (v0: [[s4]], v1: [s5], v2: Float) -> Float {
    let v7: s5 = v1[0] in
    let v3: s2 = v7.p1 in
    let v18: s2 = f27(v3) in
    let v11: s1 = v18.p0 in
    let v21: s0 = v11.p0 in
    let v38: Float = v21.p1 in
    v38
  } in
  fun loop(i: Int, v0: [[s4]], v1: [s5], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s4]] = [[s4(s2(s1(s0([[0.0], [1.0]], 2.0), [[s0([[3.0], [4.0]], 5.0)], [s0([[6.0], [7.0]], 8.0)]])), s2(s1(s0([[9.0], [10.0]], 11.0), [[s0([[12.0], [13.0]], 14.0)], [s0([[15.0], [16.0]], 17.0)]])))], [s4(s2(s1(s0([[18.0], [19.0]], 20.0), [[s0([[21.0], [22.0]], 23.0)], [s0([[24.0], [25.0]], 26.0)]])), s2(s1(s0([[27.0], [28.0]], 29.0), [[s0([[30.0], [31.0]], 32.0)], [s0([[33.0], [34.0]], 35.0)]])))], [s4(s2(s1(s0([[36.0], [37.0]], 38.0), [[s0([[39.0], [40.0]], 41.0)], [s0([[42.0], [43.0]], 44.0)]])), s2(s1(s0([[45.0], [46.0]], 47.0), [[s0([[48.0], [49.0]], 50.0)], [s0([[51.0], [52.0]], 53.0)]])))]] in
    let v1: [s5] = [s5(s3([[s2(s1(s0([[54.0], [55.0]], 56.0), [[s0([[57.0], [58.0]], 59.0)], [s0([[60.0], [61.0]], 62.0)]]))]], [[s1(s0([[63.0], [64.0]], 65.0), [[s0([[66.0], [67.0]], 68.0)], [s0([[69.0], [70.0]], 71.0)]])], [s1(s0([[72.0], [73.0]], 74.0), [[s0([[75.0], [76.0]], 77.0)], [s0([[78.0], [79.0]], 80.0)]])]]), s2(s1(s0([[81.0], [82.0]], 83.0), [[s0([[84.0], [85.0]], 86.0)], [s0([[87.0], [88.0]], 89.0)]])))] in
    let v2: Float = 90.0 in
    let initialResult: Float = 90.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()