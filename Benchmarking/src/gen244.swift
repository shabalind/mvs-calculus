  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: [s1]
    var p1: [s1]
  }
  func f17(_ v0: Double) -> Double {
    var v1: Double = v0
    var v2: Double = v1
    var v5: Double = v2
    v1 = v0
    var v7: Double = v2
    let v6: [Double] = [v7, v1, v5, v0, v0, v1]
    let v3: Double = v6[0]
    let v8: Double = v6[2]
    let v15: Double = v6[5]
    var v17: [Double] = v6
    var v4: [Double] = v17
    v17[2] = v7
    v4[0] = v3
    let v9: [[Double]] = [v4, v6]
    v1 = v15
    var v11: Double = v8
    let v13: Double = v17[0]
    var v10: [[Double]] = v9
    let v24: [Double] = v10[0]
    let v31: Double = v6[3]
    v4[0] = v13
    let v22: Double = v6[1]
    let v21: Double = v15 * v1
    v11 = v22
    let v23: Double = v0 + v11
    var v40: [Double] = v24
    var v47: Double = v8
    let v33: Double = v4[2]
    v40[3] = v23
    var v27: [Double] = v40
    var v34: Double = v2
    var v41: [[Double]] = v9
    v10[0] = v17
    let v42: [Double] = v9[1]
    let v36: [Double] = v41[1]
    v27[4] = v15
    let v50: Double = v36[0]
    var v74: Double = v47
    v41[0] = v42
    var v49: [[Double]] = v10
    var v83: [Double] = v27
    let v44: [Double] = v41[0]
    v40[1] = v33
    var v38: [[Double]] = v49
    v17[3] = v21
    v49[1] = v44
    v49[0] = v40
    v40[1] = v5
    v74 = v13
    let v37: [Double] = v38[0]
    v27[3] = v1
    let v32: [Double] = v10[1]
    v49[1] = v32
    let v93: [Double] = v38[0]
    var v81: [Double] = v17
    let v250: [Double] = v41[0]
    var v137: Double = v50
    v49[1] = v37
    v49[0] = v81
    var v144: [Double] = v93
    v81[1] = v0
    v81[2] = v74
    v10[1] = v83
    v41[0] = v250
    v40[4] = v31
    let v120: Double = v144[3]
    v40[0] = v137
    let v134: Double = v120 + v34
    return v134
  }
  @inline(never)
  func f0(_ v0: [[s2]], _ v1: s2, _ v2: s1, _ v3: s2, _ v4: Double) -> Double {
    let v5: Double = v4 - v4
    var v25: Double = v4
    var v95: Double = v5
    let v141: Double = f17(v95)
    let v192: Double = v141 / v25
    let v144: Double = v192 + v25
    return v144
  }
  func benchmark() {
    let v0: [[s2]] = [[s2(p0: [s1(p0: s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0]]), p1: s0(p0: [[4.0], [5.0], [6.0]], p1: [[7.0]])), s1(p0: s0(p0: [[8.0], [9.0], [10.0]], p1: [[11.0]]), p1: s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0]])), s1(p0: s0(p0: [[16.0], [17.0], [18.0]], p1: [[19.0]]), p1: s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0]]))], p1: [s1(p0: s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0]]), p1: s0(p0: [[28.0], [29.0], [30.0]], p1: [[31.0]])), s1(p0: s0(p0: [[32.0], [33.0], [34.0]], p1: [[35.0]]), p1: s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0]]))])], [s2(p0: [s1(p0: s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0]]), p1: s0(p0: [[44.0], [45.0], [46.0]], p1: [[47.0]])), s1(p0: s0(p0: [[48.0], [49.0], [50.0]], p1: [[51.0]]), p1: s0(p0: [[52.0], [53.0], [54.0]], p1: [[55.0]])), s1(p0: s0(p0: [[56.0], [57.0], [58.0]], p1: [[59.0]]), p1: s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0]]))], p1: [s1(p0: s0(p0: [[64.0], [65.0], [66.0]], p1: [[67.0]]), p1: s0(p0: [[68.0], [69.0], [70.0]], p1: [[71.0]])), s1(p0: s0(p0: [[72.0], [73.0], [74.0]], p1: [[75.0]]), p1: s0(p0: [[76.0], [77.0], [78.0]], p1: [[79.0]]))])]]
    let v1: s2 = s2(p0: [s1(p0: s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0]]), p1: s0(p0: [[84.0], [85.0], [86.0]], p1: [[87.0]])), s1(p0: s0(p0: [[88.0], [89.0], [90.0]], p1: [[91.0]]), p1: s0(p0: [[92.0], [93.0], [94.0]], p1: [[95.0]])), s1(p0: s0(p0: [[96.0], [97.0], [98.0]], p1: [[99.0]]), p1: s0(p0: [[100.0], [101.0], [102.0]], p1: [[103.0]]))], p1: [s1(p0: s0(p0: [[104.0], [105.0], [106.0]], p1: [[107.0]]), p1: s0(p0: [[108.0], [109.0], [110.0]], p1: [[111.0]])), s1(p0: s0(p0: [[112.0], [113.0], [114.0]], p1: [[115.0]]), p1: s0(p0: [[116.0], [117.0], [118.0]], p1: [[119.0]]))])
    let v2: s1 = s1(p0: s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0]]), p1: s0(p0: [[124.0], [125.0], [126.0]], p1: [[127.0]]))
    let v3: s2 = s2(p0: [s1(p0: s0(p0: [[128.0], [129.0], [130.0]], p1: [[131.0]]), p1: s0(p0: [[132.0], [133.0], [134.0]], p1: [[135.0]])), s1(p0: s0(p0: [[136.0], [137.0], [138.0]], p1: [[139.0]]), p1: s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0]])), s1(p0: s0(p0: [[144.0], [145.0], [146.0]], p1: [[147.0]]), p1: s0(p0: [[148.0], [149.0], [150.0]], p1: [[151.0]]))], p1: [s1(p0: s0(p0: [[152.0], [153.0], [154.0]], p1: [[155.0]]), p1: s0(p0: [[156.0], [157.0], [158.0]], p1: [[159.0]])), s1(p0: s0(p0: [[160.0], [161.0], [162.0]], p1: [[163.0]]), p1: s0(p0: [[164.0], [165.0], [166.0]], p1: [[167.0]]))])
    let v4: Double = 168.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 168.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
