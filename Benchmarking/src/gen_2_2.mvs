  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: [s1]
    var p1: s0
  } in
  struct s5 {
    var p0: s2
    var p1: [[s1]]
  } in
  struct s7 {
    var p0: [[s2]]
    var p1: s5
  } in
  let f9: (s2) -> s2 = (v0: s2) -> s2 {
    let v6: s0 = v0.p1 in
    var v1: s2 = v0 in
    var v8: s0 = v6 in
    var v2: s2 = v1 in
    v1.p1 = v8 in
    let v4: [[Float]] = v6.p0 in
    v2 = v0 in
    var v3: s2 = v0 in
    var v5: s0 = v6 in
    v3.p1 = v5 in
    let v13: [[[Float]]] = [v4, v4, v4] in
    v2 = v1 in
    let v12: [[Float]] = v13[2] in
    let v10: s0 = v3.p1 in
    let v7: [Float] = v12[1] in
    let v11: [Float] = v12[0] in
    let v9: [[Float]] = v10.p0 in
    var v21: s0 = v8 in
    var v15: [[[Float]]] = v13 in
    v15[1] = v9 in
    let v25: [[Float]] = v15[2] in
    v2.p1 = v6 in
    v15[2] = v12 in
    v15[1] = v12 in
    var v46: [[Float]] = v25 in
    var v35: [[Float]] = v46 in
    var v39: [Float] = v7 in
    v46[0] = v39 in
    v21.p0 = v4 in
    v15[0] = v35 in
    v39 = v11 in
    v8.p1 = v35 in
    v2.p1 = v10 in
    v2.p1 = v21 in
    v2
  } in
  let noinline_f0: ([s7], Float) -> Float = (v0: [s7], v1: Float) -> Float {
    let v9: s7 = v0[0] in
    let v2: s7 = v0[1] in
    let v4: s5 = v9.p1 in
    var v13: s5 = v4 in
    let v10: [[s2]] = v9.p0 in
    v13 = v4 in
    let v12: s2 = v13.p0 in
    let v7: [s2] = v10[0] in
    v13.p0 = v12 in
    let v20: s2 = v13.p0 in
    let v17: s0 = v20.p1 in
    let v25: s2 = v7[0] in
    v13.p0 = v25 in
    let v32: s5 = v2.p1 in
    let v24: [[Float]] = v17.p0 in
    let v31: s2 = f9(v12) in
    v13.p0 = v20 in
    v13.p0 = v25 in
    v13.p0 = v12 in
    v13.p0 = v25 in
    v13 = v4 in
    let v38: [Float] = v24[0] in
    let v23: s2 = v32.p0 in
    v13.p0 = v31 in
    v13.p0 = v23 in
    var v82: [Float] = v38 in
    let v78: [[s1]] = v4.p1 in
    v13.p1 = v78 in
    v13.p0 = v12 in
    let v210: Float = v82[0] in
    v210
  } in
  fun loop(i: Int, v0: [s7], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s7] = [s7([[s2([s1(s0([[0.0], [1.0]], [[2.0], [3.0]]), [[s0([[4.0], [5.0]], [[6.0], [7.0]])]])], s0([[8.0], [9.0]], [[10.0], [11.0]]))]], s5(s2([s1(s0([[12.0], [13.0]], [[14.0], [15.0]]), [[s0([[16.0], [17.0]], [[18.0], [19.0]])]])], s0([[20.0], [21.0]], [[22.0], [23.0]])), [[s1(s0([[24.0], [25.0]], [[26.0], [27.0]]), [[s0([[28.0], [29.0]], [[30.0], [31.0]])]])], [s1(s0([[32.0], [33.0]], [[34.0], [35.0]]), [[s0([[36.0], [37.0]], [[38.0], [39.0]])]])]])), s7([[s2([s1(s0([[40.0], [41.0]], [[42.0], [43.0]]), [[s0([[44.0], [45.0]], [[46.0], [47.0]])]])], s0([[48.0], [49.0]], [[50.0], [51.0]]))]], s5(s2([s1(s0([[52.0], [53.0]], [[54.0], [55.0]]), [[s0([[56.0], [57.0]], [[58.0], [59.0]])]])], s0([[60.0], [61.0]], [[62.0], [63.0]])), [[s1(s0([[64.0], [65.0]], [[66.0], [67.0]]), [[s0([[68.0], [69.0]], [[70.0], [71.0]])]])], [s1(s0([[72.0], [73.0]], [[74.0], [75.0]]), [[s0([[76.0], [77.0]], [[78.0], [79.0]])]])]])), s7([[s2([s1(s0([[80.0], [81.0]], [[82.0], [83.0]]), [[s0([[84.0], [85.0]], [[86.0], [87.0]])]])], s0([[88.0], [89.0]], [[90.0], [91.0]]))]], s5(s2([s1(s0([[92.0], [93.0]], [[94.0], [95.0]]), [[s0([[96.0], [97.0]], [[98.0], [99.0]])]])], s0([[100.0], [101.0]], [[102.0], [103.0]])), [[s1(s0([[104.0], [105.0]], [[106.0], [107.0]]), [[s0([[108.0], [109.0]], [[110.0], [111.0]])]])], [s1(s0([[112.0], [113.0]], [[114.0], [115.0]]), [[s0([[116.0], [117.0]], [[118.0], [119.0]])]])]]))] in
    let v1: Float = 120.0 in
    let initialResult: Float = 120.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()