  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
  }
  struct s2 {
    var p0: s0
    var p1: [[s1]]
  }
  struct s6 {
    var p0: [s2]
    var p1: s1
  }
  struct s7 {
    var p0: [[s2]]
    var p1: s1
  }
  @inline(never)
  func f0(_ v0: [s7], _ v1: s6, _ v2: Double) -> Double {
    let v5: s7 = v0[1]
    let v4: s1 = v5.p1
    let v7: s7 = v0[1]
    let v3: [[s0]] = v4.p1
    let v27: s1 = v7.p1
    let v22: [s0] = v27.p0
    let v70: s1 = s1(p0: v22, p1: v3)
    let v45: [[s0]] = v70.p1
    let v73: [s0] = v45[0]
    let v60: s0 = v73[0]
    let v41: [[Double]] = v60.p1
    let v78: [Double] = v41[0]
    let v50: Double = v78[0]
    return v50
  }
  func benchmark() {
    let v0: [s7] = [s7(p0: [[s2(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0]]), p1: [[s1(p0: [s0(p0: [[4.0], [5.0]], p1: [[6.0], [7.0]]), s0(p0: [[8.0], [9.0]], p1: [[10.0], [11.0]])], p1: [[s0(p0: [[12.0], [13.0]], p1: [[14.0], [15.0]])]])]])]], p1: s1(p0: [s0(p0: [[16.0], [17.0]], p1: [[18.0], [19.0]]), s0(p0: [[20.0], [21.0]], p1: [[22.0], [23.0]])], p1: [[s0(p0: [[24.0], [25.0]], p1: [[26.0], [27.0]])]])), s7(p0: [[s2(p0: s0(p0: [[28.0], [29.0]], p1: [[30.0], [31.0]]), p1: [[s1(p0: [s0(p0: [[32.0], [33.0]], p1: [[34.0], [35.0]]), s0(p0: [[36.0], [37.0]], p1: [[38.0], [39.0]])], p1: [[s0(p0: [[40.0], [41.0]], p1: [[42.0], [43.0]])]])]])]], p1: s1(p0: [s0(p0: [[44.0], [45.0]], p1: [[46.0], [47.0]]), s0(p0: [[48.0], [49.0]], p1: [[50.0], [51.0]])], p1: [[s0(p0: [[52.0], [53.0]], p1: [[54.0], [55.0]])]]))]
    let v1: s6 = s6(p0: [s2(p0: s0(p0: [[56.0], [57.0]], p1: [[58.0], [59.0]]), p1: [[s1(p0: [s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0]]), s0(p0: [[64.0], [65.0]], p1: [[66.0], [67.0]])], p1: [[s0(p0: [[68.0], [69.0]], p1: [[70.0], [71.0]])]])]])], p1: s1(p0: [s0(p0: [[72.0], [73.0]], p1: [[74.0], [75.0]]), s0(p0: [[76.0], [77.0]], p1: [[78.0], [79.0]])], p1: [[s0(p0: [[80.0], [81.0]], p1: [[82.0], [83.0]])]]))
    let v2: Double = 84.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 84.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
