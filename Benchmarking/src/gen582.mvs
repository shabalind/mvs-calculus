  let noinline_f0: ([[Float]], [[Float]], [[Float]], [[Float]], Float) -> Float = (v0: [[Float]], v1: [[Float]], v2: [[Float]], v3: [[Float]], v4: Float) -> Float {
    var v9: Float = v4 in
    v9 = v4 in
    var v28: Float = v4 in
    let v22: [Float] = [v9, v4, v28, v28, v9, v9] in
    var v16: [Float] = v22 in
    let v35: [Float] = v1[1] in
    v16[2] = v9 in
    let v33: Float = v35[0] in
    v16 = v22 in
    v28 = v33 in
    let v95: [[Float]] = [v22, v16, v22, v16, v22, v16] in
    var v219: [[Float]] = v95 in
    let v62: [Float] = v219[1] in
    let v105: Float = v62[5] in
    v105
  } in
  fun loop(i: Int, v0: [[Float]], v1: [[Float]], v2: [[Float]], v3: [[Float]], v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0]] in
    let v1: [[Float]] = [[1.0], [2.0], [3.0]] in
    let v2: [[Float]] = [[4.0], [5.0], [6.0]] in
    let v3: [[Float]] = [[7.0]] in
    let v4: Float = 8.0 in
    let initialResult: Float = 8.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()