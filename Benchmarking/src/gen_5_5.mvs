  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  let f48: (Float) -> Float = (v0: Float) -> Float {
    var v4: Float = v0 in
    var v6: Float = v0 in
    var v7: Float = v0 in
    var v3: Float = v6 in
    var v11: Float = v6 in
    var v1: Float = v7 in
    var v15: Float = v4 in
    v11 = v4 in
    var v2: Float = v3 in
    v11 = v3 in
    let v25: [Float] = [v0, v0, v4, v7] in
    var v5: [Float] = v25 in
    var v16: [Float] = v5 in
    let v14: Float = v4 - v15 in
    v5[1] = v6 in
    var v32: Float = v7 in
    let v10: Float = v25[1] in
    v16[3] = v14 in
    let v8: Float = v25[1] in
    let v19: Float = v16[2] in
    v16[2] = v32 in
    var v18: [Float] = v16 in
    v18[0] = v1 in
    var v22: [Float] = v25 in
    var v35: [Float] = v25 in
    v5[0] = v8 in
    v22[1] = v3 in
    var v31: [Float] = v35 in
    var v40: [Float] = v16 in
    let v34: Float = v31[1] in
    var v49: Float = v11 in
    v22[1] = v2 in
    let v46: Float = v22[0] in
    v22[1] = v11 in
    let v138: Float = v25[3] in
    var v57: Float = v4 in
    let v37: Float = v40[3] in
    let v48: Float = v31[0] in
    v22[2] = v8 in
    var v50: Float = v0 in
    v16[1] = v49 in
    v22[3] = v57 in
    v22[3] = v6 in
    v31[2] = v19 in
    v22[2] = v50 in
    var v58: Float = v138 in
    v16[2] = v14 in
    let v38: Float = v18[0] in
    v18[0] = v1 in
    let v55: [Float] = [v6, v46, v10, v34, v37, v48] in
    var v54: [Float] = v55 in
    var v97: [Float] = v54 in
    v97[2] = v58 in
    let v85: Float = v97[0] in
    v35[3] = v85 in
    v31[1] = v50 in
    v31[1] = v14 in
    v16[0] = v57 in
    v5[3] = v11 in
    var v71: [Float] = v97 in
    v5[0] = v4 in
    v22[2] = v38 in
    var v183: [Float] = v71 in
    var v96: [Float] = v183 in
    v96[5] = v32 in
    let v134: Float = v96[2] in
    v134
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    let v4: [s0] = v0.p0 in
    let v5: s0 = v4[1] in
    let v11: [Float] = [v1, v1, v1, v1, v1] in
    let v6: Float = f48(v1) in
    let v24: Float = v11[0] in
    var v15: [Float] = v11 in
    let v17: [[Float]] = v5.p1 in
    let v16: Float = v24 + v1 in
    var v13: s0 = v5 in
    v13.p1 = v17 in
    let v21: [[Float]] = v13.p0 in
    let v43: Float = v1 / v1 in
    v15[3] = v6 in
    v15[3] = v24 in
    let v33: [Float] = v21[0] in
    let v55: Float = v15[2] in
    v15[4] = v16 in
    var v35: Float = v1 in
    let v27: Float = v33[0] in
    v15[4] = v43 in
    let v19: Float = f48(v35) in
    v15[1] = v19 in
    v15[4] = v27 in
    v55
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]), s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]]), s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]])], s0([[15.0], [16.0], [17.0]], [[18.0], [19.0]])) in
    let v1: Float = 20.0 in
    let initialResult: Float = 20.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()