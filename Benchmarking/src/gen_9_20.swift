  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: [[s0]]
    var p1: s1
  }
  struct s3 {
    var p0: [s2]
    var p1: [s0]
    var p2: [[Double]]
  }
  func f37(_ v0: Double) -> Double {
    var v6: Double = v0
    var v3: Double = v6
    var v2: Double = v3
    var v4: Double = v0
    var v8: Double = v0
    var v5: Double = v4
    let v13: Double = v6 - v5
    var v24: Double = v2
    var v14: Double = v24
    var v10: Double = v0
    let v12: Double = v13 * v3
    var v15: Double = v14
    var v60: Double = v12
    var v28: Double = v8
    v28 = v60
    let v25: [Double] = [v28]
    var v64: [Double] = v25
    var v20: [Double] = v64
    v64[0] = v10
    let v26: Double = v20[0]
    v20[0] = v14
    v64[0] = v24
    v64[0] = v15
    var v37: Double = v26
    return v37
  }
  @inline(never)
  func f0(_ v0: s0, _ v1: s0, _ v2: [s3], _ v3: [[s0]], _ v4: [[s2]], _ v5: Double) -> Double {
    let v10: [[Double]] = v1.p1
    let v19: Double = v5 - v5
    let v33: [Double] = v10[0]
    let v17: Double = f37(v19)
    let v42: Double = v19 * v5
    var v38: [Double] = v33
    let v53: Double = v38[0]
    let v80: Double = f37(v17)
    let v212: Double = v53 * v42
    v38[0] = v80
    return v212
  }
  func benchmark() {
    let v0: s0 = s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0], [5.0]])
    let v1: s0 = s0(p0: [[6.0], [7.0], [8.0]], p1: [[9.0], [10.0], [11.0]])
    let v2: [s3] = [s3(p0: [s2(p0: [[s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0], [16.0], [17.0]])], [s0(p0: [[18.0], [19.0], [20.0]], p1: [[21.0], [22.0], [23.0]])], [s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0], [28.0], [29.0]])]], p1: s1(p0: s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0], [35.0]]), p1: s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0], [40.0], [41.0]])))], p1: [s0(p0: [[42.0], [43.0], [44.0]], p1: [[45.0], [46.0], [47.0]]), s0(p0: [[48.0], [49.0], [50.0]], p1: [[51.0], [52.0], [53.0]]), s0(p0: [[54.0], [55.0], [56.0]], p1: [[57.0], [58.0], [59.0]])], p2: [[60.0]]), s3(p0: [s2(p0: [[s0(p0: [[61.0], [62.0], [63.0]], p1: [[64.0], [65.0], [66.0]])], [s0(p0: [[67.0], [68.0], [69.0]], p1: [[70.0], [71.0], [72.0]])], [s0(p0: [[73.0], [74.0], [75.0]], p1: [[76.0], [77.0], [78.0]])]], p1: s1(p0: s0(p0: [[79.0], [80.0], [81.0]], p1: [[82.0], [83.0], [84.0]]), p1: s0(p0: [[85.0], [86.0], [87.0]], p1: [[88.0], [89.0], [90.0]])))], p1: [s0(p0: [[91.0], [92.0], [93.0]], p1: [[94.0], [95.0], [96.0]]), s0(p0: [[97.0], [98.0], [99.0]], p1: [[100.0], [101.0], [102.0]]), s0(p0: [[103.0], [104.0], [105.0]], p1: [[106.0], [107.0], [108.0]])], p2: [[109.0]])]
    let v3: [[s0]] = [[s0(p0: [[110.0], [111.0], [112.0]], p1: [[113.0], [114.0], [115.0]])]]
    let v4: [[s2]] = [[s2(p0: [[s0(p0: [[116.0], [117.0], [118.0]], p1: [[119.0], [120.0], [121.0]])], [s0(p0: [[122.0], [123.0], [124.0]], p1: [[125.0], [126.0], [127.0]])], [s0(p0: [[128.0], [129.0], [130.0]], p1: [[131.0], [132.0], [133.0]])]], p1: s1(p0: s0(p0: [[134.0], [135.0], [136.0]], p1: [[137.0], [138.0], [139.0]]), p1: s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0], [144.0], [145.0]])))], [s2(p0: [[s0(p0: [[146.0], [147.0], [148.0]], p1: [[149.0], [150.0], [151.0]])], [s0(p0: [[152.0], [153.0], [154.0]], p1: [[155.0], [156.0], [157.0]])], [s0(p0: [[158.0], [159.0], [160.0]], p1: [[161.0], [162.0], [163.0]])]], p1: s1(p0: s0(p0: [[164.0], [165.0], [166.0]], p1: [[167.0], [168.0], [169.0]]), p1: s0(p0: [[170.0], [171.0], [172.0]], p1: [[173.0], [174.0], [175.0]])))], [s2(p0: [[s0(p0: [[176.0], [177.0], [178.0]], p1: [[179.0], [180.0], [181.0]])], [s0(p0: [[182.0], [183.0], [184.0]], p1: [[185.0], [186.0], [187.0]])], [s0(p0: [[188.0], [189.0], [190.0]], p1: [[191.0], [192.0], [193.0]])]], p1: s1(p0: s0(p0: [[194.0], [195.0], [196.0]], p1: [[197.0], [198.0], [199.0]]), p1: s0(p0: [[200.0], [201.0], [202.0]], p1: [[203.0], [204.0], [205.0]])))]]
    let v5: Double = 206.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 206.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4, v5)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
