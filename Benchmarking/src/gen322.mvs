  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
    var p3: [[Float]]
  } in
  let f76: (s0) -> s0 = (v0: s0) -> s0 {
    let v1: [[Float]] = v0.p1 in
    let v6: [[Float]] = v0.p2 in
    let v4: [Float] = v6[0] in
    var v2: s0 = v0 in
    let v5: [Float] = v6[0] in
    v2 = v0 in
    v2 = v0 in
    var v8: [[Float]] = v6 in
    let v14: [[Float]] = v0.p0 in
    let v13: [[Float]] = v0.p3 in
    let v10: [Float] = v1[0] in
    v2 = v0 in
    v8[0] = v4 in
    v8[0] = v4 in
    v2 = v0 in
    v2.p0 = v14 in
    let v22: [[Float]] = v0.p1 in
    v8[0] = v10 in
    let v19: [[Float]] = v0.p3 in
    v8[0] = v5 in
    var v28: [[Float]] = v8 in
    var v31: [[Float]] = v19 in
    v2.p0 = v14 in
    let v34: [[Float]] = v2.p3 in
    v2.p2 = v19 in
    var v32: s0 = v0 in
    v31[0] = v5 in
    let v38: [[Float]] = v0.p1 in
    v32.p3 = v34 in
    var v20: s0 = v0 in
    let v27: [[Float]] = v20.p0 in
    v2.p2 = v13 in
    var v110: [Float] = v4 in
    v32.p2 = v31 in
    let v49: [[Float]] = v32.p1 in
    var v42: [[Float]] = v6 in
    let v37: s0 = s0(v27, v49, v28, v28) in
    v20.p3 = v42 in
    v20.p1 = v22 in
    let v52: [[Float]] = v20.p0 in
    var v71: [[Float]] = v38 in
    v20.p1 = v71 in
    v2.p0 = v52 in
    v42[0] = v110 in
    v37
  } in
  let noinline_f0: ([[s0]], Float) -> Float = (v0: [[s0]], v1: Float) -> Float {
    let v2: [s0] = v0[0] in
    let v9: s0 = v2[0] in
    var v29: s0 = v9 in
    let v19: [[Float]] = v29.p0 in
    let v25: s0 = f76(v29) in
    let v23: [[Float]] = v25.p2 in
    var v65: [[Float]] = v23 in
    let v28: [[Float]] = v9.p1 in
    let v17: [[Float]] = v29.p0 in
    v29.p2 = v65 in
    let v37: [[Float]] = v25.p3 in
    let v46: [Float] = v17[0] in
    v29.p1 = v28 in
    v29.p1 = v28 in
    v29.p1 = v28 in
    v29.p3 = v37 in
    var v58: [Float] = v46 in
    let v66: Float = v46[0] in
    v29.p0 = v19 in
    v65[0] = v58 in
    v66
  } in
  fun loop(i: Int, v0: [[s0]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s0]] = [[s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]], [[5.0]], [[6.0]])]] in
    let v1: Float = 7.0 in
    let initialResult: Float = 7.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()