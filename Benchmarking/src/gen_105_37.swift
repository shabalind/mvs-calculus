  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  }
  struct s2 {
    var p0: s1
    var p1: [[s1]]
  }
  struct s3 {
    var p0: [[s0]]
    var p1: [s0]
  }
  struct s4 {
    var p0: s2
    var p1: [s3]
  }
  struct s5 {
    var p0: [[s2]]
    var p1: s1
  }
  struct s6 {
    var p0: s4
    var p1: [Double]
  }
  func f3(_ v0: s1, _ v1: Double, _ v2: s4) -> Double {
    let v7: s0 = v0.p1
    let v26: [[Double]] = v7.p0
    let v28: [Double] = v26[0]
    let v58: Double = v28[0]
    let v96: Double = v58 / v58
    return v96
  }
  func f2(_ v0: s1) -> s1 {
    var v3: s1 = v0
    return v3
  }
  @inline(never)
  func f0(_ v0: [[s2]], _ v1: s6, _ v2: [s5], _ v3: [s3], _ v4: [s0], _ v5: s0, _ v6: [s6], _ v7: Double) -> Double {
    let v21: s4 = v1.p0
    let v60: s2 = v21.p0
    let v37: s1 = v60.p0
    let v103: s1 = f2(v37)
    let v33: Double = f3(v37, v7, v21)
    let v41: Double = f3(v103, v7, v21)
    let v74: Double = v33 + v33
    let v112: Double = v74 + v41
    return v112
  }
  func benchmark() {
    let v0: [[s2]] = [[s2(p0: s1(p0: [[s0(p0: [[0.0]], p1: [[1.0], [2.0], [3.0]])]], p1: s0(p0: [[4.0]], p1: [[5.0], [6.0], [7.0]])), p1: [[s1(p0: [[s0(p0: [[8.0]], p1: [[9.0], [10.0], [11.0]])]], p1: s0(p0: [[12.0]], p1: [[13.0], [14.0], [15.0]]))]])], [s2(p0: s1(p0: [[s0(p0: [[16.0]], p1: [[17.0], [18.0], [19.0]])]], p1: s0(p0: [[20.0]], p1: [[21.0], [22.0], [23.0]])), p1: [[s1(p0: [[s0(p0: [[24.0]], p1: [[25.0], [26.0], [27.0]])]], p1: s0(p0: [[28.0]], p1: [[29.0], [30.0], [31.0]]))]])], [s2(p0: s1(p0: [[s0(p0: [[32.0]], p1: [[33.0], [34.0], [35.0]])]], p1: s0(p0: [[36.0]], p1: [[37.0], [38.0], [39.0]])), p1: [[s1(p0: [[s0(p0: [[40.0]], p1: [[41.0], [42.0], [43.0]])]], p1: s0(p0: [[44.0]], p1: [[45.0], [46.0], [47.0]]))]])]]
    let v1: s6 = s6(p0: s4(p0: s2(p0: s1(p0: [[s0(p0: [[48.0]], p1: [[49.0], [50.0], [51.0]])]], p1: s0(p0: [[52.0]], p1: [[53.0], [54.0], [55.0]])), p1: [[s1(p0: [[s0(p0: [[56.0]], p1: [[57.0], [58.0], [59.0]])]], p1: s0(p0: [[60.0]], p1: [[61.0], [62.0], [63.0]]))]]), p1: [s3(p0: [[s0(p0: [[64.0]], p1: [[65.0], [66.0], [67.0]])]], p1: [s0(p0: [[68.0]], p1: [[69.0], [70.0], [71.0]])]), s3(p0: [[s0(p0: [[72.0]], p1: [[73.0], [74.0], [75.0]])]], p1: [s0(p0: [[76.0]], p1: [[77.0], [78.0], [79.0]])])]), p1: [80.0])
    let v2: [s5] = [s5(p0: [[s2(p0: s1(p0: [[s0(p0: [[81.0]], p1: [[82.0], [83.0], [84.0]])]], p1: s0(p0: [[85.0]], p1: [[86.0], [87.0], [88.0]])), p1: [[s1(p0: [[s0(p0: [[89.0]], p1: [[90.0], [91.0], [92.0]])]], p1: s0(p0: [[93.0]], p1: [[94.0], [95.0], [96.0]]))]])]], p1: s1(p0: [[s0(p0: [[97.0]], p1: [[98.0], [99.0], [100.0]])]], p1: s0(p0: [[101.0]], p1: [[102.0], [103.0], [104.0]])))]
    let v3: [s3] = [s3(p0: [[s0(p0: [[105.0]], p1: [[106.0], [107.0], [108.0]])]], p1: [s0(p0: [[109.0]], p1: [[110.0], [111.0], [112.0]])]), s3(p0: [[s0(p0: [[113.0]], p1: [[114.0], [115.0], [116.0]])]], p1: [s0(p0: [[117.0]], p1: [[118.0], [119.0], [120.0]])])]
    let v4: [s0] = [s0(p0: [[121.0]], p1: [[122.0], [123.0], [124.0]])]
    let v5: s0 = s0(p0: [[125.0]], p1: [[126.0], [127.0], [128.0]])
    let v6: [s6] = [s6(p0: s4(p0: s2(p0: s1(p0: [[s0(p0: [[129.0]], p1: [[130.0], [131.0], [132.0]])]], p1: s0(p0: [[133.0]], p1: [[134.0], [135.0], [136.0]])), p1: [[s1(p0: [[s0(p0: [[137.0]], p1: [[138.0], [139.0], [140.0]])]], p1: s0(p0: [[141.0]], p1: [[142.0], [143.0], [144.0]]))]]), p1: [s3(p0: [[s0(p0: [[145.0]], p1: [[146.0], [147.0], [148.0]])]], p1: [s0(p0: [[149.0]], p1: [[150.0], [151.0], [152.0]])]), s3(p0: [[s0(p0: [[153.0]], p1: [[154.0], [155.0], [156.0]])]], p1: [s0(p0: [[157.0]], p1: [[158.0], [159.0], [160.0]])])]), p1: [161.0]), s6(p0: s4(p0: s2(p0: s1(p0: [[s0(p0: [[162.0]], p1: [[163.0], [164.0], [165.0]])]], p1: s0(p0: [[166.0]], p1: [[167.0], [168.0], [169.0]])), p1: [[s1(p0: [[s0(p0: [[170.0]], p1: [[171.0], [172.0], [173.0]])]], p1: s0(p0: [[174.0]], p1: [[175.0], [176.0], [177.0]]))]]), p1: [s3(p0: [[s0(p0: [[178.0]], p1: [[179.0], [180.0], [181.0]])]], p1: [s0(p0: [[182.0]], p1: [[183.0], [184.0], [185.0]])]), s3(p0: [[s0(p0: [[186.0]], p1: [[187.0], [188.0], [189.0]])]], p1: [s0(p0: [[190.0]], p1: [[191.0], [192.0], [193.0]])])]), p1: [194.0])]
    let v7: Double = 195.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 195.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4, v5, v6, v7)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
