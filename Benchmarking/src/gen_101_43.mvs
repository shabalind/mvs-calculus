  struct s0 {
    var p0: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  let f101: (s1) -> s1 = (v0: s1) -> s1 {
    var v7: s1 = v0 in
    let v3: [s0] = v7.p0 in
    var v6: s1 = v0 in
    let v12: [s0] = v0.p1 in
    v6.p1 = v12 in
    v7 = v6 in
    let v33: [s0] = v0.p0 in
    let v63: s1 = s1(v33, v3) in
    v63
  } in
  let f39: (s0, Float) -> s0 = (v0: s0, v1: Float) -> s0 {
    let v4: [[Float]] = v0.p0 in
    let v25: s0 = s0(v4) in
    v25
  } in
  let noinline_f0: ([s1], Float) -> Float = (v0: [s1], v1: Float) -> Float {
    var v7: [s1] = v0 in
    let v5: s1 = v7[2] in
    let v3: s1 = f101(v5) in
    let v18: s1 = v0[0] in
    v7[0] = v3 in
    let v11: [s0] = v3.p1 in
    var v14: Float = v1 in
    let v21: Float = v14 * v1 in
    let v19: s0 = v11[0] in
    let v27: s0 = f39(v19, v14) in
    let v24: s0 = f39(v27, v21) in
    let v13: [[Float]] = v19.p0 in
    let v37: [Float] = v13[0] in
    let v53: Float = v37[0] in
    v7[2] = v3 in
    v7[2] = v18 in
    var v67: Float = v53 in
    let v109: [[Float]] = v24.p0 in
    let v183: [Float] = v109[0] in
    var v131: [Float] = v183 in
    let v123: Float = v131[0] in
    v131[0] = v67 in
    v123
  } in
  fun loop(i: Int, v0: [s1], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1([s0([[0.0]]), s0([[1.0]])], [s0([[2.0]]), s0([[3.0]])]), s1([s0([[4.0]]), s0([[5.0]])], [s0([[6.0]]), s0([[7.0]])]), s1([s0([[8.0]]), s0([[9.0]])], [s0([[10.0]]), s0([[11.0]])])] in
    let v1: Float = 12.0 in
    let initialResult: Float = 12.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()