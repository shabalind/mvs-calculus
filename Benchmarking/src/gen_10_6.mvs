  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: s1
    var p1: s1
  } in
  struct s8 {
    var p0: s0
  } in
  struct s9 {
    var p0: [s1]
    var p1: s2
  } in
  let f56: (s1) -> s1 = (v0: s1) -> s1 {
    let v5: [s1] = [v0] in
    let v6: s1 = v5[0] in
    let v7: s1 = v5[0] in
    var v8: [s1] = v5 in
    var v4: s1 = v7 in
    v8 = v5 in
    let v3: s1 = v5[0] in
    v8[0] = v7 in
    var v12: s1 = v7 in
    let v11: s0 = v3.p0 in
    let v15: [[Float]] = v11.p1 in
    v12 = v6 in
    var v18: [[Float]] = v15 in
    var v33: [s1] = v8 in
    var v51: [s1] = v33 in
    let v27: s1 = v51[0] in
    v51[0] = v4 in
    var v22: [[Float]] = v18 in
    let v26: s0 = v6.p0 in
    v12.p0 = v11 in
    var v28: s0 = v11 in
    let v43: [[Float]] = v28.p0 in
    let v39: s0 = v12.p0 in
    let v57: s8 = s8(v11) in
    v4.p0 = v39 in
    v12.p0 = v28 in
    v28.p1 = v22 in
    v51[0] = v3 in
    v12.p0 = v39 in
    let v52: s0 = v57.p0 in
    v12.p0 = v11 in
    v28.p0 = v43 in
    v12.p0 = v52 in
    v12.p0 = v26 in
    v27
  } in
  let f41: (s9) -> s9 = (v0: s9) -> s9 {
    let v1: [s1] = v0.p0 in
    let v7: [s1] = v0.p0 in
    var v6: s9 = v0 in
    let v2: s1 = v1[1] in
    var v4: s1 = v2 in
    var v5: s1 = v4 in
    var v9: s9 = v0 in
    let v11: s1 = f56(v5) in
    let v8: [s0] = v2.p1 in
    v9.p0 = v7 in
    v6.p0 = v7 in
    var v23: [s1] = v7 in
    var v10: [s0] = v8 in
    v23 = v7 in
    let v20: s1 = f56(v4) in
    let v21: s2 = s2(v20, v5) in
    var v17: s2 = v21 in
    let v16: s2 = v6.p1 in
    v9.p0 = v1 in
    let v19: s1 = v23[1] in
    v17.p1 = v2 in
    v23[2] = v11 in
    let v22: s2 = v9.p1 in
    let v18: s0 = v19.p0 in
    var v36: s0 = v18 in
    v10[1] = v36 in
    v9.p1 = v16 in
    let v13: [s1] = v6.p0 in
    let v28: s0 = v8[1] in
    v6.p1 = v16 in
    var v24: [s0] = v10 in
    var v31: s0 = v28 in
    v9.p1 = v17 in
    var v33: s0 = v31 in
    let v37: s8 = s8(v36) in
    let v84: [[Float]] = v33.p1 in
    let v64: s0 = v37.p0 in
    v33.p1 = v84 in
    v10[0] = v36 in
    v10[1] = v64 in
    v36.p1 = v84 in
    v10[1] = v31 in
    let v41: s1 = s1(v64, v10) in
    v23[1] = v19 in
    let v88: s0 = v8[0] in
    let v54: s9 = s9(v13, v21) in
    v23[0] = v41 in
    v10[1] = v33 in
    let v59: s0 = v37.p0 in
    let v48: s0 = v37.p0 in
    v10[1] = v48 in
    let v47: [[Float]] = v59.p0 in
    v36.p0 = v47 in
    let v71: [s1] = v54.p0 in
    v23[0] = v20 in
    let v45: s9 = s9(v71, v22) in
    v23 = v71 in
    v4.p0 = v88 in
    v24[2] = v48 in
    v9.p0 = v7 in
    v31.p1 = v84 in
    v4.p1 = v24 in
    v10[1] = v59 in
    v9.p0 = v1 in
    v45
  } in
  let noinline_f0: (s9, Float) -> Float = (v0: s9, v1: Float) -> Float {
    let v5: s9 = f41(v0) in
    let v6: s2 = v5.p1 in
    let v11: s1 = v6.p1 in
    let v4: s1 = f56(v11) in
    let v28: s0 = v4.p0 in
    var v73: s0 = v28 in
    var v30: s0 = v73 in
    let v23: [[Float]] = v30.p1 in
    let v39: [Float] = v23[0] in
    let v51: Float = v39[0] in
    v51
  } in
  fun loop(i: Int, v0: s9, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s9 = s9([s1(s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]), [s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]]), s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]]), s0([[15.0], [16.0], [17.0]], [[18.0], [19.0]])]), s1(s0([[20.0], [21.0], [22.0]], [[23.0], [24.0]]), [s0([[25.0], [26.0], [27.0]], [[28.0], [29.0]]), s0([[30.0], [31.0], [32.0]], [[33.0], [34.0]]), s0([[35.0], [36.0], [37.0]], [[38.0], [39.0]])]), s1(s0([[40.0], [41.0], [42.0]], [[43.0], [44.0]]), [s0([[45.0], [46.0], [47.0]], [[48.0], [49.0]]), s0([[50.0], [51.0], [52.0]], [[53.0], [54.0]]), s0([[55.0], [56.0], [57.0]], [[58.0], [59.0]])])], s2(s1(s0([[60.0], [61.0], [62.0]], [[63.0], [64.0]]), [s0([[65.0], [66.0], [67.0]], [[68.0], [69.0]]), s0([[70.0], [71.0], [72.0]], [[73.0], [74.0]]), s0([[75.0], [76.0], [77.0]], [[78.0], [79.0]])]), s1(s0([[80.0], [81.0], [82.0]], [[83.0], [84.0]]), [s0([[85.0], [86.0], [87.0]], [[88.0], [89.0]]), s0([[90.0], [91.0], [92.0]], [[93.0], [94.0]]), s0([[95.0], [96.0], [97.0]], [[98.0], [99.0]])]))) in
    let v1: Float = 100.0 in
    let initialResult: Float = 100.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()