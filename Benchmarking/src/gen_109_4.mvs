  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let f13: (s0) -> s0 = (v0: s0) -> s0 {
    let v6: [[Float]] = v0.p0 in
    let v3: [[Float]] = v0.p0 in
    let v5: [Float] = v3[0] in
    let v9: [[Float]] = v0.p0 in
    let v7: [[Float]] = v0.p1 in
    var v8: s0 = v0 in
    let v4: Float = v5[0] in
    var v1: s0 = v8 in
    let v2: [Float] = v3[1] in
    let v11: [Float] = v3[1] in
    var v12: [Float] = v2 in
    v12[0] = v4 in
    v12[0] = v4 in
    let v14: Float = v5[0] in
    v8 = v1 in
    v12 = v2 in
    var v19: [[Float]] = v6 in
    let v30: [[Float]] = v0.p1 in
    var v20: s0 = v8 in
    v20.p1 = v19 in
    v8.p1 = v30 in
    v19[1] = v11 in
    var v28: [[Float]] = v3 in
    v1.p0 = v19 in
    var v50: [Float] = v12 in
    v1 = v8 in
    let v29: [[Float]] = v20.p1 in
    var v23: s0 = v8 in
    v19 = v29 in
    v23.p1 = v7 in
    v8.p0 = v19 in
    let v48: [Float] = v19[1] in
    var v36: [Float] = v50 in
    let v38: [[Float]] = v20.p1 in
    var v21: [[Float]] = v7 in
    var v26: s0 = v0 in
    v1.p0 = v30 in
    let v58: [[Float]] = v23.p0 in
    v12[0] = v14 in
    v20.p0 = v21 in
    let v35: Float = v36[0] in
    let v66: [[Float]] = v26.p0 in
    v23.p1 = v19 in
    var v45: Float = v35 in
    var v59: Float = v45 in
    v26.p0 = v28 in
    v12[0] = v59 in
    var v54: [Float] = v48 in
    v20.p0 = v66 in
    var v56: s0 = v23 in
    v26.p1 = v9 in
    v28[1] = v12 in
    v19[1] = v54 in
    v20.p1 = v58 in
    v23.p0 = v19 in
    v1.p0 = v38 in
    v20.p0 = v38 in
    v26.p1 = v9 in
    v56
  } in
  let noinline_f0: (s0, [[Float]], Float) -> Float = (v0: s0, v1: [[Float]], v2: Float) -> Float {
    var v5: s0 = v0 in
    let v6: [[Float]] = v0.p0 in
    let v29: s0 = f13(v5) in
    let v25: [[Float]] = v29.p1 in
    var v15: s0 = v29 in
    let v24: [[Float]] = v15.p1 in
    let v21: Float = v2 * v2 in
    v15.p1 = v6 in
    let v76: [Float] = v24[0] in
    v15.p0 = v25 in
    let v41: Float = v76[0] in
    v15.p0 = v6 in
    let v38: Float = v21 - v41 in
    v38
  } in
  fun loop(i: Int, v0: s0, v1: [[Float]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0]], [[2.0], [3.0]]) in
    let v1: [[Float]] = [[4.0]] in
    let v2: Float = 5.0 in
    let initialResult: Float = 5.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()