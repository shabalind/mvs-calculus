  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
  } in
  struct s2 {
    var p0: [s1]
    var p1: [s1]
  } in
  struct s3 {
    var p0: [[s2]]
    var p1: s0
  } in
  struct s4 {
    var p0: s3
    var p1: [[s3]]
  } in
  struct s5 {
    var p0: s0
    var p1: [Float]
  } in
  struct s9 {
    var p0: [s4]
    var p1: s0
  } in
  let f9: (Float, s3) -> Float = (v0: Float, v1: s3) -> Float {
    var v6: s3 = v1 in
    let v4: [[s2]] = v6.p0 in
    let v2: [s2] = v4[0] in
    var v12: [[s2]] = v4 in
    v12[0] = v2 in
    let v15: s0 = v6.p1 in
    v6.p0 = v12 in
    let v26: [[Float]] = v15.p0 in
    var v63: [[Float]] = v26 in
    let v118: [Float] = v63[0] in
    v6 = v1 in
    var v112: [Float] = v118 in
    let v254: Float = v112[0] in
    var v171: Float = v254 in
    v171
  } in
  let noinline_f0: (s5, [[s3]], [s9], Float) -> Float = (v0: s5, v1: [[s3]], v2: [s9], v3: Float) -> Float {
    let v4: [s3] = v1[1] in
    var v6: Float = v3 in
    var v12: [s3] = v4 in
    let v10: s3 = v12[0] in
    let v13: Float = f9(v6, v10) in
    v12[0] = v10 in
    v12[0] = v10 in
    v12[0] = v10 in
    let v21: [s3] = v1[0] in
    v12[0] = v10 in
    let v83: s3 = v21[0] in
    v12[0] = v10 in
    v12[0] = v83 in
    let v35: s3 = v12[0] in
    let v73: Float = f9(v13, v35) in
    v73
  } in
  fun loop(i: Int, v0: s5, v1: [[s3]], v2: [s9], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s5 = s5(s0([[0.0]], [[1.0]]), [2.0, 3.0]) in
    let v1: [[s3]] = [[s3([[s2([s1(s0([[4.0]], [[5.0]])), s1(s0([[6.0]], [[7.0]]))], [s1(s0([[8.0]], [[9.0]])), s1(s0([[10.0]], [[11.0]])), s1(s0([[12.0]], [[13.0]]))])]], s0([[14.0]], [[15.0]]))], [s3([[s2([s1(s0([[16.0]], [[17.0]])), s1(s0([[18.0]], [[19.0]]))], [s1(s0([[20.0]], [[21.0]])), s1(s0([[22.0]], [[23.0]])), s1(s0([[24.0]], [[25.0]]))])]], s0([[26.0]], [[27.0]]))], [s3([[s2([s1(s0([[28.0]], [[29.0]])), s1(s0([[30.0]], [[31.0]]))], [s1(s0([[32.0]], [[33.0]])), s1(s0([[34.0]], [[35.0]])), s1(s0([[36.0]], [[37.0]]))])]], s0([[38.0]], [[39.0]]))]] in
    let v2: [s9] = [s9([s4(s3([[s2([s1(s0([[40.0]], [[41.0]])), s1(s0([[42.0]], [[43.0]]))], [s1(s0([[44.0]], [[45.0]])), s1(s0([[46.0]], [[47.0]])), s1(s0([[48.0]], [[49.0]]))])]], s0([[50.0]], [[51.0]])), [[s3([[s2([s1(s0([[52.0]], [[53.0]])), s1(s0([[54.0]], [[55.0]]))], [s1(s0([[56.0]], [[57.0]])), s1(s0([[58.0]], [[59.0]])), s1(s0([[60.0]], [[61.0]]))])]], s0([[62.0]], [[63.0]]))], [s3([[s2([s1(s0([[64.0]], [[65.0]])), s1(s0([[66.0]], [[67.0]]))], [s1(s0([[68.0]], [[69.0]])), s1(s0([[70.0]], [[71.0]])), s1(s0([[72.0]], [[73.0]]))])]], s0([[74.0]], [[75.0]]))], [s3([[s2([s1(s0([[76.0]], [[77.0]])), s1(s0([[78.0]], [[79.0]]))], [s1(s0([[80.0]], [[81.0]])), s1(s0([[82.0]], [[83.0]])), s1(s0([[84.0]], [[85.0]]))])]], s0([[86.0]], [[87.0]]))]])], s0([[88.0]], [[89.0]])), s9([s4(s3([[s2([s1(s0([[90.0]], [[91.0]])), s1(s0([[92.0]], [[93.0]]))], [s1(s0([[94.0]], [[95.0]])), s1(s0([[96.0]], [[97.0]])), s1(s0([[98.0]], [[99.0]]))])]], s0([[100.0]], [[101.0]])), [[s3([[s2([s1(s0([[102.0]], [[103.0]])), s1(s0([[104.0]], [[105.0]]))], [s1(s0([[106.0]], [[107.0]])), s1(s0([[108.0]], [[109.0]])), s1(s0([[110.0]], [[111.0]]))])]], s0([[112.0]], [[113.0]]))], [s3([[s2([s1(s0([[114.0]], [[115.0]])), s1(s0([[116.0]], [[117.0]]))], [s1(s0([[118.0]], [[119.0]])), s1(s0([[120.0]], [[121.0]])), s1(s0([[122.0]], [[123.0]]))])]], s0([[124.0]], [[125.0]]))], [s3([[s2([s1(s0([[126.0]], [[127.0]])), s1(s0([[128.0]], [[129.0]]))], [s1(s0([[130.0]], [[131.0]])), s1(s0([[132.0]], [[133.0]])), s1(s0([[134.0]], [[135.0]]))])]], s0([[136.0]], [[137.0]]))]])], s0([[138.0]], [[139.0]])), s9([s4(s3([[s2([s1(s0([[140.0]], [[141.0]])), s1(s0([[142.0]], [[143.0]]))], [s1(s0([[144.0]], [[145.0]])), s1(s0([[146.0]], [[147.0]])), s1(s0([[148.0]], [[149.0]]))])]], s0([[150.0]], [[151.0]])), [[s3([[s2([s1(s0([[152.0]], [[153.0]])), s1(s0([[154.0]], [[155.0]]))], [s1(s0([[156.0]], [[157.0]])), s1(s0([[158.0]], [[159.0]])), s1(s0([[160.0]], [[161.0]]))])]], s0([[162.0]], [[163.0]]))], [s3([[s2([s1(s0([[164.0]], [[165.0]])), s1(s0([[166.0]], [[167.0]]))], [s1(s0([[168.0]], [[169.0]])), s1(s0([[170.0]], [[171.0]])), s1(s0([[172.0]], [[173.0]]))])]], s0([[174.0]], [[175.0]]))], [s3([[s2([s1(s0([[176.0]], [[177.0]])), s1(s0([[178.0]], [[179.0]]))], [s1(s0([[180.0]], [[181.0]])), s1(s0([[182.0]], [[183.0]])), s1(s0([[184.0]], [[185.0]]))])]], s0([[186.0]], [[187.0]]))]])], s0([[188.0]], [[189.0]]))] in
    let v3: Float = 190.0 in
    let initialResult: Float = 190.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()