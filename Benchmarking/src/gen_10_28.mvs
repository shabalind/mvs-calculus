  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  let noinline_f0: ([s1], [[s0]], [[s0]], Float) -> Float = (v0: [s1], v1: [[s0]], v2: [[s0]], v3: Float) -> Float {
    let v6: [s0] = v2[1] in
    let v11: s0 = v6[0] in
    let v18: [[Float]] = v11.p0 in
    let v13: [Float] = v18[1] in
    let v14: [Float] = v18[0] in
    var v12: [[Float]] = v18 in
    v12[2] = v14 in
    let v21: s0 = s0(v12, v12) in
    let v16: [[Float]] = v21.p0 in
    v12[0] = v13 in
    let v44: [Float] = v16[1] in
    let v61: Float = v44[0] in
    v61
  } in
  fun loop(i: Int, v0: [s1], v1: [[s0]], v2: [[s0]], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1(s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]]), s0([[6.0], [7.0], [8.0]], [[9.0], [10.0], [11.0]])), s1(s0([[12.0], [13.0], [14.0]], [[15.0], [16.0], [17.0]]), s0([[18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0]]))] in
    let v1: [[s0]] = [[s0([[24.0], [25.0], [26.0]], [[27.0], [28.0], [29.0]])], [s0([[30.0], [31.0], [32.0]], [[33.0], [34.0], [35.0]])]] in
    let v2: [[s0]] = [[s0([[36.0], [37.0], [38.0]], [[39.0], [40.0], [41.0]])], [s0([[42.0], [43.0], [44.0]], [[45.0], [46.0], [47.0]])], [s0([[48.0], [49.0], [50.0]], [[51.0], [52.0], [53.0]])]] in
    let v3: Float = 54.0 in
    let initialResult: Float = 54.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()