  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: [[s0]]
    var p1: s0
  } in
  struct s3 {
    var p0: s2
    var p1: s0
  } in
  struct s4 {
    var p0: s0
  } in
  struct s5 {
    var p0: s0
    var p1: s2
  } in
  struct s6 {
    var p0: s4
    var p1: [s3]
  } in
  struct s7 {
    var p0: s6
    var p1: s6
  } in
  struct s9 {
    var p0: [s7]
    var p1: [[s5]]
  } in
  struct s10 {
    var p0: s5
    var p1: [s1]
  } in
  struct s12 {
    var p0: Float
    var p1: [[s10]]
  } in
  let noinline_f0: ([[s9]], s12, s12, Float) -> Float = (v0: [[s9]], v1: s12, v2: s12, v3: Float) -> Float {
    let v5: Float = v2.p0 in
    let v7: Float = v2.p0 in
    let v24: [[s10]] = v1.p1 in
    let v14: [[s10]] = v2.p1 in
    let v9: s12 = s12(v7, v14) in
    let v12: [Float] = [v5, v3, v5] in
    let v20: Float = v9.p0 in
    var v25: s12 = v2 in
    v25.p1 = v14 in
    let v37: s12 = s12(v7, v24) in
    var v86: s12 = v37 in
    v25.p0 = v5 in
    let v53: Float = v12[0] in
    v25.p0 = v53 in
    v25.p1 = v24 in
    v25.p0 = v20 in
    let v79: [[s10]] = v86.p1 in
    let v186: Float = v25.p0 in
    v25.p1 = v79 in
    v186
  } in
  fun loop(i: Int, v0: [[s9]], v1: s12, v2: s12, v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s9]] = [[s9([s7(s6(s4(s0([[0.0], [1.0]], [[2.0], [3.0]])), [s3(s2([[s0([[4.0], [5.0]], [[6.0], [7.0]])]], s0([[8.0], [9.0]], [[10.0], [11.0]])), s0([[12.0], [13.0]], [[14.0], [15.0]]))]), s6(s4(s0([[16.0], [17.0]], [[18.0], [19.0]])), [s3(s2([[s0([[20.0], [21.0]], [[22.0], [23.0]])]], s0([[24.0], [25.0]], [[26.0], [27.0]])), s0([[28.0], [29.0]], [[30.0], [31.0]]))])), s7(s6(s4(s0([[32.0], [33.0]], [[34.0], [35.0]])), [s3(s2([[s0([[36.0], [37.0]], [[38.0], [39.0]])]], s0([[40.0], [41.0]], [[42.0], [43.0]])), s0([[44.0], [45.0]], [[46.0], [47.0]]))]), s6(s4(s0([[48.0], [49.0]], [[50.0], [51.0]])), [s3(s2([[s0([[52.0], [53.0]], [[54.0], [55.0]])]], s0([[56.0], [57.0]], [[58.0], [59.0]])), s0([[60.0], [61.0]], [[62.0], [63.0]]))]))], [[s5(s0([[64.0], [65.0]], [[66.0], [67.0]]), s2([[s0([[68.0], [69.0]], [[70.0], [71.0]])]], s0([[72.0], [73.0]], [[74.0], [75.0]])))], [s5(s0([[76.0], [77.0]], [[78.0], [79.0]]), s2([[s0([[80.0], [81.0]], [[82.0], [83.0]])]], s0([[84.0], [85.0]], [[86.0], [87.0]])))], [s5(s0([[88.0], [89.0]], [[90.0], [91.0]]), s2([[s0([[92.0], [93.0]], [[94.0], [95.0]])]], s0([[96.0], [97.0]], [[98.0], [99.0]])))]])]] in
    let v1: s12 = s12(100.0, [[s10(s5(s0([[101.0], [102.0]], [[103.0], [104.0]]), s2([[s0([[105.0], [106.0]], [[107.0], [108.0]])]], s0([[109.0], [110.0]], [[111.0], [112.0]]))), [s1(s0([[113.0], [114.0]], [[115.0], [116.0]]), [s0([[117.0], [118.0]], [[119.0], [120.0]]), s0([[121.0], [122.0]], [[123.0], [124.0]]), s0([[125.0], [126.0]], [[127.0], [128.0]])])])]]) in
    let v2: s12 = s12(129.0, [[s10(s5(s0([[130.0], [131.0]], [[132.0], [133.0]]), s2([[s0([[134.0], [135.0]], [[136.0], [137.0]])]], s0([[138.0], [139.0]], [[140.0], [141.0]]))), [s1(s0([[142.0], [143.0]], [[144.0], [145.0]]), [s0([[146.0], [147.0]], [[148.0], [149.0]]), s0([[150.0], [151.0]], [[152.0], [153.0]]), s0([[154.0], [155.0]], [[156.0], [157.0]])])])]]) in
    let v3: Float = 158.0 in
    let initialResult: Float = 158.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()