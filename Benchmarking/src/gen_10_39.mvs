  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s1]
    var p1: s0
  } in
  struct s3 {
    var p0: s2
    var p1: [s0]
  } in
  let f14: (s0, s0) -> s0 = (v0: s0, v1: s0) -> s0 {
    var v4: s0 = v0 in
    let v7: s1 = s1(v1, v4) in
    let v8: [[Float]] = v0.p0 in
    let v5: [[[Float]]] = [v8, v8, v8, v8, v8, v8] in
    let v12: s0 = v7.p1 in
    var v16: [[[Float]]] = v5 in
    let v10: [[Float]] = v16[1] in
    v16[1] = v8 in
    let v17: [[Float]] = v5[2] in
    v4.p0 = v10 in
    let v34: [Float] = v17[1] in
    let v24: [[Float]] = [v34] in
    var v21: [[Float]] = v24 in
    let v87: [[Float]] = v16[5] in
    var v35: [[Float]] = v24 in
    let v60: s0 = s0(v87, v35) in
    let v69: [[Float]] = v12.p1 in
    var v47: s0 = v60 in
    v47.p1 = v69 in
    v4.p1 = v21 in
    v47
  } in
  let noinline_f0: (s3, Float) -> Float = (v0: s3, v1: Float) -> Float {
    let v7: [s0] = v0.p1 in
    let v5: s0 = v7[0] in
    let v3: s0 = f14(v5, v5) in
    let v8: [[Float]] = v3.p0 in
    let v10: [Float] = v8[1] in
    let v141: Float = v10[0] in
    v141
  } in
  fun loop(i: Int, v0: s3, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(s2([s1(s0([[0.0], [1.0]], [[2.0]]), s0([[3.0], [4.0]], [[5.0]])), s1(s0([[6.0], [7.0]], [[8.0]]), s0([[9.0], [10.0]], [[11.0]])), s1(s0([[12.0], [13.0]], [[14.0]]), s0([[15.0], [16.0]], [[17.0]]))], s0([[18.0], [19.0]], [[20.0]])), [s0([[21.0], [22.0]], [[23.0]])]) in
    let v1: Float = 24.0 in
    let initialResult: Float = 24.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()