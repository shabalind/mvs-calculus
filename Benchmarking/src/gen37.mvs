  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: s0
    var p1: s1
  } in
  struct s6 {
    var p0: s2
    var p1: s0
  } in
  let noinline_f0: (s6, Float) -> Float = (v0: s6, v1: Float) -> Float {
    let v4: s0 = v0.p1 in
    var v6: s0 = v4 in
    let v13: [[Float]] = v4.p0 in
    let v7: [Float] = v13[1] in
    v6.p0 = v13 in
    let v9: [[Float]] = v6.p0 in
    var v18: [[Float]] = v9 in
    let v11: [[Float]] = v6.p0 in
    var v14: [[Float]] = v9 in
    v6.p0 = v11 in
    var v23: [[Float]] = v18 in
    let v41: Float = v7[0] in
    let v31: [Float] = v13[0] in
    var v22: [Float] = v7 in
    v6.p0 = v14 in
    let v21: [[Float]] = v4.p0 in
    v23[2] = v31 in
    v22[0] = v41 in
    v22 = v7 in
    let v33: [Float] = v18[2] in
    v18[0] = v31 in
    v23[2] = v22 in
    v6.p0 = v13 in
    v6.p0 = v21 in
    v18[2] = v22 in
    let v26: [Float] = v23[1] in
    v18[2] = v26 in
    let v61: Float = v33[0] in
    v23[0] = v33 in
    v61
  } in
  fun loop(i: Int, v0: s6, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s6 = s6(s2(s0([[0.0], [1.0], [2.0]], [[3.0]]), s1([s0([[4.0], [5.0], [6.0]], [[7.0]])], [[s0([[8.0], [9.0], [10.0]], [[11.0]])], [s0([[12.0], [13.0], [14.0]], [[15.0]])]])), s0([[16.0], [17.0], [18.0]], [[19.0]])) in
    let v1: Float = 20.0 in
    let initialResult: Float = 20.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()