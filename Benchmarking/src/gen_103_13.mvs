  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  let f26: (Float) -> Float = (v0: Float) -> Float {
    var v3: Float = v0 in
    var v1: Float = v0 in
    let v9: [Float] = [v0, v1, v3, v1, v0, v1, v1] in
    let v7: Float = v9[2] in
    let v4: Float = v9[6] in
    var v6: [Float] = v9 in
    v6[0] = v1 in
    v3 = v4 in
    let v15: Float = v6[5] in
    v1 = v15 in
    var v2: [Float] = v6 in
    v6[3] = v7 in
    let v11: Float = v6[4] in
    v2[1] = v0 in
    let v17: Float = v9[5] in
    v6[2] = v4 in
    v6 = v9 in
    var v34: [Float] = v2 in
    var v61: Float = v11 in
    var v21: [Float] = v34 in
    let v27: Float = v9[6] in
    v21[3] = v27 in
    v34 = v2 in
    let v79: Float = v21[2] in
    var v49: [Float] = v6 in
    v2[6] = v61 in
    v2 = v49 in
    v6[1] = v17 in
    v79
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    let v2: Float = f26(v1) in
    let v6: Float = f26(v2) in
    v6
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1(s0([[0.0], [1.0], [2.0]], [[3.0]]), s0([[4.0], [5.0], [6.0]], [[7.0]])) in
    let v1: Float = 8.0 in
    let initialResult: Float = 8.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()