  struct s0 {
    var p0: Float
    var p1: [[Float]]
  } in
  let f29: (s0) -> s0 = (v0: s0) -> s0 {
    v0
  } in
  let noinline_f0: ([s0], Float) -> Float = (v0: [s0], v1: Float) -> Float {
    let v4: s0 = v0[2] in
    let v7: s0 = f29(v4) in
    let v5: s0 = v0[1] in
    let v12: [[Float]] = v7.p1 in
    let v8: [Float] = v12[2] in
    let v11: Float = v8[0] in
    let v26: Float = v8[0] in
    var v50: s0 = v5 in
    let v36: [[Float]] = v50.p1 in
    let v24: [[Float]] = v7.p1 in
    var v27: [Float] = v8 in
    let v43: s0 = f29(v50) in
    let v25: Float = v27[0] in
    let v37: Float = v43.p0 in
    v27[0] = v11 in
    v50.p1 = v24 in
    let v38: Float = v27[0] in
    v50.p0 = v25 in
    let v112: [[Float]] = v43.p1 in
    v27[0] = v26 in
    v50.p1 = v36 in
    v50.p0 = v38 in
    v50.p1 = v112 in
    v37
  } in
  fun loop(i: Int, v0: [s0], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0(0.0, [[1.0], [2.0], [3.0]]), s0(4.0, [[5.0], [6.0], [7.0]]), s0(8.0, [[9.0], [10.0], [11.0]])] in
    let v1: Float = 12.0 in
    let initialResult: Float = 12.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()