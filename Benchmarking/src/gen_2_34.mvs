  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
    var p2: s0
  } in
  struct s2 {
    var p0: [s1]
    var p1: s0
  } in
  struct s5 {
    var p0: s1
    var p1: [s2]
  } in
  let f10: (Float) -> Float = (v0: Float) -> Float {
    var v7: Float = v0 in
    v7 = v0 in
    var v8: Float = v7 in
    var v4: Float = v0 in
    var v10: Float = v8 in
    var v2: Float = v10 in
    var v6: Float = v4 in
    var v3: Float = v2 in
    var v1: Float = v0 in
    var v13: Float = v1 in
    var v14: Float = v13 in
    v4 = v6 in
    var v34: Float = v2 in
    var v23: Float = v34 in
    var v18: Float = v3 in
    let v17: [Float] = [v18, v23, v8, v4, v8] in
    var v49: [Float] = v17 in
    v49[2] = v6 in
    v49[1] = v14 in
    let v45: Float = v49[2] in
    v45
  } in
  let noinline_f0: (s5, s0, Float) -> Float = (v0: s5, v1: s0, v2: Float) -> Float {
    let v4: Float = f10(v2) in
    let v18: Float = v4 + v2 in
    v18
  } in
  fun loop(i: Int, v0: s5, v1: s0, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s5 = s5(s1(s0([[0.0], [1.0]], [[2.0]]), s0([[3.0], [4.0]], [[5.0]]), s0([[6.0], [7.0]], [[8.0]])), [s2([s1(s0([[9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0]], [[14.0]]), s0([[15.0], [16.0]], [[17.0]])), s1(s0([[18.0], [19.0]], [[20.0]]), s0([[21.0], [22.0]], [[23.0]]), s0([[24.0], [25.0]], [[26.0]]))], s0([[27.0], [28.0]], [[29.0]])), s2([s1(s0([[30.0], [31.0]], [[32.0]]), s0([[33.0], [34.0]], [[35.0]]), s0([[36.0], [37.0]], [[38.0]])), s1(s0([[39.0], [40.0]], [[41.0]]), s0([[42.0], [43.0]], [[44.0]]), s0([[45.0], [46.0]], [[47.0]]))], s0([[48.0], [49.0]], [[50.0]])), s2([s1(s0([[51.0], [52.0]], [[53.0]]), s0([[54.0], [55.0]], [[56.0]]), s0([[57.0], [58.0]], [[59.0]])), s1(s0([[60.0], [61.0]], [[62.0]]), s0([[63.0], [64.0]], [[65.0]]), s0([[66.0], [67.0]], [[68.0]]))], s0([[69.0], [70.0]], [[71.0]]))]) in
    let v1: s0 = s0([[72.0], [73.0]], [[74.0]]) in
    let v2: Float = 75.0 in
    let initialResult: Float = 75.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()