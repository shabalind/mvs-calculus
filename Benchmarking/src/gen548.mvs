  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s4 {
    var p0: s1
    var p1: [s0]
  } in
  struct s5 {
    var p0: [[Float]]
    var p1: s1
  } in
  struct s8 {
    var p0: s5
    var p1: [[s4]]
  } in
  let f101: (Float) -> Float = (v0: Float) -> Float {
    var v3: Float = v0 in
    var v2: Float = v0 in
    var v6: Float = v3 in
    let v4: Float = v3 + v6 in
    var v1: Float = v6 in
    var v9: Float = v3 in
    let v8: [Float] = [v0, v9, v3, v2, v1, v6, v4] in
    let v17: Float = v8[1] in
    var v12: Float = v1 in
    let v34: Float = v8[4] in
    let v20: [Float] = [v17, v17, v12, v34] in
    let v41: [[Float]] = [v20] in
    let v48: [Float] = v41[0] in
    let v39: Float = v48[2] in
    v39
  } in
  let f88: (Float) -> Float = (v0: Float) -> Float {
    let v4: Float = f101(v0) in
    var v3: Float = v4 in
    let v2: [Float] = [v0] in
    let v1: Float = v2[0] in
    var v5: [Float] = v2 in
    var v10: [Float] = v2 in
    v10[0] = v0 in
    let v9: Float = f101(v0) in
    v5[0] = v0 in
    let v15: Float = v5[0] in
    let v13: Float = v10[0] in
    var v21: [Float] = v2 in
    var v19: Float = v3 in
    v21 = v10 in
    v10[0] = v19 in
    let v34: Float = f101(v1) in
    let v38: Float = v34 * v15 in
    let v24: Float = v21[0] in
    v21[0] = v13 in
    v10[0] = v9 in
    v21[0] = v38 in
    v24
  } in
  let noinline_f0: ([s8], Float) -> Float = (v0: [s8], v1: Float) -> Float {
    let v16: Float = v1 / v1 in
    let v68: Float = v16 - v1 in
    let v121: Float = f88(v16) in
    let v105: Float = v68 * v121 in
    v105
  } in
  fun loop(i: Int, v0: [s8], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s8] = [s8(s5([[0.0]], s1([s0([[1.0], [2.0], [3.0]], [[4.0], [5.0]]), s0([[6.0], [7.0], [8.0]], [[9.0], [10.0]])], s0([[11.0], [12.0], [13.0]], [[14.0], [15.0]]))), [[s4(s1([s0([[16.0], [17.0], [18.0]], [[19.0], [20.0]]), s0([[21.0], [22.0], [23.0]], [[24.0], [25.0]])], s0([[26.0], [27.0], [28.0]], [[29.0], [30.0]])), [s0([[31.0], [32.0], [33.0]], [[34.0], [35.0]])])], [s4(s1([s0([[36.0], [37.0], [38.0]], [[39.0], [40.0]]), s0([[41.0], [42.0], [43.0]], [[44.0], [45.0]])], s0([[46.0], [47.0], [48.0]], [[49.0], [50.0]])), [s0([[51.0], [52.0], [53.0]], [[54.0], [55.0]])])], [s4(s1([s0([[56.0], [57.0], [58.0]], [[59.0], [60.0]]), s0([[61.0], [62.0], [63.0]], [[64.0], [65.0]])], s0([[66.0], [67.0], [68.0]], [[69.0], [70.0]])), [s0([[71.0], [72.0], [73.0]], [[74.0], [75.0]])])]]), s8(s5([[76.0]], s1([s0([[77.0], [78.0], [79.0]], [[80.0], [81.0]]), s0([[82.0], [83.0], [84.0]], [[85.0], [86.0]])], s0([[87.0], [88.0], [89.0]], [[90.0], [91.0]]))), [[s4(s1([s0([[92.0], [93.0], [94.0]], [[95.0], [96.0]]), s0([[97.0], [98.0], [99.0]], [[100.0], [101.0]])], s0([[102.0], [103.0], [104.0]], [[105.0], [106.0]])), [s0([[107.0], [108.0], [109.0]], [[110.0], [111.0]])])], [s4(s1([s0([[112.0], [113.0], [114.0]], [[115.0], [116.0]]), s0([[117.0], [118.0], [119.0]], [[120.0], [121.0]])], s0([[122.0], [123.0], [124.0]], [[125.0], [126.0]])), [s0([[127.0], [128.0], [129.0]], [[130.0], [131.0]])])], [s4(s1([s0([[132.0], [133.0], [134.0]], [[135.0], [136.0]]), s0([[137.0], [138.0], [139.0]], [[140.0], [141.0]])], s0([[142.0], [143.0], [144.0]], [[145.0], [146.0]])), [s0([[147.0], [148.0], [149.0]], [[150.0], [151.0]])])]])] in
    let v1: Float = 152.0 in
    let initialResult: Float = 152.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()