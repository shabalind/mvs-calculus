  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  let f13: (Float) -> Float = (v0: Float) -> Float {
    let v6: Float = v0 * v0 in
    var v4: Float = v6 in
    let v3: [Float] = [v6, v0, v0, v0, v4] in
    let v18: Float = v3[1] in
    v18
  } in
  let f9: (s0) -> s0 = (v0: s0) -> s0 {
    let v6: [[Float]] = v0.p0 in
    let v4: [[Float]] = v0.p0 in
    let v10: [[Float]] = v0.p1 in
    let v3: [[Float]] = v0.p1 in
    let v5: [[Float]] = v0.p2 in
    let v2: [[[Float]]] = [v3, v10, v3] in
    let v1: [Float] = v4[1] in
    let v9: [[Float]] = v0.p2 in
    var v14: [[Float]] = v6 in
    let v12: [[Float]] = v0.p1 in
    v14[0] = v1 in
    let v18: s0 = s0(v14, v12, v5) in
    let v15: [[Float]] = v2[0] in
    let v21: [[Float]] = v18.p0 in
    let v16: [[Float]] = v18.p0 in
    let v24: [Float] = v21[2] in
    let v30: [Float] = v16[0] in
    v14[1] = v24 in
    v14[0] = v30 in
    var v50: [Float] = v1 in
    var v17: [[Float]] = v9 in
    var v62: [[Float]] = v16 in
    let v43: [[Float]] = v18.p0 in
    v62[0] = v50 in
    let v20: [[Float]] = v0.p2 in
    var v31: s0 = v0 in
    v17[1] = v1 in
    let v64: [[Float]] = v0.p2 in
    v31.p0 = v62 in
    v17[1] = v1 in
    v14[0] = v24 in
    let v44: [Float] = v20[0] in
    v14[1] = v1 in
    v14[1] = v24 in
    var v60: [[Float]] = v12 in
    v14[1] = v24 in
    v31.p2 = v17 in
    var v135: [[Float]] = v15 in
    v17[1] = v1 in
    v31.p0 = v62 in
    v31.p0 = v4 in
    let v80: [[Float]] = v18.p2 in
    v31.p1 = v135 in
    v31.p0 = v16 in
    var v68: s0 = v31 in
    let v98: [[Float]] = v31.p0 in
    var v86: s0 = v18 in
    let v79: [[Float]] = v86.p0 in
    let v77: [[Float]] = v68.p0 in
    v86.p1 = v10 in
    let v142: [[Float]] = v18.p2 in
    var v69: s0 = v31 in
    v14[2] = v44 in
    v68.p2 = v80 in
    v69.p2 = v17 in
    v68.p2 = v142 in
    v31.p0 = v98 in
    v86.p1 = v60 in
    v86.p0 = v21 in
    v31.p0 = v43 in
    v69.p0 = v77 in
    v69.p2 = v64 in
    v69.p0 = v79 in
    v69
  } in
  let noinline_f0: (s0, Float) -> Float = (v0: s0, v1: Float) -> Float {
    let v7: [[Float]] = v0.p0 in
    let v4: [[Float]] = v0.p1 in
    let v2: [Float] = v7[2] in
    let v11: [Float] = v4[0] in
    let v13: s0 = f9(v0) in
    let v5: [Float] = v7[0] in
    let v15: [[Float]] = v13.p0 in
    var v8: [[Float]] = v15 in
    var v25: s0 = v13 in
    let v18: [Float] = v8[0] in
    v8[2] = v11 in
    var v19: [[Float]] = v4 in
    var v26: s0 = v25 in
    let v12: Float = v18[0] in
    v26.p1 = v4 in
    let v28: Float = f13(v12) in
    v19[0] = v2 in
    let v40: s0 = f9(v13) in
    v25.p0 = v15 in
    let v24: [[Float]] = v25.p1 in
    let v29: Float = f13(v28) in
    v26.p1 = v24 in
    let v45: [Float] = v19[0] in
    var v30: [Float] = v5 in
    var v59: [[Float]] = v19 in
    let v33: [[Float]] = v25.p2 in
    v25.p2 = v33 in
    let v43: s0 = s0(v7, v59, v33) in
    let v16: [[Float]] = v40.p2 in
    v25.p0 = v7 in
    let v38: [[Float]] = v25.p0 in
    v19[0] = v45 in
    let v42: [Float] = v33[0] in
    v59[0] = v30 in
    var v36: [[Float]] = v16 in
    let v46: Float = v45[0] in
    let v60: [Float] = v8[1] in
    let v53: [[Float]] = v43.p2 in
    v25.p2 = v33 in
    v25.p0 = v8 in
    v36 = v53 in
    let v75: Float = f13(v46) in
    var v85: [[Float]] = v33 in
    let v118: Float = v60[0] in
    v59[0] = v11 in
    v26.p2 = v36 in
    v26.p0 = v38 in
    v30[0] = v118 in
    let v69: [[Float]] = v26.p1 in
    v19 = v69 in
    let v145: Float = f13(v29) in
    let v97: Float = v75 * v118 in
    var v127: [[Float]] = v36 in
    var v152: [[Float]] = v127 in
    v25.p2 = v85 in
    v26.p2 = v152 in
    v36[1] = v42 in
    v30[0] = v145 in
    v97
  } in
  fun loop(i: Int, v0: s0, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0], [2.0]], [[3.0]], [[4.0], [5.0]]) in
    let v1: Float = 6.0 in
    let initialResult: Float = 6.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()