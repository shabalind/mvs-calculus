  struct s0 {
    var p0: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s1
    var p1: [[s1]]
  } in
  struct s3 {
    var p0: s1
    var p1: Float
  } in
  struct s4 {
    var p0: s2
    var p1: s0
  } in
  struct s5 {
    var p0: s1
    var p1: [[s2]]
  } in
  struct s6 {
    var p0: s4
    var p1: [s2]
  } in
  struct s8 {
    var p0: s6
    var p1: s5
  } in
  let noinline_f0: (s3, s8, s2, Float) -> Float = (v0: s3, v1: s8, v2: s2, v3: Float) -> Float {
    let v11: [[s1]] = v2.p1 in
    let v14: [s1] = v11[1] in
    let v30: s1 = v14[0] in
    let v13: s0 = v30.p0 in
    let v62: [[Float]] = v13.p0 in
    let v49: [Float] = v62[0] in
    let v126: [Float] = v62[0] in
    let v93: Float = v126[0] in
    var v68: [Float] = v49 in
    v68[0] = v93 in
    let v106: Float = v68[0] in
    v106
  } in
  fun loop(i: Int, v0: s3, v1: s8, v2: s2, v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(s1(s0([[0.0]]), s0([[1.0]])), 2.0) in
    let v1: s8 = s8(s6(s4(s2(s1(s0([[3.0]]), s0([[4.0]])), [[s1(s0([[5.0]]), s0([[6.0]]))], [s1(s0([[7.0]]), s0([[8.0]]))]]), s0([[9.0]])), [s2(s1(s0([[10.0]]), s0([[11.0]])), [[s1(s0([[12.0]]), s0([[13.0]]))], [s1(s0([[14.0]]), s0([[15.0]]))]]), s2(s1(s0([[16.0]]), s0([[17.0]])), [[s1(s0([[18.0]]), s0([[19.0]]))], [s1(s0([[20.0]]), s0([[21.0]]))]]), s2(s1(s0([[22.0]]), s0([[23.0]])), [[s1(s0([[24.0]]), s0([[25.0]]))], [s1(s0([[26.0]]), s0([[27.0]]))]])]), s5(s1(s0([[28.0]]), s0([[29.0]])), [[s2(s1(s0([[30.0]]), s0([[31.0]])), [[s1(s0([[32.0]]), s0([[33.0]]))], [s1(s0([[34.0]]), s0([[35.0]]))]])], [s2(s1(s0([[36.0]]), s0([[37.0]])), [[s1(s0([[38.0]]), s0([[39.0]]))], [s1(s0([[40.0]]), s0([[41.0]]))]])]])) in
    let v2: s2 = s2(s1(s0([[42.0]]), s0([[43.0]])), [[s1(s0([[44.0]]), s0([[45.0]]))], [s1(s0([[46.0]]), s0([[47.0]]))]]) in
    let v3: Float = 48.0 in
    let initialResult: Float = 48.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()