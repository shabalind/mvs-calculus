  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  let f98: (Float) -> Float = (v0: Float) -> Float {
    var v2: Float = v0 in
    var v1: Float = v2 in
    var v10: Float = v1 in
    var v5: Float = v1 in
    v5 = v10 in
    v5
  } in
  let f40: (Float) -> Float = (v0: Float) -> Float {
    let v6: Float = f98(v0) in
    var v3: Float = v0 in
    let v1: Float = f98(v3) in
    v3 = v6 in
    var v4: Float = v0 in
    v3 = v1 in
    let v26: Float = f98(v1) in
    let v28: Float = f98(v4) in
    let v23: Float = f98(v28) in
    let v71: Float = v23 * v26 in
    v71
  } in
  let f30: (Float) -> Float = (v0: Float) -> Float {
    var v2: Float = v0 in
    let v9: Float = f40(v2) in
    var v4: Float = v0 in
    var v3: Float = v4 in
    var v18: Float = v4 in
    let v7: [Float] = [v9] in
    let v10: Float = f98(v3) in
    var v19: [Float] = v7 in
    var v30: [Float] = v7 in
    var v29: [Float] = v30 in
    v30[0] = v3 in
    let v21: Float = f98(v2) in
    let v24: Float = f98(v3) in
    var v16: [Float] = v19 in
    let v12: Float = v16[0] in
    v30[0] = v21 in
    let v34: Float = f40(v10) in
    v16[0] = v24 in
    var v31: Float = v18 in
    var v51: [Float] = v16 in
    let v58: [[Float]] = [v7, v16, v29] in
    let v65: [Float] = v58[0] in
    v30[0] = v24 in
    let v25: Float = v65[0] in
    v51[0] = v34 in
    var v47: [Float] = v29 in
    let v40: Float = f40(v31) in
    let v38: Float = v51[0] in
    v30 = v47 in
    v47[0] = v38 in
    let v48: Float = v51[0] in
    let v73: Float = f40(v9) in
    v47[0] = v73 in
    v30[0] = v40 in
    v51[0] = v48 in
    v19[0] = v12 in
    v25
  } in
  let noinline_f0: ([[s1]], Float) -> Float = (v0: [[s1]], v1: Float) -> Float {
    let v5: Float = v1 - v1 in
    let v11: Float = f30(v5) in
    let v34: Float = v5 + v11 in
    v34
  } in
  fun loop(i: Int, v0: [[s1]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s1]] = [[s1(s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]), [s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]])])]] in
    let v1: Float = 10.0 in
    let initialResult: Float = 10.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()