  struct s2 {
    var p0: Float
  } in
  let f48: (s2) -> s2 = (v0: s2) -> s2 {
    var v3: s2 = v0 in
    var v5: s2 = v0 in
    var v6: s2 = v5 in
    var v13: s2 = v3 in
    let v11: Float = v6.p0 in
    v13.p0 = v11 in
    v5.p0 = v11 in
    var v7: s2 = v13 in
    var v26: s2 = v7 in
    v26
  } in
  let noinline_f0: (s2, Float) -> Float = (v0: s2, v1: Float) -> Float {
    let v7: s2 = f48(v0) in
    let v5: Float = v0.p0 in
    var v12: s2 = v0 in
    var v6: Float = v1 in
    v12.p0 = v5 in
    var v10: Float = v6 in
    v12.p0 = v1 in
    let v27: Float = v0.p0 in
    v10 = v27 in
    v12.p0 = v10 in
    let v51: Float = v7.p0 in
    v12.p0 = v51 in
    let v61: s2 = f48(v12) in
    v12.p0 = v51 in
    let v166: Float = v61.p0 in
    v166
  } in
  fun loop(i: Int, v0: s2, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(0.0) in
    let v1: Float = 1.0 in
    let initialResult: Float = 1.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()