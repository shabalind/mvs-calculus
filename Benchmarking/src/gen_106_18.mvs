  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: [[s0]]
    var p1: [s0]
  } in
  let f5: (s1) -> s1 = (v0: s1) -> s1 {
    let v1: [s0] = v0.p1 in
    let v2: s0 = v1[1] in
    let v17: [s0] = v0.p1 in
    let v21: s1 = s1(v2, v17) in
    v21
  } in
  let noinline_f0: ([s2], s1, [s2], Float) -> Float = (v0: [s2], v1: s1, v2: [s2], v3: Float) -> Float {
    let v7: [s0] = v1.p1 in
    let v5: s0 = v7[0] in
    let v9: [[Float]] = v5.p1 in
    let v11: [Float] = v9[1] in
    let v13: s1 = f5(v1) in
    var v8: [Float] = v11 in
    let v17: s0 = v13.p0 in
    v8 = v11 in
    let v23: [[Float]] = v17.p1 in
    v8[0] = v3 in
    let v47: [[Float]] = v5.p0 in
    let v31: [Float] = v23[0] in
    let v21: [[Float]] = v5.p0 in
    var v29: [[Float]] = v21 in
    var v51: [[Float]] = v47 in
    let v44: Float = v31[0] in
    let v58: [Float] = v29[0] in
    v8[0] = v3 in
    v29 = v51 in
    let v55: Float = v58[0] in
    v8[0] = v44 in
    let v120: [Float] = v51[0] in
    v29[0] = v8 in
    v29[0] = v11 in
    var v73: [Float] = v11 in
    v51[0] = v73 in
    let v53: Float = v55 - v3 in
    let v123: Float = v3 - v53 in
    v51[0] = v120 in
    v29[0] = v11 in
    v123
  } in
  fun loop(i: Int, v0: [s2], v1: s1, v2: [s2], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2([[s0([[0.0]], [[1.0], [2.0]])], [s0([[3.0]], [[4.0], [5.0]])], [s0([[6.0]], [[7.0], [8.0]])]], [s0([[9.0]], [[10.0], [11.0]])]), s2([[s0([[12.0]], [[13.0], [14.0]])], [s0([[15.0]], [[16.0], [17.0]])], [s0([[18.0]], [[19.0], [20.0]])]], [s0([[21.0]], [[22.0], [23.0]])]), s2([[s0([[24.0]], [[25.0], [26.0]])], [s0([[27.0]], [[28.0], [29.0]])], [s0([[30.0]], [[31.0], [32.0]])]], [s0([[33.0]], [[34.0], [35.0]])])] in
    let v1: s1 = s1(s0([[36.0]], [[37.0], [38.0]]), [s0([[39.0]], [[40.0], [41.0]]), s0([[42.0]], [[43.0], [44.0]])]) in
    let v2: [s2] = [s2([[s0([[45.0]], [[46.0], [47.0]])], [s0([[48.0]], [[49.0], [50.0]])], [s0([[51.0]], [[52.0], [53.0]])]], [s0([[54.0]], [[55.0], [56.0]])]), s2([[s0([[57.0]], [[58.0], [59.0]])], [s0([[60.0]], [[61.0], [62.0]])], [s0([[63.0]], [[64.0], [65.0]])]], [s0([[66.0]], [[67.0], [68.0]])])] in
    let v3: Float = 69.0 in
    let initialResult: Float = 69.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()