  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [[s0]]
    var p1: s0
  } in
  struct s3 {
    var p0: s2
    var p1: [s1]
  } in
  let f40: (s2) -> s2 = (v0: s2) -> s2 {
    let v3: s0 = v0.p1 in
    let v1: [[Float]] = v3.p0 in
    let v4: s0 = v0.p1 in
    var v8: s2 = v0 in
    var v17: s2 = v0 in
    let v7: [Float] = v1[1] in
    var v9: s0 = v4 in
    v9.p0 = v1 in
    let v11: s0 = v8.p1 in
    v17.p1 = v11 in
    v9.p0 = v1 in
    var v30: s2 = v17 in
    let v23: [[Float]] = v3.p1 in
    let v37: [[s0]] = v8.p0 in
    let v16: [s0] = v37[0] in
    v9.p0 = v1 in
    let v36: s0 = v30.p1 in
    v8.p1 = v36 in
    var v47: [[Float]] = v23 in
    v9.p1 = v47 in
    let v72: s0 = v16[0] in
    v8.p1 = v9 in
    v47[0] = v7 in
    v8.p1 = v4 in
    v8 = v30 in
    v17.p1 = v11 in
    v30.p1 = v72 in
    v8
  } in
  let f33: ([s0]) -> [s0] = (v0: [s0]) -> [s0] {
    let v1: [[s0]] = [v0, v0, v0] in
    var v7: [[s0]] = v1 in
    v7 = v1 in
    v7[1] = v0 in
    v7 = v1 in
    v7 = v1 in
    v7[2] = v0 in
    v7 = v1 in
    let v26: [s0] = v7[2] in
    v26
  } in
  let f6: (s0, [[s0]], Float, s0, s3) -> Float = (v0: s0, v1: [[s0]], v2: Float, v3: s0, v4: s3) -> Float {
    v2
  } in
  let f3: (s3) -> s3 = (v0: s3) -> s3 {
    var v2: s3 = v0 in
    let v5: s2 = v2.p0 in
    var v7: s3 = v0 in
    var v4: s2 = v5 in
    var v3: s3 = v7 in
    var v10: s3 = v7 in
    var v8: s2 = v4 in
    v3.p0 = v8 in
    let v9: s2 = v3.p0 in
    var v37: s3 = v10 in
    let v30: s2 = f40(v9) in
    let v16: s2 = f40(v9) in
    let v38: [[s0]] = v30.p0 in
    let v25: [s1] = v7.p1 in
    var v31: s3 = v0 in
    let v34: [s0] = v38[0] in
    let v41: [s0] = f33(v34) in
    let v42: s0 = v41[0] in
    v37.p1 = v25 in
    v37.p0 = v30 in
    v10.p0 = v16 in
    v7.p0 = v30 in
    let v24: s1 = v25[0] in
    v2.p0 = v16 in
    v8.p1 = v42 in
    var v49: [s1] = v25 in
    v49[0] = v24 in
    v49[0] = v24 in
    v10.p1 = v49 in
    v10 = v0 in
    v10.p1 = v49 in
    v10 = v31 in
    v10.p1 = v49 in
    v49[0] = v24 in
    v37
  } in
  let noinline_f0: (s3, [[s0]], Float) -> Float = (v0: s3, v1: [[s0]], v2: Float) -> Float {
    let v8: s2 = v0.p0 in
    let v6: [s0] = v1[1] in
    let v3: [s0] = v1[0] in
    let v7: s0 = v8.p1 in
    let v5: s0 = v3[0] in
    var v10: s0 = v5 in
    let v31: [[Float]] = v7.p1 in
    let v9: [Float] = v31[1] in
    v10 = v5 in
    let v29: [[s0]] = [v3, v6, v3, v6, v3, v3, v6] in
    let v12: s3 = f3(v0) in
    let v18: Float = f6(v10, v1, v2, v10, v0) in
    let v21: [s0] = v29[4] in
    v10.p1 = v31 in
    let v40: [[Float]] = v10.p0 in
    var v23: [[Float]] = v40 in
    var v41: [[s0]] = v1 in
    let v76: s0 = v21[0] in
    v23[0] = v9 in
    v10.p1 = v40 in
    let v34: s3 = f3(v12) in
    v10.p1 = v23 in
    v10.p1 = v40 in
    v41[2] = v21 in
    let v65: s2 = v0.p0 in
    v41[0] = v21 in
    let v50: s0 = v65.p1 in
    v10.p1 = v23 in
    let v124: Float = f6(v50, v41, v18, v76, v34) in
    v124
  } in
  fun loop(i: Int, v0: s3, v1: [[s0]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(s2([[s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]])]], s0([[6.0], [7.0], [8.0]], [[9.0], [10.0], [11.0]])), [s1(s0([[12.0], [13.0], [14.0]], [[15.0], [16.0], [17.0]]), s0([[18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0]]))]) in
    let v1: [[s0]] = [[s0([[24.0], [25.0], [26.0]], [[27.0], [28.0], [29.0]])], [s0([[30.0], [31.0], [32.0]], [[33.0], [34.0], [35.0]])], [s0([[36.0], [37.0], [38.0]], [[39.0], [40.0], [41.0]])]] in
    let v2: Float = 42.0 in
    let initialResult: Float = 42.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()