  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  let f19: (Float) -> Float = (v0: Float) -> Float {
    var v7: Float = v0 in
    var v1: Float = v7 in
    var v5: Float = v1 in
    var v6: Float = v0 in
    var v2: Float = v5 in
    var v4: Float = v1 in
    var v10: Float = v1 in
    var v3: Float = v6 in
    let v12: Float = v1 / v5 in
    v5 = v10 in
    var v8: Float = v12 in
    var v27: Float = v8 in
    var v29: Float = v3 in
    var v23: Float = v8 in
    let v31: [Float] = [v27, v1, v4, v29, v1] in
    var v36: [Float] = v31 in
    let v40: Float = v31[0] in
    v36[4] = v40 in
    v36[1] = v1 in
    let v41: Float = v36[4] in
    let v63: Float = v41 + v2 in
    v36[0] = v23 in
    v63
  } in
  let noinline_f0: ([[s1]], Float) -> Float = (v0: [[s1]], v1: Float) -> Float {
    let v5: Float = f19(v1) in
    let v7: Float = f19(v5) in
    var v4: Float = v1 in
    let v9: Float = f19(v1) in
    let v24: Float = f19(v7) in
    let v47: Float = v24 + v9 in
    let v83: Float = v4 * v47 in
    v83
  } in
  fun loop(i: Int, v0: [[s1]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s1]] = [[s1(s0([[0.0]], [[1.0], [2.0], [3.0]]), s0([[4.0]], [[5.0], [6.0], [7.0]]))], [s1(s0([[8.0]], [[9.0], [10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0], [15.0]]))], [s1(s0([[16.0]], [[17.0], [18.0], [19.0]]), s0([[20.0]], [[21.0], [22.0], [23.0]]))]] in
    let v1: Float = 24.0 in
    let initialResult: Float = 24.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()