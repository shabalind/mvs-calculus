  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
  }
  struct s6 {
    var p0: [s0]
    var p1: [[s0]]
  }
  @inline(never)
  func f0(_ v0: [s6], _ v1: Double) -> Double {
    var v4: Double = v1
    let v9: s6 = v0[2]
    let v10: [[s0]] = v9.p1
    let v19: [s0] = v10[1]
    let v13: s0 = v19[0]
    let v27: [[Double]] = v13.p0
    let v14: Double = v1 / v4
    let v70: [Double] = v27[2]
    let v60: Double = v70[0]
    let v33: Double = v60 / v14
    return v33
  }
  func benchmark() {
    let v0: [s6] = [s6(p0: [s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0]], p2: [[4.0]]), s0(p0: [[5.0], [6.0], [7.0]], p1: [[8.0]], p2: [[9.0]]), s0(p0: [[10.0], [11.0], [12.0]], p1: [[13.0]], p2: [[14.0]])], p1: [[s0(p0: [[15.0], [16.0], [17.0]], p1: [[18.0]], p2: [[19.0]])], [s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0]], p2: [[24.0]])], [s0(p0: [[25.0], [26.0], [27.0]], p1: [[28.0]], p2: [[29.0]])]]), s6(p0: [s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0]], p2: [[34.0]]), s0(p0: [[35.0], [36.0], [37.0]], p1: [[38.0]], p2: [[39.0]]), s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0]], p2: [[44.0]])], p1: [[s0(p0: [[45.0], [46.0], [47.0]], p1: [[48.0]], p2: [[49.0]])], [s0(p0: [[50.0], [51.0], [52.0]], p1: [[53.0]], p2: [[54.0]])], [s0(p0: [[55.0], [56.0], [57.0]], p1: [[58.0]], p2: [[59.0]])]]), s6(p0: [s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0]], p2: [[64.0]]), s0(p0: [[65.0], [66.0], [67.0]], p1: [[68.0]], p2: [[69.0]]), s0(p0: [[70.0], [71.0], [72.0]], p1: [[73.0]], p2: [[74.0]])], p1: [[s0(p0: [[75.0], [76.0], [77.0]], p1: [[78.0]], p2: [[79.0]])], [s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0]], p2: [[84.0]])], [s0(p0: [[85.0], [86.0], [87.0]], p1: [[88.0]], p2: [[89.0]])]])]
    let v1: Double = 90.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 90.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
