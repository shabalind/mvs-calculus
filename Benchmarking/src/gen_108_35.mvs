  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  let f45: (Float) -> Float = (v0: Float) -> Float {
    var v2: Float = v0 in
    var v4: Float = v2 in
    var v8: Float = v0 in
    var v12: Float = v4 in
    v12 = v8 in
    v12
  } in
  let noinline_f0: ([s1], s1, Float) -> Float = (v0: [s1], v1: s1, v2: Float) -> Float {
    var v20: Float = v2 in
    let v46: Float = f45(v20) in
    let v55: Float = f45(v46) in
    let v37: Float = v20 * v55 in
    v37
  } in
  fun loop(i: Int, v0: [s1], v1: s1, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1(s0([[0.0], [1.0], [2.0]], [[3.0]]), s0([[4.0], [5.0], [6.0]], [[7.0]])), s1(s0([[8.0], [9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0], [14.0]], [[15.0]]))] in
    let v1: s1 = s1(s0([[16.0], [17.0], [18.0]], [[19.0]]), s0([[20.0], [21.0], [22.0]], [[23.0]])) in
    let v2: Float = 24.0 in
    let initialResult: Float = 24.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()