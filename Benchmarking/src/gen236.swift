  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s6 {
    var p0: [s1]
    var p1: [s1]
  }
  func f46(_ v0: s6, _ v1: s6) -> s6 {
    var v17: s6 = v1
    v17 = v0
    return v17
  }
  func f31(_ v0: s6, _ v1: s6) -> s6 {
    let v7: s6 = f46(v0, v1)
    var v9: s6 = v0
    let v2: [s1] = v0.p1
    v9.p1 = v2
    let v6: [s1] = v9.p0
    var v4: [s1] = v6
    let v3: s6 = s6(p0: v6, p1: v2)
    let v14: [s1] = v0.p0
    v9.p1 = v2
    let v19: s6 = f46(v9, v7)
    v9.p1 = v2
    var v24: [s1] = v14
    v9.p0 = v4
    let v30: s6 = f46(v0, v9)
    let v11: s1 = v24[0]
    var v13: s6 = v19
    v24[0] = v11
    let v20: s6 = f46(v19, v30)
    v9 = v13
    v4[1] = v11
    v13.p0 = v14
    v13.p0 = v14
    v24[0] = v11
    var v73: [s1] = v14
    v73[0] = v11
    v13.p0 = v14
    let v72: s6 = f46(v3, v30)
    v9.p0 = v73
    v13.p0 = v14
    let v87: s6 = f46(v20, v72)
    v9.p0 = v73
    return v87
  }
  func f12(_ v0: [s6]) -> [s6] {
    let v7: s6 = v0[2]
    let v6: [s1] = v7.p1
    let v5: s6 = v0[0]
    var v2: [s6] = v0
    var v3: s6 = v7
    var v4: [s6] = v2
    let v10: [[s1]] = [v6, v6, v6, v6]
    let v15: s6 = f46(v5, v5)
    let v9: [s1] = v7.p0
    let v11: s6 = f46(v7, v5)
    let v1: s6 = f46(v5, v3)
    let v20: [s1] = v10[3]
    var v12: s6 = v11
    let v23: s6 = f31(v15, v15)
    let v8: s6 = f31(v1, v1)
    let v29: s6 = f31(v7, v23)
    v12.p0 = v9
    v3.p1 = v20
    let v51: [s1] = v12.p1
    var v19: [s6] = v4
    let v78: s6 = f46(v29, v8)
    v3.p1 = v51
    let v33: [s1] = v12.p0
    v12.p1 = v6
    v19[2] = v3
    let v59: [s1] = v10[1]
    v12.p0 = v33
    v12.p1 = v20
    let v148: s6 = f31(v5, v12)
    v3.p1 = v59
    v4[2] = v78
    v12.p1 = v51
    v4[0] = v148
    return v19
  }
  @inline(never)
  func f0(_ v0: [s6], _ v1: Double) -> Double {
    var v7: [s6] = v0
    let v8: s6 = v7[0]
    let v14: [s1] = v8.p1
    let v18: s1 = v14[1]
    let v16: [s0] = v18.p1
    let v30: s0 = v16[1]
    let v23: [[Double]] = v30.p1
    let v24: [Double] = v23[2]
    let v52: [s6] = f12(v0)
    var v112: [s6] = v52
    v7 = v112
    let v171: Double = v24[0]
    return v171
  }
  func benchmark() {
    let v0: [s6] = [s6(p0: [s1(p0: s0(p0: [[0.0]], p1: [[1.0], [2.0], [3.0]]), p1: [s0(p0: [[4.0]], p1: [[5.0], [6.0], [7.0]]), s0(p0: [[8.0]], p1: [[9.0], [10.0], [11.0]]), s0(p0: [[12.0]], p1: [[13.0], [14.0], [15.0]])]), s1(p0: s0(p0: [[16.0]], p1: [[17.0], [18.0], [19.0]]), p1: [s0(p0: [[20.0]], p1: [[21.0], [22.0], [23.0]]), s0(p0: [[24.0]], p1: [[25.0], [26.0], [27.0]]), s0(p0: [[28.0]], p1: [[29.0], [30.0], [31.0]])])], p1: [s1(p0: s0(p0: [[32.0]], p1: [[33.0], [34.0], [35.0]]), p1: [s0(p0: [[36.0]], p1: [[37.0], [38.0], [39.0]]), s0(p0: [[40.0]], p1: [[41.0], [42.0], [43.0]]), s0(p0: [[44.0]], p1: [[45.0], [46.0], [47.0]])]), s1(p0: s0(p0: [[48.0]], p1: [[49.0], [50.0], [51.0]]), p1: [s0(p0: [[52.0]], p1: [[53.0], [54.0], [55.0]]), s0(p0: [[56.0]], p1: [[57.0], [58.0], [59.0]]), s0(p0: [[60.0]], p1: [[61.0], [62.0], [63.0]])]), s1(p0: s0(p0: [[64.0]], p1: [[65.0], [66.0], [67.0]]), p1: [s0(p0: [[68.0]], p1: [[69.0], [70.0], [71.0]]), s0(p0: [[72.0]], p1: [[73.0], [74.0], [75.0]]), s0(p0: [[76.0]], p1: [[77.0], [78.0], [79.0]])])]), s6(p0: [s1(p0: s0(p0: [[80.0]], p1: [[81.0], [82.0], [83.0]]), p1: [s0(p0: [[84.0]], p1: [[85.0], [86.0], [87.0]]), s0(p0: [[88.0]], p1: [[89.0], [90.0], [91.0]]), s0(p0: [[92.0]], p1: [[93.0], [94.0], [95.0]])]), s1(p0: s0(p0: [[96.0]], p1: [[97.0], [98.0], [99.0]]), p1: [s0(p0: [[100.0]], p1: [[101.0], [102.0], [103.0]]), s0(p0: [[104.0]], p1: [[105.0], [106.0], [107.0]]), s0(p0: [[108.0]], p1: [[109.0], [110.0], [111.0]])])], p1: [s1(p0: s0(p0: [[112.0]], p1: [[113.0], [114.0], [115.0]]), p1: [s0(p0: [[116.0]], p1: [[117.0], [118.0], [119.0]]), s0(p0: [[120.0]], p1: [[121.0], [122.0], [123.0]]), s0(p0: [[124.0]], p1: [[125.0], [126.0], [127.0]])]), s1(p0: s0(p0: [[128.0]], p1: [[129.0], [130.0], [131.0]]), p1: [s0(p0: [[132.0]], p1: [[133.0], [134.0], [135.0]]), s0(p0: [[136.0]], p1: [[137.0], [138.0], [139.0]]), s0(p0: [[140.0]], p1: [[141.0], [142.0], [143.0]])]), s1(p0: s0(p0: [[144.0]], p1: [[145.0], [146.0], [147.0]]), p1: [s0(p0: [[148.0]], p1: [[149.0], [150.0], [151.0]]), s0(p0: [[152.0]], p1: [[153.0], [154.0], [155.0]]), s0(p0: [[156.0]], p1: [[157.0], [158.0], [159.0]])])]), s6(p0: [s1(p0: s0(p0: [[160.0]], p1: [[161.0], [162.0], [163.0]]), p1: [s0(p0: [[164.0]], p1: [[165.0], [166.0], [167.0]]), s0(p0: [[168.0]], p1: [[169.0], [170.0], [171.0]]), s0(p0: [[172.0]], p1: [[173.0], [174.0], [175.0]])]), s1(p0: s0(p0: [[176.0]], p1: [[177.0], [178.0], [179.0]]), p1: [s0(p0: [[180.0]], p1: [[181.0], [182.0], [183.0]]), s0(p0: [[184.0]], p1: [[185.0], [186.0], [187.0]]), s0(p0: [[188.0]], p1: [[189.0], [190.0], [191.0]])])], p1: [s1(p0: s0(p0: [[192.0]], p1: [[193.0], [194.0], [195.0]]), p1: [s0(p0: [[196.0]], p1: [[197.0], [198.0], [199.0]]), s0(p0: [[200.0]], p1: [[201.0], [202.0], [203.0]]), s0(p0: [[204.0]], p1: [[205.0], [206.0], [207.0]])]), s1(p0: s0(p0: [[208.0]], p1: [[209.0], [210.0], [211.0]]), p1: [s0(p0: [[212.0]], p1: [[213.0], [214.0], [215.0]]), s0(p0: [[216.0]], p1: [[217.0], [218.0], [219.0]]), s0(p0: [[220.0]], p1: [[221.0], [222.0], [223.0]])]), s1(p0: s0(p0: [[224.0]], p1: [[225.0], [226.0], [227.0]]), p1: [s0(p0: [[228.0]], p1: [[229.0], [230.0], [231.0]]), s0(p0: [[232.0]], p1: [[233.0], [234.0], [235.0]]), s0(p0: [[236.0]], p1: [[237.0], [238.0], [239.0]])])])]
    let v1: Double = 240.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 240.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
