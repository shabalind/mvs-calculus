  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
  } in
  let f4: (s0) -> s0 = (v0: s0) -> s0 {
    let v6: [[Float]] = v0.p1 in
    let v2: [Float] = v6[1] in
    var v8: s0 = v0 in
    let v1: [[Float]] = v8.p1 in
    let v4: [[Float]] = v0.p1 in
    var v5: [[Float]] = v6 in
    v8.p1 = v5 in
    let v3: [[[Float]]] = [v1, v1] in
    v8.p1 = v4 in
    v5[1] = v2 in
    let v7: [[[Float]]] = [v1, v6] in
    var v13: [Float] = v2 in
    let v11: [[Float]] = v8.p0 in
    let v16: [[Float]] = v8.p0 in
    let v9: [[Float]] = v0.p1 in
    v5[0] = v13 in
    let v10: [[Float]] = v0.p1 in
    let v12: [[Float]] = v0.p1 in
    let v23: Float = v13[0] in
    v8.p0 = v11 in
    var v24: Float = v23 in
    var v22: [Float] = v2 in
    let v21: [[Float]] = v8.p0 in
    let v20: [[Float]] = v3[1] in
    let v25: [Float] = v16[0] in
    let v14: s0 = s0(v11, v9) in
    v5[1] = v25 in
    var v32: [[Float]] = v16 in
    let v49: [Float] = v20[0] in
    v32[0] = v22 in
    var v39: [Float] = v49 in
    v5[1] = v13 in
    var v35: [[[Float]]] = v3 in
    let v38: [[Float]] = v8.p1 in
    let v41: Float = v24 * v24 in
    let v45: [[Float]] = v14.p1 in
    let v30: s0 = s0(v16, v5) in
    let v58: [Float] = v10[1] in
    let v57: s0 = s0(v21, v1) in
    v8.p0 = v32 in
    v8.p1 = v4 in
    v8.p1 = v12 in
    let v43: [s0] = [v30, v14, v57, v57, v30, v14] in
    var v72: [s0] = v43 in
    v8.p1 = v4 in
    var v33: [[Float]] = v1 in
    v33[0] = v25 in
    var v85: [[[Float]]] = v3 in
    v8.p1 = v38 in
    let v65: s0 = v72[1] in
    let v67: [[[[Float]]]] = [v35, v7] in
    v35[1] = v45 in
    let v122: [[Float]] = v65.p1 in
    let v83: [[[Float]]] = v67[1] in
    var v75: [[[Float]]] = v85 in
    v35 = v75 in
    var v81: s0 = v65 in
    v39[0] = v24 in
    var v103: [[[Float]]] = v83 in
    let v131: Float = v13[0] in
    v33[1] = v39 in
    v22[0] = v41 in
    v33[1] = v58 in
    v22[0] = v131 in
    let v272: [[Float]] = v75[1] in
    v8.p1 = v272 in
    v81.p0 = v16 in
    v75 = v103 in
    v81.p1 = v33 in
    v103[0] = v122 in
    v81
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    let v7: [s0] = v0.p1 in
    let v6: s0 = v7[1] in
    let v5: s0 = v7[2] in
    let v12: s0 = v7[0] in
    var v14: s0 = v5 in
    let v9: [[Float]] = v6.p1 in
    v14.p1 = v9 in
    let v16: s0 = f4(v14) in
    let v21: [[Float]] = v16.p1 in
    var v20: s0 = v5 in
    let v19: [Float] = v21[1] in
    v20.p1 = v21 in
    let v38: [[Float]] = v20.p0 in
    let v41: [[Float]] = v12.p0 in
    var v55: [Float] = v19 in
    var v79: [Float] = v55 in
    v14.p0 = v41 in
    v14.p0 = v38 in
    v20.p1 = v9 in
    let v116: Float = v79[0] in
    v20.p0 = v41 in
    v116
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([[s0([[0.0]], [[1.0], [2.0]])], [s0([[3.0]], [[4.0], [5.0]])]], [s0([[6.0]], [[7.0], [8.0]]), s0([[9.0]], [[10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0]])]) in
    let v1: Float = 15.0 in
    let initialResult: Float = 15.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()