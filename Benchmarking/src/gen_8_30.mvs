  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  let noinline_f0: ([[s1]], Float) -> Float = (v0: [[s1]], v1: Float) -> Float {
    let v7: [s1] = v0[0] in
    let v3: s1 = v7[0] in
    let v2: s0 = v3.p1 in
    let v17: [[Float]] = v2.p2 in
    let v27: [Float] = v17[0] in
    let v43: Float = v27[0] in
    var v47: Float = v43 in
    let v91: Float = v47 / v47 in
    let v64: Float = v27[0] in
    let v90: Float = v64 / v91 in
    v47 = v43 in
    v90
  } in
  fun loop(i: Int, v0: [[s1]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s1]] = [[s1(s0([[0.0], [1.0], [2.0]], [[3.0]], [[4.0]]), s0([[5.0], [6.0], [7.0]], [[8.0]], [[9.0]]))], [s1(s0([[10.0], [11.0], [12.0]], [[13.0]], [[14.0]]), s0([[15.0], [16.0], [17.0]], [[18.0]], [[19.0]]))], [s1(s0([[20.0], [21.0], [22.0]], [[23.0]], [[24.0]]), s0([[25.0], [26.0], [27.0]], [[28.0]], [[29.0]]))]] in
    let v1: Float = 30.0 in
    let initialResult: Float = 30.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()