  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: [s0]
    var p1: [s1]
  } in
  struct s5 {
    var p0: [[s2]]
    var p1: [Float]
  } in
  struct s11 {
    var p0: s5
    var p1: [[s2]]
  } in
  let noinline_f0: (s11, Float) -> Float = (v0: s11, v1: Float) -> Float {
    let v5: s5 = v0.p0 in
    let v8: [Float] = v5.p1 in
    let v10: s5 = v0.p0 in
    let v27: [[s2]] = v10.p0 in
    let v19: s5 = s5(v27, v8) in
    let v14: Float = v8[0] in
    let v15: [Float] = v19.p1 in
    let v37: Float = v15[0] in
    let v38: Float = v37 + v14 in
    let v93: Float = v37 + v38 in
    let v72: Float = v37 * v93 in
    v72
  } in
  fun loop(i: Int, v0: s11, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s11 = s11(s5([[s2([s0([[0.0], [1.0]], [[2.0], [3.0]])], [s1(s0([[4.0], [5.0]], [[6.0], [7.0]]), [s0([[8.0], [9.0]], [[10.0], [11.0]]), s0([[12.0], [13.0]], [[14.0], [15.0]]), s0([[16.0], [17.0]], [[18.0], [19.0]])]), s1(s0([[20.0], [21.0]], [[22.0], [23.0]]), [s0([[24.0], [25.0]], [[26.0], [27.0]]), s0([[28.0], [29.0]], [[30.0], [31.0]]), s0([[32.0], [33.0]], [[34.0], [35.0]])]), s1(s0([[36.0], [37.0]], [[38.0], [39.0]]), [s0([[40.0], [41.0]], [[42.0], [43.0]]), s0([[44.0], [45.0]], [[46.0], [47.0]]), s0([[48.0], [49.0]], [[50.0], [51.0]])])])]], [52.0]), [[s2([s0([[53.0], [54.0]], [[55.0], [56.0]])], [s1(s0([[57.0], [58.0]], [[59.0], [60.0]]), [s0([[61.0], [62.0]], [[63.0], [64.0]]), s0([[65.0], [66.0]], [[67.0], [68.0]]), s0([[69.0], [70.0]], [[71.0], [72.0]])]), s1(s0([[73.0], [74.0]], [[75.0], [76.0]]), [s0([[77.0], [78.0]], [[79.0], [80.0]]), s0([[81.0], [82.0]], [[83.0], [84.0]]), s0([[85.0], [86.0]], [[87.0], [88.0]])]), s1(s0([[89.0], [90.0]], [[91.0], [92.0]]), [s0([[93.0], [94.0]], [[95.0], [96.0]]), s0([[97.0], [98.0]], [[99.0], [100.0]]), s0([[101.0], [102.0]], [[103.0], [104.0]])])])]]) in
    let v1: Float = 105.0 in
    let initialResult: Float = 105.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()