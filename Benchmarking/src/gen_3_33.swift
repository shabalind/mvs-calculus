  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
    var p4: [[Double]]
    var p5: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s6 {
    var p0: s1
    var p1: s0
  }
  @inline(never)
  func f0(_ v0: [s1], _ v1: Double) -> Double {
    var v5: [s1] = v0
    let v7: s1 = v0[1]
    let v8: s1 = v5[1]
    v5[1] = v7
    let v11: [s0] = v8.p1
    let v10: s0 = v11[0]
    let v16: s6 = s6(p0: v7, p1: v10)
    let v27: s0 = v16.p1
    let v102: [[Double]] = v27.p2
    let v277: [Double] = v102[1]
    let v109: Double = v277[0]
    return v109
  }
  func benchmark() {
    let v0: [s1] = [s1(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0]], p2: [[4.0], [5.0], [6.0]], p3: [[7.0], [8.0]], p4: [[9.0]], p5: [[10.0]]), p1: [s0(p0: [[11.0], [12.0]], p1: [[13.0], [14.0]], p2: [[15.0], [16.0], [17.0]], p3: [[18.0], [19.0]], p4: [[20.0]], p5: [[21.0]]), s0(p0: [[22.0], [23.0]], p1: [[24.0], [25.0]], p2: [[26.0], [27.0], [28.0]], p3: [[29.0], [30.0]], p4: [[31.0]], p5: [[32.0]])]), s1(p0: s0(p0: [[33.0], [34.0]], p1: [[35.0], [36.0]], p2: [[37.0], [38.0], [39.0]], p3: [[40.0], [41.0]], p4: [[42.0]], p5: [[43.0]]), p1: [s0(p0: [[44.0], [45.0]], p1: [[46.0], [47.0]], p2: [[48.0], [49.0], [50.0]], p3: [[51.0], [52.0]], p4: [[53.0]], p5: [[54.0]]), s0(p0: [[55.0], [56.0]], p1: [[57.0], [58.0]], p2: [[59.0], [60.0], [61.0]], p3: [[62.0], [63.0]], p4: [[64.0]], p5: [[65.0]])]), s1(p0: s0(p0: [[66.0], [67.0]], p1: [[68.0], [69.0]], p2: [[70.0], [71.0], [72.0]], p3: [[73.0], [74.0]], p4: [[75.0]], p5: [[76.0]]), p1: [s0(p0: [[77.0], [78.0]], p1: [[79.0], [80.0]], p2: [[81.0], [82.0], [83.0]], p3: [[84.0], [85.0]], p4: [[86.0]], p5: [[87.0]]), s0(p0: [[88.0], [89.0]], p1: [[90.0], [91.0]], p2: [[92.0], [93.0], [94.0]], p3: [[95.0], [96.0]], p4: [[97.0]], p5: [[98.0]])])]
    let v1: Double = 99.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 99.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
