  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  let f54: (s1) -> s1 = (v0: s1) -> s1 {
    let v7: s0 = v0.p1 in
    let v2: s0 = v0.p1 in
    let v6: [s1] = [v0, v0, v0, v0, v0, v0] in
    let v9: s1 = s1(v2, v2) in
    var v10: [s1] = v6 in
    let v1: s1 = s1(v7, v7) in
    let v24: s0 = v9.p0 in
    v10[2] = v1 in
    let v21: s1 = s1(v24, v24) in
    var v18: [s1] = v10 in
    let v16: s1 = v18[2] in
    let v39: s0 = v16.p0 in
    var v35: s1 = v9 in
    v35.p0 = v39 in
    v10[5] = v21 in
    v35
  } in
  let f39: (s1) -> s1 = (v0: s1) -> s1 {
    let v4: s1 = f54(v0) in
    let v2: s0 = v4.p0 in
    let v3: s1 = s1(v2, v2) in
    let v12: s0 = v3.p1 in
    let v9: s1 = s1(v12, v2) in
    v9
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    let v4: s1 = f39(v0) in
    let v3: s0 = v4.p1 in
    let v5: [[Float]] = v3.p1 in
    let v7: [Float] = v5[0] in
    let v13: Float = v7[0] in
    var v36: Float = v1 in
    let v38: [Float] = [v13, v36, v13, v1, v1, v36, v13] in
    let v62: Float = v38[2] in
    var v86: Float = v62 in
    v86
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1(s0([[0.0], [1.0]], [[2.0]]), s0([[3.0], [4.0]], [[5.0]])) in
    let v1: Float = 6.0 in
    let initialResult: Float = 6.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()