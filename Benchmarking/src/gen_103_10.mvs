  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  let noinline_f0: (s0, [s1], [s0], Float) -> Float = (v0: s0, v1: [s1], v2: [s0], v3: Float) -> Float {
    let v6: s1 = v1[0] in
    let v7: [[Float]] = v0.p1 in
    let v5: [[Float]] = v0.p0 in
    let v14: s0 = v6.p0 in
    let v15: s1 = v1[2] in
    let v16: [Float] = v7[0] in
    let v12: s0 = v15.p1 in
    let v4: [[Float]] = v12.p1 in
    let v10: s1 = v1[0] in
    let v20: s0 = v10.p0 in
    var v13: s0 = v20 in
    var v23: [[Float]] = v5 in
    let v17: [Float] = v23[0] in
    v23[0] = v16 in
    let v27: s0 = v6.p1 in
    var v33: s1 = v10 in
    v33.p1 = v14 in
    let v45: s0 = v33.p0 in
    v33.p1 = v27 in
    let v40: [Float] = v23[0] in
    let v25: [[Float]] = v45.p1 in
    let v49: Float = v40[0] in
    v23[0] = v40 in
    var v62: [Float] = v17 in
    v62 = v40 in
    v13.p1 = v4 in
    let v47: [Float] = v25[1] in
    let v88: Float = v49 / v49 in
    let v66: Float = v47[0] in
    v23[0] = v47 in
    v23[0] = v62 in
    var v134: Float = v88 in
    v33.p0 = v13 in
    v62[0] = v49 in
    v62[0] = v66 in
    v13.p0 = v23 in
    var v107: Float = v134 in
    v107
  } in
  fun loop(i: Int, v0: s0, v1: [s1], v2: [s0], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0]], [[1.0], [2.0]]) in
    let v1: [s1] = [s1(s0([[3.0]], [[4.0], [5.0]]), s0([[6.0]], [[7.0], [8.0]])), s1(s0([[9.0]], [[10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0]])), s1(s0([[15.0]], [[16.0], [17.0]]), s0([[18.0]], [[19.0], [20.0]]))] in
    let v2: [s0] = [s0([[21.0]], [[22.0], [23.0]]), s0([[24.0]], [[25.0], [26.0]])] in
    let v3: Float = 27.0 in
    let initialResult: Float = 27.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()