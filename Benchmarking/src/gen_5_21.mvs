  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: Float
    var p1: s0
  } in
  struct s3 {
    var p0: [s1]
    var p1: s2
  } in
  struct s4 {
    var p0: [s2]
    var p1: [s1]
  } in
  struct s6 {
    var p0: s3
    var p1: [s2]
  } in
  struct s7 {
    var p0: [Float]
    var p1: [[s4]]
    var p2: s3
  } in
  struct s8 {
    var p0: s1
    var p1: s3
    var p2: [s6]
    var p3: s7
  } in
  struct s10 {
    var p0: s8
    var p1: s3
  } in
  let f40: (s1) -> s1 = (v0: s1) -> s1 {
    var v7: s1 = v0 in
    v7 = v0 in
    var v3: s1 = v7 in
    var v2: s1 = v3 in
    let v1: s0 = v0.p0 in
    let v4: [s0] = [v1, v1, v1, v1, v1, v1, v1] in
    let v8: s0 = v7.p0 in
    let v13: s0 = v4[1] in
    let v5: s0 = v4[4] in
    let v6: s0 = v4[3] in
    let v25: s0 = v3.p1 in
    var v14: s0 = v8 in
    let v29: [[Float]] = v6.p1 in
    let v30: [[Float]] = v8.p0 in
    v3 = v2 in
    let v15: [[Float]] = v5.p1 in
    let v58: s0 = v4[1] in
    v2.p0 = v25 in
    let v11: s0 = v4[1] in
    v2.p0 = v11 in
    v3.p1 = v14 in
    let v32: [[Float]] = v8.p0 in
    let v41: s0 = s0(v30, v15) in
    v2.p0 = v58 in
    var v28: [[Float]] = v32 in
    let v40: s0 = s0(v28, v29) in
    v2.p0 = v8 in
    v3.p1 = v40 in
    let v51: s0 = v0.p1 in
    var v100: s1 = v2 in
    v100.p0 = v13 in
    v7.p1 = v11 in
    v100.p0 = v58 in
    v3.p0 = v1 in
    v3.p0 = v41 in
    v2.p0 = v51 in
    v100
  } in
  let noinline_f0: ([s10], s8, Float) -> Float = (v0: [s10], v1: s8, v2: Float) -> Float {
    let v4: s1 = v1.p0 in
    var v3: s1 = v4 in
    let v8: s0 = v3.p0 in
    let v9: s0 = v4.p1 in
    var v10: s0 = v9 in
    let v11: s1 = f40(v3) in
    v3.p0 = v10 in
    let v13: [[Float]] = v8.p1 in
    let v17: Float = v2 - v2 in
    let v41: [Float] = v13[0] in
    let v26: s0 = v11.p1 in
    v10.p1 = v13 in
    let v29: Float = v41[0] in
    let v25: Float = v17 * v29 in
    v3.p1 = v26 in
    v10 = v9 in
    v3.p0 = v10 in
    let v35: s0 = v4.p1 in
    let v51: [[Float]] = v35.p1 in
    v10.p1 = v51 in
    let v50: Float = v29 - v25 in
    v50
  } in
  fun loop(i: Int, v0: [s10], v1: s8, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s10] = [s10(s8(s1(s0([[0.0], [1.0]], [[2.0]]), s0([[3.0], [4.0]], [[5.0]])), s3([s1(s0([[6.0], [7.0]], [[8.0]]), s0([[9.0], [10.0]], [[11.0]])), s1(s0([[12.0], [13.0]], [[14.0]]), s0([[15.0], [16.0]], [[17.0]])), s1(s0([[18.0], [19.0]], [[20.0]]), s0([[21.0], [22.0]], [[23.0]]))], s2(24.0, s0([[25.0], [26.0]], [[27.0]]))), [s6(s3([s1(s0([[28.0], [29.0]], [[30.0]]), s0([[31.0], [32.0]], [[33.0]])), s1(s0([[34.0], [35.0]], [[36.0]]), s0([[37.0], [38.0]], [[39.0]])), s1(s0([[40.0], [41.0]], [[42.0]]), s0([[43.0], [44.0]], [[45.0]]))], s2(46.0, s0([[47.0], [48.0]], [[49.0]]))), [s2(50.0, s0([[51.0], [52.0]], [[53.0]])), s2(54.0, s0([[55.0], [56.0]], [[57.0]]))])], s7([58.0], [[s4([s2(59.0, s0([[60.0], [61.0]], [[62.0]])), s2(63.0, s0([[64.0], [65.0]], [[66.0]])), s2(67.0, s0([[68.0], [69.0]], [[70.0]]))], [s1(s0([[71.0], [72.0]], [[73.0]]), s0([[74.0], [75.0]], [[76.0]])), s1(s0([[77.0], [78.0]], [[79.0]]), s0([[80.0], [81.0]], [[82.0]]))])]], s3([s1(s0([[83.0], [84.0]], [[85.0]]), s0([[86.0], [87.0]], [[88.0]])), s1(s0([[89.0], [90.0]], [[91.0]]), s0([[92.0], [93.0]], [[94.0]])), s1(s0([[95.0], [96.0]], [[97.0]]), s0([[98.0], [99.0]], [[100.0]]))], s2(101.0, s0([[102.0], [103.0]], [[104.0]]))))), s3([s1(s0([[105.0], [106.0]], [[107.0]]), s0([[108.0], [109.0]], [[110.0]])), s1(s0([[111.0], [112.0]], [[113.0]]), s0([[114.0], [115.0]], [[116.0]])), s1(s0([[117.0], [118.0]], [[119.0]]), s0([[120.0], [121.0]], [[122.0]]))], s2(123.0, s0([[124.0], [125.0]], [[126.0]]))))] in
    let v1: s8 = s8(s1(s0([[127.0], [128.0]], [[129.0]]), s0([[130.0], [131.0]], [[132.0]])), s3([s1(s0([[133.0], [134.0]], [[135.0]]), s0([[136.0], [137.0]], [[138.0]])), s1(s0([[139.0], [140.0]], [[141.0]]), s0([[142.0], [143.0]], [[144.0]])), s1(s0([[145.0], [146.0]], [[147.0]]), s0([[148.0], [149.0]], [[150.0]]))], s2(151.0, s0([[152.0], [153.0]], [[154.0]]))), [s6(s3([s1(s0([[155.0], [156.0]], [[157.0]]), s0([[158.0], [159.0]], [[160.0]])), s1(s0([[161.0], [162.0]], [[163.0]]), s0([[164.0], [165.0]], [[166.0]])), s1(s0([[167.0], [168.0]], [[169.0]]), s0([[170.0], [171.0]], [[172.0]]))], s2(173.0, s0([[174.0], [175.0]], [[176.0]]))), [s2(177.0, s0([[178.0], [179.0]], [[180.0]])), s2(181.0, s0([[182.0], [183.0]], [[184.0]]))])], s7([185.0], [[s4([s2(186.0, s0([[187.0], [188.0]], [[189.0]])), s2(190.0, s0([[191.0], [192.0]], [[193.0]])), s2(194.0, s0([[195.0], [196.0]], [[197.0]]))], [s1(s0([[198.0], [199.0]], [[200.0]]), s0([[201.0], [202.0]], [[203.0]])), s1(s0([[204.0], [205.0]], [[206.0]]), s0([[207.0], [208.0]], [[209.0]]))])]], s3([s1(s0([[210.0], [211.0]], [[212.0]]), s0([[213.0], [214.0]], [[215.0]])), s1(s0([[216.0], [217.0]], [[218.0]]), s0([[219.0], [220.0]], [[221.0]])), s1(s0([[222.0], [223.0]], [[224.0]]), s0([[225.0], [226.0]], [[227.0]]))], s2(228.0, s0([[229.0], [230.0]], [[231.0]]))))) in
    let v2: Float = 232.0 in
    let initialResult: Float = 232.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()