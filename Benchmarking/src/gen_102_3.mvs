  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s2 {
    var p0: [s0]
    var p1: Float
  } in
  let noinline_f0: ([s2], Float) -> Float = (v0: [s2], v1: Float) -> Float {
    var v7: Float = v1 in
    let v5: [Float] = [v1, v7, v1, v1] in
    var v8: Float = v1 in
    let v11: Float = v5[0] in
    let v45: s2 = v0[0] in
    let v40: [[Float]] = [v5, v5, v5] in
    let v48: Float = v45.p1 in
    v7 = v11 in
    let v81: Float = v48 / v8 in
    v7 = v81 in
    let v114: [Float] = v40[2] in
    let v124: Float = v114[0] in
    v124
  } in
  fun loop(i: Int, v0: [s2], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2([s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]), s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]]), s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]])], 15.0)] in
    let v1: Float = 16.0 in
    let initialResult: Float = 16.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()