  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let f27: (s0) -> s0 = (v0: s0) -> s0 {
    let v5: [s0] = [v0, v0, v0, v0, v0] in
    let v3: s0 = v5[4] in
    var v2: s0 = v3 in
    let v1: s0 = v5[0] in
    let v10: [[Float]] = v1.p1 in
    v2.p1 = v10 in
    var v9: [[Float]] = v10 in
    v2.p1 = v9 in
    v2
  } in
  let f26: (s0, s0) -> s0 = (v0: s0, v1: s0) -> s0 {
    let v3: s0 = f27(v1) in
    let v4: [[Float]] = v1.p1 in
    let v7: [Float] = v4[1] in
    var v6: [[Float]] = v4 in
    let v5: s0 = f27(v3) in
    v6[1] = v7 in
    var v17: s0 = v5 in
    v17.p1 = v4 in
    let v25: [[Float]] = v5.p1 in
    var v16: [[Float]] = v6 in
    v17.p1 = v16 in
    let v73: s0 = f27(v17) in
    v17.p1 = v25 in
    v73
  } in
  let noinline_f0: ([s0], Float) -> Float = (v0: [s0], v1: Float) -> Float {
    let v4: s0 = v0[0] in
    let v3: s0 = v0[0] in
    let v6: [[Float]] = v4.p1 in
    let v9: [[Float]] = v3.p1 in
    let v13: s0 = v0[0] in
    let v11: s0 = f26(v13, v4) in
    let v23: [[Float]] = v11.p1 in
    var v19: [[Float]] = v23 in
    let v30: [[Float]] = v3.p0 in
    var v35: [[Float]] = v23 in
    v35 = v6 in
    v19 = v35 in
    let v21: [Float] = v30[0] in
    v19[0] = v21 in
    v19[0] = v21 in
    v19[0] = v21 in
    let v86: [Float] = v19[1] in
    v35 = v9 in
    let v54: [Float] = v6[1] in
    let v53: Float = v21[0] in
    let v66: Float = v86[0] in
    let v87: Float = v53 * v66 in
    var v62: [Float] = v54 in
    v19[1] = v62 in
    v87
  } in
  fun loop(i: Int, v0: [s0], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0]], [[1.0], [2.0]])] in
    let v1: Float = 3.0 in
    let initialResult: Float = 3.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()