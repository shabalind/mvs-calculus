  struct s0 {
    var p0: Float
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s2 {
    var p0: [s1]
    var p1: [s0]
  } in
  struct s3 {
    var p0: [[s1]]
    var p1: [[s0]]
  } in
  let noinline_f0: ([s3], [s2], Float) -> Float = (v0: [s3], v1: [s2], v2: Float) -> Float {
    let v6: s3 = v0[0] in
    let v17: [[s1]] = v6.p0 in
    let v8: [s1] = v17[0] in
    let v15: s3 = v0[0] in
    let v18: [[s0]] = v15.p1 in
    let v27: [s0] = v18[0] in
    let v32: s1 = v8[0] in
    var v43: [s0] = v27 in
    let v61: s0 = v43[0] in
    let v96: [s0] = v32.p1 in
    v43[0] = v61 in
    var v98: [s0] = v96 in
    let v51: s0 = v98[0] in
    let v113: [[Float]] = v51.p1 in
    let v75: [Float] = v113[1] in
    v98 = v43 in
    let v165: Float = v75[0] in
    v165
  } in
  fun loop(i: Int, v0: [s3], v1: [s2], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s3] = [s3([[s1([s0(0.0, [[1.0], [2.0]]), s0(3.0, [[4.0], [5.0]])], [s0(6.0, [[7.0], [8.0]])])]], [[s0(9.0, [[10.0], [11.0]])], [s0(12.0, [[13.0], [14.0]])]])] in
    let v1: [s2] = [s2([s1([s0(15.0, [[16.0], [17.0]]), s0(18.0, [[19.0], [20.0]])], [s0(21.0, [[22.0], [23.0]])])], [s0(24.0, [[25.0], [26.0]]), s0(27.0, [[28.0], [29.0]])]), s2([s1([s0(30.0, [[31.0], [32.0]]), s0(33.0, [[34.0], [35.0]])], [s0(36.0, [[37.0], [38.0]])])], [s0(39.0, [[40.0], [41.0]]), s0(42.0, [[43.0], [44.0]])])] in
    let v2: Float = 45.0 in
    let initialResult: Float = 45.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()