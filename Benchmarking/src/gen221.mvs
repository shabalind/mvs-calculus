  struct s0 {
    var p0: Float
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s0
    var p1: s1
  } in
  struct s3 {
    var p0: [s1]
    var p1: s1
    var p2: s1
  } in
  struct s4 {
    var p0: s1
    var p1: s1
  } in
  struct s5 {
    var p0: s3
    var p1: [s4]
    var p2: s0
  } in
  struct s6 {
    var p0: [[s5]]
    var p1: [s4]
  } in
  struct s7 {
    var p0: [[s6]]
    var p1: [s4]
    var p2: [s0]
    var p3: [[s2]]
    var p4: [[s5]]
  } in
  struct s8 {
    var p0: [[s5]]
    var p1: s5
  } in
  let f69: (Float) -> Float = (v0: Float) -> Float {
    var v3: Float = v0 in
    var v1: Float = v3 in
    let v4: Float = v0 - v3 in
    var v2: Float = v1 in
    let v7: Float = v4 / v0 in
    var v5: Float = v4 in
    var v24: Float = v2 in
    var v14: Float = v3 in
    v2 = v0 in
    var v8: Float = v14 in
    var v20: Float = v5 in
    var v13: Float = v20 in
    let v22: Float = v20 + v13 in
    var v15: Float = v7 in
    var v18: Float = v24 in
    var v28: Float = v15 in
    var v27: Float = v0 in
    var v17: Float = v24 in
    var v16: Float = v5 in
    let v10: [Float] = [v8, v18, v22, v17] in
    let v61: [Float] = [v27] in
    let v30: [[Float]] = [v61] in
    var v40: [Float] = v10 in
    var v41: [Float] = v61 in
    var v58: [Float] = v40 in
    let v31: s0 = s0(v16, v30) in
    var v76: [[Float]] = v30 in
    v76[0] = v41 in
    let v110: [[Float]] = v31.p1 in
    let v46: [Float] = v110[0] in
    var v95: Float = v3 in
    let v102: Float = v58[1] in
    let v81: [[Float]] = v31.p1 in
    let v112: [Float] = v76[0] in
    v40 = v10 in
    var v94: [[Float]] = v81 in
    var v173: s0 = v31 in
    v173.p0 = v5 in
    var v84: [Float] = v112 in
    let v86: Float = v46[0] in
    v58[2] = v20 in
    let v77: [[Float]] = v173.p1 in
    v173.p1 = v94 in
    let v75: Float = v173.p0 in
    v84[0] = v75 in
    v58[2] = v86 in
    var v140: s0 = v31 in
    v140.p1 = v77 in
    v140.p1 = v76 in
    v41[0] = v28 in
    v94 = v81 in
    v76[0] = v84 in
    v140.p0 = v102 in
    v41[0] = v95 in
    v40[3] = v95 in
    v41[0] = v2 in
    let v330: Float = v140.p0 in
    v330
  } in
  let f53: (Float, s7, s3) -> Float = (v0: Float, v1: s7, v2: s3) -> Float {
    let v26: Float = f69(v0) in
    var v131: Float = v26 in
    let v86: Float = f69(v131) in
    let v79: Float = f69(v86) in
    let v95: Float = f69(v86) in
    let v81: Float = f69(v95) in
    let v107: [Float] = [v81, v79, v79, v0, v26, v86, v0] in
    let v103: Float = v107[1] in
    v103
  } in
  let f51: (s7, s5) -> s7 = (v0: s7, v1: s5) -> s7 {
    var v4: s7 = v0 in
    var v12: s7 = v4 in
    var v30: s7 = v12 in
    v30
  } in
  let noinline_f0: (s1, s5, s8, s7, s8, s0, [s0], Float) -> Float = (v0: s1, v1: s5, v2: s8, v3: s7, v4: s8, v5: s0, v6: [s0], v7: Float) -> Float {
    var v18: s7 = v3 in
    var v24: Float = v7 in
    let v17: s0 = v1.p2 in
    let v46: Float = v17.p0 in
    let v93: s7 = f51(v18, v1) in
    let v37: Float = v24 - v7 in
    let v66: s3 = v1.p0 in
    let v33: Float = f53(v24, v93, v66) in
    let v169: Float = v33 + v37 in
    let v87: Float = v7 * v169 in
    let v110: Float = v87 * v46 in
    v24 = v37 in
    v18 = v3 in
    v110
  } in
  fun loop(i: Int, v0: s1, v1: s5, v2: s8, v3: s7, v4: s8, v5: s0, v6: [s0], v7: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4, v5, v6, v7) in
      loop(i + 1, v0, v1, v2, v3, v4, v5, v6, v7, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1(s0(0.0, [[1.0]]), s0(2.0, [[3.0]])) in
    let v1: s5 = s5(s3([s1(s0(4.0, [[5.0]]), s0(6.0, [[7.0]])), s1(s0(8.0, [[9.0]]), s0(10.0, [[11.0]]))], s1(s0(12.0, [[13.0]]), s0(14.0, [[15.0]])), s1(s0(16.0, [[17.0]]), s0(18.0, [[19.0]]))), [s4(s1(s0(20.0, [[21.0]]), s0(22.0, [[23.0]])), s1(s0(24.0, [[25.0]]), s0(26.0, [[27.0]])))], s0(28.0, [[29.0]])) in
    let v2: s8 = s8([[s5(s3([s1(s0(30.0, [[31.0]]), s0(32.0, [[33.0]])), s1(s0(34.0, [[35.0]]), s0(36.0, [[37.0]]))], s1(s0(38.0, [[39.0]]), s0(40.0, [[41.0]])), s1(s0(42.0, [[43.0]]), s0(44.0, [[45.0]]))), [s4(s1(s0(46.0, [[47.0]]), s0(48.0, [[49.0]])), s1(s0(50.0, [[51.0]]), s0(52.0, [[53.0]])))], s0(54.0, [[55.0]]))]], s5(s3([s1(s0(56.0, [[57.0]]), s0(58.0, [[59.0]])), s1(s0(60.0, [[61.0]]), s0(62.0, [[63.0]]))], s1(s0(64.0, [[65.0]]), s0(66.0, [[67.0]])), s1(s0(68.0, [[69.0]]), s0(70.0, [[71.0]]))), [s4(s1(s0(72.0, [[73.0]]), s0(74.0, [[75.0]])), s1(s0(76.0, [[77.0]]), s0(78.0, [[79.0]])))], s0(80.0, [[81.0]]))) in
    let v3: s7 = s7([[s6([[s5(s3([s1(s0(82.0, [[83.0]]), s0(84.0, [[85.0]])), s1(s0(86.0, [[87.0]]), s0(88.0, [[89.0]]))], s1(s0(90.0, [[91.0]]), s0(92.0, [[93.0]])), s1(s0(94.0, [[95.0]]), s0(96.0, [[97.0]]))), [s4(s1(s0(98.0, [[99.0]]), s0(100.0, [[101.0]])), s1(s0(102.0, [[103.0]]), s0(104.0, [[105.0]])))], s0(106.0, [[107.0]]))], [s5(s3([s1(s0(108.0, [[109.0]]), s0(110.0, [[111.0]])), s1(s0(112.0, [[113.0]]), s0(114.0, [[115.0]]))], s1(s0(116.0, [[117.0]]), s0(118.0, [[119.0]])), s1(s0(120.0, [[121.0]]), s0(122.0, [[123.0]]))), [s4(s1(s0(124.0, [[125.0]]), s0(126.0, [[127.0]])), s1(s0(128.0, [[129.0]]), s0(130.0, [[131.0]])))], s0(132.0, [[133.0]]))]], [s4(s1(s0(134.0, [[135.0]]), s0(136.0, [[137.0]])), s1(s0(138.0, [[139.0]]), s0(140.0, [[141.0]])))])]], [s4(s1(s0(142.0, [[143.0]]), s0(144.0, [[145.0]])), s1(s0(146.0, [[147.0]]), s0(148.0, [[149.0]]))), s4(s1(s0(150.0, [[151.0]]), s0(152.0, [[153.0]])), s1(s0(154.0, [[155.0]]), s0(156.0, [[157.0]]))), s4(s1(s0(158.0, [[159.0]]), s0(160.0, [[161.0]])), s1(s0(162.0, [[163.0]]), s0(164.0, [[165.0]])))], [s0(166.0, [[167.0]]), s0(168.0, [[169.0]]), s0(170.0, [[171.0]])], [[s2(s0(172.0, [[173.0]]), s1(s0(174.0, [[175.0]]), s0(176.0, [[177.0]])))], [s2(s0(178.0, [[179.0]]), s1(s0(180.0, [[181.0]]), s0(182.0, [[183.0]])))], [s2(s0(184.0, [[185.0]]), s1(s0(186.0, [[187.0]]), s0(188.0, [[189.0]])))]], [[s5(s3([s1(s0(190.0, [[191.0]]), s0(192.0, [[193.0]])), s1(s0(194.0, [[195.0]]), s0(196.0, [[197.0]]))], s1(s0(198.0, [[199.0]]), s0(200.0, [[201.0]])), s1(s0(202.0, [[203.0]]), s0(204.0, [[205.0]]))), [s4(s1(s0(206.0, [[207.0]]), s0(208.0, [[209.0]])), s1(s0(210.0, [[211.0]]), s0(212.0, [[213.0]])))], s0(214.0, [[215.0]]))], [s5(s3([s1(s0(216.0, [[217.0]]), s0(218.0, [[219.0]])), s1(s0(220.0, [[221.0]]), s0(222.0, [[223.0]]))], s1(s0(224.0, [[225.0]]), s0(226.0, [[227.0]])), s1(s0(228.0, [[229.0]]), s0(230.0, [[231.0]]))), [s4(s1(s0(232.0, [[233.0]]), s0(234.0, [[235.0]])), s1(s0(236.0, [[237.0]]), s0(238.0, [[239.0]])))], s0(240.0, [[241.0]]))]]) in
    let v4: s8 = s8([[s5(s3([s1(s0(242.0, [[243.0]]), s0(244.0, [[245.0]])), s1(s0(246.0, [[247.0]]), s0(248.0, [[249.0]]))], s1(s0(250.0, [[251.0]]), s0(252.0, [[253.0]])), s1(s0(254.0, [[255.0]]), s0(256.0, [[257.0]]))), [s4(s1(s0(258.0, [[259.0]]), s0(260.0, [[261.0]])), s1(s0(262.0, [[263.0]]), s0(264.0, [[265.0]])))], s0(266.0, [[267.0]]))]], s5(s3([s1(s0(268.0, [[269.0]]), s0(270.0, [[271.0]])), s1(s0(272.0, [[273.0]]), s0(274.0, [[275.0]]))], s1(s0(276.0, [[277.0]]), s0(278.0, [[279.0]])), s1(s0(280.0, [[281.0]]), s0(282.0, [[283.0]]))), [s4(s1(s0(284.0, [[285.0]]), s0(286.0, [[287.0]])), s1(s0(288.0, [[289.0]]), s0(290.0, [[291.0]])))], s0(292.0, [[293.0]]))) in
    let v5: s0 = s0(294.0, [[295.0]]) in
    let v6: [s0] = [s0(296.0, [[297.0]]), s0(298.0, [[299.0]])] in
    let v7: Float = 300.0 in
    let initialResult: Float = 300.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, v5, v6, v7, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()