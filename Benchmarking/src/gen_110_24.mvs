  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let f103: (s0) -> s0 = (v0: s0) -> s0 {
    var v7: s0 = v0 in
    let v3: [[Float]] = v7.p1 in
    let v4: [[Float]] = v0.p0 in
    v7.p0 = v4 in
    let v11: [[Float]] = v0.p0 in
    let v1: [[Float]] = v7.p1 in
    v7.p1 = v3 in
    v7.p0 = v11 in
    let v6: s0 = s0(v4, v1) in
    v7 = v6 in
    v6
  } in
  let noinline_f0: (s0, Float) -> Float = (v0: s0, v1: Float) -> Float {
    let v3: s0 = f103(v0) in
    let v6: [[Float]] = v3.p0 in
    let v11: [[Float]] = v0.p1 in
    let v31: s0 = s0(v6, v11) in
    let v13: [[Float]] = v31.p1 in
    let v12: [Float] = v13[0] in
    let v40: Float = v12[0] in
    v40
  } in
  fun loop(i: Int, v0: s0, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0]], [[1.0], [2.0]]) in
    let v1: Float = 3.0 in
    let initialResult: Float = 3.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()