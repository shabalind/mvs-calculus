  struct s0 {
    var p0: [Float]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
  } in
  struct s3 {
    var p0: s1
    var p1: Float
  } in
  struct s4 {
    var p0: s3
    var p1: s1
  } in
  let f12: (s0) -> s0 = (v0: s0) -> s0 {
    let v2: [Float] = v0.p0 in
    let v7: Float = v2[0] in
    var v4: s0 = v0 in
    v4.p0 = v2 in
    let v9: [[Float]] = v0.p1 in
    let v1: [[Float]] = v0.p1 in
    let v5: [Float] = v4.p0 in
    var v13: [[Float]] = v9 in
    v4.p0 = v5 in
    var v19: s0 = v4 in
    let v30: [Float] = v1[1] in
    v4.p1 = v13 in
    var v11: [[Float]] = v9 in
    v19.p1 = v13 in
    let v17: [Float] = v4.p0 in
    var v25: [[Float]] = v13 in
    let v27: [Float] = v19.p0 in
    let v22: [Float] = [v7, v7] in
    let v52: [Float] = v11[2] in
    v19.p0 = v27 in
    var v47: [Float] = v30 in
    v13[0] = v47 in
    v19.p0 = v17 in
    let v57: s0 = s0(v27, v11) in
    v19.p0 = v22 in
    v13[1] = v52 in
    v19.p1 = v25 in
    v13[0] = v30 in
    v57
  } in
  let f11: ([s0]) -> [s0] = (v0: [s0]) -> [s0] {
    var v5: [s0] = v0 in
    var v4: [s0] = v0 in
    var v2: [s0] = v5 in
    var v3: [s0] = v0 in
    var v7: [s0] = v4 in
    let v6: s0 = v3[0] in
    let v8: s0 = f12(v6) in
    v3 = v0 in
    let v1: [Float] = v8.p0 in
    let v11: [[Float]] = v6.p1 in
    let v10: s0 = v0[1] in
    let v9: s0 = f12(v6) in
    v7[1] = v8 in
    let v18: s0 = s0(v1, v11) in
    v4 = v3 in
    let v16: s0 = f12(v9) in
    let v26: [[s0]] = [v7, v7, v0, v0, v2] in
    v2[0] = v10 in
    let v41: s0 = f12(v9) in
    v7[1] = v16 in
    var v33: [[s0]] = v26 in
    let v94: [s0] = v33[4] in
    v7[0] = v41 in
    v5[0] = v18 in
    v94
  } in
  let noinline_f0: ([s1], Float) -> Float = (v0: [s1], v1: Float) -> Float {
    var v5: [s1] = v0 in
    let v4: s1 = v5[1] in
    let v7: [[s0]] = v4.p0 in
    var v11: s1 = v4 in
    let v3: [s0] = v7[0] in
    v11.p0 = v7 in
    var v9: [[s0]] = v7 in
    v11.p0 = v9 in
    v11.p0 = v9 in
    let v13: [s0] = v11.p1 in
    v9[0] = v3 in
    let v10: [s0] = f11(v13) in
    let v12: [s0] = f11(v10) in
    let v38: s0 = v3[0] in
    let v23: [[Float]] = v38.p1 in
    v5[2] = v11 in
    var v14: s0 = v38 in
    v11.p1 = v12 in
    var v25: s0 = v38 in
    var v18: [s0] = v3 in
    v25.p1 = v23 in
    var v41: [s0] = v18 in
    let v22: s0 = v41[0] in
    let v21: s0 = f12(v25) in
    v25.p1 = v23 in
    let v61: s3 = s3(v11, v1) in
    let v56: s0 = v3[0] in
    let v40: s4 = s4(v61, v4) in
    var v68: [s0] = v41 in
    v14 = v56 in
    v14.p1 = v23 in
    v14.p1 = v23 in
    let v42: [Float] = v21.p0 in
    v14.p1 = v23 in
    let v47: s3 = v40.p0 in
    v18[0] = v14 in
    v9[0] = v41 in
    v25.p0 = v42 in
    var v52: [[Float]] = v23 in
    let v130: Float = v47.p1 in
    v14.p1 = v52 in
    v68[0] = v22 in
    v14.p0 = v42 in
    v11.p1 = v13 in
    v9[1] = v68 in
    v130
  } in
  fun loop(i: Int, v0: [s1], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1([[s0([0.0, 1.0], [[2.0], [3.0], [4.0]])], [s0([5.0, 6.0], [[7.0], [8.0], [9.0]])]], [s0([10.0, 11.0], [[12.0], [13.0], [14.0]]), s0([15.0, 16.0], [[17.0], [18.0], [19.0]])]), s1([[s0([20.0, 21.0], [[22.0], [23.0], [24.0]])], [s0([25.0, 26.0], [[27.0], [28.0], [29.0]])]], [s0([30.0, 31.0], [[32.0], [33.0], [34.0]]), s0([35.0, 36.0], [[37.0], [38.0], [39.0]])]), s1([[s0([40.0, 41.0], [[42.0], [43.0], [44.0]])], [s0([45.0, 46.0], [[47.0], [48.0], [49.0]])]], [s0([50.0, 51.0], [[52.0], [53.0], [54.0]]), s0([55.0, 56.0], [[57.0], [58.0], [59.0]])])] in
    let v1: Float = 60.0 in
    let initialResult: Float = 60.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()