  struct s0 {
    var p0: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
  } in
  struct s2 {
    var p0: [s1]
    var p1: s0
  } in
  struct s3 {
    var p0: [s2]
    var p1: s0
  } in
  struct s4 {
    var p0: [s1]
    var p1: s0
  } in
  struct s9 {
    var p0: s4
    var p1: s3
  } in
  let noinline_f0: (s9, [s1], Float) -> Float = (v0: s9, v1: [s1], v2: Float) -> Float {
    var v13: Float = v2 in
    let v14: s3 = v0.p1 in
    let v11: s0 = v14.p1 in
    let v35: [[Float]] = v11.p0 in
    let v50: [Float] = v35[0] in
    var v51: [Float] = v50 in
    let v52: Float = v51[0] in
    let v62: Float = v50[0] in
    let v39: [Float] = [v52, v2, v52, v13, v62, v2, v13] in
    let v49: Float = v39[0] in
    let v161: Float = v50[0] in
    v51[0] = v161 in
    v51[0] = v49 in
    v49
  } in
  fun loop(i: Int, v0: s9, v1: [s1], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s9 = s9(s4([s1([[s0([[0.0]])]], [s0([[1.0]])]), s1([[s0([[2.0]])]], [s0([[3.0]])])], s0([[4.0]])), s3([s2([s1([[s0([[5.0]])]], [s0([[6.0]])]), s1([[s0([[7.0]])]], [s0([[8.0]])]), s1([[s0([[9.0]])]], [s0([[10.0]])])], s0([[11.0]])), s2([s1([[s0([[12.0]])]], [s0([[13.0]])]), s1([[s0([[14.0]])]], [s0([[15.0]])]), s1([[s0([[16.0]])]], [s0([[17.0]])])], s0([[18.0]])), s2([s1([[s0([[19.0]])]], [s0([[20.0]])]), s1([[s0([[21.0]])]], [s0([[22.0]])]), s1([[s0([[23.0]])]], [s0([[24.0]])])], s0([[25.0]]))], s0([[26.0]]))) in
    let v1: [s1] = [s1([[s0([[27.0]])]], [s0([[28.0]])])] in
    let v2: Float = 29.0 in
    let initialResult: Float = 29.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()