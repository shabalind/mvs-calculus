  let noinline_f0: ([Float], Float) -> Float = (v0: [Float], v1: Float) -> Float {
    let v4: Float = v0[2] in
    let v3: [Float] = [v1, v4] in
    let v2: Float = v3[0] in
    let v15: Float = v3[0] in
    var v11: Float = v4 in
    var v6: Float = v2 in
    let v26: Float = v0[2] in
    let v23: Float = v11 - v11 in
    let v18: Float = v23 * v1 in
    var v21: Float = v6 in
    let v27: [Float] = [v18, v21, v1, v26, v15, v26] in
    let v69: Float = v27[5] in
    v69
  } in
  fun loop(i: Int, v0: [Float], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [Float] = [0.0, 1.0, 2.0] in
    let v1: Float = 3.0 in
    let initialResult: Float = 3.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()