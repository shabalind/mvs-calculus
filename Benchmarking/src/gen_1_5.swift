  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
  }
  struct s2 {
    var p0: s0
    var p1: [s0]
    var p2: [[s0]]
  }
  struct s4 {
    var p0: [[s2]]
    var p1: [[s0]]
  }
  @inline(never)
  func f0(_ v0: [s4], _ v1: Double) -> Double {
    let v7: s4 = v0[0]
    let v4: [[s0]] = v7.p1
    let v14: Double = v1 / v1
    let v10: [s0] = v4[0]
    let v15: s0 = v10[0]
    let v43: [[Double]] = v15.p3
    let v69: Double = v1 - v14
    let v31: [Double] = v43[0]
    let v96: Double = v31[0]
    let v57: [Double] = [v69, v1, v14, v69, v96, v96]
    let v127: Double = v57[0]
    var v117: [Double] = v57
    v117[0] = v127
    let v210: Double = v117[1]
    return v210
  }
  func benchmark() {
    let v0: [s4] = [s4(p0: [[s2(p0: s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0], [5.0]], p2: [[6.0], [7.0], [8.0]], p3: [[9.0], [10.0], [11.0]]), p1: [s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0], [16.0], [17.0]], p2: [[18.0], [19.0], [20.0]], p3: [[21.0], [22.0], [23.0]]), s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0], [28.0], [29.0]], p2: [[30.0], [31.0], [32.0]], p3: [[33.0], [34.0], [35.0]])], p2: [[s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0], [40.0], [41.0]], p2: [[42.0], [43.0], [44.0]], p3: [[45.0], [46.0], [47.0]])], [s0(p0: [[48.0], [49.0], [50.0]], p1: [[51.0], [52.0], [53.0]], p2: [[54.0], [55.0], [56.0]], p3: [[57.0], [58.0], [59.0]])]])], [s2(p0: s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0], [64.0], [65.0]], p2: [[66.0], [67.0], [68.0]], p3: [[69.0], [70.0], [71.0]]), p1: [s0(p0: [[72.0], [73.0], [74.0]], p1: [[75.0], [76.0], [77.0]], p2: [[78.0], [79.0], [80.0]], p3: [[81.0], [82.0], [83.0]]), s0(p0: [[84.0], [85.0], [86.0]], p1: [[87.0], [88.0], [89.0]], p2: [[90.0], [91.0], [92.0]], p3: [[93.0], [94.0], [95.0]])], p2: [[s0(p0: [[96.0], [97.0], [98.0]], p1: [[99.0], [100.0], [101.0]], p2: [[102.0], [103.0], [104.0]], p3: [[105.0], [106.0], [107.0]])], [s0(p0: [[108.0], [109.0], [110.0]], p1: [[111.0], [112.0], [113.0]], p2: [[114.0], [115.0], [116.0]], p3: [[117.0], [118.0], [119.0]])]])], [s2(p0: s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0], [124.0], [125.0]], p2: [[126.0], [127.0], [128.0]], p3: [[129.0], [130.0], [131.0]]), p1: [s0(p0: [[132.0], [133.0], [134.0]], p1: [[135.0], [136.0], [137.0]], p2: [[138.0], [139.0], [140.0]], p3: [[141.0], [142.0], [143.0]]), s0(p0: [[144.0], [145.0], [146.0]], p1: [[147.0], [148.0], [149.0]], p2: [[150.0], [151.0], [152.0]], p3: [[153.0], [154.0], [155.0]])], p2: [[s0(p0: [[156.0], [157.0], [158.0]], p1: [[159.0], [160.0], [161.0]], p2: [[162.0], [163.0], [164.0]], p3: [[165.0], [166.0], [167.0]])], [s0(p0: [[168.0], [169.0], [170.0]], p1: [[171.0], [172.0], [173.0]], p2: [[174.0], [175.0], [176.0]], p3: [[177.0], [178.0], [179.0]])]])]], p1: [[s0(p0: [[180.0], [181.0], [182.0]], p1: [[183.0], [184.0], [185.0]], p2: [[186.0], [187.0], [188.0]], p3: [[189.0], [190.0], [191.0]])]])]
    let v1: Double = 192.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 192.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
