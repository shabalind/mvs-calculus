  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: [[Float]]
    var p1: s0
  } in
  struct s2 {
    var p0: s1
    var p1: s0
  } in
  let noinline_f0: ([[s2]], Float) -> Float = (v0: [[s2]], v1: Float) -> Float {
    let v3: [s2] = v0[0] in
    let v5: s2 = v3[0] in
    let v10: s0 = v5.p1 in
    let v2: [[Float]] = v10.p0 in
    var v18: [[Float]] = v2 in
    let v25: [Float] = v18[0] in
    let v35: Float = v25[0] in
    v18[1] = v25 in
    let v43: Float = v25[0] in
    let v100: Float = v43 + v35 in
    let v92: Float = v35 + v100 in
    v92
  } in
  fun loop(i: Int, v0: [[s2]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s2]] = [[s2(s1([[0.0]], s0([[1.0], [2.0], [3.0]], [[4.0]], [[5.0]])), s0([[6.0], [7.0], [8.0]], [[9.0]], [[10.0]]))], [s2(s1([[11.0]], s0([[12.0], [13.0], [14.0]], [[15.0]], [[16.0]])), s0([[17.0], [18.0], [19.0]], [[20.0]], [[21.0]]))]] in
    let v1: Float = 22.0 in
    let initialResult: Float = 22.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()