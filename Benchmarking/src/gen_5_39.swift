  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
  }
  struct s2 {
    var p0: s0
    var p1: [s1]
  }
  struct s3 {
    var p0: [Double]
    var p1: [s1]
    var p2: s2
  }
  struct s4 {
    var p0: s3
    var p1: s3
  }
  struct s6 {
    var p0: s2
    var p1: [[s4]]
  }
  func f59(_ v0: Double) -> Double {
    var v4: Double = v0
    var v8: Double = v4
    var v3: Double = v4
    var v2: Double = v8
    var v6: Double = v2
    let v7: Double = v2 / v8
    var v5: Double = v3
    var v11: Double = v3
    var v15: Double = v7
    let v17: Double = v2 + v11
    var v21: Double = v0
    var v29: Double = v5
    var v14: Double = v0
    var v30: Double = v4
    var v9: Double = v14
    var v44: Double = v6
    var v19: Double = v21
    let v23: Double = v5 - v21
    var v13: Double = v30
    var v16: Double = v44
    var v26: Double = v17
    v21 = v23
    let v25: [Double] = [v13, v17, v19, v19]
    var v24: [Double] = v25
    v24[0] = v29
    v24[2] = v15
    var v41: [Double] = v24
    v41[0] = v8
    var v51: [Double] = v41
    v8 = v16
    v41[2] = v26
    v51[3] = v21
    v51[0] = v23
    v51[3] = v9
    var v45: [Double] = v51
    let v48: Double = v45[1]
    return v48
  }
  @inline(never)
  func f0(_ v0: [s6], _ v1: Double) -> Double {
    var v6: Double = v1
    let v4: Double = f59(v6)
    let v5: Double = f59(v4)
    v6 = v5
    return v5
  }
  func benchmark() {
    let v0: [s6] = [s6(p0: s2(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0], [4.0]]), p1: [s1(p0: [[s0(p0: [[5.0], [6.0]], p1: [[7.0], [8.0], [9.0]])]], p1: [s0(p0: [[10.0], [11.0]], p1: [[12.0], [13.0], [14.0]]), s0(p0: [[15.0], [16.0]], p1: [[17.0], [18.0], [19.0]])])]), p1: [[s4(p0: s3(p0: [20.0, 21.0], p1: [s1(p0: [[s0(p0: [[22.0], [23.0]], p1: [[24.0], [25.0], [26.0]])]], p1: [s0(p0: [[27.0], [28.0]], p1: [[29.0], [30.0], [31.0]]), s0(p0: [[32.0], [33.0]], p1: [[34.0], [35.0], [36.0]])])], p2: s2(p0: s0(p0: [[37.0], [38.0]], p1: [[39.0], [40.0], [41.0]]), p1: [s1(p0: [[s0(p0: [[42.0], [43.0]], p1: [[44.0], [45.0], [46.0]])]], p1: [s0(p0: [[47.0], [48.0]], p1: [[49.0], [50.0], [51.0]]), s0(p0: [[52.0], [53.0]], p1: [[54.0], [55.0], [56.0]])])])), p1: s3(p0: [57.0, 58.0], p1: [s1(p0: [[s0(p0: [[59.0], [60.0]], p1: [[61.0], [62.0], [63.0]])]], p1: [s0(p0: [[64.0], [65.0]], p1: [[66.0], [67.0], [68.0]]), s0(p0: [[69.0], [70.0]], p1: [[71.0], [72.0], [73.0]])])], p2: s2(p0: s0(p0: [[74.0], [75.0]], p1: [[76.0], [77.0], [78.0]]), p1: [s1(p0: [[s0(p0: [[79.0], [80.0]], p1: [[81.0], [82.0], [83.0]])]], p1: [s0(p0: [[84.0], [85.0]], p1: [[86.0], [87.0], [88.0]]), s0(p0: [[89.0], [90.0]], p1: [[91.0], [92.0], [93.0]])])])))], [s4(p0: s3(p0: [94.0, 95.0], p1: [s1(p0: [[s0(p0: [[96.0], [97.0]], p1: [[98.0], [99.0], [100.0]])]], p1: [s0(p0: [[101.0], [102.0]], p1: [[103.0], [104.0], [105.0]]), s0(p0: [[106.0], [107.0]], p1: [[108.0], [109.0], [110.0]])])], p2: s2(p0: s0(p0: [[111.0], [112.0]], p1: [[113.0], [114.0], [115.0]]), p1: [s1(p0: [[s0(p0: [[116.0], [117.0]], p1: [[118.0], [119.0], [120.0]])]], p1: [s0(p0: [[121.0], [122.0]], p1: [[123.0], [124.0], [125.0]]), s0(p0: [[126.0], [127.0]], p1: [[128.0], [129.0], [130.0]])])])), p1: s3(p0: [131.0, 132.0], p1: [s1(p0: [[s0(p0: [[133.0], [134.0]], p1: [[135.0], [136.0], [137.0]])]], p1: [s0(p0: [[138.0], [139.0]], p1: [[140.0], [141.0], [142.0]]), s0(p0: [[143.0], [144.0]], p1: [[145.0], [146.0], [147.0]])])], p2: s2(p0: s0(p0: [[148.0], [149.0]], p1: [[150.0], [151.0], [152.0]]), p1: [s1(p0: [[s0(p0: [[153.0], [154.0]], p1: [[155.0], [156.0], [157.0]])]], p1: [s0(p0: [[158.0], [159.0]], p1: [[160.0], [161.0], [162.0]]), s0(p0: [[163.0], [164.0]], p1: [[165.0], [166.0], [167.0]])])])))]]), s6(p0: s2(p0: s0(p0: [[168.0], [169.0]], p1: [[170.0], [171.0], [172.0]]), p1: [s1(p0: [[s0(p0: [[173.0], [174.0]], p1: [[175.0], [176.0], [177.0]])]], p1: [s0(p0: [[178.0], [179.0]], p1: [[180.0], [181.0], [182.0]]), s0(p0: [[183.0], [184.0]], p1: [[185.0], [186.0], [187.0]])])]), p1: [[s4(p0: s3(p0: [188.0, 189.0], p1: [s1(p0: [[s0(p0: [[190.0], [191.0]], p1: [[192.0], [193.0], [194.0]])]], p1: [s0(p0: [[195.0], [196.0]], p1: [[197.0], [198.0], [199.0]]), s0(p0: [[200.0], [201.0]], p1: [[202.0], [203.0], [204.0]])])], p2: s2(p0: s0(p0: [[205.0], [206.0]], p1: [[207.0], [208.0], [209.0]]), p1: [s1(p0: [[s0(p0: [[210.0], [211.0]], p1: [[212.0], [213.0], [214.0]])]], p1: [s0(p0: [[215.0], [216.0]], p1: [[217.0], [218.0], [219.0]]), s0(p0: [[220.0], [221.0]], p1: [[222.0], [223.0], [224.0]])])])), p1: s3(p0: [225.0, 226.0], p1: [s1(p0: [[s0(p0: [[227.0], [228.0]], p1: [[229.0], [230.0], [231.0]])]], p1: [s0(p0: [[232.0], [233.0]], p1: [[234.0], [235.0], [236.0]]), s0(p0: [[237.0], [238.0]], p1: [[239.0], [240.0], [241.0]])])], p2: s2(p0: s0(p0: [[242.0], [243.0]], p1: [[244.0], [245.0], [246.0]]), p1: [s1(p0: [[s0(p0: [[247.0], [248.0]], p1: [[249.0], [250.0], [251.0]])]], p1: [s0(p0: [[252.0], [253.0]], p1: [[254.0], [255.0], [256.0]]), s0(p0: [[257.0], [258.0]], p1: [[259.0], [260.0], [261.0]])])])))], [s4(p0: s3(p0: [262.0, 263.0], p1: [s1(p0: [[s0(p0: [[264.0], [265.0]], p1: [[266.0], [267.0], [268.0]])]], p1: [s0(p0: [[269.0], [270.0]], p1: [[271.0], [272.0], [273.0]]), s0(p0: [[274.0], [275.0]], p1: [[276.0], [277.0], [278.0]])])], p2: s2(p0: s0(p0: [[279.0], [280.0]], p1: [[281.0], [282.0], [283.0]]), p1: [s1(p0: [[s0(p0: [[284.0], [285.0]], p1: [[286.0], [287.0], [288.0]])]], p1: [s0(p0: [[289.0], [290.0]], p1: [[291.0], [292.0], [293.0]]), s0(p0: [[294.0], [295.0]], p1: [[296.0], [297.0], [298.0]])])])), p1: s3(p0: [299.0, 300.0], p1: [s1(p0: [[s0(p0: [[301.0], [302.0]], p1: [[303.0], [304.0], [305.0]])]], p1: [s0(p0: [[306.0], [307.0]], p1: [[308.0], [309.0], [310.0]]), s0(p0: [[311.0], [312.0]], p1: [[313.0], [314.0], [315.0]])])], p2: s2(p0: s0(p0: [[316.0], [317.0]], p1: [[318.0], [319.0], [320.0]]), p1: [s1(p0: [[s0(p0: [[321.0], [322.0]], p1: [[323.0], [324.0], [325.0]])]], p1: [s0(p0: [[326.0], [327.0]], p1: [[328.0], [329.0], [330.0]]), s0(p0: [[331.0], [332.0]], p1: [[333.0], [334.0], [335.0]])])])))]])]
    let v1: Double = 336.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 336.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
