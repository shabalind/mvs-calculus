  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  let noinline_f0: ([s1], Float) -> Float = (v0: [s1], v1: Float) -> Float {
    var v4: [s1] = v0 in
    var v5: [s1] = v0 in
    let v11: s1 = v5[1] in
    let v13: s0 = v11.p1 in
    let v12: [[Float]] = v13.p0 in
    let v16: s1 = v0[0] in
    let v31: [Float] = v12[0] in
    var v33: [Float] = v31 in
    v5[1] = v16 in
    let v83: Float = v33[0] in
    v5 = v4 in
    v83
  } in
  fun loop(i: Int, v0: [s1], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1([s0([[0.0]], [[1.0]]), s0([[2.0]], [[3.0]])], s0([[4.0]], [[5.0]])), s1([s0([[6.0]], [[7.0]]), s0([[8.0]], [[9.0]])], s0([[10.0]], [[11.0]]))] in
    let v1: Float = 12.0 in
    let initialResult: Float = 12.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()