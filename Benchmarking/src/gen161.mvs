  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    var v7: Float = v1 in
    let v5: s0 = v0.p0 in
    let v2: [[Float]] = v5.p1 in
    let v9: [Float] = v2[0] in
    let v3: Float = v9[0] in
    v7 = v3 in
    var v14: Float = v3 in
    let v13: Float = v9[0] in
    let v24: Float = v14 * v7 in
    let v101: Float = v13 * v24 in
    v101
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1(s0([[0.0]], [[1.0], [2.0], [3.0]], [[4.0]]), [[s0([[5.0]], [[6.0], [7.0], [8.0]], [[9.0]])], [s0([[10.0]], [[11.0], [12.0], [13.0]], [[14.0]])]]) in
    let v1: Float = 15.0 in
    let initialResult: Float = 15.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()