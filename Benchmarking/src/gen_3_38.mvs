  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let f80: (Float) -> Float = (v0: Float) -> Float {
    var v2: Float = v0 in
    var v1: Float = v0 in
    var v4: Float = v0 in
    let v5: Float = v4 - v2 in
    var v7: Float = v1 in
    var v13: Float = v2 in
    var v8: Float = v7 in
    v13 = v5 in
    var v52: Float = v2 in
    let v34: Float = v8 - v13 in
    v2 = v52 in
    v34
  } in
  let noinline_f0: (s0, Float) -> Float = (v0: s0, v1: Float) -> Float {
    let v7: Float = f80(v1) in
    var v3: Float = v7 in
    v3 = v1 in
    v3 = v1 in
    let v179: Float = f80(v3) in
    v179
  } in
  fun loop(i: Int, v0: s0, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]) in
    let v1: Float = 5.0 in
    let initialResult: Float = 5.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()