  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s4 {
    var p0: [s0]
    var p1: s1
  } in
  struct s5 {
    var p0: s0
    var p1: [s1]
  } in
  struct s6 {
    var p0: [s4]
    var p1: [s0]
  } in
  struct s9 {
    var p0: s6
    var p1: s0
  } in
  struct s10 {
    var p0: s9
    var p1: s5
  } in
  let noinline_f0: ([[s10]], s6, Float) -> Float = (v0: [[s10]], v1: s6, v2: Float) -> Float {
    var v9: Float = v2 in
    let v8: [s0] = v1.p1 in
    let v14: s0 = v8[0] in
    let v18: [[Float]] = v14.p1 in
    let v93: [Float] = v18[0] in
    let v64: [Float] = v18[0] in
    let v66: Float = v93[0] in
    let v96: Float = v64[0] in
    var v82: [Float] = v93 in
    v82[0] = v66 in
    v82[0] = v96 in
    let v98: Float = v82[0] in
    v82[0] = v9 in
    v98
  } in
  fun loop(i: Int, v0: [[s10]], v1: s6, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s10]] = [[s10(s9(s6([s4([s0([[0.0]], [[1.0]]), s0([[2.0]], [[3.0]])], s1(s0([[4.0]], [[5.0]]), s0([[6.0]], [[7.0]])))], [s0([[8.0]], [[9.0]])]), s0([[10.0]], [[11.0]])), s5(s0([[12.0]], [[13.0]]), [s1(s0([[14.0]], [[15.0]]), s0([[16.0]], [[17.0]])), s1(s0([[18.0]], [[19.0]]), s0([[20.0]], [[21.0]]))]))]] in
    let v1: s6 = s6([s4([s0([[22.0]], [[23.0]]), s0([[24.0]], [[25.0]])], s1(s0([[26.0]], [[27.0]]), s0([[28.0]], [[29.0]])))], [s0([[30.0]], [[31.0]])]) in
    let v2: Float = 32.0 in
    let initialResult: Float = 32.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()