  import Dispatch
  struct s0 {
    var p0: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: [s0]
    var p1: s0
    var p2: s0
    var p3: s1
  }
  struct s3 {
    var p0: [[s1]]
    var p1: [s1]
    var p2: [s0]
    var p3: [s2]
    var p4: s1
  }
  struct s5 {
    var p0: [s3]
    var p1: s1
  }
  struct s6 {
    var p0: [s5]
    var p1: [s5]
  }
  struct s13 {
    var p0: s3
    var p1: [s6]
  }
  func f40(_ v0: Double) -> Double {
    var v7: Double = v0
    var v5: Double = v7
    var v9: Double = v0
    var v3: Double = v5
    var v8: Double = v9
    var v2: Double = v7
    var v14: Double = v2
    var v15: Double = v0
    let v24: Double = v3 / v14
    let v42: [Double] = [v24, v15, v24, v3, v8, v0]
    var v30: [Double] = v42
    var v16: [Double] = v42
    var v31: Double = v9
    v16[4] = v14
    let v78: Double = v30[4]
    v16[4] = v78
    var v49: [Double] = v16
    v30[3] = v78
    v16[3] = v3
    v49[1] = v31
    let v105: Double = v49[2]
    return v105
  }
  @inline(never)
  func f0(_ v0: s13, _ v1: Double) -> Double {
    var v4: Double = v1
    var v6: Double = v4
    var v16: Double = v4
    var v40: Double = v16
    let v32: Double = v6 + v1
    let v29: Double = f40(v40)
    let v42: Double = f40(v40)
    let v46: Double = v32 / v42
    let v91: Double = f40(v29)
    v4 = v46
    return v91
  }
  func benchmark() {
    let v0: s13 = s13(p0: s3(p0: [[s1(p0: s0(p0: [[0.0]]), p1: [s0(p0: [[1.0]])])]], p1: [s1(p0: s0(p0: [[2.0]]), p1: [s0(p0: [[3.0]])])], p2: [s0(p0: [[4.0]])], p3: [s2(p0: [s0(p0: [[5.0]]), s0(p0: [[6.0]]), s0(p0: [[7.0]])], p1: s0(p0: [[8.0]]), p2: s0(p0: [[9.0]]), p3: s1(p0: s0(p0: [[10.0]]), p1: [s0(p0: [[11.0]])])), s2(p0: [s0(p0: [[12.0]]), s0(p0: [[13.0]]), s0(p0: [[14.0]])], p1: s0(p0: [[15.0]]), p2: s0(p0: [[16.0]]), p3: s1(p0: s0(p0: [[17.0]]), p1: [s0(p0: [[18.0]])]))], p4: s1(p0: s0(p0: [[19.0]]), p1: [s0(p0: [[20.0]])])), p1: [s6(p0: [s5(p0: [s3(p0: [[s1(p0: s0(p0: [[21.0]]), p1: [s0(p0: [[22.0]])])]], p1: [s1(p0: s0(p0: [[23.0]]), p1: [s0(p0: [[24.0]])])], p2: [s0(p0: [[25.0]])], p3: [s2(p0: [s0(p0: [[26.0]]), s0(p0: [[27.0]]), s0(p0: [[28.0]])], p1: s0(p0: [[29.0]]), p2: s0(p0: [[30.0]]), p3: s1(p0: s0(p0: [[31.0]]), p1: [s0(p0: [[32.0]])])), s2(p0: [s0(p0: [[33.0]]), s0(p0: [[34.0]]), s0(p0: [[35.0]])], p1: s0(p0: [[36.0]]), p2: s0(p0: [[37.0]]), p3: s1(p0: s0(p0: [[38.0]]), p1: [s0(p0: [[39.0]])]))], p4: s1(p0: s0(p0: [[40.0]]), p1: [s0(p0: [[41.0]])]))], p1: s1(p0: s0(p0: [[42.0]]), p1: [s0(p0: [[43.0]])])), s5(p0: [s3(p0: [[s1(p0: s0(p0: [[44.0]]), p1: [s0(p0: [[45.0]])])]], p1: [s1(p0: s0(p0: [[46.0]]), p1: [s0(p0: [[47.0]])])], p2: [s0(p0: [[48.0]])], p3: [s2(p0: [s0(p0: [[49.0]]), s0(p0: [[50.0]]), s0(p0: [[51.0]])], p1: s0(p0: [[52.0]]), p2: s0(p0: [[53.0]]), p3: s1(p0: s0(p0: [[54.0]]), p1: [s0(p0: [[55.0]])])), s2(p0: [s0(p0: [[56.0]]), s0(p0: [[57.0]]), s0(p0: [[58.0]])], p1: s0(p0: [[59.0]]), p2: s0(p0: [[60.0]]), p3: s1(p0: s0(p0: [[61.0]]), p1: [s0(p0: [[62.0]])]))], p4: s1(p0: s0(p0: [[63.0]]), p1: [s0(p0: [[64.0]])]))], p1: s1(p0: s0(p0: [[65.0]]), p1: [s0(p0: [[66.0]])])), s5(p0: [s3(p0: [[s1(p0: s0(p0: [[67.0]]), p1: [s0(p0: [[68.0]])])]], p1: [s1(p0: s0(p0: [[69.0]]), p1: [s0(p0: [[70.0]])])], p2: [s0(p0: [[71.0]])], p3: [s2(p0: [s0(p0: [[72.0]]), s0(p0: [[73.0]]), s0(p0: [[74.0]])], p1: s0(p0: [[75.0]]), p2: s0(p0: [[76.0]]), p3: s1(p0: s0(p0: [[77.0]]), p1: [s0(p0: [[78.0]])])), s2(p0: [s0(p0: [[79.0]]), s0(p0: [[80.0]]), s0(p0: [[81.0]])], p1: s0(p0: [[82.0]]), p2: s0(p0: [[83.0]]), p3: s1(p0: s0(p0: [[84.0]]), p1: [s0(p0: [[85.0]])]))], p4: s1(p0: s0(p0: [[86.0]]), p1: [s0(p0: [[87.0]])]))], p1: s1(p0: s0(p0: [[88.0]]), p1: [s0(p0: [[89.0]])]))], p1: [s5(p0: [s3(p0: [[s1(p0: s0(p0: [[90.0]]), p1: [s0(p0: [[91.0]])])]], p1: [s1(p0: s0(p0: [[92.0]]), p1: [s0(p0: [[93.0]])])], p2: [s0(p0: [[94.0]])], p3: [s2(p0: [s0(p0: [[95.0]]), s0(p0: [[96.0]]), s0(p0: [[97.0]])], p1: s0(p0: [[98.0]]), p2: s0(p0: [[99.0]]), p3: s1(p0: s0(p0: [[100.0]]), p1: [s0(p0: [[101.0]])])), s2(p0: [s0(p0: [[102.0]]), s0(p0: [[103.0]]), s0(p0: [[104.0]])], p1: s0(p0: [[105.0]]), p2: s0(p0: [[106.0]]), p3: s1(p0: s0(p0: [[107.0]]), p1: [s0(p0: [[108.0]])]))], p4: s1(p0: s0(p0: [[109.0]]), p1: [s0(p0: [[110.0]])]))], p1: s1(p0: s0(p0: [[111.0]]), p1: [s0(p0: [[112.0]])])), s5(p0: [s3(p0: [[s1(p0: s0(p0: [[113.0]]), p1: [s0(p0: [[114.0]])])]], p1: [s1(p0: s0(p0: [[115.0]]), p1: [s0(p0: [[116.0]])])], p2: [s0(p0: [[117.0]])], p3: [s2(p0: [s0(p0: [[118.0]]), s0(p0: [[119.0]]), s0(p0: [[120.0]])], p1: s0(p0: [[121.0]]), p2: s0(p0: [[122.0]]), p3: s1(p0: s0(p0: [[123.0]]), p1: [s0(p0: [[124.0]])])), s2(p0: [s0(p0: [[125.0]]), s0(p0: [[126.0]]), s0(p0: [[127.0]])], p1: s0(p0: [[128.0]]), p2: s0(p0: [[129.0]]), p3: s1(p0: s0(p0: [[130.0]]), p1: [s0(p0: [[131.0]])]))], p4: s1(p0: s0(p0: [[132.0]]), p1: [s0(p0: [[133.0]])]))], p1: s1(p0: s0(p0: [[134.0]]), p1: [s0(p0: [[135.0]])]))]), s6(p0: [s5(p0: [s3(p0: [[s1(p0: s0(p0: [[136.0]]), p1: [s0(p0: [[137.0]])])]], p1: [s1(p0: s0(p0: [[138.0]]), p1: [s0(p0: [[139.0]])])], p2: [s0(p0: [[140.0]])], p3: [s2(p0: [s0(p0: [[141.0]]), s0(p0: [[142.0]]), s0(p0: [[143.0]])], p1: s0(p0: [[144.0]]), p2: s0(p0: [[145.0]]), p3: s1(p0: s0(p0: [[146.0]]), p1: [s0(p0: [[147.0]])])), s2(p0: [s0(p0: [[148.0]]), s0(p0: [[149.0]]), s0(p0: [[150.0]])], p1: s0(p0: [[151.0]]), p2: s0(p0: [[152.0]]), p3: s1(p0: s0(p0: [[153.0]]), p1: [s0(p0: [[154.0]])]))], p4: s1(p0: s0(p0: [[155.0]]), p1: [s0(p0: [[156.0]])]))], p1: s1(p0: s0(p0: [[157.0]]), p1: [s0(p0: [[158.0]])])), s5(p0: [s3(p0: [[s1(p0: s0(p0: [[159.0]]), p1: [s0(p0: [[160.0]])])]], p1: [s1(p0: s0(p0: [[161.0]]), p1: [s0(p0: [[162.0]])])], p2: [s0(p0: [[163.0]])], p3: [s2(p0: [s0(p0: [[164.0]]), s0(p0: [[165.0]]), s0(p0: [[166.0]])], p1: s0(p0: [[167.0]]), p2: s0(p0: [[168.0]]), p3: s1(p0: s0(p0: [[169.0]]), p1: [s0(p0: [[170.0]])])), s2(p0: [s0(p0: [[171.0]]), s0(p0: [[172.0]]), s0(p0: [[173.0]])], p1: s0(p0: [[174.0]]), p2: s0(p0: [[175.0]]), p3: s1(p0: s0(p0: [[176.0]]), p1: [s0(p0: [[177.0]])]))], p4: s1(p0: s0(p0: [[178.0]]), p1: [s0(p0: [[179.0]])]))], p1: s1(p0: s0(p0: [[180.0]]), p1: [s0(p0: [[181.0]])])), s5(p0: [s3(p0: [[s1(p0: s0(p0: [[182.0]]), p1: [s0(p0: [[183.0]])])]], p1: [s1(p0: s0(p0: [[184.0]]), p1: [s0(p0: [[185.0]])])], p2: [s0(p0: [[186.0]])], p3: [s2(p0: [s0(p0: [[187.0]]), s0(p0: [[188.0]]), s0(p0: [[189.0]])], p1: s0(p0: [[190.0]]), p2: s0(p0: [[191.0]]), p3: s1(p0: s0(p0: [[192.0]]), p1: [s0(p0: [[193.0]])])), s2(p0: [s0(p0: [[194.0]]), s0(p0: [[195.0]]), s0(p0: [[196.0]])], p1: s0(p0: [[197.0]]), p2: s0(p0: [[198.0]]), p3: s1(p0: s0(p0: [[199.0]]), p1: [s0(p0: [[200.0]])]))], p4: s1(p0: s0(p0: [[201.0]]), p1: [s0(p0: [[202.0]])]))], p1: s1(p0: s0(p0: [[203.0]]), p1: [s0(p0: [[204.0]])]))], p1: [s5(p0: [s3(p0: [[s1(p0: s0(p0: [[205.0]]), p1: [s0(p0: [[206.0]])])]], p1: [s1(p0: s0(p0: [[207.0]]), p1: [s0(p0: [[208.0]])])], p2: [s0(p0: [[209.0]])], p3: [s2(p0: [s0(p0: [[210.0]]), s0(p0: [[211.0]]), s0(p0: [[212.0]])], p1: s0(p0: [[213.0]]), p2: s0(p0: [[214.0]]), p3: s1(p0: s0(p0: [[215.0]]), p1: [s0(p0: [[216.0]])])), s2(p0: [s0(p0: [[217.0]]), s0(p0: [[218.0]]), s0(p0: [[219.0]])], p1: s0(p0: [[220.0]]), p2: s0(p0: [[221.0]]), p3: s1(p0: s0(p0: [[222.0]]), p1: [s0(p0: [[223.0]])]))], p4: s1(p0: s0(p0: [[224.0]]), p1: [s0(p0: [[225.0]])]))], p1: s1(p0: s0(p0: [[226.0]]), p1: [s0(p0: [[227.0]])])), s5(p0: [s3(p0: [[s1(p0: s0(p0: [[228.0]]), p1: [s0(p0: [[229.0]])])]], p1: [s1(p0: s0(p0: [[230.0]]), p1: [s0(p0: [[231.0]])])], p2: [s0(p0: [[232.0]])], p3: [s2(p0: [s0(p0: [[233.0]]), s0(p0: [[234.0]]), s0(p0: [[235.0]])], p1: s0(p0: [[236.0]]), p2: s0(p0: [[237.0]]), p3: s1(p0: s0(p0: [[238.0]]), p1: [s0(p0: [[239.0]])])), s2(p0: [s0(p0: [[240.0]]), s0(p0: [[241.0]]), s0(p0: [[242.0]])], p1: s0(p0: [[243.0]]), p2: s0(p0: [[244.0]]), p3: s1(p0: s0(p0: [[245.0]]), p1: [s0(p0: [[246.0]])]))], p4: s1(p0: s0(p0: [[247.0]]), p1: [s0(p0: [[248.0]])]))], p1: s1(p0: s0(p0: [[249.0]]), p1: [s0(p0: [[250.0]])]))])])
    let v1: Double = 251.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 251.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
