  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s2 {
    var p0: s0
    var p1: [s0]
  } in
  struct s3 {
    var p0: [s0]
    var p1: s2
  } in
  struct s4 {
    var p0: [[s2]]
    var p1: [[s2]]
    var p2: s3
    var p3: s0
    var p4: [[s3]]
  } in
  let f85: (Float) -> Float = (v0: Float) -> Float {
    var v6: Float = v0 in
    var v2: Float = v0 in
    var v4: Float = v0 in
    var v8: Float = v6 in
    var v7: Float = v6 in
    var v3: Float = v8 in
    let v17: [Float] = [v3, v0, v0] in
    v2 = v4 in
    let v10: Float = v17[1] in
    var v12: [Float] = v17 in
    v12[0] = v3 in
    let v9: Float = v17[2] in
    let v15: Float = v12[2] in
    let v19: Float = v17[1] in
    var v41: [Float] = v12 in
    let v13: [Float] = [v10, v8, v9, v19] in
    let v34: [Float] = [v4, v0, v19, v19] in
    let v24: Float = v41[2] in
    var v20: Float = v19 in
    var v32: [Float] = v13 in
    let v39: [[Float]] = [v32, v34, v13, v34] in
    let v35: [Float] = v39[2] in
    var v36: [Float] = v34 in
    v36[1] = v2 in
    var v48: [[Float]] = v39 in
    let v38: Float = v41[2] in
    let v57: Float = v2 * v20 in
    v48[1] = v34 in
    var v27: Float = v38 in
    let v26: [[Float]] = [v34, v35, v36] in
    let v50: [Float] = v48[1] in
    let v25: [Float] = v26[2] in
    let v47: Float = v50[0] in
    v4 = v7 in
    v32[0] = v27 in
    v41[1] = v57 in
    var v160: Float = v47 in
    v12[0] = v7 in
    v48[0] = v25 in
    v36[3] = v24 in
    v36[0] = v15 in
    v160
  } in
  let noinline_f0: (s4, s4, Float) -> Float = (v0: s4, v1: s4, v2: Float) -> Float {
    let v6: Float = f85(v2) in
    var v51: Float = v2 in
    let v26: Float = f85(v6) in
    let v23: Float = v51 + v26 in
    v23
  } in
  fun loop(i: Int, v0: s4, v1: s4, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s4 = s4([[s2(s0([[0.0], [1.0], [2.0]], [[3.0]]), [s0([[4.0], [5.0], [6.0]], [[7.0]])])], [s2(s0([[8.0], [9.0], [10.0]], [[11.0]]), [s0([[12.0], [13.0], [14.0]], [[15.0]])])], [s2(s0([[16.0], [17.0], [18.0]], [[19.0]]), [s0([[20.0], [21.0], [22.0]], [[23.0]])])]], [[s2(s0([[24.0], [25.0], [26.0]], [[27.0]]), [s0([[28.0], [29.0], [30.0]], [[31.0]])])], [s2(s0([[32.0], [33.0], [34.0]], [[35.0]]), [s0([[36.0], [37.0], [38.0]], [[39.0]])])]], s3([s0([[40.0], [41.0], [42.0]], [[43.0]])], s2(s0([[44.0], [45.0], [46.0]], [[47.0]]), [s0([[48.0], [49.0], [50.0]], [[51.0]])])), s0([[52.0], [53.0], [54.0]], [[55.0]]), [[s3([s0([[56.0], [57.0], [58.0]], [[59.0]])], s2(s0([[60.0], [61.0], [62.0]], [[63.0]]), [s0([[64.0], [65.0], [66.0]], [[67.0]])]))], [s3([s0([[68.0], [69.0], [70.0]], [[71.0]])], s2(s0([[72.0], [73.0], [74.0]], [[75.0]]), [s0([[76.0], [77.0], [78.0]], [[79.0]])]))], [s3([s0([[80.0], [81.0], [82.0]], [[83.0]])], s2(s0([[84.0], [85.0], [86.0]], [[87.0]]), [s0([[88.0], [89.0], [90.0]], [[91.0]])]))]]) in
    let v1: s4 = s4([[s2(s0([[92.0], [93.0], [94.0]], [[95.0]]), [s0([[96.0], [97.0], [98.0]], [[99.0]])])], [s2(s0([[100.0], [101.0], [102.0]], [[103.0]]), [s0([[104.0], [105.0], [106.0]], [[107.0]])])], [s2(s0([[108.0], [109.0], [110.0]], [[111.0]]), [s0([[112.0], [113.0], [114.0]], [[115.0]])])]], [[s2(s0([[116.0], [117.0], [118.0]], [[119.0]]), [s0([[120.0], [121.0], [122.0]], [[123.0]])])], [s2(s0([[124.0], [125.0], [126.0]], [[127.0]]), [s0([[128.0], [129.0], [130.0]], [[131.0]])])]], s3([s0([[132.0], [133.0], [134.0]], [[135.0]])], s2(s0([[136.0], [137.0], [138.0]], [[139.0]]), [s0([[140.0], [141.0], [142.0]], [[143.0]])])), s0([[144.0], [145.0], [146.0]], [[147.0]]), [[s3([s0([[148.0], [149.0], [150.0]], [[151.0]])], s2(s0([[152.0], [153.0], [154.0]], [[155.0]]), [s0([[156.0], [157.0], [158.0]], [[159.0]])]))], [s3([s0([[160.0], [161.0], [162.0]], [[163.0]])], s2(s0([[164.0], [165.0], [166.0]], [[167.0]]), [s0([[168.0], [169.0], [170.0]], [[171.0]])]))], [s3([s0([[172.0], [173.0], [174.0]], [[175.0]])], s2(s0([[176.0], [177.0], [178.0]], [[179.0]]), [s0([[180.0], [181.0], [182.0]], [[183.0]])]))]]) in
    let v2: Float = 184.0 in
    let initialResult: Float = 184.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()