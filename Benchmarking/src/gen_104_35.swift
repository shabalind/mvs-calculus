  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
    var p4: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
    var p2: s0
    var p3: s0
  }
  struct s3 {
    var p0: [s1]
    var p1: [s0]
  }
  struct s4 {
    var p0: s3
    var p1: [[s0]]
  }
  @inline(never)
  func f0(_ v0: s4, _ v1: s4, _ v2: Double) -> Double {
    let v7: [[s0]] = v0.p1
    var v8: Double = v2
    let v3: [s0] = v7[0]
    let v13: s0 = v3[0]
    let v22: [[Double]] = v13.p4
    let v25: [Double] = v22[1]
    let v26: Double = v25[0]
    let v53: [Double] = v22[1]
    let v36: Double = v53[0]
    let v51: [Double] = [v2, v8, v8, v36, v26, v2]
    let v109: Double = v51[5]
    let v137: Double = v51[0]
    let v177: Double = v137 * v109
    return v177
  }
  func benchmark() {
    let v0: s4 = s4(p0: s3(p0: [s1(p0: s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0]], p2: [[5.0], [6.0]], p3: [[7.0], [8.0], [9.0]], p4: [[10.0], [11.0], [12.0]]), p1: s0(p0: [[13.0], [14.0], [15.0]], p1: [[16.0], [17.0]], p2: [[18.0], [19.0]], p3: [[20.0], [21.0], [22.0]], p4: [[23.0], [24.0], [25.0]]), p2: s0(p0: [[26.0], [27.0], [28.0]], p1: [[29.0], [30.0]], p2: [[31.0], [32.0]], p3: [[33.0], [34.0], [35.0]], p4: [[36.0], [37.0], [38.0]]), p3: s0(p0: [[39.0], [40.0], [41.0]], p1: [[42.0], [43.0]], p2: [[44.0], [45.0]], p3: [[46.0], [47.0], [48.0]], p4: [[49.0], [50.0], [51.0]])), s1(p0: s0(p0: [[52.0], [53.0], [54.0]], p1: [[55.0], [56.0]], p2: [[57.0], [58.0]], p3: [[59.0], [60.0], [61.0]], p4: [[62.0], [63.0], [64.0]]), p1: s0(p0: [[65.0], [66.0], [67.0]], p1: [[68.0], [69.0]], p2: [[70.0], [71.0]], p3: [[72.0], [73.0], [74.0]], p4: [[75.0], [76.0], [77.0]]), p2: s0(p0: [[78.0], [79.0], [80.0]], p1: [[81.0], [82.0]], p2: [[83.0], [84.0]], p3: [[85.0], [86.0], [87.0]], p4: [[88.0], [89.0], [90.0]]), p3: s0(p0: [[91.0], [92.0], [93.0]], p1: [[94.0], [95.0]], p2: [[96.0], [97.0]], p3: [[98.0], [99.0], [100.0]], p4: [[101.0], [102.0], [103.0]]))], p1: [s0(p0: [[104.0], [105.0], [106.0]], p1: [[107.0], [108.0]], p2: [[109.0], [110.0]], p3: [[111.0], [112.0], [113.0]], p4: [[114.0], [115.0], [116.0]]), s0(p0: [[117.0], [118.0], [119.0]], p1: [[120.0], [121.0]], p2: [[122.0], [123.0]], p3: [[124.0], [125.0], [126.0]], p4: [[127.0], [128.0], [129.0]]), s0(p0: [[130.0], [131.0], [132.0]], p1: [[133.0], [134.0]], p2: [[135.0], [136.0]], p3: [[137.0], [138.0], [139.0]], p4: [[140.0], [141.0], [142.0]])]), p1: [[s0(p0: [[143.0], [144.0], [145.0]], p1: [[146.0], [147.0]], p2: [[148.0], [149.0]], p3: [[150.0], [151.0], [152.0]], p4: [[153.0], [154.0], [155.0]])], [s0(p0: [[156.0], [157.0], [158.0]], p1: [[159.0], [160.0]], p2: [[161.0], [162.0]], p3: [[163.0], [164.0], [165.0]], p4: [[166.0], [167.0], [168.0]])], [s0(p0: [[169.0], [170.0], [171.0]], p1: [[172.0], [173.0]], p2: [[174.0], [175.0]], p3: [[176.0], [177.0], [178.0]], p4: [[179.0], [180.0], [181.0]])]])
    let v1: s4 = s4(p0: s3(p0: [s1(p0: s0(p0: [[182.0], [183.0], [184.0]], p1: [[185.0], [186.0]], p2: [[187.0], [188.0]], p3: [[189.0], [190.0], [191.0]], p4: [[192.0], [193.0], [194.0]]), p1: s0(p0: [[195.0], [196.0], [197.0]], p1: [[198.0], [199.0]], p2: [[200.0], [201.0]], p3: [[202.0], [203.0], [204.0]], p4: [[205.0], [206.0], [207.0]]), p2: s0(p0: [[208.0], [209.0], [210.0]], p1: [[211.0], [212.0]], p2: [[213.0], [214.0]], p3: [[215.0], [216.0], [217.0]], p4: [[218.0], [219.0], [220.0]]), p3: s0(p0: [[221.0], [222.0], [223.0]], p1: [[224.0], [225.0]], p2: [[226.0], [227.0]], p3: [[228.0], [229.0], [230.0]], p4: [[231.0], [232.0], [233.0]])), s1(p0: s0(p0: [[234.0], [235.0], [236.0]], p1: [[237.0], [238.0]], p2: [[239.0], [240.0]], p3: [[241.0], [242.0], [243.0]], p4: [[244.0], [245.0], [246.0]]), p1: s0(p0: [[247.0], [248.0], [249.0]], p1: [[250.0], [251.0]], p2: [[252.0], [253.0]], p3: [[254.0], [255.0], [256.0]], p4: [[257.0], [258.0], [259.0]]), p2: s0(p0: [[260.0], [261.0], [262.0]], p1: [[263.0], [264.0]], p2: [[265.0], [266.0]], p3: [[267.0], [268.0], [269.0]], p4: [[270.0], [271.0], [272.0]]), p3: s0(p0: [[273.0], [274.0], [275.0]], p1: [[276.0], [277.0]], p2: [[278.0], [279.0]], p3: [[280.0], [281.0], [282.0]], p4: [[283.0], [284.0], [285.0]]))], p1: [s0(p0: [[286.0], [287.0], [288.0]], p1: [[289.0], [290.0]], p2: [[291.0], [292.0]], p3: [[293.0], [294.0], [295.0]], p4: [[296.0], [297.0], [298.0]]), s0(p0: [[299.0], [300.0], [301.0]], p1: [[302.0], [303.0]], p2: [[304.0], [305.0]], p3: [[306.0], [307.0], [308.0]], p4: [[309.0], [310.0], [311.0]]), s0(p0: [[312.0], [313.0], [314.0]], p1: [[315.0], [316.0]], p2: [[317.0], [318.0]], p3: [[319.0], [320.0], [321.0]], p4: [[322.0], [323.0], [324.0]])]), p1: [[s0(p0: [[325.0], [326.0], [327.0]], p1: [[328.0], [329.0]], p2: [[330.0], [331.0]], p3: [[332.0], [333.0], [334.0]], p4: [[335.0], [336.0], [337.0]])], [s0(p0: [[338.0], [339.0], [340.0]], p1: [[341.0], [342.0]], p2: [[343.0], [344.0]], p3: [[345.0], [346.0], [347.0]], p4: [[348.0], [349.0], [350.0]])], [s0(p0: [[351.0], [352.0], [353.0]], p1: [[354.0], [355.0]], p2: [[356.0], [357.0]], p3: [[358.0], [359.0], [360.0]], p4: [[361.0], [362.0], [363.0]])]])
    let v2: Double = 364.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 364.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
