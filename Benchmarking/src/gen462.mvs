  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  let f80: (Float) -> Float = (v0: Float) -> Float {
    var v2: Float = v0 in
    let v7: [Float] = [v0, v2] in
    var v6: [Float] = v7 in
    let v3: Float = v7[1] in
    var v1: [Float] = v7 in
    v1[0] = v3 in
    var v15: Float = v0 in
    let v14: Float = v7[0] in
    var v5: Float = v2 in
    let v9: Float = v1[0] in
    var v10: Float = v2 in
    var v8: [Float] = v7 in
    let v11: [[Float]] = [v7, v8, v8, v8, v6, v6] in
    var v13: Float = v15 in
    let v16: [Float] = v11[2] in
    var v31: Float = v15 in
    var v25: [Float] = v8 in
    let v28: Float = v25[1] in
    let v32: Float = v14 - v10 in
    var v21: Float = v32 in
    var v18: [Float] = v1 in
    var v23: Float = v28 in
    let v39: Float = v25[0] in
    let v35: Float = v16[1] in
    v15 = v10 in
    v5 = v13 in
    v8[0] = v14 in
    let v27: Float = v18[1] in
    var v76: [[Float]] = v11 in
    let v46: [Float] = [v15, v9, v0, v27, v27, v32, v39] in
    var v59: [Float] = v46 in
    let v74: Float = v8[1] in
    let v83: Float = v31 - v2 in
    var v71: Float = v14 in
    var v54: Float = v35 in
    v1[0] = v9 in
    var v112: Float = v74 in
    let v82: Float = v59[4] in
    v8[0] = v54 in
    v8[0] = v83 in
    let v136: [Float] = [v32, v21, v112, v5, v27, v23, v82] in
    let v149: Float = v136[4] in
    v25[1] = v71 in
    let v109: [Float] = v76[5] in
    v18 = v109 in
    v149
  } in
  let noinline_f0: ([[s1]], Float) -> Float = (v0: [[s1]], v1: Float) -> Float {
    let v5: Float = f80(v1) in
    let v18: Float = v1 * v5 in
    var v22: Float = v18 in
    let v61: [Float] = [v1, v5, v18, v22, v1, v18, v18] in
    var v233: [Float] = v61 in
    var v154: [Float] = v233 in
    let v136: Float = v154[6] in
    v136
  } in
  fun loop(i: Int, v0: [[s1]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s1]] = [[s1([s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]), s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]]), s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]])], s0([[15.0], [16.0], [17.0]], [[18.0], [19.0]]))], [s1([s0([[20.0], [21.0], [22.0]], [[23.0], [24.0]]), s0([[25.0], [26.0], [27.0]], [[28.0], [29.0]]), s0([[30.0], [31.0], [32.0]], [[33.0], [34.0]])], s0([[35.0], [36.0], [37.0]], [[38.0], [39.0]]))], [s1([s0([[40.0], [41.0], [42.0]], [[43.0], [44.0]]), s0([[45.0], [46.0], [47.0]], [[48.0], [49.0]]), s0([[50.0], [51.0], [52.0]], [[53.0], [54.0]])], s0([[55.0], [56.0], [57.0]], [[58.0], [59.0]]))]] in
    let v1: Float = 60.0 in
    let initialResult: Float = 60.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()