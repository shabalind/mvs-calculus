  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s4 {
    var p0: s1
    var p1: [s1]
  } in
  let noinline_f0: (s4, Float) -> Float = (v0: s4, v1: Float) -> Float {
    let v8: [s1] = v0.p1 in
    let v13: s1 = v8[1] in
    let v11: s0 = v13.p1 in
    let v16: [[Float]] = v11.p1 in
    let v10: [Float] = v16[1] in
    let v20: [Float] = v16[0] in
    let v36: Float = v10[0] in
    var v29: [Float] = v20 in
    v29[0] = v36 in
    let v50: Float = v29[0] in
    v50
  } in
  fun loop(i: Int, v0: s4, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s4 = s4(s1([s0([[0.0]], [[1.0], [2.0]]), s0([[3.0]], [[4.0], [5.0]])], s0([[6.0]], [[7.0], [8.0]])), [s1([s0([[9.0]], [[10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0]])], s0([[15.0]], [[16.0], [17.0]])), s1([s0([[18.0]], [[19.0], [20.0]]), s0([[21.0]], [[22.0], [23.0]])], s0([[24.0]], [[25.0], [26.0]]))]) in
    let v1: Float = 27.0 in
    let initialResult: Float = 27.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()