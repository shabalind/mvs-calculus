  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s3 {
    var p0: s0
    var p1: s1
  } in
  let f36: (s0, s0) -> s0 = (v0: s0, v1: s0) -> s0 {
    var v6: s0 = v0 in
    var v3: s0 = v6 in
    let v8: [[Float]] = v1.p0 in
    v3.p0 = v8 in
    v3
  } in
  let noinline_f0: (s3, Float) -> Float = (v0: s3, v1: Float) -> Float {
    let v6: s0 = v0.p0 in
    let v3: s0 = f36(v6, v6) in
    let v2: [s0] = [v3, v3, v6, v3] in
    let v9: s0 = v2[3] in
    let v8: s0 = v0.p0 in
    let v5: [[Float]] = v9.p2 in
    var v18: s0 = v8 in
    v18.p2 = v5 in
    let v14: s0 = v2[3] in
    let v22: [[Float]] = v18.p0 in
    v18.p0 = v5 in
    let v60: [[Float]] = v14.p1 in
    let v90: s0 = s0(v22, v60, v22) in
    let v49: s0 = f36(v90, v6) in
    let v107: [[Float]] = v49.p2 in
    var v58: [[Float]] = v107 in
    let v101: [Float] = v58[0] in
    let v171: Float = v101[0] in
    v171
  } in
  fun loop(i: Int, v0: s3, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(s0([[0.0], [1.0], [2.0]], [[3.0]], [[4.0], [5.0], [6.0]]), s1(s0([[7.0], [8.0], [9.0]], [[10.0]], [[11.0], [12.0], [13.0]]), s0([[14.0], [15.0], [16.0]], [[17.0]], [[18.0], [19.0], [20.0]]))) in
    let v1: Float = 21.0 in
    let initialResult: Float = 21.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()