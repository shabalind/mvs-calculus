  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: s0
    var p1: [[s1]]
    var p2: [[s0]]
  } in
  struct s4 {
    var p0: s0
    var p1: [s0]
  } in
  struct s9 {
    var p0: s4
    var p1: s1
  } in
  let f28: (Float) -> Float = (v0: Float) -> Float {
    let v1: Float = v0 * v0 in
    var v2: Float = v1 in
    var v4: Float = v2 in
    var v19: Float = v4 in
    var v16: Float = v19 in
    v16
  } in
  let noinline_f0: (s9, s2, [Float], Float) -> Float = (v0: s9, v1: s2, v2: [Float], v3: Float) -> Float {
    var v6: [Float] = v2 in
    let v5: [[Float]] = [v6] in
    var v4: [[Float]] = v5 in
    let v20: Float = v2[0] in
    let v15: [Float] = v4[0] in
    v6[0] = v20 in
    let v14: Float = v6[0] in
    var v18: [Float] = v15 in
    var v48: Float = v3 in
    v18[0] = v3 in
    let v36: Float = f28(v48) in
    v6[0] = v36 in
    let v45: [Float] = v5[0] in
    v4[0] = v45 in
    let v52: Float = v36 * v14 in
    v6[0] = v36 in
    let v27: Float = v2[0] in
    let v164: Float = v3 / v20 in
    let v73: Float = f28(v20) in
    v6 = v18 in
    let v99: Float = v27 + v36 in
    let v68: [Float] = [v73, v52, v14, v164, v14] in
    v18[0] = v99 in
    let v65: Float = v68[3] in
    v65
  } in
  fun loop(i: Int, v0: s9, v1: s2, v2: [Float], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s9 = s9(s4(s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]]), [s0([[6.0], [7.0], [8.0]], [[9.0], [10.0], [11.0]]), s0([[12.0], [13.0], [14.0]], [[15.0], [16.0], [17.0]]), s0([[18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0]])]), s1(s0([[24.0], [25.0], [26.0]], [[27.0], [28.0], [29.0]]), [s0([[30.0], [31.0], [32.0]], [[33.0], [34.0], [35.0]])])) in
    let v1: s2 = s2(s0([[36.0], [37.0], [38.0]], [[39.0], [40.0], [41.0]]), [[s1(s0([[42.0], [43.0], [44.0]], [[45.0], [46.0], [47.0]]), [s0([[48.0], [49.0], [50.0]], [[51.0], [52.0], [53.0]])])], [s1(s0([[54.0], [55.0], [56.0]], [[57.0], [58.0], [59.0]]), [s0([[60.0], [61.0], [62.0]], [[63.0], [64.0], [65.0]])])]], [[s0([[66.0], [67.0], [68.0]], [[69.0], [70.0], [71.0]])], [s0([[72.0], [73.0], [74.0]], [[75.0], [76.0], [77.0]])], [s0([[78.0], [79.0], [80.0]], [[81.0], [82.0], [83.0]])]]) in
    let v2: [Float] = [84.0] in
    let v3: Float = 85.0 in
    let initialResult: Float = 85.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()