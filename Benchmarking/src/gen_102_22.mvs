  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s2 {
    var p0: s0
    var p1: s1
  } in
  struct s3 {
    var p0: s1
    var p1: [[s0]]
  } in
  struct s4 {
    var p0: [s0]
    var p1: s2
  } in
  struct s5 {
    var p0: [s2]
    var p1: s0
  } in
  struct s6 {
    var p0: s5
    var p1: s3
  } in
  let f18: (Float) -> Float = (v0: Float) -> Float {
    var v9: Float = v0 in
    var v7: Float = v9 in
    var v6: Float = v9 in
    var v1: Float = v6 in
    var v8: Float = v7 in
    var v5: Float = v8 in
    var v3: Float = v7 in
    var v14: Float = v3 in
    var v11: Float = v0 in
    var v13: Float = v11 in
    var v19: Float = v14 in
    var v17: Float = v14 in
    let v30: [Float] = [v17, v1, v5, v3, v13] in
    let v35: Float = v30[3] in
    var v39: [Float] = v30 in
    var v15: [Float] = v30 in
    var v20: Float = v9 in
    let v24: Float = v15[0] in
    v15[4] = v7 in
    var v21: [Float] = v39 in
    let v42: Float = v21[0] in
    let v33: [Float] = [v35, v42, v6, v9, v17, v6, v5] in
    v39[1] = v17 in
    let v47: Float = v33[1] in
    v21[2] = v19 in
    v39[4] = v20 in
    let v52: [Float] = [v24, v47] in
    let v174: Float = v52[1] in
    v174
  } in
  let noinline_f0: ([s6], [s4], Float) -> Float = (v0: [s6], v1: [s4], v2: Float) -> Float {
    let v5: Float = f18(v2) in
    let v4: Float = f18(v5) in
    let v6: Float = f18(v4) in
    let v14: Float = f18(v6) in
    let v67: Float = v14 / v6 in
    let v79: Float = f18(v67) in
    v79
  } in
  fun loop(i: Int, v0: [s6], v1: [s4], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s6] = [s6(s5([s2(s0([[0.0], [1.0], [2.0]], [[3.0]]), s1([s0([[4.0], [5.0], [6.0]], [[7.0]]), s0([[8.0], [9.0], [10.0]], [[11.0]])], s0([[12.0], [13.0], [14.0]], [[15.0]]))), s2(s0([[16.0], [17.0], [18.0]], [[19.0]]), s1([s0([[20.0], [21.0], [22.0]], [[23.0]]), s0([[24.0], [25.0], [26.0]], [[27.0]])], s0([[28.0], [29.0], [30.0]], [[31.0]])))], s0([[32.0], [33.0], [34.0]], [[35.0]])), s3(s1([s0([[36.0], [37.0], [38.0]], [[39.0]]), s0([[40.0], [41.0], [42.0]], [[43.0]])], s0([[44.0], [45.0], [46.0]], [[47.0]])), [[s0([[48.0], [49.0], [50.0]], [[51.0]])], [s0([[52.0], [53.0], [54.0]], [[55.0]])], [s0([[56.0], [57.0], [58.0]], [[59.0]])]])), s6(s5([s2(s0([[60.0], [61.0], [62.0]], [[63.0]]), s1([s0([[64.0], [65.0], [66.0]], [[67.0]]), s0([[68.0], [69.0], [70.0]], [[71.0]])], s0([[72.0], [73.0], [74.0]], [[75.0]]))), s2(s0([[76.0], [77.0], [78.0]], [[79.0]]), s1([s0([[80.0], [81.0], [82.0]], [[83.0]]), s0([[84.0], [85.0], [86.0]], [[87.0]])], s0([[88.0], [89.0], [90.0]], [[91.0]])))], s0([[92.0], [93.0], [94.0]], [[95.0]])), s3(s1([s0([[96.0], [97.0], [98.0]], [[99.0]]), s0([[100.0], [101.0], [102.0]], [[103.0]])], s0([[104.0], [105.0], [106.0]], [[107.0]])), [[s0([[108.0], [109.0], [110.0]], [[111.0]])], [s0([[112.0], [113.0], [114.0]], [[115.0]])], [s0([[116.0], [117.0], [118.0]], [[119.0]])]])), s6(s5([s2(s0([[120.0], [121.0], [122.0]], [[123.0]]), s1([s0([[124.0], [125.0], [126.0]], [[127.0]]), s0([[128.0], [129.0], [130.0]], [[131.0]])], s0([[132.0], [133.0], [134.0]], [[135.0]]))), s2(s0([[136.0], [137.0], [138.0]], [[139.0]]), s1([s0([[140.0], [141.0], [142.0]], [[143.0]]), s0([[144.0], [145.0], [146.0]], [[147.0]])], s0([[148.0], [149.0], [150.0]], [[151.0]])))], s0([[152.0], [153.0], [154.0]], [[155.0]])), s3(s1([s0([[156.0], [157.0], [158.0]], [[159.0]]), s0([[160.0], [161.0], [162.0]], [[163.0]])], s0([[164.0], [165.0], [166.0]], [[167.0]])), [[s0([[168.0], [169.0], [170.0]], [[171.0]])], [s0([[172.0], [173.0], [174.0]], [[175.0]])], [s0([[176.0], [177.0], [178.0]], [[179.0]])]]))] in
    let v1: [s4] = [s4([s0([[180.0], [181.0], [182.0]], [[183.0]]), s0([[184.0], [185.0], [186.0]], [[187.0]])], s2(s0([[188.0], [189.0], [190.0]], [[191.0]]), s1([s0([[192.0], [193.0], [194.0]], [[195.0]]), s0([[196.0], [197.0], [198.0]], [[199.0]])], s0([[200.0], [201.0], [202.0]], [[203.0]])))), s4([s0([[204.0], [205.0], [206.0]], [[207.0]]), s0([[208.0], [209.0], [210.0]], [[211.0]])], s2(s0([[212.0], [213.0], [214.0]], [[215.0]]), s1([s0([[216.0], [217.0], [218.0]], [[219.0]]), s0([[220.0], [221.0], [222.0]], [[223.0]])], s0([[224.0], [225.0], [226.0]], [[227.0]]))))] in
    let v2: Float = 228.0 in
    let initialResult: Float = 228.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()