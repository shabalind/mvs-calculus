  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s2 {
    var p0: s0
    var p1: s0
  } in
  struct s3 {
    var p0: s0
    var p1: s2
  } in
  let noinline_f0: (s3, [s2], Float) -> Float = (v0: s3, v1: [s2], v2: Float) -> Float {
    let v24: s0 = v0.p0 in
    let v19: [[Float]] = v24.p1 in
    var v30: Float = v2 in
    let v42: [Float] = v19[0] in
    var v47: [[Float]] = v19 in
    let v72: [Float] = v47[0] in
    var v21: [Float] = v72 in
    v21[0] = v30 in
    v47[0] = v42 in
    let v45: [Float] = v19[0] in
    v47[0] = v21 in
    let v55: Float = v72[0] in
    let v78: Float = v45[0] in
    let v135: Float = v2 * v55 in
    let v63: Float = v135 - v78 in
    v63
  } in
  fun loop(i: Int, v0: s3, v1: [s2], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(s0([[0.0]], [[1.0]]), s2(s0([[2.0]], [[3.0]]), s0([[4.0]], [[5.0]]))) in
    let v1: [s2] = [s2(s0([[6.0]], [[7.0]]), s0([[8.0]], [[9.0]])), s2(s0([[10.0]], [[11.0]]), s0([[12.0]], [[13.0]])), s2(s0([[14.0]], [[15.0]]), s0([[16.0]], [[17.0]]))] in
    let v2: Float = 18.0 in
    let initialResult: Float = 18.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()