  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s2 {
    var p0: [Float]
    var p1: Float
  } in
  struct s3 {
    var p0: s2
    var p1: s0
  } in
  struct s6 {
    var p0: [s3]
    var p1: s2
  } in
  let f6: (s3) -> s3 = (v0: s3) -> s3 {
    var v4: s3 = v0 in
    var v5: s3 = v4 in
    var v2: s3 = v5 in
    var v7: s3 = v0 in
    let v1: s0 = v7.p1 in
    v4.p1 = v1 in
    var v10: s0 = v1 in
    let v8: [[Float]] = v10.p0 in
    v5.p1 = v1 in
    let v12: [[Float]] = v1.p1 in
    let v11: s2 = v5.p0 in
    var v6: s0 = v10 in
    v4.p1 = v6 in
    let v14: [Float] = v12[0] in
    let v3: [[Float]] = v1.p1 in
    var v26: [[Float]] = v12 in
    v6.p1 = v12 in
    v5.p0 = v11 in
    var v20: [[Float]] = v8 in
    v6.p1 = v12 in
    let v15: [Float] = v26[0] in
    let v24: [[Float]] = v10.p1 in
    let v28: [Float] = v8[1] in
    var v16: s3 = v4 in
    v6.p0 = v20 in
    v26[0] = v28 in
    let v9: [Float] = v8[0] in
    let v27: [[[Float]]] = [v12, v3, v26, v26] in
    let v21: [[Float]] = v6.p1 in
    v20[1] = v15 in
    let v38: s2 = v5.p0 in
    let v37: s2 = v0.p0 in
    let v35: [Float] = v37.p0 in
    var v36: s3 = v5 in
    let v39: [Float] = v37.p0 in
    v5.p0 = v38 in
    v20[1] = v35 in
    v4.p1 = v10 in
    let v63: [[Float]] = v27[3] in
    v26[0] = v28 in
    let v133: [[Float]] = v27[3] in
    v7.p1 = v6 in
    v36.p1 = v1 in
    let v75: [Float] = v20[1] in
    v20[1] = v9 in
    v7 = v2 in
    let v52: [[[Float]]] = [v8, v20, v8, v20, v20, v20] in
    let v49: [[Float]] = v10.p0 in
    var v124: s0 = v1 in
    let v76: [[Float]] = v52[1] in
    var v60: [[Float]] = v24 in
    v124.p0 = v76 in
    v20[1] = v35 in
    var v176: s0 = v6 in
    v60[0] = v75 in
    v124.p1 = v133 in
    v10.p1 = v60 in
    v4.p1 = v176 in
    v124.p1 = v63 in
    var v122: [[[Float]]] = v52 in
    v124.p0 = v49 in
    let v123: [[Float]] = v10.p0 in
    v6.p1 = v60 in
    v26[0] = v39 in
    v10.p1 = v21 in
    let v116: s2 = v16.p0 in
    let v97: [[Float]] = v122[5] in
    v122[3] = v123 in
    v36.p1 = v124 in
    v20[1] = v14 in
    v7.p0 = v37 in
    let v200: s2 = v7.p0 in
    v2.p0 = v200 in
    v7.p1 = v176 in
    v2.p0 = v116 in
    v6.p0 = v97 in
    v36
  } in
  let noinline_f0: ([s3], Float) -> Float = (v0: [s3], v1: Float) -> Float {
    let v6: s3 = v0[1] in
    let v7: s3 = f6(v6) in
    var v20: [s3] = v0 in
    let v30: s2 = v7.p0 in
    v20[1] = v6 in
    v20 = v0 in
    let v23: s6 = s6(v20, v30) in
    let v141: [s6] = [v23, v23, v23, v23, v23, v23, v23] in
    let v87: s6 = v141[2] in
    let v108: s2 = v87.p1 in
    let v139: Float = v108.p1 in
    v139
  } in
  fun loop(i: Int, v0: [s3], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s3] = [s3(s2([0.0], 1.0), s0([[2.0], [3.0]], [[4.0]])), s3(s2([5.0], 6.0), s0([[7.0], [8.0]], [[9.0]])), s3(s2([10.0], 11.0), s0([[12.0], [13.0]], [[14.0]]))] in
    let v1: Float = 15.0 in
    let initialResult: Float = 15.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()