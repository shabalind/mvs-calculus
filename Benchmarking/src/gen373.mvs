  struct s0 {
    var p0: [[Float]]
  } in
  struct s1 {
    var p0: [[Float]]
    var p1: [s0]
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    let v5: [[Float]] = v0.p0 in
    var v4: Float = v1 in
    var v14: [[Float]] = v5 in
    let v3: [Float] = v5[0] in
    v14[0] = v3 in
    v14[0] = v3 in
    var v10: [[Float]] = v5 in
    let v19: [Float] = v14[0] in
    let v13: [[Float]] = v0.p0 in
    let v18: Float = v1 - v1 in
    let v20: Float = v19[0] in
    let v17: [Float] = v10[0] in
    v10[0] = v17 in
    let v44: [Float] = v10[0] in
    v10[0] = v3 in
    v10[0] = v17 in
    let v25: [Float] = v13[0] in
    v14[0] = v25 in
    var v26: [Float] = v44 in
    let v32: Float = v44[0] in
    v14[0] = v25 in
    v26[0] = v4 in
    let v40: Float = v17[0] in
    v14[0] = v17 in
    var v34: Float = v32 in
    v26[0] = v34 in
    v14[0] = v26 in
    let v149: Float = v3[0] in
    let v52: Float = v19[0] in
    let v228: [Float] = [v40, v18, v149, v34, v52] in
    v26[0] = v20 in
    let v188: Float = v228[4] in
    v188
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([[0.0]], [s0([[1.0], [2.0], [3.0]]), s0([[4.0], [5.0], [6.0]]), s0([[7.0], [8.0], [9.0]])]) in
    let v1: Float = 10.0 in
    let initialResult: Float = 10.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()