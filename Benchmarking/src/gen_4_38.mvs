  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: (s0, Float) -> Float = (v0: s0, v1: Float) -> Float {
    let v2: [[Float]] = v0.p1 in
    let v5: [Float] = v2[0] in
    let v8: [[Float]] = v0.p0 in
    let v4: s0 = s0(v8, v2) in
    let v15: Float = v5[0] in
    let v16: [[Float]] = v4.p1 in
    var v38: [[Float]] = v16 in
    let v88: [Float] = v38[0] in
    let v52: Float = v88[0] in
    let v163: Float = v52 / v1 in
    let v105: Float = v15 * v163 in
    v105
  } in
  fun loop(i: Int, v0: s0, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0], [2.0]], [[3.0]]) in
    let v1: Float = 4.0 in
    let initialResult: Float = 4.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()