  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: s1
  } in
  struct s6 {
    var p0: s0
    var p1: s2
  } in
  let f70: (Float) -> Float = (v0: Float) -> Float {
    var v2: Float = v0 in
    var v5: Float = v2 in
    var v8: Float = v2 in
    var v1: Float = v5 in
    let v4: [Float] = [v1] in
    var v11: [Float] = v4 in
    v11[0] = v8 in
    var v7: Float = v1 in
    v11[0] = v8 in
    let v14: Float = v4[0] in
    let v29: Float = v11[0] in
    v11[0] = v7 in
    var v40: Float = v29 in
    v11[0] = v14 in
    v40
  } in
  let noinline_f0: ([[s6]], Float) -> Float = (v0: [[s6]], v1: Float) -> Float {
    var v3: Float = v1 in
    var v81: Float = v3 in
    var v82: Float = v81 in
    var v48: Float = v82 in
    v81 = v48 in
    let v141: Float = f70(v81) in
    v141
  } in
  fun loop(i: Int, v0: [[s6]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s6]] = [[s6(s0([[0.0]], [[1.0], [2.0]]), s2([s0([[3.0]], [[4.0], [5.0]]), s0([[6.0]], [[7.0], [8.0]])], s1(s0([[9.0]], [[10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0]]))))], [s6(s0([[15.0]], [[16.0], [17.0]]), s2([s0([[18.0]], [[19.0], [20.0]]), s0([[21.0]], [[22.0], [23.0]])], s1(s0([[24.0]], [[25.0], [26.0]]), s0([[27.0]], [[28.0], [29.0]]))))]] in
    let v1: Float = 30.0 in
    let initialResult: Float = 30.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()