  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s4 {
    var p0: s0
    var p1: s1
  } in
  let f32: (s1) -> s1 = (v0: s1) -> s1 {
    let v1: s0 = v0.p1 in
    let v11: s4 = s4(v1, v0) in
    let v26: s1 = v11.p1 in
    var v29: s1 = v26 in
    v29
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    let v2: s1 = f32(v0) in
    let v6: s0 = v2.p0 in
    let v4: [[Float]] = v6.p1 in
    let v10: [Float] = v4[0] in
    let v11: Float = v10[0] in
    v11
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1(s0([[0.0]], [[1.0], [2.0], [3.0]]), s0([[4.0]], [[5.0], [6.0], [7.0]])) in
    let v1: Float = 8.0 in
    let initialResult: Float = 8.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()