  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  } in
  let f67: (Float) -> Float = (v0: Float) -> Float {
    var v5: Float = v0 in
    let v3: [Float] = [v5, v0] in
    let v10: Float = v3[0] in
    v10
  } in
  let f12: (Float) -> Float = (v0: Float) -> Float {
    var v7: Float = v0 in
    let v1: Float = f67(v7) in
    let v5: Float = f67(v7) in
    let v3: Float = f67(v7) in
    let v6: Float = f67(v3) in
    let v2: Float = f67(v3) in
    let v10: Float = f67(v1) in
    let v8: [Float] = [v5, v6, v2, v10, v10, v6] in
    var v14: [Float] = v8 in
    let v12: Float = f67(v7) in
    let v22: Float = v14[4] in
    let v24: Float = f67(v6) in
    v14[4] = v2 in
    let v41: Float = f67(v22) in
    v14[4] = v7 in
    var v28: Float = v24 in
    v14[3] = v22 in
    let v79: Float = f67(v22) in
    v14[0] = v12 in
    let v71: [Float] = [v5, v79] in
    var v42: [Float] = v71 in
    var v119: [Float] = v42 in
    let v88: [[Float]] = [v71, v71, v119] in
    v14[5] = v28 in
    v7 = v41 in
    let v130: [Float] = v88[1] in
    let v149: Float = v130[1] in
    v149
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    let v13: Float = f12(v1) in
    let v8: Float = f12(v13) in
    var v16: Float = v1 in
    v16 = v8 in
    var v12: Float = v16 in
    v12 = v16 in
    let v79: Float = f67(v12) in
    var v60: Float = v79 in
    v60
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([[s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]])], [s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]])]], s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]])) in
    let v1: Float = 15.0 in
    let initialResult: Float = 15.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()