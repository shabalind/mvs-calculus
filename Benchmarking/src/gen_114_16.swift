  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [Double]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: [[s1]]
    var p1: s1
  }
  struct s3 {
    var p0: s1
    var p1: s2
  }
  struct s4 {
    var p0: [s3]
    var p1: [s0]
  }
  struct s5 {
    var p0: [s1]
    var p1: [[s4]]
  }
  struct s7 {
    var p0: s5
    var p1: [s0]
    var p2: [s4]
  }
  @inline(never)
  func f0(_ v0: s7, _ v1: Double) -> Double {
    var v2: Double = v1
    var v9: Double = v1
    var v33: Double = v1
    let v16: Double = v2 * v33
    v33 = v9
    let v39: [Double] = [v2]
    let v19: Double = v39[0]
    var v38: [Double] = v39
    var v44: [Double] = v38
    v38[0] = v19
    let v65: Double = v44[0]
    let v158: Double = v16 * v65
    return v158
  }
  func benchmark() {
    let v0: s7 = s7(p0: s5(p0: [s1(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0]], p2: [3.0]), p1: [s0(p0: [[4.0], [5.0]], p1: [[6.0]], p2: [7.0]), s0(p0: [[8.0], [9.0]], p1: [[10.0]], p2: [11.0])])], p1: [[s4(p0: [s3(p0: s1(p0: s0(p0: [[12.0], [13.0]], p1: [[14.0]], p2: [15.0]), p1: [s0(p0: [[16.0], [17.0]], p1: [[18.0]], p2: [19.0]), s0(p0: [[20.0], [21.0]], p1: [[22.0]], p2: [23.0])]), p1: s2(p0: [[s1(p0: s0(p0: [[24.0], [25.0]], p1: [[26.0]], p2: [27.0]), p1: [s0(p0: [[28.0], [29.0]], p1: [[30.0]], p2: [31.0]), s0(p0: [[32.0], [33.0]], p1: [[34.0]], p2: [35.0])])]], p1: s1(p0: s0(p0: [[36.0], [37.0]], p1: [[38.0]], p2: [39.0]), p1: [s0(p0: [[40.0], [41.0]], p1: [[42.0]], p2: [43.0]), s0(p0: [[44.0], [45.0]], p1: [[46.0]], p2: [47.0])]))), s3(p0: s1(p0: s0(p0: [[48.0], [49.0]], p1: [[50.0]], p2: [51.0]), p1: [s0(p0: [[52.0], [53.0]], p1: [[54.0]], p2: [55.0]), s0(p0: [[56.0], [57.0]], p1: [[58.0]], p2: [59.0])]), p1: s2(p0: [[s1(p0: s0(p0: [[60.0], [61.0]], p1: [[62.0]], p2: [63.0]), p1: [s0(p0: [[64.0], [65.0]], p1: [[66.0]], p2: [67.0]), s0(p0: [[68.0], [69.0]], p1: [[70.0]], p2: [71.0])])]], p1: s1(p0: s0(p0: [[72.0], [73.0]], p1: [[74.0]], p2: [75.0]), p1: [s0(p0: [[76.0], [77.0]], p1: [[78.0]], p2: [79.0]), s0(p0: [[80.0], [81.0]], p1: [[82.0]], p2: [83.0])]))), s3(p0: s1(p0: s0(p0: [[84.0], [85.0]], p1: [[86.0]], p2: [87.0]), p1: [s0(p0: [[88.0], [89.0]], p1: [[90.0]], p2: [91.0]), s0(p0: [[92.0], [93.0]], p1: [[94.0]], p2: [95.0])]), p1: s2(p0: [[s1(p0: s0(p0: [[96.0], [97.0]], p1: [[98.0]], p2: [99.0]), p1: [s0(p0: [[100.0], [101.0]], p1: [[102.0]], p2: [103.0]), s0(p0: [[104.0], [105.0]], p1: [[106.0]], p2: [107.0])])]], p1: s1(p0: s0(p0: [[108.0], [109.0]], p1: [[110.0]], p2: [111.0]), p1: [s0(p0: [[112.0], [113.0]], p1: [[114.0]], p2: [115.0]), s0(p0: [[116.0], [117.0]], p1: [[118.0]], p2: [119.0])])))], p1: [s0(p0: [[120.0], [121.0]], p1: [[122.0]], p2: [123.0]), s0(p0: [[124.0], [125.0]], p1: [[126.0]], p2: [127.0]), s0(p0: [[128.0], [129.0]], p1: [[130.0]], p2: [131.0])])], [s4(p0: [s3(p0: s1(p0: s0(p0: [[132.0], [133.0]], p1: [[134.0]], p2: [135.0]), p1: [s0(p0: [[136.0], [137.0]], p1: [[138.0]], p2: [139.0]), s0(p0: [[140.0], [141.0]], p1: [[142.0]], p2: [143.0])]), p1: s2(p0: [[s1(p0: s0(p0: [[144.0], [145.0]], p1: [[146.0]], p2: [147.0]), p1: [s0(p0: [[148.0], [149.0]], p1: [[150.0]], p2: [151.0]), s0(p0: [[152.0], [153.0]], p1: [[154.0]], p2: [155.0])])]], p1: s1(p0: s0(p0: [[156.0], [157.0]], p1: [[158.0]], p2: [159.0]), p1: [s0(p0: [[160.0], [161.0]], p1: [[162.0]], p2: [163.0]), s0(p0: [[164.0], [165.0]], p1: [[166.0]], p2: [167.0])]))), s3(p0: s1(p0: s0(p0: [[168.0], [169.0]], p1: [[170.0]], p2: [171.0]), p1: [s0(p0: [[172.0], [173.0]], p1: [[174.0]], p2: [175.0]), s0(p0: [[176.0], [177.0]], p1: [[178.0]], p2: [179.0])]), p1: s2(p0: [[s1(p0: s0(p0: [[180.0], [181.0]], p1: [[182.0]], p2: [183.0]), p1: [s0(p0: [[184.0], [185.0]], p1: [[186.0]], p2: [187.0]), s0(p0: [[188.0], [189.0]], p1: [[190.0]], p2: [191.0])])]], p1: s1(p0: s0(p0: [[192.0], [193.0]], p1: [[194.0]], p2: [195.0]), p1: [s0(p0: [[196.0], [197.0]], p1: [[198.0]], p2: [199.0]), s0(p0: [[200.0], [201.0]], p1: [[202.0]], p2: [203.0])]))), s3(p0: s1(p0: s0(p0: [[204.0], [205.0]], p1: [[206.0]], p2: [207.0]), p1: [s0(p0: [[208.0], [209.0]], p1: [[210.0]], p2: [211.0]), s0(p0: [[212.0], [213.0]], p1: [[214.0]], p2: [215.0])]), p1: s2(p0: [[s1(p0: s0(p0: [[216.0], [217.0]], p1: [[218.0]], p2: [219.0]), p1: [s0(p0: [[220.0], [221.0]], p1: [[222.0]], p2: [223.0]), s0(p0: [[224.0], [225.0]], p1: [[226.0]], p2: [227.0])])]], p1: s1(p0: s0(p0: [[228.0], [229.0]], p1: [[230.0]], p2: [231.0]), p1: [s0(p0: [[232.0], [233.0]], p1: [[234.0]], p2: [235.0]), s0(p0: [[236.0], [237.0]], p1: [[238.0]], p2: [239.0])])))], p1: [s0(p0: [[240.0], [241.0]], p1: [[242.0]], p2: [243.0]), s0(p0: [[244.0], [245.0]], p1: [[246.0]], p2: [247.0]), s0(p0: [[248.0], [249.0]], p1: [[250.0]], p2: [251.0])])], [s4(p0: [s3(p0: s1(p0: s0(p0: [[252.0], [253.0]], p1: [[254.0]], p2: [255.0]), p1: [s0(p0: [[256.0], [257.0]], p1: [[258.0]], p2: [259.0]), s0(p0: [[260.0], [261.0]], p1: [[262.0]], p2: [263.0])]), p1: s2(p0: [[s1(p0: s0(p0: [[264.0], [265.0]], p1: [[266.0]], p2: [267.0]), p1: [s0(p0: [[268.0], [269.0]], p1: [[270.0]], p2: [271.0]), s0(p0: [[272.0], [273.0]], p1: [[274.0]], p2: [275.0])])]], p1: s1(p0: s0(p0: [[276.0], [277.0]], p1: [[278.0]], p2: [279.0]), p1: [s0(p0: [[280.0], [281.0]], p1: [[282.0]], p2: [283.0]), s0(p0: [[284.0], [285.0]], p1: [[286.0]], p2: [287.0])]))), s3(p0: s1(p0: s0(p0: [[288.0], [289.0]], p1: [[290.0]], p2: [291.0]), p1: [s0(p0: [[292.0], [293.0]], p1: [[294.0]], p2: [295.0]), s0(p0: [[296.0], [297.0]], p1: [[298.0]], p2: [299.0])]), p1: s2(p0: [[s1(p0: s0(p0: [[300.0], [301.0]], p1: [[302.0]], p2: [303.0]), p1: [s0(p0: [[304.0], [305.0]], p1: [[306.0]], p2: [307.0]), s0(p0: [[308.0], [309.0]], p1: [[310.0]], p2: [311.0])])]], p1: s1(p0: s0(p0: [[312.0], [313.0]], p1: [[314.0]], p2: [315.0]), p1: [s0(p0: [[316.0], [317.0]], p1: [[318.0]], p2: [319.0]), s0(p0: [[320.0], [321.0]], p1: [[322.0]], p2: [323.0])]))), s3(p0: s1(p0: s0(p0: [[324.0], [325.0]], p1: [[326.0]], p2: [327.0]), p1: [s0(p0: [[328.0], [329.0]], p1: [[330.0]], p2: [331.0]), s0(p0: [[332.0], [333.0]], p1: [[334.0]], p2: [335.0])]), p1: s2(p0: [[s1(p0: s0(p0: [[336.0], [337.0]], p1: [[338.0]], p2: [339.0]), p1: [s0(p0: [[340.0], [341.0]], p1: [[342.0]], p2: [343.0]), s0(p0: [[344.0], [345.0]], p1: [[346.0]], p2: [347.0])])]], p1: s1(p0: s0(p0: [[348.0], [349.0]], p1: [[350.0]], p2: [351.0]), p1: [s0(p0: [[352.0], [353.0]], p1: [[354.0]], p2: [355.0]), s0(p0: [[356.0], [357.0]], p1: [[358.0]], p2: [359.0])])))], p1: [s0(p0: [[360.0], [361.0]], p1: [[362.0]], p2: [363.0]), s0(p0: [[364.0], [365.0]], p1: [[366.0]], p2: [367.0]), s0(p0: [[368.0], [369.0]], p1: [[370.0]], p2: [371.0])])]]), p1: [s0(p0: [[372.0], [373.0]], p1: [[374.0]], p2: [375.0])], p2: [s4(p0: [s3(p0: s1(p0: s0(p0: [[376.0], [377.0]], p1: [[378.0]], p2: [379.0]), p1: [s0(p0: [[380.0], [381.0]], p1: [[382.0]], p2: [383.0]), s0(p0: [[384.0], [385.0]], p1: [[386.0]], p2: [387.0])]), p1: s2(p0: [[s1(p0: s0(p0: [[388.0], [389.0]], p1: [[390.0]], p2: [391.0]), p1: [s0(p0: [[392.0], [393.0]], p1: [[394.0]], p2: [395.0]), s0(p0: [[396.0], [397.0]], p1: [[398.0]], p2: [399.0])])]], p1: s1(p0: s0(p0: [[400.0], [401.0]], p1: [[402.0]], p2: [403.0]), p1: [s0(p0: [[404.0], [405.0]], p1: [[406.0]], p2: [407.0]), s0(p0: [[408.0], [409.0]], p1: [[410.0]], p2: [411.0])]))), s3(p0: s1(p0: s0(p0: [[412.0], [413.0]], p1: [[414.0]], p2: [415.0]), p1: [s0(p0: [[416.0], [417.0]], p1: [[418.0]], p2: [419.0]), s0(p0: [[420.0], [421.0]], p1: [[422.0]], p2: [423.0])]), p1: s2(p0: [[s1(p0: s0(p0: [[424.0], [425.0]], p1: [[426.0]], p2: [427.0]), p1: [s0(p0: [[428.0], [429.0]], p1: [[430.0]], p2: [431.0]), s0(p0: [[432.0], [433.0]], p1: [[434.0]], p2: [435.0])])]], p1: s1(p0: s0(p0: [[436.0], [437.0]], p1: [[438.0]], p2: [439.0]), p1: [s0(p0: [[440.0], [441.0]], p1: [[442.0]], p2: [443.0]), s0(p0: [[444.0], [445.0]], p1: [[446.0]], p2: [447.0])]))), s3(p0: s1(p0: s0(p0: [[448.0], [449.0]], p1: [[450.0]], p2: [451.0]), p1: [s0(p0: [[452.0], [453.0]], p1: [[454.0]], p2: [455.0]), s0(p0: [[456.0], [457.0]], p1: [[458.0]], p2: [459.0])]), p1: s2(p0: [[s1(p0: s0(p0: [[460.0], [461.0]], p1: [[462.0]], p2: [463.0]), p1: [s0(p0: [[464.0], [465.0]], p1: [[466.0]], p2: [467.0]), s0(p0: [[468.0], [469.0]], p1: [[470.0]], p2: [471.0])])]], p1: s1(p0: s0(p0: [[472.0], [473.0]], p1: [[474.0]], p2: [475.0]), p1: [s0(p0: [[476.0], [477.0]], p1: [[478.0]], p2: [479.0]), s0(p0: [[480.0], [481.0]], p1: [[482.0]], p2: [483.0])])))], p1: [s0(p0: [[484.0], [485.0]], p1: [[486.0]], p2: [487.0]), s0(p0: [[488.0], [489.0]], p1: [[490.0]], p2: [491.0]), s0(p0: [[492.0], [493.0]], p1: [[494.0]], p2: [495.0])])])
    let v1: Double = 496.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 496.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
