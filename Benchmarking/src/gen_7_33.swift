  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: [s1]
    var p1: [[s1]]
    var p2: [Double]
  }
  struct s3 {
    var p0: [[s1]]
    var p1: [s1]
  }
  struct s4 {
    var p0: s3
    var p1: [s2]
  }
  struct s5 {
    var p0: s3
    var p1: s1
  }
  @inline(never)
  func f0(_ v0: s5, _ v1: [s4], _ v2: Double) -> Double {
    let v4: s3 = v0.p0
    let v18: [s1] = v4.p1
    let v20: s1 = v18[0]
    let v43: Double = v2 * v2
    let v45: s0 = v20.p1
    let v51: [[Double]] = v45.p1
    let v56: Double = v43 * v2
    let v46: Double = v43 * v56
    let v104: Double = v46 + v56
    let v184: [Double] = v51[2]
    let v125: Double = v184[0]
    let v149: Double = v125 + v104
    return v149
  }
  func benchmark() {
    let v0: s5 = s5(p0: s3(p0: [[s1(p0: s0(p0: [[0.0]], p1: [[1.0], [2.0], [3.0]]), p1: s0(p0: [[4.0]], p1: [[5.0], [6.0], [7.0]]))], [s1(p0: s0(p0: [[8.0]], p1: [[9.0], [10.0], [11.0]]), p1: s0(p0: [[12.0]], p1: [[13.0], [14.0], [15.0]]))], [s1(p0: s0(p0: [[16.0]], p1: [[17.0], [18.0], [19.0]]), p1: s0(p0: [[20.0]], p1: [[21.0], [22.0], [23.0]]))]], p1: [s1(p0: s0(p0: [[24.0]], p1: [[25.0], [26.0], [27.0]]), p1: s0(p0: [[28.0]], p1: [[29.0], [30.0], [31.0]])), s1(p0: s0(p0: [[32.0]], p1: [[33.0], [34.0], [35.0]]), p1: s0(p0: [[36.0]], p1: [[37.0], [38.0], [39.0]]))]), p1: s1(p0: s0(p0: [[40.0]], p1: [[41.0], [42.0], [43.0]]), p1: s0(p0: [[44.0]], p1: [[45.0], [46.0], [47.0]])))
    let v1: [s4] = [s4(p0: s3(p0: [[s1(p0: s0(p0: [[48.0]], p1: [[49.0], [50.0], [51.0]]), p1: s0(p0: [[52.0]], p1: [[53.0], [54.0], [55.0]]))], [s1(p0: s0(p0: [[56.0]], p1: [[57.0], [58.0], [59.0]]), p1: s0(p0: [[60.0]], p1: [[61.0], [62.0], [63.0]]))], [s1(p0: s0(p0: [[64.0]], p1: [[65.0], [66.0], [67.0]]), p1: s0(p0: [[68.0]], p1: [[69.0], [70.0], [71.0]]))]], p1: [s1(p0: s0(p0: [[72.0]], p1: [[73.0], [74.0], [75.0]]), p1: s0(p0: [[76.0]], p1: [[77.0], [78.0], [79.0]])), s1(p0: s0(p0: [[80.0]], p1: [[81.0], [82.0], [83.0]]), p1: s0(p0: [[84.0]], p1: [[85.0], [86.0], [87.0]]))]), p1: [s2(p0: [s1(p0: s0(p0: [[88.0]], p1: [[89.0], [90.0], [91.0]]), p1: s0(p0: [[92.0]], p1: [[93.0], [94.0], [95.0]])), s1(p0: s0(p0: [[96.0]], p1: [[97.0], [98.0], [99.0]]), p1: s0(p0: [[100.0]], p1: [[101.0], [102.0], [103.0]]))], p1: [[s1(p0: s0(p0: [[104.0]], p1: [[105.0], [106.0], [107.0]]), p1: s0(p0: [[108.0]], p1: [[109.0], [110.0], [111.0]]))]], p2: [112.0, 113.0]), s2(p0: [s1(p0: s0(p0: [[114.0]], p1: [[115.0], [116.0], [117.0]]), p1: s0(p0: [[118.0]], p1: [[119.0], [120.0], [121.0]])), s1(p0: s0(p0: [[122.0]], p1: [[123.0], [124.0], [125.0]]), p1: s0(p0: [[126.0]], p1: [[127.0], [128.0], [129.0]]))], p1: [[s1(p0: s0(p0: [[130.0]], p1: [[131.0], [132.0], [133.0]]), p1: s0(p0: [[134.0]], p1: [[135.0], [136.0], [137.0]]))]], p2: [138.0, 139.0]), s2(p0: [s1(p0: s0(p0: [[140.0]], p1: [[141.0], [142.0], [143.0]]), p1: s0(p0: [[144.0]], p1: [[145.0], [146.0], [147.0]])), s1(p0: s0(p0: [[148.0]], p1: [[149.0], [150.0], [151.0]]), p1: s0(p0: [[152.0]], p1: [[153.0], [154.0], [155.0]]))], p1: [[s1(p0: s0(p0: [[156.0]], p1: [[157.0], [158.0], [159.0]]), p1: s0(p0: [[160.0]], p1: [[161.0], [162.0], [163.0]]))]], p2: [164.0, 165.0])]), s4(p0: s3(p0: [[s1(p0: s0(p0: [[166.0]], p1: [[167.0], [168.0], [169.0]]), p1: s0(p0: [[170.0]], p1: [[171.0], [172.0], [173.0]]))], [s1(p0: s0(p0: [[174.0]], p1: [[175.0], [176.0], [177.0]]), p1: s0(p0: [[178.0]], p1: [[179.0], [180.0], [181.0]]))], [s1(p0: s0(p0: [[182.0]], p1: [[183.0], [184.0], [185.0]]), p1: s0(p0: [[186.0]], p1: [[187.0], [188.0], [189.0]]))]], p1: [s1(p0: s0(p0: [[190.0]], p1: [[191.0], [192.0], [193.0]]), p1: s0(p0: [[194.0]], p1: [[195.0], [196.0], [197.0]])), s1(p0: s0(p0: [[198.0]], p1: [[199.0], [200.0], [201.0]]), p1: s0(p0: [[202.0]], p1: [[203.0], [204.0], [205.0]]))]), p1: [s2(p0: [s1(p0: s0(p0: [[206.0]], p1: [[207.0], [208.0], [209.0]]), p1: s0(p0: [[210.0]], p1: [[211.0], [212.0], [213.0]])), s1(p0: s0(p0: [[214.0]], p1: [[215.0], [216.0], [217.0]]), p1: s0(p0: [[218.0]], p1: [[219.0], [220.0], [221.0]]))], p1: [[s1(p0: s0(p0: [[222.0]], p1: [[223.0], [224.0], [225.0]]), p1: s0(p0: [[226.0]], p1: [[227.0], [228.0], [229.0]]))]], p2: [230.0, 231.0]), s2(p0: [s1(p0: s0(p0: [[232.0]], p1: [[233.0], [234.0], [235.0]]), p1: s0(p0: [[236.0]], p1: [[237.0], [238.0], [239.0]])), s1(p0: s0(p0: [[240.0]], p1: [[241.0], [242.0], [243.0]]), p1: s0(p0: [[244.0]], p1: [[245.0], [246.0], [247.0]]))], p1: [[s1(p0: s0(p0: [[248.0]], p1: [[249.0], [250.0], [251.0]]), p1: s0(p0: [[252.0]], p1: [[253.0], [254.0], [255.0]]))]], p2: [256.0, 257.0]), s2(p0: [s1(p0: s0(p0: [[258.0]], p1: [[259.0], [260.0], [261.0]]), p1: s0(p0: [[262.0]], p1: [[263.0], [264.0], [265.0]])), s1(p0: s0(p0: [[266.0]], p1: [[267.0], [268.0], [269.0]]), p1: s0(p0: [[270.0]], p1: [[271.0], [272.0], [273.0]]))], p1: [[s1(p0: s0(p0: [[274.0]], p1: [[275.0], [276.0], [277.0]]), p1: s0(p0: [[278.0]], p1: [[279.0], [280.0], [281.0]]))]], p2: [282.0, 283.0])])]
    let v2: Double = 284.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 284.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
