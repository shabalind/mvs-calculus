  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s2 {
    var p0: [[s0]]
    var p1: [s0]
  } in
  struct s3 {
    var p0: s0
  } in
  struct s4 {
    var p0: [[s0]]
    var p1: s2
  } in
  struct s7 {
    var p0: [s4]
    var p1: [[s4]]
  } in
  struct s8 {
    var p0: [s7]
  } in
  let noinline_f0: ([[s3]], s0, [[s3]], s8, Float) -> Float = (v0: [[s3]], v1: s0, v2: [[s3]], v3: s8, v4: Float) -> Float {
    var v6: Float = v4 in
    let v14: [[Float]] = v1.p1 in
    var v10: [[Float]] = v14 in
    let v19: [[Float]] = v1.p0 in
    let v21: [Float] = v19[0] in
    v10[0] = v21 in
    v10[0] = v21 in
    let v22: [Float] = v10[0] in
    let v50: Float = v22[0] in
    let v56: Float = v50 + v6 in
    let v51: Float = v6 + v56 in
    v51
  } in
  fun loop(i: Int, v0: [[s3]], v1: s0, v2: [[s3]], v3: s8, v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s3]] = [[s3(s0([[0.0]], [[1.0]]))]] in
    let v1: s0 = s0([[2.0]], [[3.0]]) in
    let v2: [[s3]] = [[s3(s0([[4.0]], [[5.0]]))]] in
    let v3: s8 = s8([s7([s4([[s0([[6.0]], [[7.0]])], [s0([[8.0]], [[9.0]])]], s2([[s0([[10.0]], [[11.0]])]], [s0([[12.0]], [[13.0]])])), s4([[s0([[14.0]], [[15.0]])], [s0([[16.0]], [[17.0]])]], s2([[s0([[18.0]], [[19.0]])]], [s0([[20.0]], [[21.0]])])), s4([[s0([[22.0]], [[23.0]])], [s0([[24.0]], [[25.0]])]], s2([[s0([[26.0]], [[27.0]])]], [s0([[28.0]], [[29.0]])]))], [[s4([[s0([[30.0]], [[31.0]])], [s0([[32.0]], [[33.0]])]], s2([[s0([[34.0]], [[35.0]])]], [s0([[36.0]], [[37.0]])]))], [s4([[s0([[38.0]], [[39.0]])], [s0([[40.0]], [[41.0]])]], s2([[s0([[42.0]], [[43.0]])]], [s0([[44.0]], [[45.0]])]))], [s4([[s0([[46.0]], [[47.0]])], [s0([[48.0]], [[49.0]])]], s2([[s0([[50.0]], [[51.0]])]], [s0([[52.0]], [[53.0]])]))]]), s7([s4([[s0([[54.0]], [[55.0]])], [s0([[56.0]], [[57.0]])]], s2([[s0([[58.0]], [[59.0]])]], [s0([[60.0]], [[61.0]])])), s4([[s0([[62.0]], [[63.0]])], [s0([[64.0]], [[65.0]])]], s2([[s0([[66.0]], [[67.0]])]], [s0([[68.0]], [[69.0]])])), s4([[s0([[70.0]], [[71.0]])], [s0([[72.0]], [[73.0]])]], s2([[s0([[74.0]], [[75.0]])]], [s0([[76.0]], [[77.0]])]))], [[s4([[s0([[78.0]], [[79.0]])], [s0([[80.0]], [[81.0]])]], s2([[s0([[82.0]], [[83.0]])]], [s0([[84.0]], [[85.0]])]))], [s4([[s0([[86.0]], [[87.0]])], [s0([[88.0]], [[89.0]])]], s2([[s0([[90.0]], [[91.0]])]], [s0([[92.0]], [[93.0]])]))], [s4([[s0([[94.0]], [[95.0]])], [s0([[96.0]], [[97.0]])]], s2([[s0([[98.0]], [[99.0]])]], [s0([[100.0]], [[101.0]])]))]])]) in
    let v4: Float = 102.0 in
    let initialResult: Float = 102.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()