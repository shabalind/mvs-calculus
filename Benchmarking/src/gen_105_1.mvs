  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
    var p2: s0
  } in
  struct s2 {
    var p0: s0
    var p1: [[s0]]
    var p2: [s1]
  } in
  let f38: (s0) -> s0 = (v0: s0) -> s0 {
    var v4: s0 = v0 in
    var v6: s0 = v0 in
    let v7: [s0] = [v6, v0, v4, v6] in
    let v8: s0 = v7[3] in
    let v1: s0 = v7[2] in
    var v9: [s0] = v7 in
    let v11: s0 = v9[0] in
    v9[1] = v1 in
    let v5: [[Float]] = v6.p0 in
    let v14: [[Float]] = v1.p0 in
    var v17: [[Float]] = v14 in
    v17 = v14 in
    v6.p0 = v17 in
    let v26: [[Float]] = v8.p1 in
    v4.p1 = v26 in
    v6.p0 = v5 in
    v9[3] = v8 in
    v11
  } in
  let noinline_f0: (s2, Float) -> Float = (v0: s2, v1: Float) -> Float {
    let v3: s0 = v0.p0 in
    var v6: Float = v1 in
    var v11: s2 = v0 in
    let v10: s0 = f38(v3) in
    let v15: s0 = v11.p0 in
    let v14: s0 = f38(v10) in
    let v23: [[Float]] = v15.p1 in
    let v31: [Float] = v23[0] in
    let v47: Float = v31[0] in
    var v45: Float = v6 in
    var v54: Float = v45 in
    let v130: Float = v54 / v54 in
    v11.p0 = v14 in
    let v185: Float = v47 + v130 in
    v185
  } in
  fun loop(i: Int, v0: s2, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(s0([[0.0]], [[1.0], [2.0]]), [[s0([[3.0]], [[4.0], [5.0]])]], [s1(s0([[6.0]], [[7.0], [8.0]]), [s0([[9.0]], [[10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0]])], s0([[15.0]], [[16.0], [17.0]]))]) in
    let v1: Float = 18.0 in
    let initialResult: Float = 18.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()