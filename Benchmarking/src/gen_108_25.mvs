  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
  } in
  struct s3 {
    var p0: s0
    var p1: s1
  } in
  struct s6 {
    var p0: [s3]
    var p1: s0
  } in
  struct s7 {
    var p0: s0
    var p1: [s6]
  } in
  struct s12 {
    var p0: s3
    var p1: s7
  } in
  let f77: (s3) -> s3 = (v0: s3) -> s3 {
    v0
  } in
  let noinline_f0: (s12, Float) -> Float = (v0: s12, v1: Float) -> Float {
    let v2: s3 = v0.p0 in
    let v14: s3 = f77(v2) in
    var v80: Float = v1 in
    let v56: s1 = v14.p1 in
    let v46: [s0] = v56.p0 in
    let v62: s0 = v46[1] in
    let v49: [[Float]] = v62.p1 in
    let v116: [Float] = v49[0] in
    let v133: Float = v116[0] in
    let v211: Float = v80 / v133 in
    v211
  } in
  fun loop(i: Int, v0: s12, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s12 = s12(s3(s0([[0.0], [1.0]], [[2.0]]), s1([s0([[3.0], [4.0]], [[5.0]]), s0([[6.0], [7.0]], [[8.0]])], [[s0([[9.0], [10.0]], [[11.0]])]])), s7(s0([[12.0], [13.0]], [[14.0]]), [s6([s3(s0([[15.0], [16.0]], [[17.0]]), s1([s0([[18.0], [19.0]], [[20.0]]), s0([[21.0], [22.0]], [[23.0]])], [[s0([[24.0], [25.0]], [[26.0]])]])), s3(s0([[27.0], [28.0]], [[29.0]]), s1([s0([[30.0], [31.0]], [[32.0]]), s0([[33.0], [34.0]], [[35.0]])], [[s0([[36.0], [37.0]], [[38.0]])]]))], s0([[39.0], [40.0]], [[41.0]]))])) in
    let v1: Float = 42.0 in
    let initialResult: Float = 42.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()