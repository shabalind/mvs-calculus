  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s2 {
    var p0: [s0]
    var p1: [s0]
  } in
  let f1: (Float) -> Float = (v0: Float) -> Float {
    var v6: Float = v0 in
    var v3: Float = v6 in
    var v11: Float = v0 in
    let v4: [Float] = [v11] in
    let v15: Float = v4[0] in
    var v2: [Float] = v4 in
    v11 = v3 in
    var v10: [Float] = v2 in
    v2[0] = v15 in
    let v30: Float = v2[0] in
    var v28: [Float] = v10 in
    v2[0] = v30 in
    let v13: Float = v28[0] in
    v10 = v4 in
    v13
  } in
  let noinline_f0: (s2, [s2], Float) -> Float = (v0: s2, v1: [s2], v2: Float) -> Float {
    var v5: Float = v2 in
    let v8: [s0] = v0.p1 in
    let v7: Float = v5 * v5 in
    v5 = v2 in
    let v46: s0 = v8[0] in
    let v23: [[Float]] = v46.p0 in
    let v44: Float = f1(v7) in
    let v33: [Float] = v23[0] in
    var v38: [Float] = v33 in
    let v26: Float = v38[0] in
    v38[0] = v44 in
    v26
  } in
  fun loop(i: Int, v0: s2, v1: [s2], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2([s0([[0.0], [1.0]], [[2.0], [3.0]])], [s0([[4.0], [5.0]], [[6.0], [7.0]])]) in
    let v1: [s2] = [s2([s0([[8.0], [9.0]], [[10.0], [11.0]])], [s0([[12.0], [13.0]], [[14.0], [15.0]])]), s2([s0([[16.0], [17.0]], [[18.0], [19.0]])], [s0([[20.0], [21.0]], [[22.0], [23.0]])]), s2([s0([[24.0], [25.0]], [[26.0], [27.0]])], [s0([[28.0], [29.0]], [[30.0], [31.0]])])] in
    let v2: Float = 32.0 in
    let initialResult: Float = 32.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()