  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
    var p4: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
  }
  struct s2 {
    var p0: s0
    var p1: [s1]
  }
  struct s3 {
    var p0: [s2]
    var p1: s0
  }
  @inline(never)
  func f0(_ v0: [[s2]], _ v1: s3, _ v2: Double) -> Double {
    let v6: [Double] = [v2, v2, v2, v2]
    let v7: Double = v6[1]
    let v11: Double = v2 / v7
    let v9: Double = v6[2]
    var v18: [Double] = v6
    v18[1] = v11
    let v16: Double = v11 * v11
    v18[3] = v9
    var v29: Double = v2
    v18[2] = v16
    var v27: [Double] = v6
    let v34: Double = v27[0]
    v27[0] = v2
    v27[1] = v11
    v18[1] = v29
    let v37: Double = v18[3]
    let v66: Double = v34 / v37
    v18[3] = v29
    return v66
  }
  func benchmark() {
    let v0: [[s2]] = [[s2(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0], [4.0]], p2: [[5.0], [6.0]], p3: [[7.0]], p4: [[8.0], [9.0], [10.0]]), p1: [s1(p0: [s0(p0: [[11.0], [12.0]], p1: [[13.0], [14.0], [15.0]], p2: [[16.0], [17.0]], p3: [[18.0]], p4: [[19.0], [20.0], [21.0]]), s0(p0: [[22.0], [23.0]], p1: [[24.0], [25.0], [26.0]], p2: [[27.0], [28.0]], p3: [[29.0]], p4: [[30.0], [31.0], [32.0]])], p1: [[s0(p0: [[33.0], [34.0]], p1: [[35.0], [36.0], [37.0]], p2: [[38.0], [39.0]], p3: [[40.0]], p4: [[41.0], [42.0], [43.0]])], [s0(p0: [[44.0], [45.0]], p1: [[46.0], [47.0], [48.0]], p2: [[49.0], [50.0]], p3: [[51.0]], p4: [[52.0], [53.0], [54.0]])]]), s1(p0: [s0(p0: [[55.0], [56.0]], p1: [[57.0], [58.0], [59.0]], p2: [[60.0], [61.0]], p3: [[62.0]], p4: [[63.0], [64.0], [65.0]]), s0(p0: [[66.0], [67.0]], p1: [[68.0], [69.0], [70.0]], p2: [[71.0], [72.0]], p3: [[73.0]], p4: [[74.0], [75.0], [76.0]])], p1: [[s0(p0: [[77.0], [78.0]], p1: [[79.0], [80.0], [81.0]], p2: [[82.0], [83.0]], p3: [[84.0]], p4: [[85.0], [86.0], [87.0]])], [s0(p0: [[88.0], [89.0]], p1: [[90.0], [91.0], [92.0]], p2: [[93.0], [94.0]], p3: [[95.0]], p4: [[96.0], [97.0], [98.0]])]])])]]
    let v1: s3 = s3(p0: [s2(p0: s0(p0: [[99.0], [100.0]], p1: [[101.0], [102.0], [103.0]], p2: [[104.0], [105.0]], p3: [[106.0]], p4: [[107.0], [108.0], [109.0]]), p1: [s1(p0: [s0(p0: [[110.0], [111.0]], p1: [[112.0], [113.0], [114.0]], p2: [[115.0], [116.0]], p3: [[117.0]], p4: [[118.0], [119.0], [120.0]]), s0(p0: [[121.0], [122.0]], p1: [[123.0], [124.0], [125.0]], p2: [[126.0], [127.0]], p3: [[128.0]], p4: [[129.0], [130.0], [131.0]])], p1: [[s0(p0: [[132.0], [133.0]], p1: [[134.0], [135.0], [136.0]], p2: [[137.0], [138.0]], p3: [[139.0]], p4: [[140.0], [141.0], [142.0]])], [s0(p0: [[143.0], [144.0]], p1: [[145.0], [146.0], [147.0]], p2: [[148.0], [149.0]], p3: [[150.0]], p4: [[151.0], [152.0], [153.0]])]]), s1(p0: [s0(p0: [[154.0], [155.0]], p1: [[156.0], [157.0], [158.0]], p2: [[159.0], [160.0]], p3: [[161.0]], p4: [[162.0], [163.0], [164.0]]), s0(p0: [[165.0], [166.0]], p1: [[167.0], [168.0], [169.0]], p2: [[170.0], [171.0]], p3: [[172.0]], p4: [[173.0], [174.0], [175.0]])], p1: [[s0(p0: [[176.0], [177.0]], p1: [[178.0], [179.0], [180.0]], p2: [[181.0], [182.0]], p3: [[183.0]], p4: [[184.0], [185.0], [186.0]])], [s0(p0: [[187.0], [188.0]], p1: [[189.0], [190.0], [191.0]], p2: [[192.0], [193.0]], p3: [[194.0]], p4: [[195.0], [196.0], [197.0]])]])])], p1: s0(p0: [[198.0], [199.0]], p1: [[200.0], [201.0], [202.0]], p2: [[203.0], [204.0]], p3: [[205.0]], p4: [[206.0], [207.0], [208.0]]))
    let v2: Double = 209.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 209.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
