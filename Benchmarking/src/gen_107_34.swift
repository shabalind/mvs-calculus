  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
  }
  struct s2 {
    var p0: s0
    var p1: [s1]
  }
  struct s3 {
    var p0: s1
    var p1: [[s1]]
  }
  struct s4 {
    var p0: s3
    var p1: s2
  }
  struct s5 {
    var p0: s4
    var p1: [s1]
  }
  struct s6 {
    var p0: [[s1]]
    var p1: s0
  }
  struct s7 {
    var p0: s3
    var p1: s5
  }
  @inline(never)
  func f0(_ v0: s7, _ v1: s6, _ v2: Double) -> Double {
    let v6: s3 = v0.p0
    let v14: s1 = v6.p0
    var v11: s1 = v14
    let v39: [s0] = v11.p1
    let v40: s0 = v39[1]
    let v100: Double = v2 - v2
    let v35: [[Double]] = v40.p1
    let v84: [Double] = v35[0]
    var v96: Double = v100
    let v177: Double = v84[0]
    let v75: Double = v96 * v177
    return v75
  }
  func benchmark() {
    let v0: s7 = s7(p0: s3(p0: s1(p0: [[s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0]])], [s0(p0: [[5.0], [6.0], [7.0]], p1: [[8.0], [9.0]])]], p1: [s0(p0: [[10.0], [11.0], [12.0]], p1: [[13.0], [14.0]]), s0(p0: [[15.0], [16.0], [17.0]], p1: [[18.0], [19.0]])]), p1: [[s1(p0: [[s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0], [24.0]])], [s0(p0: [[25.0], [26.0], [27.0]], p1: [[28.0], [29.0]])]], p1: [s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0]]), s0(p0: [[35.0], [36.0], [37.0]], p1: [[38.0], [39.0]])])], [s1(p0: [[s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0], [44.0]])], [s0(p0: [[45.0], [46.0], [47.0]], p1: [[48.0], [49.0]])]], p1: [s0(p0: [[50.0], [51.0], [52.0]], p1: [[53.0], [54.0]]), s0(p0: [[55.0], [56.0], [57.0]], p1: [[58.0], [59.0]])])]]), p1: s5(p0: s4(p0: s3(p0: s1(p0: [[s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0], [64.0]])], [s0(p0: [[65.0], [66.0], [67.0]], p1: [[68.0], [69.0]])]], p1: [s0(p0: [[70.0], [71.0], [72.0]], p1: [[73.0], [74.0]]), s0(p0: [[75.0], [76.0], [77.0]], p1: [[78.0], [79.0]])]), p1: [[s1(p0: [[s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0], [84.0]])], [s0(p0: [[85.0], [86.0], [87.0]], p1: [[88.0], [89.0]])]], p1: [s0(p0: [[90.0], [91.0], [92.0]], p1: [[93.0], [94.0]]), s0(p0: [[95.0], [96.0], [97.0]], p1: [[98.0], [99.0]])])], [s1(p0: [[s0(p0: [[100.0], [101.0], [102.0]], p1: [[103.0], [104.0]])], [s0(p0: [[105.0], [106.0], [107.0]], p1: [[108.0], [109.0]])]], p1: [s0(p0: [[110.0], [111.0], [112.0]], p1: [[113.0], [114.0]]), s0(p0: [[115.0], [116.0], [117.0]], p1: [[118.0], [119.0]])])]]), p1: s2(p0: s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0], [124.0]]), p1: [s1(p0: [[s0(p0: [[125.0], [126.0], [127.0]], p1: [[128.0], [129.0]])], [s0(p0: [[130.0], [131.0], [132.0]], p1: [[133.0], [134.0]])]], p1: [s0(p0: [[135.0], [136.0], [137.0]], p1: [[138.0], [139.0]]), s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0], [144.0]])])])), p1: [s1(p0: [[s0(p0: [[145.0], [146.0], [147.0]], p1: [[148.0], [149.0]])], [s0(p0: [[150.0], [151.0], [152.0]], p1: [[153.0], [154.0]])]], p1: [s0(p0: [[155.0], [156.0], [157.0]], p1: [[158.0], [159.0]]), s0(p0: [[160.0], [161.0], [162.0]], p1: [[163.0], [164.0]])])]))
    let v1: s6 = s6(p0: [[s1(p0: [[s0(p0: [[165.0], [166.0], [167.0]], p1: [[168.0], [169.0]])], [s0(p0: [[170.0], [171.0], [172.0]], p1: [[173.0], [174.0]])]], p1: [s0(p0: [[175.0], [176.0], [177.0]], p1: [[178.0], [179.0]]), s0(p0: [[180.0], [181.0], [182.0]], p1: [[183.0], [184.0]])])], [s1(p0: [[s0(p0: [[185.0], [186.0], [187.0]], p1: [[188.0], [189.0]])], [s0(p0: [[190.0], [191.0], [192.0]], p1: [[193.0], [194.0]])]], p1: [s0(p0: [[195.0], [196.0], [197.0]], p1: [[198.0], [199.0]]), s0(p0: [[200.0], [201.0], [202.0]], p1: [[203.0], [204.0]])])], [s1(p0: [[s0(p0: [[205.0], [206.0], [207.0]], p1: [[208.0], [209.0]])], [s0(p0: [[210.0], [211.0], [212.0]], p1: [[213.0], [214.0]])]], p1: [s0(p0: [[215.0], [216.0], [217.0]], p1: [[218.0], [219.0]]), s0(p0: [[220.0], [221.0], [222.0]], p1: [[223.0], [224.0]])])]], p1: s0(p0: [[225.0], [226.0], [227.0]], p1: [[228.0], [229.0]]))
    let v2: Double = 230.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 230.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
