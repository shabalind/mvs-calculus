  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  let f72: (s1) -> s1 = (v0: s1) -> s1 {
    v0
  } in
  let f71: (s0) -> s0 = (v0: s0) -> s0 {
    var v5: s0 = v0 in
    let v3: [[Float]] = v5.p1 in
    var v4: [[Float]] = v3 in
    v5.p1 = v4 in
    let v2: [[Float]] = v0.p1 in
    let v1: [Float] = v2[2] in
    let v9: [[Float]] = v0.p0 in
    var v8: s0 = v0 in
    v4[1] = v1 in
    var v6: [[Float]] = v9 in
    let v7: [[Float]] = v8.p1 in
    v8.p1 = v4 in
    v8.p1 = v4 in
    var v16: [[Float]] = v6 in
    var v13: [[Float]] = v16 in
    let v25: [[Float]] = v8.p0 in
    v8.p1 = v2 in
    let v24: [[Float]] = v0.p1 in
    let v18: [Float] = v7[2] in
    v5.p0 = v25 in
    v8.p1 = v3 in
    v8.p0 = v13 in
    let v14: [[[Float]]] = [v3, v2, v4, v7, v3, v24, v24] in
    let v36: [[Float]] = v14[3] in
    v5.p0 = v13 in
    v16[0] = v18 in
    var v90: s0 = v0 in
    v90.p1 = v36 in
    v90
  } in
  let f69: (s0) -> s0 = (v0: s0) -> s0 {
    let v2: s0 = f71(v0) in
    let v4: [[Float]] = v0.p1 in
    let v5: s0 = f71(v0) in
    var v1: s0 = v2 in
    let v9: s0 = f71(v5) in
    let v7: [[Float]] = v1.p0 in
    v1.p1 = v4 in
    var v19: [[Float]] = v7 in
    v1.p0 = v19 in
    let v22: [[Float]] = v9.p0 in
    let v14: [Float] = v7[0] in
    let v10: [Float] = v7[0] in
    var v11: [Float] = v14 in
    var v17: [Float] = v10 in
    v19[0] = v14 in
    let v29: s0 = f71(v1) in
    var v20: [[Float]] = v4 in
    let v16: [Float] = v20[1] in
    v1.p0 = v22 in
    let v25: s0 = s0(v19, v20) in
    var v21: [[Float]] = v7 in
    let v18: [[Float]] = v25.p0 in
    let v36: [Float] = v19[0] in
    let v66: [[Float]] = v5.p1 in
    let v33: [[Float]] = v29.p1 in
    v20[2] = v14 in
    v1.p0 = v21 in
    v19[0] = v17 in
    let v31: s0 = f71(v29) in
    v1.p1 = v33 in
    v21[0] = v11 in
    let v24: Float = v10[0] in
    let v39: Float = v24 * v24 in
    var v46: Float = v24 in
    let v72: Float = v46 / v39 in
    let v61: Float = v11[0] in
    v20[2] = v16 in
    let v32: Float = v14[0] in
    let v50: [Float] = v66[1] in
    v17[0] = v61 in
    v17[0] = v72 in
    let v91: Float = v36[0] in
    var v90: [[Float]] = v20 in
    v17[0] = v24 in
    v17 = v10 in
    v1 = v31 in
    v21[0] = v50 in
    let v142: [Float] = [v91, v72, v72, v46, v32] in
    let v77: s0 = s0(v18, v90) in
    v1.p1 = v20 in
    v1.p1 = v90 in
    v19[0] = v14 in
    let v171: Float = v142[0] in
    v17[0] = v171 in
    v77
  } in
  let f67: (s1) -> s1 = (v0: s1) -> s1 {
    let v1: s1 = f72(v0) in
    let v7: [s0] = v1.p0 in
    let v3: s1 = f72(v0) in
    let v5: s0 = v7[0] in
    let v6: [s0] = v3.p0 in
    let v2: s0 = v6[0] in
    var v8: s1 = v3 in
    v8 = v0 in
    var v12: [s0] = v7 in
    let v10: s0 = v0.p1 in
    v12[1] = v5 in
    let v15: s0 = f71(v2) in
    let v13: [s0] = v1.p0 in
    v8.p1 = v15 in
    v8.p0 = v12 in
    v8.p0 = v6 in
    let v14: s0 = f69(v10) in
    v12[1] = v2 in
    v8.p0 = v13 in
    v8.p1 = v14 in
    v8
  } in
  let f30: (s1) -> s1 = (v0: s1) -> s1 {
    let v10: s1 = f72(v0) in
    let v2: s1 = f67(v10) in
    let v72: [s0] = v2.p0 in
    var v71: s1 = v0 in
    v71.p0 = v72 in
    v71
  } in
  let f22: (s0, [s0], s1) -> [s0] = (v0: s0, v1: [s0], v2: s1) -> [s0] {
    let v5: s0 = v1[1] in
    let v9: s0 = f71(v5) in
    var v18: [s0] = v1 in
    v18[0] = v9 in
    let v17: s0 = v2.p1 in
    v18[0] = v9 in
    v18[0] = v17 in
    v18
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    let v4: [s0] = v0.p0 in
    var v6: s1 = v0 in
    var v7: s1 = v6 in
    var v11: [s0] = v4 in
    v7.p0 = v11 in
    let v2: s1 = f30(v6) in
    let v8: s0 = v2.p1 in
    let v18: [[Float]] = v8.p0 in
    let v21: [s0] = f22(v8, v11, v7) in
    let v30: s0 = v4[0] in
    v11[1] = v30 in
    let v31: [Float] = v18[0] in
    var v52: [Float] = v31 in
    v6.p0 = v21 in
    let v84: Float = v52[0] in
    v84
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([s0([[0.0]], [[1.0], [2.0], [3.0]]), s0([[4.0]], [[5.0], [6.0], [7.0]])], s0([[8.0]], [[9.0], [10.0], [11.0]])) in
    let v1: Float = 12.0 in
    let initialResult: Float = 12.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()