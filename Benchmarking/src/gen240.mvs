  let noinline_f0: ([[Float]], [[Float]], [Float], Float) -> Float = (v0: [[Float]], v1: [[Float]], v2: [Float], v3: Float) -> Float {
    var v6: [Float] = v2 in
    v6[0] = v3 in
    v6[1] = v3 in
    let v5: Float = v2[1] in
    v6[0] = v3 in
    var v7: [Float] = v6 in
    let v13: [Float] = v1[2] in
    v7[0] = v3 in
    let v4: Float = v5 / v5 in
    v6[0] = v4 in
    let v14: [Float] = v0[0] in
    var v39: [Float] = v13 in
    let v21: Float = v39[0] in
    var v26: Float = v3 in
    var v19: Float = v21 in
    let v33: Float = v2[0] in
    v39[0] = v26 in
    var v24: Float = v33 in
    v39[0] = v5 in
    var v44: [Float] = v39 in
    v7[0] = v19 in
    var v31: [Float] = v2 in
    let v59: Float = v2[1] in
    v44 = v39 in
    v39[0] = v24 in
    var v42: Float = v59 in
    let v77: Float = v21 / v21 in
    var v65: [Float] = v7 in
    let v100: [[Float]] = [v65, v31, v7, v6, v7, v7] in
    let v120: [Float] = v100[5] in
    v44[0] = v5 in
    let v78: Float = v120[0] in
    v65[2] = v77 in
    v7[0] = v24 in
    var v119: [Float] = v2 in
    let v143: Float = v119[2] in
    let v79: Float = v14[0] in
    v119[0] = v79 in
    let v103: Float = v44[0] in
    v31[2] = v143 in
    var v301: [Float] = v7 in
    v44[0] = v26 in
    v65[2] = v103 in
    v7 = v301 in
    var v177: Float = v78 in
    v301[2] = v42 in
    v177
  } in
  fun loop(i: Int, v0: [[Float]], v1: [[Float]], v2: [Float], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0]] in
    let v1: [[Float]] = [[1.0], [2.0], [3.0]] in
    let v2: [Float] = [4.0, 5.0, 6.0] in
    let v3: Float = 7.0 in
    let initialResult: Float = 7.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()