  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s3 {
    var p0: s0
    var p1: s1
  } in
  struct s4 {
    var p0: [[s1]]
    var p1: [s3]
  } in
  struct s9 {
    var p0: [s1]
    var p1: [[s0]]
  } in
  struct s11 {
    var p0: s4
    var p1: [s9]
  } in
  let f13: (s11) -> s11 = (v0: s11) -> s11 {
    let v6: s4 = v0.p0 in
    var v4: s4 = v6 in
    let v11: [s4] = [v6, v6] in
    let v14: s4 = v11[0] in
    var v26: s11 = v0 in
    v26.p0 = v14 in
    let v41: s4 = v11[0] in
    var v29: s11 = v26 in
    v29.p0 = v4 in
    let v22: s4 = v11[1] in
    let v84: s4 = v11[0] in
    v29.p0 = v84 in
    v26.p0 = v41 in
    let v66: [s3] = v41.p1 in
    v29.p0 = v22 in
    v26.p0 = v6 in
    v4.p1 = v66 in
    v29
  } in
  let f3: (s4) -> s4 = (v0: s4) -> s4 {
    let v7: [[s1]] = v0.p0 in
    var v6: s4 = v0 in
    let v2: [s3] = v6.p1 in
    v6.p1 = v2 in
    var v8: [[s1]] = v7 in
    let v1: [[s1]] = v0.p0 in
    let v4: [[s1]] = v6.p0 in
    v6.p0 = v4 in
    v6.p0 = v8 in
    let v10: [s1] = v1[2] in
    v6.p0 = v1 in
    v8[1] = v10 in
    var v36: s4 = v6 in
    let v59: [s3] = v0.p1 in
    let v58: [[s1]] = v36.p0 in
    v6.p0 = v58 in
    v6.p1 = v59 in
    v36
  } in
  let noinline_f0: (s11, Float) -> Float = (v0: s11, v1: Float) -> Float {
    let v5: s11 = f13(v0) in
    var v3: s11 = v5 in
    v3 = v5 in
    let v8: s11 = f13(v0) in
    var v6: s11 = v3 in
    let v7: s11 = f13(v6) in
    var v2: s11 = v7 in
    let v9: s11 = f13(v8) in
    let v10: s11 = f13(v9) in
    let v12: s11 = f13(v10) in
    let v16: s4 = v2.p0 in
    let v11: [s3] = v16.p1 in
    let v14: s3 = v11[1] in
    let v24: [s9] = v3.p1 in
    let v25: s1 = v14.p1 in
    v2.p0 = v16 in
    let v26: s0 = v25.p0 in
    v2.p1 = v24 in
    v2.p0 = v16 in
    var v20: s0 = v26 in
    let v17: [s9] = v10.p1 in
    let v59: [s9] = v12.p1 in
    let v27: s4 = f3(v16) in
    let v43: [[Float]] = v20.p0 in
    let v29: [Float] = v43[0] in
    let v35: Float = v29[0] in
    v3.p1 = v59 in
    v6.p1 = v17 in
    var v42: s4 = v27 in
    let v57: s4 = f3(v42) in
    v3.p1 = v17 in
    let v82: Float = v1 + v1 in
    let v52: Float = v35 + v82 in
    v6.p0 = v57 in
    v52
  } in
  fun loop(i: Int, v0: s11, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s11 = s11(s4([[s1(s0([[0.0]], [[1.0], [2.0], [3.0]]), s0([[4.0]], [[5.0], [6.0], [7.0]]))], [s1(s0([[8.0]], [[9.0], [10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0], [15.0]]))], [s1(s0([[16.0]], [[17.0], [18.0], [19.0]]), s0([[20.0]], [[21.0], [22.0], [23.0]]))]], [s3(s0([[24.0]], [[25.0], [26.0], [27.0]]), s1(s0([[28.0]], [[29.0], [30.0], [31.0]]), s0([[32.0]], [[33.0], [34.0], [35.0]]))), s3(s0([[36.0]], [[37.0], [38.0], [39.0]]), s1(s0([[40.0]], [[41.0], [42.0], [43.0]]), s0([[44.0]], [[45.0], [46.0], [47.0]])))]), [s9([s1(s0([[48.0]], [[49.0], [50.0], [51.0]]), s0([[52.0]], [[53.0], [54.0], [55.0]])), s1(s0([[56.0]], [[57.0], [58.0], [59.0]]), s0([[60.0]], [[61.0], [62.0], [63.0]]))], [[s0([[64.0]], [[65.0], [66.0], [67.0]])], [s0([[68.0]], [[69.0], [70.0], [71.0]])]]), s9([s1(s0([[72.0]], [[73.0], [74.0], [75.0]]), s0([[76.0]], [[77.0], [78.0], [79.0]])), s1(s0([[80.0]], [[81.0], [82.0], [83.0]]), s0([[84.0]], [[85.0], [86.0], [87.0]]))], [[s0([[88.0]], [[89.0], [90.0], [91.0]])], [s0([[92.0]], [[93.0], [94.0], [95.0]])]]), s9([s1(s0([[96.0]], [[97.0], [98.0], [99.0]]), s0([[100.0]], [[101.0], [102.0], [103.0]])), s1(s0([[104.0]], [[105.0], [106.0], [107.0]]), s0([[108.0]], [[109.0], [110.0], [111.0]]))], [[s0([[112.0]], [[113.0], [114.0], [115.0]])], [s0([[116.0]], [[117.0], [118.0], [119.0]])]])]) in
    let v1: Float = 120.0 in
    let initialResult: Float = 120.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()