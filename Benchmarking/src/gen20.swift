  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: s0
    var p1: [s0]
    var p2: [s1]
    var p3: [s1]
  }
  struct s3 {
    var p0: s2
    var p1: s1
  }
  struct s4 {
    var p0: s0
    var p1: [s0]
    var p2: [s3]
    var p3: [s3]
    var p4: s2
  }
  func f19(_ v0: Double, _ v1: [s0]) -> Double {
    let v8: s0 = v1[0]
    let v6: [[Double]] = v8.p0
    let v2: s0 = v1[0]
    let v5: [[Double]] = v2.p0
    let v10: [[Double]] = v8.p1
    var v4: [[Double]] = v10
    let v11: s0 = v1[0]
    var v18: [[Double]] = v4
    let v14: [[Double]] = v8.p0
    let v19: [Double] = v18[0]
    let v22: [Double] = v14[0]
    let v41: [[Double]] = [v19, v19]
    let v29: [Double] = v5[2]
    v18[0] = v19
    let v36: [[Double]] = v11.p0
    v18[0] = v29
    let v30: [Double] = v41[0]
    let v66: [Double] = v41[0]
    let v38: [Double] = v18[0]
    var v94: [[Double]] = v41
    let v59: [Double] = v94[1]
    var v63: [[Double]] = v94
    let v34: [Double] = v6[0]
    v94[1] = v30
    let v117: [Double] = v36[0]
    v18 = v10
    var v37: [[Double]] = v63
    var v46: [Double] = v117
    let v55: [Double] = v4[0]
    let v226: [Double] = v94[1]
    v37 = v41
    let v83: [[Double]] = v11.p1
    v18[0] = v59
    v94[1] = v55
    v18[0] = v38
    let v104: [Double] = v37[1]
    v94[1] = v34
    v18 = v83
    v37[1] = v46
    let v174: Double = v22[0]
    v94[1] = v226
    v4[0] = v29
    v37[0] = v66
    let v91: Double = v104[0]
    let v118: Double = v174 - v91
    return v118
  }
  func f18(_ v0: [s1]) -> [s1] {
    let v5: s1 = v0[0]
    let v6: s1 = v0[0]
    var v7: s1 = v6
    let v10: s0 = v5.p1
    let v1: s0 = v7.p1
    var v3: s0 = v1
    var v4: s0 = v3
    var v17: [s1] = v0
    v7.p1 = v4
    let v9: [[Double]] = v10.p0
    let v11: s0 = v7.p1
    let v16: [[Double]] = v4.p1
    var v14: [[Double]] = v16
    var v29: [[Double]] = v14
    v7.p0 = v3
    var v20: s0 = v11
    v17[0] = v7
    let v15: [Double] = v9[2]
    v14[0] = v15
    let v24: [[Double]] = v20.p0
    v29[0] = v15
    v3 = v11
    v3.p0 = v24
    let v30: [Double] = v14[0]
    v14[0] = v30
    let v74: s1 = v0[0]
    v17[0] = v74
    v29[0] = v15
    v14[0] = v30
    v20.p1 = v29
    v20.p1 = v16
    v17[0] = v6
    return v17
  }
  func f16(_ v0: s0) -> s0 {
    let v8: [[Double]] = v0.p1
    let v1: [[[Double]]] = [v8, v8, v8, v8]
    var v7: s0 = v0
    v7 = v0
    var v2: [[Double]] = v8
    let v3: [[Double]] = v1[0]
    let v6: [Double] = v2[0]
    v7.p1 = v3
    v2[0] = v6
    v7.p1 = v3
    let v4: [[Double]] = v0.p1
    var v5: [[Double]] = v4
    v5[0] = v6
    var v12: s0 = v7
    let v13: [Double] = v8[0]
    let v17: [[Double]] = v1[1]
    let v10: [[Double]] = v12.p0
    v2[0] = v6
    var v15: [[Double]] = v10
    v7.p0 = v15
    var v14: [[Double]] = v10
    var v28: s0 = v7
    let v24: s0 = s0(p0: v14, p1: v8)
    let v18: [Double] = v2[0]
    v5[0] = v18
    let v36: [[Double]] = v7.p0
    let v19: [Double] = v10[2]
    v2[0] = v19
    var v26: s0 = v24
    v12.p0 = v10
    let v25: [[Double]] = v7.p0
    let v32: [[Double]] = v12.p0
    v7.p0 = v10
    v26.p1 = v2
    var v65: s0 = v7
    v7.p1 = v5
    let v45: [[Double]] = v12.p1
    v12.p0 = v36
    var v82: [[[Double]]] = v1
    v65.p0 = v14
    v26.p1 = v3
    let v52: [[Double]] = v28.p0
    v7.p0 = v25
    let v86: [s0] = [v24, v24, v65]
    let v56: s1 = s1(p0: v7, p1: v12)
    v65.p0 = v14
    v28.p1 = v45
    let v68: [[Double]] = v12.p0
    let v114: [[Double]] = v82[2]
    let v95: s0 = v56.p0
    v12.p1 = v114
    v65.p0 = v14
    v14[1] = v13
    v12.p1 = v17
    v7.p0 = v68
    v26 = v95
    let v97: s0 = v86[2]
    v7.p0 = v52
    v82[1] = v45
    v26.p0 = v32
    v12 = v26
    return v97
  }
  func f11(_ v0: s1) -> s1 {
    return v0
  }
  func f8(_ v0: s1) -> s1 {
    let v1: s1 = f11(v0)
    var v2: s1 = v1
    let v5: s0 = v2.p1
    let v7: s0 = f16(v5)
    v2.p0 = v7
    return v2
  }
  func f4(_ v0: [s1], _ v1: s1, _ v2: s0, _ v3: [s1]) -> [s1] {
    var v5: [s1] = v3
    let v8: [[s1]] = [v3, v5]
    v5 = v3
    let v7: [s1] = v8[1]
    v5 = v7
    v5[0] = v1
    v5[0] = v1
    let v17: s1 = f8(v1)
    let v28: [s1] = v8[1]
    let v31: s1 = f11(v17)
    var v46: [s1] = v28
    var v54: [s1] = v46
    let v115: [s1] = f18(v54)
    v54[0] = v31
    return v115
  }
  func f3(_ v0: s0, _ v1: [s2]) -> s0 {
    let v8: s0 = f16(v0)
    let v6: [[Double]] = v8.p0
    let v2: s0 = f16(v8)
    var v9: s0 = v2
    v9.p0 = v6
    let v18: s0 = f16(v9)
    return v18
  }
  func f2(_ v0: s2, _ v1: s0) -> s2 {
    let v6: s0 = f16(v1)
    let v5: [s1] = v0.p3
    let v4: [[Double]] = v1.p0
    let v8: s0 = f16(v6)
    let v3: s1 = v5[0]
    var v2: [s1] = v5
    v2[0] = v3
    var v9: s0 = v1
    v9.p0 = v4
    let v13: [[Double]] = v1.p0
    v9.p0 = v13
    v9.p0 = v13
    var v11: s1 = v3
    v2[0] = v11
    v2[0] = v3
    let v20: [s1] = f4(v5, v11, v1, v2)
    let v21: [s1] = f18(v20)
    v9.p0 = v13
    v9.p0 = v13
    let v24: s1 = s1(p0: v8, p1: v6)
    v2[0] = v24
    let v34: [s1] = f4(v20, v11, v9, v2)
    let v43: s1 = v21[0]
    v2[0] = v43
    let v56: [s0] = v0.p1
    let v150: [[Double]] = v8.p0
    let v87: [s1] = v0.p2
    let v157: [s0] = v0.p1
    let v69: s0 = f16(v1)
    let v70: [s2] = [v0, v0, v0]
    var v96: s0 = v69
    let v118: s0 = f3(v96, v70)
    let v90: s0 = v56[1]
    v96.p0 = v150
    v11.p1 = v118
    let v142: [s1] = f4(v20, v11, v90, v34)
    let v193: s2 = s2(p0: v118, p1: v157, p2: v87, p3: v142)
    v2[0] = v43
    return v193
  }
  @inline(never)
  func f0(_ v0: s3, _ v1: s4, _ v2: [s4], _ v3: s1, _ v4: [[s3]], _ v5: Double) -> Double {
    var v7: s1 = v3
    let v6: s1 = f8(v7)
    let v8: s2 = v0.p0
    let v9: [s1] = v8.p2
    let v30: s0 = v7.p0
    let v17: s1 = f8(v6)
    v7.p0 = v30
    let v15: s0 = f16(v30)
    let v14: s0 = v17.p0
    let v45: s2 = f2(v8, v14)
    var v21: s2 = v8
    v7.p1 = v14
    let v36: [s0] = v21.p1
    v21 = v45
    let v40: s0 = f16(v14)
    let v61: s0 = v36[1]
    v21.p0 = v61
    let v49: [s0] = v45.p1
    var v38: [s0] = v49
    v38[0] = v40
    v38[1] = v61
    v7.p0 = v61
    var v60: [s0] = v49
    let v124: [[Double]] = v61.p1
    let v56: [Double] = v124[0]
    var v92: s0 = v15
    v21.p1 = v60
    v38 = v49
    v21.p2 = v9
    v21.p1 = v38
    let v138: Double = v56[0]
    let v102: s0 = f16(v14)
    v92 = v102
    v60[2] = v92
    v60[0] = v102
    v21.p1 = v36
    v21.p1 = v49
    let v167: Double = f19(v138, v38)
    return v167
  }
  func benchmark() {
    let v0: s3 = s3(p0: s2(p0: s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0]]), p1: [s0(p0: [[4.0], [5.0], [6.0]], p1: [[7.0]]), s0(p0: [[8.0], [9.0], [10.0]], p1: [[11.0]]), s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0]])], p2: [s1(p0: s0(p0: [[16.0], [17.0], [18.0]], p1: [[19.0]]), p1: s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0]])), s1(p0: s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0]]), p1: s0(p0: [[28.0], [29.0], [30.0]], p1: [[31.0]]))], p3: [s1(p0: s0(p0: [[32.0], [33.0], [34.0]], p1: [[35.0]]), p1: s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0]]))]), p1: s1(p0: s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0]]), p1: s0(p0: [[44.0], [45.0], [46.0]], p1: [[47.0]])))
    let v1: s4 = s4(p0: s0(p0: [[48.0], [49.0], [50.0]], p1: [[51.0]]), p1: [s0(p0: [[52.0], [53.0], [54.0]], p1: [[55.0]]), s0(p0: [[56.0], [57.0], [58.0]], p1: [[59.0]])], p2: [s3(p0: s2(p0: s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0]]), p1: [s0(p0: [[64.0], [65.0], [66.0]], p1: [[67.0]]), s0(p0: [[68.0], [69.0], [70.0]], p1: [[71.0]]), s0(p0: [[72.0], [73.0], [74.0]], p1: [[75.0]])], p2: [s1(p0: s0(p0: [[76.0], [77.0], [78.0]], p1: [[79.0]]), p1: s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0]])), s1(p0: s0(p0: [[84.0], [85.0], [86.0]], p1: [[87.0]]), p1: s0(p0: [[88.0], [89.0], [90.0]], p1: [[91.0]]))], p3: [s1(p0: s0(p0: [[92.0], [93.0], [94.0]], p1: [[95.0]]), p1: s0(p0: [[96.0], [97.0], [98.0]], p1: [[99.0]]))]), p1: s1(p0: s0(p0: [[100.0], [101.0], [102.0]], p1: [[103.0]]), p1: s0(p0: [[104.0], [105.0], [106.0]], p1: [[107.0]]))), s3(p0: s2(p0: s0(p0: [[108.0], [109.0], [110.0]], p1: [[111.0]]), p1: [s0(p0: [[112.0], [113.0], [114.0]], p1: [[115.0]]), s0(p0: [[116.0], [117.0], [118.0]], p1: [[119.0]]), s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0]])], p2: [s1(p0: s0(p0: [[124.0], [125.0], [126.0]], p1: [[127.0]]), p1: s0(p0: [[128.0], [129.0], [130.0]], p1: [[131.0]])), s1(p0: s0(p0: [[132.0], [133.0], [134.0]], p1: [[135.0]]), p1: s0(p0: [[136.0], [137.0], [138.0]], p1: [[139.0]]))], p3: [s1(p0: s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0]]), p1: s0(p0: [[144.0], [145.0], [146.0]], p1: [[147.0]]))]), p1: s1(p0: s0(p0: [[148.0], [149.0], [150.0]], p1: [[151.0]]), p1: s0(p0: [[152.0], [153.0], [154.0]], p1: [[155.0]])))], p3: [s3(p0: s2(p0: s0(p0: [[156.0], [157.0], [158.0]], p1: [[159.0]]), p1: [s0(p0: [[160.0], [161.0], [162.0]], p1: [[163.0]]), s0(p0: [[164.0], [165.0], [166.0]], p1: [[167.0]]), s0(p0: [[168.0], [169.0], [170.0]], p1: [[171.0]])], p2: [s1(p0: s0(p0: [[172.0], [173.0], [174.0]], p1: [[175.0]]), p1: s0(p0: [[176.0], [177.0], [178.0]], p1: [[179.0]])), s1(p0: s0(p0: [[180.0], [181.0], [182.0]], p1: [[183.0]]), p1: s0(p0: [[184.0], [185.0], [186.0]], p1: [[187.0]]))], p3: [s1(p0: s0(p0: [[188.0], [189.0], [190.0]], p1: [[191.0]]), p1: s0(p0: [[192.0], [193.0], [194.0]], p1: [[195.0]]))]), p1: s1(p0: s0(p0: [[196.0], [197.0], [198.0]], p1: [[199.0]]), p1: s0(p0: [[200.0], [201.0], [202.0]], p1: [[203.0]]))), s3(p0: s2(p0: s0(p0: [[204.0], [205.0], [206.0]], p1: [[207.0]]), p1: [s0(p0: [[208.0], [209.0], [210.0]], p1: [[211.0]]), s0(p0: [[212.0], [213.0], [214.0]], p1: [[215.0]]), s0(p0: [[216.0], [217.0], [218.0]], p1: [[219.0]])], p2: [s1(p0: s0(p0: [[220.0], [221.0], [222.0]], p1: [[223.0]]), p1: s0(p0: [[224.0], [225.0], [226.0]], p1: [[227.0]])), s1(p0: s0(p0: [[228.0], [229.0], [230.0]], p1: [[231.0]]), p1: s0(p0: [[232.0], [233.0], [234.0]], p1: [[235.0]]))], p3: [s1(p0: s0(p0: [[236.0], [237.0], [238.0]], p1: [[239.0]]), p1: s0(p0: [[240.0], [241.0], [242.0]], p1: [[243.0]]))]), p1: s1(p0: s0(p0: [[244.0], [245.0], [246.0]], p1: [[247.0]]), p1: s0(p0: [[248.0], [249.0], [250.0]], p1: [[251.0]])))], p4: s2(p0: s0(p0: [[252.0], [253.0], [254.0]], p1: [[255.0]]), p1: [s0(p0: [[256.0], [257.0], [258.0]], p1: [[259.0]]), s0(p0: [[260.0], [261.0], [262.0]], p1: [[263.0]]), s0(p0: [[264.0], [265.0], [266.0]], p1: [[267.0]])], p2: [s1(p0: s0(p0: [[268.0], [269.0], [270.0]], p1: [[271.0]]), p1: s0(p0: [[272.0], [273.0], [274.0]], p1: [[275.0]])), s1(p0: s0(p0: [[276.0], [277.0], [278.0]], p1: [[279.0]]), p1: s0(p0: [[280.0], [281.0], [282.0]], p1: [[283.0]]))], p3: [s1(p0: s0(p0: [[284.0], [285.0], [286.0]], p1: [[287.0]]), p1: s0(p0: [[288.0], [289.0], [290.0]], p1: [[291.0]]))]))
    let v2: [s4] = [s4(p0: s0(p0: [[292.0], [293.0], [294.0]], p1: [[295.0]]), p1: [s0(p0: [[296.0], [297.0], [298.0]], p1: [[299.0]]), s0(p0: [[300.0], [301.0], [302.0]], p1: [[303.0]])], p2: [s3(p0: s2(p0: s0(p0: [[304.0], [305.0], [306.0]], p1: [[307.0]]), p1: [s0(p0: [[308.0], [309.0], [310.0]], p1: [[311.0]]), s0(p0: [[312.0], [313.0], [314.0]], p1: [[315.0]]), s0(p0: [[316.0], [317.0], [318.0]], p1: [[319.0]])], p2: [s1(p0: s0(p0: [[320.0], [321.0], [322.0]], p1: [[323.0]]), p1: s0(p0: [[324.0], [325.0], [326.0]], p1: [[327.0]])), s1(p0: s0(p0: [[328.0], [329.0], [330.0]], p1: [[331.0]]), p1: s0(p0: [[332.0], [333.0], [334.0]], p1: [[335.0]]))], p3: [s1(p0: s0(p0: [[336.0], [337.0], [338.0]], p1: [[339.0]]), p1: s0(p0: [[340.0], [341.0], [342.0]], p1: [[343.0]]))]), p1: s1(p0: s0(p0: [[344.0], [345.0], [346.0]], p1: [[347.0]]), p1: s0(p0: [[348.0], [349.0], [350.0]], p1: [[351.0]]))), s3(p0: s2(p0: s0(p0: [[352.0], [353.0], [354.0]], p1: [[355.0]]), p1: [s0(p0: [[356.0], [357.0], [358.0]], p1: [[359.0]]), s0(p0: [[360.0], [361.0], [362.0]], p1: [[363.0]]), s0(p0: [[364.0], [365.0], [366.0]], p1: [[367.0]])], p2: [s1(p0: s0(p0: [[368.0], [369.0], [370.0]], p1: [[371.0]]), p1: s0(p0: [[372.0], [373.0], [374.0]], p1: [[375.0]])), s1(p0: s0(p0: [[376.0], [377.0], [378.0]], p1: [[379.0]]), p1: s0(p0: [[380.0], [381.0], [382.0]], p1: [[383.0]]))], p3: [s1(p0: s0(p0: [[384.0], [385.0], [386.0]], p1: [[387.0]]), p1: s0(p0: [[388.0], [389.0], [390.0]], p1: [[391.0]]))]), p1: s1(p0: s0(p0: [[392.0], [393.0], [394.0]], p1: [[395.0]]), p1: s0(p0: [[396.0], [397.0], [398.0]], p1: [[399.0]])))], p3: [s3(p0: s2(p0: s0(p0: [[400.0], [401.0], [402.0]], p1: [[403.0]]), p1: [s0(p0: [[404.0], [405.0], [406.0]], p1: [[407.0]]), s0(p0: [[408.0], [409.0], [410.0]], p1: [[411.0]]), s0(p0: [[412.0], [413.0], [414.0]], p1: [[415.0]])], p2: [s1(p0: s0(p0: [[416.0], [417.0], [418.0]], p1: [[419.0]]), p1: s0(p0: [[420.0], [421.0], [422.0]], p1: [[423.0]])), s1(p0: s0(p0: [[424.0], [425.0], [426.0]], p1: [[427.0]]), p1: s0(p0: [[428.0], [429.0], [430.0]], p1: [[431.0]]))], p3: [s1(p0: s0(p0: [[432.0], [433.0], [434.0]], p1: [[435.0]]), p1: s0(p0: [[436.0], [437.0], [438.0]], p1: [[439.0]]))]), p1: s1(p0: s0(p0: [[440.0], [441.0], [442.0]], p1: [[443.0]]), p1: s0(p0: [[444.0], [445.0], [446.0]], p1: [[447.0]]))), s3(p0: s2(p0: s0(p0: [[448.0], [449.0], [450.0]], p1: [[451.0]]), p1: [s0(p0: [[452.0], [453.0], [454.0]], p1: [[455.0]]), s0(p0: [[456.0], [457.0], [458.0]], p1: [[459.0]]), s0(p0: [[460.0], [461.0], [462.0]], p1: [[463.0]])], p2: [s1(p0: s0(p0: [[464.0], [465.0], [466.0]], p1: [[467.0]]), p1: s0(p0: [[468.0], [469.0], [470.0]], p1: [[471.0]])), s1(p0: s0(p0: [[472.0], [473.0], [474.0]], p1: [[475.0]]), p1: s0(p0: [[476.0], [477.0], [478.0]], p1: [[479.0]]))], p3: [s1(p0: s0(p0: [[480.0], [481.0], [482.0]], p1: [[483.0]]), p1: s0(p0: [[484.0], [485.0], [486.0]], p1: [[487.0]]))]), p1: s1(p0: s0(p0: [[488.0], [489.0], [490.0]], p1: [[491.0]]), p1: s0(p0: [[492.0], [493.0], [494.0]], p1: [[495.0]])))], p4: s2(p0: s0(p0: [[496.0], [497.0], [498.0]], p1: [[499.0]]), p1: [s0(p0: [[500.0], [501.0], [502.0]], p1: [[503.0]]), s0(p0: [[504.0], [505.0], [506.0]], p1: [[507.0]]), s0(p0: [[508.0], [509.0], [510.0]], p1: [[511.0]])], p2: [s1(p0: s0(p0: [[512.0], [513.0], [514.0]], p1: [[515.0]]), p1: s0(p0: [[516.0], [517.0], [518.0]], p1: [[519.0]])), s1(p0: s0(p0: [[520.0], [521.0], [522.0]], p1: [[523.0]]), p1: s0(p0: [[524.0], [525.0], [526.0]], p1: [[527.0]]))], p3: [s1(p0: s0(p0: [[528.0], [529.0], [530.0]], p1: [[531.0]]), p1: s0(p0: [[532.0], [533.0], [534.0]], p1: [[535.0]]))])), s4(p0: s0(p0: [[536.0], [537.0], [538.0]], p1: [[539.0]]), p1: [s0(p0: [[540.0], [541.0], [542.0]], p1: [[543.0]]), s0(p0: [[544.0], [545.0], [546.0]], p1: [[547.0]])], p2: [s3(p0: s2(p0: s0(p0: [[548.0], [549.0], [550.0]], p1: [[551.0]]), p1: [s0(p0: [[552.0], [553.0], [554.0]], p1: [[555.0]]), s0(p0: [[556.0], [557.0], [558.0]], p1: [[559.0]]), s0(p0: [[560.0], [561.0], [562.0]], p1: [[563.0]])], p2: [s1(p0: s0(p0: [[564.0], [565.0], [566.0]], p1: [[567.0]]), p1: s0(p0: [[568.0], [569.0], [570.0]], p1: [[571.0]])), s1(p0: s0(p0: [[572.0], [573.0], [574.0]], p1: [[575.0]]), p1: s0(p0: [[576.0], [577.0], [578.0]], p1: [[579.0]]))], p3: [s1(p0: s0(p0: [[580.0], [581.0], [582.0]], p1: [[583.0]]), p1: s0(p0: [[584.0], [585.0], [586.0]], p1: [[587.0]]))]), p1: s1(p0: s0(p0: [[588.0], [589.0], [590.0]], p1: [[591.0]]), p1: s0(p0: [[592.0], [593.0], [594.0]], p1: [[595.0]]))), s3(p0: s2(p0: s0(p0: [[596.0], [597.0], [598.0]], p1: [[599.0]]), p1: [s0(p0: [[600.0], [601.0], [602.0]], p1: [[603.0]]), s0(p0: [[604.0], [605.0], [606.0]], p1: [[607.0]]), s0(p0: [[608.0], [609.0], [610.0]], p1: [[611.0]])], p2: [s1(p0: s0(p0: [[612.0], [613.0], [614.0]], p1: [[615.0]]), p1: s0(p0: [[616.0], [617.0], [618.0]], p1: [[619.0]])), s1(p0: s0(p0: [[620.0], [621.0], [622.0]], p1: [[623.0]]), p1: s0(p0: [[624.0], [625.0], [626.0]], p1: [[627.0]]))], p3: [s1(p0: s0(p0: [[628.0], [629.0], [630.0]], p1: [[631.0]]), p1: s0(p0: [[632.0], [633.0], [634.0]], p1: [[635.0]]))]), p1: s1(p0: s0(p0: [[636.0], [637.0], [638.0]], p1: [[639.0]]), p1: s0(p0: [[640.0], [641.0], [642.0]], p1: [[643.0]])))], p3: [s3(p0: s2(p0: s0(p0: [[644.0], [645.0], [646.0]], p1: [[647.0]]), p1: [s0(p0: [[648.0], [649.0], [650.0]], p1: [[651.0]]), s0(p0: [[652.0], [653.0], [654.0]], p1: [[655.0]]), s0(p0: [[656.0], [657.0], [658.0]], p1: [[659.0]])], p2: [s1(p0: s0(p0: [[660.0], [661.0], [662.0]], p1: [[663.0]]), p1: s0(p0: [[664.0], [665.0], [666.0]], p1: [[667.0]])), s1(p0: s0(p0: [[668.0], [669.0], [670.0]], p1: [[671.0]]), p1: s0(p0: [[672.0], [673.0], [674.0]], p1: [[675.0]]))], p3: [s1(p0: s0(p0: [[676.0], [677.0], [678.0]], p1: [[679.0]]), p1: s0(p0: [[680.0], [681.0], [682.0]], p1: [[683.0]]))]), p1: s1(p0: s0(p0: [[684.0], [685.0], [686.0]], p1: [[687.0]]), p1: s0(p0: [[688.0], [689.0], [690.0]], p1: [[691.0]]))), s3(p0: s2(p0: s0(p0: [[692.0], [693.0], [694.0]], p1: [[695.0]]), p1: [s0(p0: [[696.0], [697.0], [698.0]], p1: [[699.0]]), s0(p0: [[700.0], [701.0], [702.0]], p1: [[703.0]]), s0(p0: [[704.0], [705.0], [706.0]], p1: [[707.0]])], p2: [s1(p0: s0(p0: [[708.0], [709.0], [710.0]], p1: [[711.0]]), p1: s0(p0: [[712.0], [713.0], [714.0]], p1: [[715.0]])), s1(p0: s0(p0: [[716.0], [717.0], [718.0]], p1: [[719.0]]), p1: s0(p0: [[720.0], [721.0], [722.0]], p1: [[723.0]]))], p3: [s1(p0: s0(p0: [[724.0], [725.0], [726.0]], p1: [[727.0]]), p1: s0(p0: [[728.0], [729.0], [730.0]], p1: [[731.0]]))]), p1: s1(p0: s0(p0: [[732.0], [733.0], [734.0]], p1: [[735.0]]), p1: s0(p0: [[736.0], [737.0], [738.0]], p1: [[739.0]])))], p4: s2(p0: s0(p0: [[740.0], [741.0], [742.0]], p1: [[743.0]]), p1: [s0(p0: [[744.0], [745.0], [746.0]], p1: [[747.0]]), s0(p0: [[748.0], [749.0], [750.0]], p1: [[751.0]]), s0(p0: [[752.0], [753.0], [754.0]], p1: [[755.0]])], p2: [s1(p0: s0(p0: [[756.0], [757.0], [758.0]], p1: [[759.0]]), p1: s0(p0: [[760.0], [761.0], [762.0]], p1: [[763.0]])), s1(p0: s0(p0: [[764.0], [765.0], [766.0]], p1: [[767.0]]), p1: s0(p0: [[768.0], [769.0], [770.0]], p1: [[771.0]]))], p3: [s1(p0: s0(p0: [[772.0], [773.0], [774.0]], p1: [[775.0]]), p1: s0(p0: [[776.0], [777.0], [778.0]], p1: [[779.0]]))])), s4(p0: s0(p0: [[780.0], [781.0], [782.0]], p1: [[783.0]]), p1: [s0(p0: [[784.0], [785.0], [786.0]], p1: [[787.0]]), s0(p0: [[788.0], [789.0], [790.0]], p1: [[791.0]])], p2: [s3(p0: s2(p0: s0(p0: [[792.0], [793.0], [794.0]], p1: [[795.0]]), p1: [s0(p0: [[796.0], [797.0], [798.0]], p1: [[799.0]]), s0(p0: [[800.0], [801.0], [802.0]], p1: [[803.0]]), s0(p0: [[804.0], [805.0], [806.0]], p1: [[807.0]])], p2: [s1(p0: s0(p0: [[808.0], [809.0], [810.0]], p1: [[811.0]]), p1: s0(p0: [[812.0], [813.0], [814.0]], p1: [[815.0]])), s1(p0: s0(p0: [[816.0], [817.0], [818.0]], p1: [[819.0]]), p1: s0(p0: [[820.0], [821.0], [822.0]], p1: [[823.0]]))], p3: [s1(p0: s0(p0: [[824.0], [825.0], [826.0]], p1: [[827.0]]), p1: s0(p0: [[828.0], [829.0], [830.0]], p1: [[831.0]]))]), p1: s1(p0: s0(p0: [[832.0], [833.0], [834.0]], p1: [[835.0]]), p1: s0(p0: [[836.0], [837.0], [838.0]], p1: [[839.0]]))), s3(p0: s2(p0: s0(p0: [[840.0], [841.0], [842.0]], p1: [[843.0]]), p1: [s0(p0: [[844.0], [845.0], [846.0]], p1: [[847.0]]), s0(p0: [[848.0], [849.0], [850.0]], p1: [[851.0]]), s0(p0: [[852.0], [853.0], [854.0]], p1: [[855.0]])], p2: [s1(p0: s0(p0: [[856.0], [857.0], [858.0]], p1: [[859.0]]), p1: s0(p0: [[860.0], [861.0], [862.0]], p1: [[863.0]])), s1(p0: s0(p0: [[864.0], [865.0], [866.0]], p1: [[867.0]]), p1: s0(p0: [[868.0], [869.0], [870.0]], p1: [[871.0]]))], p3: [s1(p0: s0(p0: [[872.0], [873.0], [874.0]], p1: [[875.0]]), p1: s0(p0: [[876.0], [877.0], [878.0]], p1: [[879.0]]))]), p1: s1(p0: s0(p0: [[880.0], [881.0], [882.0]], p1: [[883.0]]), p1: s0(p0: [[884.0], [885.0], [886.0]], p1: [[887.0]])))], p3: [s3(p0: s2(p0: s0(p0: [[888.0], [889.0], [890.0]], p1: [[891.0]]), p1: [s0(p0: [[892.0], [893.0], [894.0]], p1: [[895.0]]), s0(p0: [[896.0], [897.0], [898.0]], p1: [[899.0]]), s0(p0: [[900.0], [901.0], [902.0]], p1: [[903.0]])], p2: [s1(p0: s0(p0: [[904.0], [905.0], [906.0]], p1: [[907.0]]), p1: s0(p0: [[908.0], [909.0], [910.0]], p1: [[911.0]])), s1(p0: s0(p0: [[912.0], [913.0], [914.0]], p1: [[915.0]]), p1: s0(p0: [[916.0], [917.0], [918.0]], p1: [[919.0]]))], p3: [s1(p0: s0(p0: [[920.0], [921.0], [922.0]], p1: [[923.0]]), p1: s0(p0: [[924.0], [925.0], [926.0]], p1: [[927.0]]))]), p1: s1(p0: s0(p0: [[928.0], [929.0], [930.0]], p1: [[931.0]]), p1: s0(p0: [[932.0], [933.0], [934.0]], p1: [[935.0]]))), s3(p0: s2(p0: s0(p0: [[936.0], [937.0], [938.0]], p1: [[939.0]]), p1: [s0(p0: [[940.0], [941.0], [942.0]], p1: [[943.0]]), s0(p0: [[944.0], [945.0], [946.0]], p1: [[947.0]]), s0(p0: [[948.0], [949.0], [950.0]], p1: [[951.0]])], p2: [s1(p0: s0(p0: [[952.0], [953.0], [954.0]], p1: [[955.0]]), p1: s0(p0: [[956.0], [957.0], [958.0]], p1: [[959.0]])), s1(p0: s0(p0: [[960.0], [961.0], [962.0]], p1: [[963.0]]), p1: s0(p0: [[964.0], [965.0], [966.0]], p1: [[967.0]]))], p3: [s1(p0: s0(p0: [[968.0], [969.0], [970.0]], p1: [[971.0]]), p1: s0(p0: [[972.0], [973.0], [974.0]], p1: [[975.0]]))]), p1: s1(p0: s0(p0: [[976.0], [977.0], [978.0]], p1: [[979.0]]), p1: s0(p0: [[980.0], [981.0], [982.0]], p1: [[983.0]])))], p4: s2(p0: s0(p0: [[984.0], [985.0], [986.0]], p1: [[987.0]]), p1: [s0(p0: [[988.0], [989.0], [990.0]], p1: [[991.0]]), s0(p0: [[992.0], [993.0], [994.0]], p1: [[995.0]]), s0(p0: [[996.0], [997.0], [998.0]], p1: [[999.0]])], p2: [s1(p0: s0(p0: [[1000.0], [1001.0], [1002.0]], p1: [[1003.0]]), p1: s0(p0: [[1004.0], [1005.0], [1006.0]], p1: [[1007.0]])), s1(p0: s0(p0: [[1008.0], [1009.0], [1010.0]], p1: [[1011.0]]), p1: s0(p0: [[1012.0], [1013.0], [1014.0]], p1: [[1015.0]]))], p3: [s1(p0: s0(p0: [[1016.0], [1017.0], [1018.0]], p1: [[1019.0]]), p1: s0(p0: [[1020.0], [1021.0], [1022.0]], p1: [[1023.0]]))]))]
    let v3: s1 = s1(p0: s0(p0: [[1024.0], [1025.0], [1026.0]], p1: [[1027.0]]), p1: s0(p0: [[1028.0], [1029.0], [1030.0]], p1: [[1031.0]]))
    let v4: [[s3]] = [[s3(p0: s2(p0: s0(p0: [[1032.0], [1033.0], [1034.0]], p1: [[1035.0]]), p1: [s0(p0: [[1036.0], [1037.0], [1038.0]], p1: [[1039.0]]), s0(p0: [[1040.0], [1041.0], [1042.0]], p1: [[1043.0]]), s0(p0: [[1044.0], [1045.0], [1046.0]], p1: [[1047.0]])], p2: [s1(p0: s0(p0: [[1048.0], [1049.0], [1050.0]], p1: [[1051.0]]), p1: s0(p0: [[1052.0], [1053.0], [1054.0]], p1: [[1055.0]])), s1(p0: s0(p0: [[1056.0], [1057.0], [1058.0]], p1: [[1059.0]]), p1: s0(p0: [[1060.0], [1061.0], [1062.0]], p1: [[1063.0]]))], p3: [s1(p0: s0(p0: [[1064.0], [1065.0], [1066.0]], p1: [[1067.0]]), p1: s0(p0: [[1068.0], [1069.0], [1070.0]], p1: [[1071.0]]))]), p1: s1(p0: s0(p0: [[1072.0], [1073.0], [1074.0]], p1: [[1075.0]]), p1: s0(p0: [[1076.0], [1077.0], [1078.0]], p1: [[1079.0]])))], [s3(p0: s2(p0: s0(p0: [[1080.0], [1081.0], [1082.0]], p1: [[1083.0]]), p1: [s0(p0: [[1084.0], [1085.0], [1086.0]], p1: [[1087.0]]), s0(p0: [[1088.0], [1089.0], [1090.0]], p1: [[1091.0]]), s0(p0: [[1092.0], [1093.0], [1094.0]], p1: [[1095.0]])], p2: [s1(p0: s0(p0: [[1096.0], [1097.0], [1098.0]], p1: [[1099.0]]), p1: s0(p0: [[1100.0], [1101.0], [1102.0]], p1: [[1103.0]])), s1(p0: s0(p0: [[1104.0], [1105.0], [1106.0]], p1: [[1107.0]]), p1: s0(p0: [[1108.0], [1109.0], [1110.0]], p1: [[1111.0]]))], p3: [s1(p0: s0(p0: [[1112.0], [1113.0], [1114.0]], p1: [[1115.0]]), p1: s0(p0: [[1116.0], [1117.0], [1118.0]], p1: [[1119.0]]))]), p1: s1(p0: s0(p0: [[1120.0], [1121.0], [1122.0]], p1: [[1123.0]]), p1: s0(p0: [[1124.0], [1125.0], [1126.0]], p1: [[1127.0]])))], [s3(p0: s2(p0: s0(p0: [[1128.0], [1129.0], [1130.0]], p1: [[1131.0]]), p1: [s0(p0: [[1132.0], [1133.0], [1134.0]], p1: [[1135.0]]), s0(p0: [[1136.0], [1137.0], [1138.0]], p1: [[1139.0]]), s0(p0: [[1140.0], [1141.0], [1142.0]], p1: [[1143.0]])], p2: [s1(p0: s0(p0: [[1144.0], [1145.0], [1146.0]], p1: [[1147.0]]), p1: s0(p0: [[1148.0], [1149.0], [1150.0]], p1: [[1151.0]])), s1(p0: s0(p0: [[1152.0], [1153.0], [1154.0]], p1: [[1155.0]]), p1: s0(p0: [[1156.0], [1157.0], [1158.0]], p1: [[1159.0]]))], p3: [s1(p0: s0(p0: [[1160.0], [1161.0], [1162.0]], p1: [[1163.0]]), p1: s0(p0: [[1164.0], [1165.0], [1166.0]], p1: [[1167.0]]))]), p1: s1(p0: s0(p0: [[1168.0], [1169.0], [1170.0]], p1: [[1171.0]]), p1: s0(p0: [[1172.0], [1173.0], [1174.0]], p1: [[1175.0]])))]]
    let v5: Double = 1176.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 1176.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4, v5)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
