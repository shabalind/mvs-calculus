  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: [s0]
    var p1: [s1]
  }
  struct s4 {
    var p0: [s2]
    var p1: [s2]
  }
  func f63(_ v0: s2) -> s2 {
    let v5: [s0] = v0.p0
    var v30: [s0] = v5
    var v56: s2 = v0
    let v28: [s0] = v0.p0
    v56.p0 = v30
    v56.p0 = v28
    var v84: s2 = v56
    let v68: [s1] = v84.p1
    var v113: s2 = v56
    v113.p1 = v68
    return v113
  }
  func f60(_ v0: s2) -> s2 {
    let v7: s2 = f63(v0)
    let v2: [s1] = v0.p1
    let v5: [s1] = v7.p1
    let v6: [[s1]] = [v2, v5, v5, v2, v5, v2]
    let v4: s2 = f63(v0)
    let v11: s2 = f63(v4)
    var v8: [[s1]] = v6
    var v9: s2 = v4
    let v3: [s1] = v11.p1
    let v13: [s1] = v7.p1
    let v10: [s1] = v4.p1
    v8[0] = v3
    let v12: s1 = v3[1]
    let v15: s0 = v12.p1
    var v43: [s1] = v10
    v8[4] = v5
    let v14: s2 = f63(v0)
    let v22: [s1] = v8[4]
    let v24: s1 = v13[1]
    var v25: [s1] = v3
    let v42: [s1] = v6[4]
    v9.p1 = v43
    v8 = v6
    let v61: s2 = f63(v0)
    v8[3] = v13
    v25 = v2
    v8[2] = v22
    var v37: s2 = v7
    var v36: s1 = v12
    v9.p1 = v42
    let v53: s2 = f63(v61)
    var v67: s1 = v36
    v43[1] = v12
    var v31: s2 = v37
    v36.p0 = v15
    let v32: [s1] = v8[5]
    v8[0] = v32
    v25[1] = v24
    let v30: [s0] = v37.p0
    v37.p1 = v32
    v25[1] = v67
    let v45: s2 = f63(v9)
    v31.p0 = v30
    v25[1] = v12
    v25[0] = v67
    let v108: s2 = f63(v31)
    let v121: s2 = f63(v45)
    let v131: [s2] = [v7, v11, v53, v121, v108, v14]
    let v103: s2 = v131[4]
    v9.p1 = v25
    return v103
  }
  func f45(_ v0: s1) -> s1 {
    var v7: s1 = v0
    var v21: s1 = v7
    return v21
  }
  @inline(never)
  func f0(_ v0: [s4], _ v1: [s2], _ v2: Double) -> Double {
    var v7: [s2] = v1
    let v6: s2 = v7[2]
    let v15: s2 = f60(v6)
    let v57: [s1] = v15.p1
    let v46: s1 = v57[0]
    let v67: s1 = f45(v46)
    let v147: s0 = v67.p1
    let v102: [[Double]] = v147.p0
    let v41: [Double] = v102[0]
    var v314: [Double] = v41
    let v132: Double = v314[0]
    return v132
  }
  func benchmark() {
    let v0: [s4] = [s4(p0: [s2(p0: [s0(p0: [[0.0]], p1: [[1.0]])], p1: [s1(p0: s0(p0: [[2.0]], p1: [[3.0]]), p1: s0(p0: [[4.0]], p1: [[5.0]])), s1(p0: s0(p0: [[6.0]], p1: [[7.0]]), p1: s0(p0: [[8.0]], p1: [[9.0]])), s1(p0: s0(p0: [[10.0]], p1: [[11.0]]), p1: s0(p0: [[12.0]], p1: [[13.0]]))]), s2(p0: [s0(p0: [[14.0]], p1: [[15.0]])], p1: [s1(p0: s0(p0: [[16.0]], p1: [[17.0]]), p1: s0(p0: [[18.0]], p1: [[19.0]])), s1(p0: s0(p0: [[20.0]], p1: [[21.0]]), p1: s0(p0: [[22.0]], p1: [[23.0]])), s1(p0: s0(p0: [[24.0]], p1: [[25.0]]), p1: s0(p0: [[26.0]], p1: [[27.0]]))])], p1: [s2(p0: [s0(p0: [[28.0]], p1: [[29.0]])], p1: [s1(p0: s0(p0: [[30.0]], p1: [[31.0]]), p1: s0(p0: [[32.0]], p1: [[33.0]])), s1(p0: s0(p0: [[34.0]], p1: [[35.0]]), p1: s0(p0: [[36.0]], p1: [[37.0]])), s1(p0: s0(p0: [[38.0]], p1: [[39.0]]), p1: s0(p0: [[40.0]], p1: [[41.0]]))]), s2(p0: [s0(p0: [[42.0]], p1: [[43.0]])], p1: [s1(p0: s0(p0: [[44.0]], p1: [[45.0]]), p1: s0(p0: [[46.0]], p1: [[47.0]])), s1(p0: s0(p0: [[48.0]], p1: [[49.0]]), p1: s0(p0: [[50.0]], p1: [[51.0]])), s1(p0: s0(p0: [[52.0]], p1: [[53.0]]), p1: s0(p0: [[54.0]], p1: [[55.0]]))]), s2(p0: [s0(p0: [[56.0]], p1: [[57.0]])], p1: [s1(p0: s0(p0: [[58.0]], p1: [[59.0]]), p1: s0(p0: [[60.0]], p1: [[61.0]])), s1(p0: s0(p0: [[62.0]], p1: [[63.0]]), p1: s0(p0: [[64.0]], p1: [[65.0]])), s1(p0: s0(p0: [[66.0]], p1: [[67.0]]), p1: s0(p0: [[68.0]], p1: [[69.0]]))])]), s4(p0: [s2(p0: [s0(p0: [[70.0]], p1: [[71.0]])], p1: [s1(p0: s0(p0: [[72.0]], p1: [[73.0]]), p1: s0(p0: [[74.0]], p1: [[75.0]])), s1(p0: s0(p0: [[76.0]], p1: [[77.0]]), p1: s0(p0: [[78.0]], p1: [[79.0]])), s1(p0: s0(p0: [[80.0]], p1: [[81.0]]), p1: s0(p0: [[82.0]], p1: [[83.0]]))]), s2(p0: [s0(p0: [[84.0]], p1: [[85.0]])], p1: [s1(p0: s0(p0: [[86.0]], p1: [[87.0]]), p1: s0(p0: [[88.0]], p1: [[89.0]])), s1(p0: s0(p0: [[90.0]], p1: [[91.0]]), p1: s0(p0: [[92.0]], p1: [[93.0]])), s1(p0: s0(p0: [[94.0]], p1: [[95.0]]), p1: s0(p0: [[96.0]], p1: [[97.0]]))])], p1: [s2(p0: [s0(p0: [[98.0]], p1: [[99.0]])], p1: [s1(p0: s0(p0: [[100.0]], p1: [[101.0]]), p1: s0(p0: [[102.0]], p1: [[103.0]])), s1(p0: s0(p0: [[104.0]], p1: [[105.0]]), p1: s0(p0: [[106.0]], p1: [[107.0]])), s1(p0: s0(p0: [[108.0]], p1: [[109.0]]), p1: s0(p0: [[110.0]], p1: [[111.0]]))]), s2(p0: [s0(p0: [[112.0]], p1: [[113.0]])], p1: [s1(p0: s0(p0: [[114.0]], p1: [[115.0]]), p1: s0(p0: [[116.0]], p1: [[117.0]])), s1(p0: s0(p0: [[118.0]], p1: [[119.0]]), p1: s0(p0: [[120.0]], p1: [[121.0]])), s1(p0: s0(p0: [[122.0]], p1: [[123.0]]), p1: s0(p0: [[124.0]], p1: [[125.0]]))]), s2(p0: [s0(p0: [[126.0]], p1: [[127.0]])], p1: [s1(p0: s0(p0: [[128.0]], p1: [[129.0]]), p1: s0(p0: [[130.0]], p1: [[131.0]])), s1(p0: s0(p0: [[132.0]], p1: [[133.0]]), p1: s0(p0: [[134.0]], p1: [[135.0]])), s1(p0: s0(p0: [[136.0]], p1: [[137.0]]), p1: s0(p0: [[138.0]], p1: [[139.0]]))])])]
    let v1: [s2] = [s2(p0: [s0(p0: [[140.0]], p1: [[141.0]])], p1: [s1(p0: s0(p0: [[142.0]], p1: [[143.0]]), p1: s0(p0: [[144.0]], p1: [[145.0]])), s1(p0: s0(p0: [[146.0]], p1: [[147.0]]), p1: s0(p0: [[148.0]], p1: [[149.0]])), s1(p0: s0(p0: [[150.0]], p1: [[151.0]]), p1: s0(p0: [[152.0]], p1: [[153.0]]))]), s2(p0: [s0(p0: [[154.0]], p1: [[155.0]])], p1: [s1(p0: s0(p0: [[156.0]], p1: [[157.0]]), p1: s0(p0: [[158.0]], p1: [[159.0]])), s1(p0: s0(p0: [[160.0]], p1: [[161.0]]), p1: s0(p0: [[162.0]], p1: [[163.0]])), s1(p0: s0(p0: [[164.0]], p1: [[165.0]]), p1: s0(p0: [[166.0]], p1: [[167.0]]))]), s2(p0: [s0(p0: [[168.0]], p1: [[169.0]])], p1: [s1(p0: s0(p0: [[170.0]], p1: [[171.0]]), p1: s0(p0: [[172.0]], p1: [[173.0]])), s1(p0: s0(p0: [[174.0]], p1: [[175.0]]), p1: s0(p0: [[176.0]], p1: [[177.0]])), s1(p0: s0(p0: [[178.0]], p1: [[179.0]]), p1: s0(p0: [[180.0]], p1: [[181.0]]))])]
    let v2: Double = 182.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 182.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
