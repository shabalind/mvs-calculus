  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s2 {
    var p0: [[s0]]
    var p1: [[s0]]
  } in
  let noinline_f0: (s2, [[s2]], Float) -> Float = (v0: s2, v1: [[s2]], v2: Float) -> Float {
    let v5: [s2] = v1[2] in
    let v12: s2 = v5[0] in
    let v15: [[s0]] = v12.p1 in
    let v14: [s0] = v15[0] in
    let v33: [s0] = v15[0] in
    var v21: [s0] = v33 in
    v21 = v14 in
    let v48: s0 = v21[0] in
    let v31: [[Float]] = v48.p1 in
    let v108: [Float] = v31[0] in
    let v132: Float = v108[0] in
    v132
  } in
  fun loop(i: Int, v0: s2, v1: [[s2]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2([[s0([[0.0], [1.0]], [[2.0]])]], [[s0([[3.0], [4.0]], [[5.0]])], [s0([[6.0], [7.0]], [[8.0]])]]) in
    let v1: [[s2]] = [[s2([[s0([[9.0], [10.0]], [[11.0]])]], [[s0([[12.0], [13.0]], [[14.0]])], [s0([[15.0], [16.0]], [[17.0]])]])], [s2([[s0([[18.0], [19.0]], [[20.0]])]], [[s0([[21.0], [22.0]], [[23.0]])], [s0([[24.0], [25.0]], [[26.0]])]])], [s2([[s0([[27.0], [28.0]], [[29.0]])]], [[s0([[30.0], [31.0]], [[32.0]])], [s0([[33.0], [34.0]], [[35.0]])]])]] in
    let v2: Float = 36.0 in
    let initialResult: Float = 36.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()