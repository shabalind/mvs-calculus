  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s2 {
    var p0: s0
    var p1: s0
  } in
  struct s4 {
    var p0: [s0]
    var p1: s2
  } in
  struct s7 {
    var p0: [s2]
    var p1: s0
  } in
  struct s8 {
    var p0: s1
    var p1: s7
  } in
  let f83: (Float) -> Float = (v0: Float) -> Float {
    var v4: Float = v0 in
    var v6: Float = v4 in
    v6 = v4 in
    var v7: Float = v6 in
    let v1: [Float] = [v4, v7, v4] in
    var v11: [Float] = v1 in
    v11[2] = v6 in
    v11[1] = v7 in
    let v5: Float = v11[0] in
    let v10: Float = v1[2] in
    let v17: Float = v1[1] in
    let v12: Float = v11[0] in
    v11[1] = v5 in
    let v9: Float = v1[0] in
    let v21: [[Float]] = [v1, v1, v1, v1, v11] in
    v11[2] = v12 in
    var v35: [[Float]] = v21 in
    v11[2] = v17 in
    let v31: [Float] = v35[3] in
    var v18: [Float] = v31 in
    var v14: [Float] = v18 in
    v18[0] = v9 in
    v35[3] = v31 in
    var v37: [Float] = v14 in
    v37[1] = v10 in
    let v34: Float = v37[2] in
    v34
  } in
  let noinline_f0: ([s8], [[s4]], Float) -> Float = (v0: [s8], v1: [[s4]], v2: Float) -> Float {
    let v12: Float = f83(v2) in
    var v33: Float = v12 in
    v33
  } in
  fun loop(i: Int, v0: [s8], v1: [[s4]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s8] = [s8(s1([s0([[0.0], [1.0]], [[2.0]]), s0([[3.0], [4.0]], [[5.0]])], [s0([[6.0], [7.0]], [[8.0]]), s0([[9.0], [10.0]], [[11.0]])]), s7([s2(s0([[12.0], [13.0]], [[14.0]]), s0([[15.0], [16.0]], [[17.0]])), s2(s0([[18.0], [19.0]], [[20.0]]), s0([[21.0], [22.0]], [[23.0]])), s2(s0([[24.0], [25.0]], [[26.0]]), s0([[27.0], [28.0]], [[29.0]]))], s0([[30.0], [31.0]], [[32.0]])))] in
    let v1: [[s4]] = [[s4([s0([[33.0], [34.0]], [[35.0]]), s0([[36.0], [37.0]], [[38.0]]), s0([[39.0], [40.0]], [[41.0]])], s2(s0([[42.0], [43.0]], [[44.0]]), s0([[45.0], [46.0]], [[47.0]])))], [s4([s0([[48.0], [49.0]], [[50.0]]), s0([[51.0], [52.0]], [[53.0]]), s0([[54.0], [55.0]], [[56.0]])], s2(s0([[57.0], [58.0]], [[59.0]]), s0([[60.0], [61.0]], [[62.0]])))], [s4([s0([[63.0], [64.0]], [[65.0]]), s0([[66.0], [67.0]], [[68.0]]), s0([[69.0], [70.0]], [[71.0]])], s2(s0([[72.0], [73.0]], [[74.0]]), s0([[75.0], [76.0]], [[77.0]])))]] in
    let v2: Float = 78.0 in
    let initialResult: Float = 78.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()