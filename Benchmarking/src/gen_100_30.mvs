  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: [[s0]]
    var p1: [s1]
  } in
  struct s3 {
    var p0: s0
    var p1: [s0]
  } in
  struct s4 {
    var p0: [s2]
    var p1: [[s0]]
  } in
  let noinline_f0: (s4, s3, Float) -> Float = (v0: s4, v1: s3, v2: Float) -> Float {
    let v3: [[s0]] = v0.p1 in
    let v7: [s0] = v3[0] in
    let v8: s0 = v7[0] in
    let v16: [[Float]] = v8.p0 in
    let v32: [[Float]] = v8.p1 in
    let v40: [Float] = v16[2] in
    let v46: [Float] = v16[0] in
    var v60: [[Float]] = v32 in
    let v81: [Float] = v60[1] in
    v60[1] = v40 in
    v60[1] = v46 in
    let v89: [Float] = v60[1] in
    v60[1] = v89 in
    let v88: Float = v81[0] in
    v88
  } in
  fun loop(i: Int, v0: s4, v1: s3, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s4 = s4([s2([[s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]], [[5.0], [6.0]])], [s0([[7.0], [8.0], [9.0]], [[10.0], [11.0]], [[12.0], [13.0]])]], [s1(s0([[14.0], [15.0], [16.0]], [[17.0], [18.0]], [[19.0], [20.0]]), [[s0([[21.0], [22.0], [23.0]], [[24.0], [25.0]], [[26.0], [27.0]])]])]), s2([[s0([[28.0], [29.0], [30.0]], [[31.0], [32.0]], [[33.0], [34.0]])], [s0([[35.0], [36.0], [37.0]], [[38.0], [39.0]], [[40.0], [41.0]])]], [s1(s0([[42.0], [43.0], [44.0]], [[45.0], [46.0]], [[47.0], [48.0]]), [[s0([[49.0], [50.0], [51.0]], [[52.0], [53.0]], [[54.0], [55.0]])]])])], [[s0([[56.0], [57.0], [58.0]], [[59.0], [60.0]], [[61.0], [62.0]])]]) in
    let v1: s3 = s3(s0([[63.0], [64.0], [65.0]], [[66.0], [67.0]], [[68.0], [69.0]]), [s0([[70.0], [71.0], [72.0]], [[73.0], [74.0]], [[75.0], [76.0]])]) in
    let v2: Float = 77.0 in
    let initialResult: Float = 77.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()