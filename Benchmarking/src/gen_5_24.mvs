  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: Float
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s0
    var p1: [s0]
    var p2: s0
    var p3: s1
    var p4: [s1]
  } in
  let f107: (Float) -> Float = (v0: Float) -> Float {
    var v5: Float = v0 in
    var v6: Float = v5 in
    var v2: Float = v5 in
    var v1: Float = v2 in
    v2 = v5 in
    var v4: Float = v5 in
    let v3: Float = v6 * v2 in
    var v11: Float = v4 in
    let v10: Float = v11 / v3 in
    var v19: Float = v0 in
    var v15: Float = v11 in
    let v12: [Float] = [v11, v15, v10, v19, v1, v4] in
    var v21: [Float] = v12 in
    v21[2] = v6 in
    var v18: [Float] = v21 in
    var v23: Float = v5 in
    v18[5] = v5 in
    v21[4] = v0 in
    v18[3] = v11 in
    v21[1] = v23 in
    let v37: Float = v18[3] in
    let v34: [Float] = [v6] in
    var v24: Float = v37 in
    let v33: Float = v34[0] in
    v18[3] = v37 in
    v24 = v37 in
    var v51: Float = v33 in
    v21[4] = v51 in
    v24
  } in
  let noinline_f0: ([s2], Float) -> Float = (v0: [s2], v1: Float) -> Float {
    let v10: Float = f107(v1) in
    var v13: Float = v10 in
    let v17: Float = v1 * v1 in
    v13 = v17 in
    v13
  } in
  fun loop(i: Int, v0: [s2], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2(s0([[0.0], [1.0]], [[2.0]], 3.0), [s0([[4.0], [5.0]], [[6.0]], 7.0)], s0([[8.0], [9.0]], [[10.0]], 11.0), s1(s0([[12.0], [13.0]], [[14.0]], 15.0), s0([[16.0], [17.0]], [[18.0]], 19.0)), [s1(s0([[20.0], [21.0]], [[22.0]], 23.0), s0([[24.0], [25.0]], [[26.0]], 27.0))])] in
    let v1: Float = 28.0 in
    let initialResult: Float = 28.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()