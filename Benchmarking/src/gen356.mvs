  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: Float
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: [s1]
    var p1: s1
  } in
  struct s3 {
    var p0: s2
    var p1: s2
  } in
  struct s4 {
    var p0: [[s3]]
    var p1: [[s0]]
  } in
  struct s5 {
    var p0: s0
    var p1: [s1]
  } in
  struct s9 {
    var p0: s5
    var p1: [[s5]]
  } in
  let f43: (s1) -> s1 = (v0: s1) -> s1 {
    let v6: Float = v0.p0 in
    var v5: Float = v6 in
    let v7: [[s0]] = v0.p1 in
    let v8: s1 = s1(v5, v7) in
    v8
  } in
  let f34: (s0) -> s0 = (v0: s0) -> s0 {
    let v6: [[Float]] = v0.p0 in
    let v9: [[Float]] = v0.p1 in
    let v5: [[Float]] = v0.p0 in
    let v4: [[Float]] = v0.p0 in
    let v8: [Float] = v4[0] in
    var v18: [[Float]] = v4 in
    var v13: s0 = v0 in
    let v10: [Float] = v6[0] in
    var v41: [[Float]] = v9 in
    let v25: Float = v8[0] in
    var v16: Float = v25 in
    var v15: [Float] = v10 in
    v15[0] = v16 in
    var v19: [[Float]] = v9 in
    let v37: [[Float]] = v13.p1 in
    v18[0] = v15 in
    v13.p1 = v9 in
    let v23: [Float] = v5[0] in
    let v24: s0 = s0(v18, v41) in
    let v54: [Float] = v18[0] in
    v41 = v37 in
    v13 = v24 in
    let v75: [[Float]] = v24.p1 in
    v19[1] = v23 in
    v13.p1 = v19 in
    let v77: [Float] = v75[0] in
    let v32: [Float] = v37[1] in
    var v30: s0 = v13 in
    let v67: [[Float]] = v30.p0 in
    v30.p1 = v19 in
    v18[0] = v15 in
    v41[2] = v77 in
    v30.p1 = v75 in
    v41[0] = v32 in
    let v69: [Float] = v4[0] in
    v18[0] = v54 in
    v41[2] = v54 in
    let v89: [Float] = v67[0] in
    v41[1] = v89 in
    let v114: [[Float]] = v13.p1 in
    v30.p1 = v114 in
    v41[1] = v69 in
    v30.p1 = v9 in
    v30.p1 = v41 in
    v13.p1 = v75 in
    v30
  } in
  let f32: (s1) -> s1 = (v0: s1) -> s1 {
    let v4: s1 = f43(v0) in
    let v2: [[s0]] = v4.p1 in
    let v1: [s0] = v2[0] in
    let v8: [s0] = v2[0] in
    var v5: [s0] = v1 in
    let v29: [s0] = v2[0] in
    let v13: s1 = f43(v0) in
    var v15: [[s0]] = v2 in
    v15[0] = v5 in
    let v11: Float = v13.p0 in
    let v19: s1 = s1(v11, v15) in
    v15[0] = v29 in
    let v22: s0 = v8[0] in
    let v52: [[s0]] = v19.p1 in
    v5[0] = v22 in
    v5[0] = v22 in
    v5[0] = v22 in
    let v69: Float = v0.p0 in
    let v77: s0 = f34(v22) in
    let v82: s0 = f34(v77) in
    let v51: s0 = f34(v82) in
    v5[0] = v51 in
    let v84: s1 = s1(v69, v52) in
    v5[0] = v22 in
    v84
  } in
  let f31: (s1) -> s1 = (v0: s1) -> s1 {
    let v4: s1 = f43(v0) in
    let v2: s1 = f43(v4) in
    let v1: s1 = f32(v2) in
    var v3: s1 = v1 in
    let v6: Float = v3.p0 in
    v3.p0 = v6 in
    var v7: Float = v6 in
    v3.p0 = v6 in
    let v5: s1 = f32(v0) in
    let v11: s1 = f32(v5) in
    let v8: [[s0]] = v11.p1 in
    let v18: [s0] = v8[0] in
    let v12: Float = v2.p0 in
    v3.p0 = v7 in
    let v15: [[s0]] = v0.p1 in
    let v17: s1 = f43(v4) in
    let v20: s1 = s1(v12, v8) in
    var v73: s1 = v17 in
    let v30: s1 = f32(v3) in
    v73.p1 = v8 in
    v73.p1 = v15 in
    let v38: s1 = f43(v73) in
    var v32: [[s0]] = v8 in
    let v58: Float = v38.p0 in
    v3.p1 = v15 in
    v73.p1 = v15 in
    let v39: [s0] = v32[0] in
    v32[0] = v39 in
    let v80: [[[s0]]] = [v8, v8, v8, v8, v32, v8, v32] in
    let v182: [[s0]] = v3.p1 in
    let v46: s1 = f32(v30) in
    let v94: [s0] = v8[0] in
    v3 = v46 in
    let v63: s1 = f32(v20) in
    let v162: [[s0]] = v63.p1 in
    var v90: [[s0]] = v182 in
    v90[0] = v94 in
    let v207: [[s0]] = v80[4] in
    v73.p1 = v162 in
    let v131: s1 = s1(v58, v207) in
    v90[0] = v18 in
    v73.p1 = v90 in
    v131
  } in
  let f12: (s1) -> s1 = (v0: s1) -> s1 {
    let v6: s1 = f43(v0) in
    var v3: s1 = v6 in
    let v4: s1 = f43(v3) in
    let v7: s1 = f31(v4) in
    let v8: s1 = f32(v6) in
    var v11: s1 = v3 in
    let v2: s1 = f31(v7) in
    let v9: Float = v11.p0 in
    let v14: [[s0]] = v8.p1 in
    let v13: Float = v2.p0 in
    v3 = v2 in
    let v16: [[s0]] = v8.p1 in
    let v12: s1 = f43(v2) in
    let v25: s1 = s1(v9, v16) in
    v3.p0 = v9 in
    let v18: Float = v3.p0 in
    var v32: Float = v9 in
    v3 = v12 in
    let v17: s1 = f32(v4) in
    v3.p0 = v18 in
    var v21: s1 = v8 in
    v21.p0 = v18 in
    var v19: [[s0]] = v16 in
    let v41: [s0] = v19[0] in
    v19[0] = v41 in
    var v49: s1 = v17 in
    v32 = v13 in
    v3.p1 = v19 in
    let v27: Float = v25.p0 in
    v11.p1 = v14 in
    v11.p0 = v27 in
    v49.p0 = v32 in
    v11.p1 = v16 in
    var v66: [[s0]] = v14 in
    v21.p1 = v19 in
    let v54: Float = v21.p0 in
    var v209: s1 = v49 in
    v11.p1 = v66 in
    v49.p0 = v54 in
    v209
  } in
  let noinline_f0: ([[s2]], s4, [s9], Float) -> Float = (v0: [[s2]], v1: s4, v2: [s9], v3: Float) -> Float {
    let v4: [s2] = v0[0] in
    let v9: s2 = v4[0] in
    let v14: s1 = v9.p1 in
    let v19: s1 = f12(v14) in
    let v143: Float = v19.p0 in
    let v56: Float = v3 / v3 in
    let v79: Float = v56 - v143 in
    v79
  } in
  fun loop(i: Int, v0: [[s2]], v1: s4, v2: [s9], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s2]] = [[s2([s1(0.0, [[s0([[1.0]], [[2.0], [3.0], [4.0]])]]), s1(5.0, [[s0([[6.0]], [[7.0], [8.0], [9.0]])]])], s1(10.0, [[s0([[11.0]], [[12.0], [13.0], [14.0]])]]))]] in
    let v1: s4 = s4([[s3(s2([s1(15.0, [[s0([[16.0]], [[17.0], [18.0], [19.0]])]]), s1(20.0, [[s0([[21.0]], [[22.0], [23.0], [24.0]])]])], s1(25.0, [[s0([[26.0]], [[27.0], [28.0], [29.0]])]])), s2([s1(30.0, [[s0([[31.0]], [[32.0], [33.0], [34.0]])]]), s1(35.0, [[s0([[36.0]], [[37.0], [38.0], [39.0]])]])], s1(40.0, [[s0([[41.0]], [[42.0], [43.0], [44.0]])]])))], [s3(s2([s1(45.0, [[s0([[46.0]], [[47.0], [48.0], [49.0]])]]), s1(50.0, [[s0([[51.0]], [[52.0], [53.0], [54.0]])]])], s1(55.0, [[s0([[56.0]], [[57.0], [58.0], [59.0]])]])), s2([s1(60.0, [[s0([[61.0]], [[62.0], [63.0], [64.0]])]]), s1(65.0, [[s0([[66.0]], [[67.0], [68.0], [69.0]])]])], s1(70.0, [[s0([[71.0]], [[72.0], [73.0], [74.0]])]])))], [s3(s2([s1(75.0, [[s0([[76.0]], [[77.0], [78.0], [79.0]])]]), s1(80.0, [[s0([[81.0]], [[82.0], [83.0], [84.0]])]])], s1(85.0, [[s0([[86.0]], [[87.0], [88.0], [89.0]])]])), s2([s1(90.0, [[s0([[91.0]], [[92.0], [93.0], [94.0]])]]), s1(95.0, [[s0([[96.0]], [[97.0], [98.0], [99.0]])]])], s1(100.0, [[s0([[101.0]], [[102.0], [103.0], [104.0]])]])))]], [[s0([[105.0]], [[106.0], [107.0], [108.0]])]]) in
    let v2: [s9] = [s9(s5(s0([[109.0]], [[110.0], [111.0], [112.0]]), [s1(113.0, [[s0([[114.0]], [[115.0], [116.0], [117.0]])]]), s1(118.0, [[s0([[119.0]], [[120.0], [121.0], [122.0]])]]), s1(123.0, [[s0([[124.0]], [[125.0], [126.0], [127.0]])]])]), [[s5(s0([[128.0]], [[129.0], [130.0], [131.0]]), [s1(132.0, [[s0([[133.0]], [[134.0], [135.0], [136.0]])]]), s1(137.0, [[s0([[138.0]], [[139.0], [140.0], [141.0]])]]), s1(142.0, [[s0([[143.0]], [[144.0], [145.0], [146.0]])]])])]]), s9(s5(s0([[147.0]], [[148.0], [149.0], [150.0]]), [s1(151.0, [[s0([[152.0]], [[153.0], [154.0], [155.0]])]]), s1(156.0, [[s0([[157.0]], [[158.0], [159.0], [160.0]])]]), s1(161.0, [[s0([[162.0]], [[163.0], [164.0], [165.0]])]])]), [[s5(s0([[166.0]], [[167.0], [168.0], [169.0]]), [s1(170.0, [[s0([[171.0]], [[172.0], [173.0], [174.0]])]]), s1(175.0, [[s0([[176.0]], [[177.0], [178.0], [179.0]])]]), s1(180.0, [[s0([[181.0]], [[182.0], [183.0], [184.0]])]])])]]), s9(s5(s0([[185.0]], [[186.0], [187.0], [188.0]]), [s1(189.0, [[s0([[190.0]], [[191.0], [192.0], [193.0]])]]), s1(194.0, [[s0([[195.0]], [[196.0], [197.0], [198.0]])]]), s1(199.0, [[s0([[200.0]], [[201.0], [202.0], [203.0]])]])]), [[s5(s0([[204.0]], [[205.0], [206.0], [207.0]]), [s1(208.0, [[s0([[209.0]], [[210.0], [211.0], [212.0]])]]), s1(213.0, [[s0([[214.0]], [[215.0], [216.0], [217.0]])]]), s1(218.0, [[s0([[219.0]], [[220.0], [221.0], [222.0]])]])])]])] in
    let v3: Float = 223.0 in
    let initialResult: Float = 223.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()