  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  let f13: (s1) -> s1 = (v0: s1) -> s1 {
    let v2: [s0] = v0.p0 in
    var v1: [s0] = v2 in
    var v3: s1 = v0 in
    v3.p0 = v2 in
    v3.p0 = v1 in
    var v7: [s0] = v2 in
    var v6: s1 = v0 in
    var v4: s1 = v6 in
    var v5: [s0] = v1 in
    let v12: s0 = v1[1] in
    let v8: [[Float]] = v12.p1 in
    var v9: s1 = v4 in
    var v15: [[Float]] = v8 in
    var v10: s0 = v12 in
    let v34: [s0] = v9.p0 in
    v3.p0 = v5 in
    var v81: s1 = v3 in
    v81.p1 = v10 in
    v1[1] = v12 in
    v3.p0 = v2 in
    v81.p1 = v10 in
    v3.p0 = v34 in
    v4.p0 = v7 in
    v1[1] = v12 in
    v10.p1 = v15 in
    v5[0] = v10 in
    v81
  } in
  let noinline_f0: ([s1], Float) -> Float = (v0: [s1], v1: Float) -> Float {
    let v7: s1 = v0[1] in
    let v6: s1 = v0[2] in
    let v3: s1 = f13(v6) in
    let v8: s1 = f13(v6) in
    let v23: [s0] = v7.p0 in
    var v10: s1 = v3 in
    let v13: [s0] = v7.p0 in
    var v25: [s0] = v13 in
    v10.p0 = v13 in
    let v9: s0 = v25[1] in
    let v24: s1 = f13(v8) in
    v10.p0 = v23 in
    let v56: [[Float]] = v9.p0 in
    v10.p1 = v9 in
    let v43: [Float] = v56[0] in
    let v47: s0 = v24.p1 in
    let v44: s0 = v10.p1 in
    let v42: Float = v43[0] in
    v25[1] = v44 in
    v25[0] = v47 in
    v42
  } in
  fun loop(i: Int, v0: [s1], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1([s0([[0.0], [1.0]], [[2.0]]), s0([[3.0], [4.0]], [[5.0]])], s0([[6.0], [7.0]], [[8.0]])), s1([s0([[9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0]], [[14.0]])], s0([[15.0], [16.0]], [[17.0]])), s1([s0([[18.0], [19.0]], [[20.0]]), s0([[21.0], [22.0]], [[23.0]])], s0([[24.0], [25.0]], [[26.0]]))] in
    let v1: Float = 27.0 in
    let initialResult: Float = 27.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()