  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s1]
    var p1: s1
    var p2: [s0]
  } in
  struct s3 {
    var p0: s1
    var p1: [[s2]]
  } in
  struct s4 {
    var p0: [[s0]]
    var p1: s3
  } in
  struct s6 {
    var p0: s2
    var p1: s1
  } in
  let f18: (Float) -> Float = (v0: Float) -> Float {
    var v2: Float = v0 in
    var v7: Float = v2 in
    v7 = v0 in
    var v1: Float = v7 in
    var v6: Float = v0 in
    let v8: [Float] = [v2, v1, v0, v6, v0] in
    let v14: Float = v8[2] in
    var v10: Float = v7 in
    let v15: [[Float]] = [v8, v8, v8, v8, v8, v8, v8] in
    var v12: [Float] = v8 in
    var v3: Float = v2 in
    v12[4] = v10 in
    let v43: [Float] = v15[6] in
    var v19: [[Float]] = v15 in
    let v37: [Float] = v19[5] in
    var v27: Float = v0 in
    var v34: [[Float]] = v19 in
    v34[3] = v43 in
    var v24: Float = v14 in
    var v25: [Float] = v12 in
    v19[3] = v25 in
    var v20: Float = v24 in
    let v45: [Float] = v34[1] in
    var v28: [Float] = v37 in
    let v48: [Float] = v19[0] in
    var v30: [[Float]] = v34 in
    var v60: [[Float]] = v15 in
    v25[1] = v3 in
    let v50: Float = v48[4] in
    let v42: [Float] = v30[2] in
    v19[3] = v45 in
    let v79: [[Float]] = [v28, v45, v25] in
    var v55: [[Float]] = v30 in
    let v53: [Float] = v79[2] in
    let v57: [[[Float]]] = [v60, v30, v60, v34] in
    v25[1] = v27 in
    v25[1] = v20 in
    let v88: [[Float]] = v57[2] in
    var v91: [[Float]] = v88 in
    let v77: [Float] = v88[0] in
    var v202: [[[Float]]] = v57 in
    v34 = v91 in
    let v110: [Float] = v55[2] in
    let v106: [[Float]] = v202[0] in
    v55[5] = v37 in
    let v122: [Float] = v106[2] in
    v19[3] = v42 in
    let v65: Float = v53[0] in
    v24 = v27 in
    v30[5] = v110 in
    v34[4] = v77 in
    v24 = v50 in
    v55[6] = v122 in
    v65
  } in
  let noinline_f0: ([[s6]], [[s3]], [s4], Float) -> Float = (v0: [[s6]], v1: [[s3]], v2: [s4], v3: Float) -> Float {
    let v5: Float = f18(v3) in
    let v6: Float = f18(v5) in
    let v25: Float = f18(v6) in
    let v48: Float = f18(v25) in
    let v34: Float = v48 * v25 in
    v34
  } in
  fun loop(i: Int, v0: [[s6]], v1: [[s3]], v2: [s4], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s6]] = [[s6(s2([s1(s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]), s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]]))], s1(s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]]), s0([[15.0], [16.0]], [[17.0], [18.0], [19.0]])), [s0([[20.0], [21.0]], [[22.0], [23.0], [24.0]]), s0([[25.0], [26.0]], [[27.0], [28.0], [29.0]]), s0([[30.0], [31.0]], [[32.0], [33.0], [34.0]])]), s1(s0([[35.0], [36.0]], [[37.0], [38.0], [39.0]]), s0([[40.0], [41.0]], [[42.0], [43.0], [44.0]])))], [s6(s2([s1(s0([[45.0], [46.0]], [[47.0], [48.0], [49.0]]), s0([[50.0], [51.0]], [[52.0], [53.0], [54.0]]))], s1(s0([[55.0], [56.0]], [[57.0], [58.0], [59.0]]), s0([[60.0], [61.0]], [[62.0], [63.0], [64.0]])), [s0([[65.0], [66.0]], [[67.0], [68.0], [69.0]]), s0([[70.0], [71.0]], [[72.0], [73.0], [74.0]]), s0([[75.0], [76.0]], [[77.0], [78.0], [79.0]])]), s1(s0([[80.0], [81.0]], [[82.0], [83.0], [84.0]]), s0([[85.0], [86.0]], [[87.0], [88.0], [89.0]])))], [s6(s2([s1(s0([[90.0], [91.0]], [[92.0], [93.0], [94.0]]), s0([[95.0], [96.0]], [[97.0], [98.0], [99.0]]))], s1(s0([[100.0], [101.0]], [[102.0], [103.0], [104.0]]), s0([[105.0], [106.0]], [[107.0], [108.0], [109.0]])), [s0([[110.0], [111.0]], [[112.0], [113.0], [114.0]]), s0([[115.0], [116.0]], [[117.0], [118.0], [119.0]]), s0([[120.0], [121.0]], [[122.0], [123.0], [124.0]])]), s1(s0([[125.0], [126.0]], [[127.0], [128.0], [129.0]]), s0([[130.0], [131.0]], [[132.0], [133.0], [134.0]])))]] in
    let v1: [[s3]] = [[s3(s1(s0([[135.0], [136.0]], [[137.0], [138.0], [139.0]]), s0([[140.0], [141.0]], [[142.0], [143.0], [144.0]])), [[s2([s1(s0([[145.0], [146.0]], [[147.0], [148.0], [149.0]]), s0([[150.0], [151.0]], [[152.0], [153.0], [154.0]]))], s1(s0([[155.0], [156.0]], [[157.0], [158.0], [159.0]]), s0([[160.0], [161.0]], [[162.0], [163.0], [164.0]])), [s0([[165.0], [166.0]], [[167.0], [168.0], [169.0]]), s0([[170.0], [171.0]], [[172.0], [173.0], [174.0]]), s0([[175.0], [176.0]], [[177.0], [178.0], [179.0]])])]])], [s3(s1(s0([[180.0], [181.0]], [[182.0], [183.0], [184.0]]), s0([[185.0], [186.0]], [[187.0], [188.0], [189.0]])), [[s2([s1(s0([[190.0], [191.0]], [[192.0], [193.0], [194.0]]), s0([[195.0], [196.0]], [[197.0], [198.0], [199.0]]))], s1(s0([[200.0], [201.0]], [[202.0], [203.0], [204.0]]), s0([[205.0], [206.0]], [[207.0], [208.0], [209.0]])), [s0([[210.0], [211.0]], [[212.0], [213.0], [214.0]]), s0([[215.0], [216.0]], [[217.0], [218.0], [219.0]]), s0([[220.0], [221.0]], [[222.0], [223.0], [224.0]])])]])], [s3(s1(s0([[225.0], [226.0]], [[227.0], [228.0], [229.0]]), s0([[230.0], [231.0]], [[232.0], [233.0], [234.0]])), [[s2([s1(s0([[235.0], [236.0]], [[237.0], [238.0], [239.0]]), s0([[240.0], [241.0]], [[242.0], [243.0], [244.0]]))], s1(s0([[245.0], [246.0]], [[247.0], [248.0], [249.0]]), s0([[250.0], [251.0]], [[252.0], [253.0], [254.0]])), [s0([[255.0], [256.0]], [[257.0], [258.0], [259.0]]), s0([[260.0], [261.0]], [[262.0], [263.0], [264.0]]), s0([[265.0], [266.0]], [[267.0], [268.0], [269.0]])])]])]] in
    let v2: [s4] = [s4([[s0([[270.0], [271.0]], [[272.0], [273.0], [274.0]])], [s0([[275.0], [276.0]], [[277.0], [278.0], [279.0]])]], s3(s1(s0([[280.0], [281.0]], [[282.0], [283.0], [284.0]]), s0([[285.0], [286.0]], [[287.0], [288.0], [289.0]])), [[s2([s1(s0([[290.0], [291.0]], [[292.0], [293.0], [294.0]]), s0([[295.0], [296.0]], [[297.0], [298.0], [299.0]]))], s1(s0([[300.0], [301.0]], [[302.0], [303.0], [304.0]]), s0([[305.0], [306.0]], [[307.0], [308.0], [309.0]])), [s0([[310.0], [311.0]], [[312.0], [313.0], [314.0]]), s0([[315.0], [316.0]], [[317.0], [318.0], [319.0]]), s0([[320.0], [321.0]], [[322.0], [323.0], [324.0]])])]])), s4([[s0([[325.0], [326.0]], [[327.0], [328.0], [329.0]])], [s0([[330.0], [331.0]], [[332.0], [333.0], [334.0]])]], s3(s1(s0([[335.0], [336.0]], [[337.0], [338.0], [339.0]]), s0([[340.0], [341.0]], [[342.0], [343.0], [344.0]])), [[s2([s1(s0([[345.0], [346.0]], [[347.0], [348.0], [349.0]]), s0([[350.0], [351.0]], [[352.0], [353.0], [354.0]]))], s1(s0([[355.0], [356.0]], [[357.0], [358.0], [359.0]]), s0([[360.0], [361.0]], [[362.0], [363.0], [364.0]])), [s0([[365.0], [366.0]], [[367.0], [368.0], [369.0]]), s0([[370.0], [371.0]], [[372.0], [373.0], [374.0]]), s0([[375.0], [376.0]], [[377.0], [378.0], [379.0]])])]])), s4([[s0([[380.0], [381.0]], [[382.0], [383.0], [384.0]])], [s0([[385.0], [386.0]], [[387.0], [388.0], [389.0]])]], s3(s1(s0([[390.0], [391.0]], [[392.0], [393.0], [394.0]]), s0([[395.0], [396.0]], [[397.0], [398.0], [399.0]])), [[s2([s1(s0([[400.0], [401.0]], [[402.0], [403.0], [404.0]]), s0([[405.0], [406.0]], [[407.0], [408.0], [409.0]]))], s1(s0([[410.0], [411.0]], [[412.0], [413.0], [414.0]]), s0([[415.0], [416.0]], [[417.0], [418.0], [419.0]])), [s0([[420.0], [421.0]], [[422.0], [423.0], [424.0]]), s0([[425.0], [426.0]], [[427.0], [428.0], [429.0]]), s0([[430.0], [431.0]], [[432.0], [433.0], [434.0]])])]]))] in
    let v3: Float = 435.0 in
    let initialResult: Float = 435.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()