  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
  }
  struct s2 {
    var p0: s1
    var p1: [s0]
  }
  struct s3 {
    var p0: s1
    var p1: [s0]
  }
  struct s5 {
    var p0: s2
    var p1: s0
  }
  struct s6 {
    var p0: Double
    var p1: s2
    var p2: [s5]
  }
  struct s9 {
    var p0: [s3]
    var p1: [[s6]]
  }
  @inline(never)
  func f0(_ v0: [Double], _ v1: [[s2]], _ v2: s9, _ v3: Double) -> Double {
    let v9: [s2] = v1[0]
    var v5: [[s2]] = v1
    let v7: [s2] = v5[0]
    var v25: Double = v3
    v5[0] = v9
    let v18: s2 = v7[0]
    let v28: [s0] = v18.p1
    let v29: s0 = v28[0]
    let v48: [[Double]] = v29.p0
    let v70: [Double] = v48[1]
    let v121: Double = v70[0]
    let v213: Double = v25 * v121
    return v213
  }
  func benchmark() {
    let v0: [Double] = [0.0, 1.0, 2.0]
    let v1: [[s2]] = [[s2(p0: s1(p0: [[s0(p0: [[3.0], [4.0]], p1: [[5.0], [6.0], [7.0]])], [s0(p0: [[8.0], [9.0]], p1: [[10.0], [11.0], [12.0]])], [s0(p0: [[13.0], [14.0]], p1: [[15.0], [16.0], [17.0]])]], p1: [s0(p0: [[18.0], [19.0]], p1: [[20.0], [21.0], [22.0]]), s0(p0: [[23.0], [24.0]], p1: [[25.0], [26.0], [27.0]]), s0(p0: [[28.0], [29.0]], p1: [[30.0], [31.0], [32.0]])]), p1: [s0(p0: [[33.0], [34.0]], p1: [[35.0], [36.0], [37.0]])])]]
    let v2: s9 = s9(p0: [s3(p0: s1(p0: [[s0(p0: [[38.0], [39.0]], p1: [[40.0], [41.0], [42.0]])], [s0(p0: [[43.0], [44.0]], p1: [[45.0], [46.0], [47.0]])], [s0(p0: [[48.0], [49.0]], p1: [[50.0], [51.0], [52.0]])]], p1: [s0(p0: [[53.0], [54.0]], p1: [[55.0], [56.0], [57.0]]), s0(p0: [[58.0], [59.0]], p1: [[60.0], [61.0], [62.0]]), s0(p0: [[63.0], [64.0]], p1: [[65.0], [66.0], [67.0]])]), p1: [s0(p0: [[68.0], [69.0]], p1: [[70.0], [71.0], [72.0]]), s0(p0: [[73.0], [74.0]], p1: [[75.0], [76.0], [77.0]]), s0(p0: [[78.0], [79.0]], p1: [[80.0], [81.0], [82.0]])]), s3(p0: s1(p0: [[s0(p0: [[83.0], [84.0]], p1: [[85.0], [86.0], [87.0]])], [s0(p0: [[88.0], [89.0]], p1: [[90.0], [91.0], [92.0]])], [s0(p0: [[93.0], [94.0]], p1: [[95.0], [96.0], [97.0]])]], p1: [s0(p0: [[98.0], [99.0]], p1: [[100.0], [101.0], [102.0]]), s0(p0: [[103.0], [104.0]], p1: [[105.0], [106.0], [107.0]]), s0(p0: [[108.0], [109.0]], p1: [[110.0], [111.0], [112.0]])]), p1: [s0(p0: [[113.0], [114.0]], p1: [[115.0], [116.0], [117.0]]), s0(p0: [[118.0], [119.0]], p1: [[120.0], [121.0], [122.0]]), s0(p0: [[123.0], [124.0]], p1: [[125.0], [126.0], [127.0]])]), s3(p0: s1(p0: [[s0(p0: [[128.0], [129.0]], p1: [[130.0], [131.0], [132.0]])], [s0(p0: [[133.0], [134.0]], p1: [[135.0], [136.0], [137.0]])], [s0(p0: [[138.0], [139.0]], p1: [[140.0], [141.0], [142.0]])]], p1: [s0(p0: [[143.0], [144.0]], p1: [[145.0], [146.0], [147.0]]), s0(p0: [[148.0], [149.0]], p1: [[150.0], [151.0], [152.0]]), s0(p0: [[153.0], [154.0]], p1: [[155.0], [156.0], [157.0]])]), p1: [s0(p0: [[158.0], [159.0]], p1: [[160.0], [161.0], [162.0]]), s0(p0: [[163.0], [164.0]], p1: [[165.0], [166.0], [167.0]]), s0(p0: [[168.0], [169.0]], p1: [[170.0], [171.0], [172.0]])])], p1: [[s6(p0: 173.0, p1: s2(p0: s1(p0: [[s0(p0: [[174.0], [175.0]], p1: [[176.0], [177.0], [178.0]])], [s0(p0: [[179.0], [180.0]], p1: [[181.0], [182.0], [183.0]])], [s0(p0: [[184.0], [185.0]], p1: [[186.0], [187.0], [188.0]])]], p1: [s0(p0: [[189.0], [190.0]], p1: [[191.0], [192.0], [193.0]]), s0(p0: [[194.0], [195.0]], p1: [[196.0], [197.0], [198.0]]), s0(p0: [[199.0], [200.0]], p1: [[201.0], [202.0], [203.0]])]), p1: [s0(p0: [[204.0], [205.0]], p1: [[206.0], [207.0], [208.0]])]), p2: [s5(p0: s2(p0: s1(p0: [[s0(p0: [[209.0], [210.0]], p1: [[211.0], [212.0], [213.0]])], [s0(p0: [[214.0], [215.0]], p1: [[216.0], [217.0], [218.0]])], [s0(p0: [[219.0], [220.0]], p1: [[221.0], [222.0], [223.0]])]], p1: [s0(p0: [[224.0], [225.0]], p1: [[226.0], [227.0], [228.0]]), s0(p0: [[229.0], [230.0]], p1: [[231.0], [232.0], [233.0]]), s0(p0: [[234.0], [235.0]], p1: [[236.0], [237.0], [238.0]])]), p1: [s0(p0: [[239.0], [240.0]], p1: [[241.0], [242.0], [243.0]])]), p1: s0(p0: [[244.0], [245.0]], p1: [[246.0], [247.0], [248.0]])), s5(p0: s2(p0: s1(p0: [[s0(p0: [[249.0], [250.0]], p1: [[251.0], [252.0], [253.0]])], [s0(p0: [[254.0], [255.0]], p1: [[256.0], [257.0], [258.0]])], [s0(p0: [[259.0], [260.0]], p1: [[261.0], [262.0], [263.0]])]], p1: [s0(p0: [[264.0], [265.0]], p1: [[266.0], [267.0], [268.0]]), s0(p0: [[269.0], [270.0]], p1: [[271.0], [272.0], [273.0]]), s0(p0: [[274.0], [275.0]], p1: [[276.0], [277.0], [278.0]])]), p1: [s0(p0: [[279.0], [280.0]], p1: [[281.0], [282.0], [283.0]])]), p1: s0(p0: [[284.0], [285.0]], p1: [[286.0], [287.0], [288.0]])), s5(p0: s2(p0: s1(p0: [[s0(p0: [[289.0], [290.0]], p1: [[291.0], [292.0], [293.0]])], [s0(p0: [[294.0], [295.0]], p1: [[296.0], [297.0], [298.0]])], [s0(p0: [[299.0], [300.0]], p1: [[301.0], [302.0], [303.0]])]], p1: [s0(p0: [[304.0], [305.0]], p1: [[306.0], [307.0], [308.0]]), s0(p0: [[309.0], [310.0]], p1: [[311.0], [312.0], [313.0]]), s0(p0: [[314.0], [315.0]], p1: [[316.0], [317.0], [318.0]])]), p1: [s0(p0: [[319.0], [320.0]], p1: [[321.0], [322.0], [323.0]])]), p1: s0(p0: [[324.0], [325.0]], p1: [[326.0], [327.0], [328.0]]))])]])
    let v3: Double = 329.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 329.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
