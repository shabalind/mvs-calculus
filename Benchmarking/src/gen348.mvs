  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
    var p2: [Float]
  } in
  struct s2 {
    var p0: s1
    var p1: s0
  } in
  struct s3 {
    var p0: [[s1]]
    var p1: [s2]
  } in
  let f28: (Float) -> Float = (v0: Float) -> Float {
    var v7: Float = v0 in
    var v1: Float = v7 in
    var v4: Float = v7 in
    var v6: Float = v4 in
    var v8: Float = v0 in
    var v5: Float = v1 in
    v7 = v1 in
    var v20: Float = v5 in
    var v12: Float = v6 in
    var v9: Float = v20 in
    var v11: Float = v20 in
    var v21: Float = v0 in
    v6 = v21 in
    v21 = v11 in
    let v29: [Float] = [v8] in
    let v18: [Float] = [v4, v1] in
    let v26: Float = v29[0] in
    var v19: [Float] = v18 in
    let v28: Float = v19[0] in
    var v24: [Float] = v29 in
    let v25: Float = v24[0] in
    var v27: Float = v5 in
    let v34: Float = v29[0] in
    v19[1] = v26 in
    let v44: [Float] = [v27, v11, v25, v9, v26, v0] in
    var v46: [Float] = v44 in
    v21 = v28 in
    let v30: Float = v46[0] in
    let v77: Float = v18[0] in
    let v59: Float = v44[4] in
    v46[4] = v27 in
    var v150: [Float] = v44 in
    let v32: Float = v19[1] in
    v19[1] = v77 in
    v19[1] = v12 in
    v150[2] = v34 in
    v150[4] = v32 in
    let v57: Float = v150[1] in
    v46[2] = v8 in
    v9 = v59 in
    v6 = v30 in
    v150 = v46 in
    v57
  } in
  let noinline_f0: ([s3], Float) -> Float = (v0: [s3], v1: Float) -> Float {
    let v2: Float = f28(v1) in
    let v8: Float = f28(v1) in
    let v16: Float = f28(v1) in
    let v19: Float = f28(v2) in
    let v28: Float = f28(v16) in
    let v27: [Float] = [v19, v2, v8, v19, v28] in
    let v26: Float = v27[4] in
    let v72: Float = f28(v26) in
    v72
  } in
  fun loop(i: Int, v0: [s3], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s3] = [s3([[s1(s0([[0.0]], [[1.0], [2.0], [3.0]]), s0([[4.0]], [[5.0], [6.0], [7.0]]), [8.0, 9.0, 10.0])], [s1(s0([[11.0]], [[12.0], [13.0], [14.0]]), s0([[15.0]], [[16.0], [17.0], [18.0]]), [19.0, 20.0, 21.0])]], [s2(s1(s0([[22.0]], [[23.0], [24.0], [25.0]]), s0([[26.0]], [[27.0], [28.0], [29.0]]), [30.0, 31.0, 32.0]), s0([[33.0]], [[34.0], [35.0], [36.0]])), s2(s1(s0([[37.0]], [[38.0], [39.0], [40.0]]), s0([[41.0]], [[42.0], [43.0], [44.0]]), [45.0, 46.0, 47.0]), s0([[48.0]], [[49.0], [50.0], [51.0]])), s2(s1(s0([[52.0]], [[53.0], [54.0], [55.0]]), s0([[56.0]], [[57.0], [58.0], [59.0]]), [60.0, 61.0, 62.0]), s0([[63.0]], [[64.0], [65.0], [66.0]]))])] in
    let v1: Float = 67.0 in
    let initialResult: Float = 67.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()