  let noinline_f0: ([[Float]], [[Float]], Float) -> Float = (v0: [[Float]], v1: [[Float]], v2: Float) -> Float {
    let v5: [Float] = [v2, v2, v2, v2] in
    var v11: [Float] = v5 in
    var v3: Float = v2 in
    v11[0] = v2 in
    let v6: Float = v11[2] in
    v11[1] = v6 in
    v11[2] = v6 in
    let v22: [[Float]] = [v5, v11, v5] in
    var v59: [[Float]] = v22 in
    v11[0] = v3 in
    var v51: [[Float]] = v22 in
    v51[0] = v11 in
    let v76: [Float] = v51[0] in
    let v74: [Float] = v59[1] in
    let v58: Float = v74[3] in
    v59[2] = v76 in
    v58
  } in
  fun loop(i: Int, v0: [[Float]], v1: [[Float]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0]] in
    let v1: [[Float]] = [[1.0]] in
    let v2: Float = 2.0 in
    let initialResult: Float = 2.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()