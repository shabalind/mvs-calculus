  let noinline_f0: ([[Float]], Float) -> Float = (v0: [[Float]], v1: Float) -> Float {
    let v4: [Float] = v0[0] in
    var v7: [Float] = v4 in
    var v13: [Float] = v7 in
    v7[0] = v1 in
    v7[0] = v1 in
    var v9: [Float] = v13 in
    var v20: [Float] = v9 in
    var v23: [Float] = v20 in
    var v51: [Float] = v23 in
    let v120: Float = v51[0] in
    v120
  } in
  fun loop(i: Int, v0: [[Float]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0]] in
    let v1: Float = 1.0 in
    let initialResult: Float = 1.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()