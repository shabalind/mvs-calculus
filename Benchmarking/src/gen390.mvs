  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s7 {
    var p0: Float
    var p1: s0
  } in
  let noinline_f0: (s7, Float) -> Float = (v0: s7, v1: Float) -> Float {
    let v6: Float = v1 + v1 in
    let v3: [Float] = [v1, v6, v6] in
    let v5: Float = v0.p0 in
    var v10: [Float] = v3 in
    let v7: Float = v10[2] in
    let v28: Float = v3[2] in
    v10[1] = v28 in
    v10[2] = v1 in
    let v31: Float = v10[2] in
    let v21: Float = v28 * v31 in
    let v25: [Float] = [v7, v5, v5, v5] in
    let v53: Float = v25[0] in
    v10[2] = v21 in
    v53
  } in
  fun loop(i: Int, v0: s7, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s7 = s7(0.0, s0([[1.0], [2.0], [3.0]], [[4.0], [5.0]])) in
    let v1: Float = 6.0 in
    let initialResult: Float = 6.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()