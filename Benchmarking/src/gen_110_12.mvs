  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: [[s0]]
    var p1: s0
  } in
  struct s3 {
    var p0: s2
    var p1: s2
  } in
  struct s4 {
    var p0: [s0]
    var p1: s2
  } in
  struct s5 {
    var p0: [s1]
    var p1: [s2]
  } in
  struct s6 {
    var p0: s3
    var p1: [[s1]]
  } in
  struct s7 {
    var p0: [[s5]]
    var p1: s0
    var p2: [[s3]]
    var p3: s3
  } in
  struct s8 {
    var p0: s2
    var p1: s4
  } in
  struct s9 {
    var p0: s1
    var p1: s7
    var p2: s1
    var p3: s8
    var p4: [[s0]]
    var p5: s1
    var p6: s4
  } in
  struct s11 {
    var p0: [s1]
    var p1: [s2]
  } in
  struct s12 {
    var p0: s7
    var p1: [[s2]]
  } in
  let f50: ([Float]) -> [Float] = (v0: [Float]) -> [Float] {
    var v3: [Float] = v0 in
    var v5: [Float] = v0 in
    let v1: Float = v3[0] in
    var v2: [Float] = v3 in
    var v7: [Float] = v3 in
    var v4: Float = v1 in
    let v11: Float = v4 + v4 in
    v2[0] = v4 in
    v7[0] = v11 in
    let v12: Float = v5[0] in
    var v8: [Float] = v5 in
    v2[0] = v11 in
    v8[0] = v4 in
    v3[0] = v4 in
    let v18: [[Float]] = [v8, v5, v2] in
    v2[0] = v11 in
    v7[0] = v11 in
    var v28: [Float] = v5 in
    let v15: Float = v2[0] in
    v8[0] = v4 in
    let v16: [Float] = v18[2] in
    let v24: [[[Float]]] = [v18, v18, v18, v18] in
    var v22: [[[Float]]] = v24 in
    v22[2] = v18 in
    let v26: Float = v16[0] in
    var v53: [Float] = v0 in
    var v34: Float = v4 in
    var v37: [[[Float]]] = v22 in
    v7[0] = v12 in
    v53[0] = v26 in
    var v59: [Float] = v28 in
    let v70: Float = v7[0] in
    v2[0] = v34 in
    let v143: Float = v59[0] in
    let v82: [[[[Float]]]] = [v37, v22, v24, v22, v24] in
    var v133: [[[[Float]]]] = v82 in
    var v57: Float = v12 in
    var v51: [[[[Float]]]] = v133 in
    let v42: Float = v53[0] in
    v28[0] = v12 in
    let v97: [Float] = [v143, v42, v57] in
    var v103: [[[[Float]]]] = v51 in
    let v109: [[[Float]]] = v103[4] in
    var v52: [Float] = v59 in
    v7 = v52 in
    let v135: [[Float]] = v109[1] in
    v5[0] = v70 in
    let v212: [Float] = v135[1] in
    v5[0] = v15 in
    let v171: Float = v97[0] in
    v2[0] = v171 in
    v212
  } in
  let f26: (s0) -> s0 = (v0: s0) -> s0 {
    var v5: s0 = v0 in
    var v1: s0 = v0 in
    let v4: [[Float]] = v1.p0 in
    var v7: s0 = v1 in
    let v8: [Float] = v4[0] in
    var v3: s0 = v1 in
    v3.p0 = v4 in
    let v2: [Float] = v4[2] in
    var v11: [[Float]] = v4 in
    v3 = v7 in
    var v6: [[Float]] = v4 in
    let v15: [[Float]] = v5.p1 in
    v3.p1 = v15 in
    v5.p0 = v11 in
    var v19: [[Float]] = v15 in
    v3.p1 = v19 in
    let v13: [Float] = f50(v2) in
    v19[0] = v13 in
    let v23: [[Float]] = v7.p0 in
    var v18: s0 = v1 in
    v3 = v18 in
    v1 = v7 in
    let v36: [Float] = f50(v8) in
    let v31: [Float] = f50(v36) in
    let v30: [[Float]] = v3.p0 in
    let v20: [Float] = v15[0] in
    let v71: [[Float]] = v7.p0 in
    v19[0] = v13 in
    let v25: [[Float]] = v5.p1 in
    v19[0] = v31 in
    v6[0] = v36 in
    v5.p0 = v4 in
    v6[2] = v20 in
    let v17: [[Float]] = v0.p0 in
    let v62: [[Float]] = v18.p1 in
    v5.p0 = v30 in
    let v58: [Float] = v71[2] in
    var v50: s0 = v0 in
    v3.p1 = v15 in
    let v53: [[Float]] = v50.p1 in
    let v150: s0 = s0(v17, v62) in
    v3 = v0 in
    v5.p1 = v62 in
    v3.p1 = v25 in
    v11[0] = v58 in
    v7 = v1 in
    v1.p0 = v6 in
    v1.p0 = v11 in
    v1.p1 = v53 in
    v50.p0 = v23 in
    v50 = v7 in
    v150
  } in
  let noinline_f0: (s12, s6, [s5], s9, s11, s0, Float) -> Float = (v0: s12, v1: s6, v2: [s5], v3: s9, v4: s11, v5: s0, v6: Float) -> Float {
    var v8: s0 = v5 in
    let v47: s0 = f26(v8) in
    let v57: [[Float]] = v47.p0 in
    let v77: [Float] = v57[1] in
    v8.p0 = v57 in
    let v371: Float = v77[0] in
    v371
  } in
  fun loop(i: Int, v0: s12, v1: s6, v2: [s5], v3: s9, v4: s11, v5: s0, v6: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4, v5, v6) in
      loop(i + 1, v0, v1, v2, v3, v4, v5, v6, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s12 = s12(s7([[s5([s1(s0([[0.0], [1.0], [2.0]], [[3.0]]), [s0([[4.0], [5.0], [6.0]], [[7.0]])])], [s2([[s0([[8.0], [9.0], [10.0]], [[11.0]])]], s0([[12.0], [13.0], [14.0]], [[15.0]])), s2([[s0([[16.0], [17.0], [18.0]], [[19.0]])]], s0([[20.0], [21.0], [22.0]], [[23.0]])), s2([[s0([[24.0], [25.0], [26.0]], [[27.0]])]], s0([[28.0], [29.0], [30.0]], [[31.0]]))])], [s5([s1(s0([[32.0], [33.0], [34.0]], [[35.0]]), [s0([[36.0], [37.0], [38.0]], [[39.0]])])], [s2([[s0([[40.0], [41.0], [42.0]], [[43.0]])]], s0([[44.0], [45.0], [46.0]], [[47.0]])), s2([[s0([[48.0], [49.0], [50.0]], [[51.0]])]], s0([[52.0], [53.0], [54.0]], [[55.0]])), s2([[s0([[56.0], [57.0], [58.0]], [[59.0]])]], s0([[60.0], [61.0], [62.0]], [[63.0]]))])]], s0([[64.0], [65.0], [66.0]], [[67.0]]), [[s3(s2([[s0([[68.0], [69.0], [70.0]], [[71.0]])]], s0([[72.0], [73.0], [74.0]], [[75.0]])), s2([[s0([[76.0], [77.0], [78.0]], [[79.0]])]], s0([[80.0], [81.0], [82.0]], [[83.0]])))], [s3(s2([[s0([[84.0], [85.0], [86.0]], [[87.0]])]], s0([[88.0], [89.0], [90.0]], [[91.0]])), s2([[s0([[92.0], [93.0], [94.0]], [[95.0]])]], s0([[96.0], [97.0], [98.0]], [[99.0]])))], [s3(s2([[s0([[100.0], [101.0], [102.0]], [[103.0]])]], s0([[104.0], [105.0], [106.0]], [[107.0]])), s2([[s0([[108.0], [109.0], [110.0]], [[111.0]])]], s0([[112.0], [113.0], [114.0]], [[115.0]])))]], s3(s2([[s0([[116.0], [117.0], [118.0]], [[119.0]])]], s0([[120.0], [121.0], [122.0]], [[123.0]])), s2([[s0([[124.0], [125.0], [126.0]], [[127.0]])]], s0([[128.0], [129.0], [130.0]], [[131.0]])))), [[s2([[s0([[132.0], [133.0], [134.0]], [[135.0]])]], s0([[136.0], [137.0], [138.0]], [[139.0]]))]]) in
    let v1: s6 = s6(s3(s2([[s0([[140.0], [141.0], [142.0]], [[143.0]])]], s0([[144.0], [145.0], [146.0]], [[147.0]])), s2([[s0([[148.0], [149.0], [150.0]], [[151.0]])]], s0([[152.0], [153.0], [154.0]], [[155.0]]))), [[s1(s0([[156.0], [157.0], [158.0]], [[159.0]]), [s0([[160.0], [161.0], [162.0]], [[163.0]])])], [s1(s0([[164.0], [165.0], [166.0]], [[167.0]]), [s0([[168.0], [169.0], [170.0]], [[171.0]])])], [s1(s0([[172.0], [173.0], [174.0]], [[175.0]]), [s0([[176.0], [177.0], [178.0]], [[179.0]])])]]) in
    let v2: [s5] = [s5([s1(s0([[180.0], [181.0], [182.0]], [[183.0]]), [s0([[184.0], [185.0], [186.0]], [[187.0]])])], [s2([[s0([[188.0], [189.0], [190.0]], [[191.0]])]], s0([[192.0], [193.0], [194.0]], [[195.0]])), s2([[s0([[196.0], [197.0], [198.0]], [[199.0]])]], s0([[200.0], [201.0], [202.0]], [[203.0]])), s2([[s0([[204.0], [205.0], [206.0]], [[207.0]])]], s0([[208.0], [209.0], [210.0]], [[211.0]]))]), s5([s1(s0([[212.0], [213.0], [214.0]], [[215.0]]), [s0([[216.0], [217.0], [218.0]], [[219.0]])])], [s2([[s0([[220.0], [221.0], [222.0]], [[223.0]])]], s0([[224.0], [225.0], [226.0]], [[227.0]])), s2([[s0([[228.0], [229.0], [230.0]], [[231.0]])]], s0([[232.0], [233.0], [234.0]], [[235.0]])), s2([[s0([[236.0], [237.0], [238.0]], [[239.0]])]], s0([[240.0], [241.0], [242.0]], [[243.0]]))]), s5([s1(s0([[244.0], [245.0], [246.0]], [[247.0]]), [s0([[248.0], [249.0], [250.0]], [[251.0]])])], [s2([[s0([[252.0], [253.0], [254.0]], [[255.0]])]], s0([[256.0], [257.0], [258.0]], [[259.0]])), s2([[s0([[260.0], [261.0], [262.0]], [[263.0]])]], s0([[264.0], [265.0], [266.0]], [[267.0]])), s2([[s0([[268.0], [269.0], [270.0]], [[271.0]])]], s0([[272.0], [273.0], [274.0]], [[275.0]]))])] in
    let v3: s9 = s9(s1(s0([[276.0], [277.0], [278.0]], [[279.0]]), [s0([[280.0], [281.0], [282.0]], [[283.0]])]), s7([[s5([s1(s0([[284.0], [285.0], [286.0]], [[287.0]]), [s0([[288.0], [289.0], [290.0]], [[291.0]])])], [s2([[s0([[292.0], [293.0], [294.0]], [[295.0]])]], s0([[296.0], [297.0], [298.0]], [[299.0]])), s2([[s0([[300.0], [301.0], [302.0]], [[303.0]])]], s0([[304.0], [305.0], [306.0]], [[307.0]])), s2([[s0([[308.0], [309.0], [310.0]], [[311.0]])]], s0([[312.0], [313.0], [314.0]], [[315.0]]))])], [s5([s1(s0([[316.0], [317.0], [318.0]], [[319.0]]), [s0([[320.0], [321.0], [322.0]], [[323.0]])])], [s2([[s0([[324.0], [325.0], [326.0]], [[327.0]])]], s0([[328.0], [329.0], [330.0]], [[331.0]])), s2([[s0([[332.0], [333.0], [334.0]], [[335.0]])]], s0([[336.0], [337.0], [338.0]], [[339.0]])), s2([[s0([[340.0], [341.0], [342.0]], [[343.0]])]], s0([[344.0], [345.0], [346.0]], [[347.0]]))])]], s0([[348.0], [349.0], [350.0]], [[351.0]]), [[s3(s2([[s0([[352.0], [353.0], [354.0]], [[355.0]])]], s0([[356.0], [357.0], [358.0]], [[359.0]])), s2([[s0([[360.0], [361.0], [362.0]], [[363.0]])]], s0([[364.0], [365.0], [366.0]], [[367.0]])))], [s3(s2([[s0([[368.0], [369.0], [370.0]], [[371.0]])]], s0([[372.0], [373.0], [374.0]], [[375.0]])), s2([[s0([[376.0], [377.0], [378.0]], [[379.0]])]], s0([[380.0], [381.0], [382.0]], [[383.0]])))], [s3(s2([[s0([[384.0], [385.0], [386.0]], [[387.0]])]], s0([[388.0], [389.0], [390.0]], [[391.0]])), s2([[s0([[392.0], [393.0], [394.0]], [[395.0]])]], s0([[396.0], [397.0], [398.0]], [[399.0]])))]], s3(s2([[s0([[400.0], [401.0], [402.0]], [[403.0]])]], s0([[404.0], [405.0], [406.0]], [[407.0]])), s2([[s0([[408.0], [409.0], [410.0]], [[411.0]])]], s0([[412.0], [413.0], [414.0]], [[415.0]])))), s1(s0([[416.0], [417.0], [418.0]], [[419.0]]), [s0([[420.0], [421.0], [422.0]], [[423.0]])]), s8(s2([[s0([[424.0], [425.0], [426.0]], [[427.0]])]], s0([[428.0], [429.0], [430.0]], [[431.0]])), s4([s0([[432.0], [433.0], [434.0]], [[435.0]]), s0([[436.0], [437.0], [438.0]], [[439.0]])], s2([[s0([[440.0], [441.0], [442.0]], [[443.0]])]], s0([[444.0], [445.0], [446.0]], [[447.0]])))), [[s0([[448.0], [449.0], [450.0]], [[451.0]])]], s1(s0([[452.0], [453.0], [454.0]], [[455.0]]), [s0([[456.0], [457.0], [458.0]], [[459.0]])]), s4([s0([[460.0], [461.0], [462.0]], [[463.0]]), s0([[464.0], [465.0], [466.0]], [[467.0]])], s2([[s0([[468.0], [469.0], [470.0]], [[471.0]])]], s0([[472.0], [473.0], [474.0]], [[475.0]])))) in
    let v4: s11 = s11([s1(s0([[476.0], [477.0], [478.0]], [[479.0]]), [s0([[480.0], [481.0], [482.0]], [[483.0]])])], [s2([[s0([[484.0], [485.0], [486.0]], [[487.0]])]], s0([[488.0], [489.0], [490.0]], [[491.0]]))]) in
    let v5: s0 = s0([[492.0], [493.0], [494.0]], [[495.0]]) in
    let v6: Float = 496.0 in
    let initialResult: Float = 496.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, v5, v6, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()