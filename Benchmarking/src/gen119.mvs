  let noinline_f0: ([[Float]], [[Float]], Float) -> Float = (v0: [[Float]], v1: [[Float]], v2: Float) -> Float {
    let v5: [Float] = [v2, v2, v2, v2, v2] in
    let v28: Float = v2 + v2 in
    var v13: [Float] = v5 in
    var v16: [Float] = v13 in
    v13 = v16 in
    v13[1] = v28 in
    v13 = v5 in
    let v31: Float = v13[1] in
    let v38: Float = v16[4] in
    let v60: Float = v16[4] in
    let v44: Float = v38 - v31 in
    let v96: Float = v44 / v60 in
    v96
  } in
  fun loop(i: Int, v0: [[Float]], v1: [[Float]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0], [1.0], [2.0]] in
    let v1: [[Float]] = [[3.0], [4.0], [5.0]] in
    let v2: Float = 6.0 in
    let initialResult: Float = 6.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()