  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: ([[s0]], Float) -> Float = (v0: [[s0]], v1: Float) -> Float {
    var v8: [[s0]] = v0 in
    let v5: [s0] = v0[2] in
    v8[1] = v5 in
    let v7: [s0] = v8[2] in
    v8 = v0 in
    v8[2] = v5 in
    let v3: s0 = v7[0] in
    let v6: [[Float]] = v3.p1 in
    let v9: [[Float]] = v3.p0 in
    let v12: [Float] = v6[0] in
    v8[0] = v7 in
    let v11: [s0] = v8[0] in
    var v10: [Float] = v12 in
    v10[0] = v1 in
    let v36: [s0] = v8[1] in
    v8[1] = v11 in
    v10[0] = v1 in
    v8[2] = v36 in
    v10[0] = v1 in
    let v18: Float = v10[0] in
    let v39: [Float] = v9[1] in
    v10[0] = v18 in
    let v48: Float = v39[0] in
    let v44: Float = v18 - v48 in
    let v54: [s0] = v0[1] in
    v8[2] = v54 in
    v10[0] = v1 in
    v44
  } in
  fun loop(i: Int, v0: [[s0]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s0]] = [[s0([[0.0], [1.0]], [[2.0]])], [s0([[3.0], [4.0]], [[5.0]])], [s0([[6.0], [7.0]], [[8.0]])]] in
    let v1: Float = 9.0 in
    let initialResult: Float = 9.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()