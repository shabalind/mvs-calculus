  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: s1
    var p1: [[s0]]
  } in
  struct s6 {
    var p0: s0
    var p1: Float
  } in
  struct s7 {
    var p0: [s2]
    var p1: [s6]
  } in
  let f14: (s0) -> s0 = (v0: s0) -> s0 {
    let v6: [s0] = [v0, v0] in
    let v4: s0 = v6[0] in
    let v7: [[Float]] = v4.p0 in
    var v3: [[Float]] = v7 in
    let v1: [[Float]] = v4.p1 in
    let v2: s0 = v6[0] in
    let v9: [Float] = v7[0] in
    let v8: [Float] = v1[0] in
    let v15: s0 = v6[0] in
    v3[0] = v8 in
    let v11: [[Float]] = v4.p1 in
    var v47: [s0] = v6 in
    let v32: [[Float]] = v2.p1 in
    var v24: [s0] = v47 in
    let v33: s0 = v24[0] in
    var v42: [[Float]] = v3 in
    var v40: s0 = v33 in
    let v59: [[Float]] = v33.p0 in
    let v28: [[Float]] = v15.p1 in
    var v72: [Float] = v9 in
    let v46: [[Float]] = v33.p1 in
    let v67: s0 = v6[0] in
    v3[0] = v72 in
    v40.p1 = v42 in
    v47[0] = v67 in
    let v71: [Float] = v46[0] in
    v40.p0 = v42 in
    v40.p0 = v11 in
    v40.p0 = v59 in
    v72 = v71 in
    v40.p0 = v32 in
    v40.p0 = v28 in
    v40
  } in
  let f4: (s0) -> s0 = (v0: s0) -> s0 {
    let v2: [[Float]] = v0.p1 in
    let v1: s0 = f14(v0) in
    let v7: [[Float]] = v1.p1 in
    let v3: [Float] = v7[0] in
    let v8: [Float] = v2[0] in
    let v6: Float = v3[0] in
    let v4: Float = v8[0] in
    let v52: s0 = f14(v0) in
    let v33: s6 = s6(v52, v6) in
    var v83: s6 = v33 in
    v83.p1 = v4 in
    let v160: s0 = v83.p0 in
    v160
  } in
  let noinline_f0: (s0, s7, Float) -> Float = (v0: s0, v1: s7, v2: Float) -> Float {
    let v6: s0 = f4(v0) in
    var v11: Float = v2 in
    let v13: [Float] = [v11, v11, v11] in
    let v16: [[Float]] = v6.p1 in
    let v12: [Float] = v16[0] in
    let v30: Float = v12[0] in
    let v21: Float = v13[0] in
    let v166: Float = v21 / v30 in
    let v57: Float = v12[0] in
    let v328: Float = v57 * v166 in
    v328
  } in
  fun loop(i: Int, v0: s0, v1: s7, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0]], [[1.0]]) in
    let v1: s7 = s7([s2(s1([s0([[2.0]], [[3.0]]), s0([[4.0]], [[5.0]])], [[s0([[6.0]], [[7.0]])], [s0([[8.0]], [[9.0]])], [s0([[10.0]], [[11.0]])]]), [[s0([[12.0]], [[13.0]])]]), s2(s1([s0([[14.0]], [[15.0]]), s0([[16.0]], [[17.0]])], [[s0([[18.0]], [[19.0]])], [s0([[20.0]], [[21.0]])], [s0([[22.0]], [[23.0]])]]), [[s0([[24.0]], [[25.0]])]])], [s6(s0([[26.0]], [[27.0]]), 28.0), s6(s0([[29.0]], [[30.0]]), 31.0)]) in
    let v2: Float = 32.0 in
    let initialResult: Float = 32.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()