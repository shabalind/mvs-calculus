  let f17: (Float) -> Float = (v0: Float) -> Float {
    var v2: Float = v0 in
    var v6: Float = v2 in
    v2 = v6 in
    let v1: Float = v6 * v6 in
    var v4: Float = v1 in
    var v3: Float = v4 in
    var v21: Float = v3 in
    v21
  } in
  let noinline_f0: (Float) -> Float = (v0: Float) -> Float {
    var v7: Float = v0 in
    var v1: Float = v0 in
    var v5: Float = v7 in
    var v10: Float = v5 in
    var v9: Float = v1 in
    v5 = v10 in
    var v23: Float = v1 in
    let v30: Float = f17(v23) in
    let v15: Float = f17(v9) in
    let v73: [Float] = [v5, v10] in
    v1 = v10 in
    var v107: [Float] = v73 in
    v107[0] = v15 in
    var v172: Float = v30 in
    var v93: [Float] = v107 in
    let v79: Float = v93[0] in
    v10 = v30 in
    v93[1] = v172 in
    v79
  } in
  fun loop(i: Int, v0: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0) in
      loop(i + 1, v0, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: Float = 0.0 in
    let initialResult: Float = 0.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()