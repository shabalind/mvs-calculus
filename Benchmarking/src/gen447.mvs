  struct s0 {
    var p0: [[Float]]
    var p1: [Float]
    var p2: Float
    var p3: [[Float]]
    var p4: [[Float]]
    var p5: [[Float]]
  } in
  let f87: ([Float]) -> [Float] = (v0: [Float]) -> [Float] {
    var v4: [Float] = v0 in
    var v6: [Float] = v0 in
    let v2: Float = v4[0] in
    var v3: [Float] = v4 in
    let v1: [[Float]] = [v3, v3, v6, v6] in
    v3[1] = v2 in
    let v9: Float = v3[1] in
    v4[1] = v9 in
    v4[1] = v2 in
    v4 = v0 in
    let v13: [Float] = v1[1] in
    let v14: Float = v4[0] in
    let v26: Float = v13[0] in
    let v15: Float = v3[1] in
    var v29: [[Float]] = v1 in
    v29[3] = v0 in
    var v18: [[Float]] = v29 in
    var v25: Float = v26 in
    var v23: [[Float]] = v1 in
    let v27: Float = v4[1] in
    var v59: Float = v15 in
    var v22: Float = v25 in
    v4[0] = v22 in
    let v42: [Float] = v23[2] in
    let v54: Float = v42[1] in
    let v56: [Float] = v18[0] in
    let v45: Float = v14 / v26 in
    v6[0] = v59 in
    var v50: [Float] = v56 in
    var v177: [Float] = v4 in
    var v53: [Float] = v177 in
    let v88: Float = v14 * v27 in
    v177[0] = v88 in
    v50[1] = v54 in
    v53[1] = v45 in
    v18[2] = v53 in
    v50
  } in
  let f24: (s0) -> s0 = (v0: s0) -> s0 {
    var v1: s0 = v0 in
    var v7: s0 = v1 in
    var v4: s0 = v1 in
    var v6: s0 = v0 in
    var v2: s0 = v7 in
    var v3: s0 = v0 in
    let v9: Float = v3.p2 in
    var v10: Float = v9 in
    let v18: [[Float]] = v2.p5 in
    let v14: [[Float]] = v4.p3 in
    v4.p3 = v14 in
    let v21: [Float] = v6.p1 in
    let v15: Float = v21[1] in
    var v24: [[Float]] = v14 in
    v6.p4 = v18 in
    let v17: [[Float]] = v6.p0 in
    let v16: [[Float]] = v7.p5 in
    var v13: [Float] = v21 in
    var v33: [[Float]] = v17 in
    let v27: [Float] = v17[0] in
    v7.p3 = v24 in
    let v25: [[Float]] = v6.p4 in
    let v19: [[Float]] = v1.p0 in
    var v26: [[Float]] = v24 in
    v24[0] = v27 in
    v3.p0 = v19 in
    var v30: s0 = v6 in
    v7.p4 = v16 in
    v13 = v21 in
    let v35: [Float] = f87(v13) in
    var v34: [[Float]] = v18 in
    v4.p2 = v10 in
    let v23: [Float] = v25[2] in
    let v39: Float = v7.p2 in
    let v116: [Float] = f87(v35) in
    v13[1] = v10 in
    let v32: Float = v23[0] in
    var v22: [Float] = v21 in
    v34 = v18 in
    var v55: [[Float]] = v25 in
    let v72: s0 = s0(v26, v116, v15, v26, v34, v18) in
    let v51: Float = v30.p2 in
    v3.p3 = v19 in
    let v50: [Float] = v24[0] in
    let v20: [Float] = f87(v116) in
    v30.p0 = v33 in
    v55[1] = v50 in
    let v36: Float = v39 + v32 in
    let v37: [Float] = v55[0] in
    v7.p4 = v25 in
    let v79: [[Float]] = v1.p0 in
    v4.p3 = v33 in
    v1.p5 = v55 in
    v2.p0 = v24 in
    v1.p0 = v17 in
    let v137: [Float] = f87(v20) in
    v30.p4 = v16 in
    v22[0] = v36 in
    var v78: Float = v51 in
    v6.p5 = v16 in
    var v102: s0 = v72 in
    let v198: Float = v20[1] in
    v4.p1 = v22 in
    v1.p3 = v79 in
    v3.p2 = v198 in
    v33[0] = v37 in
    var v66: [Float] = v137 in
    v102.p1 = v66 in
    var v234: s0 = v102 in
    v13[0] = v78 in
    v234
  } in
  let noinline_f0: ([s0], Float) -> Float = (v0: [s0], v1: Float) -> Float {
    let v3: s0 = v0[2] in
    let v4: s0 = f24(v3) in
    let v9: [Float] = v3.p1 in
    var v7: s0 = v4 in
    v7.p2 = v1 in
    let v23: Float = v7.p2 in
    var v12: [Float] = v9 in
    let v14: [[Float]] = v4.p5 in
    let v13: [Float] = f87(v12) in
    v12[0] = v23 in
    let v16: Float = v13[1] in
    v7.p4 = v14 in
    v7.p2 = v16 in
    v16
  } in
  fun loop(i: Int, v0: [s0], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0]], [1.0, 2.0], 3.0, [[4.0]], [[5.0], [6.0], [7.0]], [[8.0], [9.0], [10.0]]), s0([[11.0]], [12.0, 13.0], 14.0, [[15.0]], [[16.0], [17.0], [18.0]], [[19.0], [20.0], [21.0]]), s0([[22.0]], [23.0, 24.0], 25.0, [[26.0]], [[27.0], [28.0], [29.0]], [[30.0], [31.0], [32.0]])] in
    let v1: Float = 33.0 in
    let initialResult: Float = 33.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()