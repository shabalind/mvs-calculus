  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: [s0]
    var p1: s0
  } in
  struct s4 {
    var p0: [s1]
    var p1: s0
  } in
  let f26: (s2, s0) -> s2 = (v0: s2, v1: s0) -> s2 {
    var v5: s2 = v0 in
    var v4: s0 = v1 in
    var v8: s0 = v1 in
    var v26: s2 = v5 in
    let v28: [s0] = v0.p0 in
    let v20: [[Float]] = v4.p1 in
    var v23: [s0] = v28 in
    let v38: s0 = v23[1] in
    v26.p1 = v8 in
    var v49: s2 = v26 in
    v8.p1 = v20 in
    v26.p0 = v28 in
    v5.p1 = v38 in
    v49
  } in
  let f24: (s0) -> s0 = (v0: s0) -> s0 {
    let v1: [s0] = [v0, v0, v0] in
    var v3: s0 = v0 in
    var v5: [s0] = v1 in
    v5[1] = v3 in
    let v6: [[Float]] = v0.p1 in
    var v12: [[Float]] = v6 in
    let v7: [[Float]] = v0.p1 in
    let v4: [[Float]] = v0.p1 in
    v3 = v0 in
    v3.p1 = v12 in
    let v10: [[[Float]]] = [v4, v6, v6, v6, v4, v4, v12] in
    let v15: [[Float]] = v10[3] in
    v3.p1 = v6 in
    let v9: [[Float]] = v0.p1 in
    v3 = v0 in
    let v11: s2 = s2(v5, v0) in
    let v40: [[Float]] = v3.p0 in
    let v23: [Float] = v6[2] in
    var v28: [[Float]] = v6 in
    v12 = v9 in
    v12[2] = v23 in
    let v20: s2 = f26(v11, v0) in
    v3.p0 = v40 in
    v3.p0 = v40 in
    let v27: [[Float]] = v0.p0 in
    v3.p1 = v28 in
    let v24: [[[Float]]] = [v15, v12, v7] in
    v28[2] = v23 in
    v5[2] = v3 in
    v5[0] = v0 in
    let v38: [s0] = v11.p0 in
    v3.p0 = v40 in
    v3.p0 = v40 in
    let v77: [[Float]] = v24[0] in
    let v70: [[Float]] = v3.p0 in
    v3.p0 = v70 in
    let v63: s0 = v20.p1 in
    v5 = v38 in
    v3.p0 = v27 in
    v3.p0 = v70 in
    v3.p1 = v77 in
    v3.p0 = v70 in
    v3.p0 = v27 in
    v63
  } in
  let f22: (s0) -> s0 = (v0: s0) -> s0 {
    var v2: s0 = v0 in
    v2 = v0 in
    let v12: s0 = f24(v2) in
    let v40: s0 = f24(v12) in
    v40
  } in
  let f6: (s0) -> s0 = (v0: s0) -> s0 {
    let v6: s0 = f24(v0) in
    let v44: s0 = f22(v6) in
    v44
  } in
  let noinline_f0: ([[s4]], Float) -> Float = (v0: [[s4]], v1: Float) -> Float {
    let v2: [s4] = v0[0] in
    var v5: Float = v1 in
    let v7: s4 = v2[0] in
    var v6: s4 = v7 in
    let v11: s0 = v7.p1 in
    let v9: s0 = f24(v11) in
    let v8: [s1] = v6.p0 in
    v6.p1 = v9 in
    v6.p0 = v8 in
    v6.p0 = v8 in
    v6.p1 = v11 in
    var v29: s4 = v6 in
    let v13: s0 = v29.p1 in
    let v24: s0 = f6(v13) in
    v29.p0 = v8 in
    var v17: [s1] = v8 in
    let v26: [[Float]] = v24.p1 in
    v6.p0 = v17 in
    let v23: s0 = f6(v11) in
    let v59: [s4] = v0[0] in
    var v28: s4 = v6 in
    var v31: [s1] = v8 in
    var v60: s4 = v28 in
    let v57: [Float] = v26[2] in
    let v80: s4 = v59[0] in
    let v93: Float = v57[0] in
    v29.p1 = v24 in
    let v113: Float = v93 - v5 in
    let v62: [s1] = v80.p0 in
    v28.p0 = v17 in
    v29.p0 = v8 in
    v29.p0 = v31 in
    v60.p1 = v23 in
    var v85: [Float] = v57 in
    let v77: [s1] = v60.p0 in
    var v106: [Float] = v85 in
    let v108: Float = v106[0] in
    v31 = v77 in
    v28.p0 = v62 in
    let v324: Float = v108 / v113 in
    v324
  } in
  fun loop(i: Int, v0: [[s4]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s4]] = [[s4([s1(s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]), [s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]])]), s1(s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]]), [s0([[15.0], [16.0]], [[17.0], [18.0], [19.0]])]), s1(s0([[20.0], [21.0]], [[22.0], [23.0], [24.0]]), [s0([[25.0], [26.0]], [[27.0], [28.0], [29.0]])])], s0([[30.0], [31.0]], [[32.0], [33.0], [34.0]]))]] in
    let v1: Float = 35.0 in
    let initialResult: Float = 35.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()