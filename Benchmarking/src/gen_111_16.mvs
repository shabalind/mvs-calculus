  struct s0 {
    var p0: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  let noinline_f0: ([s1], Float) -> Float = (v0: [s1], v1: Float) -> Float {
    let v3: [Float] = [v1, v1, v1, v1, v1] in
    var v7: [Float] = v3 in
    let v5: Float = v1 - v1 in
    v7[2] = v1 in
    let v9: Float = v7[3] in
    var v6: [Float] = v7 in
    let v13: Float = v5 - v9 in
    let v15: Float = v13 + v13 in
    v7[3] = v1 in
    v7[2] = v1 in
    v7 = v3 in
    v6[3] = v5 in
    var v28: Float = v15 in
    v6[2] = v5 in
    v7 = v6 in
    v28
  } in
  fun loop(i: Int, v0: [s1], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1(s0([[0.0], [1.0], [2.0]]), s0([[3.0], [4.0], [5.0]])), s1(s0([[6.0], [7.0], [8.0]]), s0([[9.0], [10.0], [11.0]]))] in
    let v1: Float = 12.0 in
    let initialResult: Float = 12.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()