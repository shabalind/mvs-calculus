  struct s0 {
    var p0: [Float]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s6 {
    var p0: [s1]
    var p1: [[s0]]
  } in
  let noinline_f0: (s6, [[s1]], Float) -> Float = (v0: s6, v1: [[s1]], v2: Float) -> Float {
    let v7: [[s0]] = v0.p1 in
    let v20: [s0] = v7[1] in
    let v14: Float = v2 + v2 in
    let v18: s0 = v20[0] in
    var v32: Float = v2 in
    let v23: Float = v2 * v2 in
    let v47: Float = v23 + v32 in
    let v34: [[Float]] = v18.p1 in
    let v46: [Float] = v34[2] in
    v32 = v47 in
    var v36: [Float] = v46 in
    v36[0] = v14 in
    v36[0] = v32 in
    let v72: Float = v36[0] in
    var v191: Float = v72 in
    v191
  } in
  fun loop(i: Int, v0: s6, v1: [[s1]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s6 = s6([s1(s0([0.0, 1.0, 2.0], [[3.0], [4.0], [5.0]]), [s0([6.0, 7.0, 8.0], [[9.0], [10.0], [11.0]])]), s1(s0([12.0, 13.0, 14.0], [[15.0], [16.0], [17.0]]), [s0([18.0, 19.0, 20.0], [[21.0], [22.0], [23.0]])]), s1(s0([24.0, 25.0, 26.0], [[27.0], [28.0], [29.0]]), [s0([30.0, 31.0, 32.0], [[33.0], [34.0], [35.0]])])], [[s0([36.0, 37.0, 38.0], [[39.0], [40.0], [41.0]])], [s0([42.0, 43.0, 44.0], [[45.0], [46.0], [47.0]])], [s0([48.0, 49.0, 50.0], [[51.0], [52.0], [53.0]])]]) in
    let v1: [[s1]] = [[s1(s0([54.0, 55.0, 56.0], [[57.0], [58.0], [59.0]]), [s0([60.0, 61.0, 62.0], [[63.0], [64.0], [65.0]])])]] in
    let v2: Float = 66.0 in
    let initialResult: Float = 66.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()