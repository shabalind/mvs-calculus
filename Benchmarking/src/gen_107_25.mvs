  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s2 {
    var p0: s1
    var p1: [[s0]]
  } in
  let noinline_f0: (s2, Float) -> Float = (v0: s2, v1: Float) -> Float {
    let v3: [[s0]] = v0.p1 in
    let v5: [s0] = v3[2] in
    let v7: s0 = v5[0] in
    let v9: [[Float]] = v7.p0 in
    let v15: [Float] = v9[0] in
    let v14: [Float] = v9[0] in
    let v24: Float = v15[0] in
    let v19: Float = v14[0] in
    let v35: Float = v1 / v19 in
    let v147: Float = v24 + v35 in
    v147
  } in
  fun loop(i: Int, v0: s2, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(s1([s0([[0.0], [1.0]], [[2.0], [3.0]])], s0([[4.0], [5.0]], [[6.0], [7.0]])), [[s0([[8.0], [9.0]], [[10.0], [11.0]])], [s0([[12.0], [13.0]], [[14.0], [15.0]])], [s0([[16.0], [17.0]], [[18.0], [19.0]])]]) in
    let v1: Float = 20.0 in
    let initialResult: Float = 20.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()