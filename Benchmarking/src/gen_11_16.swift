  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s2 {
    var p0: [[s0]]
    var p1: s0
  }
  struct s3 {
    var p0: [s2]
    var p1: s2
    var p2: [[s1]]
    var p3: [s2]
    var p4: Double
  }
  struct s4 {
    var p0: [s1]
    var p1: s0
  }
  struct s5 {
    var p0: [s3]
    var p1: [[s3]]
  }
  struct s6 {
    var p0: s5
    var p1: [s0]
    var p2: s4
  }
  struct s7 {
    var p0: s1
    var p1: [s4]
  }
  struct s9 {
    var p0: [[s2]]
    var p1: [s6]
  }
  struct s11 {
    var p0: [s9]
    var p1: [s7]
  }
  func f80(_ v0: Double) -> Double {
    var v3: Double = v0
    var v2: Double = v3
    var v8: Double = v3
    var v1: Double = v0
    var v4: Double = v0
    var v6: Double = v8
    v4 = v2
    var v9: Double = v0
    var v5: Double = v4
    var v10: Double = v2
    var v13: Double = v2
    let v23: [Double] = [v4, v5, v2, v4, v2, v1]
    let v12: Double = v23[5]
    var v24: [Double] = v23
    v24[1] = v10
    v24[5] = v13
    var v14: [Double] = v24
    v24[2] = v12
    let v18: Double = v14[1]
    v24[4] = v5
    var v19: [Double] = v24
    let v25: Double = v14[0]
    var v38: Double = v9
    var v22: [Double] = v24
    var v44: Double = v38
    v24[4] = v38
    var v29: Double = v44
    var v32: [Double] = v23
    v19[0] = v18
    v10 = v29
    let v62: Double = v23[1]
    v32[5] = v6
    let v87: Double = v32[5]
    v22 = v19
    v14[1] = v87
    let v116: Double = v22[5]
    v19[4] = v87
    v24[3] = v62
    v6 = v25
    return v116
  }
  func f1(_ v0: Double) -> Double {
    let v4: Double = f80(v0)
    let v6: Double = f80(v4)
    var v10: Double = v6
    var v12: Double = v10
    return v12
  }
  @inline(never)
  func f0(_ v0: s4, _ v1: s11, _ v2: s7, _ v3: Double) -> Double {
    var v7: Double = v3
    var v4: Double = v3
    v7 = v4
    let v27: Double = f1(v7)
    let v72: Double = f1(v4)
    v7 = v72
    let v80: Double = f80(v27)
    return v80
  }
  func benchmark() {
    let v0: s4 = s4(p0: [s1(p0: [s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0]])], p1: [s0(p0: [[4.0], [5.0], [6.0]], p1: [[7.0]])]), s1(p0: [s0(p0: [[8.0], [9.0], [10.0]], p1: [[11.0]])], p1: [s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0]])])], p1: s0(p0: [[16.0], [17.0], [18.0]], p1: [[19.0]]))
    let v1: s11 = s11(p0: [s9(p0: [[s2(p0: [[s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0]])], [s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0]])]], p1: s0(p0: [[28.0], [29.0], [30.0]], p1: [[31.0]]))]], p1: [s6(p0: s5(p0: [s3(p0: [s2(p0: [[s0(p0: [[32.0], [33.0], [34.0]], p1: [[35.0]])], [s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0]])]], p1: s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0]])), s2(p0: [[s0(p0: [[44.0], [45.0], [46.0]], p1: [[47.0]])], [s0(p0: [[48.0], [49.0], [50.0]], p1: [[51.0]])]], p1: s0(p0: [[52.0], [53.0], [54.0]], p1: [[55.0]])), s2(p0: [[s0(p0: [[56.0], [57.0], [58.0]], p1: [[59.0]])], [s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0]])]], p1: s0(p0: [[64.0], [65.0], [66.0]], p1: [[67.0]]))], p1: s2(p0: [[s0(p0: [[68.0], [69.0], [70.0]], p1: [[71.0]])], [s0(p0: [[72.0], [73.0], [74.0]], p1: [[75.0]])]], p1: s0(p0: [[76.0], [77.0], [78.0]], p1: [[79.0]])), p2: [[s1(p0: [s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0]])], p1: [s0(p0: [[84.0], [85.0], [86.0]], p1: [[87.0]])])]], p3: [s2(p0: [[s0(p0: [[88.0], [89.0], [90.0]], p1: [[91.0]])], [s0(p0: [[92.0], [93.0], [94.0]], p1: [[95.0]])]], p1: s0(p0: [[96.0], [97.0], [98.0]], p1: [[99.0]])), s2(p0: [[s0(p0: [[100.0], [101.0], [102.0]], p1: [[103.0]])], [s0(p0: [[104.0], [105.0], [106.0]], p1: [[107.0]])]], p1: s0(p0: [[108.0], [109.0], [110.0]], p1: [[111.0]])), s2(p0: [[s0(p0: [[112.0], [113.0], [114.0]], p1: [[115.0]])], [s0(p0: [[116.0], [117.0], [118.0]], p1: [[119.0]])]], p1: s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0]]))], p4: 124.0), s3(p0: [s2(p0: [[s0(p0: [[125.0], [126.0], [127.0]], p1: [[128.0]])], [s0(p0: [[129.0], [130.0], [131.0]], p1: [[132.0]])]], p1: s0(p0: [[133.0], [134.0], [135.0]], p1: [[136.0]])), s2(p0: [[s0(p0: [[137.0], [138.0], [139.0]], p1: [[140.0]])], [s0(p0: [[141.0], [142.0], [143.0]], p1: [[144.0]])]], p1: s0(p0: [[145.0], [146.0], [147.0]], p1: [[148.0]])), s2(p0: [[s0(p0: [[149.0], [150.0], [151.0]], p1: [[152.0]])], [s0(p0: [[153.0], [154.0], [155.0]], p1: [[156.0]])]], p1: s0(p0: [[157.0], [158.0], [159.0]], p1: [[160.0]]))], p1: s2(p0: [[s0(p0: [[161.0], [162.0], [163.0]], p1: [[164.0]])], [s0(p0: [[165.0], [166.0], [167.0]], p1: [[168.0]])]], p1: s0(p0: [[169.0], [170.0], [171.0]], p1: [[172.0]])), p2: [[s1(p0: [s0(p0: [[173.0], [174.0], [175.0]], p1: [[176.0]])], p1: [s0(p0: [[177.0], [178.0], [179.0]], p1: [[180.0]])])]], p3: [s2(p0: [[s0(p0: [[181.0], [182.0], [183.0]], p1: [[184.0]])], [s0(p0: [[185.0], [186.0], [187.0]], p1: [[188.0]])]], p1: s0(p0: [[189.0], [190.0], [191.0]], p1: [[192.0]])), s2(p0: [[s0(p0: [[193.0], [194.0], [195.0]], p1: [[196.0]])], [s0(p0: [[197.0], [198.0], [199.0]], p1: [[200.0]])]], p1: s0(p0: [[201.0], [202.0], [203.0]], p1: [[204.0]])), s2(p0: [[s0(p0: [[205.0], [206.0], [207.0]], p1: [[208.0]])], [s0(p0: [[209.0], [210.0], [211.0]], p1: [[212.0]])]], p1: s0(p0: [[213.0], [214.0], [215.0]], p1: [[216.0]]))], p4: 217.0), s3(p0: [s2(p0: [[s0(p0: [[218.0], [219.0], [220.0]], p1: [[221.0]])], [s0(p0: [[222.0], [223.0], [224.0]], p1: [[225.0]])]], p1: s0(p0: [[226.0], [227.0], [228.0]], p1: [[229.0]])), s2(p0: [[s0(p0: [[230.0], [231.0], [232.0]], p1: [[233.0]])], [s0(p0: [[234.0], [235.0], [236.0]], p1: [[237.0]])]], p1: s0(p0: [[238.0], [239.0], [240.0]], p1: [[241.0]])), s2(p0: [[s0(p0: [[242.0], [243.0], [244.0]], p1: [[245.0]])], [s0(p0: [[246.0], [247.0], [248.0]], p1: [[249.0]])]], p1: s0(p0: [[250.0], [251.0], [252.0]], p1: [[253.0]]))], p1: s2(p0: [[s0(p0: [[254.0], [255.0], [256.0]], p1: [[257.0]])], [s0(p0: [[258.0], [259.0], [260.0]], p1: [[261.0]])]], p1: s0(p0: [[262.0], [263.0], [264.0]], p1: [[265.0]])), p2: [[s1(p0: [s0(p0: [[266.0], [267.0], [268.0]], p1: [[269.0]])], p1: [s0(p0: [[270.0], [271.0], [272.0]], p1: [[273.0]])])]], p3: [s2(p0: [[s0(p0: [[274.0], [275.0], [276.0]], p1: [[277.0]])], [s0(p0: [[278.0], [279.0], [280.0]], p1: [[281.0]])]], p1: s0(p0: [[282.0], [283.0], [284.0]], p1: [[285.0]])), s2(p0: [[s0(p0: [[286.0], [287.0], [288.0]], p1: [[289.0]])], [s0(p0: [[290.0], [291.0], [292.0]], p1: [[293.0]])]], p1: s0(p0: [[294.0], [295.0], [296.0]], p1: [[297.0]])), s2(p0: [[s0(p0: [[298.0], [299.0], [300.0]], p1: [[301.0]])], [s0(p0: [[302.0], [303.0], [304.0]], p1: [[305.0]])]], p1: s0(p0: [[306.0], [307.0], [308.0]], p1: [[309.0]]))], p4: 310.0)], p1: [[s3(p0: [s2(p0: [[s0(p0: [[311.0], [312.0], [313.0]], p1: [[314.0]])], [s0(p0: [[315.0], [316.0], [317.0]], p1: [[318.0]])]], p1: s0(p0: [[319.0], [320.0], [321.0]], p1: [[322.0]])), s2(p0: [[s0(p0: [[323.0], [324.0], [325.0]], p1: [[326.0]])], [s0(p0: [[327.0], [328.0], [329.0]], p1: [[330.0]])]], p1: s0(p0: [[331.0], [332.0], [333.0]], p1: [[334.0]])), s2(p0: [[s0(p0: [[335.0], [336.0], [337.0]], p1: [[338.0]])], [s0(p0: [[339.0], [340.0], [341.0]], p1: [[342.0]])]], p1: s0(p0: [[343.0], [344.0], [345.0]], p1: [[346.0]]))], p1: s2(p0: [[s0(p0: [[347.0], [348.0], [349.0]], p1: [[350.0]])], [s0(p0: [[351.0], [352.0], [353.0]], p1: [[354.0]])]], p1: s0(p0: [[355.0], [356.0], [357.0]], p1: [[358.0]])), p2: [[s1(p0: [s0(p0: [[359.0], [360.0], [361.0]], p1: [[362.0]])], p1: [s0(p0: [[363.0], [364.0], [365.0]], p1: [[366.0]])])]], p3: [s2(p0: [[s0(p0: [[367.0], [368.0], [369.0]], p1: [[370.0]])], [s0(p0: [[371.0], [372.0], [373.0]], p1: [[374.0]])]], p1: s0(p0: [[375.0], [376.0], [377.0]], p1: [[378.0]])), s2(p0: [[s0(p0: [[379.0], [380.0], [381.0]], p1: [[382.0]])], [s0(p0: [[383.0], [384.0], [385.0]], p1: [[386.0]])]], p1: s0(p0: [[387.0], [388.0], [389.0]], p1: [[390.0]])), s2(p0: [[s0(p0: [[391.0], [392.0], [393.0]], p1: [[394.0]])], [s0(p0: [[395.0], [396.0], [397.0]], p1: [[398.0]])]], p1: s0(p0: [[399.0], [400.0], [401.0]], p1: [[402.0]]))], p4: 403.0)]]), p1: [s0(p0: [[404.0], [405.0], [406.0]], p1: [[407.0]])], p2: s4(p0: [s1(p0: [s0(p0: [[408.0], [409.0], [410.0]], p1: [[411.0]])], p1: [s0(p0: [[412.0], [413.0], [414.0]], p1: [[415.0]])]), s1(p0: [s0(p0: [[416.0], [417.0], [418.0]], p1: [[419.0]])], p1: [s0(p0: [[420.0], [421.0], [422.0]], p1: [[423.0]])])], p1: s0(p0: [[424.0], [425.0], [426.0]], p1: [[427.0]]))), s6(p0: s5(p0: [s3(p0: [s2(p0: [[s0(p0: [[428.0], [429.0], [430.0]], p1: [[431.0]])], [s0(p0: [[432.0], [433.0], [434.0]], p1: [[435.0]])]], p1: s0(p0: [[436.0], [437.0], [438.0]], p1: [[439.0]])), s2(p0: [[s0(p0: [[440.0], [441.0], [442.0]], p1: [[443.0]])], [s0(p0: [[444.0], [445.0], [446.0]], p1: [[447.0]])]], p1: s0(p0: [[448.0], [449.0], [450.0]], p1: [[451.0]])), s2(p0: [[s0(p0: [[452.0], [453.0], [454.0]], p1: [[455.0]])], [s0(p0: [[456.0], [457.0], [458.0]], p1: [[459.0]])]], p1: s0(p0: [[460.0], [461.0], [462.0]], p1: [[463.0]]))], p1: s2(p0: [[s0(p0: [[464.0], [465.0], [466.0]], p1: [[467.0]])], [s0(p0: [[468.0], [469.0], [470.0]], p1: [[471.0]])]], p1: s0(p0: [[472.0], [473.0], [474.0]], p1: [[475.0]])), p2: [[s1(p0: [s0(p0: [[476.0], [477.0], [478.0]], p1: [[479.0]])], p1: [s0(p0: [[480.0], [481.0], [482.0]], p1: [[483.0]])])]], p3: [s2(p0: [[s0(p0: [[484.0], [485.0], [486.0]], p1: [[487.0]])], [s0(p0: [[488.0], [489.0], [490.0]], p1: [[491.0]])]], p1: s0(p0: [[492.0], [493.0], [494.0]], p1: [[495.0]])), s2(p0: [[s0(p0: [[496.0], [497.0], [498.0]], p1: [[499.0]])], [s0(p0: [[500.0], [501.0], [502.0]], p1: [[503.0]])]], p1: s0(p0: [[504.0], [505.0], [506.0]], p1: [[507.0]])), s2(p0: [[s0(p0: [[508.0], [509.0], [510.0]], p1: [[511.0]])], [s0(p0: [[512.0], [513.0], [514.0]], p1: [[515.0]])]], p1: s0(p0: [[516.0], [517.0], [518.0]], p1: [[519.0]]))], p4: 520.0), s3(p0: [s2(p0: [[s0(p0: [[521.0], [522.0], [523.0]], p1: [[524.0]])], [s0(p0: [[525.0], [526.0], [527.0]], p1: [[528.0]])]], p1: s0(p0: [[529.0], [530.0], [531.0]], p1: [[532.0]])), s2(p0: [[s0(p0: [[533.0], [534.0], [535.0]], p1: [[536.0]])], [s0(p0: [[537.0], [538.0], [539.0]], p1: [[540.0]])]], p1: s0(p0: [[541.0], [542.0], [543.0]], p1: [[544.0]])), s2(p0: [[s0(p0: [[545.0], [546.0], [547.0]], p1: [[548.0]])], [s0(p0: [[549.0], [550.0], [551.0]], p1: [[552.0]])]], p1: s0(p0: [[553.0], [554.0], [555.0]], p1: [[556.0]]))], p1: s2(p0: [[s0(p0: [[557.0], [558.0], [559.0]], p1: [[560.0]])], [s0(p0: [[561.0], [562.0], [563.0]], p1: [[564.0]])]], p1: s0(p0: [[565.0], [566.0], [567.0]], p1: [[568.0]])), p2: [[s1(p0: [s0(p0: [[569.0], [570.0], [571.0]], p1: [[572.0]])], p1: [s0(p0: [[573.0], [574.0], [575.0]], p1: [[576.0]])])]], p3: [s2(p0: [[s0(p0: [[577.0], [578.0], [579.0]], p1: [[580.0]])], [s0(p0: [[581.0], [582.0], [583.0]], p1: [[584.0]])]], p1: s0(p0: [[585.0], [586.0], [587.0]], p1: [[588.0]])), s2(p0: [[s0(p0: [[589.0], [590.0], [591.0]], p1: [[592.0]])], [s0(p0: [[593.0], [594.0], [595.0]], p1: [[596.0]])]], p1: s0(p0: [[597.0], [598.0], [599.0]], p1: [[600.0]])), s2(p0: [[s0(p0: [[601.0], [602.0], [603.0]], p1: [[604.0]])], [s0(p0: [[605.0], [606.0], [607.0]], p1: [[608.0]])]], p1: s0(p0: [[609.0], [610.0], [611.0]], p1: [[612.0]]))], p4: 613.0), s3(p0: [s2(p0: [[s0(p0: [[614.0], [615.0], [616.0]], p1: [[617.0]])], [s0(p0: [[618.0], [619.0], [620.0]], p1: [[621.0]])]], p1: s0(p0: [[622.0], [623.0], [624.0]], p1: [[625.0]])), s2(p0: [[s0(p0: [[626.0], [627.0], [628.0]], p1: [[629.0]])], [s0(p0: [[630.0], [631.0], [632.0]], p1: [[633.0]])]], p1: s0(p0: [[634.0], [635.0], [636.0]], p1: [[637.0]])), s2(p0: [[s0(p0: [[638.0], [639.0], [640.0]], p1: [[641.0]])], [s0(p0: [[642.0], [643.0], [644.0]], p1: [[645.0]])]], p1: s0(p0: [[646.0], [647.0], [648.0]], p1: [[649.0]]))], p1: s2(p0: [[s0(p0: [[650.0], [651.0], [652.0]], p1: [[653.0]])], [s0(p0: [[654.0], [655.0], [656.0]], p1: [[657.0]])]], p1: s0(p0: [[658.0], [659.0], [660.0]], p1: [[661.0]])), p2: [[s1(p0: [s0(p0: [[662.0], [663.0], [664.0]], p1: [[665.0]])], p1: [s0(p0: [[666.0], [667.0], [668.0]], p1: [[669.0]])])]], p3: [s2(p0: [[s0(p0: [[670.0], [671.0], [672.0]], p1: [[673.0]])], [s0(p0: [[674.0], [675.0], [676.0]], p1: [[677.0]])]], p1: s0(p0: [[678.0], [679.0], [680.0]], p1: [[681.0]])), s2(p0: [[s0(p0: [[682.0], [683.0], [684.0]], p1: [[685.0]])], [s0(p0: [[686.0], [687.0], [688.0]], p1: [[689.0]])]], p1: s0(p0: [[690.0], [691.0], [692.0]], p1: [[693.0]])), s2(p0: [[s0(p0: [[694.0], [695.0], [696.0]], p1: [[697.0]])], [s0(p0: [[698.0], [699.0], [700.0]], p1: [[701.0]])]], p1: s0(p0: [[702.0], [703.0], [704.0]], p1: [[705.0]]))], p4: 706.0)], p1: [[s3(p0: [s2(p0: [[s0(p0: [[707.0], [708.0], [709.0]], p1: [[710.0]])], [s0(p0: [[711.0], [712.0], [713.0]], p1: [[714.0]])]], p1: s0(p0: [[715.0], [716.0], [717.0]], p1: [[718.0]])), s2(p0: [[s0(p0: [[719.0], [720.0], [721.0]], p1: [[722.0]])], [s0(p0: [[723.0], [724.0], [725.0]], p1: [[726.0]])]], p1: s0(p0: [[727.0], [728.0], [729.0]], p1: [[730.0]])), s2(p0: [[s0(p0: [[731.0], [732.0], [733.0]], p1: [[734.0]])], [s0(p0: [[735.0], [736.0], [737.0]], p1: [[738.0]])]], p1: s0(p0: [[739.0], [740.0], [741.0]], p1: [[742.0]]))], p1: s2(p0: [[s0(p0: [[743.0], [744.0], [745.0]], p1: [[746.0]])], [s0(p0: [[747.0], [748.0], [749.0]], p1: [[750.0]])]], p1: s0(p0: [[751.0], [752.0], [753.0]], p1: [[754.0]])), p2: [[s1(p0: [s0(p0: [[755.0], [756.0], [757.0]], p1: [[758.0]])], p1: [s0(p0: [[759.0], [760.0], [761.0]], p1: [[762.0]])])]], p3: [s2(p0: [[s0(p0: [[763.0], [764.0], [765.0]], p1: [[766.0]])], [s0(p0: [[767.0], [768.0], [769.0]], p1: [[770.0]])]], p1: s0(p0: [[771.0], [772.0], [773.0]], p1: [[774.0]])), s2(p0: [[s0(p0: [[775.0], [776.0], [777.0]], p1: [[778.0]])], [s0(p0: [[779.0], [780.0], [781.0]], p1: [[782.0]])]], p1: s0(p0: [[783.0], [784.0], [785.0]], p1: [[786.0]])), s2(p0: [[s0(p0: [[787.0], [788.0], [789.0]], p1: [[790.0]])], [s0(p0: [[791.0], [792.0], [793.0]], p1: [[794.0]])]], p1: s0(p0: [[795.0], [796.0], [797.0]], p1: [[798.0]]))], p4: 799.0)]]), p1: [s0(p0: [[800.0], [801.0], [802.0]], p1: [[803.0]])], p2: s4(p0: [s1(p0: [s0(p0: [[804.0], [805.0], [806.0]], p1: [[807.0]])], p1: [s0(p0: [[808.0], [809.0], [810.0]], p1: [[811.0]])]), s1(p0: [s0(p0: [[812.0], [813.0], [814.0]], p1: [[815.0]])], p1: [s0(p0: [[816.0], [817.0], [818.0]], p1: [[819.0]])])], p1: s0(p0: [[820.0], [821.0], [822.0]], p1: [[823.0]])))])], p1: [s7(p0: s1(p0: [s0(p0: [[824.0], [825.0], [826.0]], p1: [[827.0]])], p1: [s0(p0: [[828.0], [829.0], [830.0]], p1: [[831.0]])]), p1: [s4(p0: [s1(p0: [s0(p0: [[832.0], [833.0], [834.0]], p1: [[835.0]])], p1: [s0(p0: [[836.0], [837.0], [838.0]], p1: [[839.0]])]), s1(p0: [s0(p0: [[840.0], [841.0], [842.0]], p1: [[843.0]])], p1: [s0(p0: [[844.0], [845.0], [846.0]], p1: [[847.0]])])], p1: s0(p0: [[848.0], [849.0], [850.0]], p1: [[851.0]])), s4(p0: [s1(p0: [s0(p0: [[852.0], [853.0], [854.0]], p1: [[855.0]])], p1: [s0(p0: [[856.0], [857.0], [858.0]], p1: [[859.0]])]), s1(p0: [s0(p0: [[860.0], [861.0], [862.0]], p1: [[863.0]])], p1: [s0(p0: [[864.0], [865.0], [866.0]], p1: [[867.0]])])], p1: s0(p0: [[868.0], [869.0], [870.0]], p1: [[871.0]])), s4(p0: [s1(p0: [s0(p0: [[872.0], [873.0], [874.0]], p1: [[875.0]])], p1: [s0(p0: [[876.0], [877.0], [878.0]], p1: [[879.0]])]), s1(p0: [s0(p0: [[880.0], [881.0], [882.0]], p1: [[883.0]])], p1: [s0(p0: [[884.0], [885.0], [886.0]], p1: [[887.0]])])], p1: s0(p0: [[888.0], [889.0], [890.0]], p1: [[891.0]]))]), s7(p0: s1(p0: [s0(p0: [[892.0], [893.0], [894.0]], p1: [[895.0]])], p1: [s0(p0: [[896.0], [897.0], [898.0]], p1: [[899.0]])]), p1: [s4(p0: [s1(p0: [s0(p0: [[900.0], [901.0], [902.0]], p1: [[903.0]])], p1: [s0(p0: [[904.0], [905.0], [906.0]], p1: [[907.0]])]), s1(p0: [s0(p0: [[908.0], [909.0], [910.0]], p1: [[911.0]])], p1: [s0(p0: [[912.0], [913.0], [914.0]], p1: [[915.0]])])], p1: s0(p0: [[916.0], [917.0], [918.0]], p1: [[919.0]])), s4(p0: [s1(p0: [s0(p0: [[920.0], [921.0], [922.0]], p1: [[923.0]])], p1: [s0(p0: [[924.0], [925.0], [926.0]], p1: [[927.0]])]), s1(p0: [s0(p0: [[928.0], [929.0], [930.0]], p1: [[931.0]])], p1: [s0(p0: [[932.0], [933.0], [934.0]], p1: [[935.0]])])], p1: s0(p0: [[936.0], [937.0], [938.0]], p1: [[939.0]])), s4(p0: [s1(p0: [s0(p0: [[940.0], [941.0], [942.0]], p1: [[943.0]])], p1: [s0(p0: [[944.0], [945.0], [946.0]], p1: [[947.0]])]), s1(p0: [s0(p0: [[948.0], [949.0], [950.0]], p1: [[951.0]])], p1: [s0(p0: [[952.0], [953.0], [954.0]], p1: [[955.0]])])], p1: s0(p0: [[956.0], [957.0], [958.0]], p1: [[959.0]]))])])
    let v2: s7 = s7(p0: s1(p0: [s0(p0: [[960.0], [961.0], [962.0]], p1: [[963.0]])], p1: [s0(p0: [[964.0], [965.0], [966.0]], p1: [[967.0]])]), p1: [s4(p0: [s1(p0: [s0(p0: [[968.0], [969.0], [970.0]], p1: [[971.0]])], p1: [s0(p0: [[972.0], [973.0], [974.0]], p1: [[975.0]])]), s1(p0: [s0(p0: [[976.0], [977.0], [978.0]], p1: [[979.0]])], p1: [s0(p0: [[980.0], [981.0], [982.0]], p1: [[983.0]])])], p1: s0(p0: [[984.0], [985.0], [986.0]], p1: [[987.0]])), s4(p0: [s1(p0: [s0(p0: [[988.0], [989.0], [990.0]], p1: [[991.0]])], p1: [s0(p0: [[992.0], [993.0], [994.0]], p1: [[995.0]])]), s1(p0: [s0(p0: [[996.0], [997.0], [998.0]], p1: [[999.0]])], p1: [s0(p0: [[1000.0], [1001.0], [1002.0]], p1: [[1003.0]])])], p1: s0(p0: [[1004.0], [1005.0], [1006.0]], p1: [[1007.0]])), s4(p0: [s1(p0: [s0(p0: [[1008.0], [1009.0], [1010.0]], p1: [[1011.0]])], p1: [s0(p0: [[1012.0], [1013.0], [1014.0]], p1: [[1015.0]])]), s1(p0: [s0(p0: [[1016.0], [1017.0], [1018.0]], p1: [[1019.0]])], p1: [s0(p0: [[1020.0], [1021.0], [1022.0]], p1: [[1023.0]])])], p1: s0(p0: [[1024.0], [1025.0], [1026.0]], p1: [[1027.0]]))])
    let v3: Double = 1028.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 1028.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
