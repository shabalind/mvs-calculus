  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  }
  struct s2 {
    var p0: s0
    var p1: s1
  }
  struct s3 {
    var p0: [s2]
    var p1: s1
  }
  struct s5 {
    var p0: s0
    var p1: s3
  }
  struct s6 {
    var p0: [s3]
    var p1: [[s3]]
  }
  func f13(_ v0: Double) -> Double {
    var v3: Double = v0
    var v4: Double = v3
    var v1: Double = v3
    var v7: Double = v4
    let v6: Double = v3 + v3
    v4 = v6
    var v5: Double = v4
    let v8: [Double] = [v7, v0, v5, v7, v1, v6]
    let v11: Double = v8[2]
    var v15: [Double] = v8
    let v18: Double = v8[4]
    var v17: Double = v3
    v15[4] = v1
    var v10: [Double] = v15
    var v34: Double = v18
    var v23: [Double] = v8
    v23[0] = v5
    var v30: [Double] = v15
    let v26: [[Double]] = [v30, v15, v10]
    var v45: [[Double]] = v26
    v45[1] = v30
    var v28: [[Double]] = v45
    let v47: [[Double]] = [v15, v23, v10, v23, v8, v10]
    let v57: Double = v15[4]
    v1 = v11
    v10[4] = v17
    var v46: [[Double]] = v45
    var v40: [[Double]] = v47
    var v50: [[Double]] = v28
    let v27: [Double] = v40[2]
    v46[0] = v15
    v30[1] = v11
    v10[1] = v57
    v10[2] = v34
    v28[0] = v30
    v40[3] = v10
    v45 = v50
    let v72: [Double] = v46[2]
    v30[5] = v34
    v45[1] = v72
    v30 = v27
    var v85: [[Double]] = v46
    v45[0] = v27
    let v31: [Double] = v85[0]
    let v124: [Double] = v46[0]
    v15[1] = v34
    let v171: [Double] = v50[1]
    v85[0] = v171
    v28[0] = v31
    let v121: Double = v124[4]
    return v121
  }
  @inline(never)
  func f0(_ v0: s6, _ v1: [[s5]], _ v2: [s6], _ v3: Double) -> Double {
    let v4: Double = f13(v3)
    let v12: Double = f13(v4)
    let v30: Double = f13(v4)
    let v24: Double = f13(v4)
    let v58: [Double] = [v12, v4, v24, v12, v30]
    let v43: Double = v58[1]
    let v17: Double = f13(v43)
    var v84: Double = v17
    let v167: Double = f13(v84)
    let v80: Double = f13(v167)
    return v80
  }
  func benchmark() {
    let v0: s6 = s6(p0: [s3(p0: [s2(p0: s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0]]), p1: s1(p0: s0(p0: [[5.0], [6.0], [7.0]], p1: [[8.0], [9.0]]), p1: [[s0(p0: [[10.0], [11.0], [12.0]], p1: [[13.0], [14.0]])], [s0(p0: [[15.0], [16.0], [17.0]], p1: [[18.0], [19.0]])]])), s2(p0: s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0], [24.0]]), p1: s1(p0: s0(p0: [[25.0], [26.0], [27.0]], p1: [[28.0], [29.0]]), p1: [[s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0]])], [s0(p0: [[35.0], [36.0], [37.0]], p1: [[38.0], [39.0]])]])), s2(p0: s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0], [44.0]]), p1: s1(p0: s0(p0: [[45.0], [46.0], [47.0]], p1: [[48.0], [49.0]]), p1: [[s0(p0: [[50.0], [51.0], [52.0]], p1: [[53.0], [54.0]])], [s0(p0: [[55.0], [56.0], [57.0]], p1: [[58.0], [59.0]])]]))], p1: s1(p0: s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0], [64.0]]), p1: [[s0(p0: [[65.0], [66.0], [67.0]], p1: [[68.0], [69.0]])], [s0(p0: [[70.0], [71.0], [72.0]], p1: [[73.0], [74.0]])]])), s3(p0: [s2(p0: s0(p0: [[75.0], [76.0], [77.0]], p1: [[78.0], [79.0]]), p1: s1(p0: s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0], [84.0]]), p1: [[s0(p0: [[85.0], [86.0], [87.0]], p1: [[88.0], [89.0]])], [s0(p0: [[90.0], [91.0], [92.0]], p1: [[93.0], [94.0]])]])), s2(p0: s0(p0: [[95.0], [96.0], [97.0]], p1: [[98.0], [99.0]]), p1: s1(p0: s0(p0: [[100.0], [101.0], [102.0]], p1: [[103.0], [104.0]]), p1: [[s0(p0: [[105.0], [106.0], [107.0]], p1: [[108.0], [109.0]])], [s0(p0: [[110.0], [111.0], [112.0]], p1: [[113.0], [114.0]])]])), s2(p0: s0(p0: [[115.0], [116.0], [117.0]], p1: [[118.0], [119.0]]), p1: s1(p0: s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0], [124.0]]), p1: [[s0(p0: [[125.0], [126.0], [127.0]], p1: [[128.0], [129.0]])], [s0(p0: [[130.0], [131.0], [132.0]], p1: [[133.0], [134.0]])]]))], p1: s1(p0: s0(p0: [[135.0], [136.0], [137.0]], p1: [[138.0], [139.0]]), p1: [[s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0], [144.0]])], [s0(p0: [[145.0], [146.0], [147.0]], p1: [[148.0], [149.0]])]])), s3(p0: [s2(p0: s0(p0: [[150.0], [151.0], [152.0]], p1: [[153.0], [154.0]]), p1: s1(p0: s0(p0: [[155.0], [156.0], [157.0]], p1: [[158.0], [159.0]]), p1: [[s0(p0: [[160.0], [161.0], [162.0]], p1: [[163.0], [164.0]])], [s0(p0: [[165.0], [166.0], [167.0]], p1: [[168.0], [169.0]])]])), s2(p0: s0(p0: [[170.0], [171.0], [172.0]], p1: [[173.0], [174.0]]), p1: s1(p0: s0(p0: [[175.0], [176.0], [177.0]], p1: [[178.0], [179.0]]), p1: [[s0(p0: [[180.0], [181.0], [182.0]], p1: [[183.0], [184.0]])], [s0(p0: [[185.0], [186.0], [187.0]], p1: [[188.0], [189.0]])]])), s2(p0: s0(p0: [[190.0], [191.0], [192.0]], p1: [[193.0], [194.0]]), p1: s1(p0: s0(p0: [[195.0], [196.0], [197.0]], p1: [[198.0], [199.0]]), p1: [[s0(p0: [[200.0], [201.0], [202.0]], p1: [[203.0], [204.0]])], [s0(p0: [[205.0], [206.0], [207.0]], p1: [[208.0], [209.0]])]]))], p1: s1(p0: s0(p0: [[210.0], [211.0], [212.0]], p1: [[213.0], [214.0]]), p1: [[s0(p0: [[215.0], [216.0], [217.0]], p1: [[218.0], [219.0]])], [s0(p0: [[220.0], [221.0], [222.0]], p1: [[223.0], [224.0]])]]))], p1: [[s3(p0: [s2(p0: s0(p0: [[225.0], [226.0], [227.0]], p1: [[228.0], [229.0]]), p1: s1(p0: s0(p0: [[230.0], [231.0], [232.0]], p1: [[233.0], [234.0]]), p1: [[s0(p0: [[235.0], [236.0], [237.0]], p1: [[238.0], [239.0]])], [s0(p0: [[240.0], [241.0], [242.0]], p1: [[243.0], [244.0]])]])), s2(p0: s0(p0: [[245.0], [246.0], [247.0]], p1: [[248.0], [249.0]]), p1: s1(p0: s0(p0: [[250.0], [251.0], [252.0]], p1: [[253.0], [254.0]]), p1: [[s0(p0: [[255.0], [256.0], [257.0]], p1: [[258.0], [259.0]])], [s0(p0: [[260.0], [261.0], [262.0]], p1: [[263.0], [264.0]])]])), s2(p0: s0(p0: [[265.0], [266.0], [267.0]], p1: [[268.0], [269.0]]), p1: s1(p0: s0(p0: [[270.0], [271.0], [272.0]], p1: [[273.0], [274.0]]), p1: [[s0(p0: [[275.0], [276.0], [277.0]], p1: [[278.0], [279.0]])], [s0(p0: [[280.0], [281.0], [282.0]], p1: [[283.0], [284.0]])]]))], p1: s1(p0: s0(p0: [[285.0], [286.0], [287.0]], p1: [[288.0], [289.0]]), p1: [[s0(p0: [[290.0], [291.0], [292.0]], p1: [[293.0], [294.0]])], [s0(p0: [[295.0], [296.0], [297.0]], p1: [[298.0], [299.0]])]]))], [s3(p0: [s2(p0: s0(p0: [[300.0], [301.0], [302.0]], p1: [[303.0], [304.0]]), p1: s1(p0: s0(p0: [[305.0], [306.0], [307.0]], p1: [[308.0], [309.0]]), p1: [[s0(p0: [[310.0], [311.0], [312.0]], p1: [[313.0], [314.0]])], [s0(p0: [[315.0], [316.0], [317.0]], p1: [[318.0], [319.0]])]])), s2(p0: s0(p0: [[320.0], [321.0], [322.0]], p1: [[323.0], [324.0]]), p1: s1(p0: s0(p0: [[325.0], [326.0], [327.0]], p1: [[328.0], [329.0]]), p1: [[s0(p0: [[330.0], [331.0], [332.0]], p1: [[333.0], [334.0]])], [s0(p0: [[335.0], [336.0], [337.0]], p1: [[338.0], [339.0]])]])), s2(p0: s0(p0: [[340.0], [341.0], [342.0]], p1: [[343.0], [344.0]]), p1: s1(p0: s0(p0: [[345.0], [346.0], [347.0]], p1: [[348.0], [349.0]]), p1: [[s0(p0: [[350.0], [351.0], [352.0]], p1: [[353.0], [354.0]])], [s0(p0: [[355.0], [356.0], [357.0]], p1: [[358.0], [359.0]])]]))], p1: s1(p0: s0(p0: [[360.0], [361.0], [362.0]], p1: [[363.0], [364.0]]), p1: [[s0(p0: [[365.0], [366.0], [367.0]], p1: [[368.0], [369.0]])], [s0(p0: [[370.0], [371.0], [372.0]], p1: [[373.0], [374.0]])]]))], [s3(p0: [s2(p0: s0(p0: [[375.0], [376.0], [377.0]], p1: [[378.0], [379.0]]), p1: s1(p0: s0(p0: [[380.0], [381.0], [382.0]], p1: [[383.0], [384.0]]), p1: [[s0(p0: [[385.0], [386.0], [387.0]], p1: [[388.0], [389.0]])], [s0(p0: [[390.0], [391.0], [392.0]], p1: [[393.0], [394.0]])]])), s2(p0: s0(p0: [[395.0], [396.0], [397.0]], p1: [[398.0], [399.0]]), p1: s1(p0: s0(p0: [[400.0], [401.0], [402.0]], p1: [[403.0], [404.0]]), p1: [[s0(p0: [[405.0], [406.0], [407.0]], p1: [[408.0], [409.0]])], [s0(p0: [[410.0], [411.0], [412.0]], p1: [[413.0], [414.0]])]])), s2(p0: s0(p0: [[415.0], [416.0], [417.0]], p1: [[418.0], [419.0]]), p1: s1(p0: s0(p0: [[420.0], [421.0], [422.0]], p1: [[423.0], [424.0]]), p1: [[s0(p0: [[425.0], [426.0], [427.0]], p1: [[428.0], [429.0]])], [s0(p0: [[430.0], [431.0], [432.0]], p1: [[433.0], [434.0]])]]))], p1: s1(p0: s0(p0: [[435.0], [436.0], [437.0]], p1: [[438.0], [439.0]]), p1: [[s0(p0: [[440.0], [441.0], [442.0]], p1: [[443.0], [444.0]])], [s0(p0: [[445.0], [446.0], [447.0]], p1: [[448.0], [449.0]])]]))]])
    let v1: [[s5]] = [[s5(p0: s0(p0: [[450.0], [451.0], [452.0]], p1: [[453.0], [454.0]]), p1: s3(p0: [s2(p0: s0(p0: [[455.0], [456.0], [457.0]], p1: [[458.0], [459.0]]), p1: s1(p0: s0(p0: [[460.0], [461.0], [462.0]], p1: [[463.0], [464.0]]), p1: [[s0(p0: [[465.0], [466.0], [467.0]], p1: [[468.0], [469.0]])], [s0(p0: [[470.0], [471.0], [472.0]], p1: [[473.0], [474.0]])]])), s2(p0: s0(p0: [[475.0], [476.0], [477.0]], p1: [[478.0], [479.0]]), p1: s1(p0: s0(p0: [[480.0], [481.0], [482.0]], p1: [[483.0], [484.0]]), p1: [[s0(p0: [[485.0], [486.0], [487.0]], p1: [[488.0], [489.0]])], [s0(p0: [[490.0], [491.0], [492.0]], p1: [[493.0], [494.0]])]])), s2(p0: s0(p0: [[495.0], [496.0], [497.0]], p1: [[498.0], [499.0]]), p1: s1(p0: s0(p0: [[500.0], [501.0], [502.0]], p1: [[503.0], [504.0]]), p1: [[s0(p0: [[505.0], [506.0], [507.0]], p1: [[508.0], [509.0]])], [s0(p0: [[510.0], [511.0], [512.0]], p1: [[513.0], [514.0]])]]))], p1: s1(p0: s0(p0: [[515.0], [516.0], [517.0]], p1: [[518.0], [519.0]]), p1: [[s0(p0: [[520.0], [521.0], [522.0]], p1: [[523.0], [524.0]])], [s0(p0: [[525.0], [526.0], [527.0]], p1: [[528.0], [529.0]])]])))], [s5(p0: s0(p0: [[530.0], [531.0], [532.0]], p1: [[533.0], [534.0]]), p1: s3(p0: [s2(p0: s0(p0: [[535.0], [536.0], [537.0]], p1: [[538.0], [539.0]]), p1: s1(p0: s0(p0: [[540.0], [541.0], [542.0]], p1: [[543.0], [544.0]]), p1: [[s0(p0: [[545.0], [546.0], [547.0]], p1: [[548.0], [549.0]])], [s0(p0: [[550.0], [551.0], [552.0]], p1: [[553.0], [554.0]])]])), s2(p0: s0(p0: [[555.0], [556.0], [557.0]], p1: [[558.0], [559.0]]), p1: s1(p0: s0(p0: [[560.0], [561.0], [562.0]], p1: [[563.0], [564.0]]), p1: [[s0(p0: [[565.0], [566.0], [567.0]], p1: [[568.0], [569.0]])], [s0(p0: [[570.0], [571.0], [572.0]], p1: [[573.0], [574.0]])]])), s2(p0: s0(p0: [[575.0], [576.0], [577.0]], p1: [[578.0], [579.0]]), p1: s1(p0: s0(p0: [[580.0], [581.0], [582.0]], p1: [[583.0], [584.0]]), p1: [[s0(p0: [[585.0], [586.0], [587.0]], p1: [[588.0], [589.0]])], [s0(p0: [[590.0], [591.0], [592.0]], p1: [[593.0], [594.0]])]]))], p1: s1(p0: s0(p0: [[595.0], [596.0], [597.0]], p1: [[598.0], [599.0]]), p1: [[s0(p0: [[600.0], [601.0], [602.0]], p1: [[603.0], [604.0]])], [s0(p0: [[605.0], [606.0], [607.0]], p1: [[608.0], [609.0]])]])))]]
    let v2: [s6] = [s6(p0: [s3(p0: [s2(p0: s0(p0: [[610.0], [611.0], [612.0]], p1: [[613.0], [614.0]]), p1: s1(p0: s0(p0: [[615.0], [616.0], [617.0]], p1: [[618.0], [619.0]]), p1: [[s0(p0: [[620.0], [621.0], [622.0]], p1: [[623.0], [624.0]])], [s0(p0: [[625.0], [626.0], [627.0]], p1: [[628.0], [629.0]])]])), s2(p0: s0(p0: [[630.0], [631.0], [632.0]], p1: [[633.0], [634.0]]), p1: s1(p0: s0(p0: [[635.0], [636.0], [637.0]], p1: [[638.0], [639.0]]), p1: [[s0(p0: [[640.0], [641.0], [642.0]], p1: [[643.0], [644.0]])], [s0(p0: [[645.0], [646.0], [647.0]], p1: [[648.0], [649.0]])]])), s2(p0: s0(p0: [[650.0], [651.0], [652.0]], p1: [[653.0], [654.0]]), p1: s1(p0: s0(p0: [[655.0], [656.0], [657.0]], p1: [[658.0], [659.0]]), p1: [[s0(p0: [[660.0], [661.0], [662.0]], p1: [[663.0], [664.0]])], [s0(p0: [[665.0], [666.0], [667.0]], p1: [[668.0], [669.0]])]]))], p1: s1(p0: s0(p0: [[670.0], [671.0], [672.0]], p1: [[673.0], [674.0]]), p1: [[s0(p0: [[675.0], [676.0], [677.0]], p1: [[678.0], [679.0]])], [s0(p0: [[680.0], [681.0], [682.0]], p1: [[683.0], [684.0]])]])), s3(p0: [s2(p0: s0(p0: [[685.0], [686.0], [687.0]], p1: [[688.0], [689.0]]), p1: s1(p0: s0(p0: [[690.0], [691.0], [692.0]], p1: [[693.0], [694.0]]), p1: [[s0(p0: [[695.0], [696.0], [697.0]], p1: [[698.0], [699.0]])], [s0(p0: [[700.0], [701.0], [702.0]], p1: [[703.0], [704.0]])]])), s2(p0: s0(p0: [[705.0], [706.0], [707.0]], p1: [[708.0], [709.0]]), p1: s1(p0: s0(p0: [[710.0], [711.0], [712.0]], p1: [[713.0], [714.0]]), p1: [[s0(p0: [[715.0], [716.0], [717.0]], p1: [[718.0], [719.0]])], [s0(p0: [[720.0], [721.0], [722.0]], p1: [[723.0], [724.0]])]])), s2(p0: s0(p0: [[725.0], [726.0], [727.0]], p1: [[728.0], [729.0]]), p1: s1(p0: s0(p0: [[730.0], [731.0], [732.0]], p1: [[733.0], [734.0]]), p1: [[s0(p0: [[735.0], [736.0], [737.0]], p1: [[738.0], [739.0]])], [s0(p0: [[740.0], [741.0], [742.0]], p1: [[743.0], [744.0]])]]))], p1: s1(p0: s0(p0: [[745.0], [746.0], [747.0]], p1: [[748.0], [749.0]]), p1: [[s0(p0: [[750.0], [751.0], [752.0]], p1: [[753.0], [754.0]])], [s0(p0: [[755.0], [756.0], [757.0]], p1: [[758.0], [759.0]])]])), s3(p0: [s2(p0: s0(p0: [[760.0], [761.0], [762.0]], p1: [[763.0], [764.0]]), p1: s1(p0: s0(p0: [[765.0], [766.0], [767.0]], p1: [[768.0], [769.0]]), p1: [[s0(p0: [[770.0], [771.0], [772.0]], p1: [[773.0], [774.0]])], [s0(p0: [[775.0], [776.0], [777.0]], p1: [[778.0], [779.0]])]])), s2(p0: s0(p0: [[780.0], [781.0], [782.0]], p1: [[783.0], [784.0]]), p1: s1(p0: s0(p0: [[785.0], [786.0], [787.0]], p1: [[788.0], [789.0]]), p1: [[s0(p0: [[790.0], [791.0], [792.0]], p1: [[793.0], [794.0]])], [s0(p0: [[795.0], [796.0], [797.0]], p1: [[798.0], [799.0]])]])), s2(p0: s0(p0: [[800.0], [801.0], [802.0]], p1: [[803.0], [804.0]]), p1: s1(p0: s0(p0: [[805.0], [806.0], [807.0]], p1: [[808.0], [809.0]]), p1: [[s0(p0: [[810.0], [811.0], [812.0]], p1: [[813.0], [814.0]])], [s0(p0: [[815.0], [816.0], [817.0]], p1: [[818.0], [819.0]])]]))], p1: s1(p0: s0(p0: [[820.0], [821.0], [822.0]], p1: [[823.0], [824.0]]), p1: [[s0(p0: [[825.0], [826.0], [827.0]], p1: [[828.0], [829.0]])], [s0(p0: [[830.0], [831.0], [832.0]], p1: [[833.0], [834.0]])]]))], p1: [[s3(p0: [s2(p0: s0(p0: [[835.0], [836.0], [837.0]], p1: [[838.0], [839.0]]), p1: s1(p0: s0(p0: [[840.0], [841.0], [842.0]], p1: [[843.0], [844.0]]), p1: [[s0(p0: [[845.0], [846.0], [847.0]], p1: [[848.0], [849.0]])], [s0(p0: [[850.0], [851.0], [852.0]], p1: [[853.0], [854.0]])]])), s2(p0: s0(p0: [[855.0], [856.0], [857.0]], p1: [[858.0], [859.0]]), p1: s1(p0: s0(p0: [[860.0], [861.0], [862.0]], p1: [[863.0], [864.0]]), p1: [[s0(p0: [[865.0], [866.0], [867.0]], p1: [[868.0], [869.0]])], [s0(p0: [[870.0], [871.0], [872.0]], p1: [[873.0], [874.0]])]])), s2(p0: s0(p0: [[875.0], [876.0], [877.0]], p1: [[878.0], [879.0]]), p1: s1(p0: s0(p0: [[880.0], [881.0], [882.0]], p1: [[883.0], [884.0]]), p1: [[s0(p0: [[885.0], [886.0], [887.0]], p1: [[888.0], [889.0]])], [s0(p0: [[890.0], [891.0], [892.0]], p1: [[893.0], [894.0]])]]))], p1: s1(p0: s0(p0: [[895.0], [896.0], [897.0]], p1: [[898.0], [899.0]]), p1: [[s0(p0: [[900.0], [901.0], [902.0]], p1: [[903.0], [904.0]])], [s0(p0: [[905.0], [906.0], [907.0]], p1: [[908.0], [909.0]])]]))], [s3(p0: [s2(p0: s0(p0: [[910.0], [911.0], [912.0]], p1: [[913.0], [914.0]]), p1: s1(p0: s0(p0: [[915.0], [916.0], [917.0]], p1: [[918.0], [919.0]]), p1: [[s0(p0: [[920.0], [921.0], [922.0]], p1: [[923.0], [924.0]])], [s0(p0: [[925.0], [926.0], [927.0]], p1: [[928.0], [929.0]])]])), s2(p0: s0(p0: [[930.0], [931.0], [932.0]], p1: [[933.0], [934.0]]), p1: s1(p0: s0(p0: [[935.0], [936.0], [937.0]], p1: [[938.0], [939.0]]), p1: [[s0(p0: [[940.0], [941.0], [942.0]], p1: [[943.0], [944.0]])], [s0(p0: [[945.0], [946.0], [947.0]], p1: [[948.0], [949.0]])]])), s2(p0: s0(p0: [[950.0], [951.0], [952.0]], p1: [[953.0], [954.0]]), p1: s1(p0: s0(p0: [[955.0], [956.0], [957.0]], p1: [[958.0], [959.0]]), p1: [[s0(p0: [[960.0], [961.0], [962.0]], p1: [[963.0], [964.0]])], [s0(p0: [[965.0], [966.0], [967.0]], p1: [[968.0], [969.0]])]]))], p1: s1(p0: s0(p0: [[970.0], [971.0], [972.0]], p1: [[973.0], [974.0]]), p1: [[s0(p0: [[975.0], [976.0], [977.0]], p1: [[978.0], [979.0]])], [s0(p0: [[980.0], [981.0], [982.0]], p1: [[983.0], [984.0]])]]))], [s3(p0: [s2(p0: s0(p0: [[985.0], [986.0], [987.0]], p1: [[988.0], [989.0]]), p1: s1(p0: s0(p0: [[990.0], [991.0], [992.0]], p1: [[993.0], [994.0]]), p1: [[s0(p0: [[995.0], [996.0], [997.0]], p1: [[998.0], [999.0]])], [s0(p0: [[1000.0], [1001.0], [1002.0]], p1: [[1003.0], [1004.0]])]])), s2(p0: s0(p0: [[1005.0], [1006.0], [1007.0]], p1: [[1008.0], [1009.0]]), p1: s1(p0: s0(p0: [[1010.0], [1011.0], [1012.0]], p1: [[1013.0], [1014.0]]), p1: [[s0(p0: [[1015.0], [1016.0], [1017.0]], p1: [[1018.0], [1019.0]])], [s0(p0: [[1020.0], [1021.0], [1022.0]], p1: [[1023.0], [1024.0]])]])), s2(p0: s0(p0: [[1025.0], [1026.0], [1027.0]], p1: [[1028.0], [1029.0]]), p1: s1(p0: s0(p0: [[1030.0], [1031.0], [1032.0]], p1: [[1033.0], [1034.0]]), p1: [[s0(p0: [[1035.0], [1036.0], [1037.0]], p1: [[1038.0], [1039.0]])], [s0(p0: [[1040.0], [1041.0], [1042.0]], p1: [[1043.0], [1044.0]])]]))], p1: s1(p0: s0(p0: [[1045.0], [1046.0], [1047.0]], p1: [[1048.0], [1049.0]]), p1: [[s0(p0: [[1050.0], [1051.0], [1052.0]], p1: [[1053.0], [1054.0]])], [s0(p0: [[1055.0], [1056.0], [1057.0]], p1: [[1058.0], [1059.0]])]]))]]), s6(p0: [s3(p0: [s2(p0: s0(p0: [[1060.0], [1061.0], [1062.0]], p1: [[1063.0], [1064.0]]), p1: s1(p0: s0(p0: [[1065.0], [1066.0], [1067.0]], p1: [[1068.0], [1069.0]]), p1: [[s0(p0: [[1070.0], [1071.0], [1072.0]], p1: [[1073.0], [1074.0]])], [s0(p0: [[1075.0], [1076.0], [1077.0]], p1: [[1078.0], [1079.0]])]])), s2(p0: s0(p0: [[1080.0], [1081.0], [1082.0]], p1: [[1083.0], [1084.0]]), p1: s1(p0: s0(p0: [[1085.0], [1086.0], [1087.0]], p1: [[1088.0], [1089.0]]), p1: [[s0(p0: [[1090.0], [1091.0], [1092.0]], p1: [[1093.0], [1094.0]])], [s0(p0: [[1095.0], [1096.0], [1097.0]], p1: [[1098.0], [1099.0]])]])), s2(p0: s0(p0: [[1100.0], [1101.0], [1102.0]], p1: [[1103.0], [1104.0]]), p1: s1(p0: s0(p0: [[1105.0], [1106.0], [1107.0]], p1: [[1108.0], [1109.0]]), p1: [[s0(p0: [[1110.0], [1111.0], [1112.0]], p1: [[1113.0], [1114.0]])], [s0(p0: [[1115.0], [1116.0], [1117.0]], p1: [[1118.0], [1119.0]])]]))], p1: s1(p0: s0(p0: [[1120.0], [1121.0], [1122.0]], p1: [[1123.0], [1124.0]]), p1: [[s0(p0: [[1125.0], [1126.0], [1127.0]], p1: [[1128.0], [1129.0]])], [s0(p0: [[1130.0], [1131.0], [1132.0]], p1: [[1133.0], [1134.0]])]])), s3(p0: [s2(p0: s0(p0: [[1135.0], [1136.0], [1137.0]], p1: [[1138.0], [1139.0]]), p1: s1(p0: s0(p0: [[1140.0], [1141.0], [1142.0]], p1: [[1143.0], [1144.0]]), p1: [[s0(p0: [[1145.0], [1146.0], [1147.0]], p1: [[1148.0], [1149.0]])], [s0(p0: [[1150.0], [1151.0], [1152.0]], p1: [[1153.0], [1154.0]])]])), s2(p0: s0(p0: [[1155.0], [1156.0], [1157.0]], p1: [[1158.0], [1159.0]]), p1: s1(p0: s0(p0: [[1160.0], [1161.0], [1162.0]], p1: [[1163.0], [1164.0]]), p1: [[s0(p0: [[1165.0], [1166.0], [1167.0]], p1: [[1168.0], [1169.0]])], [s0(p0: [[1170.0], [1171.0], [1172.0]], p1: [[1173.0], [1174.0]])]])), s2(p0: s0(p0: [[1175.0], [1176.0], [1177.0]], p1: [[1178.0], [1179.0]]), p1: s1(p0: s0(p0: [[1180.0], [1181.0], [1182.0]], p1: [[1183.0], [1184.0]]), p1: [[s0(p0: [[1185.0], [1186.0], [1187.0]], p1: [[1188.0], [1189.0]])], [s0(p0: [[1190.0], [1191.0], [1192.0]], p1: [[1193.0], [1194.0]])]]))], p1: s1(p0: s0(p0: [[1195.0], [1196.0], [1197.0]], p1: [[1198.0], [1199.0]]), p1: [[s0(p0: [[1200.0], [1201.0], [1202.0]], p1: [[1203.0], [1204.0]])], [s0(p0: [[1205.0], [1206.0], [1207.0]], p1: [[1208.0], [1209.0]])]])), s3(p0: [s2(p0: s0(p0: [[1210.0], [1211.0], [1212.0]], p1: [[1213.0], [1214.0]]), p1: s1(p0: s0(p0: [[1215.0], [1216.0], [1217.0]], p1: [[1218.0], [1219.0]]), p1: [[s0(p0: [[1220.0], [1221.0], [1222.0]], p1: [[1223.0], [1224.0]])], [s0(p0: [[1225.0], [1226.0], [1227.0]], p1: [[1228.0], [1229.0]])]])), s2(p0: s0(p0: [[1230.0], [1231.0], [1232.0]], p1: [[1233.0], [1234.0]]), p1: s1(p0: s0(p0: [[1235.0], [1236.0], [1237.0]], p1: [[1238.0], [1239.0]]), p1: [[s0(p0: [[1240.0], [1241.0], [1242.0]], p1: [[1243.0], [1244.0]])], [s0(p0: [[1245.0], [1246.0], [1247.0]], p1: [[1248.0], [1249.0]])]])), s2(p0: s0(p0: [[1250.0], [1251.0], [1252.0]], p1: [[1253.0], [1254.0]]), p1: s1(p0: s0(p0: [[1255.0], [1256.0], [1257.0]], p1: [[1258.0], [1259.0]]), p1: [[s0(p0: [[1260.0], [1261.0], [1262.0]], p1: [[1263.0], [1264.0]])], [s0(p0: [[1265.0], [1266.0], [1267.0]], p1: [[1268.0], [1269.0]])]]))], p1: s1(p0: s0(p0: [[1270.0], [1271.0], [1272.0]], p1: [[1273.0], [1274.0]]), p1: [[s0(p0: [[1275.0], [1276.0], [1277.0]], p1: [[1278.0], [1279.0]])], [s0(p0: [[1280.0], [1281.0], [1282.0]], p1: [[1283.0], [1284.0]])]]))], p1: [[s3(p0: [s2(p0: s0(p0: [[1285.0], [1286.0], [1287.0]], p1: [[1288.0], [1289.0]]), p1: s1(p0: s0(p0: [[1290.0], [1291.0], [1292.0]], p1: [[1293.0], [1294.0]]), p1: [[s0(p0: [[1295.0], [1296.0], [1297.0]], p1: [[1298.0], [1299.0]])], [s0(p0: [[1300.0], [1301.0], [1302.0]], p1: [[1303.0], [1304.0]])]])), s2(p0: s0(p0: [[1305.0], [1306.0], [1307.0]], p1: [[1308.0], [1309.0]]), p1: s1(p0: s0(p0: [[1310.0], [1311.0], [1312.0]], p1: [[1313.0], [1314.0]]), p1: [[s0(p0: [[1315.0], [1316.0], [1317.0]], p1: [[1318.0], [1319.0]])], [s0(p0: [[1320.0], [1321.0], [1322.0]], p1: [[1323.0], [1324.0]])]])), s2(p0: s0(p0: [[1325.0], [1326.0], [1327.0]], p1: [[1328.0], [1329.0]]), p1: s1(p0: s0(p0: [[1330.0], [1331.0], [1332.0]], p1: [[1333.0], [1334.0]]), p1: [[s0(p0: [[1335.0], [1336.0], [1337.0]], p1: [[1338.0], [1339.0]])], [s0(p0: [[1340.0], [1341.0], [1342.0]], p1: [[1343.0], [1344.0]])]]))], p1: s1(p0: s0(p0: [[1345.0], [1346.0], [1347.0]], p1: [[1348.0], [1349.0]]), p1: [[s0(p0: [[1350.0], [1351.0], [1352.0]], p1: [[1353.0], [1354.0]])], [s0(p0: [[1355.0], [1356.0], [1357.0]], p1: [[1358.0], [1359.0]])]]))], [s3(p0: [s2(p0: s0(p0: [[1360.0], [1361.0], [1362.0]], p1: [[1363.0], [1364.0]]), p1: s1(p0: s0(p0: [[1365.0], [1366.0], [1367.0]], p1: [[1368.0], [1369.0]]), p1: [[s0(p0: [[1370.0], [1371.0], [1372.0]], p1: [[1373.0], [1374.0]])], [s0(p0: [[1375.0], [1376.0], [1377.0]], p1: [[1378.0], [1379.0]])]])), s2(p0: s0(p0: [[1380.0], [1381.0], [1382.0]], p1: [[1383.0], [1384.0]]), p1: s1(p0: s0(p0: [[1385.0], [1386.0], [1387.0]], p1: [[1388.0], [1389.0]]), p1: [[s0(p0: [[1390.0], [1391.0], [1392.0]], p1: [[1393.0], [1394.0]])], [s0(p0: [[1395.0], [1396.0], [1397.0]], p1: [[1398.0], [1399.0]])]])), s2(p0: s0(p0: [[1400.0], [1401.0], [1402.0]], p1: [[1403.0], [1404.0]]), p1: s1(p0: s0(p0: [[1405.0], [1406.0], [1407.0]], p1: [[1408.0], [1409.0]]), p1: [[s0(p0: [[1410.0], [1411.0], [1412.0]], p1: [[1413.0], [1414.0]])], [s0(p0: [[1415.0], [1416.0], [1417.0]], p1: [[1418.0], [1419.0]])]]))], p1: s1(p0: s0(p0: [[1420.0], [1421.0], [1422.0]], p1: [[1423.0], [1424.0]]), p1: [[s0(p0: [[1425.0], [1426.0], [1427.0]], p1: [[1428.0], [1429.0]])], [s0(p0: [[1430.0], [1431.0], [1432.0]], p1: [[1433.0], [1434.0]])]]))], [s3(p0: [s2(p0: s0(p0: [[1435.0], [1436.0], [1437.0]], p1: [[1438.0], [1439.0]]), p1: s1(p0: s0(p0: [[1440.0], [1441.0], [1442.0]], p1: [[1443.0], [1444.0]]), p1: [[s0(p0: [[1445.0], [1446.0], [1447.0]], p1: [[1448.0], [1449.0]])], [s0(p0: [[1450.0], [1451.0], [1452.0]], p1: [[1453.0], [1454.0]])]])), s2(p0: s0(p0: [[1455.0], [1456.0], [1457.0]], p1: [[1458.0], [1459.0]]), p1: s1(p0: s0(p0: [[1460.0], [1461.0], [1462.0]], p1: [[1463.0], [1464.0]]), p1: [[s0(p0: [[1465.0], [1466.0], [1467.0]], p1: [[1468.0], [1469.0]])], [s0(p0: [[1470.0], [1471.0], [1472.0]], p1: [[1473.0], [1474.0]])]])), s2(p0: s0(p0: [[1475.0], [1476.0], [1477.0]], p1: [[1478.0], [1479.0]]), p1: s1(p0: s0(p0: [[1480.0], [1481.0], [1482.0]], p1: [[1483.0], [1484.0]]), p1: [[s0(p0: [[1485.0], [1486.0], [1487.0]], p1: [[1488.0], [1489.0]])], [s0(p0: [[1490.0], [1491.0], [1492.0]], p1: [[1493.0], [1494.0]])]]))], p1: s1(p0: s0(p0: [[1495.0], [1496.0], [1497.0]], p1: [[1498.0], [1499.0]]), p1: [[s0(p0: [[1500.0], [1501.0], [1502.0]], p1: [[1503.0], [1504.0]])], [s0(p0: [[1505.0], [1506.0], [1507.0]], p1: [[1508.0], [1509.0]])]]))]])]
    let v3: Double = 1510.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 1510.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
