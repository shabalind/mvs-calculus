  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: ([s0], Float) -> Float = (v0: [s0], v1: Float) -> Float {
    let v3: s0 = v0[2] in
    let v14: s0 = v0[0] in
    let v8: [[Float]] = v3.p0 in
    let v29: [Float] = v8[0] in
    let v34: [[Float]] = v14.p1 in
    let v38: Float = v29[0] in
    let v28: [Float] = v34[0] in
    var v69: [Float] = v28 in
    v69[0] = v1 in
    v69[0] = v1 in
    let v64: [Float] = [v38, v1] in
    var v106: [Float] = v69 in
    let v146: Float = v64[0] in
    let v238: Float = v106[0] in
    let v196: Float = v238 - v146 in
    v196
  } in
  fun loop(i: Int, v0: [s0], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0]], [[1.0]]), s0([[2.0]], [[3.0]]), s0([[4.0]], [[5.0]])] in
    let v1: Float = 6.0 in
    let initialResult: Float = 6.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()