  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let f24: (Float) -> Float = (v0: Float) -> Float {
    let v6: Float = v0 / v0 in
    var v7: Float = v0 in
    var v1: Float = v7 in
    var v4: Float = v1 in
    var v13: Float = v0 in
    var v9: Float = v4 in
    var v3: Float = v9 in
    let v15: Float = v13 * v13 in
    let v10: [Float] = [v1, v9, v15, v3] in
    var v30: Float = v6 in
    var v22: [Float] = v10 in
    var v14: [Float] = v22 in
    let v28: Float = v22[0] in
    var v46: Float = v28 in
    v22[1] = v1 in
    v22[1] = v4 in
    v14[0] = v46 in
    v3 = v6 in
    v22[3] = v30 in
    var v23: [Float] = v14 in
    var v51: [Float] = v23 in
    v51[1] = v28 in
    let v41: Float = v51[1] in
    v41
  } in
  let noinline_f0: ([s0], Float) -> Float = (v0: [s0], v1: Float) -> Float {
    let v3: Float = f24(v1) in
    var v5: Float = v3 in
    v5 = v3 in
    let v38: Float = f24(v5) in
    v38
  } in
  fun loop(i: Int, v0: [s0], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]]), s0([[6.0], [7.0], [8.0]], [[9.0], [10.0], [11.0]])] in
    let v1: Float = 12.0 in
    let initialResult: Float = 12.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()