  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: s0
    var p1: [[s1]]
  }
  struct s3 {
    var p0: s1
    var p1: s2
  }
  struct s6 {
    var p0: s0
    var p1: s3
  }
  struct s9 {
    var p0: s6
    var p1: s0
  }
  struct s10 {
    var p0: [s9]
  }
  func f13(_ v0: s6, _ v1: s10) -> s6 {
    let v10: s3 = v0.p1
    var v40: s6 = v0
    v40.p1 = v10
    return v40
  }
  @inline(never)
  func f0(_ v0: s10, _ v1: [[s0]], _ v2: Double) -> Double {
    let v3: [s9] = v0.p0
    var v12: s10 = v0
    let v7: [s9] = v12.p0
    let v9: s9 = v7[1]
    v12.p0 = v3
    v12.p0 = v7
    v12.p0 = v7
    v12 = v0
    let v16: s6 = v9.p0
    v12.p0 = v3
    var v26: s6 = v16
    v12.p0 = v7
    let v21: s0 = v9.p1
    v26.p0 = v21
    let v41: s6 = f13(v26, v12)
    v26 = v41
    let v19: s0 = v41.p0
    var v63: s0 = v19
    let v35: [[Double]] = v63.p0
    let v72: [Double] = v35[0]
    v63.p0 = v35
    let v85: Double = v72[0]
    return v85
  }
  func benchmark() {
    let v0: s10 = s10(p0: [s9(p0: s6(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0]]), p1: s3(p0: s1(p0: s0(p0: [[3.0], [4.0]], p1: [[5.0]]), p1: [s0(p0: [[6.0], [7.0]], p1: [[8.0]]), s0(p0: [[9.0], [10.0]], p1: [[11.0]]), s0(p0: [[12.0], [13.0]], p1: [[14.0]])]), p1: s2(p0: s0(p0: [[15.0], [16.0]], p1: [[17.0]]), p1: [[s1(p0: s0(p0: [[18.0], [19.0]], p1: [[20.0]]), p1: [s0(p0: [[21.0], [22.0]], p1: [[23.0]]), s0(p0: [[24.0], [25.0]], p1: [[26.0]]), s0(p0: [[27.0], [28.0]], p1: [[29.0]])])], [s1(p0: s0(p0: [[30.0], [31.0]], p1: [[32.0]]), p1: [s0(p0: [[33.0], [34.0]], p1: [[35.0]]), s0(p0: [[36.0], [37.0]], p1: [[38.0]]), s0(p0: [[39.0], [40.0]], p1: [[41.0]])])], [s1(p0: s0(p0: [[42.0], [43.0]], p1: [[44.0]]), p1: [s0(p0: [[45.0], [46.0]], p1: [[47.0]]), s0(p0: [[48.0], [49.0]], p1: [[50.0]]), s0(p0: [[51.0], [52.0]], p1: [[53.0]])])]]))), p1: s0(p0: [[54.0], [55.0]], p1: [[56.0]])), s9(p0: s6(p0: s0(p0: [[57.0], [58.0]], p1: [[59.0]]), p1: s3(p0: s1(p0: s0(p0: [[60.0], [61.0]], p1: [[62.0]]), p1: [s0(p0: [[63.0], [64.0]], p1: [[65.0]]), s0(p0: [[66.0], [67.0]], p1: [[68.0]]), s0(p0: [[69.0], [70.0]], p1: [[71.0]])]), p1: s2(p0: s0(p0: [[72.0], [73.0]], p1: [[74.0]]), p1: [[s1(p0: s0(p0: [[75.0], [76.0]], p1: [[77.0]]), p1: [s0(p0: [[78.0], [79.0]], p1: [[80.0]]), s0(p0: [[81.0], [82.0]], p1: [[83.0]]), s0(p0: [[84.0], [85.0]], p1: [[86.0]])])], [s1(p0: s0(p0: [[87.0], [88.0]], p1: [[89.0]]), p1: [s0(p0: [[90.0], [91.0]], p1: [[92.0]]), s0(p0: [[93.0], [94.0]], p1: [[95.0]]), s0(p0: [[96.0], [97.0]], p1: [[98.0]])])], [s1(p0: s0(p0: [[99.0], [100.0]], p1: [[101.0]]), p1: [s0(p0: [[102.0], [103.0]], p1: [[104.0]]), s0(p0: [[105.0], [106.0]], p1: [[107.0]]), s0(p0: [[108.0], [109.0]], p1: [[110.0]])])]]))), p1: s0(p0: [[111.0], [112.0]], p1: [[113.0]])), s9(p0: s6(p0: s0(p0: [[114.0], [115.0]], p1: [[116.0]]), p1: s3(p0: s1(p0: s0(p0: [[117.0], [118.0]], p1: [[119.0]]), p1: [s0(p0: [[120.0], [121.0]], p1: [[122.0]]), s0(p0: [[123.0], [124.0]], p1: [[125.0]]), s0(p0: [[126.0], [127.0]], p1: [[128.0]])]), p1: s2(p0: s0(p0: [[129.0], [130.0]], p1: [[131.0]]), p1: [[s1(p0: s0(p0: [[132.0], [133.0]], p1: [[134.0]]), p1: [s0(p0: [[135.0], [136.0]], p1: [[137.0]]), s0(p0: [[138.0], [139.0]], p1: [[140.0]]), s0(p0: [[141.0], [142.0]], p1: [[143.0]])])], [s1(p0: s0(p0: [[144.0], [145.0]], p1: [[146.0]]), p1: [s0(p0: [[147.0], [148.0]], p1: [[149.0]]), s0(p0: [[150.0], [151.0]], p1: [[152.0]]), s0(p0: [[153.0], [154.0]], p1: [[155.0]])])], [s1(p0: s0(p0: [[156.0], [157.0]], p1: [[158.0]]), p1: [s0(p0: [[159.0], [160.0]], p1: [[161.0]]), s0(p0: [[162.0], [163.0]], p1: [[164.0]]), s0(p0: [[165.0], [166.0]], p1: [[167.0]])])]]))), p1: s0(p0: [[168.0], [169.0]], p1: [[170.0]]))])
    let v1: [[s0]] = [[s0(p0: [[171.0], [172.0]], p1: [[173.0]])]]
    let v2: Double = 174.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 174.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
