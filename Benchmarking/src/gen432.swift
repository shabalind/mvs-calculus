  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
    var p4: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s2 {
    var p0: [s1]
    var p1: s1
  }
  func f48(_ v0: Double) -> Double {
    let v6: [Double] = [v0, v0, v0]
    var v5: [Double] = v6
    v5[0] = v0
    var v8: [Double] = v5
    var v7: [Double] = v8
    var v2: [Double] = v8
    let v1: Double = v2[2]
    var v3: Double = v1
    let v10: Double = v6[0]
    v5[2] = v0
    let v13: Double = v8[1]
    var v4: [Double] = v2
    let v11: Double = v6[2]
    let v20: Double = v11 / v13
    v5[1] = v20
    let v15: Double = v4[2]
    v2[2] = v3
    v7[2] = v15
    v7[0] = v0
    v2[2] = v3
    v4[0] = v10
    var v29: Double = v20
    var v49: [Double] = v7
    v4 = v6
    v49[1] = v29
    let v54: Double = v49[2]
    return v54
  }
  @inline(never)
  func f0(_ v0: [s2], _ v1: [[s0]], _ v2: Double) -> Double {
    let v4: Double = f48(v2)
    let v3: Double = f48(v4)
    let v14: Double = f48(v3)
    let v16: Double = v14 / v2
    let v61: Double = f48(v16)
    let v125: Double = f48(v61)
    return v125
  }
  func benchmark() {
    let v0: [s2] = [s2(p0: [s1(p0: [s0(p0: [[0.0]], p1: [[1.0], [2.0]], p2: [[3.0], [4.0], [5.0]], p3: [[6.0]], p4: [[7.0], [8.0]])], p1: [s0(p0: [[9.0]], p1: [[10.0], [11.0]], p2: [[12.0], [13.0], [14.0]], p3: [[15.0]], p4: [[16.0], [17.0]]), s0(p0: [[18.0]], p1: [[19.0], [20.0]], p2: [[21.0], [22.0], [23.0]], p3: [[24.0]], p4: [[25.0], [26.0]]), s0(p0: [[27.0]], p1: [[28.0], [29.0]], p2: [[30.0], [31.0], [32.0]], p3: [[33.0]], p4: [[34.0], [35.0]])]), s1(p0: [s0(p0: [[36.0]], p1: [[37.0], [38.0]], p2: [[39.0], [40.0], [41.0]], p3: [[42.0]], p4: [[43.0], [44.0]])], p1: [s0(p0: [[45.0]], p1: [[46.0], [47.0]], p2: [[48.0], [49.0], [50.0]], p3: [[51.0]], p4: [[52.0], [53.0]]), s0(p0: [[54.0]], p1: [[55.0], [56.0]], p2: [[57.0], [58.0], [59.0]], p3: [[60.0]], p4: [[61.0], [62.0]]), s0(p0: [[63.0]], p1: [[64.0], [65.0]], p2: [[66.0], [67.0], [68.0]], p3: [[69.0]], p4: [[70.0], [71.0]])]), s1(p0: [s0(p0: [[72.0]], p1: [[73.0], [74.0]], p2: [[75.0], [76.0], [77.0]], p3: [[78.0]], p4: [[79.0], [80.0]])], p1: [s0(p0: [[81.0]], p1: [[82.0], [83.0]], p2: [[84.0], [85.0], [86.0]], p3: [[87.0]], p4: [[88.0], [89.0]]), s0(p0: [[90.0]], p1: [[91.0], [92.0]], p2: [[93.0], [94.0], [95.0]], p3: [[96.0]], p4: [[97.0], [98.0]]), s0(p0: [[99.0]], p1: [[100.0], [101.0]], p2: [[102.0], [103.0], [104.0]], p3: [[105.0]], p4: [[106.0], [107.0]])])], p1: s1(p0: [s0(p0: [[108.0]], p1: [[109.0], [110.0]], p2: [[111.0], [112.0], [113.0]], p3: [[114.0]], p4: [[115.0], [116.0]])], p1: [s0(p0: [[117.0]], p1: [[118.0], [119.0]], p2: [[120.0], [121.0], [122.0]], p3: [[123.0]], p4: [[124.0], [125.0]]), s0(p0: [[126.0]], p1: [[127.0], [128.0]], p2: [[129.0], [130.0], [131.0]], p3: [[132.0]], p4: [[133.0], [134.0]]), s0(p0: [[135.0]], p1: [[136.0], [137.0]], p2: [[138.0], [139.0], [140.0]], p3: [[141.0]], p4: [[142.0], [143.0]])])), s2(p0: [s1(p0: [s0(p0: [[144.0]], p1: [[145.0], [146.0]], p2: [[147.0], [148.0], [149.0]], p3: [[150.0]], p4: [[151.0], [152.0]])], p1: [s0(p0: [[153.0]], p1: [[154.0], [155.0]], p2: [[156.0], [157.0], [158.0]], p3: [[159.0]], p4: [[160.0], [161.0]]), s0(p0: [[162.0]], p1: [[163.0], [164.0]], p2: [[165.0], [166.0], [167.0]], p3: [[168.0]], p4: [[169.0], [170.0]]), s0(p0: [[171.0]], p1: [[172.0], [173.0]], p2: [[174.0], [175.0], [176.0]], p3: [[177.0]], p4: [[178.0], [179.0]])]), s1(p0: [s0(p0: [[180.0]], p1: [[181.0], [182.0]], p2: [[183.0], [184.0], [185.0]], p3: [[186.0]], p4: [[187.0], [188.0]])], p1: [s0(p0: [[189.0]], p1: [[190.0], [191.0]], p2: [[192.0], [193.0], [194.0]], p3: [[195.0]], p4: [[196.0], [197.0]]), s0(p0: [[198.0]], p1: [[199.0], [200.0]], p2: [[201.0], [202.0], [203.0]], p3: [[204.0]], p4: [[205.0], [206.0]]), s0(p0: [[207.0]], p1: [[208.0], [209.0]], p2: [[210.0], [211.0], [212.0]], p3: [[213.0]], p4: [[214.0], [215.0]])]), s1(p0: [s0(p0: [[216.0]], p1: [[217.0], [218.0]], p2: [[219.0], [220.0], [221.0]], p3: [[222.0]], p4: [[223.0], [224.0]])], p1: [s0(p0: [[225.0]], p1: [[226.0], [227.0]], p2: [[228.0], [229.0], [230.0]], p3: [[231.0]], p4: [[232.0], [233.0]]), s0(p0: [[234.0]], p1: [[235.0], [236.0]], p2: [[237.0], [238.0], [239.0]], p3: [[240.0]], p4: [[241.0], [242.0]]), s0(p0: [[243.0]], p1: [[244.0], [245.0]], p2: [[246.0], [247.0], [248.0]], p3: [[249.0]], p4: [[250.0], [251.0]])])], p1: s1(p0: [s0(p0: [[252.0]], p1: [[253.0], [254.0]], p2: [[255.0], [256.0], [257.0]], p3: [[258.0]], p4: [[259.0], [260.0]])], p1: [s0(p0: [[261.0]], p1: [[262.0], [263.0]], p2: [[264.0], [265.0], [266.0]], p3: [[267.0]], p4: [[268.0], [269.0]]), s0(p0: [[270.0]], p1: [[271.0], [272.0]], p2: [[273.0], [274.0], [275.0]], p3: [[276.0]], p4: [[277.0], [278.0]]), s0(p0: [[279.0]], p1: [[280.0], [281.0]], p2: [[282.0], [283.0], [284.0]], p3: [[285.0]], p4: [[286.0], [287.0]])])), s2(p0: [s1(p0: [s0(p0: [[288.0]], p1: [[289.0], [290.0]], p2: [[291.0], [292.0], [293.0]], p3: [[294.0]], p4: [[295.0], [296.0]])], p1: [s0(p0: [[297.0]], p1: [[298.0], [299.0]], p2: [[300.0], [301.0], [302.0]], p3: [[303.0]], p4: [[304.0], [305.0]]), s0(p0: [[306.0]], p1: [[307.0], [308.0]], p2: [[309.0], [310.0], [311.0]], p3: [[312.0]], p4: [[313.0], [314.0]]), s0(p0: [[315.0]], p1: [[316.0], [317.0]], p2: [[318.0], [319.0], [320.0]], p3: [[321.0]], p4: [[322.0], [323.0]])]), s1(p0: [s0(p0: [[324.0]], p1: [[325.0], [326.0]], p2: [[327.0], [328.0], [329.0]], p3: [[330.0]], p4: [[331.0], [332.0]])], p1: [s0(p0: [[333.0]], p1: [[334.0], [335.0]], p2: [[336.0], [337.0], [338.0]], p3: [[339.0]], p4: [[340.0], [341.0]]), s0(p0: [[342.0]], p1: [[343.0], [344.0]], p2: [[345.0], [346.0], [347.0]], p3: [[348.0]], p4: [[349.0], [350.0]]), s0(p0: [[351.0]], p1: [[352.0], [353.0]], p2: [[354.0], [355.0], [356.0]], p3: [[357.0]], p4: [[358.0], [359.0]])]), s1(p0: [s0(p0: [[360.0]], p1: [[361.0], [362.0]], p2: [[363.0], [364.0], [365.0]], p3: [[366.0]], p4: [[367.0], [368.0]])], p1: [s0(p0: [[369.0]], p1: [[370.0], [371.0]], p2: [[372.0], [373.0], [374.0]], p3: [[375.0]], p4: [[376.0], [377.0]]), s0(p0: [[378.0]], p1: [[379.0], [380.0]], p2: [[381.0], [382.0], [383.0]], p3: [[384.0]], p4: [[385.0], [386.0]]), s0(p0: [[387.0]], p1: [[388.0], [389.0]], p2: [[390.0], [391.0], [392.0]], p3: [[393.0]], p4: [[394.0], [395.0]])])], p1: s1(p0: [s0(p0: [[396.0]], p1: [[397.0], [398.0]], p2: [[399.0], [400.0], [401.0]], p3: [[402.0]], p4: [[403.0], [404.0]])], p1: [s0(p0: [[405.0]], p1: [[406.0], [407.0]], p2: [[408.0], [409.0], [410.0]], p3: [[411.0]], p4: [[412.0], [413.0]]), s0(p0: [[414.0]], p1: [[415.0], [416.0]], p2: [[417.0], [418.0], [419.0]], p3: [[420.0]], p4: [[421.0], [422.0]]), s0(p0: [[423.0]], p1: [[424.0], [425.0]], p2: [[426.0], [427.0], [428.0]], p3: [[429.0]], p4: [[430.0], [431.0]])]))]
    let v1: [[s0]] = [[s0(p0: [[432.0]], p1: [[433.0], [434.0]], p2: [[435.0], [436.0], [437.0]], p3: [[438.0]], p4: [[439.0], [440.0]])]]
    let v2: Double = 441.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 441.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
