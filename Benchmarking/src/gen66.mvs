  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s3 {
    var p0: s1
    var p1: s0
  } in
  struct s7 {
    var p0: s3
    var p1: s2
  } in
  struct s8 {
    var p0: s0
    var p1: [s7]
  } in
  let f86: (Float) -> Float = (v0: Float) -> Float {
    var v1: Float = v0 in
    var v8: Float = v0 in
    var v2: Float = v1 in
    var v5: Float = v0 in
    var v7: Float = v2 in
    var v4: Float = v2 in
    var v6: Float = v0 in
    let v3: Float = v8 / v8 in
    v2 = v4 in
    var v9: Float = v7 in
    var v11: Float = v9 in
    var v33: Float = v5 in
    var v13: Float = v3 in
    var v12: Float = v8 in
    var v16: Float = v33 in
    var v39: Float = v12 in
    let v29: [Float] = [v7] in
    let v10: Float = v29[0] in
    let v18: Float = v29[0] in
    var v15: [Float] = v29 in
    let v21: Float = v15[0] in
    let v17: Float = v15[0] in
    var v32: Float = v21 in
    var v61: [Float] = v29 in
    var v26: [Float] = v61 in
    v15[0] = v2 in
    v15[0] = v9 in
    let v28: Float = v29[0] in
    var v27: Float = v17 in
    v26[0] = v2 in
    v15[0] = v13 in
    let v84: Float = v26[0] in
    var v69: [Float] = v15 in
    var v31: [Float] = v69 in
    var v46: Float = v39 in
    v31[0] = v4 in
    let v54: Float = v15[0] in
    let v35: Float = v31[0] in
    v26[0] = v32 in
    v26[0] = v13 in
    let v90: Float = v61[0] in
    v69[0] = v18 in
    let v119: Float = v84 / v54 in
    let v42: Float = v10 - v54 in
    let v44: Float = v61[0] in
    v61[0] = v28 in
    var v50: [Float] = v69 in
    v26[0] = v16 in
    let v71: Float = v26[0] in
    v15[0] = v6 in
    var v66: [Float] = v50 in
    var v68: [Float] = v61 in
    v39 = v27 in
    v66[0] = v11 in
    let v128: Float = v50[0] in
    v15[0] = v21 in
    let v41: [Float] = [v46, v90, v119, v42, v44, v6] in
    v15[0] = v35 in
    v15[0] = v128 in
    let v108: [[Float]] = [v41, v41] in
    v66[0] = v128 in
    var v96: [[Float]] = v108 in
    var v278: [[Float]] = v96 in
    v61 = v68 in
    var v109: [Float] = v41 in
    var v63: [Float] = v109 in
    v69[0] = v21 in
    let v122: Float = v109[1] in
    v26 = v66 in
    let v215: [Float] = v278[1] in
    let v91: [Float] = v96[0] in
    let v100: [Float] = v108[1] in
    v109 = v91 in
    let v228: Float = v100[5] in
    let v116: Float = v66[0] in
    v63 = v215 in
    v31[0] = v122 in
    let v176: Float = v63[3] in
    v31[0] = v32 in
    v66[0] = v116 in
    var v173: Float = v228 in
    v109[2] = v71 in
    v69[0] = v176 in
    v173
  } in
  let noinline_f0: (s8, Float) -> Float = (v0: s8, v1: Float) -> Float {
    let v2: Float = f86(v1) in
    let v6: s0 = v0.p0 in
    let v11: [[Float]] = v6.p0 in
    let v12: Float = v1 * v2 in
    let v4: Float = v1 / v12 in
    var v15: Float = v4 in
    v15 = v12 in
    let v23: [Float] = v11[0] in
    var v44: [[Float]] = v11 in
    let v61: [Float] = v44[0] in
    v44[1] = v61 in
    let v50: Float = v61[0] in
    let v31: [[Float]] = v6.p0 in
    let v30: [Float] = v31[1] in
    v44[1] = v23 in
    var v42: Float = v15 in
    let v89: Float = v1 / v42 in
    v44[0] = v30 in
    v42 = v50 in
    v89
  } in
  fun loop(i: Int, v0: s8, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s8 = s8(s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]), [s7(s3(s1(s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]]), [s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]]), s0([[15.0], [16.0]], [[17.0], [18.0], [19.0]])]), s0([[20.0], [21.0]], [[22.0], [23.0], [24.0]])), s2([s0([[25.0], [26.0]], [[27.0], [28.0], [29.0]])], [s0([[30.0], [31.0]], [[32.0], [33.0], [34.0]]), s0([[35.0], [36.0]], [[37.0], [38.0], [39.0]])]))]) in
    let v1: Float = 40.0 in
    let initialResult: Float = 40.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()