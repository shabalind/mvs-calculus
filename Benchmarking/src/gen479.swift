  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: s0
  }
  struct s2 {
    var p0: s1
    var p1: [s1]
  }
  struct s3 {
    var p0: s0
    var p1: s0
  }
  func f87(_ v0: s1, _ v1: s3) -> s1 {
    var v4: s1 = v0
    let v3: [s1] = [v0, v4, v4, v0, v0, v0]
    let v6: s0 = v1.p1
    v4.p1 = v6
    v4.p1 = v6
    let v19: [s0] = v4.p0
    var v18: [s1] = v3
    let v12: s1 = v18[5]
    v18[2] = v4
    var v32: [s0] = v19
    v4.p0 = v32
    v32[2] = v6
    v18[2] = v0
    return v12
  }
  func f86(_ v0: s1) -> s1 {
    var v1: s1 = v0
    let v6: [s0] = v0.p0
    let v3: s0 = v6[2]
    v1.p0 = v6
    var v9: s0 = v3
    let v16: [s0] = v0.p0
    let v28: s0 = v6[0]
    let v13: s0 = v6[1]
    v1.p1 = v13
    let v32: s0 = v0.p1
    v1.p1 = v9
    let v29: s0 = v16[2]
    let v31: [[Double]] = v28.p0
    v9.p0 = v31
    let v43: s3 = s3(p0: v9, p1: v9)
    let v69: s1 = f87(v1, v43)
    var v36: s3 = v43
    let v30: s0 = v36.p0
    let v85: s3 = s3(p0: v3, p1: v29)
    var v95: s1 = v69
    let v118: s1 = f87(v95, v36)
    v36.p0 = v32
    let v49: s1 = f87(v118, v85)
    v95.p1 = v30
    let v125: s1 = f87(v49, v43)
    return v125
  }
  func f84(_ v0: s1) -> s1 {
    let v4: s0 = v0.p1
    let v3: [s0] = v0.p0
    let v7: s1 = s1(p0: v3, p1: v4)
    let v2: s1 = f86(v7)
    let v14: s1 = f86(v2)
    let v21: s1 = f86(v14)
    let v34: s1 = f86(v21)
    let v72: s1 = f86(v34)
    let v124: s1 = f86(v72)
    return v124
  }
  func f71(_ v0: s0, _ v1: s1) -> s0 {
    let v4: s1 = f84(v1)
    let v14: s1 = f84(v1)
    let v11: s0 = v14.p1
    let v17: s3 = s3(p0: v11, p1: v0)
    let v33: s1 = f87(v4, v17)
    let v59: [s0] = v33.p0
    var v141: [s0] = v59
    let v108: s0 = v141[2]
    v141[2] = v11
    return v108
  }
  @inline(never)
  func f0(_ v0: [s2], _ v1: Double) -> Double {
    let v7: s2 = v0[0]
    let v2: s2 = v0[0]
    let v11: s1 = v7.p0
    let v9: [s1] = v7.p1
    let v10: s1 = v7.p0
    let v6: [s0] = v11.p0
    let v13: s1 = v2.p0
    let v15: s0 = v6[2]
    let v20: s0 = f71(v15, v10)
    var v28: [s0] = v6
    let v22: Double = v1 + v1
    var v29: [s0] = v28
    let v58: s0 = v6[0]
    v28[0] = v58
    v28[1] = v20
    let v32: s0 = v29[1]
    var v35: s0 = v20
    let v37: s0 = v28[0]
    let v52: [[Double]] = v32.p0
    let v60: s0 = v13.p1
    let v57: s1 = v9[0]
    let v68: s0 = f71(v35, v57)
    v28[2] = v32
    let v124: [[Double]] = v68.p1
    v29[2] = v35
    let v110: [[[Double]]] = [v124, v124, v124, v124, v124, v124]
    v28[1] = v32
    let v185: [Double] = v52[1]
    v28[1] = v60
    var v162: [[[Double]]] = v110
    let v192: [[Double]] = v162[3]
    let v133: Double = v185[0]
    v35.p1 = v192
    let v90: Double = v133 - v22
    v29[1] = v37
    return v90
  }
  func benchmark() {
    let v0: [s2] = [s2(p0: s1(p0: [s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0]]), s0(p0: [[5.0], [6.0], [7.0]], p1: [[8.0], [9.0]]), s0(p0: [[10.0], [11.0], [12.0]], p1: [[13.0], [14.0]])], p1: s0(p0: [[15.0], [16.0], [17.0]], p1: [[18.0], [19.0]])), p1: [s1(p0: [s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0], [24.0]]), s0(p0: [[25.0], [26.0], [27.0]], p1: [[28.0], [29.0]]), s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0]])], p1: s0(p0: [[35.0], [36.0], [37.0]], p1: [[38.0], [39.0]])), s1(p0: [s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0], [44.0]]), s0(p0: [[45.0], [46.0], [47.0]], p1: [[48.0], [49.0]]), s0(p0: [[50.0], [51.0], [52.0]], p1: [[53.0], [54.0]])], p1: s0(p0: [[55.0], [56.0], [57.0]], p1: [[58.0], [59.0]]))]), s2(p0: s1(p0: [s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0], [64.0]]), s0(p0: [[65.0], [66.0], [67.0]], p1: [[68.0], [69.0]]), s0(p0: [[70.0], [71.0], [72.0]], p1: [[73.0], [74.0]])], p1: s0(p0: [[75.0], [76.0], [77.0]], p1: [[78.0], [79.0]])), p1: [s1(p0: [s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0], [84.0]]), s0(p0: [[85.0], [86.0], [87.0]], p1: [[88.0], [89.0]]), s0(p0: [[90.0], [91.0], [92.0]], p1: [[93.0], [94.0]])], p1: s0(p0: [[95.0], [96.0], [97.0]], p1: [[98.0], [99.0]])), s1(p0: [s0(p0: [[100.0], [101.0], [102.0]], p1: [[103.0], [104.0]]), s0(p0: [[105.0], [106.0], [107.0]], p1: [[108.0], [109.0]]), s0(p0: [[110.0], [111.0], [112.0]], p1: [[113.0], [114.0]])], p1: s0(p0: [[115.0], [116.0], [117.0]], p1: [[118.0], [119.0]]))]), s2(p0: s1(p0: [s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0], [124.0]]), s0(p0: [[125.0], [126.0], [127.0]], p1: [[128.0], [129.0]]), s0(p0: [[130.0], [131.0], [132.0]], p1: [[133.0], [134.0]])], p1: s0(p0: [[135.0], [136.0], [137.0]], p1: [[138.0], [139.0]])), p1: [s1(p0: [s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0], [144.0]]), s0(p0: [[145.0], [146.0], [147.0]], p1: [[148.0], [149.0]]), s0(p0: [[150.0], [151.0], [152.0]], p1: [[153.0], [154.0]])], p1: s0(p0: [[155.0], [156.0], [157.0]], p1: [[158.0], [159.0]])), s1(p0: [s0(p0: [[160.0], [161.0], [162.0]], p1: [[163.0], [164.0]]), s0(p0: [[165.0], [166.0], [167.0]], p1: [[168.0], [169.0]]), s0(p0: [[170.0], [171.0], [172.0]], p1: [[173.0], [174.0]])], p1: s0(p0: [[175.0], [176.0], [177.0]], p1: [[178.0], [179.0]]))])]
    let v1: Double = 180.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 180.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
