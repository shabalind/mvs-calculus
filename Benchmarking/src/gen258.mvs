  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: Float
    var p1: s0
  } in
  struct s3 {
    var p0: [s1]
    var p1: s0
  } in
  struct s4 {
    var p0: [s1]
    var p1: [s0]
    var p2: [[s0]]
  } in
  struct s11 {
    var p0: [s0]
    var p1: s3
  } in
  let f5: (s4) -> s4 = (v0: s4) -> s4 {
    var v3: s4 = v0 in
    let v7: [s1] = v0.p0 in
    var v5: s4 = v3 in
    var v2: [s1] = v7 in
    v3.p0 = v2 in
    let v8: [[s0]] = v0.p2 in
    var v4: [s1] = v7 in
    var v9: [[s0]] = v8 in
    let v6: [s1] = v3.p0 in
    let v11: [s1] = v5.p0 in
    let v13: [[s0]] = v5.p2 in
    let v18: s1 = v6[0] in
    let v15: [s0] = v13[1] in
    v9[1] = v15 in
    v2[0] = v18 in
    let v28: s1 = v11[0] in
    v2[0] = v28 in
    v3.p2 = v8 in
    v5.p0 = v7 in
    v3.p2 = v9 in
    var v50: s4 = v5 in
    v50.p0 = v4 in
    v50
  } in
  let noinline_f0: ([s4], [[s11]], Float) -> Float = (v0: [s4], v1: [[s11]], v2: Float) -> Float {
    let v5: s4 = v0[0] in
    let v3: [s1] = v5.p0 in
    var v10: [s4] = v0 in
    var v4: [s4] = v10 in
    let v7: s4 = f5(v5) in
    let v8: s4 = f5(v7) in
    var v12: [s1] = v3 in
    v4[2] = v5 in
    let v30: s4 = f5(v8) in
    v4[1] = v30 in
    var v17: [s4] = v4 in
    let v21: s4 = v17[2] in
    v17[1] = v30 in
    let v18: s4 = f5(v7) in
    let v24: s4 = f5(v18) in
    let v36: [s1] = v21.p0 in
    v17 = v0 in
    v10[2] = v30 in
    let v44: s4 = f5(v24) in
    let v26: s1 = v36[0] in
    let v38: [[s1]] = [v12, v36, v12, v36, v12, v36] in
    let v79: [s1] = v38[4] in
    v4[2] = v44 in
    v4[1] = v21 in
    v10[2] = v8 in
    let v101: s1 = v79[0] in
    let v244: Float = v26.p0 in
    let v198: Float = v101.p0 in
    var v155: s1 = v26 in
    let v127: Float = v198 - v244 in
    v12[0] = v155 in
    v127
  } in
  fun loop(i: Int, v0: [s4], v1: [[s11]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s4] = [s4([s1(0.0, s0([[1.0], [2.0]], [[3.0]]))], [s0([[4.0], [5.0]], [[6.0]])], [[s0([[7.0], [8.0]], [[9.0]])], [s0([[10.0], [11.0]], [[12.0]])]]), s4([s1(13.0, s0([[14.0], [15.0]], [[16.0]]))], [s0([[17.0], [18.0]], [[19.0]])], [[s0([[20.0], [21.0]], [[22.0]])], [s0([[23.0], [24.0]], [[25.0]])]]), s4([s1(26.0, s0([[27.0], [28.0]], [[29.0]]))], [s0([[30.0], [31.0]], [[32.0]])], [[s0([[33.0], [34.0]], [[35.0]])], [s0([[36.0], [37.0]], [[38.0]])]])] in
    let v1: [[s11]] = [[s11([s0([[39.0], [40.0]], [[41.0]]), s0([[42.0], [43.0]], [[44.0]])], s3([s1(45.0, s0([[46.0], [47.0]], [[48.0]]))], s0([[49.0], [50.0]], [[51.0]])))], [s11([s0([[52.0], [53.0]], [[54.0]]), s0([[55.0], [56.0]], [[57.0]])], s3([s1(58.0, s0([[59.0], [60.0]], [[61.0]]))], s0([[62.0], [63.0]], [[64.0]])))], [s11([s0([[65.0], [66.0]], [[67.0]]), s0([[68.0], [69.0]], [[70.0]])], s3([s1(71.0, s0([[72.0], [73.0]], [[74.0]]))], s0([[75.0], [76.0]], [[77.0]])))]] in
    let v2: Float = 78.0 in
    let initialResult: Float = 78.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()