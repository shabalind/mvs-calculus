  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
  } in
  let f17: ([s1]) -> [s1] = (v0: [s1]) -> [s1] {
    let v3: s1 = v0[1] in
    let v5: s1 = v0[1] in
    let v4: [s0] = v5.p0 in
    let v9: [s0] = v3.p0 in
    let v22: s1 = s1(v9) in
    var v77: [s1] = v0 in
    var v78: s1 = v22 in
    v78.p0 = v4 in
    v77[1] = v78 in
    v77
  } in
  let noinline_f0: ([s1], Float) -> Float = (v0: [s1], v1: Float) -> Float {
    let v6: [s1] = f17(v0) in
    let v8: s1 = v6[0] in
    let v7: [s0] = v8.p0 in
    let v11: [s0] = v8.p0 in
    let v13: s0 = v7[2] in
    let v14: [[Float]] = v13.p1 in
    let v33: s0 = v11[2] in
    let v73: [Float] = v14[0] in
    let v47: [[Float]] = v33.p0 in
    let v145: Float = v73[0] in
    var v102: [[Float]] = v47 in
    let v96: [Float] = v102[1] in
    let v211: Float = v96[0] in
    let v109: Float = v211 - v145 in
    v109
  } in
  fun loop(i: Int, v0: [s1], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1([s0([[0.0], [1.0], [2.0]], [[3.0]]), s0([[4.0], [5.0], [6.0]], [[7.0]]), s0([[8.0], [9.0], [10.0]], [[11.0]])]), s1([s0([[12.0], [13.0], [14.0]], [[15.0]]), s0([[16.0], [17.0], [18.0]], [[19.0]]), s0([[20.0], [21.0], [22.0]], [[23.0]])])] in
    let v1: Float = 24.0 in
    let initialResult: Float = 24.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()