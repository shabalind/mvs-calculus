  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s1
    var p1: s0
    var p2: [s0]
  } in
  let noinline_f0: ([s2], Float) -> Float = (v0: [s2], v1: Float) -> Float {
    let v7: s2 = v0[0] in
    let v2: [Float] = [v1, v1, v1] in
    let v37: s1 = v7.p0 in
    let v49: Float = v2[2] in
    let v16: s0 = v37.p0 in
    let v22: [[Float]] = v16.p1 in
    let v60: [Float] = v22[1] in
    var v69: Float = v49 in
    var v23: [Float] = v60 in
    let v97: Float = v23[0] in
    v23[0] = v69 in
    v97
  } in
  fun loop(i: Int, v0: [s2], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2(s1(s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]), s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]])), s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]]), [s0([[15.0], [16.0]], [[17.0], [18.0], [19.0]])])] in
    let v1: Float = 20.0 in
    let initialResult: Float = 20.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()