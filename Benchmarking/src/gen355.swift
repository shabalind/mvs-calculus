  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: Double
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: [[s1]]
    var p1: s1
  }
  struct s3 {
    var p0: s1
    var p1: s0
    var p2: [s2]
    var p3: s2
  }
  struct s6 {
    var p0: s0
    var p1: [[s0]]
  }
  struct s7 {
    var p0: s3
    var p1: [s0]
  }
  struct s8 {
    var p0: s7
    var p1: s6
    var p2: [s6]
    var p3: s3
  }
  struct s9 {
    var p0: s1
    var p1: [[s8]]
  }
  struct s10 {
    var p0: [s9]
    var p1: [s3]
  }
  struct s13 {
    var p0: [s0]
    var p1: s2
  }
  func f111(_ v0: s0) -> s0 {
    return v0
  }
  func f90(_ v0: s1, _ v1: s1) -> s1 {
    return v0
  }
  func f82(_ v0: s1) -> s1 {
    var v5: s1 = v0
    let v1: [s1] = [v5, v0, v5, v0, v5]
    let v9: s1 = f90(v0, v0)
    let v2: s1 = f90(v5, v0)
    let v3: s1 = f90(v5, v9)
    let v8: s0 = v9.p0
    v5.p0 = v8
    v5.p0 = v8
    var v29: [s1] = v1
    let v109: s1 = f90(v9, v3)
    let v32: s0 = v2.p0
    v5 = v2
    let v30: s0 = v109.p0
    v5.p0 = v32
    v5.p1 = v30
    var v96: s1 = v5
    let v59: s0 = v96.p0
    v5.p1 = v59
    let v60: s1 = v29[2]
    return v60
  }
  func f78(_ v0: s1) -> s1 {
    var v6: s1 = v0
    let v8: s0 = v0.p1
    let v5: s1 = f90(v0, v0)
    var v7: s0 = v8
    let v1: s0 = f111(v8)
    let v4: s1 = f82(v5)
    let v3: Double = v1.p1
    let v15: s0 = v6.p0
    v7.p1 = v3
    let v9: s1 = f90(v6, v0)
    v7.p1 = v3
    let v13: [s1] = [v4, v9, v6]
    var v19: [s1] = v13
    v19[0] = v5
    v19[1] = v9
    v7.p1 = v3
    let v11: s1 = v13[0]
    let v25: [[Double]] = v15.p0
    v19[0] = v11
    var v34: s1 = v4
    let v54: s0 = f111(v7)
    let v70: [s1] = [v34, v0, v9]
    v19 = v70
    let v27: s1 = v19[2]
    v7.p0 = v25
    v34.p0 = v54
    let v49: s1 = f90(v27, v34)
    v34.p0 = v54
    v19[2] = v11
    return v49
  }
  func f54(_ v0: Double) -> Double {
    var v1: Double = v0
    let v7: Double = v1 + v1
    var v2: Double = v1
    var v8: Double = v2
    var v6: Double = v1
    var v5: Double = v2
    var v4: Double = v1
    var v14: Double = v4
    var v10: Double = v8
    var v9: Double = v6
    var v18: Double = v10
    v4 = v5
    var v40: Double = v14
    let v16: [Double] = [v7, v9, v14, v5, v40]
    let v27: Double = v16[3]
    var v45: [Double] = v16
    var v166: Double = v5
    let v80: Double = v45[0]
    v45[4] = v166
    v45[2] = v18
    v45[3] = v27
    return v80
  }
  func f50(_ v0: s1, _ v1: s1) -> s1 {
    var v4: s1 = v0
    let v2: s1 = f78(v4)
    var v5: s1 = v4
    let v3: s0 = v1.p1
    let v7: s1 = f90(v1, v4)
    var v8: s0 = v3
    var v6: s1 = v4
    let v14: s1 = f82(v7)
    let v16: s1 = f90(v14, v7)
    v6.p1 = v3
    let v22: s0 = v2.p1
    var v12: s1 = v14
    v5.p0 = v8
    let v9: s1 = f82(v16)
    var v15: s0 = v22
    v4.p1 = v8
    let v11: s1 = f82(v16)
    let v20: s0 = v11.p1
    var v23: s0 = v3
    let v18: s0 = f111(v15)
    let v13: Double = v18.p1
    let v10: s0 = v5.p1
    let v36: Double = v20.p1
    let v17: Double = f54(v36)
    v4.p0 = v8
    v5 = v6
    let v19: s0 = v4.p1
    let v21: s1 = f90(v14, v14)
    let v28: [[Double]] = v10.p0
    let v39: [[Double]] = v22.p0
    v23.p1 = v36
    v6.p0 = v18
    let v29: [Double] = v28[0]
    let v46: Double = v29[0]
    var v54: s0 = v23
    v54.p0 = v28
    let v24: [s1] = [v16, v21, v14, v12, v11]
    var v30: [Double] = v29
    let v25: [[Double]] = v8.p0
    v5.p1 = v8
    let v70: s0 = s0(p0: v25, p1: v36)
    v30[0] = v13
    let v38: s0 = v9.p1
    var v34: [[Double]] = v39
    var v47: Double = v36
    let v104: Double = v47 - v46
    v34[0] = v29
    v34[0] = v30
    let v52: s0 = f111(v38)
    v5.p1 = v3
    let v67: s0 = s0(p0: v28, p1: v104)
    v34[0] = v30
    var v26: Double = v13
    let v32: Double = f54(v46)
    let v40: [Double] = v25[0]
    let v57: s1 = f78(v2)
    v54 = v70
    v12.p0 = v10
    v34[0] = v40
    let v50: s0 = v1.p0
    let v33: s0 = v2.p0
    v30[0] = v17
    v34[0] = v29
    v30[0] = v46
    v30[0] = v32
    v34[0] = v40
    v5.p1 = v8
    var v94: s0 = v52
    v12.p0 = v19
    let v85: [s1] = [v4, v9, v57, v12]
    let v56: s1 = f82(v12)
    let v82: Double = v29[0]
    v4.p0 = v54
    let v48: s1 = v24[4]
    v6.p1 = v70
    let v84: s1 = s1(p0: v20, p1: v50)
    var v76: [s1] = v24
    v23.p0 = v25
    let v95: s1 = v85[1]
    v6.p0 = v38
    v23.p1 = v82
    v76[2] = v56
    v5.p1 = v94
    v4.p0 = v33
    v34[0] = v29
    v4.p0 = v67
    v76[2] = v9
    v76[1] = v84
    v54.p0 = v34
    v76[0] = v9
    v30[0] = v26
    let v113: s1 = v76[1]
    v76[4] = v95
    v76[4] = v48
    v4.p1 = v23
    v4.p0 = v8
    return v113
  }
  @inline(never)
  func f0(_ v0: s13, _ v1: s10, _ v2: Double) -> Double {
    let v25: s2 = v0.p1
    let v9: s1 = v25.p1
    var v19: s1 = v9
    let v21: s1 = f50(v19, v9)
    let v60: s0 = v21.p1
    let v35: Double = v60.p1
    return v35
  }
  func benchmark() {
    let v0: s13 = s13(p0: [s0(p0: [[0.0]], p1: 1.0), s0(p0: [[2.0]], p1: 3.0), s0(p0: [[4.0]], p1: 5.0)], p1: s2(p0: [[s1(p0: s0(p0: [[6.0]], p1: 7.0), p1: s0(p0: [[8.0]], p1: 9.0))]], p1: s1(p0: s0(p0: [[10.0]], p1: 11.0), p1: s0(p0: [[12.0]], p1: 13.0))))
    let v1: s10 = s10(p0: [s9(p0: s1(p0: s0(p0: [[14.0]], p1: 15.0), p1: s0(p0: [[16.0]], p1: 17.0)), p1: [[s8(p0: s7(p0: s3(p0: s1(p0: s0(p0: [[18.0]], p1: 19.0), p1: s0(p0: [[20.0]], p1: 21.0)), p1: s0(p0: [[22.0]], p1: 23.0), p2: [s2(p0: [[s1(p0: s0(p0: [[24.0]], p1: 25.0), p1: s0(p0: [[26.0]], p1: 27.0))]], p1: s1(p0: s0(p0: [[28.0]], p1: 29.0), p1: s0(p0: [[30.0]], p1: 31.0))), s2(p0: [[s1(p0: s0(p0: [[32.0]], p1: 33.0), p1: s0(p0: [[34.0]], p1: 35.0))]], p1: s1(p0: s0(p0: [[36.0]], p1: 37.0), p1: s0(p0: [[38.0]], p1: 39.0))), s2(p0: [[s1(p0: s0(p0: [[40.0]], p1: 41.0), p1: s0(p0: [[42.0]], p1: 43.0))]], p1: s1(p0: s0(p0: [[44.0]], p1: 45.0), p1: s0(p0: [[46.0]], p1: 47.0)))], p3: s2(p0: [[s1(p0: s0(p0: [[48.0]], p1: 49.0), p1: s0(p0: [[50.0]], p1: 51.0))]], p1: s1(p0: s0(p0: [[52.0]], p1: 53.0), p1: s0(p0: [[54.0]], p1: 55.0)))), p1: [s0(p0: [[56.0]], p1: 57.0), s0(p0: [[58.0]], p1: 59.0)]), p1: s6(p0: s0(p0: [[60.0]], p1: 61.0), p1: [[s0(p0: [[62.0]], p1: 63.0)], [s0(p0: [[64.0]], p1: 65.0)]]), p2: [s6(p0: s0(p0: [[66.0]], p1: 67.0), p1: [[s0(p0: [[68.0]], p1: 69.0)], [s0(p0: [[70.0]], p1: 71.0)]]), s6(p0: s0(p0: [[72.0]], p1: 73.0), p1: [[s0(p0: [[74.0]], p1: 75.0)], [s0(p0: [[76.0]], p1: 77.0)]]), s6(p0: s0(p0: [[78.0]], p1: 79.0), p1: [[s0(p0: [[80.0]], p1: 81.0)], [s0(p0: [[82.0]], p1: 83.0)]])], p3: s3(p0: s1(p0: s0(p0: [[84.0]], p1: 85.0), p1: s0(p0: [[86.0]], p1: 87.0)), p1: s0(p0: [[88.0]], p1: 89.0), p2: [s2(p0: [[s1(p0: s0(p0: [[90.0]], p1: 91.0), p1: s0(p0: [[92.0]], p1: 93.0))]], p1: s1(p0: s0(p0: [[94.0]], p1: 95.0), p1: s0(p0: [[96.0]], p1: 97.0))), s2(p0: [[s1(p0: s0(p0: [[98.0]], p1: 99.0), p1: s0(p0: [[100.0]], p1: 101.0))]], p1: s1(p0: s0(p0: [[102.0]], p1: 103.0), p1: s0(p0: [[104.0]], p1: 105.0))), s2(p0: [[s1(p0: s0(p0: [[106.0]], p1: 107.0), p1: s0(p0: [[108.0]], p1: 109.0))]], p1: s1(p0: s0(p0: [[110.0]], p1: 111.0), p1: s0(p0: [[112.0]], p1: 113.0)))], p3: s2(p0: [[s1(p0: s0(p0: [[114.0]], p1: 115.0), p1: s0(p0: [[116.0]], p1: 117.0))]], p1: s1(p0: s0(p0: [[118.0]], p1: 119.0), p1: s0(p0: [[120.0]], p1: 121.0)))))], [s8(p0: s7(p0: s3(p0: s1(p0: s0(p0: [[122.0]], p1: 123.0), p1: s0(p0: [[124.0]], p1: 125.0)), p1: s0(p0: [[126.0]], p1: 127.0), p2: [s2(p0: [[s1(p0: s0(p0: [[128.0]], p1: 129.0), p1: s0(p0: [[130.0]], p1: 131.0))]], p1: s1(p0: s0(p0: [[132.0]], p1: 133.0), p1: s0(p0: [[134.0]], p1: 135.0))), s2(p0: [[s1(p0: s0(p0: [[136.0]], p1: 137.0), p1: s0(p0: [[138.0]], p1: 139.0))]], p1: s1(p0: s0(p0: [[140.0]], p1: 141.0), p1: s0(p0: [[142.0]], p1: 143.0))), s2(p0: [[s1(p0: s0(p0: [[144.0]], p1: 145.0), p1: s0(p0: [[146.0]], p1: 147.0))]], p1: s1(p0: s0(p0: [[148.0]], p1: 149.0), p1: s0(p0: [[150.0]], p1: 151.0)))], p3: s2(p0: [[s1(p0: s0(p0: [[152.0]], p1: 153.0), p1: s0(p0: [[154.0]], p1: 155.0))]], p1: s1(p0: s0(p0: [[156.0]], p1: 157.0), p1: s0(p0: [[158.0]], p1: 159.0)))), p1: [s0(p0: [[160.0]], p1: 161.0), s0(p0: [[162.0]], p1: 163.0)]), p1: s6(p0: s0(p0: [[164.0]], p1: 165.0), p1: [[s0(p0: [[166.0]], p1: 167.0)], [s0(p0: [[168.0]], p1: 169.0)]]), p2: [s6(p0: s0(p0: [[170.0]], p1: 171.0), p1: [[s0(p0: [[172.0]], p1: 173.0)], [s0(p0: [[174.0]], p1: 175.0)]]), s6(p0: s0(p0: [[176.0]], p1: 177.0), p1: [[s0(p0: [[178.0]], p1: 179.0)], [s0(p0: [[180.0]], p1: 181.0)]]), s6(p0: s0(p0: [[182.0]], p1: 183.0), p1: [[s0(p0: [[184.0]], p1: 185.0)], [s0(p0: [[186.0]], p1: 187.0)]])], p3: s3(p0: s1(p0: s0(p0: [[188.0]], p1: 189.0), p1: s0(p0: [[190.0]], p1: 191.0)), p1: s0(p0: [[192.0]], p1: 193.0), p2: [s2(p0: [[s1(p0: s0(p0: [[194.0]], p1: 195.0), p1: s0(p0: [[196.0]], p1: 197.0))]], p1: s1(p0: s0(p0: [[198.0]], p1: 199.0), p1: s0(p0: [[200.0]], p1: 201.0))), s2(p0: [[s1(p0: s0(p0: [[202.0]], p1: 203.0), p1: s0(p0: [[204.0]], p1: 205.0))]], p1: s1(p0: s0(p0: [[206.0]], p1: 207.0), p1: s0(p0: [[208.0]], p1: 209.0))), s2(p0: [[s1(p0: s0(p0: [[210.0]], p1: 211.0), p1: s0(p0: [[212.0]], p1: 213.0))]], p1: s1(p0: s0(p0: [[214.0]], p1: 215.0), p1: s0(p0: [[216.0]], p1: 217.0)))], p3: s2(p0: [[s1(p0: s0(p0: [[218.0]], p1: 219.0), p1: s0(p0: [[220.0]], p1: 221.0))]], p1: s1(p0: s0(p0: [[222.0]], p1: 223.0), p1: s0(p0: [[224.0]], p1: 225.0)))))], [s8(p0: s7(p0: s3(p0: s1(p0: s0(p0: [[226.0]], p1: 227.0), p1: s0(p0: [[228.0]], p1: 229.0)), p1: s0(p0: [[230.0]], p1: 231.0), p2: [s2(p0: [[s1(p0: s0(p0: [[232.0]], p1: 233.0), p1: s0(p0: [[234.0]], p1: 235.0))]], p1: s1(p0: s0(p0: [[236.0]], p1: 237.0), p1: s0(p0: [[238.0]], p1: 239.0))), s2(p0: [[s1(p0: s0(p0: [[240.0]], p1: 241.0), p1: s0(p0: [[242.0]], p1: 243.0))]], p1: s1(p0: s0(p0: [[244.0]], p1: 245.0), p1: s0(p0: [[246.0]], p1: 247.0))), s2(p0: [[s1(p0: s0(p0: [[248.0]], p1: 249.0), p1: s0(p0: [[250.0]], p1: 251.0))]], p1: s1(p0: s0(p0: [[252.0]], p1: 253.0), p1: s0(p0: [[254.0]], p1: 255.0)))], p3: s2(p0: [[s1(p0: s0(p0: [[256.0]], p1: 257.0), p1: s0(p0: [[258.0]], p1: 259.0))]], p1: s1(p0: s0(p0: [[260.0]], p1: 261.0), p1: s0(p0: [[262.0]], p1: 263.0)))), p1: [s0(p0: [[264.0]], p1: 265.0), s0(p0: [[266.0]], p1: 267.0)]), p1: s6(p0: s0(p0: [[268.0]], p1: 269.0), p1: [[s0(p0: [[270.0]], p1: 271.0)], [s0(p0: [[272.0]], p1: 273.0)]]), p2: [s6(p0: s0(p0: [[274.0]], p1: 275.0), p1: [[s0(p0: [[276.0]], p1: 277.0)], [s0(p0: [[278.0]], p1: 279.0)]]), s6(p0: s0(p0: [[280.0]], p1: 281.0), p1: [[s0(p0: [[282.0]], p1: 283.0)], [s0(p0: [[284.0]], p1: 285.0)]]), s6(p0: s0(p0: [[286.0]], p1: 287.0), p1: [[s0(p0: [[288.0]], p1: 289.0)], [s0(p0: [[290.0]], p1: 291.0)]])], p3: s3(p0: s1(p0: s0(p0: [[292.0]], p1: 293.0), p1: s0(p0: [[294.0]], p1: 295.0)), p1: s0(p0: [[296.0]], p1: 297.0), p2: [s2(p0: [[s1(p0: s0(p0: [[298.0]], p1: 299.0), p1: s0(p0: [[300.0]], p1: 301.0))]], p1: s1(p0: s0(p0: [[302.0]], p1: 303.0), p1: s0(p0: [[304.0]], p1: 305.0))), s2(p0: [[s1(p0: s0(p0: [[306.0]], p1: 307.0), p1: s0(p0: [[308.0]], p1: 309.0))]], p1: s1(p0: s0(p0: [[310.0]], p1: 311.0), p1: s0(p0: [[312.0]], p1: 313.0))), s2(p0: [[s1(p0: s0(p0: [[314.0]], p1: 315.0), p1: s0(p0: [[316.0]], p1: 317.0))]], p1: s1(p0: s0(p0: [[318.0]], p1: 319.0), p1: s0(p0: [[320.0]], p1: 321.0)))], p3: s2(p0: [[s1(p0: s0(p0: [[322.0]], p1: 323.0), p1: s0(p0: [[324.0]], p1: 325.0))]], p1: s1(p0: s0(p0: [[326.0]], p1: 327.0), p1: s0(p0: [[328.0]], p1: 329.0)))))]])], p1: [s3(p0: s1(p0: s0(p0: [[330.0]], p1: 331.0), p1: s0(p0: [[332.0]], p1: 333.0)), p1: s0(p0: [[334.0]], p1: 335.0), p2: [s2(p0: [[s1(p0: s0(p0: [[336.0]], p1: 337.0), p1: s0(p0: [[338.0]], p1: 339.0))]], p1: s1(p0: s0(p0: [[340.0]], p1: 341.0), p1: s0(p0: [[342.0]], p1: 343.0))), s2(p0: [[s1(p0: s0(p0: [[344.0]], p1: 345.0), p1: s0(p0: [[346.0]], p1: 347.0))]], p1: s1(p0: s0(p0: [[348.0]], p1: 349.0), p1: s0(p0: [[350.0]], p1: 351.0))), s2(p0: [[s1(p0: s0(p0: [[352.0]], p1: 353.0), p1: s0(p0: [[354.0]], p1: 355.0))]], p1: s1(p0: s0(p0: [[356.0]], p1: 357.0), p1: s0(p0: [[358.0]], p1: 359.0)))], p3: s2(p0: [[s1(p0: s0(p0: [[360.0]], p1: 361.0), p1: s0(p0: [[362.0]], p1: 363.0))]], p1: s1(p0: s0(p0: [[364.0]], p1: 365.0), p1: s0(p0: [[366.0]], p1: 367.0)))), s3(p0: s1(p0: s0(p0: [[368.0]], p1: 369.0), p1: s0(p0: [[370.0]], p1: 371.0)), p1: s0(p0: [[372.0]], p1: 373.0), p2: [s2(p0: [[s1(p0: s0(p0: [[374.0]], p1: 375.0), p1: s0(p0: [[376.0]], p1: 377.0))]], p1: s1(p0: s0(p0: [[378.0]], p1: 379.0), p1: s0(p0: [[380.0]], p1: 381.0))), s2(p0: [[s1(p0: s0(p0: [[382.0]], p1: 383.0), p1: s0(p0: [[384.0]], p1: 385.0))]], p1: s1(p0: s0(p0: [[386.0]], p1: 387.0), p1: s0(p0: [[388.0]], p1: 389.0))), s2(p0: [[s1(p0: s0(p0: [[390.0]], p1: 391.0), p1: s0(p0: [[392.0]], p1: 393.0))]], p1: s1(p0: s0(p0: [[394.0]], p1: 395.0), p1: s0(p0: [[396.0]], p1: 397.0)))], p3: s2(p0: [[s1(p0: s0(p0: [[398.0]], p1: 399.0), p1: s0(p0: [[400.0]], p1: 401.0))]], p1: s1(p0: s0(p0: [[402.0]], p1: 403.0), p1: s0(p0: [[404.0]], p1: 405.0)))), s3(p0: s1(p0: s0(p0: [[406.0]], p1: 407.0), p1: s0(p0: [[408.0]], p1: 409.0)), p1: s0(p0: [[410.0]], p1: 411.0), p2: [s2(p0: [[s1(p0: s0(p0: [[412.0]], p1: 413.0), p1: s0(p0: [[414.0]], p1: 415.0))]], p1: s1(p0: s0(p0: [[416.0]], p1: 417.0), p1: s0(p0: [[418.0]], p1: 419.0))), s2(p0: [[s1(p0: s0(p0: [[420.0]], p1: 421.0), p1: s0(p0: [[422.0]], p1: 423.0))]], p1: s1(p0: s0(p0: [[424.0]], p1: 425.0), p1: s0(p0: [[426.0]], p1: 427.0))), s2(p0: [[s1(p0: s0(p0: [[428.0]], p1: 429.0), p1: s0(p0: [[430.0]], p1: 431.0))]], p1: s1(p0: s0(p0: [[432.0]], p1: 433.0), p1: s0(p0: [[434.0]], p1: 435.0)))], p3: s2(p0: [[s1(p0: s0(p0: [[436.0]], p1: 437.0), p1: s0(p0: [[438.0]], p1: 439.0))]], p1: s1(p0: s0(p0: [[440.0]], p1: 441.0), p1: s0(p0: [[442.0]], p1: 443.0))))])
    let v2: Double = 444.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 444.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
