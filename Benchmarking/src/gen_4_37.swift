  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: s0
  }
  struct s2 {
    var p0: [[s0]]
    var p1: [[s1]]
  }
  struct s4 {
    var p0: [Double]
    var p1: s0
    var p2: s1
    var p3: s2
    var p4: [[s0]]
  }
  struct s5 {
    var p0: s4
    var p1: s4
  }
  struct s10 {
    var p0: s5
    var p1: s1
  }
  func f13(_ v0: Double) -> Double {
    var v2: Double = v0
    let v1: Double = v0 + v0
    var v7: Double = v1
    v2 = v7
    v2 = v1
    var v4: Double = v1
    var v3: Double = v0
    var v5: Double = v2
    var v18: Double = v4
    var v13: Double = v3
    v13 = v0
    let v14: Double = v3 - v4
    v7 = v5
    let v20: Double = v18 - v5
    let v41: [Double] = [v13, v14]
    var v30: [Double] = v41
    v30[0] = v13
    var v16: Double = v7
    let v36: Double = v30[1]
    var v63: Double = v16
    v4 = v20
    v30[1] = v63
    return v36
  }
  @inline(never)
  func f0(_ v0: [s10], _ v1: Double) -> Double {
    let v7: Double = f13(v1)
    var v9: Double = v7
    let v13: Double = f13(v9)
    var v27: Double = v13
    var v39: Double = v13
    let v66: Double = v27 - v39
    return v66
  }
  func benchmark() {
    let v0: [s10] = [s10(p0: s5(p0: s4(p0: [0.0], p1: s0(p0: [[1.0], [2.0], [3.0]], p1: [[4.0]]), p2: s1(p0: [s0(p0: [[5.0], [6.0], [7.0]], p1: [[8.0]])], p1: s0(p0: [[9.0], [10.0], [11.0]], p1: [[12.0]])), p3: s2(p0: [[s0(p0: [[13.0], [14.0], [15.0]], p1: [[16.0]])]], p1: [[s1(p0: [s0(p0: [[17.0], [18.0], [19.0]], p1: [[20.0]])], p1: s0(p0: [[21.0], [22.0], [23.0]], p1: [[24.0]]))], [s1(p0: [s0(p0: [[25.0], [26.0], [27.0]], p1: [[28.0]])], p1: s0(p0: [[29.0], [30.0], [31.0]], p1: [[32.0]]))], [s1(p0: [s0(p0: [[33.0], [34.0], [35.0]], p1: [[36.0]])], p1: s0(p0: [[37.0], [38.0], [39.0]], p1: [[40.0]]))]]), p4: [[s0(p0: [[41.0], [42.0], [43.0]], p1: [[44.0]])], [s0(p0: [[45.0], [46.0], [47.0]], p1: [[48.0]])]]), p1: s4(p0: [49.0], p1: s0(p0: [[50.0], [51.0], [52.0]], p1: [[53.0]]), p2: s1(p0: [s0(p0: [[54.0], [55.0], [56.0]], p1: [[57.0]])], p1: s0(p0: [[58.0], [59.0], [60.0]], p1: [[61.0]])), p3: s2(p0: [[s0(p0: [[62.0], [63.0], [64.0]], p1: [[65.0]])]], p1: [[s1(p0: [s0(p0: [[66.0], [67.0], [68.0]], p1: [[69.0]])], p1: s0(p0: [[70.0], [71.0], [72.0]], p1: [[73.0]]))], [s1(p0: [s0(p0: [[74.0], [75.0], [76.0]], p1: [[77.0]])], p1: s0(p0: [[78.0], [79.0], [80.0]], p1: [[81.0]]))], [s1(p0: [s0(p0: [[82.0], [83.0], [84.0]], p1: [[85.0]])], p1: s0(p0: [[86.0], [87.0], [88.0]], p1: [[89.0]]))]]), p4: [[s0(p0: [[90.0], [91.0], [92.0]], p1: [[93.0]])], [s0(p0: [[94.0], [95.0], [96.0]], p1: [[97.0]])]])), p1: s1(p0: [s0(p0: [[98.0], [99.0], [100.0]], p1: [[101.0]])], p1: s0(p0: [[102.0], [103.0], [104.0]], p1: [[105.0]]))), s10(p0: s5(p0: s4(p0: [106.0], p1: s0(p0: [[107.0], [108.0], [109.0]], p1: [[110.0]]), p2: s1(p0: [s0(p0: [[111.0], [112.0], [113.0]], p1: [[114.0]])], p1: s0(p0: [[115.0], [116.0], [117.0]], p1: [[118.0]])), p3: s2(p0: [[s0(p0: [[119.0], [120.0], [121.0]], p1: [[122.0]])]], p1: [[s1(p0: [s0(p0: [[123.0], [124.0], [125.0]], p1: [[126.0]])], p1: s0(p0: [[127.0], [128.0], [129.0]], p1: [[130.0]]))], [s1(p0: [s0(p0: [[131.0], [132.0], [133.0]], p1: [[134.0]])], p1: s0(p0: [[135.0], [136.0], [137.0]], p1: [[138.0]]))], [s1(p0: [s0(p0: [[139.0], [140.0], [141.0]], p1: [[142.0]])], p1: s0(p0: [[143.0], [144.0], [145.0]], p1: [[146.0]]))]]), p4: [[s0(p0: [[147.0], [148.0], [149.0]], p1: [[150.0]])], [s0(p0: [[151.0], [152.0], [153.0]], p1: [[154.0]])]]), p1: s4(p0: [155.0], p1: s0(p0: [[156.0], [157.0], [158.0]], p1: [[159.0]]), p2: s1(p0: [s0(p0: [[160.0], [161.0], [162.0]], p1: [[163.0]])], p1: s0(p0: [[164.0], [165.0], [166.0]], p1: [[167.0]])), p3: s2(p0: [[s0(p0: [[168.0], [169.0], [170.0]], p1: [[171.0]])]], p1: [[s1(p0: [s0(p0: [[172.0], [173.0], [174.0]], p1: [[175.0]])], p1: s0(p0: [[176.0], [177.0], [178.0]], p1: [[179.0]]))], [s1(p0: [s0(p0: [[180.0], [181.0], [182.0]], p1: [[183.0]])], p1: s0(p0: [[184.0], [185.0], [186.0]], p1: [[187.0]]))], [s1(p0: [s0(p0: [[188.0], [189.0], [190.0]], p1: [[191.0]])], p1: s0(p0: [[192.0], [193.0], [194.0]], p1: [[195.0]]))]]), p4: [[s0(p0: [[196.0], [197.0], [198.0]], p1: [[199.0]])], [s0(p0: [[200.0], [201.0], [202.0]], p1: [[203.0]])]])), p1: s1(p0: [s0(p0: [[204.0], [205.0], [206.0]], p1: [[207.0]])], p1: s0(p0: [[208.0], [209.0], [210.0]], p1: [[211.0]])))]
    let v1: Double = 212.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 212.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
