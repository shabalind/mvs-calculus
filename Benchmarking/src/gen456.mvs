  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: ([s0], s0, Float) -> Float = (v0: [s0], v1: s0, v2: Float) -> Float {
    let v6: [[Float]] = v1.p1 in
    let v3: [Float] = v6[0] in
    let v11: Float = v3[0] in
    let v10: [Float] = v6[0] in
    var v27: Float = v11 in
    let v24: [Float] = v6[0] in
    let v21: [[Float]] = [v10, v24, v10, v3, v10] in
    let v75: [Float] = v21[1] in
    let v117: Float = v75[0] in
    let v148: Float = v117 * v27 in
    v148
  } in
  fun loop(i: Int, v0: [s0], v1: s0, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0]], [[2.0]]), s0([[3.0], [4.0]], [[5.0]])] in
    let v1: s0 = s0([[6.0], [7.0]], [[8.0]]) in
    let v2: Float = 9.0 in
    let initialResult: Float = 9.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()