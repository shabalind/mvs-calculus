  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
  } in
  struct s4 {
    var p0: [s1]
    var p1: s0
  } in
  struct s5 {
    var p0: [s4]
    var p1: s4
  } in
  struct s9 {
    var p0: s5
    var p1: [s1]
  } in
  let noinline_f0: (s9, Float) -> Float = (v0: s9, v1: Float) -> Float {
    let v7: [Float] = [v1, v1, v1, v1, v1] in
    let v8: Float = v7[3] in
    var v16: [Float] = v7 in
    let v21: Float = v7[2] in
    let v25: Float = v16[3] in
    let v15: Float = v25 * v21 in
    let v17: Float = v25 / v25 in
    var v79: Float = v8 in
    v16[4] = v15 in
    v16[2] = v21 in
    v16[1] = v79 in
    v17
  } in
  fun loop(i: Int, v0: s9, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s9 = s9(s5([s4([s1([s0([[0.0]], [[1.0]])]), s1([s0([[2.0]], [[3.0]])])], s0([[4.0]], [[5.0]])), s4([s1([s0([[6.0]], [[7.0]])]), s1([s0([[8.0]], [[9.0]])])], s0([[10.0]], [[11.0]]))], s4([s1([s0([[12.0]], [[13.0]])]), s1([s0([[14.0]], [[15.0]])])], s0([[16.0]], [[17.0]]))), [s1([s0([[18.0]], [[19.0]])]), s1([s0([[20.0]], [[21.0]])])]) in
    let v1: Float = 22.0 in
    let initialResult: Float = 22.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()