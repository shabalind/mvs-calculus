  struct s0 {
    var p0: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
  } in
  struct s2 {
    var p0: s1
    var p1: [[s1]]
  } in
  let noinline_f0: (s2, Float) -> Float = (v0: s2, v1: Float) -> Float {
    var v7: s2 = v0 in
    let v4: [[s1]] = v0.p1 in
    v7.p1 = v4 in
    let v2: s1 = v7.p0 in
    let v5: [s0] = v2.p0 in
    let v9: s0 = v5[0] in
    v7.p0 = v2 in
    let v25: [[Float]] = v9.p0 in
    var v40: s0 = v9 in
    var v33: s0 = v40 in
    let v46: [[Float]] = v33.p0 in
    let v100: [Float] = v46[0] in
    let v151: [[Float]] = v33.p0 in
    var v93: [[Float]] = v151 in
    v40.p0 = v93 in
    v40.p0 = v25 in
    let v77: Float = v100[0] in
    v77
  } in
  fun loop(i: Int, v0: s2, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(s1([s0([[0.0]])]), [[s1([s0([[1.0]])])]]) in
    let v1: Float = 2.0 in
    let initialResult: Float = 2.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()