  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
    var p3: [[Float]]
    var p4: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s4 {
    var p0: s1
    var p1: s0
  } in
  let f43: (Float) -> Float = (v0: Float) -> Float {
    var v3: Float = v0 in
    var v8: Float = v0 in
    var v2: Float = v8 in
    var v14: Float = v0 in
    var v6: Float = v3 in
    var v17: Float = v3 in
    var v1: Float = v17 in
    var v15: Float = v1 in
    var v12: Float = v17 in
    let v25: [Float] = [v2, v8] in
    v3 = v15 in
    var v20: Float = v12 in
    var v24: Float = v14 in
    var v23: [Float] = v25 in
    var v18: [Float] = v23 in
    var v22: [Float] = v18 in
    var v27: Float = v6 in
    var v37: [Float] = v22 in
    v23[0] = v20 in
    var v33: [Float] = v37 in
    v33[0] = v24 in
    v37[1] = v27 in
    let v49: Float = v33[1] in
    var v39: Float = v49 in
    v39
  } in
  let noinline_f0: ([s4], Float) -> Float = (v0: [s4], v1: Float) -> Float {
    var v7: Float = v1 in
    v7 = v1 in
    let v36: Float = f43(v7) in
    v36
  } in
  fun loop(i: Int, v0: [s4], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s4] = [s4(s1([s0([[0.0]], [[1.0], [2.0]], [[3.0]], [[4.0], [5.0]], [[6.0]])], [s0([[7.0]], [[8.0], [9.0]], [[10.0]], [[11.0], [12.0]], [[13.0]]), s0([[14.0]], [[15.0], [16.0]], [[17.0]], [[18.0], [19.0]], [[20.0]])]), s0([[21.0]], [[22.0], [23.0]], [[24.0]], [[25.0], [26.0]], [[27.0]]))] in
    let v1: Float = 28.0 in
    let initialResult: Float = 28.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()