  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: [[s0]]
    var p1: s1
  }
  struct s3 {
    var p0: [[s2]]
    var p1: s1
  }
  struct s4 {
    var p0: s1
    var p1: s1
  }
  struct s5 {
    var p0: [s3]
    var p1: [s1]
  }
  struct s7 {
    var p0: s5
    var p1: [s4]
  }
  struct s9 {
    var p0: [s5]
    var p1: s7
  }
  func f87(_ v0: Double) -> Double {
    var v2: Double = v0
    var v4: Double = v0
    var v3: Double = v2
    var v6: Double = v2
    let v5: Double = v3 - v6
    var v11: Double = v4
    var v10: Double = v3
    var v15: Double = v4
    let v13: Double = v3 + v0
    var v16: Double = v2
    var v12: Double = v3
    v3 = v15
    var v19: Double = v10
    var v26: Double = v4
    var v29: Double = v19
    var v22: Double = v12
    let v18: Double = v11 * v16
    v10 = v18
    var v17: Double = v18
    var v20: Double = v4
    var v32: Double = v29
    var v28: Double = v10
    v28 = v4
    var v65: Double = v26
    var v43: Double = v32
    var v39: Double = v11
    let v37: [Double] = [v15, v43, v65]
    let v52: Double = v37[2]
    let v61: Double = v37[0]
    var v23: [Double] = v37
    v23[1] = v65
    let v96: Double = v37[2]
    v23[2] = v13
    let v31: Double = v37[2]
    v23[0] = v28
    v23[2] = v2
    v23[0] = v17
    let v84: Double = v52 - v32
    v23[0] = v19
    v23[0] = v39
    v23[1] = v0
    var v51: [Double] = v23
    let v50: [Double] = [v43, v0, v39, v5, v22, v84, v3]
    v20 = v65
    v51[1] = v31
    v23[1] = v20
    let v106: Double = v50[3]
    v23[1] = v3
    let v40: Double = v51[0]
    var v58: [Double] = v37
    var v101: [Double] = v58
    v51[0] = v106
    v23[1] = v61
    v23[0] = v40
    var v150: [Double] = v58
    var v191: [Double] = v37
    let v141: [[Double]] = [v150, v101, v23, v51, v191]
    let v209: [Double] = v141[0]
    let v119: Double = v209[2]
    v150[0] = v96
    return v119
  }
  @inline(never)
  func f0(_ v0: s9, _ v1: [[s1]], _ v2: Double) -> Double {
    let v4: Double = f87(v2)
    return v4
  }
  func benchmark() {
    let v0: s9 = s9(p0: [s5(p0: [s3(p0: [[s2(p0: [[s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0]])]], p1: s1(p0: s0(p0: [[4.0], [5.0]], p1: [[6.0], [7.0]]), p1: [s0(p0: [[8.0], [9.0]], p1: [[10.0], [11.0]])]))]], p1: s1(p0: s0(p0: [[12.0], [13.0]], p1: [[14.0], [15.0]]), p1: [s0(p0: [[16.0], [17.0]], p1: [[18.0], [19.0]])])), s3(p0: [[s2(p0: [[s0(p0: [[20.0], [21.0]], p1: [[22.0], [23.0]])]], p1: s1(p0: s0(p0: [[24.0], [25.0]], p1: [[26.0], [27.0]]), p1: [s0(p0: [[28.0], [29.0]], p1: [[30.0], [31.0]])]))]], p1: s1(p0: s0(p0: [[32.0], [33.0]], p1: [[34.0], [35.0]]), p1: [s0(p0: [[36.0], [37.0]], p1: [[38.0], [39.0]])]))], p1: [s1(p0: s0(p0: [[40.0], [41.0]], p1: [[42.0], [43.0]]), p1: [s0(p0: [[44.0], [45.0]], p1: [[46.0], [47.0]])]), s1(p0: s0(p0: [[48.0], [49.0]], p1: [[50.0], [51.0]]), p1: [s0(p0: [[52.0], [53.0]], p1: [[54.0], [55.0]])])]), s5(p0: [s3(p0: [[s2(p0: [[s0(p0: [[56.0], [57.0]], p1: [[58.0], [59.0]])]], p1: s1(p0: s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0]]), p1: [s0(p0: [[64.0], [65.0]], p1: [[66.0], [67.0]])]))]], p1: s1(p0: s0(p0: [[68.0], [69.0]], p1: [[70.0], [71.0]]), p1: [s0(p0: [[72.0], [73.0]], p1: [[74.0], [75.0]])])), s3(p0: [[s2(p0: [[s0(p0: [[76.0], [77.0]], p1: [[78.0], [79.0]])]], p1: s1(p0: s0(p0: [[80.0], [81.0]], p1: [[82.0], [83.0]]), p1: [s0(p0: [[84.0], [85.0]], p1: [[86.0], [87.0]])]))]], p1: s1(p0: s0(p0: [[88.0], [89.0]], p1: [[90.0], [91.0]]), p1: [s0(p0: [[92.0], [93.0]], p1: [[94.0], [95.0]])]))], p1: [s1(p0: s0(p0: [[96.0], [97.0]], p1: [[98.0], [99.0]]), p1: [s0(p0: [[100.0], [101.0]], p1: [[102.0], [103.0]])]), s1(p0: s0(p0: [[104.0], [105.0]], p1: [[106.0], [107.0]]), p1: [s0(p0: [[108.0], [109.0]], p1: [[110.0], [111.0]])])])], p1: s7(p0: s5(p0: [s3(p0: [[s2(p0: [[s0(p0: [[112.0], [113.0]], p1: [[114.0], [115.0]])]], p1: s1(p0: s0(p0: [[116.0], [117.0]], p1: [[118.0], [119.0]]), p1: [s0(p0: [[120.0], [121.0]], p1: [[122.0], [123.0]])]))]], p1: s1(p0: s0(p0: [[124.0], [125.0]], p1: [[126.0], [127.0]]), p1: [s0(p0: [[128.0], [129.0]], p1: [[130.0], [131.0]])])), s3(p0: [[s2(p0: [[s0(p0: [[132.0], [133.0]], p1: [[134.0], [135.0]])]], p1: s1(p0: s0(p0: [[136.0], [137.0]], p1: [[138.0], [139.0]]), p1: [s0(p0: [[140.0], [141.0]], p1: [[142.0], [143.0]])]))]], p1: s1(p0: s0(p0: [[144.0], [145.0]], p1: [[146.0], [147.0]]), p1: [s0(p0: [[148.0], [149.0]], p1: [[150.0], [151.0]])]))], p1: [s1(p0: s0(p0: [[152.0], [153.0]], p1: [[154.0], [155.0]]), p1: [s0(p0: [[156.0], [157.0]], p1: [[158.0], [159.0]])]), s1(p0: s0(p0: [[160.0], [161.0]], p1: [[162.0], [163.0]]), p1: [s0(p0: [[164.0], [165.0]], p1: [[166.0], [167.0]])])]), p1: [s4(p0: s1(p0: s0(p0: [[168.0], [169.0]], p1: [[170.0], [171.0]]), p1: [s0(p0: [[172.0], [173.0]], p1: [[174.0], [175.0]])]), p1: s1(p0: s0(p0: [[176.0], [177.0]], p1: [[178.0], [179.0]]), p1: [s0(p0: [[180.0], [181.0]], p1: [[182.0], [183.0]])])), s4(p0: s1(p0: s0(p0: [[184.0], [185.0]], p1: [[186.0], [187.0]]), p1: [s0(p0: [[188.0], [189.0]], p1: [[190.0], [191.0]])]), p1: s1(p0: s0(p0: [[192.0], [193.0]], p1: [[194.0], [195.0]]), p1: [s0(p0: [[196.0], [197.0]], p1: [[198.0], [199.0]])])), s4(p0: s1(p0: s0(p0: [[200.0], [201.0]], p1: [[202.0], [203.0]]), p1: [s0(p0: [[204.0], [205.0]], p1: [[206.0], [207.0]])]), p1: s1(p0: s0(p0: [[208.0], [209.0]], p1: [[210.0], [211.0]]), p1: [s0(p0: [[212.0], [213.0]], p1: [[214.0], [215.0]])]))]))
    let v1: [[s1]] = [[s1(p0: s0(p0: [[216.0], [217.0]], p1: [[218.0], [219.0]]), p1: [s0(p0: [[220.0], [221.0]], p1: [[222.0], [223.0]])])], [s1(p0: s0(p0: [[224.0], [225.0]], p1: [[226.0], [227.0]]), p1: [s0(p0: [[228.0], [229.0]], p1: [[230.0], [231.0]])])]]
    let v2: Double = 232.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 232.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
