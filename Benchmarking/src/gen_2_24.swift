  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
  }
  struct s1 {
    var p0: s0
  }
  struct s2 {
    var p0: s1
    var p1: s0
  }
  struct s4 {
    var p0: [[s2]]
    var p1: [s0]
  }
  struct s5 {
    var p0: s0
    var p1: s1
  }
  struct s7 {
    var p0: [s4]
    var p1: [s4]
  }
  struct s8 {
    var p0: [[s7]]
    var p1: s5
  }
  func f28(_ v0: Double, _ v1: s0) -> Double {
    let v3: [[Double]] = v1.p3
    let v7: [Double] = v3[2]
    let v9: Double = v7[0]
    var v17: Double = v9
    var v23: [Double] = v7
    v23[0] = v17
    let v37: Double = v23[0]
    return v37
  }
  @inline(never)
  func f0(_ v0: [s8], _ v1: [s1], _ v2: s5, _ v3: Double) -> Double {
    let v12: s0 = v2.p0
    let v15: [[Double]] = v12.p1
    let v8: s0 = v2.p0
    let v5: [Double] = v15[2]
    let v30: [Double] = v15[0]
    var v19: [[Double]] = v15
    var v73: [[Double]] = v19
    v73[1] = v5
    v73[1] = v30
    let v50: Double = v30[0]
    let v55: Double = f28(v50, v8)
    let v39: [[Double]] = v12.p0
    v73[1] = v30
    let v38: [Double] = v19[1]
    let v45: s0 = s0(p0: v39, p1: v15, p2: v73, p3: v73)
    v19[0] = v30
    v19[2] = v38
    let v169: Double = f28(v55, v45)
    return v169
  }
  func benchmark() {
    let v0: [s8] = [s8(p0: [[s7(p0: [s4(p0: [[s2(p0: s1(p0: s0(p0: [[0.0]], p1: [[1.0], [2.0], [3.0]], p2: [[4.0], [5.0], [6.0]], p3: [[7.0], [8.0], [9.0]])), p1: s0(p0: [[10.0]], p1: [[11.0], [12.0], [13.0]], p2: [[14.0], [15.0], [16.0]], p3: [[17.0], [18.0], [19.0]]))], [s2(p0: s1(p0: s0(p0: [[20.0]], p1: [[21.0], [22.0], [23.0]], p2: [[24.0], [25.0], [26.0]], p3: [[27.0], [28.0], [29.0]])), p1: s0(p0: [[30.0]], p1: [[31.0], [32.0], [33.0]], p2: [[34.0], [35.0], [36.0]], p3: [[37.0], [38.0], [39.0]]))], [s2(p0: s1(p0: s0(p0: [[40.0]], p1: [[41.0], [42.0], [43.0]], p2: [[44.0], [45.0], [46.0]], p3: [[47.0], [48.0], [49.0]])), p1: s0(p0: [[50.0]], p1: [[51.0], [52.0], [53.0]], p2: [[54.0], [55.0], [56.0]], p3: [[57.0], [58.0], [59.0]]))]], p1: [s0(p0: [[60.0]], p1: [[61.0], [62.0], [63.0]], p2: [[64.0], [65.0], [66.0]], p3: [[67.0], [68.0], [69.0]]), s0(p0: [[70.0]], p1: [[71.0], [72.0], [73.0]], p2: [[74.0], [75.0], [76.0]], p3: [[77.0], [78.0], [79.0]])])], p1: [s4(p0: [[s2(p0: s1(p0: s0(p0: [[80.0]], p1: [[81.0], [82.0], [83.0]], p2: [[84.0], [85.0], [86.0]], p3: [[87.0], [88.0], [89.0]])), p1: s0(p0: [[90.0]], p1: [[91.0], [92.0], [93.0]], p2: [[94.0], [95.0], [96.0]], p3: [[97.0], [98.0], [99.0]]))], [s2(p0: s1(p0: s0(p0: [[100.0]], p1: [[101.0], [102.0], [103.0]], p2: [[104.0], [105.0], [106.0]], p3: [[107.0], [108.0], [109.0]])), p1: s0(p0: [[110.0]], p1: [[111.0], [112.0], [113.0]], p2: [[114.0], [115.0], [116.0]], p3: [[117.0], [118.0], [119.0]]))], [s2(p0: s1(p0: s0(p0: [[120.0]], p1: [[121.0], [122.0], [123.0]], p2: [[124.0], [125.0], [126.0]], p3: [[127.0], [128.0], [129.0]])), p1: s0(p0: [[130.0]], p1: [[131.0], [132.0], [133.0]], p2: [[134.0], [135.0], [136.0]], p3: [[137.0], [138.0], [139.0]]))]], p1: [s0(p0: [[140.0]], p1: [[141.0], [142.0], [143.0]], p2: [[144.0], [145.0], [146.0]], p3: [[147.0], [148.0], [149.0]]), s0(p0: [[150.0]], p1: [[151.0], [152.0], [153.0]], p2: [[154.0], [155.0], [156.0]], p3: [[157.0], [158.0], [159.0]])]), s4(p0: [[s2(p0: s1(p0: s0(p0: [[160.0]], p1: [[161.0], [162.0], [163.0]], p2: [[164.0], [165.0], [166.0]], p3: [[167.0], [168.0], [169.0]])), p1: s0(p0: [[170.0]], p1: [[171.0], [172.0], [173.0]], p2: [[174.0], [175.0], [176.0]], p3: [[177.0], [178.0], [179.0]]))], [s2(p0: s1(p0: s0(p0: [[180.0]], p1: [[181.0], [182.0], [183.0]], p2: [[184.0], [185.0], [186.0]], p3: [[187.0], [188.0], [189.0]])), p1: s0(p0: [[190.0]], p1: [[191.0], [192.0], [193.0]], p2: [[194.0], [195.0], [196.0]], p3: [[197.0], [198.0], [199.0]]))], [s2(p0: s1(p0: s0(p0: [[200.0]], p1: [[201.0], [202.0], [203.0]], p2: [[204.0], [205.0], [206.0]], p3: [[207.0], [208.0], [209.0]])), p1: s0(p0: [[210.0]], p1: [[211.0], [212.0], [213.0]], p2: [[214.0], [215.0], [216.0]], p3: [[217.0], [218.0], [219.0]]))]], p1: [s0(p0: [[220.0]], p1: [[221.0], [222.0], [223.0]], p2: [[224.0], [225.0], [226.0]], p3: [[227.0], [228.0], [229.0]]), s0(p0: [[230.0]], p1: [[231.0], [232.0], [233.0]], p2: [[234.0], [235.0], [236.0]], p3: [[237.0], [238.0], [239.0]])])])], [s7(p0: [s4(p0: [[s2(p0: s1(p0: s0(p0: [[240.0]], p1: [[241.0], [242.0], [243.0]], p2: [[244.0], [245.0], [246.0]], p3: [[247.0], [248.0], [249.0]])), p1: s0(p0: [[250.0]], p1: [[251.0], [252.0], [253.0]], p2: [[254.0], [255.0], [256.0]], p3: [[257.0], [258.0], [259.0]]))], [s2(p0: s1(p0: s0(p0: [[260.0]], p1: [[261.0], [262.0], [263.0]], p2: [[264.0], [265.0], [266.0]], p3: [[267.0], [268.0], [269.0]])), p1: s0(p0: [[270.0]], p1: [[271.0], [272.0], [273.0]], p2: [[274.0], [275.0], [276.0]], p3: [[277.0], [278.0], [279.0]]))], [s2(p0: s1(p0: s0(p0: [[280.0]], p1: [[281.0], [282.0], [283.0]], p2: [[284.0], [285.0], [286.0]], p3: [[287.0], [288.0], [289.0]])), p1: s0(p0: [[290.0]], p1: [[291.0], [292.0], [293.0]], p2: [[294.0], [295.0], [296.0]], p3: [[297.0], [298.0], [299.0]]))]], p1: [s0(p0: [[300.0]], p1: [[301.0], [302.0], [303.0]], p2: [[304.0], [305.0], [306.0]], p3: [[307.0], [308.0], [309.0]]), s0(p0: [[310.0]], p1: [[311.0], [312.0], [313.0]], p2: [[314.0], [315.0], [316.0]], p3: [[317.0], [318.0], [319.0]])])], p1: [s4(p0: [[s2(p0: s1(p0: s0(p0: [[320.0]], p1: [[321.0], [322.0], [323.0]], p2: [[324.0], [325.0], [326.0]], p3: [[327.0], [328.0], [329.0]])), p1: s0(p0: [[330.0]], p1: [[331.0], [332.0], [333.0]], p2: [[334.0], [335.0], [336.0]], p3: [[337.0], [338.0], [339.0]]))], [s2(p0: s1(p0: s0(p0: [[340.0]], p1: [[341.0], [342.0], [343.0]], p2: [[344.0], [345.0], [346.0]], p3: [[347.0], [348.0], [349.0]])), p1: s0(p0: [[350.0]], p1: [[351.0], [352.0], [353.0]], p2: [[354.0], [355.0], [356.0]], p3: [[357.0], [358.0], [359.0]]))], [s2(p0: s1(p0: s0(p0: [[360.0]], p1: [[361.0], [362.0], [363.0]], p2: [[364.0], [365.0], [366.0]], p3: [[367.0], [368.0], [369.0]])), p1: s0(p0: [[370.0]], p1: [[371.0], [372.0], [373.0]], p2: [[374.0], [375.0], [376.0]], p3: [[377.0], [378.0], [379.0]]))]], p1: [s0(p0: [[380.0]], p1: [[381.0], [382.0], [383.0]], p2: [[384.0], [385.0], [386.0]], p3: [[387.0], [388.0], [389.0]]), s0(p0: [[390.0]], p1: [[391.0], [392.0], [393.0]], p2: [[394.0], [395.0], [396.0]], p3: [[397.0], [398.0], [399.0]])]), s4(p0: [[s2(p0: s1(p0: s0(p0: [[400.0]], p1: [[401.0], [402.0], [403.0]], p2: [[404.0], [405.0], [406.0]], p3: [[407.0], [408.0], [409.0]])), p1: s0(p0: [[410.0]], p1: [[411.0], [412.0], [413.0]], p2: [[414.0], [415.0], [416.0]], p3: [[417.0], [418.0], [419.0]]))], [s2(p0: s1(p0: s0(p0: [[420.0]], p1: [[421.0], [422.0], [423.0]], p2: [[424.0], [425.0], [426.0]], p3: [[427.0], [428.0], [429.0]])), p1: s0(p0: [[430.0]], p1: [[431.0], [432.0], [433.0]], p2: [[434.0], [435.0], [436.0]], p3: [[437.0], [438.0], [439.0]]))], [s2(p0: s1(p0: s0(p0: [[440.0]], p1: [[441.0], [442.0], [443.0]], p2: [[444.0], [445.0], [446.0]], p3: [[447.0], [448.0], [449.0]])), p1: s0(p0: [[450.0]], p1: [[451.0], [452.0], [453.0]], p2: [[454.0], [455.0], [456.0]], p3: [[457.0], [458.0], [459.0]]))]], p1: [s0(p0: [[460.0]], p1: [[461.0], [462.0], [463.0]], p2: [[464.0], [465.0], [466.0]], p3: [[467.0], [468.0], [469.0]]), s0(p0: [[470.0]], p1: [[471.0], [472.0], [473.0]], p2: [[474.0], [475.0], [476.0]], p3: [[477.0], [478.0], [479.0]])])])], [s7(p0: [s4(p0: [[s2(p0: s1(p0: s0(p0: [[480.0]], p1: [[481.0], [482.0], [483.0]], p2: [[484.0], [485.0], [486.0]], p3: [[487.0], [488.0], [489.0]])), p1: s0(p0: [[490.0]], p1: [[491.0], [492.0], [493.0]], p2: [[494.0], [495.0], [496.0]], p3: [[497.0], [498.0], [499.0]]))], [s2(p0: s1(p0: s0(p0: [[500.0]], p1: [[501.0], [502.0], [503.0]], p2: [[504.0], [505.0], [506.0]], p3: [[507.0], [508.0], [509.0]])), p1: s0(p0: [[510.0]], p1: [[511.0], [512.0], [513.0]], p2: [[514.0], [515.0], [516.0]], p3: [[517.0], [518.0], [519.0]]))], [s2(p0: s1(p0: s0(p0: [[520.0]], p1: [[521.0], [522.0], [523.0]], p2: [[524.0], [525.0], [526.0]], p3: [[527.0], [528.0], [529.0]])), p1: s0(p0: [[530.0]], p1: [[531.0], [532.0], [533.0]], p2: [[534.0], [535.0], [536.0]], p3: [[537.0], [538.0], [539.0]]))]], p1: [s0(p0: [[540.0]], p1: [[541.0], [542.0], [543.0]], p2: [[544.0], [545.0], [546.0]], p3: [[547.0], [548.0], [549.0]]), s0(p0: [[550.0]], p1: [[551.0], [552.0], [553.0]], p2: [[554.0], [555.0], [556.0]], p3: [[557.0], [558.0], [559.0]])])], p1: [s4(p0: [[s2(p0: s1(p0: s0(p0: [[560.0]], p1: [[561.0], [562.0], [563.0]], p2: [[564.0], [565.0], [566.0]], p3: [[567.0], [568.0], [569.0]])), p1: s0(p0: [[570.0]], p1: [[571.0], [572.0], [573.0]], p2: [[574.0], [575.0], [576.0]], p3: [[577.0], [578.0], [579.0]]))], [s2(p0: s1(p0: s0(p0: [[580.0]], p1: [[581.0], [582.0], [583.0]], p2: [[584.0], [585.0], [586.0]], p3: [[587.0], [588.0], [589.0]])), p1: s0(p0: [[590.0]], p1: [[591.0], [592.0], [593.0]], p2: [[594.0], [595.0], [596.0]], p3: [[597.0], [598.0], [599.0]]))], [s2(p0: s1(p0: s0(p0: [[600.0]], p1: [[601.0], [602.0], [603.0]], p2: [[604.0], [605.0], [606.0]], p3: [[607.0], [608.0], [609.0]])), p1: s0(p0: [[610.0]], p1: [[611.0], [612.0], [613.0]], p2: [[614.0], [615.0], [616.0]], p3: [[617.0], [618.0], [619.0]]))]], p1: [s0(p0: [[620.0]], p1: [[621.0], [622.0], [623.0]], p2: [[624.0], [625.0], [626.0]], p3: [[627.0], [628.0], [629.0]]), s0(p0: [[630.0]], p1: [[631.0], [632.0], [633.0]], p2: [[634.0], [635.0], [636.0]], p3: [[637.0], [638.0], [639.0]])]), s4(p0: [[s2(p0: s1(p0: s0(p0: [[640.0]], p1: [[641.0], [642.0], [643.0]], p2: [[644.0], [645.0], [646.0]], p3: [[647.0], [648.0], [649.0]])), p1: s0(p0: [[650.0]], p1: [[651.0], [652.0], [653.0]], p2: [[654.0], [655.0], [656.0]], p3: [[657.0], [658.0], [659.0]]))], [s2(p0: s1(p0: s0(p0: [[660.0]], p1: [[661.0], [662.0], [663.0]], p2: [[664.0], [665.0], [666.0]], p3: [[667.0], [668.0], [669.0]])), p1: s0(p0: [[670.0]], p1: [[671.0], [672.0], [673.0]], p2: [[674.0], [675.0], [676.0]], p3: [[677.0], [678.0], [679.0]]))], [s2(p0: s1(p0: s0(p0: [[680.0]], p1: [[681.0], [682.0], [683.0]], p2: [[684.0], [685.0], [686.0]], p3: [[687.0], [688.0], [689.0]])), p1: s0(p0: [[690.0]], p1: [[691.0], [692.0], [693.0]], p2: [[694.0], [695.0], [696.0]], p3: [[697.0], [698.0], [699.0]]))]], p1: [s0(p0: [[700.0]], p1: [[701.0], [702.0], [703.0]], p2: [[704.0], [705.0], [706.0]], p3: [[707.0], [708.0], [709.0]]), s0(p0: [[710.0]], p1: [[711.0], [712.0], [713.0]], p2: [[714.0], [715.0], [716.0]], p3: [[717.0], [718.0], [719.0]])])])]], p1: s5(p0: s0(p0: [[720.0]], p1: [[721.0], [722.0], [723.0]], p2: [[724.0], [725.0], [726.0]], p3: [[727.0], [728.0], [729.0]]), p1: s1(p0: s0(p0: [[730.0]], p1: [[731.0], [732.0], [733.0]], p2: [[734.0], [735.0], [736.0]], p3: [[737.0], [738.0], [739.0]]))))]
    let v1: [s1] = [s1(p0: s0(p0: [[740.0]], p1: [[741.0], [742.0], [743.0]], p2: [[744.0], [745.0], [746.0]], p3: [[747.0], [748.0], [749.0]]))]
    let v2: s5 = s5(p0: s0(p0: [[750.0]], p1: [[751.0], [752.0], [753.0]], p2: [[754.0], [755.0], [756.0]], p3: [[757.0], [758.0], [759.0]]), p1: s1(p0: s0(p0: [[760.0]], p1: [[761.0], [762.0], [763.0]], p2: [[764.0], [765.0], [766.0]], p3: [[767.0], [768.0], [769.0]])))
    let v3: Double = 770.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 770.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
