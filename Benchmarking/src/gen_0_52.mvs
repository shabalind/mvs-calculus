  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: Float
  } in
  let noinline_f0: ([s1], Float) -> Float = (v0: [s1], v1: Float) -> Float {
    let v5: s1 = v0[0] in
    let v4: s1 = v0[2] in
    let v8: Float = v4.p1 in
    let v3: s1 = v0[0] in
    let v7: s0 = v3.p0 in
    let v28: [[Float]] = v7.p0 in
    let v29: [Float] = v28[1] in
    let v23: [[Float]] = v7.p0 in
    let v33: Float = v5.p1 in
    let v26: Float = v1 / v8 in
    var v35: [Float] = v29 in
    let v42: Float = v26 + v1 in
    let v19: Float = v35[0] in
    v35[0] = v33 in
    let v30: [Float] = v23[0] in
    var v43: [Float] = v29 in
    let v46: Float = v30[0] in
    var v31: Float = v42 in
    v35[0] = v42 in
    v31 = v46 in
    v43[0] = v19 in
    v43[0] = v46 in
    let v92: Float = v35[0] in
    v35[0] = v19 in
    v35[0] = v92 in
    let v82: Float = v43[0] in
    v43[0] = v19 in
    v35[0] = v31 in
    v82
  } in
  fun loop(i: Int, v0: [s1], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1(s0([[0.0], [1.0]], [[2.0], [3.0]], [[4.0], [5.0]]), 6.0), s1(s0([[7.0], [8.0]], [[9.0], [10.0]], [[11.0], [12.0]]), 13.0), s1(s0([[14.0], [15.0]], [[16.0], [17.0]], [[18.0], [19.0]]), 20.0)] in
    let v1: Float = 21.0 in
    let initialResult: Float = 21.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()