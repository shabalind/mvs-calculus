  struct s0 {
    var p0: [Float]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s1
    var p1: s1
    var p2: [[s0]]
    var p3: [s1]
    var p4: s1
  } in
  let noinline_f0: (s2, s2, Float) -> Float = (v0: s2, v1: s2, v2: Float) -> Float {
    let v7: [Float] = [v2, v2, v2, v2, v2, v2] in
    let v4: s1 = v0.p0 in
    let v8: s0 = v4.p0 in
    let v9: Float = v7[2] in
    let v12: [Float] = v8.p0 in
    let v3: Float = v12[0] in
    let v11: Float = v12[0] in
    var v15: [Float] = v7 in
    v15[3] = v3 in
    let v20: Float = v12[0] in
    let v17: Float = v12[0] in
    v15[1] = v20 in
    v15[2] = v9 in
    var v21: [Float] = v12 in
    let v43: Float = v21[0] in
    v15[5] = v11 in
    let v102: Float = v15[2] in
    let v82: Float = v102 - v17 in
    v15[3] = v43 in
    v82
  } in
  fun loop(i: Int, v0: s2, v1: s2, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(s1(s0([0.0], [[1.0]]), s0([2.0], [[3.0]])), s1(s0([4.0], [[5.0]]), s0([6.0], [[7.0]])), [[s0([8.0], [[9.0]])], [s0([10.0], [[11.0]])], [s0([12.0], [[13.0]])]], [s1(s0([14.0], [[15.0]]), s0([16.0], [[17.0]])), s1(s0([18.0], [[19.0]]), s0([20.0], [[21.0]]))], s1(s0([22.0], [[23.0]]), s0([24.0], [[25.0]]))) in
    let v1: s2 = s2(s1(s0([26.0], [[27.0]]), s0([28.0], [[29.0]])), s1(s0([30.0], [[31.0]]), s0([32.0], [[33.0]])), [[s0([34.0], [[35.0]])], [s0([36.0], [[37.0]])], [s0([38.0], [[39.0]])]], [s1(s0([40.0], [[41.0]]), s0([42.0], [[43.0]])), s1(s0([44.0], [[45.0]]), s0([46.0], [[47.0]]))], s1(s0([48.0], [[49.0]]), s0([50.0], [[51.0]]))) in
    let v2: Float = 52.0 in
    let initialResult: Float = 52.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()