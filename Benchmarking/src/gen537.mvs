  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
  } in
  struct s2 {
    var p0: s0
    var p1: s0
  } in
  struct s6 {
    var p0: s1
    var p1: s2
  } in
  let f56: (Float) -> Float = (v0: Float) -> Float {
    var v7: Float = v0 in
    var v3: Float = v7 in
    var v1: Float = v3 in
    var v6: Float = v3 in
    var v8: Float = v7 in
    var v9: Float = v1 in
    var v4: Float = v8 in
    var v22: Float = v1 in
    let v13: [Float] = [v6] in
    var v34: [Float] = v13 in
    let v18: Float = v13[0] in
    let v19: Float = v34[0] in
    v34[0] = v18 in
    let v16: Float = v34[0] in
    var v24: Float = v9 in
    v34[0] = v24 in
    v34[0] = v18 in
    var v81: Float = v4 in
    let v33: [Float] = [v1, v9, v22, v22, v22, v19] in
    var v45: [Float] = v33 in
    v34[0] = v81 in
    v34[0] = v16 in
    v45[4] = v6 in
    let v38: Float = v45[1] in
    v38
  } in
  let noinline_f0: ([s6], Float) -> Float = (v0: [s6], v1: Float) -> Float {
    let v8: Float = f56(v1) in
    let v2: Float = f56(v8) in
    var v17: Float = v2 in
    v17
  } in
  fun loop(i: Int, v0: [s6], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s6] = [s6(s1([s0([[0.0]], [[1.0]])]), s2(s0([[2.0]], [[3.0]]), s0([[4.0]], [[5.0]]))), s6(s1([s0([[6.0]], [[7.0]])]), s2(s0([[8.0]], [[9.0]]), s0([[10.0]], [[11.0]])))] in
    let v1: Float = 12.0 in
    let initialResult: Float = 12.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()