  struct s0 {
    var p0: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s2 {
    var p0: s0
    var p1: s1
  } in
  struct s4 {
    var p0: [s1]
    var p1: s1
  } in
  struct s8 {
    var p0: [s0]
    var p1: [s4]
  } in
  let f32: (Float) -> Float = (v0: Float) -> Float {
    var v2: Float = v0 in
    var v1: Float = v2 in
    var v10: Float = v0 in
    var v7: Float = v0 in
    var v5: Float = v1 in
    let v11: [Float] = [v5, v10, v7] in
    var v9: Float = v7 in
    var v12: [Float] = v11 in
    var v18: Float = v1 in
    let v24: [[Float]] = [v11, v12, v11, v11] in
    let v32: [Float] = v24[3] in
    let v36: [Float] = v24[2] in
    let v30: [Float] = v24[2] in
    v12[0] = v10 in
    var v25: [[Float]] = v24 in
    var v16: [Float] = v32 in
    var v27: [Float] = v30 in
    let v17: [Float] = v25[3] in
    var v19: [Float] = v27 in
    let v48: [Float] = v24[3] in
    let v31: Float = v36[2] in
    let v54: [Float] = v24[2] in
    v12[2] = v31 in
    let v141: Float = v36[0] in
    var v45: Float = v9 in
    var v34: [[Float]] = v25 in
    v25[0] = v17 in
    var v33: [[Float]] = v34 in
    var v50: [Float] = v19 in
    var v79: [Float] = v54 in
    v12[1] = v141 in
    let v40: [Float] = v33[0] in
    v79[2] = v45 in
    v19[2] = v141 in
    v25[2] = v48 in
    v27[1] = v45 in
    v34[1] = v79 in
    v33[1] = v36 in
    let v95: Float = v40[2] in
    v79[2] = v18 in
    v34[3] = v50 in
    v25[0] = v16 in
    v95
  } in
  let f16: (Float) -> Float = (v0: Float) -> Float {
    var v1: Float = v0 in
    var v7: Float = v1 in
    let v3: Float = f32(v7) in
    var v10: Float = v3 in
    var v9: Float = v10 in
    let v23: Float = f32(v9) in
    var v37: Float = v10 in
    var v55: Float = v37 in
    let v102: Float = v23 / v55 in
    v102
  } in
  let noinline_f0: (s2, [s8], Float) -> Float = (v0: s2, v1: [s8], v2: Float) -> Float {
    let v7: Float = f32(v2) in
    let v9: Float = f32(v7) in
    var v14: Float = v9 in
    let v104: Float = v14 + v2 in
    let v76: Float = f16(v104) in
    v76
  } in
  fun loop(i: Int, v0: s2, v1: [s8], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(s0([[0.0], [1.0]]), s1([s0([[2.0], [3.0]]), s0([[4.0], [5.0]]), s0([[6.0], [7.0]])], s0([[8.0], [9.0]]))) in
    let v1: [s8] = [s8([s0([[10.0], [11.0]]), s0([[12.0], [13.0]])], [s4([s1([s0([[14.0], [15.0]]), s0([[16.0], [17.0]]), s0([[18.0], [19.0]])], s0([[20.0], [21.0]]))], s1([s0([[22.0], [23.0]]), s0([[24.0], [25.0]]), s0([[26.0], [27.0]])], s0([[28.0], [29.0]]))), s4([s1([s0([[30.0], [31.0]]), s0([[32.0], [33.0]]), s0([[34.0], [35.0]])], s0([[36.0], [37.0]]))], s1([s0([[38.0], [39.0]]), s0([[40.0], [41.0]]), s0([[42.0], [43.0]])], s0([[44.0], [45.0]]))), s4([s1([s0([[46.0], [47.0]]), s0([[48.0], [49.0]]), s0([[50.0], [51.0]])], s0([[52.0], [53.0]]))], s1([s0([[54.0], [55.0]]), s0([[56.0], [57.0]]), s0([[58.0], [59.0]])], s0([[60.0], [61.0]])))]), s8([s0([[62.0], [63.0]]), s0([[64.0], [65.0]])], [s4([s1([s0([[66.0], [67.0]]), s0([[68.0], [69.0]]), s0([[70.0], [71.0]])], s0([[72.0], [73.0]]))], s1([s0([[74.0], [75.0]]), s0([[76.0], [77.0]]), s0([[78.0], [79.0]])], s0([[80.0], [81.0]]))), s4([s1([s0([[82.0], [83.0]]), s0([[84.0], [85.0]]), s0([[86.0], [87.0]])], s0([[88.0], [89.0]]))], s1([s0([[90.0], [91.0]]), s0([[92.0], [93.0]]), s0([[94.0], [95.0]])], s0([[96.0], [97.0]]))), s4([s1([s0([[98.0], [99.0]]), s0([[100.0], [101.0]]), s0([[102.0], [103.0]])], s0([[104.0], [105.0]]))], s1([s0([[106.0], [107.0]]), s0([[108.0], [109.0]]), s0([[110.0], [111.0]])], s0([[112.0], [113.0]])))])] in
    let v2: Float = 114.0 in
    let initialResult: Float = 114.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()