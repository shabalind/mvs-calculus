  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: ([s0], [s0], Float) -> Float = (v0: [s0], v1: [s0], v2: Float) -> Float {
    var v3: Float = v2 in
    var v8: [s0] = v1 in
    let v7: s0 = v0[1] in
    v8[1] = v7 in
    v8[0] = v7 in
    let v4: Float = v2 * v3 in
    let v9: s0 = v8[1] in
    v8[1] = v7 in
    v8[2] = v7 in
    let v15: s0 = v0[1] in
    var v35: Float = v2 in
    let v21: [[Float]] = v9.p1 in
    let v27: [Float] = v21[1] in
    let v33: [[Float]] = v15.p1 in
    v3 = v2 in
    var v63: Float = v2 in
    var v30: [Float] = v27 in
    let v40: [Float] = v33[0] in
    v30[0] = v2 in
    let v67: Float = v4 / v63 in
    let v28: Float = v40[0] in
    v30[0] = v67 in
    var v73: [Float] = v40 in
    v73 = v40 in
    v73[0] = v3 in
    let v80: Float = v30[0] in
    let v85: Float = v27[0] in
    var v88: Float = v80 in
    v73[0] = v35 in
    let v86: Float = v73[0] in
    let v151: [Float] = [v2, v88, v28, v86, v4] in
    let v119: Float = v151[2] in
    var v259: Float = v119 in
    v30[0] = v85 in
    v259
  } in
  fun loop(i: Int, v0: [s0], v1: [s0], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0]], [[2.0], [3.0]]), s0([[4.0], [5.0]], [[6.0], [7.0]])] in
    let v1: [s0] = [s0([[8.0], [9.0]], [[10.0], [11.0]]), s0([[12.0], [13.0]], [[14.0], [15.0]]), s0([[16.0], [17.0]], [[18.0], [19.0]])] in
    let v2: Float = 20.0 in
    let initialResult: Float = 20.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()