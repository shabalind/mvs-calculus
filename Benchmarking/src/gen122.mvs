  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
    var p2: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: [s1]
  } in
  struct s3 {
    var p0: s2
    var p1: s1
  } in
  let f1: (s1, s3, s1) -> s1 = (v0: s1, v1: s3, v2: s1) -> s1 {
    var v6: s3 = v1 in
    let v7: [s3] = [v6, v1, v6] in
    v6.p1 = v2 in
    let v8: s3 = v7[1] in
    let v4: [s3] = [v1] in
    let v3: s1 = v8.p1 in
    let v13: s3 = v4[0] in
    let v17: s2 = v13.p0 in
    let v19: [s1] = v17.p1 in
    var v100: [s1] = v19 in
    v100[0] = v3 in
    let v138: s1 = v100[0] in
    v138
  } in
  let noinline_f0: ([s1], [s2], Float) -> Float = (v0: [s1], v1: [s2], v2: Float) -> Float {
    let v6: s2 = v1[1] in
    var v10: [s1] = v0 in
    let v7: s2 = v1[1] in
    var v4: s2 = v6 in
    let v13: [s1] = v4.p1 in
    let v12: s1 = v13[1] in
    let v8: s1 = v0[0] in
    v4.p1 = v13 in
    let v9: [[s0]] = v8.p1 in
    let v17: [s1] = v7.p1 in
    let v3: s0 = v8.p0 in
    v10[1] = v12 in
    let v15: s1 = v10[1] in
    var v19: s1 = v12 in
    let v22: [s1] = [v19, v15, v12] in
    v4.p1 = v17 in
    v10[0] = v15 in
    let v11: s3 = s3(v4, v15) in
    v4.p1 = v17 in
    v10[0] = v12 in
    v4.p1 = v22 in
    let v24: s1 = v17[2] in
    let v14: s1 = v11.p1 in
    let v16: s1 = f1(v24, v11, v19) in
    let v34: s1 = f1(v15, v11, v14) in
    v19.p1 = v9 in
    v19.p2 = v3 in
    v10[1] = v34 in
    v10[1] = v16 in
    let v39: [s0] = v4.p0 in
    let v73: s1 = f1(v19, v11, v19) in
    let v63: s0 = v39[1] in
    v10[1] = v73 in
    let v98: [[Float]] = v63.p1 in
    let v101: [Float] = v98[1] in
    v19.p2 = v3 in
    let v108: Float = v101[0] in
    v108
  } in
  fun loop(i: Int, v0: [s1], v1: [s2], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1(s0([[0.0]], [[1.0], [2.0]]), [[s0([[3.0]], [[4.0], [5.0]])]], s0([[6.0]], [[7.0], [8.0]])), s1(s0([[9.0]], [[10.0], [11.0]]), [[s0([[12.0]], [[13.0], [14.0]])]], s0([[15.0]], [[16.0], [17.0]]))] in
    let v1: [s2] = [s2([s0([[18.0]], [[19.0], [20.0]]), s0([[21.0]], [[22.0], [23.0]])], [s1(s0([[24.0]], [[25.0], [26.0]]), [[s0([[27.0]], [[28.0], [29.0]])]], s0([[30.0]], [[31.0], [32.0]])), s1(s0([[33.0]], [[34.0], [35.0]]), [[s0([[36.0]], [[37.0], [38.0]])]], s0([[39.0]], [[40.0], [41.0]])), s1(s0([[42.0]], [[43.0], [44.0]]), [[s0([[45.0]], [[46.0], [47.0]])]], s0([[48.0]], [[49.0], [50.0]]))]), s2([s0([[51.0]], [[52.0], [53.0]]), s0([[54.0]], [[55.0], [56.0]])], [s1(s0([[57.0]], [[58.0], [59.0]]), [[s0([[60.0]], [[61.0], [62.0]])]], s0([[63.0]], [[64.0], [65.0]])), s1(s0([[66.0]], [[67.0], [68.0]]), [[s0([[69.0]], [[70.0], [71.0]])]], s0([[72.0]], [[73.0], [74.0]])), s1(s0([[75.0]], [[76.0], [77.0]]), [[s0([[78.0]], [[79.0], [80.0]])]], s0([[81.0]], [[82.0], [83.0]]))])] in
    let v2: Float = 84.0 in
    let initialResult: Float = 84.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()