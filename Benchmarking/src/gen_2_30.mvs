  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  } in
  struct s2 {
    var p0: s0
    var p1: s1
  } in
  let noinline_f0: ([[s2]], Float) -> Float = (v0: [[s2]], v1: Float) -> Float {
    var v6: Float = v1 in
    let v5: Float = v6 + v6 in
    let v15: [Float] = [v5, v6, v6, v5] in
    var v9: Float = v5 in
    var v18: [Float] = v15 in
    var v21: [Float] = v18 in
    var v45: [Float] = v21 in
    v21[3] = v9 in
    v21 = v18 in
    v18 = v21 in
    var v69: [Float] = v45 in
    let v78: Float = v69[2] in
    v78
  } in
  fun loop(i: Int, v0: [[s2]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s2]] = [[s2(s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]), s1([[s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]])]], s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]])))], [s2(s0([[15.0], [16.0], [17.0]], [[18.0], [19.0]]), s1([[s0([[20.0], [21.0], [22.0]], [[23.0], [24.0]])]], s0([[25.0], [26.0], [27.0]], [[28.0], [29.0]])))]] in
    let v1: Float = 30.0 in
    let initialResult: Float = 30.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()