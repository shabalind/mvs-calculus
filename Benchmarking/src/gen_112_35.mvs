  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s2 {
    var p0: s0
    var p1: s0
  } in
  let f38: (Float) -> Float = (v0: Float) -> Float {
    var v6: Float = v0 in
    v6 = v0 in
    var v4: Float = v6 in
    var v3: Float = v4 in
    var v7: Float = v6 in
    var v1: Float = v3 in
    var v10: Float = v1 in
    let v8: Float = v6 * v10 in
    var v13: Float = v4 in
    v7 = v0 in
    var v18: Float = v8 in
    var v15: Float = v4 in
    var v2: Float = v1 in
    var v22: Float = v15 in
    var v12: Float = v1 in
    var v27: Float = v1 in
    var v30: Float = v8 in
    var v17: Float = v27 in
    var v31: Float = v13 in
    let v19: Float = v7 - v7 in
    v27 = v15 in
    var v40: Float = v12 in
    let v25: [Float] = [v40, v6, v10, v2, v30, v15] in
    var v120: [Float] = v25 in
    v120[2] = v18 in
    v120[1] = v1 in
    var v52: [Float] = v25 in
    v15 = v3 in
    var v70: [Float] = v52 in
    v70[4] = v31 in
    v52[5] = v17 in
    var v77: [Float] = v70 in
    v52[0] = v17 in
    v77 = v120 in
    v70[2] = v18 in
    v70[4] = v18 in
    v70[1] = v19 in
    let v145: Float = v77[4] in
    v70[5] = v22 in
    v145
  } in
  let noinline_f0: (s2, Float) -> Float = (v0: s2, v1: Float) -> Float {
    let v19: Float = f38(v1) in
    let v33: Float = v19 * v1 in
    let v51: Float = f38(v33) in
    v51
  } in
  fun loop(i: Int, v0: s2, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(s0([[0.0], [1.0], [2.0]], [[3.0]]), s0([[4.0], [5.0], [6.0]], [[7.0]])) in
    let v1: Float = 8.0 in
    let initialResult: Float = 8.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()