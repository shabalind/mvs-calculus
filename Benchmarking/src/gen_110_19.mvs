  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s3 {
    var p0: s0
    var p1: [[s0]]
  } in
  let noinline_f0: (s3, s0, Float) -> Float = (v0: s3, v1: s0, v2: Float) -> Float {
    let v5: [[s0]] = v0.p1 in
    let v3: [s0] = v5[0] in
    let v9: s0 = v3[0] in
    let v8: [[Float]] = v9.p1 in
    let v23: [Float] = v8[1] in
    let v20: Float = v23[0] in
    var v59: [Float] = v23 in
    let v34: Float = v59[0] in
    var v53: Float = v2 in
    let v54: Float = v20 + v34 in
    var v85: Float = v53 in
    v59[0] = v85 in
    v54
  } in
  fun loop(i: Int, v0: s3, v1: s0, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(s0([[0.0]], [[1.0], [2.0], [3.0]]), [[s0([[4.0]], [[5.0], [6.0], [7.0]])]]) in
    let v1: s0 = s0([[8.0]], [[9.0], [10.0], [11.0]]) in
    let v2: Float = 12.0 in
    let initialResult: Float = 12.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()