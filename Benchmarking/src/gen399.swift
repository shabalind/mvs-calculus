  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
    var p4: [[Double]]
    var p5: [[Double]]
    var p6: [[Double]]
    var p7: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: s0
  }
  struct s3 {
    var p0: s0
    var p1: s1
  }
  func f4(_ v0: s0) -> s0 {
    var v1: s0 = v0
    let v3: [[Double]] = v0.p7
    let v4: [Double] = v3[0]
    let v11: [Double] = v3[0]
    let v8: [[Double]] = v0.p0
    let v14: [[Double]] = v0.p3
    let v9: [[Double]] = v0.p3
    let v15: [[Double]] = v0.p5
    v1.p3 = v14
    var v10: [[Double]] = v8
    let v7: [[Double]] = v0.p5
    v10[0] = v4
    let v13: [[Double]] = v0.p1
    var v12: [[Double]] = v10
    v1.p5 = v7
    let v19: [Double] = v10[0]
    v10 = v8
    v1.p4 = v15
    let v22: [[Double]] = v1.p7
    v1.p5 = v9
    var v28: s0 = v0
    let v50: [[Double]] = v28.p5
    var v21: [[Double]] = v12
    v1.p1 = v13
    v28.p7 = v7
    let v16: [[Double]] = v0.p0
    let v54: [Double] = v50[1]
    let v20: [[Double]] = v1.p6
    v21[0] = v54
    v10 = v16
    let v27: [Double] = v21[0]
    v12[0] = v19
    v28.p2 = v22
    let v43: [Double] = v20[0]
    v28.p7 = v3
    v1.p3 = v50
    v12[0] = v11
    v10[0] = v43
    v28.p0 = v21
    let v88: [[Double]] = v1.p7
    v12[0] = v27
    v28.p4 = v88
    var v91: s0 = v28
    return v91
  }
  func f2(_ v0: s1) -> s1 {
    var v4: s1 = v0
    let v1: [s0] = v4.p0
    let v2: [s0] = v0.p0
    var v5: s1 = v0
    v4 = v0
    var v8: [s0] = v1
    let v9: [s0] = v4.p0
    v5.p0 = v8
    let v6: s0 = v5.p1
    let v13: [s0] = v5.p0
    let v10: s0 = v2[0]
    let v15: s0 = f4(v6)
    let v25: s1 = s1(p0: v9, p1: v15)
    let v40: s0 = v4.p1
    v8[1] = v40
    v8[0] = v6
    let v29: s1 = s1(p0: v13, p1: v40)
    v5.p0 = v13
    let v41: s0 = v5.p1
    var v39: s1 = v25
    var v86: s0 = v41
    let v56: s0 = v13[0]
    v39.p1 = v10
    v39.p0 = v1
    let v30: s0 = f4(v56)
    var v54: s0 = v86
    let v78: s0 = f4(v40)
    v8[0] = v30
    let v113: [s0] = v29.p0
    v39.p0 = v113
    v4.p1 = v41
    v8[1] = v78
    var v125: s1 = v39
    var v111: [s0] = v13
    v4.p1 = v54
    v4.p0 = v111
    return v125
  }
  @inline(never)
  func f0(_ v0: [s3], _ v1: [s1], _ v2: s0, _ v3: [s0], _ v4: Double) -> Double {
    let v6: s3 = v0[0]
    let v8: s0 = f4(v2)
    let v11: s0 = f4(v2)
    let v10: s0 = v3[1]
    var v9: s3 = v6
    let v18: [[Double]] = v10.p5
    v9.p0 = v11
    let v22: s1 = v9.p1
    v9.p0 = v8
    var v13: s1 = v22
    let v29: s1 = f2(v13)
    let v23: s0 = v9.p0
    v13 = v29
    let v28: s0 = f4(v23)
    v13.p0 = v3
    let v16: [Double] = v18[0]
    let v26: s0 = f4(v28)
    v9.p1 = v13
    var v35: [Double] = v16
    let v52: Double = v16[0]
    let v49: s0 = f4(v26)
    let v36: s0 = v13.p1
    v35[0] = v52
    let v43: s3 = s3(p0: v49, p1: v13)
    let v42: s0 = f4(v49)
    let v56: [[Double]] = [v16, v16, v35, v16, v35]
    v13.p1 = v23
    let v57: [[Double]] = v42.p0
    let v111: [Double] = v57[0]
    let v138: s3 = v0[0]
    v9 = v43
    var v128: [[Double]] = v56
    let v69: [Double] = v56[4]
    v128 = v56
    let v125: [Double] = v128[0]
    v9 = v138
    let v89: [[Double]] = [v69, v125, v125]
    var v77: [[Double]] = v89
    let v150: s0 = f4(v36)
    let v196: [Double] = v77[0]
    let v135: Double = v111[0]
    let v221: Double = v196[0]
    let v136: Double = v135 + v221
    v9.p0 = v150
    v13.p1 = v42
    v35[0] = v135
    return v136
  }
  func benchmark() {
    let v0: [s3] = [s3(p0: s0(p0: [[0.0]], p1: [[1.0], [2.0], [3.0]], p2: [[4.0], [5.0]], p3: [[6.0], [7.0]], p4: [[8.0], [9.0]], p5: [[10.0], [11.0]], p6: [[12.0]], p7: [[13.0], [14.0]]), p1: s1(p0: [s0(p0: [[15.0]], p1: [[16.0], [17.0], [18.0]], p2: [[19.0], [20.0]], p3: [[21.0], [22.0]], p4: [[23.0], [24.0]], p5: [[25.0], [26.0]], p6: [[27.0]], p7: [[28.0], [29.0]]), s0(p0: [[30.0]], p1: [[31.0], [32.0], [33.0]], p2: [[34.0], [35.0]], p3: [[36.0], [37.0]], p4: [[38.0], [39.0]], p5: [[40.0], [41.0]], p6: [[42.0]], p7: [[43.0], [44.0]])], p1: s0(p0: [[45.0]], p1: [[46.0], [47.0], [48.0]], p2: [[49.0], [50.0]], p3: [[51.0], [52.0]], p4: [[53.0], [54.0]], p5: [[55.0], [56.0]], p6: [[57.0]], p7: [[58.0], [59.0]])))]
    let v1: [s1] = [s1(p0: [s0(p0: [[60.0]], p1: [[61.0], [62.0], [63.0]], p2: [[64.0], [65.0]], p3: [[66.0], [67.0]], p4: [[68.0], [69.0]], p5: [[70.0], [71.0]], p6: [[72.0]], p7: [[73.0], [74.0]]), s0(p0: [[75.0]], p1: [[76.0], [77.0], [78.0]], p2: [[79.0], [80.0]], p3: [[81.0], [82.0]], p4: [[83.0], [84.0]], p5: [[85.0], [86.0]], p6: [[87.0]], p7: [[88.0], [89.0]])], p1: s0(p0: [[90.0]], p1: [[91.0], [92.0], [93.0]], p2: [[94.0], [95.0]], p3: [[96.0], [97.0]], p4: [[98.0], [99.0]], p5: [[100.0], [101.0]], p6: [[102.0]], p7: [[103.0], [104.0]])), s1(p0: [s0(p0: [[105.0]], p1: [[106.0], [107.0], [108.0]], p2: [[109.0], [110.0]], p3: [[111.0], [112.0]], p4: [[113.0], [114.0]], p5: [[115.0], [116.0]], p6: [[117.0]], p7: [[118.0], [119.0]]), s0(p0: [[120.0]], p1: [[121.0], [122.0], [123.0]], p2: [[124.0], [125.0]], p3: [[126.0], [127.0]], p4: [[128.0], [129.0]], p5: [[130.0], [131.0]], p6: [[132.0]], p7: [[133.0], [134.0]])], p1: s0(p0: [[135.0]], p1: [[136.0], [137.0], [138.0]], p2: [[139.0], [140.0]], p3: [[141.0], [142.0]], p4: [[143.0], [144.0]], p5: [[145.0], [146.0]], p6: [[147.0]], p7: [[148.0], [149.0]])), s1(p0: [s0(p0: [[150.0]], p1: [[151.0], [152.0], [153.0]], p2: [[154.0], [155.0]], p3: [[156.0], [157.0]], p4: [[158.0], [159.0]], p5: [[160.0], [161.0]], p6: [[162.0]], p7: [[163.0], [164.0]]), s0(p0: [[165.0]], p1: [[166.0], [167.0], [168.0]], p2: [[169.0], [170.0]], p3: [[171.0], [172.0]], p4: [[173.0], [174.0]], p5: [[175.0], [176.0]], p6: [[177.0]], p7: [[178.0], [179.0]])], p1: s0(p0: [[180.0]], p1: [[181.0], [182.0], [183.0]], p2: [[184.0], [185.0]], p3: [[186.0], [187.0]], p4: [[188.0], [189.0]], p5: [[190.0], [191.0]], p6: [[192.0]], p7: [[193.0], [194.0]]))]
    let v2: s0 = s0(p0: [[195.0]], p1: [[196.0], [197.0], [198.0]], p2: [[199.0], [200.0]], p3: [[201.0], [202.0]], p4: [[203.0], [204.0]], p5: [[205.0], [206.0]], p6: [[207.0]], p7: [[208.0], [209.0]])
    let v3: [s0] = [s0(p0: [[210.0]], p1: [[211.0], [212.0], [213.0]], p2: [[214.0], [215.0]], p3: [[216.0], [217.0]], p4: [[218.0], [219.0]], p5: [[220.0], [221.0]], p6: [[222.0]], p7: [[223.0], [224.0]]), s0(p0: [[225.0]], p1: [[226.0], [227.0], [228.0]], p2: [[229.0], [230.0]], p3: [[231.0], [232.0]], p4: [[233.0], [234.0]], p5: [[235.0], [236.0]], p6: [[237.0]], p7: [[238.0], [239.0]])]
    let v4: Double = 240.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 240.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
