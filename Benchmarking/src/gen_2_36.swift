  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
  }
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  }
  struct s3 {
    var p0: [s1]
    var p1: [[s0]]
  }
  @inline(never)
  func f0(_ v0: s3, _ v1: s3, _ v2: Double) -> Double {
    let v7: [s1] = v0.p0
    let v4: s1 = v7[1]
    let v6: s0 = v4.p1
    let v5: s0 = v4.p1
    let v8: [[Double]] = v5.p0
    let v9: [[Double]] = v6.p1
    let v11: [[[Double]]] = [v9, v9, v9, v8, v8]
    let v41: [[Double]] = v11[4]
    let v29: [Double] = v41[0]
    let v56: Double = v29[0]
    var v87: Double = v56
    let v116: Double = v87 - v2
    let v74: Double = v2 - v116
    let v83: Double = v74 - v116
    return v83
  }
  func benchmark() {
    let v0: s3 = s3(p0: [s1(p0: [[s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0]], p2: [[4.0], [5.0], [6.0]], p3: [[7.0], [8.0]])], [s0(p0: [[9.0], [10.0]], p1: [[11.0], [12.0]], p2: [[13.0], [14.0], [15.0]], p3: [[16.0], [17.0]])], [s0(p0: [[18.0], [19.0]], p1: [[20.0], [21.0]], p2: [[22.0], [23.0], [24.0]], p3: [[25.0], [26.0]])]], p1: s0(p0: [[27.0], [28.0]], p1: [[29.0], [30.0]], p2: [[31.0], [32.0], [33.0]], p3: [[34.0], [35.0]])), s1(p0: [[s0(p0: [[36.0], [37.0]], p1: [[38.0], [39.0]], p2: [[40.0], [41.0], [42.0]], p3: [[43.0], [44.0]])], [s0(p0: [[45.0], [46.0]], p1: [[47.0], [48.0]], p2: [[49.0], [50.0], [51.0]], p3: [[52.0], [53.0]])], [s0(p0: [[54.0], [55.0]], p1: [[56.0], [57.0]], p2: [[58.0], [59.0], [60.0]], p3: [[61.0], [62.0]])]], p1: s0(p0: [[63.0], [64.0]], p1: [[65.0], [66.0]], p2: [[67.0], [68.0], [69.0]], p3: [[70.0], [71.0]]))], p1: [[s0(p0: [[72.0], [73.0]], p1: [[74.0], [75.0]], p2: [[76.0], [77.0], [78.0]], p3: [[79.0], [80.0]])]])
    let v1: s3 = s3(p0: [s1(p0: [[s0(p0: [[81.0], [82.0]], p1: [[83.0], [84.0]], p2: [[85.0], [86.0], [87.0]], p3: [[88.0], [89.0]])], [s0(p0: [[90.0], [91.0]], p1: [[92.0], [93.0]], p2: [[94.0], [95.0], [96.0]], p3: [[97.0], [98.0]])], [s0(p0: [[99.0], [100.0]], p1: [[101.0], [102.0]], p2: [[103.0], [104.0], [105.0]], p3: [[106.0], [107.0]])]], p1: s0(p0: [[108.0], [109.0]], p1: [[110.0], [111.0]], p2: [[112.0], [113.0], [114.0]], p3: [[115.0], [116.0]])), s1(p0: [[s0(p0: [[117.0], [118.0]], p1: [[119.0], [120.0]], p2: [[121.0], [122.0], [123.0]], p3: [[124.0], [125.0]])], [s0(p0: [[126.0], [127.0]], p1: [[128.0], [129.0]], p2: [[130.0], [131.0], [132.0]], p3: [[133.0], [134.0]])], [s0(p0: [[135.0], [136.0]], p1: [[137.0], [138.0]], p2: [[139.0], [140.0], [141.0]], p3: [[142.0], [143.0]])]], p1: s0(p0: [[144.0], [145.0]], p1: [[146.0], [147.0]], p2: [[148.0], [149.0], [150.0]], p3: [[151.0], [152.0]]))], p1: [[s0(p0: [[153.0], [154.0]], p1: [[155.0], [156.0]], p2: [[157.0], [158.0], [159.0]], p3: [[160.0], [161.0]])]])
    let v2: Double = 162.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 162.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
