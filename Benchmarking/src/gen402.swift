  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  }
  struct s2 {
    var p0: [[s0]]
    var p1: s1
    var p2: s1
  }
  struct s5 {
    var p0: s2
    var p1: [[s0]]
  }
  struct s6 {
    var p0: s5
    var p1: [s5]
  }
  struct s7 {
    var p0: s1
    var p1: [s2]
    var p2: [[s5]]
    var p3: s2
  }
  func f6(_ v0: s5) -> s5 {
    let v6: [[s0]] = v0.p1
    var v2: s5 = v0
    var v4: s5 = v2
    let v5: [s0] = v6[2]
    let v7: s2 = v4.p0
    v4.p1 = v6
    let v1: [[s0]] = [v5, v5, v5, v5, v5]
    v2.p1 = v6
    v2.p1 = v6
    let v17: [[s0]] = v0.p1
    let v13: [s0] = v17[1]
    let v15: [[s0]] = v2.p1
    v4.p0 = v7
    let v14: [[s0]] = v4.p1
    let v11: s0 = v13[0]
    var v12: s5 = v0
    var v19: s5 = v12
    v12.p1 = v14
    let v24: [s0] = v15[2]
    v2.p1 = v6
    var v23: [s0] = v24
    let v22: s2 = v0.p0
    var v27: [[s0]] = v15
    v12.p0 = v22
    v27[0] = v13
    let v20: [s0] = v1[4]
    var v43: s5 = v19
    v27[0] = v5
    v27[0] = v20
    v4.p1 = v27
    v27[1] = v23
    var v34: [[s0]] = v14
    v2.p1 = v34
    v2 = v19
    v23[0] = v11
    return v43
  }
  @inline(never)
  func f0(_ v0: s6, _ v1: [s7], _ v2: Double) -> Double {
    var v4: s6 = v0
    let v7: s5 = v4.p0
    v4.p0 = v7
    v4.p0 = v7
    let v5: s5 = f6(v7)
    var v14: s5 = v7
    var v23: s5 = v14
    let v20: s5 = f6(v5)
    let v18: [s5] = v4.p1
    v4.p1 = v18
    let v17: [s5] = v4.p1
    var v22: [s5] = v18
    v22[1] = v14
    let v29: s5 = f6(v14)
    v22[1] = v14
    v4.p1 = v17
    let v24: [[s0]] = v23.p1
    v4 = v0
    let v30: [s0] = v24[2]
    let v34: s0 = v30[0]
    v4.p1 = v22
    let v60: s5 = f6(v20)
    v22[1] = v5
    let v35: [[Double]] = v34.p1
    v23.p1 = v24
    v22[0] = v23
    let v68: s2 = v29.p0
    v14.p0 = v68
    let v77: [Double] = v35[0]
    v22[1] = v60
    let v98: Double = v77[0]
    v22[1] = v60
    v23.p1 = v24
    return v98
  }
  func benchmark() {
    let v0: s6 = s6(p0: s5(p0: s2(p0: [[s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0], [5.0]])], [s0(p0: [[6.0], [7.0], [8.0]], p1: [[9.0], [10.0], [11.0]])]], p1: s1(p0: s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0], [16.0], [17.0]]), p1: [[s0(p0: [[18.0], [19.0], [20.0]], p1: [[21.0], [22.0], [23.0]])]]), p2: s1(p0: s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0], [28.0], [29.0]]), p1: [[s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0], [35.0]])]])), p1: [[s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0], [40.0], [41.0]])], [s0(p0: [[42.0], [43.0], [44.0]], p1: [[45.0], [46.0], [47.0]])], [s0(p0: [[48.0], [49.0], [50.0]], p1: [[51.0], [52.0], [53.0]])]]), p1: [s5(p0: s2(p0: [[s0(p0: [[54.0], [55.0], [56.0]], p1: [[57.0], [58.0], [59.0]])], [s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0], [64.0], [65.0]])]], p1: s1(p0: s0(p0: [[66.0], [67.0], [68.0]], p1: [[69.0], [70.0], [71.0]]), p1: [[s0(p0: [[72.0], [73.0], [74.0]], p1: [[75.0], [76.0], [77.0]])]]), p2: s1(p0: s0(p0: [[78.0], [79.0], [80.0]], p1: [[81.0], [82.0], [83.0]]), p1: [[s0(p0: [[84.0], [85.0], [86.0]], p1: [[87.0], [88.0], [89.0]])]])), p1: [[s0(p0: [[90.0], [91.0], [92.0]], p1: [[93.0], [94.0], [95.0]])], [s0(p0: [[96.0], [97.0], [98.0]], p1: [[99.0], [100.0], [101.0]])], [s0(p0: [[102.0], [103.0], [104.0]], p1: [[105.0], [106.0], [107.0]])]]), s5(p0: s2(p0: [[s0(p0: [[108.0], [109.0], [110.0]], p1: [[111.0], [112.0], [113.0]])], [s0(p0: [[114.0], [115.0], [116.0]], p1: [[117.0], [118.0], [119.0]])]], p1: s1(p0: s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0], [124.0], [125.0]]), p1: [[s0(p0: [[126.0], [127.0], [128.0]], p1: [[129.0], [130.0], [131.0]])]]), p2: s1(p0: s0(p0: [[132.0], [133.0], [134.0]], p1: [[135.0], [136.0], [137.0]]), p1: [[s0(p0: [[138.0], [139.0], [140.0]], p1: [[141.0], [142.0], [143.0]])]])), p1: [[s0(p0: [[144.0], [145.0], [146.0]], p1: [[147.0], [148.0], [149.0]])], [s0(p0: [[150.0], [151.0], [152.0]], p1: [[153.0], [154.0], [155.0]])], [s0(p0: [[156.0], [157.0], [158.0]], p1: [[159.0], [160.0], [161.0]])]]), s5(p0: s2(p0: [[s0(p0: [[162.0], [163.0], [164.0]], p1: [[165.0], [166.0], [167.0]])], [s0(p0: [[168.0], [169.0], [170.0]], p1: [[171.0], [172.0], [173.0]])]], p1: s1(p0: s0(p0: [[174.0], [175.0], [176.0]], p1: [[177.0], [178.0], [179.0]]), p1: [[s0(p0: [[180.0], [181.0], [182.0]], p1: [[183.0], [184.0], [185.0]])]]), p2: s1(p0: s0(p0: [[186.0], [187.0], [188.0]], p1: [[189.0], [190.0], [191.0]]), p1: [[s0(p0: [[192.0], [193.0], [194.0]], p1: [[195.0], [196.0], [197.0]])]])), p1: [[s0(p0: [[198.0], [199.0], [200.0]], p1: [[201.0], [202.0], [203.0]])], [s0(p0: [[204.0], [205.0], [206.0]], p1: [[207.0], [208.0], [209.0]])], [s0(p0: [[210.0], [211.0], [212.0]], p1: [[213.0], [214.0], [215.0]])]])])
    let v1: [s7] = [s7(p0: s1(p0: s0(p0: [[216.0], [217.0], [218.0]], p1: [[219.0], [220.0], [221.0]]), p1: [[s0(p0: [[222.0], [223.0], [224.0]], p1: [[225.0], [226.0], [227.0]])]]), p1: [s2(p0: [[s0(p0: [[228.0], [229.0], [230.0]], p1: [[231.0], [232.0], [233.0]])], [s0(p0: [[234.0], [235.0], [236.0]], p1: [[237.0], [238.0], [239.0]])]], p1: s1(p0: s0(p0: [[240.0], [241.0], [242.0]], p1: [[243.0], [244.0], [245.0]]), p1: [[s0(p0: [[246.0], [247.0], [248.0]], p1: [[249.0], [250.0], [251.0]])]]), p2: s1(p0: s0(p0: [[252.0], [253.0], [254.0]], p1: [[255.0], [256.0], [257.0]]), p1: [[s0(p0: [[258.0], [259.0], [260.0]], p1: [[261.0], [262.0], [263.0]])]])), s2(p0: [[s0(p0: [[264.0], [265.0], [266.0]], p1: [[267.0], [268.0], [269.0]])], [s0(p0: [[270.0], [271.0], [272.0]], p1: [[273.0], [274.0], [275.0]])]], p1: s1(p0: s0(p0: [[276.0], [277.0], [278.0]], p1: [[279.0], [280.0], [281.0]]), p1: [[s0(p0: [[282.0], [283.0], [284.0]], p1: [[285.0], [286.0], [287.0]])]]), p2: s1(p0: s0(p0: [[288.0], [289.0], [290.0]], p1: [[291.0], [292.0], [293.0]]), p1: [[s0(p0: [[294.0], [295.0], [296.0]], p1: [[297.0], [298.0], [299.0]])]]))], p2: [[s5(p0: s2(p0: [[s0(p0: [[300.0], [301.0], [302.0]], p1: [[303.0], [304.0], [305.0]])], [s0(p0: [[306.0], [307.0], [308.0]], p1: [[309.0], [310.0], [311.0]])]], p1: s1(p0: s0(p0: [[312.0], [313.0], [314.0]], p1: [[315.0], [316.0], [317.0]]), p1: [[s0(p0: [[318.0], [319.0], [320.0]], p1: [[321.0], [322.0], [323.0]])]]), p2: s1(p0: s0(p0: [[324.0], [325.0], [326.0]], p1: [[327.0], [328.0], [329.0]]), p1: [[s0(p0: [[330.0], [331.0], [332.0]], p1: [[333.0], [334.0], [335.0]])]])), p1: [[s0(p0: [[336.0], [337.0], [338.0]], p1: [[339.0], [340.0], [341.0]])], [s0(p0: [[342.0], [343.0], [344.0]], p1: [[345.0], [346.0], [347.0]])], [s0(p0: [[348.0], [349.0], [350.0]], p1: [[351.0], [352.0], [353.0]])]])], [s5(p0: s2(p0: [[s0(p0: [[354.0], [355.0], [356.0]], p1: [[357.0], [358.0], [359.0]])], [s0(p0: [[360.0], [361.0], [362.0]], p1: [[363.0], [364.0], [365.0]])]], p1: s1(p0: s0(p0: [[366.0], [367.0], [368.0]], p1: [[369.0], [370.0], [371.0]]), p1: [[s0(p0: [[372.0], [373.0], [374.0]], p1: [[375.0], [376.0], [377.0]])]]), p2: s1(p0: s0(p0: [[378.0], [379.0], [380.0]], p1: [[381.0], [382.0], [383.0]]), p1: [[s0(p0: [[384.0], [385.0], [386.0]], p1: [[387.0], [388.0], [389.0]])]])), p1: [[s0(p0: [[390.0], [391.0], [392.0]], p1: [[393.0], [394.0], [395.0]])], [s0(p0: [[396.0], [397.0], [398.0]], p1: [[399.0], [400.0], [401.0]])], [s0(p0: [[402.0], [403.0], [404.0]], p1: [[405.0], [406.0], [407.0]])]])], [s5(p0: s2(p0: [[s0(p0: [[408.0], [409.0], [410.0]], p1: [[411.0], [412.0], [413.0]])], [s0(p0: [[414.0], [415.0], [416.0]], p1: [[417.0], [418.0], [419.0]])]], p1: s1(p0: s0(p0: [[420.0], [421.0], [422.0]], p1: [[423.0], [424.0], [425.0]]), p1: [[s0(p0: [[426.0], [427.0], [428.0]], p1: [[429.0], [430.0], [431.0]])]]), p2: s1(p0: s0(p0: [[432.0], [433.0], [434.0]], p1: [[435.0], [436.0], [437.0]]), p1: [[s0(p0: [[438.0], [439.0], [440.0]], p1: [[441.0], [442.0], [443.0]])]])), p1: [[s0(p0: [[444.0], [445.0], [446.0]], p1: [[447.0], [448.0], [449.0]])], [s0(p0: [[450.0], [451.0], [452.0]], p1: [[453.0], [454.0], [455.0]])], [s0(p0: [[456.0], [457.0], [458.0]], p1: [[459.0], [460.0], [461.0]])]])]], p3: s2(p0: [[s0(p0: [[462.0], [463.0], [464.0]], p1: [[465.0], [466.0], [467.0]])], [s0(p0: [[468.0], [469.0], [470.0]], p1: [[471.0], [472.0], [473.0]])]], p1: s1(p0: s0(p0: [[474.0], [475.0], [476.0]], p1: [[477.0], [478.0], [479.0]]), p1: [[s0(p0: [[480.0], [481.0], [482.0]], p1: [[483.0], [484.0], [485.0]])]]), p2: s1(p0: s0(p0: [[486.0], [487.0], [488.0]], p1: [[489.0], [490.0], [491.0]]), p1: [[s0(p0: [[492.0], [493.0], [494.0]], p1: [[495.0], [496.0], [497.0]])]])))]
    let v2: Double = 498.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 498.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
