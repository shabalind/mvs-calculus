  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: s0
    var p1: s1
  }
  struct s3 {
    var p0: [[s1]]
    var p1: [s2]
  }
  struct s4 {
    var p0: [s3]
    var p1: [s2]
  }
  struct s5 {
    var p0: [s1]
    var p1: s4
    var p2: [s0]
    var p3: [Double]
  }
  func f31(_ v0: Double) -> Double {
    var v1: Double = v0
    var v4: Double = v1
    let v8: Double = v4 * v0
    var v12: Double = v8
    return v12
  }
  @inline(never)
  func f0(_ v0: s3, _ v1: [[s5]], _ v2: Double) -> Double {
    let v3: Double = f31(v2)
    let v15: Double = f31(v3)
    var v20: Double = v15
    let v56: Double = v2 * v20
    return v56
  }
  func benchmark() {
    let v0: s3 = s3(p0: [[s1(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0], [4.0]]), p1: s0(p0: [[5.0], [6.0]], p1: [[7.0], [8.0], [9.0]]))]], p1: [s2(p0: s0(p0: [[10.0], [11.0]], p1: [[12.0], [13.0], [14.0]]), p1: s1(p0: s0(p0: [[15.0], [16.0]], p1: [[17.0], [18.0], [19.0]]), p1: s0(p0: [[20.0], [21.0]], p1: [[22.0], [23.0], [24.0]]))), s2(p0: s0(p0: [[25.0], [26.0]], p1: [[27.0], [28.0], [29.0]]), p1: s1(p0: s0(p0: [[30.0], [31.0]], p1: [[32.0], [33.0], [34.0]]), p1: s0(p0: [[35.0], [36.0]], p1: [[37.0], [38.0], [39.0]])))])
    let v1: [[s5]] = [[s5(p0: [s1(p0: s0(p0: [[40.0], [41.0]], p1: [[42.0], [43.0], [44.0]]), p1: s0(p0: [[45.0], [46.0]], p1: [[47.0], [48.0], [49.0]])), s1(p0: s0(p0: [[50.0], [51.0]], p1: [[52.0], [53.0], [54.0]]), p1: s0(p0: [[55.0], [56.0]], p1: [[57.0], [58.0], [59.0]])), s1(p0: s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0], [64.0]]), p1: s0(p0: [[65.0], [66.0]], p1: [[67.0], [68.0], [69.0]]))], p1: s4(p0: [s3(p0: [[s1(p0: s0(p0: [[70.0], [71.0]], p1: [[72.0], [73.0], [74.0]]), p1: s0(p0: [[75.0], [76.0]], p1: [[77.0], [78.0], [79.0]]))]], p1: [s2(p0: s0(p0: [[80.0], [81.0]], p1: [[82.0], [83.0], [84.0]]), p1: s1(p0: s0(p0: [[85.0], [86.0]], p1: [[87.0], [88.0], [89.0]]), p1: s0(p0: [[90.0], [91.0]], p1: [[92.0], [93.0], [94.0]]))), s2(p0: s0(p0: [[95.0], [96.0]], p1: [[97.0], [98.0], [99.0]]), p1: s1(p0: s0(p0: [[100.0], [101.0]], p1: [[102.0], [103.0], [104.0]]), p1: s0(p0: [[105.0], [106.0]], p1: [[107.0], [108.0], [109.0]])))]), s3(p0: [[s1(p0: s0(p0: [[110.0], [111.0]], p1: [[112.0], [113.0], [114.0]]), p1: s0(p0: [[115.0], [116.0]], p1: [[117.0], [118.0], [119.0]]))]], p1: [s2(p0: s0(p0: [[120.0], [121.0]], p1: [[122.0], [123.0], [124.0]]), p1: s1(p0: s0(p0: [[125.0], [126.0]], p1: [[127.0], [128.0], [129.0]]), p1: s0(p0: [[130.0], [131.0]], p1: [[132.0], [133.0], [134.0]]))), s2(p0: s0(p0: [[135.0], [136.0]], p1: [[137.0], [138.0], [139.0]]), p1: s1(p0: s0(p0: [[140.0], [141.0]], p1: [[142.0], [143.0], [144.0]]), p1: s0(p0: [[145.0], [146.0]], p1: [[147.0], [148.0], [149.0]])))]), s3(p0: [[s1(p0: s0(p0: [[150.0], [151.0]], p1: [[152.0], [153.0], [154.0]]), p1: s0(p0: [[155.0], [156.0]], p1: [[157.0], [158.0], [159.0]]))]], p1: [s2(p0: s0(p0: [[160.0], [161.0]], p1: [[162.0], [163.0], [164.0]]), p1: s1(p0: s0(p0: [[165.0], [166.0]], p1: [[167.0], [168.0], [169.0]]), p1: s0(p0: [[170.0], [171.0]], p1: [[172.0], [173.0], [174.0]]))), s2(p0: s0(p0: [[175.0], [176.0]], p1: [[177.0], [178.0], [179.0]]), p1: s1(p0: s0(p0: [[180.0], [181.0]], p1: [[182.0], [183.0], [184.0]]), p1: s0(p0: [[185.0], [186.0]], p1: [[187.0], [188.0], [189.0]])))])], p1: [s2(p0: s0(p0: [[190.0], [191.0]], p1: [[192.0], [193.0], [194.0]]), p1: s1(p0: s0(p0: [[195.0], [196.0]], p1: [[197.0], [198.0], [199.0]]), p1: s0(p0: [[200.0], [201.0]], p1: [[202.0], [203.0], [204.0]]))), s2(p0: s0(p0: [[205.0], [206.0]], p1: [[207.0], [208.0], [209.0]]), p1: s1(p0: s0(p0: [[210.0], [211.0]], p1: [[212.0], [213.0], [214.0]]), p1: s0(p0: [[215.0], [216.0]], p1: [[217.0], [218.0], [219.0]])))]), p2: [s0(p0: [[220.0], [221.0]], p1: [[222.0], [223.0], [224.0]]), s0(p0: [[225.0], [226.0]], p1: [[227.0], [228.0], [229.0]]), s0(p0: [[230.0], [231.0]], p1: [[232.0], [233.0], [234.0]])], p3: [235.0, 236.0, 237.0])], [s5(p0: [s1(p0: s0(p0: [[238.0], [239.0]], p1: [[240.0], [241.0], [242.0]]), p1: s0(p0: [[243.0], [244.0]], p1: [[245.0], [246.0], [247.0]])), s1(p0: s0(p0: [[248.0], [249.0]], p1: [[250.0], [251.0], [252.0]]), p1: s0(p0: [[253.0], [254.0]], p1: [[255.0], [256.0], [257.0]])), s1(p0: s0(p0: [[258.0], [259.0]], p1: [[260.0], [261.0], [262.0]]), p1: s0(p0: [[263.0], [264.0]], p1: [[265.0], [266.0], [267.0]]))], p1: s4(p0: [s3(p0: [[s1(p0: s0(p0: [[268.0], [269.0]], p1: [[270.0], [271.0], [272.0]]), p1: s0(p0: [[273.0], [274.0]], p1: [[275.0], [276.0], [277.0]]))]], p1: [s2(p0: s0(p0: [[278.0], [279.0]], p1: [[280.0], [281.0], [282.0]]), p1: s1(p0: s0(p0: [[283.0], [284.0]], p1: [[285.0], [286.0], [287.0]]), p1: s0(p0: [[288.0], [289.0]], p1: [[290.0], [291.0], [292.0]]))), s2(p0: s0(p0: [[293.0], [294.0]], p1: [[295.0], [296.0], [297.0]]), p1: s1(p0: s0(p0: [[298.0], [299.0]], p1: [[300.0], [301.0], [302.0]]), p1: s0(p0: [[303.0], [304.0]], p1: [[305.0], [306.0], [307.0]])))]), s3(p0: [[s1(p0: s0(p0: [[308.0], [309.0]], p1: [[310.0], [311.0], [312.0]]), p1: s0(p0: [[313.0], [314.0]], p1: [[315.0], [316.0], [317.0]]))]], p1: [s2(p0: s0(p0: [[318.0], [319.0]], p1: [[320.0], [321.0], [322.0]]), p1: s1(p0: s0(p0: [[323.0], [324.0]], p1: [[325.0], [326.0], [327.0]]), p1: s0(p0: [[328.0], [329.0]], p1: [[330.0], [331.0], [332.0]]))), s2(p0: s0(p0: [[333.0], [334.0]], p1: [[335.0], [336.0], [337.0]]), p1: s1(p0: s0(p0: [[338.0], [339.0]], p1: [[340.0], [341.0], [342.0]]), p1: s0(p0: [[343.0], [344.0]], p1: [[345.0], [346.0], [347.0]])))]), s3(p0: [[s1(p0: s0(p0: [[348.0], [349.0]], p1: [[350.0], [351.0], [352.0]]), p1: s0(p0: [[353.0], [354.0]], p1: [[355.0], [356.0], [357.0]]))]], p1: [s2(p0: s0(p0: [[358.0], [359.0]], p1: [[360.0], [361.0], [362.0]]), p1: s1(p0: s0(p0: [[363.0], [364.0]], p1: [[365.0], [366.0], [367.0]]), p1: s0(p0: [[368.0], [369.0]], p1: [[370.0], [371.0], [372.0]]))), s2(p0: s0(p0: [[373.0], [374.0]], p1: [[375.0], [376.0], [377.0]]), p1: s1(p0: s0(p0: [[378.0], [379.0]], p1: [[380.0], [381.0], [382.0]]), p1: s0(p0: [[383.0], [384.0]], p1: [[385.0], [386.0], [387.0]])))])], p1: [s2(p0: s0(p0: [[388.0], [389.0]], p1: [[390.0], [391.0], [392.0]]), p1: s1(p0: s0(p0: [[393.0], [394.0]], p1: [[395.0], [396.0], [397.0]]), p1: s0(p0: [[398.0], [399.0]], p1: [[400.0], [401.0], [402.0]]))), s2(p0: s0(p0: [[403.0], [404.0]], p1: [[405.0], [406.0], [407.0]]), p1: s1(p0: s0(p0: [[408.0], [409.0]], p1: [[410.0], [411.0], [412.0]]), p1: s0(p0: [[413.0], [414.0]], p1: [[415.0], [416.0], [417.0]])))]), p2: [s0(p0: [[418.0], [419.0]], p1: [[420.0], [421.0], [422.0]]), s0(p0: [[423.0], [424.0]], p1: [[425.0], [426.0], [427.0]]), s0(p0: [[428.0], [429.0]], p1: [[430.0], [431.0], [432.0]])], p3: [433.0, 434.0, 435.0])]]
    let v2: Double = 436.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 436.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
