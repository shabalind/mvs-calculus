  struct s0 {
    var p0: [Float]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    var v2: Float = v1 in
    let v3: [Float] = [v1, v1, v1, v2] in
    let v6: Float = v3[2] in
    let v7: Float = v3[3] in
    let v9: Float = v3[3] in
    var v4: Float = v2 in
    var v13: [Float] = v3 in
    v13[2] = v9 in
    var v11: Float = v9 in
    let v15: Float = v13[3] in
    v2 = v15 in
    let v34: Float = v3[0] in
    var v16: Float = v6 in
    let v26: Float = v4 + v7 in
    v13[1] = v34 in
    let v50: [Float] = [v11, v26, v16, v2, v6, v34] in
    v13[2] = v15 in
    let v57: Float = v50[0] in
    v57
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1(s0([0.0, 1.0], [[2.0], [3.0]]), s0([4.0, 5.0], [[6.0], [7.0]])) in
    let v1: Float = 8.0 in
    let initialResult: Float = 8.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()