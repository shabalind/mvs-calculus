  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
  } in
  struct s3 {
    var p0: s0
    var p1: [s1]
  } in
  struct s4 {
    var p0: s3
    var p1: s1
  } in
  let noinline_f0: (s4, Float) -> Float = (v0: s4, v1: Float) -> Float {
    let v2: s1 = v0.p1 in
    let v5: [s0] = v2.p1 in
    let v16: s0 = v5[0] in
    let v22: [[Float]] = v16.p1 in
    let v18: [Float] = v22[0] in
    let v23: s0 = v5[0] in
    let v42: [Float] = v22[0] in
    let v31: [[Float]] = v23.p1 in
    let v47: [Float] = v31[0] in
    let v28: [[Float]] = [v42, v42, v18, v47, v18, v18, v42] in
    let v123: [Float] = v28[5] in
    var v60: [Float] = v123 in
    v60[0] = v1 in
    let v285: Float = v60[0] in
    v285
  } in
  fun loop(i: Int, v0: s4, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s4 = s4(s3(s0([[0.0]], [[1.0]]), [s1([[s0([[2.0]], [[3.0]])], [s0([[4.0]], [[5.0]])], [s0([[6.0]], [[7.0]])]], [s0([[8.0]], [[9.0]])]), s1([[s0([[10.0]], [[11.0]])], [s0([[12.0]], [[13.0]])], [s0([[14.0]], [[15.0]])]], [s0([[16.0]], [[17.0]])])]), s1([[s0([[18.0]], [[19.0]])], [s0([[20.0]], [[21.0]])], [s0([[22.0]], [[23.0]])]], [s0([[24.0]], [[25.0]])])) in
    let v1: Float = 26.0 in
    let initialResult: Float = 26.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()