  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  let f110: (s1) -> s1 = (v0: s1) -> s1 {
    let v7: s0 = v0.p0 in
    var v2: s0 = v7 in
    let v1: [s0] = v0.p1 in
    let v6: [s1] = [v0, v0, v0] in
    let v4: s1 = s1(v2, v1) in
    var v3: [s1] = v6 in
    let v9: [[Float]] = v7.p0 in
    let v15: s1 = v6[2] in
    v2.p0 = v9 in
    let v22: s0 = v15.p0 in
    v3[0] = v15 in
    v3[0] = v4 in
    let v48: [[Float]] = v22.p0 in
    v2.p0 = v48 in
    let v32: s1 = v3[0] in
    var v58: [s1] = v6 in
    v58[0] = v32 in
    let v47: s1 = v58[0] in
    var v86: s1 = v47 in
    v86
  } in
  let noinline_f0: ([[s1]], Float) -> Float = (v0: [[s1]], v1: Float) -> Float {
    let v6: [s1] = v0[0] in
    var v8: Float = v1 in
    let v10: s1 = v6[0] in
    let v12: s1 = f110(v10) in
    let v11: s0 = v12.p0 in
    let v25: [[Float]] = v11.p0 in
    let v20: [Float] = v25[1] in
    var v35: [Float] = v20 in
    var v30: [[Float]] = v25 in
    v35[0] = v8 in
    v30[0] = v35 in
    v30[0] = v35 in
    v35[0] = v1 in
    let v90: [Float] = v30[0] in
    v35[0] = v8 in
    let v106: Float = v90[0] in
    v106
  } in
  fun loop(i: Int, v0: [[s1]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s1]] = [[s1(s0([[0.0], [1.0]], [[2.0]]), [s0([[3.0], [4.0]], [[5.0]])])]] in
    let v1: Float = 6.0 in
    let initialResult: Float = 6.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()