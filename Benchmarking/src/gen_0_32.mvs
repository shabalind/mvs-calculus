  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
    var p2: [[s0]]
  } in
  struct s2 {
    var p0: s1
    var p1: s0
  } in
  struct s3 {
    var p0: [[s0]]
    var p1: s2
  } in
  let noinline_f0: ([s3], Float) -> Float = (v0: [s3], v1: Float) -> Float {
    let v2: s3 = v0[0] in
    let v4: s2 = v2.p1 in
    let v17: s0 = v4.p1 in
    let v24: [[Float]] = v17.p1 in
    var v16: [[Float]] = v24 in
    let v44: [Float] = v16[2] in
    let v28: [[Float]] = v17.p1 in
    let v48: [Float] = v28[0] in
    v16[2] = v48 in
    let v41: Float = v44[0] in
    v41
  } in
  fun loop(i: Int, v0: [s3], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s3] = [s3([[s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]])], [s0([[6.0], [7.0], [8.0]], [[9.0], [10.0], [11.0]])], [s0([[12.0], [13.0], [14.0]], [[15.0], [16.0], [17.0]])]], s2(s1([s0([[18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0]])], [s0([[24.0], [25.0], [26.0]], [[27.0], [28.0], [29.0]]), s0([[30.0], [31.0], [32.0]], [[33.0], [34.0], [35.0]]), s0([[36.0], [37.0], [38.0]], [[39.0], [40.0], [41.0]])], [[s0([[42.0], [43.0], [44.0]], [[45.0], [46.0], [47.0]])], [s0([[48.0], [49.0], [50.0]], [[51.0], [52.0], [53.0]])], [s0([[54.0], [55.0], [56.0]], [[57.0], [58.0], [59.0]])]]), s0([[60.0], [61.0], [62.0]], [[63.0], [64.0], [65.0]])))] in
    let v1: Float = 66.0 in
    let initialResult: Float = 66.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()