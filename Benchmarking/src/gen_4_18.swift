  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [Double]
    var p3: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  }
  struct s2 {
    var p0: [s0]
    var p1: [[s1]]
  }
  struct s7 {
    var p0: [s2]
    var p1: [s1]
  }
  @inline(never)
  func f0(_ v0: [s7], _ v1: s1, _ v2: Double) -> Double {
    let v3: [[s0]] = v1.p1
    var v6: [[s0]] = v3
    let v4: [s0] = v6[0]
    let v7: s0 = v4[0]
    var v11: s0 = v7
    let v24: [Double] = v11.p2
    let v35: s0 = v1.p0
    let v19: Double = v24[0]
    let v52: [[Double]] = v11.p3
    v11.p0 = v52
    var v50: Double = v19
    v11.p3 = v52
    let v30: Double = v50 + v19
    let v123: [[Double]] = v35.p3
    v11.p0 = v123
    return v30
  }
  func benchmark() {
    let v0: [s7] = [s7(p0: [s2(p0: [s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0], [4.0]], p2: [5.0], p3: [[6.0], [7.0]]), s0(p0: [[8.0], [9.0]], p1: [[10.0], [11.0], [12.0]], p2: [13.0], p3: [[14.0], [15.0]]), s0(p0: [[16.0], [17.0]], p1: [[18.0], [19.0], [20.0]], p2: [21.0], p3: [[22.0], [23.0]])], p1: [[s1(p0: s0(p0: [[24.0], [25.0]], p1: [[26.0], [27.0], [28.0]], p2: [29.0], p3: [[30.0], [31.0]]), p1: [[s0(p0: [[32.0], [33.0]], p1: [[34.0], [35.0], [36.0]], p2: [37.0], p3: [[38.0], [39.0]])]])], [s1(p0: s0(p0: [[40.0], [41.0]], p1: [[42.0], [43.0], [44.0]], p2: [45.0], p3: [[46.0], [47.0]]), p1: [[s0(p0: [[48.0], [49.0]], p1: [[50.0], [51.0], [52.0]], p2: [53.0], p3: [[54.0], [55.0]])]])], [s1(p0: s0(p0: [[56.0], [57.0]], p1: [[58.0], [59.0], [60.0]], p2: [61.0], p3: [[62.0], [63.0]]), p1: [[s0(p0: [[64.0], [65.0]], p1: [[66.0], [67.0], [68.0]], p2: [69.0], p3: [[70.0], [71.0]])]])]]), s2(p0: [s0(p0: [[72.0], [73.0]], p1: [[74.0], [75.0], [76.0]], p2: [77.0], p3: [[78.0], [79.0]]), s0(p0: [[80.0], [81.0]], p1: [[82.0], [83.0], [84.0]], p2: [85.0], p3: [[86.0], [87.0]]), s0(p0: [[88.0], [89.0]], p1: [[90.0], [91.0], [92.0]], p2: [93.0], p3: [[94.0], [95.0]])], p1: [[s1(p0: s0(p0: [[96.0], [97.0]], p1: [[98.0], [99.0], [100.0]], p2: [101.0], p3: [[102.0], [103.0]]), p1: [[s0(p0: [[104.0], [105.0]], p1: [[106.0], [107.0], [108.0]], p2: [109.0], p3: [[110.0], [111.0]])]])], [s1(p0: s0(p0: [[112.0], [113.0]], p1: [[114.0], [115.0], [116.0]], p2: [117.0], p3: [[118.0], [119.0]]), p1: [[s0(p0: [[120.0], [121.0]], p1: [[122.0], [123.0], [124.0]], p2: [125.0], p3: [[126.0], [127.0]])]])], [s1(p0: s0(p0: [[128.0], [129.0]], p1: [[130.0], [131.0], [132.0]], p2: [133.0], p3: [[134.0], [135.0]]), p1: [[s0(p0: [[136.0], [137.0]], p1: [[138.0], [139.0], [140.0]], p2: [141.0], p3: [[142.0], [143.0]])]])]]), s2(p0: [s0(p0: [[144.0], [145.0]], p1: [[146.0], [147.0], [148.0]], p2: [149.0], p3: [[150.0], [151.0]]), s0(p0: [[152.0], [153.0]], p1: [[154.0], [155.0], [156.0]], p2: [157.0], p3: [[158.0], [159.0]]), s0(p0: [[160.0], [161.0]], p1: [[162.0], [163.0], [164.0]], p2: [165.0], p3: [[166.0], [167.0]])], p1: [[s1(p0: s0(p0: [[168.0], [169.0]], p1: [[170.0], [171.0], [172.0]], p2: [173.0], p3: [[174.0], [175.0]]), p1: [[s0(p0: [[176.0], [177.0]], p1: [[178.0], [179.0], [180.0]], p2: [181.0], p3: [[182.0], [183.0]])]])], [s1(p0: s0(p0: [[184.0], [185.0]], p1: [[186.0], [187.0], [188.0]], p2: [189.0], p3: [[190.0], [191.0]]), p1: [[s0(p0: [[192.0], [193.0]], p1: [[194.0], [195.0], [196.0]], p2: [197.0], p3: [[198.0], [199.0]])]])], [s1(p0: s0(p0: [[200.0], [201.0]], p1: [[202.0], [203.0], [204.0]], p2: [205.0], p3: [[206.0], [207.0]]), p1: [[s0(p0: [[208.0], [209.0]], p1: [[210.0], [211.0], [212.0]], p2: [213.0], p3: [[214.0], [215.0]])]])]])], p1: [s1(p0: s0(p0: [[216.0], [217.0]], p1: [[218.0], [219.0], [220.0]], p2: [221.0], p3: [[222.0], [223.0]]), p1: [[s0(p0: [[224.0], [225.0]], p1: [[226.0], [227.0], [228.0]], p2: [229.0], p3: [[230.0], [231.0]])]]), s1(p0: s0(p0: [[232.0], [233.0]], p1: [[234.0], [235.0], [236.0]], p2: [237.0], p3: [[238.0], [239.0]]), p1: [[s0(p0: [[240.0], [241.0]], p1: [[242.0], [243.0], [244.0]], p2: [245.0], p3: [[246.0], [247.0]])]]), s1(p0: s0(p0: [[248.0], [249.0]], p1: [[250.0], [251.0], [252.0]], p2: [253.0], p3: [[254.0], [255.0]]), p1: [[s0(p0: [[256.0], [257.0]], p1: [[258.0], [259.0], [260.0]], p2: [261.0], p3: [[262.0], [263.0]])]])]), s7(p0: [s2(p0: [s0(p0: [[264.0], [265.0]], p1: [[266.0], [267.0], [268.0]], p2: [269.0], p3: [[270.0], [271.0]]), s0(p0: [[272.0], [273.0]], p1: [[274.0], [275.0], [276.0]], p2: [277.0], p3: [[278.0], [279.0]]), s0(p0: [[280.0], [281.0]], p1: [[282.0], [283.0], [284.0]], p2: [285.0], p3: [[286.0], [287.0]])], p1: [[s1(p0: s0(p0: [[288.0], [289.0]], p1: [[290.0], [291.0], [292.0]], p2: [293.0], p3: [[294.0], [295.0]]), p1: [[s0(p0: [[296.0], [297.0]], p1: [[298.0], [299.0], [300.0]], p2: [301.0], p3: [[302.0], [303.0]])]])], [s1(p0: s0(p0: [[304.0], [305.0]], p1: [[306.0], [307.0], [308.0]], p2: [309.0], p3: [[310.0], [311.0]]), p1: [[s0(p0: [[312.0], [313.0]], p1: [[314.0], [315.0], [316.0]], p2: [317.0], p3: [[318.0], [319.0]])]])], [s1(p0: s0(p0: [[320.0], [321.0]], p1: [[322.0], [323.0], [324.0]], p2: [325.0], p3: [[326.0], [327.0]]), p1: [[s0(p0: [[328.0], [329.0]], p1: [[330.0], [331.0], [332.0]], p2: [333.0], p3: [[334.0], [335.0]])]])]]), s2(p0: [s0(p0: [[336.0], [337.0]], p1: [[338.0], [339.0], [340.0]], p2: [341.0], p3: [[342.0], [343.0]]), s0(p0: [[344.0], [345.0]], p1: [[346.0], [347.0], [348.0]], p2: [349.0], p3: [[350.0], [351.0]]), s0(p0: [[352.0], [353.0]], p1: [[354.0], [355.0], [356.0]], p2: [357.0], p3: [[358.0], [359.0]])], p1: [[s1(p0: s0(p0: [[360.0], [361.0]], p1: [[362.0], [363.0], [364.0]], p2: [365.0], p3: [[366.0], [367.0]]), p1: [[s0(p0: [[368.0], [369.0]], p1: [[370.0], [371.0], [372.0]], p2: [373.0], p3: [[374.0], [375.0]])]])], [s1(p0: s0(p0: [[376.0], [377.0]], p1: [[378.0], [379.0], [380.0]], p2: [381.0], p3: [[382.0], [383.0]]), p1: [[s0(p0: [[384.0], [385.0]], p1: [[386.0], [387.0], [388.0]], p2: [389.0], p3: [[390.0], [391.0]])]])], [s1(p0: s0(p0: [[392.0], [393.0]], p1: [[394.0], [395.0], [396.0]], p2: [397.0], p3: [[398.0], [399.0]]), p1: [[s0(p0: [[400.0], [401.0]], p1: [[402.0], [403.0], [404.0]], p2: [405.0], p3: [[406.0], [407.0]])]])]]), s2(p0: [s0(p0: [[408.0], [409.0]], p1: [[410.0], [411.0], [412.0]], p2: [413.0], p3: [[414.0], [415.0]]), s0(p0: [[416.0], [417.0]], p1: [[418.0], [419.0], [420.0]], p2: [421.0], p3: [[422.0], [423.0]]), s0(p0: [[424.0], [425.0]], p1: [[426.0], [427.0], [428.0]], p2: [429.0], p3: [[430.0], [431.0]])], p1: [[s1(p0: s0(p0: [[432.0], [433.0]], p1: [[434.0], [435.0], [436.0]], p2: [437.0], p3: [[438.0], [439.0]]), p1: [[s0(p0: [[440.0], [441.0]], p1: [[442.0], [443.0], [444.0]], p2: [445.0], p3: [[446.0], [447.0]])]])], [s1(p0: s0(p0: [[448.0], [449.0]], p1: [[450.0], [451.0], [452.0]], p2: [453.0], p3: [[454.0], [455.0]]), p1: [[s0(p0: [[456.0], [457.0]], p1: [[458.0], [459.0], [460.0]], p2: [461.0], p3: [[462.0], [463.0]])]])], [s1(p0: s0(p0: [[464.0], [465.0]], p1: [[466.0], [467.0], [468.0]], p2: [469.0], p3: [[470.0], [471.0]]), p1: [[s0(p0: [[472.0], [473.0]], p1: [[474.0], [475.0], [476.0]], p2: [477.0], p3: [[478.0], [479.0]])]])]])], p1: [s1(p0: s0(p0: [[480.0], [481.0]], p1: [[482.0], [483.0], [484.0]], p2: [485.0], p3: [[486.0], [487.0]]), p1: [[s0(p0: [[488.0], [489.0]], p1: [[490.0], [491.0], [492.0]], p2: [493.0], p3: [[494.0], [495.0]])]]), s1(p0: s0(p0: [[496.0], [497.0]], p1: [[498.0], [499.0], [500.0]], p2: [501.0], p3: [[502.0], [503.0]]), p1: [[s0(p0: [[504.0], [505.0]], p1: [[506.0], [507.0], [508.0]], p2: [509.0], p3: [[510.0], [511.0]])]]), s1(p0: s0(p0: [[512.0], [513.0]], p1: [[514.0], [515.0], [516.0]], p2: [517.0], p3: [[518.0], [519.0]]), p1: [[s0(p0: [[520.0], [521.0]], p1: [[522.0], [523.0], [524.0]], p2: [525.0], p3: [[526.0], [527.0]])]])]), s7(p0: [s2(p0: [s0(p0: [[528.0], [529.0]], p1: [[530.0], [531.0], [532.0]], p2: [533.0], p3: [[534.0], [535.0]]), s0(p0: [[536.0], [537.0]], p1: [[538.0], [539.0], [540.0]], p2: [541.0], p3: [[542.0], [543.0]]), s0(p0: [[544.0], [545.0]], p1: [[546.0], [547.0], [548.0]], p2: [549.0], p3: [[550.0], [551.0]])], p1: [[s1(p0: s0(p0: [[552.0], [553.0]], p1: [[554.0], [555.0], [556.0]], p2: [557.0], p3: [[558.0], [559.0]]), p1: [[s0(p0: [[560.0], [561.0]], p1: [[562.0], [563.0], [564.0]], p2: [565.0], p3: [[566.0], [567.0]])]])], [s1(p0: s0(p0: [[568.0], [569.0]], p1: [[570.0], [571.0], [572.0]], p2: [573.0], p3: [[574.0], [575.0]]), p1: [[s0(p0: [[576.0], [577.0]], p1: [[578.0], [579.0], [580.0]], p2: [581.0], p3: [[582.0], [583.0]])]])], [s1(p0: s0(p0: [[584.0], [585.0]], p1: [[586.0], [587.0], [588.0]], p2: [589.0], p3: [[590.0], [591.0]]), p1: [[s0(p0: [[592.0], [593.0]], p1: [[594.0], [595.0], [596.0]], p2: [597.0], p3: [[598.0], [599.0]])]])]]), s2(p0: [s0(p0: [[600.0], [601.0]], p1: [[602.0], [603.0], [604.0]], p2: [605.0], p3: [[606.0], [607.0]]), s0(p0: [[608.0], [609.0]], p1: [[610.0], [611.0], [612.0]], p2: [613.0], p3: [[614.0], [615.0]]), s0(p0: [[616.0], [617.0]], p1: [[618.0], [619.0], [620.0]], p2: [621.0], p3: [[622.0], [623.0]])], p1: [[s1(p0: s0(p0: [[624.0], [625.0]], p1: [[626.0], [627.0], [628.0]], p2: [629.0], p3: [[630.0], [631.0]]), p1: [[s0(p0: [[632.0], [633.0]], p1: [[634.0], [635.0], [636.0]], p2: [637.0], p3: [[638.0], [639.0]])]])], [s1(p0: s0(p0: [[640.0], [641.0]], p1: [[642.0], [643.0], [644.0]], p2: [645.0], p3: [[646.0], [647.0]]), p1: [[s0(p0: [[648.0], [649.0]], p1: [[650.0], [651.0], [652.0]], p2: [653.0], p3: [[654.0], [655.0]])]])], [s1(p0: s0(p0: [[656.0], [657.0]], p1: [[658.0], [659.0], [660.0]], p2: [661.0], p3: [[662.0], [663.0]]), p1: [[s0(p0: [[664.0], [665.0]], p1: [[666.0], [667.0], [668.0]], p2: [669.0], p3: [[670.0], [671.0]])]])]]), s2(p0: [s0(p0: [[672.0], [673.0]], p1: [[674.0], [675.0], [676.0]], p2: [677.0], p3: [[678.0], [679.0]]), s0(p0: [[680.0], [681.0]], p1: [[682.0], [683.0], [684.0]], p2: [685.0], p3: [[686.0], [687.0]]), s0(p0: [[688.0], [689.0]], p1: [[690.0], [691.0], [692.0]], p2: [693.0], p3: [[694.0], [695.0]])], p1: [[s1(p0: s0(p0: [[696.0], [697.0]], p1: [[698.0], [699.0], [700.0]], p2: [701.0], p3: [[702.0], [703.0]]), p1: [[s0(p0: [[704.0], [705.0]], p1: [[706.0], [707.0], [708.0]], p2: [709.0], p3: [[710.0], [711.0]])]])], [s1(p0: s0(p0: [[712.0], [713.0]], p1: [[714.0], [715.0], [716.0]], p2: [717.0], p3: [[718.0], [719.0]]), p1: [[s0(p0: [[720.0], [721.0]], p1: [[722.0], [723.0], [724.0]], p2: [725.0], p3: [[726.0], [727.0]])]])], [s1(p0: s0(p0: [[728.0], [729.0]], p1: [[730.0], [731.0], [732.0]], p2: [733.0], p3: [[734.0], [735.0]]), p1: [[s0(p0: [[736.0], [737.0]], p1: [[738.0], [739.0], [740.0]], p2: [741.0], p3: [[742.0], [743.0]])]])]])], p1: [s1(p0: s0(p0: [[744.0], [745.0]], p1: [[746.0], [747.0], [748.0]], p2: [749.0], p3: [[750.0], [751.0]]), p1: [[s0(p0: [[752.0], [753.0]], p1: [[754.0], [755.0], [756.0]], p2: [757.0], p3: [[758.0], [759.0]])]]), s1(p0: s0(p0: [[760.0], [761.0]], p1: [[762.0], [763.0], [764.0]], p2: [765.0], p3: [[766.0], [767.0]]), p1: [[s0(p0: [[768.0], [769.0]], p1: [[770.0], [771.0], [772.0]], p2: [773.0], p3: [[774.0], [775.0]])]]), s1(p0: s0(p0: [[776.0], [777.0]], p1: [[778.0], [779.0], [780.0]], p2: [781.0], p3: [[782.0], [783.0]]), p1: [[s0(p0: [[784.0], [785.0]], p1: [[786.0], [787.0], [788.0]], p2: [789.0], p3: [[790.0], [791.0]])]])])]
    let v1: s1 = s1(p0: s0(p0: [[792.0], [793.0]], p1: [[794.0], [795.0], [796.0]], p2: [797.0], p3: [[798.0], [799.0]]), p1: [[s0(p0: [[800.0], [801.0]], p1: [[802.0], [803.0], [804.0]], p2: [805.0], p3: [[806.0], [807.0]])]])
    let v2: Double = 808.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 808.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
