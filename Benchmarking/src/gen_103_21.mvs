  struct s0 {
    var p0: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s2 {
    var p0: s1
    var p1: [s0]
  } in
  struct s3 {
    var p0: [[s2]]
    var p1: [s1]
  } in
  struct s4 {
    var p0: [s1]
    var p1: s0
    var p2: s3
    var p3: s2
    var p4: [s2]
    var p5: s1
    var p6: [[s1]]
    var p7: s1
  } in
  struct s6 {
    var p0: [s0]
    var p1: [s2]
  } in
  let f73: (Float) -> Float = (v0: Float) -> Float {
    var v3: Float = v0 in
    var v2: Float = v3 in
    let v4: Float = v0 + v0 in
    var v7: Float = v0 in
    var v11: Float = v3 in
    var v5: Float = v4 in
    var v1: Float = v2 in
    let v13: Float = v4 - v11 in
    var v21: Float = v1 in
    v7 = v21 in
    let v18: [Float] = [v3, v21] in
    var v16: [Float] = v18 in
    v16[1] = v13 in
    let v12: Float = v16[0] in
    var v14: [Float] = v18 in
    let v25: Float = v16[1] in
    var v15: [Float] = v18 in
    v16[0] = v5 in
    var v37: [Float] = v15 in
    var v46: Float = v11 in
    var v31: [Float] = v14 in
    v14[1] = v13 in
    v31[1] = v7 in
    let v41: Float = v14[0] in
    let v34: Float = v16[0] in
    let v29: Float = v37[1] in
    var v70: Float = v1 in
    var v69: Float = v70 in
    var v47: Float = v12 in
    v37[1] = v47 in
    v31[1] = v34 in
    v14[1] = v5 in
    let v123: Float = v31[0] in
    var v59: Float = v11 in
    v14[1] = v25 in
    let v85: [Float] = [v123, v29, v59, v46, v69, v5] in
    v14[0] = v41 in
    var v64: [Float] = v85 in
    let v145: Float = v64[3] in
    v145
  } in
  let noinline_f0: (s4, [s3], s6, Float) -> Float = (v0: s4, v1: [s3], v2: s6, v3: Float) -> Float {
    var v7: Float = v3 in
    let v37: Float = f73(v7) in
    let v111: Float = f73(v37) in
    v111
  } in
  fun loop(i: Int, v0: s4, v1: [s3], v2: s6, v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s4 = s4([s1([s0([[0.0], [1.0], [2.0]])], [s0([[3.0], [4.0], [5.0]])])], s0([[6.0], [7.0], [8.0]]), s3([[s2(s1([s0([[9.0], [10.0], [11.0]])], [s0([[12.0], [13.0], [14.0]])]), [s0([[15.0], [16.0], [17.0]]), s0([[18.0], [19.0], [20.0]]), s0([[21.0], [22.0], [23.0]])])], [s2(s1([s0([[24.0], [25.0], [26.0]])], [s0([[27.0], [28.0], [29.0]])]), [s0([[30.0], [31.0], [32.0]]), s0([[33.0], [34.0], [35.0]]), s0([[36.0], [37.0], [38.0]])])], [s2(s1([s0([[39.0], [40.0], [41.0]])], [s0([[42.0], [43.0], [44.0]])]), [s0([[45.0], [46.0], [47.0]]), s0([[48.0], [49.0], [50.0]]), s0([[51.0], [52.0], [53.0]])])]], [s1([s0([[54.0], [55.0], [56.0]])], [s0([[57.0], [58.0], [59.0]])]), s1([s0([[60.0], [61.0], [62.0]])], [s0([[63.0], [64.0], [65.0]])]), s1([s0([[66.0], [67.0], [68.0]])], [s0([[69.0], [70.0], [71.0]])])]), s2(s1([s0([[72.0], [73.0], [74.0]])], [s0([[75.0], [76.0], [77.0]])]), [s0([[78.0], [79.0], [80.0]]), s0([[81.0], [82.0], [83.0]]), s0([[84.0], [85.0], [86.0]])]), [s2(s1([s0([[87.0], [88.0], [89.0]])], [s0([[90.0], [91.0], [92.0]])]), [s0([[93.0], [94.0], [95.0]]), s0([[96.0], [97.0], [98.0]]), s0([[99.0], [100.0], [101.0]])]), s2(s1([s0([[102.0], [103.0], [104.0]])], [s0([[105.0], [106.0], [107.0]])]), [s0([[108.0], [109.0], [110.0]]), s0([[111.0], [112.0], [113.0]]), s0([[114.0], [115.0], [116.0]])])], s1([s0([[117.0], [118.0], [119.0]])], [s0([[120.0], [121.0], [122.0]])]), [[s1([s0([[123.0], [124.0], [125.0]])], [s0([[126.0], [127.0], [128.0]])])], [s1([s0([[129.0], [130.0], [131.0]])], [s0([[132.0], [133.0], [134.0]])])]], s1([s0([[135.0], [136.0], [137.0]])], [s0([[138.0], [139.0], [140.0]])])) in
    let v1: [s3] = [s3([[s2(s1([s0([[141.0], [142.0], [143.0]])], [s0([[144.0], [145.0], [146.0]])]), [s0([[147.0], [148.0], [149.0]]), s0([[150.0], [151.0], [152.0]]), s0([[153.0], [154.0], [155.0]])])], [s2(s1([s0([[156.0], [157.0], [158.0]])], [s0([[159.0], [160.0], [161.0]])]), [s0([[162.0], [163.0], [164.0]]), s0([[165.0], [166.0], [167.0]]), s0([[168.0], [169.0], [170.0]])])], [s2(s1([s0([[171.0], [172.0], [173.0]])], [s0([[174.0], [175.0], [176.0]])]), [s0([[177.0], [178.0], [179.0]]), s0([[180.0], [181.0], [182.0]]), s0([[183.0], [184.0], [185.0]])])]], [s1([s0([[186.0], [187.0], [188.0]])], [s0([[189.0], [190.0], [191.0]])]), s1([s0([[192.0], [193.0], [194.0]])], [s0([[195.0], [196.0], [197.0]])]), s1([s0([[198.0], [199.0], [200.0]])], [s0([[201.0], [202.0], [203.0]])])]), s3([[s2(s1([s0([[204.0], [205.0], [206.0]])], [s0([[207.0], [208.0], [209.0]])]), [s0([[210.0], [211.0], [212.0]]), s0([[213.0], [214.0], [215.0]]), s0([[216.0], [217.0], [218.0]])])], [s2(s1([s0([[219.0], [220.0], [221.0]])], [s0([[222.0], [223.0], [224.0]])]), [s0([[225.0], [226.0], [227.0]]), s0([[228.0], [229.0], [230.0]]), s0([[231.0], [232.0], [233.0]])])], [s2(s1([s0([[234.0], [235.0], [236.0]])], [s0([[237.0], [238.0], [239.0]])]), [s0([[240.0], [241.0], [242.0]]), s0([[243.0], [244.0], [245.0]]), s0([[246.0], [247.0], [248.0]])])]], [s1([s0([[249.0], [250.0], [251.0]])], [s0([[252.0], [253.0], [254.0]])]), s1([s0([[255.0], [256.0], [257.0]])], [s0([[258.0], [259.0], [260.0]])]), s1([s0([[261.0], [262.0], [263.0]])], [s0([[264.0], [265.0], [266.0]])])]), s3([[s2(s1([s0([[267.0], [268.0], [269.0]])], [s0([[270.0], [271.0], [272.0]])]), [s0([[273.0], [274.0], [275.0]]), s0([[276.0], [277.0], [278.0]]), s0([[279.0], [280.0], [281.0]])])], [s2(s1([s0([[282.0], [283.0], [284.0]])], [s0([[285.0], [286.0], [287.0]])]), [s0([[288.0], [289.0], [290.0]]), s0([[291.0], [292.0], [293.0]]), s0([[294.0], [295.0], [296.0]])])], [s2(s1([s0([[297.0], [298.0], [299.0]])], [s0([[300.0], [301.0], [302.0]])]), [s0([[303.0], [304.0], [305.0]]), s0([[306.0], [307.0], [308.0]]), s0([[309.0], [310.0], [311.0]])])]], [s1([s0([[312.0], [313.0], [314.0]])], [s0([[315.0], [316.0], [317.0]])]), s1([s0([[318.0], [319.0], [320.0]])], [s0([[321.0], [322.0], [323.0]])]), s1([s0([[324.0], [325.0], [326.0]])], [s0([[327.0], [328.0], [329.0]])])])] in
    let v2: s6 = s6([s0([[330.0], [331.0], [332.0]]), s0([[333.0], [334.0], [335.0]])], [s2(s1([s0([[336.0], [337.0], [338.0]])], [s0([[339.0], [340.0], [341.0]])]), [s0([[342.0], [343.0], [344.0]]), s0([[345.0], [346.0], [347.0]]), s0([[348.0], [349.0], [350.0]])]), s2(s1([s0([[351.0], [352.0], [353.0]])], [s0([[354.0], [355.0], [356.0]])]), [s0([[357.0], [358.0], [359.0]]), s0([[360.0], [361.0], [362.0]]), s0([[363.0], [364.0], [365.0]])]), s2(s1([s0([[366.0], [367.0], [368.0]])], [s0([[369.0], [370.0], [371.0]])]), [s0([[372.0], [373.0], [374.0]]), s0([[375.0], [376.0], [377.0]]), s0([[378.0], [379.0], [380.0]])])]) in
    let v3: Float = 381.0 in
    let initialResult: Float = 381.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()