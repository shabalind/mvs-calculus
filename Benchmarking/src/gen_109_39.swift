  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: Double
    var p1: s0
  }
  struct s2 {
    var p0: [s1]
    var p1: [[s1]]
  }
  struct s4 {
    var p0: s1
    var p1: s1
  }
  struct s5 {
    var p0: s2
    var p1: [[s0]]
  }
  struct s9 {
    var p0: [s5]
    var p1: s4
  }
  struct s10 {
    var p0: s9
    var p1: s2
  }
  @inline(never)
  func f0(_ v0: [s10], _ v1: Double) -> Double {
    let v6: s10 = v0[0]
    let v4: s9 = v6.p0
    let v26: s4 = v4.p1
    let v47: s1 = v26.p1
    let v104: s0 = v47.p1
    var v62: s0 = v104
    v62 = v104
    let v220: [[Double]] = v62.p1
    let v130: [Double] = v220[0]
    let v168: Double = v130[0]
    return v168
  }
  func benchmark() {
    let v0: [s10] = [s10(p0: s9(p0: [s5(p0: s2(p0: [s1(p0: 0.0, p1: s0(p0: [[1.0], [2.0], [3.0]], p1: [[4.0], [5.0], [6.0]])), s1(p0: 7.0, p1: s0(p0: [[8.0], [9.0], [10.0]], p1: [[11.0], [12.0], [13.0]])), s1(p0: 14.0, p1: s0(p0: [[15.0], [16.0], [17.0]], p1: [[18.0], [19.0], [20.0]]))], p1: [[s1(p0: 21.0, p1: s0(p0: [[22.0], [23.0], [24.0]], p1: [[25.0], [26.0], [27.0]]))]]), p1: [[s0(p0: [[28.0], [29.0], [30.0]], p1: [[31.0], [32.0], [33.0]])]]), s5(p0: s2(p0: [s1(p0: 34.0, p1: s0(p0: [[35.0], [36.0], [37.0]], p1: [[38.0], [39.0], [40.0]])), s1(p0: 41.0, p1: s0(p0: [[42.0], [43.0], [44.0]], p1: [[45.0], [46.0], [47.0]])), s1(p0: 48.0, p1: s0(p0: [[49.0], [50.0], [51.0]], p1: [[52.0], [53.0], [54.0]]))], p1: [[s1(p0: 55.0, p1: s0(p0: [[56.0], [57.0], [58.0]], p1: [[59.0], [60.0], [61.0]]))]]), p1: [[s0(p0: [[62.0], [63.0], [64.0]], p1: [[65.0], [66.0], [67.0]])]])], p1: s4(p0: s1(p0: 68.0, p1: s0(p0: [[69.0], [70.0], [71.0]], p1: [[72.0], [73.0], [74.0]])), p1: s1(p0: 75.0, p1: s0(p0: [[76.0], [77.0], [78.0]], p1: [[79.0], [80.0], [81.0]])))), p1: s2(p0: [s1(p0: 82.0, p1: s0(p0: [[83.0], [84.0], [85.0]], p1: [[86.0], [87.0], [88.0]])), s1(p0: 89.0, p1: s0(p0: [[90.0], [91.0], [92.0]], p1: [[93.0], [94.0], [95.0]])), s1(p0: 96.0, p1: s0(p0: [[97.0], [98.0], [99.0]], p1: [[100.0], [101.0], [102.0]]))], p1: [[s1(p0: 103.0, p1: s0(p0: [[104.0], [105.0], [106.0]], p1: [[107.0], [108.0], [109.0]]))]]))]
    let v1: Double = 110.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 110.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
