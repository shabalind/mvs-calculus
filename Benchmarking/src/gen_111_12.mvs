  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s2 {
    var p0: s1
    var p1: s0
  } in
  struct s3 {
    var p0: [s1]
    var p1: [[s0]]
  } in
  let noinline_f0: ([s2], [s3], s2, Float) -> Float = (v0: [s2], v1: [s3], v2: s2, v3: Float) -> Float {
    let v6: s1 = v2.p0 in
    let v8: [s0] = v6.p0 in
    var v21: s2 = v2 in
    v21.p0 = v6 in
    let v25: s0 = v8[0] in
    v21.p1 = v25 in
    var v18: s0 = v25 in
    v21.p0 = v6 in
    v21.p0 = v6 in
    var v29: s0 = v25 in
    v21.p1 = v18 in
    var v20: s0 = v25 in
    let v36: s0 = v2.p1 in
    v21.p1 = v20 in
    v21.p1 = v29 in
    let v38: [[Float]] = v36.p1 in
    let v69: s0 = v21.p1 in
    let v70: [[Float]] = v36.p1 in
    v20.p1 = v38 in
    let v86: [[Float]] = v69.p1 in
    let v93: [Float] = v86[0] in
    v18.p1 = v70 in
    let v116: Float = v93[0] in
    v116
  } in
  fun loop(i: Int, v0: [s2], v1: [s3], v2: s2, v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2(s1([s0([[0.0], [1.0], [2.0]], [[3.0]]), s0([[4.0], [5.0], [6.0]], [[7.0]])], s0([[8.0], [9.0], [10.0]], [[11.0]])), s0([[12.0], [13.0], [14.0]], [[15.0]]))] in
    let v1: [s3] = [s3([s1([s0([[16.0], [17.0], [18.0]], [[19.0]]), s0([[20.0], [21.0], [22.0]], [[23.0]])], s0([[24.0], [25.0], [26.0]], [[27.0]]))], [[s0([[28.0], [29.0], [30.0]], [[31.0]])]])] in
    let v2: s2 = s2(s1([s0([[32.0], [33.0], [34.0]], [[35.0]]), s0([[36.0], [37.0], [38.0]], [[39.0]])], s0([[40.0], [41.0], [42.0]], [[43.0]])), s0([[44.0], [45.0], [46.0]], [[47.0]])) in
    let v3: Float = 48.0 in
    let initialResult: Float = 48.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()