  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: [[s0]]
    var p1: s1
  } in
  struct s4 {
    var p0: [s0]
    var p1: s2
  } in
  let noinline_f0: (s4, s1, [s0], Float) -> Float = (v0: s4, v1: s1, v2: [s0], v3: Float) -> Float {
    let v13: s0 = v2[0] in
    let v12: [[Float]] = v13.p0 in
    let v20: s0 = v2[0] in
    let v21: [[Float]] = v20.p1 in
    var v35: [[Float]] = v21 in
    let v80: [Float] = v35[0] in
    var v43: [Float] = v80 in
    let v88: Float = v80[0] in
    let v76: [Float] = v12[0] in
    let v64: [Float] = v35[0] in
    let v65: [Float] = v12[0] in
    v35[1] = v43 in
    let v62: Float = v43[0] in
    var v70: [Float] = v80 in
    let v86: Float = v64[0] in
    v43[0] = v88 in
    let v140: Float = v70[0] in
    v70[0] = v86 in
    v35[1] = v76 in
    v43[0] = v140 in
    v35[0] = v65 in
    v62
  } in
  fun loop(i: Int, v0: s4, v1: s1, v2: [s0], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s4 = s4([s0([[0.0]], [[1.0], [2.0]]), s0([[3.0]], [[4.0], [5.0]]), s0([[6.0]], [[7.0], [8.0]])], s2([[s0([[9.0]], [[10.0], [11.0]])], [s0([[12.0]], [[13.0], [14.0]])]], s1(s0([[15.0]], [[16.0], [17.0]]), [[s0([[18.0]], [[19.0], [20.0]])], [s0([[21.0]], [[22.0], [23.0]])]]))) in
    let v1: s1 = s1(s0([[24.0]], [[25.0], [26.0]]), [[s0([[27.0]], [[28.0], [29.0]])], [s0([[30.0]], [[31.0], [32.0]])]]) in
    let v2: [s0] = [s0([[33.0]], [[34.0], [35.0]])] in
    let v3: Float = 36.0 in
    let initialResult: Float = 36.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()