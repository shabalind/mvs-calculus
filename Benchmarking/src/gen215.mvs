  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s3 {
    var p0: s1
    var p1: s0
    var p2: s0
    var p3: [[s1]]
  } in
  let noinline_f0: (s0, s3, Float) -> Float = (v0: s0, v1: s3, v2: Float) -> Float {
    let v7: Float = v2 + v2 in
    let v6: Float = v2 - v7 in
    var v21: Float = v6 in
    v21 = v6 in
    let v73: [Float] = [v21] in
    let v60: Float = v2 + v6 in
    let v46: Float = v73[0] in
    let v81: Float = v2 * v60 in
    let v134: Float = v46 + v60 in
    let v148: Float = v81 * v134 in
    v148
  } in
  fun loop(i: Int, v0: s0, v1: s3, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0]], [[2.0]]) in
    let v1: s3 = s3(s1(s0([[3.0], [4.0]], [[5.0]]), s0([[6.0], [7.0]], [[8.0]])), s0([[9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0]], [[14.0]]), [[s1(s0([[15.0], [16.0]], [[17.0]]), s0([[18.0], [19.0]], [[20.0]]))], [s1(s0([[21.0], [22.0]], [[23.0]]), s0([[24.0], [25.0]], [[26.0]]))], [s1(s0([[27.0], [28.0]], [[29.0]]), s0([[30.0], [31.0]], [[32.0]]))]]) in
    let v2: Float = 33.0 in
    let initialResult: Float = 33.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()