  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [Double]
    var p3: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: s0
    var p2: s0
  }
  struct s2 {
    var p0: s1
    var p1: [s0]
  }
  struct s3 {
    var p0: [s2]
    var p1: [[s2]]
  }
  struct s4 {
    var p0: [s3]
    var p1: [[s2]]
    var p2: [s0]
  }
  struct s5 {
    var p0: s0
    var p1: [s1]
  }
  struct s6 {
    var p0: s0
    var p1: s4
  }
  struct s7 {
    var p0: s5
    var p1: s6
    var p2: [s1]
    var p3: [s0]
    var p4: s1
    var p5: [[s5]]
  }
  func f39(_ v0: s1) -> s1 {
    var v4: s1 = v0
    let v6: [s0] = v4.p0
    let v5: s0 = v6[0]
    let v7: [[Double]] = v5.p1
    v4 = v0
    var v2: s0 = v5
    v4.p0 = v6
    let v1: s0 = v4.p1
    let v10: [[Double]] = v2.p3
    var v17: [[Double]] = v7
    v4.p2 = v1
    var v18: [s0] = v6
    var v15: s0 = v5
    v15.p1 = v17
    let v19: [s0] = v0.p0
    let v35: [Double] = v1.p2
    v15.p3 = v10
    v18 = v19
    v4.p0 = v18
    let v21: s0 = v4.p1
    let v27: [[Double]] = v21.p1
    v2 = v5
    var v24: s1 = v4
    let v52: s0 = v4.p2
    var v39: s0 = v15
    var v49: [Double] = v35
    v39.p1 = v27
    v24.p1 = v39
    v2.p2 = v49
    v4.p2 = v52
    return v24
  }
  func f37(_ v0: s7, _ v1: s4) -> s7 {
    var v4: s4 = v1
    let v7: [[s5]] = v0.p5
    let v9: [s1] = v0.p2
    var v5: s7 = v0
    var v10: s7 = v5
    let v16: [[s5]] = v5.p5
    let v22: [s1] = v0.p2
    v10.p5 = v16
    let v23: [s0] = v4.p2
    let v14: [s5] = v7[1]
    let v13: s5 = v14[0]
    let v29: s0 = v23[0]
    let v24: s0 = v13.p0
    v10.p2 = v22
    var v46: s7 = v10
    var v51: s0 = v29
    v4.p2 = v23
    let v76: [s0] = [v24, v51]
    v5.p2 = v9
    v46.p3 = v76
    v5 = v46
    return v46
  }
  func f34(_ v0: s0) -> s0 {
    return v0
  }
  func f24(_ v0: s1) -> s1 {
    var v4: s1 = v0
    let v3: [s0] = v4.p0
    let v8: s0 = v4.p1
    let v6: s1 = f39(v0)
    v4.p1 = v8
    var v1: [s0] = v3
    let v2: s0 = f34(v8)
    var v9: s0 = v8
    v4.p2 = v2
    let v12: [s0] = [v8]
    v1[0] = v9
    let v16: s0 = v1[0]
    let v18: s0 = v12[0]
    v4.p0 = v1
    let v14: [[Double]] = v2.p3
    let v20: [[Double]] = v2.p1
    let v25: s0 = v3[0]
    let v58: [Double] = v20[1]
    var v17: [[Double]] = v14
    let v27: s1 = s1(p0: v1, p1: v16, p2: v25)
    let v79: [Double] = v9.p2
    let v34: [Double] = v20[1]
    v9.p1 = v20
    v4.p2 = v2
    var v56: [s0] = v12
    let v37: s0 = v6.p1
    v9.p2 = v79
    v4.p0 = v56
    v9.p3 = v14
    v17[2] = v58
    let v76: s0 = v0.p2
    v4.p2 = v76
    v17[1] = v34
    var v89: [[Double]] = v17
    let v29: [[Double]] = v16.p0
    v9.p3 = v89
    var v70: [[Double]] = v29
    v56[0] = v18
    v56[0] = v37
    v9.p0 = v70
    return v27
  }
  func f23(_ v0: s7) -> s7 {
    return v0
  }
  func f21(_ v0: s0) -> s0 {
    let v2: [[Double]] = v0.p0
    var v6: [[Double]] = v2
    var v4: [[Double]] = v6
    var v5: s0 = v0
    let v7: [Double] = v6[0]
    let v3: [[Double]] = v5.p1
    var v11: [[Double]] = v3
    var v8: [[Double]] = v3
    let v19: [Double] = v5.p2
    let v10: [[Double]] = v5.p3
    v4[0] = v7
    let v15: s0 = s0(p0: v4, p1: v3, p2: v19, p3: v10)
    let v14: [Double] = v5.p2
    v5.p1 = v11
    let v12: s0 = f34(v0)
    v5.p2 = v19
    let v20: s0 = f34(v0)
    let v22: s0 = f34(v12)
    v5.p3 = v10
    let v59: [[Double]] = v5.p1
    v5.p2 = v19
    v4[0] = v7
    var v27: [[Double]] = v59
    let v21: s0 = f34(v12)
    v5.p0 = v2
    let v30: s0 = f34(v0)
    let v32: Double = v14[1]
    v8[0] = v7
    let v36: [[Double]] = v12.p3
    v4[0] = v7
    let v18: s0 = f34(v22)
    v5.p2 = v14
    let v24: s0 = f34(v12)
    let v40: s0 = f34(v20)
    let v34: [Double] = v36[0]
    let v38: [Double] = v10[2]
    var v54: [Double] = v34
    let v29: [[Double]] = v21.p1
    let v43: s0 = f34(v15)
    v8[0] = v34
    let v52: Double = v34[0]
    v6[0] = v38
    v11 = v59
    v54[0] = v32
    let v35: s0 = s0(p0: v2, p1: v59, p2: v19, p3: v10)
    let v33: Double = v52 * v32
    let v31: [[Double]] = v24.p3
    let v64: [[Double]] = v43.p0
    let v108: s0 = f34(v15)
    let v146: [Double] = v22.p2
    v8[0] = v34
    v5.p3 = v10
    let v91: [Double] = v10[1]
    v8[1] = v54
    let v70: [Double] = v8[0]
    var v73: Double = v33
    v8[1] = v91
    v54[0] = v73
    v5.p1 = v27
    v5.p3 = v31
    v5.p2 = v146
    v4[0] = v7
    let v84: s0 = f34(v40)
    v27[1] = v70
    v5.p0 = v64
    v27[1] = v34
    let v87: s0 = f34(v0)
    v11[1] = v34
    let v98: s0 = f34(v43)
    let v191: [s0] = [v35, v98, v18, v21, v108, v87, v30]
    v27[0] = v7
    v5.p0 = v4
    var v132: [s0] = v191
    let v134: s0 = v132[0]
    v27[0] = v7
    v5.p1 = v29
    v54[0] = v32
    v132[5] = v84
    return v134
  }
  func f18(_ v0: s4) -> s4 {
    var v4: s4 = v0
    let v3: [[s2]] = v4.p1
    v4.p1 = v3
    v4 = v0
    let v1: [s0] = v4.p2
    let v11: s0 = v1[0]
    let v12: [[s2]] = v0.p1
    v4.p1 = v12
    let v19: [s2] = v12[1]
    v4.p1 = v12
    v4.p1 = v12
    var v31: [s2] = v19
    v4.p1 = v12
    let v33: s2 = v31[0]
    let v34: s0 = f34(v11)
    let v100: [[s2]] = v0.p1
    let v64: s6 = s6(p0: v34, p1: v0)
    let v157: s1 = v33.p0
    let v117: [s0] = v157.p0
    var v91: s6 = v64
    v4.p1 = v100
    let v84: s4 = v91.p1
    v4.p1 = v100
    v91.p1 = v84
    v4.p2 = v117
    let v126: s4 = v91.p1
    return v126
  }
  func f7(_ v0: Double) -> Double {
    var v4: Double = v0
    var v5: Double = v4
    var v3: Double = v4
    var v11: Double = v3
    var v15: Double = v11
    var v19: Double = v15
    var v10: Double = v11
    let v17: [Double] = [v19, v5, v0, v10, v0]
    var v23: [Double] = v17
    let v20: [[Double]] = [v17, v23, v23]
    let v24: [Double] = v20[1]
    let v61: [Double] = v20[1]
    let v58: Double = v24[3]
    var v63: [Double] = v61
    let v47: Double = v63[4]
    v63[1] = v58
    return v47
  }
  @inline(never)
  func f0(_ v0: [s7], _ v1: Double) -> Double {
    var v4: [s7] = v0
    var v6: Double = v1
    let v3: Double = f7(v1)
    let v7: Double = f7(v6)
    v6 = v3
    let v8: s7 = v0[0]
    var v10: s7 = v8
    var v19: [s7] = v0
    v19[0] = v10
    let v9: s7 = f23(v8)
    let v18: s1 = v10.p4
    let v15: s6 = v9.p1
    let v12: s7 = v4[0]
    let v21: s7 = v4[0]
    var v17: s1 = v18
    let v14: s1 = f39(v18)
    let v24: s7 = v4[0]
    let v28: s1 = f24(v14)
    let v22: s4 = v15.p1
    let v50: s4 = v15.p1
    let v36: [s0] = v28.p0
    let v62: [s0] = v50.p2
    let v33: s4 = f18(v22)
    v10.p1 = v15
    v4[0] = v10
    var v30: s7 = v21
    v17.p0 = v62
    var v31: s1 = v14
    let v34: s4 = v15.p1
    var v75: [s7] = v19
    let v37: s7 = v4[0]
    v19[0] = v24
    v30.p1 = v15
    v19[0] = v21
    v75[0] = v37
    v75[0] = v30
    let v64: s0 = v31.p2
    v19[0] = v37
    v4 = v75
    let v58: s0 = f21(v64)
    v17.p1 = v58
    let v54: s0 = v17.p1
    let v110: Double = v7 + v6
    let v82: [[Double]] = v54.p0
    var v102: [[Double]] = v82
    var v93: s4 = v33
    v17.p2 = v64
    let v73: [Double] = v102[0]
    v31.p0 = v36
    let v40: s7 = f23(v12)
    let v48: Double = v73[0]
    let v77: s7 = f37(v40, v34)
    v4[0] = v30
    v4[0] = v30
    let v119: Double = v110 * v48
    let v236: s7 = f37(v9, v93)
    v10 = v77
    let v153: s7 = v0[0]
    var v117: [s7] = v4
    v19 = v117
    v4[0] = v236
    v10 = v153
    return v119
  }
  func benchmark() {
    let v0: [s7] = [s7(p0: s5(p0: s0(p0: [[0.0]], p1: [[1.0], [2.0]], p2: [3.0, 4.0, 5.0], p3: [[6.0], [7.0], [8.0]]), p1: [s1(p0: [s0(p0: [[9.0]], p1: [[10.0], [11.0]], p2: [12.0, 13.0, 14.0], p3: [[15.0], [16.0], [17.0]])], p1: s0(p0: [[18.0]], p1: [[19.0], [20.0]], p2: [21.0, 22.0, 23.0], p3: [[24.0], [25.0], [26.0]]), p2: s0(p0: [[27.0]], p1: [[28.0], [29.0]], p2: [30.0, 31.0, 32.0], p3: [[33.0], [34.0], [35.0]])), s1(p0: [s0(p0: [[36.0]], p1: [[37.0], [38.0]], p2: [39.0, 40.0, 41.0], p3: [[42.0], [43.0], [44.0]])], p1: s0(p0: [[45.0]], p1: [[46.0], [47.0]], p2: [48.0, 49.0, 50.0], p3: [[51.0], [52.0], [53.0]]), p2: s0(p0: [[54.0]], p1: [[55.0], [56.0]], p2: [57.0, 58.0, 59.0], p3: [[60.0], [61.0], [62.0]])), s1(p0: [s0(p0: [[63.0]], p1: [[64.0], [65.0]], p2: [66.0, 67.0, 68.0], p3: [[69.0], [70.0], [71.0]])], p1: s0(p0: [[72.0]], p1: [[73.0], [74.0]], p2: [75.0, 76.0, 77.0], p3: [[78.0], [79.0], [80.0]]), p2: s0(p0: [[81.0]], p1: [[82.0], [83.0]], p2: [84.0, 85.0, 86.0], p3: [[87.0], [88.0], [89.0]]))]), p1: s6(p0: s0(p0: [[90.0]], p1: [[91.0], [92.0]], p2: [93.0, 94.0, 95.0], p3: [[96.0], [97.0], [98.0]]), p1: s4(p0: [s3(p0: [s2(p0: s1(p0: [s0(p0: [[99.0]], p1: [[100.0], [101.0]], p2: [102.0, 103.0, 104.0], p3: [[105.0], [106.0], [107.0]])], p1: s0(p0: [[108.0]], p1: [[109.0], [110.0]], p2: [111.0, 112.0, 113.0], p3: [[114.0], [115.0], [116.0]]), p2: s0(p0: [[117.0]], p1: [[118.0], [119.0]], p2: [120.0, 121.0, 122.0], p3: [[123.0], [124.0], [125.0]])), p1: [s0(p0: [[126.0]], p1: [[127.0], [128.0]], p2: [129.0, 130.0, 131.0], p3: [[132.0], [133.0], [134.0]]), s0(p0: [[135.0]], p1: [[136.0], [137.0]], p2: [138.0, 139.0, 140.0], p3: [[141.0], [142.0], [143.0]])]), s2(p0: s1(p0: [s0(p0: [[144.0]], p1: [[145.0], [146.0]], p2: [147.0, 148.0, 149.0], p3: [[150.0], [151.0], [152.0]])], p1: s0(p0: [[153.0]], p1: [[154.0], [155.0]], p2: [156.0, 157.0, 158.0], p3: [[159.0], [160.0], [161.0]]), p2: s0(p0: [[162.0]], p1: [[163.0], [164.0]], p2: [165.0, 166.0, 167.0], p3: [[168.0], [169.0], [170.0]])), p1: [s0(p0: [[171.0]], p1: [[172.0], [173.0]], p2: [174.0, 175.0, 176.0], p3: [[177.0], [178.0], [179.0]]), s0(p0: [[180.0]], p1: [[181.0], [182.0]], p2: [183.0, 184.0, 185.0], p3: [[186.0], [187.0], [188.0]])])], p1: [[s2(p0: s1(p0: [s0(p0: [[189.0]], p1: [[190.0], [191.0]], p2: [192.0, 193.0, 194.0], p3: [[195.0], [196.0], [197.0]])], p1: s0(p0: [[198.0]], p1: [[199.0], [200.0]], p2: [201.0, 202.0, 203.0], p3: [[204.0], [205.0], [206.0]]), p2: s0(p0: [[207.0]], p1: [[208.0], [209.0]], p2: [210.0, 211.0, 212.0], p3: [[213.0], [214.0], [215.0]])), p1: [s0(p0: [[216.0]], p1: [[217.0], [218.0]], p2: [219.0, 220.0, 221.0], p3: [[222.0], [223.0], [224.0]]), s0(p0: [[225.0]], p1: [[226.0], [227.0]], p2: [228.0, 229.0, 230.0], p3: [[231.0], [232.0], [233.0]])])], [s2(p0: s1(p0: [s0(p0: [[234.0]], p1: [[235.0], [236.0]], p2: [237.0, 238.0, 239.0], p3: [[240.0], [241.0], [242.0]])], p1: s0(p0: [[243.0]], p1: [[244.0], [245.0]], p2: [246.0, 247.0, 248.0], p3: [[249.0], [250.0], [251.0]]), p2: s0(p0: [[252.0]], p1: [[253.0], [254.0]], p2: [255.0, 256.0, 257.0], p3: [[258.0], [259.0], [260.0]])), p1: [s0(p0: [[261.0]], p1: [[262.0], [263.0]], p2: [264.0, 265.0, 266.0], p3: [[267.0], [268.0], [269.0]]), s0(p0: [[270.0]], p1: [[271.0], [272.0]], p2: [273.0, 274.0, 275.0], p3: [[276.0], [277.0], [278.0]])])]])], p1: [[s2(p0: s1(p0: [s0(p0: [[279.0]], p1: [[280.0], [281.0]], p2: [282.0, 283.0, 284.0], p3: [[285.0], [286.0], [287.0]])], p1: s0(p0: [[288.0]], p1: [[289.0], [290.0]], p2: [291.0, 292.0, 293.0], p3: [[294.0], [295.0], [296.0]]), p2: s0(p0: [[297.0]], p1: [[298.0], [299.0]], p2: [300.0, 301.0, 302.0], p3: [[303.0], [304.0], [305.0]])), p1: [s0(p0: [[306.0]], p1: [[307.0], [308.0]], p2: [309.0, 310.0, 311.0], p3: [[312.0], [313.0], [314.0]]), s0(p0: [[315.0]], p1: [[316.0], [317.0]], p2: [318.0, 319.0, 320.0], p3: [[321.0], [322.0], [323.0]])])], [s2(p0: s1(p0: [s0(p0: [[324.0]], p1: [[325.0], [326.0]], p2: [327.0, 328.0, 329.0], p3: [[330.0], [331.0], [332.0]])], p1: s0(p0: [[333.0]], p1: [[334.0], [335.0]], p2: [336.0, 337.0, 338.0], p3: [[339.0], [340.0], [341.0]]), p2: s0(p0: [[342.0]], p1: [[343.0], [344.0]], p2: [345.0, 346.0, 347.0], p3: [[348.0], [349.0], [350.0]])), p1: [s0(p0: [[351.0]], p1: [[352.0], [353.0]], p2: [354.0, 355.0, 356.0], p3: [[357.0], [358.0], [359.0]]), s0(p0: [[360.0]], p1: [[361.0], [362.0]], p2: [363.0, 364.0, 365.0], p3: [[366.0], [367.0], [368.0]])])], [s2(p0: s1(p0: [s0(p0: [[369.0]], p1: [[370.0], [371.0]], p2: [372.0, 373.0, 374.0], p3: [[375.0], [376.0], [377.0]])], p1: s0(p0: [[378.0]], p1: [[379.0], [380.0]], p2: [381.0, 382.0, 383.0], p3: [[384.0], [385.0], [386.0]]), p2: s0(p0: [[387.0]], p1: [[388.0], [389.0]], p2: [390.0, 391.0, 392.0], p3: [[393.0], [394.0], [395.0]])), p1: [s0(p0: [[396.0]], p1: [[397.0], [398.0]], p2: [399.0, 400.0, 401.0], p3: [[402.0], [403.0], [404.0]]), s0(p0: [[405.0]], p1: [[406.0], [407.0]], p2: [408.0, 409.0, 410.0], p3: [[411.0], [412.0], [413.0]])])]], p2: [s0(p0: [[414.0]], p1: [[415.0], [416.0]], p2: [417.0, 418.0, 419.0], p3: [[420.0], [421.0], [422.0]])])), p2: [s1(p0: [s0(p0: [[423.0]], p1: [[424.0], [425.0]], p2: [426.0, 427.0, 428.0], p3: [[429.0], [430.0], [431.0]])], p1: s0(p0: [[432.0]], p1: [[433.0], [434.0]], p2: [435.0, 436.0, 437.0], p3: [[438.0], [439.0], [440.0]]), p2: s0(p0: [[441.0]], p1: [[442.0], [443.0]], p2: [444.0, 445.0, 446.0], p3: [[447.0], [448.0], [449.0]])), s1(p0: [s0(p0: [[450.0]], p1: [[451.0], [452.0]], p2: [453.0, 454.0, 455.0], p3: [[456.0], [457.0], [458.0]])], p1: s0(p0: [[459.0]], p1: [[460.0], [461.0]], p2: [462.0, 463.0, 464.0], p3: [[465.0], [466.0], [467.0]]), p2: s0(p0: [[468.0]], p1: [[469.0], [470.0]], p2: [471.0, 472.0, 473.0], p3: [[474.0], [475.0], [476.0]]))], p3: [s0(p0: [[477.0]], p1: [[478.0], [479.0]], p2: [480.0, 481.0, 482.0], p3: [[483.0], [484.0], [485.0]]), s0(p0: [[486.0]], p1: [[487.0], [488.0]], p2: [489.0, 490.0, 491.0], p3: [[492.0], [493.0], [494.0]])], p4: s1(p0: [s0(p0: [[495.0]], p1: [[496.0], [497.0]], p2: [498.0, 499.0, 500.0], p3: [[501.0], [502.0], [503.0]])], p1: s0(p0: [[504.0]], p1: [[505.0], [506.0]], p2: [507.0, 508.0, 509.0], p3: [[510.0], [511.0], [512.0]]), p2: s0(p0: [[513.0]], p1: [[514.0], [515.0]], p2: [516.0, 517.0, 518.0], p3: [[519.0], [520.0], [521.0]])), p5: [[s5(p0: s0(p0: [[522.0]], p1: [[523.0], [524.0]], p2: [525.0, 526.0, 527.0], p3: [[528.0], [529.0], [530.0]]), p1: [s1(p0: [s0(p0: [[531.0]], p1: [[532.0], [533.0]], p2: [534.0, 535.0, 536.0], p3: [[537.0], [538.0], [539.0]])], p1: s0(p0: [[540.0]], p1: [[541.0], [542.0]], p2: [543.0, 544.0, 545.0], p3: [[546.0], [547.0], [548.0]]), p2: s0(p0: [[549.0]], p1: [[550.0], [551.0]], p2: [552.0, 553.0, 554.0], p3: [[555.0], [556.0], [557.0]])), s1(p0: [s0(p0: [[558.0]], p1: [[559.0], [560.0]], p2: [561.0, 562.0, 563.0], p3: [[564.0], [565.0], [566.0]])], p1: s0(p0: [[567.0]], p1: [[568.0], [569.0]], p2: [570.0, 571.0, 572.0], p3: [[573.0], [574.0], [575.0]]), p2: s0(p0: [[576.0]], p1: [[577.0], [578.0]], p2: [579.0, 580.0, 581.0], p3: [[582.0], [583.0], [584.0]])), s1(p0: [s0(p0: [[585.0]], p1: [[586.0], [587.0]], p2: [588.0, 589.0, 590.0], p3: [[591.0], [592.0], [593.0]])], p1: s0(p0: [[594.0]], p1: [[595.0], [596.0]], p2: [597.0, 598.0, 599.0], p3: [[600.0], [601.0], [602.0]]), p2: s0(p0: [[603.0]], p1: [[604.0], [605.0]], p2: [606.0, 607.0, 608.0], p3: [[609.0], [610.0], [611.0]]))])], [s5(p0: s0(p0: [[612.0]], p1: [[613.0], [614.0]], p2: [615.0, 616.0, 617.0], p3: [[618.0], [619.0], [620.0]]), p1: [s1(p0: [s0(p0: [[621.0]], p1: [[622.0], [623.0]], p2: [624.0, 625.0, 626.0], p3: [[627.0], [628.0], [629.0]])], p1: s0(p0: [[630.0]], p1: [[631.0], [632.0]], p2: [633.0, 634.0, 635.0], p3: [[636.0], [637.0], [638.0]]), p2: s0(p0: [[639.0]], p1: [[640.0], [641.0]], p2: [642.0, 643.0, 644.0], p3: [[645.0], [646.0], [647.0]])), s1(p0: [s0(p0: [[648.0]], p1: [[649.0], [650.0]], p2: [651.0, 652.0, 653.0], p3: [[654.0], [655.0], [656.0]])], p1: s0(p0: [[657.0]], p1: [[658.0], [659.0]], p2: [660.0, 661.0, 662.0], p3: [[663.0], [664.0], [665.0]]), p2: s0(p0: [[666.0]], p1: [[667.0], [668.0]], p2: [669.0, 670.0, 671.0], p3: [[672.0], [673.0], [674.0]])), s1(p0: [s0(p0: [[675.0]], p1: [[676.0], [677.0]], p2: [678.0, 679.0, 680.0], p3: [[681.0], [682.0], [683.0]])], p1: s0(p0: [[684.0]], p1: [[685.0], [686.0]], p2: [687.0, 688.0, 689.0], p3: [[690.0], [691.0], [692.0]]), p2: s0(p0: [[693.0]], p1: [[694.0], [695.0]], p2: [696.0, 697.0, 698.0], p3: [[699.0], [700.0], [701.0]]))])]])]
    let v1: Double = 702.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 702.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
