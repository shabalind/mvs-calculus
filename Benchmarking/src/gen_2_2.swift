  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  }
  struct s2 {
    var p0: [s1]
    var p1: s0
  }
  struct s5 {
    var p0: s2
    var p1: [[s1]]
  }
  struct s7 {
    var p0: [[s2]]
    var p1: s5
  }
  func f9(_ v0: s2) -> s2 {
    let v6: s0 = v0.p1
    var v1: s2 = v0
    var v8: s0 = v6
    var v2: s2 = v1
    v1.p1 = v8
    let v4: [[Double]] = v6.p0
    v2 = v0
    var v3: s2 = v0
    var v5: s0 = v6
    v3.p1 = v5
    let v13: [[[Double]]] = [v4, v4, v4]
    v2 = v1
    let v12: [[Double]] = v13[2]
    let v10: s0 = v3.p1
    let v7: [Double] = v12[1]
    let v11: [Double] = v12[0]
    let v9: [[Double]] = v10.p0
    var v21: s0 = v8
    var v15: [[[Double]]] = v13
    v15[1] = v9
    let v25: [[Double]] = v15[2]
    v2.p1 = v6
    v15[2] = v12
    v15[1] = v12
    var v46: [[Double]] = v25
    var v35: [[Double]] = v46
    var v39: [Double] = v7
    v46[0] = v39
    v21.p0 = v4
    v15[0] = v35
    v39 = v11
    v8.p1 = v35
    v2.p1 = v10
    v2.p1 = v21
    return v2
  }
  @inline(never)
  func f0(_ v0: [s7], _ v1: Double) -> Double {
    let v9: s7 = v0[0]
    let v2: s7 = v0[1]
    let v4: s5 = v9.p1
    var v13: s5 = v4
    let v10: [[s2]] = v9.p0
    v13 = v4
    let v12: s2 = v13.p0
    let v7: [s2] = v10[0]
    v13.p0 = v12
    let v20: s2 = v13.p0
    let v17: s0 = v20.p1
    let v25: s2 = v7[0]
    v13.p0 = v25
    let v32: s5 = v2.p1
    let v24: [[Double]] = v17.p0
    let v31: s2 = f9(v12)
    v13.p0 = v20
    v13.p0 = v25
    v13.p0 = v12
    v13.p0 = v25
    v13 = v4
    let v38: [Double] = v24[0]
    let v23: s2 = v32.p0
    v13.p0 = v31
    v13.p0 = v23
    var v82: [Double] = v38
    let v78: [[s1]] = v4.p1
    v13.p1 = v78
    v13.p0 = v12
    let v210: Double = v82[0]
    return v210
  }
  func benchmark() {
    let v0: [s7] = [s7(p0: [[s2(p0: [s1(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0]]), p1: [[s0(p0: [[4.0], [5.0]], p1: [[6.0], [7.0]])]])], p1: s0(p0: [[8.0], [9.0]], p1: [[10.0], [11.0]]))]], p1: s5(p0: s2(p0: [s1(p0: s0(p0: [[12.0], [13.0]], p1: [[14.0], [15.0]]), p1: [[s0(p0: [[16.0], [17.0]], p1: [[18.0], [19.0]])]])], p1: s0(p0: [[20.0], [21.0]], p1: [[22.0], [23.0]])), p1: [[s1(p0: s0(p0: [[24.0], [25.0]], p1: [[26.0], [27.0]]), p1: [[s0(p0: [[28.0], [29.0]], p1: [[30.0], [31.0]])]])], [s1(p0: s0(p0: [[32.0], [33.0]], p1: [[34.0], [35.0]]), p1: [[s0(p0: [[36.0], [37.0]], p1: [[38.0], [39.0]])]])]])), s7(p0: [[s2(p0: [s1(p0: s0(p0: [[40.0], [41.0]], p1: [[42.0], [43.0]]), p1: [[s0(p0: [[44.0], [45.0]], p1: [[46.0], [47.0]])]])], p1: s0(p0: [[48.0], [49.0]], p1: [[50.0], [51.0]]))]], p1: s5(p0: s2(p0: [s1(p0: s0(p0: [[52.0], [53.0]], p1: [[54.0], [55.0]]), p1: [[s0(p0: [[56.0], [57.0]], p1: [[58.0], [59.0]])]])], p1: s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0]])), p1: [[s1(p0: s0(p0: [[64.0], [65.0]], p1: [[66.0], [67.0]]), p1: [[s0(p0: [[68.0], [69.0]], p1: [[70.0], [71.0]])]])], [s1(p0: s0(p0: [[72.0], [73.0]], p1: [[74.0], [75.0]]), p1: [[s0(p0: [[76.0], [77.0]], p1: [[78.0], [79.0]])]])]])), s7(p0: [[s2(p0: [s1(p0: s0(p0: [[80.0], [81.0]], p1: [[82.0], [83.0]]), p1: [[s0(p0: [[84.0], [85.0]], p1: [[86.0], [87.0]])]])], p1: s0(p0: [[88.0], [89.0]], p1: [[90.0], [91.0]]))]], p1: s5(p0: s2(p0: [s1(p0: s0(p0: [[92.0], [93.0]], p1: [[94.0], [95.0]]), p1: [[s0(p0: [[96.0], [97.0]], p1: [[98.0], [99.0]])]])], p1: s0(p0: [[100.0], [101.0]], p1: [[102.0], [103.0]])), p1: [[s1(p0: s0(p0: [[104.0], [105.0]], p1: [[106.0], [107.0]]), p1: [[s0(p0: [[108.0], [109.0]], p1: [[110.0], [111.0]])]])], [s1(p0: s0(p0: [[112.0], [113.0]], p1: [[114.0], [115.0]]), p1: [[s0(p0: [[116.0], [117.0]], p1: [[118.0], [119.0]])]])]]))]
    let v1: Double = 120.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 120.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
