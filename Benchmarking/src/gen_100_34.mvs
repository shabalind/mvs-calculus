  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s3 {
    var p0: s0
    var p1: s2
  } in
  struct s11 {
    var p0: [[s3]]
    var p1: [[s1]]
  } in
  let f7: ([[s11]], Float) -> Float = (v0: [[s11]], v1: Float) -> Float {
    var v26: Float = v1 in
    var v57: Float = v26 in
    var v32: Float = v57 in
    v32
  } in
  let noinline_f0: ([[s11]], s1, Float) -> Float = (v0: [[s11]], v1: s1, v2: Float) -> Float {
    let v7: Float = f7(v0, v2) in
    let v6: Float = f7(v0, v7) in
    let v9: [s11] = v0[0] in
    let v18: Float = f7(v0, v7) in
    let v15: Float = f7(v0, v6) in
    var v17: [[s11]] = v0 in
    let v37: Float = f7(v0, v2) in
    let v39: Float = f7(v17, v37) in
    let v67: Float = f7(v0, v39) in
    let v74: Float = f7(v0, v67) in
    v17[0] = v9 in
    let v44: Float = f7(v17, v67) in
    let v73: Float = f7(v0, v74) in
    let v46: Float = f7(v0, v73) in
    let v70: Float = f7(v0, v44) in
    let v156: Float = f7(v0, v15) in
    let v77: Float = v156 + v37 in
    let v55: Float = f7(v17, v70) in
    let v60: [Float] = [v55, v18, v77, v74, v46] in
    let v112: Float = v60[4] in
    v112
  } in
  fun loop(i: Int, v0: [[s11]], v1: s1, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s11]] = [[s11([[s3(s0([[0.0]], [[1.0]]), s2([s0([[2.0]], [[3.0]]), s0([[4.0]], [[5.0]])], [s0([[6.0]], [[7.0]]), s0([[8.0]], [[9.0]])]))]], [[s1(s0([[10.0]], [[11.0]]), s0([[12.0]], [[13.0]]))], [s1(s0([[14.0]], [[15.0]]), s0([[16.0]], [[17.0]]))]])]] in
    let v1: s1 = s1(s0([[18.0]], [[19.0]]), s0([[20.0]], [[21.0]])) in
    let v2: Float = 22.0 in
    let initialResult: Float = 22.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()