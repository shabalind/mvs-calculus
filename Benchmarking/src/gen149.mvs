  struct s0 {
    var p0: Float
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: s1
  } in
  struct s3 {
    var p0: [s1]
    var p1: s2
  } in
  struct s4 {
    var p0: s0
    var p1: s1
  } in
  struct s5 {
    var p0: [s4]
    var p1: [[s3]]
  } in
  let f17: (s5) -> s5 = (v0: s5) -> s5 {
    var v4: s5 = v0 in
    let v6: [s4] = v4.p0 in
    let v27: [[s3]] = v0.p1 in
    v4.p1 = v27 in
    v4.p0 = v6 in
    v4
  } in
  let f16: (s5) -> s5 = (v0: s5) -> s5 {
    var v2: s5 = v0 in
    let v14: [s4] = v0.p0 in
    let v26: s5 = f17(v2) in
    v2 = v0 in
    v2.p0 = v14 in
    v26
  } in
  let noinline_f0: ([s5], Float) -> Float = (v0: [s5], v1: Float) -> Float {
    let v6: s5 = v0[0] in
    let v2: s5 = f16(v6) in
    var v7: s5 = v2 in
    var v4: s5 = v7 in
    var v3: s5 = v4 in
    let v9: [s4] = v3.p0 in
    let v13: s4 = v9[1] in
    let v17: [s4] = v3.p0 in
    v4.p0 = v17 in
    v3.p0 = v17 in
    v3.p0 = v9 in
    let v21: s0 = v13.p0 in
    v3.p0 = v17 in
    v3.p0 = v17 in
    v3.p0 = v9 in
    v7.p0 = v9 in
    var v25: s0 = v21 in
    var v20: s0 = v25 in
    let v37: [[Float]] = v20.p1 in
    v3.p0 = v9 in
    let v51: [Float] = v37[1] in
    var v28: [s4] = v9 in
    var v125: [s4] = v17 in
    let v85: Float = v51[0] in
    v3.p0 = v28 in
    v4.p0 = v125 in
    v85
  } in
  fun loop(i: Int, v0: [s5], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s5] = [s5([s4(s0(0.0, [[1.0], [2.0]]), s1(s0(3.0, [[4.0], [5.0]]), s0(6.0, [[7.0], [8.0]]))), s4(s0(9.0, [[10.0], [11.0]]), s1(s0(12.0, [[13.0], [14.0]]), s0(15.0, [[16.0], [17.0]]))), s4(s0(18.0, [[19.0], [20.0]]), s1(s0(21.0, [[22.0], [23.0]]), s0(24.0, [[25.0], [26.0]])))], [[s3([s1(s0(27.0, [[28.0], [29.0]]), s0(30.0, [[31.0], [32.0]])), s1(s0(33.0, [[34.0], [35.0]]), s0(36.0, [[37.0], [38.0]]))], s2([s0(39.0, [[40.0], [41.0]])], s1(s0(42.0, [[43.0], [44.0]]), s0(45.0, [[46.0], [47.0]]))))]]), s5([s4(s0(48.0, [[49.0], [50.0]]), s1(s0(51.0, [[52.0], [53.0]]), s0(54.0, [[55.0], [56.0]]))), s4(s0(57.0, [[58.0], [59.0]]), s1(s0(60.0, [[61.0], [62.0]]), s0(63.0, [[64.0], [65.0]]))), s4(s0(66.0, [[67.0], [68.0]]), s1(s0(69.0, [[70.0], [71.0]]), s0(72.0, [[73.0], [74.0]])))], [[s3([s1(s0(75.0, [[76.0], [77.0]]), s0(78.0, [[79.0], [80.0]])), s1(s0(81.0, [[82.0], [83.0]]), s0(84.0, [[85.0], [86.0]]))], s2([s0(87.0, [[88.0], [89.0]])], s1(s0(90.0, [[91.0], [92.0]]), s0(93.0, [[94.0], [95.0]]))))]])] in
    let v1: Float = 96.0 in
    let initialResult: Float = 96.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()