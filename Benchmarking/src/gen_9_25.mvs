  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
    var p2: [s0]
  } in
  struct s3 {
    var p0: s1
    var p1: s0
  } in
  struct s4 {
    var p0: [s3]
    var p1: [s1]
  } in
  let noinline_f0: (s4, Float) -> Float = (v0: s4, v1: Float) -> Float {
    var v5: Float = v1 in
    let v2: Float = v1 - v1 in
    let v15: [Float] = [v1, v2, v1] in
    var v13: [Float] = v15 in
    v5 = v2 in
    var v30: Float = v5 in
    v13[0] = v2 in
    v13[1] = v5 in
    var v46: Float = v30 in
    v13[2] = v46 in
    v13[1] = v30 in
    let v124: Float = v13[0] in
    v124
  } in
  fun loop(i: Int, v0: s4, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s4 = s4([s3(s1(s0([[0.0]], [[1.0]]), [s0([[2.0]], [[3.0]])], [s0([[4.0]], [[5.0]])]), s0([[6.0]], [[7.0]])), s3(s1(s0([[8.0]], [[9.0]]), [s0([[10.0]], [[11.0]])], [s0([[12.0]], [[13.0]])]), s0([[14.0]], [[15.0]])), s3(s1(s0([[16.0]], [[17.0]]), [s0([[18.0]], [[19.0]])], [s0([[20.0]], [[21.0]])]), s0([[22.0]], [[23.0]]))], [s1(s0([[24.0]], [[25.0]]), [s0([[26.0]], [[27.0]])], [s0([[28.0]], [[29.0]])]), s1(s0([[30.0]], [[31.0]]), [s0([[32.0]], [[33.0]])], [s0([[34.0]], [[35.0]])]), s1(s0([[36.0]], [[37.0]]), [s0([[38.0]], [[39.0]])], [s0([[40.0]], [[41.0]])])]) in
    let v1: Float = 42.0 in
    let initialResult: Float = 42.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()