  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: s1
    var p1: [s0]
  } in
  let noinline_f0: ([s2], Float) -> Float = (v0: [s2], v1: Float) -> Float {
    let v6: [Float] = [v1, v1, v1, v1, v1] in
    var v5: [Float] = v6 in
    v5[4] = v1 in
    var v10: [Float] = v6 in
    var v13: Float = v1 in
    v13 = v1 in
    v10[1] = v13 in
    let v44: Float = v5[4] in
    v5 = v10 in
    var v45: Float = v1 in
    v10[2] = v45 in
    v44
  } in
  fun loop(i: Int, v0: [s2], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2(s1(s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]), [[s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]])]]), [s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]])])] in
    let v1: Float = 15.0 in
    let initialResult: Float = 15.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()