  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s3 {
    var p0: [[s1]]
    var p1: [[s1]]
  } in
  let f66: (s3) -> s3 = (v0: s3) -> s3 {
    v0
  } in
  let f58: (s3) -> s3 = (v0: s3) -> s3 {
    var v3: s3 = v0 in
    let v4: s3 = f66(v3) in
    let v13: [[s1]] = v0.p1 in
    v3.p1 = v13 in
    var v17: s3 = v4 in
    let v10: s3 = f66(v17) in
    v10
  } in
  let noinline_f0: (s3, Float) -> Float = (v0: s3, v1: Float) -> Float {
    let v3: s3 = f58(v0) in
    let v2: [[s1]] = v3.p0 in
    let v4: [s1] = v2[0] in
    let v7: s1 = v4[0] in
    let v10: s0 = v7.p1 in
    let v21: [[Float]] = v10.p0 in
    let v18: [Float] = v21[0] in
    let v67: Float = v18[0] in
    v67
  } in
  fun loop(i: Int, v0: s3, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3([[s1(s0([[0.0]], [[1.0]]), s0([[2.0]], [[3.0]]))], [s1(s0([[4.0]], [[5.0]]), s0([[6.0]], [[7.0]]))], [s1(s0([[8.0]], [[9.0]]), s0([[10.0]], [[11.0]]))]], [[s1(s0([[12.0]], [[13.0]]), s0([[14.0]], [[15.0]]))], [s1(s0([[16.0]], [[17.0]]), s0([[18.0]], [[19.0]]))]]) in
    let v1: Float = 20.0 in
    let initialResult: Float = 20.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()