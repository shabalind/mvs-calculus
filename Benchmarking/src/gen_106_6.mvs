  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s1
    var p1: [s1]
  } in
  let f23: (s1) -> s1 = (v0: s1) -> s1 {
    var v3: s1 = v0 in
    var v6: s1 = v0 in
    var v4: s1 = v3 in
    let v8: s0 = v6.p0 in
    var v2: s1 = v3 in
    v6 = v3 in
    let v1: [[Float]] = v8.p0 in
    let v5: s0 = v6.p0 in
    v2.p1 = v8 in
    v4.p0 = v5 in
    let v7: s0 = v4.p1 in
    var v9: s0 = v7 in
    var v13: s0 = v9 in
    v2.p1 = v9 in
    v3.p1 = v8 in
    v13.p1 = v1 in
    v4.p0 = v8 in
    v13.p1 = v1 in
    v6.p0 = v13 in
    v2
  } in
  let noinline_f0: (s2, Float) -> Float = (v0: s2, v1: Float) -> Float {
    let v4: s1 = v0.p0 in
    let v8: s1 = f23(v4) in
    let v17: s0 = v8.p1 in
    let v35: [[Float]] = v17.p1 in
    let v45: [Float] = v35[1] in
    let v98: Float = v45[0] in
    v98
  } in
  fun loop(i: Int, v0: s2, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(s1(s0([[0.0], [1.0]], [[2.0], [3.0]]), s0([[4.0], [5.0]], [[6.0], [7.0]])), [s1(s0([[8.0], [9.0]], [[10.0], [11.0]]), s0([[12.0], [13.0]], [[14.0], [15.0]])), s1(s0([[16.0], [17.0]], [[18.0], [19.0]]), s0([[20.0], [21.0]], [[22.0], [23.0]])), s1(s0([[24.0], [25.0]], [[26.0], [27.0]]), s0([[28.0], [29.0]], [[30.0], [31.0]]))]) in
    let v1: Float = 32.0 in
    let initialResult: Float = 32.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()