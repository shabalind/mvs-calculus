  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: s0
    var p1: s0
  } in
  struct s3 {
    var p0: s2
  } in
  struct s4 {
    var p0: [[Float]]
    var p1: s1
  } in
  struct s9 {
    var p0: s4
    var p1: [[Float]]
  } in
  let f82: (Float) -> Float = (v0: Float) -> Float {
    var v5: Float = v0 in
    v5 = v0 in
    var v2: Float = v0 in
    var v7: Float = v5 in
    var v3: Float = v0 in
    var v10: Float = v2 in
    var v4: Float = v7 in
    v4 = v3 in
    var v14: Float = v2 in
    let v1: Float = v14 + v10 in
    var v12: Float = v3 in
    let v8: [Float] = [v10, v12] in
    let v11: Float = v14 - v4 in
    var v9: [Float] = v8 in
    var v21: [Float] = v8 in
    var v20: Float = v0 in
    v21[1] = v5 in
    v21[0] = v2 in
    let v35: Float = v9[0] in
    v21[1] = v4 in
    v21[0] = v20 in
    let v18: Float = v9[0] in
    v9[1] = v1 in
    v9[1] = v1 in
    v9[0] = v14 in
    v9[0] = v11 in
    v2 = v18 in
    v21[0] = v35 in
    var v40: [Float] = v21 in
    v21[1] = v7 in
    var v24: [Float] = v8 in
    let v48: Float = v8[1] in
    let v19: Float = v9[0] in
    var v25: [Float] = v8 in
    v24[1] = v19 in
    var v56: [Float] = v25 in
    var v34: Float = v0 in
    var v36: [Float] = v40 in
    v21[1] = v48 in
    var v39: [Float] = v25 in
    var v64: Float = v34 in
    let v45: [[Float]] = [v39, v56, v36, v21, v24, v21, v24] in
    var v70: [[Float]] = v45 in
    v36[0] = v64 in
    var v71: [[Float]] = v70 in
    let v132: Float = v5 - v19 in
    let v124: Float = v56[0] in
    v12 = v14 in
    v39[0] = v124 in
    v71[3] = v56 in
    var v163: [[Float]] = v71 in
    let v75: [Float] = v163[6] in
    let v102: Float = v75[1] in
    v3 = v132 in
    v102
  } in
  let noinline_f0: (s4, s9, [[s3]], Float) -> Float = (v0: s4, v1: s9, v2: [[s3]], v3: Float) -> Float {
    let v5: Float = f82(v3) in
    let v6: Float = f82(v3) in
    let v48: Float = f82(v5) in
    let v30: Float = v6 + v6 in
    let v22: Float = v48 * v30 in
    v22
  } in
  fun loop(i: Int, v0: s4, v1: s9, v2: [[s3]], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s4 = s4([[0.0]], s1(s0([[1.0], [2.0], [3.0]], [[4.0]]), [s0([[5.0], [6.0], [7.0]], [[8.0]]), s0([[9.0], [10.0], [11.0]], [[12.0]]), s0([[13.0], [14.0], [15.0]], [[16.0]])])) in
    let v1: s9 = s9(s4([[17.0]], s1(s0([[18.0], [19.0], [20.0]], [[21.0]]), [s0([[22.0], [23.0], [24.0]], [[25.0]]), s0([[26.0], [27.0], [28.0]], [[29.0]]), s0([[30.0], [31.0], [32.0]], [[33.0]])])), [[34.0], [35.0]]) in
    let v2: [[s3]] = [[s3(s2(s0([[36.0], [37.0], [38.0]], [[39.0]]), s0([[40.0], [41.0], [42.0]], [[43.0]])))], [s3(s2(s0([[44.0], [45.0], [46.0]], [[47.0]]), s0([[48.0], [49.0], [50.0]], [[51.0]])))]] in
    let v3: Float = 52.0 in
    let initialResult: Float = 52.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()