  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
  } in
  struct s4 {
    var p0: [[s1]]
    var p1: [s1]
  } in
  let f70: (Float) -> Float = (v0: Float) -> Float {
    let v6: [Float] = [v0, v0] in
    var v1: [Float] = v6 in
    let v3: Float = v6[1] in
    let v5: Float = v6[1] in
    let v9: Float = v6[1] in
    let v10: Float = v0 - v3 in
    let v2: [[Float]] = [v1, v6, v1, v1] in
    v1[0] = v0 in
    var v12: Float = v5 in
    var v31: Float = v0 in
    var v19: [[Float]] = v2 in
    var v21: [Float] = v1 in
    var v13: [Float] = v1 in
    v19[2] = v13 in
    let v17: [Float] = v2[0] in
    v1[1] = v10 in
    let v15: [Float] = v2[3] in
    v21 = v15 in
    let v16: [Float] = v19[2] in
    v13[0] = v12 in
    var v38: Float = v0 in
    v1[1] = v9 in
    let v43: [Float] = v19[2] in
    var v20: [[Float]] = v2 in
    var v40: [[Float]] = v19 in
    v19[2] = v13 in
    let v22: [Float] = v20[1] in
    let v57: Float = v43[0] in
    var v25: [Float] = v16 in
    let v32: Float = v25[0] in
    var v85: [[Float]] = v40 in
    var v26: [[Float]] = v85 in
    v13 = v17 in
    let v61: [Float] = [v3, v57, v31, v32, v10, v38] in
    v25 = v21 in
    var v70: [Float] = v61 in
    var v82: [Float] = v25 in
    v85[2] = v82 in
    v85 = v26 in
    let v67: Float = v70[3] in
    var v100: [[Float]] = v85 in
    v19[0] = v22 in
    v19 = v100 in
    v67
  } in
  let f67: (Float) -> Float = (v0: Float) -> Float {
    let v6: Float = f70(v0) in
    let v5: [Float] = [v0] in
    let v4: Float = f70(v6) in
    let v10: Float = v5[0] in
    let v1: Float = v5[0] in
    let v7: Float = f70(v10) in
    var v3: [Float] = v5 in
    let v2: Float = v3[0] in
    let v9: Float = f70(v10) in
    let v11: Float = v7 - v6 in
    v3[0] = v1 in
    var v13: Float = v9 in
    var v17: Float = v13 in
    let v14: Float = f70(v11) in
    let v26: Float = f70(v2) in
    v13 = v0 in
    let v41: Float = f70(v17) in
    let v28: Float = v4 + v26 in
    let v25: [Float] = [v17, v14, v2, v28, v0] in
    var v29: [Float] = v25 in
    let v42: Float = v29[0] in
    let v68: Float = v42 / v41 in
    v68
  } in
  let noinline_f0: (s4, Float) -> Float = (v0: s4, v1: Float) -> Float {
    let v6: Float = f67(v1) in
    let v7: Float = f67(v6) in
    let v39: Float = f70(v7) in
    v39
  } in
  fun loop(i: Int, v0: s4, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s4 = s4([[s1([[s0([[0.0]], [[1.0], [2.0]])], [s0([[3.0]], [[4.0], [5.0]])]], [s0([[6.0]], [[7.0], [8.0]]), s0([[9.0]], [[10.0], [11.0]])])]], [s1([[s0([[12.0]], [[13.0], [14.0]])], [s0([[15.0]], [[16.0], [17.0]])]], [s0([[18.0]], [[19.0], [20.0]]), s0([[21.0]], [[22.0], [23.0]])])]) in
    let v1: Float = 24.0 in
    let initialResult: Float = 24.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()