  struct s0 {
    var p0: [[Float]]
    var p1: [Float]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: s1
    var p1: s1
  } in
  let noinline_f0: ([[Float]], s2, Float) -> Float = (v0: [[Float]], v1: s2, v2: Float) -> Float {
    var v11: Float = v2 in
    let v4: [Float] = v0[0] in
    let v12: Float = v4[0] in
    let v19: Float = v11 * v11 in
    var v14: [Float] = v4 in
    var v10: [Float] = v14 in
    v10[0] = v2 in
    v10[0] = v12 in
    v14[0] = v19 in
    let v50: Float = v4[0] in
    v10[0] = v50 in
    let v99: Float = v10[0] in
    v99
  } in
  fun loop(i: Int, v0: [[Float]], v1: s2, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0]] in
    let v1: s2 = s2(s1([s0([[1.0], [2.0]], [3.0, 4.0, 5.0])], [[s0([[6.0], [7.0]], [8.0, 9.0, 10.0])], [s0([[11.0], [12.0]], [13.0, 14.0, 15.0])], [s0([[16.0], [17.0]], [18.0, 19.0, 20.0])]]), s1([s0([[21.0], [22.0]], [23.0, 24.0, 25.0])], [[s0([[26.0], [27.0]], [28.0, 29.0, 30.0])], [s0([[31.0], [32.0]], [33.0, 34.0, 35.0])], [s0([[36.0], [37.0]], [38.0, 39.0, 40.0])]])) in
    let v2: Float = 41.0 in
    let initialResult: Float = 41.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()