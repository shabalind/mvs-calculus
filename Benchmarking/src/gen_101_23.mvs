  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
    var p3: [[Float]]
    var p4: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: [s1]
    var p1: s1
  } in
  let noinline_f0: (s2, Float) -> Float = (v0: s2, v1: Float) -> Float {
    let v5: s1 = v0.p1 in
    let v2: s0 = v5.p0 in
    var v7: s2 = v0 in
    let v9: [s1] = v7.p0 in
    var v11: s1 = v5 in
    let v8: s1 = v9[2] in
    let v29: s1 = v9[1] in
    let v12: [[Float]] = v2.p4 in
    var v15: s1 = v29 in
    let v30: [[s0]] = v8.p1 in
    let v16: [s0] = v30[1] in
    let v18: s0 = v16[0] in
    let v22: [[s0]] = v29.p1 in
    let v28: [s0] = v30[2] in
    let v24: [[Float]] = v18.p3 in
    let v35: s0 = v16[0] in
    let v19: s0 = v11.p0 in
    let v41: s0 = v5.p0 in
    let v42: [[Float]] = v35.p2 in
    let v23: [[s0]] = v29.p1 in
    var v67: s0 = v19 in
    v11 = v15 in
    let v75: [[Float]] = v67.p2 in
    v67.p4 = v12 in
    let v34: s1 = v9[0] in
    v15.p1 = v23 in
    let v48: s0 = s0(v42, v75, v75, v24, v12) in
    let v60: [[Float]] = v48.p1 in
    var v111: [[s0]] = v23 in
    v111[2] = v16 in
    let v32: [Float] = v60[0] in
    v111[1] = v28 in
    v11.p0 = v48 in
    let v69: [[[s0]]] = [v30, v22, v30, v23, v111] in
    v15.p1 = v30 in
    v15.p0 = v48 in
    let v114: [[s0]] = v69[0] in
    let v103: [[s0]] = v5.p1 in
    v11.p1 = v103 in
    v111[2] = v28 in
    v11.p1 = v30 in
    let v93: [[s0]] = v34.p1 in
    let v149: Float = v32[0] in
    v11.p1 = v22 in
    v15.p1 = v93 in
    v67 = v41 in
    v15.p1 = v114 in
    v149
  } in
  fun loop(i: Int, v0: s2, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2([s1(s0([[0.0], [1.0]], [[2.0], [3.0]], [[4.0], [5.0]], [[6.0], [7.0], [8.0]], [[9.0]]), [[s0([[10.0], [11.0]], [[12.0], [13.0]], [[14.0], [15.0]], [[16.0], [17.0], [18.0]], [[19.0]])], [s0([[20.0], [21.0]], [[22.0], [23.0]], [[24.0], [25.0]], [[26.0], [27.0], [28.0]], [[29.0]])], [s0([[30.0], [31.0]], [[32.0], [33.0]], [[34.0], [35.0]], [[36.0], [37.0], [38.0]], [[39.0]])]]), s1(s0([[40.0], [41.0]], [[42.0], [43.0]], [[44.0], [45.0]], [[46.0], [47.0], [48.0]], [[49.0]]), [[s0([[50.0], [51.0]], [[52.0], [53.0]], [[54.0], [55.0]], [[56.0], [57.0], [58.0]], [[59.0]])], [s0([[60.0], [61.0]], [[62.0], [63.0]], [[64.0], [65.0]], [[66.0], [67.0], [68.0]], [[69.0]])], [s0([[70.0], [71.0]], [[72.0], [73.0]], [[74.0], [75.0]], [[76.0], [77.0], [78.0]], [[79.0]])]]), s1(s0([[80.0], [81.0]], [[82.0], [83.0]], [[84.0], [85.0]], [[86.0], [87.0], [88.0]], [[89.0]]), [[s0([[90.0], [91.0]], [[92.0], [93.0]], [[94.0], [95.0]], [[96.0], [97.0], [98.0]], [[99.0]])], [s0([[100.0], [101.0]], [[102.0], [103.0]], [[104.0], [105.0]], [[106.0], [107.0], [108.0]], [[109.0]])], [s0([[110.0], [111.0]], [[112.0], [113.0]], [[114.0], [115.0]], [[116.0], [117.0], [118.0]], [[119.0]])]])], s1(s0([[120.0], [121.0]], [[122.0], [123.0]], [[124.0], [125.0]], [[126.0], [127.0], [128.0]], [[129.0]]), [[s0([[130.0], [131.0]], [[132.0], [133.0]], [[134.0], [135.0]], [[136.0], [137.0], [138.0]], [[139.0]])], [s0([[140.0], [141.0]], [[142.0], [143.0]], [[144.0], [145.0]], [[146.0], [147.0], [148.0]], [[149.0]])], [s0([[150.0], [151.0]], [[152.0], [153.0]], [[154.0], [155.0]], [[156.0], [157.0], [158.0]], [[159.0]])]])) in
    let v1: Float = 160.0 in
    let initialResult: Float = 160.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()