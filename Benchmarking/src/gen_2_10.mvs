  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: [[s0]]
  } in
  struct s3 {
    var p0: [s0]
    var p1: [s0]
    var p2: s1
  } in
  struct s4 {
    var p0: [s3]
    var p1: s1
  } in
  struct s5 {
    var p0: [[Float]]
    var p1: [s2]
  } in
  struct s6 {
    var p0: s0
    var p1: [s3]
    var p2: [s4]
    var p3: s3
  } in
  let f4: (s0) -> s0 = (v0: s0) -> s0 {
    let v6: [[Float]] = v0.p0 in
    let v3: [[Float]] = v0.p1 in
    let v1: [[Float]] = v0.p0 in
    let v5: [Float] = v1[0] in
    let v12: [[Float]] = v0.p1 in
    var v14: [[Float]] = v6 in
    let v8: Float = v5[0] in
    let v19: [[[Float]]] = [v6] in
    let v37: [[Float]] = v0.p1 in
    var v29: [[Float]] = v14 in
    let v20: s0 = s0(v29, v37) in
    let v16: [Float] = v6[1] in
    let v57: [[Float]] = v20.p0 in
    let v30: s0 = s0(v6, v3) in
    let v13: [[Float]] = v30.p1 in
    let v31: [Float] = v29[1] in
    let v28: [[Float]] = v19[0] in
    var v55: Float = v8 in
    v14[1] = v16 in
    let v21: [Float] = v28[1] in
    v29[0] = v21 in
    let v34: [Float] = v12[0] in
    let v107: [[Float]] = v0.p0 in
    v14[1] = v31 in
    var v61: s0 = v30 in
    v61.p0 = v57 in
    let v98: [[Float]] = v20.p0 in
    var v185: [Float] = v34 in
    let v73: [Float] = v98[0] in
    v61.p0 = v6 in
    v61.p0 = v29 in
    let v83: Float = v55 * v55 in
    v61.p0 = v107 in
    v61.p1 = v13 in
    v185[0] = v83 in
    v29[0] = v185 in
    v29[1] = v73 in
    v61
  } in
  let f1: ([s0]) -> [s0] = (v0: [s0]) -> [s0] {
    let v2: s0 = v0[1] in
    let v17: s0 = f4(v2) in
    let v12: s0 = f4(v17) in
    let v213: s0 = f4(v12) in
    let v105: s0 = f4(v213) in
    let v81: s1 = s1(v0, v105) in
    let v144: [s0] = v81.p0 in
    v144
  } in
  let noinline_f0: ([s5], [[s6]], s3, Float) -> Float = (v0: [s5], v1: [[s6]], v2: s3, v3: Float) -> Float {
    let v6: [s0] = v2.p0 in
    let v4: [s0] = f1(v6) in
    let v5: s0 = v4[0] in
    let v18: [[Float]] = v5.p0 in
    let v20: [Float] = v18[1] in
    let v71: Float = v20[0] in
    let v43: Float = v20[0] in
    let v58: Float = v43 * v71 in
    let v57: Float = v71 / v58 in
    v57
  } in
  fun loop(i: Int, v0: [s5], v1: [[s6]], v2: s3, v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s5] = [s5([[0.0]], [s2([s0([[1.0], [2.0]], [[3.0]]), s0([[4.0], [5.0]], [[6.0]]), s0([[7.0], [8.0]], [[9.0]])], [[s0([[10.0], [11.0]], [[12.0]])], [s0([[13.0], [14.0]], [[15.0]])], [s0([[16.0], [17.0]], [[18.0]])]]), s2([s0([[19.0], [20.0]], [[21.0]]), s0([[22.0], [23.0]], [[24.0]]), s0([[25.0], [26.0]], [[27.0]])], [[s0([[28.0], [29.0]], [[30.0]])], [s0([[31.0], [32.0]], [[33.0]])], [s0([[34.0], [35.0]], [[36.0]])]]), s2([s0([[37.0], [38.0]], [[39.0]]), s0([[40.0], [41.0]], [[42.0]]), s0([[43.0], [44.0]], [[45.0]])], [[s0([[46.0], [47.0]], [[48.0]])], [s0([[49.0], [50.0]], [[51.0]])], [s0([[52.0], [53.0]], [[54.0]])]])]), s5([[55.0]], [s2([s0([[56.0], [57.0]], [[58.0]]), s0([[59.0], [60.0]], [[61.0]]), s0([[62.0], [63.0]], [[64.0]])], [[s0([[65.0], [66.0]], [[67.0]])], [s0([[68.0], [69.0]], [[70.0]])], [s0([[71.0], [72.0]], [[73.0]])]]), s2([s0([[74.0], [75.0]], [[76.0]]), s0([[77.0], [78.0]], [[79.0]]), s0([[80.0], [81.0]], [[82.0]])], [[s0([[83.0], [84.0]], [[85.0]])], [s0([[86.0], [87.0]], [[88.0]])], [s0([[89.0], [90.0]], [[91.0]])]]), s2([s0([[92.0], [93.0]], [[94.0]]), s0([[95.0], [96.0]], [[97.0]]), s0([[98.0], [99.0]], [[100.0]])], [[s0([[101.0], [102.0]], [[103.0]])], [s0([[104.0], [105.0]], [[106.0]])], [s0([[107.0], [108.0]], [[109.0]])]])])] in
    let v1: [[s6]] = [[s6(s0([[110.0], [111.0]], [[112.0]]), [s3([s0([[113.0], [114.0]], [[115.0]]), s0([[116.0], [117.0]], [[118.0]])], [s0([[119.0], [120.0]], [[121.0]]), s0([[122.0], [123.0]], [[124.0]])], s1([s0([[125.0], [126.0]], [[127.0]]), s0([[128.0], [129.0]], [[130.0]])], s0([[131.0], [132.0]], [[133.0]])))], [s4([s3([s0([[134.0], [135.0]], [[136.0]]), s0([[137.0], [138.0]], [[139.0]])], [s0([[140.0], [141.0]], [[142.0]]), s0([[143.0], [144.0]], [[145.0]])], s1([s0([[146.0], [147.0]], [[148.0]]), s0([[149.0], [150.0]], [[151.0]])], s0([[152.0], [153.0]], [[154.0]]))), s3([s0([[155.0], [156.0]], [[157.0]]), s0([[158.0], [159.0]], [[160.0]])], [s0([[161.0], [162.0]], [[163.0]]), s0([[164.0], [165.0]], [[166.0]])], s1([s0([[167.0], [168.0]], [[169.0]]), s0([[170.0], [171.0]], [[172.0]])], s0([[173.0], [174.0]], [[175.0]])))], s1([s0([[176.0], [177.0]], [[178.0]]), s0([[179.0], [180.0]], [[181.0]])], s0([[182.0], [183.0]], [[184.0]]))), s4([s3([s0([[185.0], [186.0]], [[187.0]]), s0([[188.0], [189.0]], [[190.0]])], [s0([[191.0], [192.0]], [[193.0]]), s0([[194.0], [195.0]], [[196.0]])], s1([s0([[197.0], [198.0]], [[199.0]]), s0([[200.0], [201.0]], [[202.0]])], s0([[203.0], [204.0]], [[205.0]]))), s3([s0([[206.0], [207.0]], [[208.0]]), s0([[209.0], [210.0]], [[211.0]])], [s0([[212.0], [213.0]], [[214.0]]), s0([[215.0], [216.0]], [[217.0]])], s1([s0([[218.0], [219.0]], [[220.0]]), s0([[221.0], [222.0]], [[223.0]])], s0([[224.0], [225.0]], [[226.0]])))], s1([s0([[227.0], [228.0]], [[229.0]]), s0([[230.0], [231.0]], [[232.0]])], s0([[233.0], [234.0]], [[235.0]]))), s4([s3([s0([[236.0], [237.0]], [[238.0]]), s0([[239.0], [240.0]], [[241.0]])], [s0([[242.0], [243.0]], [[244.0]]), s0([[245.0], [246.0]], [[247.0]])], s1([s0([[248.0], [249.0]], [[250.0]]), s0([[251.0], [252.0]], [[253.0]])], s0([[254.0], [255.0]], [[256.0]]))), s3([s0([[257.0], [258.0]], [[259.0]]), s0([[260.0], [261.0]], [[262.0]])], [s0([[263.0], [264.0]], [[265.0]]), s0([[266.0], [267.0]], [[268.0]])], s1([s0([[269.0], [270.0]], [[271.0]]), s0([[272.0], [273.0]], [[274.0]])], s0([[275.0], [276.0]], [[277.0]])))], s1([s0([[278.0], [279.0]], [[280.0]]), s0([[281.0], [282.0]], [[283.0]])], s0([[284.0], [285.0]], [[286.0]])))], s3([s0([[287.0], [288.0]], [[289.0]]), s0([[290.0], [291.0]], [[292.0]])], [s0([[293.0], [294.0]], [[295.0]]), s0([[296.0], [297.0]], [[298.0]])], s1([s0([[299.0], [300.0]], [[301.0]]), s0([[302.0], [303.0]], [[304.0]])], s0([[305.0], [306.0]], [[307.0]]))))], [s6(s0([[308.0], [309.0]], [[310.0]]), [s3([s0([[311.0], [312.0]], [[313.0]]), s0([[314.0], [315.0]], [[316.0]])], [s0([[317.0], [318.0]], [[319.0]]), s0([[320.0], [321.0]], [[322.0]])], s1([s0([[323.0], [324.0]], [[325.0]]), s0([[326.0], [327.0]], [[328.0]])], s0([[329.0], [330.0]], [[331.0]])))], [s4([s3([s0([[332.0], [333.0]], [[334.0]]), s0([[335.0], [336.0]], [[337.0]])], [s0([[338.0], [339.0]], [[340.0]]), s0([[341.0], [342.0]], [[343.0]])], s1([s0([[344.0], [345.0]], [[346.0]]), s0([[347.0], [348.0]], [[349.0]])], s0([[350.0], [351.0]], [[352.0]]))), s3([s0([[353.0], [354.0]], [[355.0]]), s0([[356.0], [357.0]], [[358.0]])], [s0([[359.0], [360.0]], [[361.0]]), s0([[362.0], [363.0]], [[364.0]])], s1([s0([[365.0], [366.0]], [[367.0]]), s0([[368.0], [369.0]], [[370.0]])], s0([[371.0], [372.0]], [[373.0]])))], s1([s0([[374.0], [375.0]], [[376.0]]), s0([[377.0], [378.0]], [[379.0]])], s0([[380.0], [381.0]], [[382.0]]))), s4([s3([s0([[383.0], [384.0]], [[385.0]]), s0([[386.0], [387.0]], [[388.0]])], [s0([[389.0], [390.0]], [[391.0]]), s0([[392.0], [393.0]], [[394.0]])], s1([s0([[395.0], [396.0]], [[397.0]]), s0([[398.0], [399.0]], [[400.0]])], s0([[401.0], [402.0]], [[403.0]]))), s3([s0([[404.0], [405.0]], [[406.0]]), s0([[407.0], [408.0]], [[409.0]])], [s0([[410.0], [411.0]], [[412.0]]), s0([[413.0], [414.0]], [[415.0]])], s1([s0([[416.0], [417.0]], [[418.0]]), s0([[419.0], [420.0]], [[421.0]])], s0([[422.0], [423.0]], [[424.0]])))], s1([s0([[425.0], [426.0]], [[427.0]]), s0([[428.0], [429.0]], [[430.0]])], s0([[431.0], [432.0]], [[433.0]]))), s4([s3([s0([[434.0], [435.0]], [[436.0]]), s0([[437.0], [438.0]], [[439.0]])], [s0([[440.0], [441.0]], [[442.0]]), s0([[443.0], [444.0]], [[445.0]])], s1([s0([[446.0], [447.0]], [[448.0]]), s0([[449.0], [450.0]], [[451.0]])], s0([[452.0], [453.0]], [[454.0]]))), s3([s0([[455.0], [456.0]], [[457.0]]), s0([[458.0], [459.0]], [[460.0]])], [s0([[461.0], [462.0]], [[463.0]]), s0([[464.0], [465.0]], [[466.0]])], s1([s0([[467.0], [468.0]], [[469.0]]), s0([[470.0], [471.0]], [[472.0]])], s0([[473.0], [474.0]], [[475.0]])))], s1([s0([[476.0], [477.0]], [[478.0]]), s0([[479.0], [480.0]], [[481.0]])], s0([[482.0], [483.0]], [[484.0]])))], s3([s0([[485.0], [486.0]], [[487.0]]), s0([[488.0], [489.0]], [[490.0]])], [s0([[491.0], [492.0]], [[493.0]]), s0([[494.0], [495.0]], [[496.0]])], s1([s0([[497.0], [498.0]], [[499.0]]), s0([[500.0], [501.0]], [[502.0]])], s0([[503.0], [504.0]], [[505.0]]))))], [s6(s0([[506.0], [507.0]], [[508.0]]), [s3([s0([[509.0], [510.0]], [[511.0]]), s0([[512.0], [513.0]], [[514.0]])], [s0([[515.0], [516.0]], [[517.0]]), s0([[518.0], [519.0]], [[520.0]])], s1([s0([[521.0], [522.0]], [[523.0]]), s0([[524.0], [525.0]], [[526.0]])], s0([[527.0], [528.0]], [[529.0]])))], [s4([s3([s0([[530.0], [531.0]], [[532.0]]), s0([[533.0], [534.0]], [[535.0]])], [s0([[536.0], [537.0]], [[538.0]]), s0([[539.0], [540.0]], [[541.0]])], s1([s0([[542.0], [543.0]], [[544.0]]), s0([[545.0], [546.0]], [[547.0]])], s0([[548.0], [549.0]], [[550.0]]))), s3([s0([[551.0], [552.0]], [[553.0]]), s0([[554.0], [555.0]], [[556.0]])], [s0([[557.0], [558.0]], [[559.0]]), s0([[560.0], [561.0]], [[562.0]])], s1([s0([[563.0], [564.0]], [[565.0]]), s0([[566.0], [567.0]], [[568.0]])], s0([[569.0], [570.0]], [[571.0]])))], s1([s0([[572.0], [573.0]], [[574.0]]), s0([[575.0], [576.0]], [[577.0]])], s0([[578.0], [579.0]], [[580.0]]))), s4([s3([s0([[581.0], [582.0]], [[583.0]]), s0([[584.0], [585.0]], [[586.0]])], [s0([[587.0], [588.0]], [[589.0]]), s0([[590.0], [591.0]], [[592.0]])], s1([s0([[593.0], [594.0]], [[595.0]]), s0([[596.0], [597.0]], [[598.0]])], s0([[599.0], [600.0]], [[601.0]]))), s3([s0([[602.0], [603.0]], [[604.0]]), s0([[605.0], [606.0]], [[607.0]])], [s0([[608.0], [609.0]], [[610.0]]), s0([[611.0], [612.0]], [[613.0]])], s1([s0([[614.0], [615.0]], [[616.0]]), s0([[617.0], [618.0]], [[619.0]])], s0([[620.0], [621.0]], [[622.0]])))], s1([s0([[623.0], [624.0]], [[625.0]]), s0([[626.0], [627.0]], [[628.0]])], s0([[629.0], [630.0]], [[631.0]]))), s4([s3([s0([[632.0], [633.0]], [[634.0]]), s0([[635.0], [636.0]], [[637.0]])], [s0([[638.0], [639.0]], [[640.0]]), s0([[641.0], [642.0]], [[643.0]])], s1([s0([[644.0], [645.0]], [[646.0]]), s0([[647.0], [648.0]], [[649.0]])], s0([[650.0], [651.0]], [[652.0]]))), s3([s0([[653.0], [654.0]], [[655.0]]), s0([[656.0], [657.0]], [[658.0]])], [s0([[659.0], [660.0]], [[661.0]]), s0([[662.0], [663.0]], [[664.0]])], s1([s0([[665.0], [666.0]], [[667.0]]), s0([[668.0], [669.0]], [[670.0]])], s0([[671.0], [672.0]], [[673.0]])))], s1([s0([[674.0], [675.0]], [[676.0]]), s0([[677.0], [678.0]], [[679.0]])], s0([[680.0], [681.0]], [[682.0]])))], s3([s0([[683.0], [684.0]], [[685.0]]), s0([[686.0], [687.0]], [[688.0]])], [s0([[689.0], [690.0]], [[691.0]]), s0([[692.0], [693.0]], [[694.0]])], s1([s0([[695.0], [696.0]], [[697.0]]), s0([[698.0], [699.0]], [[700.0]])], s0([[701.0], [702.0]], [[703.0]]))))]] in
    let v2: s3 = s3([s0([[704.0], [705.0]], [[706.0]]), s0([[707.0], [708.0]], [[709.0]])], [s0([[710.0], [711.0]], [[712.0]]), s0([[713.0], [714.0]], [[715.0]])], s1([s0([[716.0], [717.0]], [[718.0]]), s0([[719.0], [720.0]], [[721.0]])], s0([[722.0], [723.0]], [[724.0]]))) in
    let v3: Float = 725.0 in
    let initialResult: Float = 725.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()