  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s3 {
    var p0: s0
    var p1: [s0]
  } in
  let noinline_f0: ([[s3]], Float) -> Float = (v0: [[s3]], v1: Float) -> Float {
    let v6: [s3] = v0[1] in
    var v5: [[s3]] = v0 in
    let v8: s3 = v6[0] in
    let v2: [s3] = v5[1] in
    v5[0] = v2 in
    let v14: [s3] = v5[0] in
    var v10: [[s3]] = v5 in
    let v3: s3 = v14[0] in
    v10[1] = v14 in
    let v12: [s0] = v3.p1 in
    let v18: [s3] = v0[1] in
    v10[1] = v2 in
    v5 = v10 in
    v5[0] = v2 in
    let v30: s0 = v12[1] in
    let v21: [[Float]] = v30.p1 in
    v10[1] = v2 in
    let v37: [Float] = v21[0] in
    v10 = v0 in
    var v44: [Float] = v37 in
    v10[0] = v2 in
    v5[0] = v6 in
    v5[1] = v14 in
    v10 = v0 in
    let v43: Float = v44[0] in
    var v118: Float = v43 in
    v5[0] = v18 in
    var v82: [s3] = v18 in
    var v110: [s3] = v82 in
    v110[0] = v8 in
    let v223: Float = v37[0] in
    let v187: Float = v223 / v118 in
    v10[0] = v110 in
    v187
  } in
  fun loop(i: Int, v0: [[s3]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s3]] = [[s3(s0([[0.0], [1.0]], [[2.0], [3.0]]), [s0([[4.0], [5.0]], [[6.0], [7.0]]), s0([[8.0], [9.0]], [[10.0], [11.0]])])], [s3(s0([[12.0], [13.0]], [[14.0], [15.0]]), [s0([[16.0], [17.0]], [[18.0], [19.0]]), s0([[20.0], [21.0]], [[22.0], [23.0]])])]] in
    let v1: Float = 24.0 in
    let initialResult: Float = 24.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()