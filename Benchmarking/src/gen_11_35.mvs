  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s3 {
    var p0: s1
    var p1: [s0]
  } in
  let f63: (Float) -> Float = (v0: Float) -> Float {
    var v5: Float = v0 in
    var v7: Float = v0 in
    var v4: Float = v5 in
    var v1: Float = v0 in
    var v2: Float = v4 in
    var v8: Float = v2 in
    var v3: Float = v1 in
    var v15: Float = v7 in
    v5 = v8 in
    var v11: Float = v15 in
    var v16: Float = v1 in
    let v33: [Float] = [v7, v3, v11, v16, v1, v5] in
    v11 = v0 in
    var v14: [Float] = v33 in
    var v21: Float = v3 in
    v11 = v16 in
    v14 = v33 in
    v14[4] = v21 in
    let v27: Float = v14[2] in
    v27
  } in
  let noinline_f0: ([s3], Float) -> Float = (v0: [s3], v1: Float) -> Float {
    let v2: Float = v1 + v1 in
    let v7: Float = f63(v2) in
    var v14: Float = v7 in
    var v15: Float = v7 in
    let v28: [Float] = [v15, v1, v15, v7, v14, v2, v15] in
    var v18: [Float] = v28 in
    var v56: Float = v14 in
    v15 = v14 in
    v18[2] = v2 in
    let v60: Float = v18[1] in
    v56 = v15 in
    let v113: Float = v56 - v60 in
    v113
  } in
  fun loop(i: Int, v0: [s3], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s3] = [s3(s1(s0([[0.0]], [[1.0], [2.0]]), s0([[3.0]], [[4.0], [5.0]])), [s0([[6.0]], [[7.0], [8.0]])]), s3(s1(s0([[9.0]], [[10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0]])), [s0([[15.0]], [[16.0], [17.0]])]), s3(s1(s0([[18.0]], [[19.0], [20.0]]), s0([[21.0]], [[22.0], [23.0]])), [s0([[24.0]], [[25.0], [26.0]])])] in
    let v1: Float = 27.0 in
    let initialResult: Float = 27.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()