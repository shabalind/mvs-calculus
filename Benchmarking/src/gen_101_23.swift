  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
    var p4: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  }
  struct s2 {
    var p0: [s1]
    var p1: s1
  }
  @inline(never)
  func f0(_ v0: s2, _ v1: Double) -> Double {
    let v5: s1 = v0.p1
    let v2: s0 = v5.p0
    var v7: s2 = v0
    let v9: [s1] = v7.p0
    var v11: s1 = v5
    let v8: s1 = v9[2]
    let v29: s1 = v9[1]
    let v12: [[Double]] = v2.p4
    var v15: s1 = v29
    let v30: [[s0]] = v8.p1
    let v16: [s0] = v30[1]
    let v18: s0 = v16[0]
    let v22: [[s0]] = v29.p1
    let v28: [s0] = v30[2]
    let v24: [[Double]] = v18.p3
    let v35: s0 = v16[0]
    let v19: s0 = v11.p0
    let v41: s0 = v5.p0
    let v42: [[Double]] = v35.p2
    let v23: [[s0]] = v29.p1
    var v67: s0 = v19
    v11 = v15
    let v75: [[Double]] = v67.p2
    v67.p4 = v12
    let v34: s1 = v9[0]
    v15.p1 = v23
    let v48: s0 = s0(p0: v42, p1: v75, p2: v75, p3: v24, p4: v12)
    let v60: [[Double]] = v48.p1
    var v111: [[s0]] = v23
    v111[2] = v16
    let v32: [Double] = v60[0]
    v111[1] = v28
    v11.p0 = v48
    let v69: [[[s0]]] = [v30, v22, v30, v23, v111]
    v15.p1 = v30
    v15.p0 = v48
    let v114: [[s0]] = v69[0]
    let v103: [[s0]] = v5.p1
    v11.p1 = v103
    v111[2] = v28
    v11.p1 = v30
    let v93: [[s0]] = v34.p1
    let v149: Double = v32[0]
    v11.p1 = v22
    v15.p1 = v93
    v67 = v41
    v15.p1 = v114
    return v149
  }
  func benchmark() {
    let v0: s2 = s2(p0: [s1(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0]], p2: [[4.0], [5.0]], p3: [[6.0], [7.0], [8.0]], p4: [[9.0]]), p1: [[s0(p0: [[10.0], [11.0]], p1: [[12.0], [13.0]], p2: [[14.0], [15.0]], p3: [[16.0], [17.0], [18.0]], p4: [[19.0]])], [s0(p0: [[20.0], [21.0]], p1: [[22.0], [23.0]], p2: [[24.0], [25.0]], p3: [[26.0], [27.0], [28.0]], p4: [[29.0]])], [s0(p0: [[30.0], [31.0]], p1: [[32.0], [33.0]], p2: [[34.0], [35.0]], p3: [[36.0], [37.0], [38.0]], p4: [[39.0]])]]), s1(p0: s0(p0: [[40.0], [41.0]], p1: [[42.0], [43.0]], p2: [[44.0], [45.0]], p3: [[46.0], [47.0], [48.0]], p4: [[49.0]]), p1: [[s0(p0: [[50.0], [51.0]], p1: [[52.0], [53.0]], p2: [[54.0], [55.0]], p3: [[56.0], [57.0], [58.0]], p4: [[59.0]])], [s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0]], p2: [[64.0], [65.0]], p3: [[66.0], [67.0], [68.0]], p4: [[69.0]])], [s0(p0: [[70.0], [71.0]], p1: [[72.0], [73.0]], p2: [[74.0], [75.0]], p3: [[76.0], [77.0], [78.0]], p4: [[79.0]])]]), s1(p0: s0(p0: [[80.0], [81.0]], p1: [[82.0], [83.0]], p2: [[84.0], [85.0]], p3: [[86.0], [87.0], [88.0]], p4: [[89.0]]), p1: [[s0(p0: [[90.0], [91.0]], p1: [[92.0], [93.0]], p2: [[94.0], [95.0]], p3: [[96.0], [97.0], [98.0]], p4: [[99.0]])], [s0(p0: [[100.0], [101.0]], p1: [[102.0], [103.0]], p2: [[104.0], [105.0]], p3: [[106.0], [107.0], [108.0]], p4: [[109.0]])], [s0(p0: [[110.0], [111.0]], p1: [[112.0], [113.0]], p2: [[114.0], [115.0]], p3: [[116.0], [117.0], [118.0]], p4: [[119.0]])]])], p1: s1(p0: s0(p0: [[120.0], [121.0]], p1: [[122.0], [123.0]], p2: [[124.0], [125.0]], p3: [[126.0], [127.0], [128.0]], p4: [[129.0]]), p1: [[s0(p0: [[130.0], [131.0]], p1: [[132.0], [133.0]], p2: [[134.0], [135.0]], p3: [[136.0], [137.0], [138.0]], p4: [[139.0]])], [s0(p0: [[140.0], [141.0]], p1: [[142.0], [143.0]], p2: [[144.0], [145.0]], p3: [[146.0], [147.0], [148.0]], p4: [[149.0]])], [s0(p0: [[150.0], [151.0]], p1: [[152.0], [153.0]], p2: [[154.0], [155.0]], p3: [[156.0], [157.0], [158.0]], p4: [[159.0]])]]))
    let v1: Double = 160.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 160.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
