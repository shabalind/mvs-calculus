  struct s0 {
    var p0: [[Float]]
    var p1: [Float]
    var p2: [[Float]]
  } in
  struct s2 {
    var p0: [s0]
    var p1: s0
  } in
  struct s4 {
    var p0: [[s2]]
    var p1: s2
  } in
  struct s6 {
    var p0: [[s4]]
    var p1: s0
  } in
  let f8: (s6) -> s6 = (v0: s6) -> s6 {
    let v5: [[s4]] = v0.p0 in
    let v3: [s4] = v5[0] in
    let v7: s4 = v3[0] in
    let v18: s2 = v7.p1 in
    let v54: s0 = v18.p1 in
    let v87: s6 = s6(v5, v54) in
    v87
  } in
  let f1: (s6) -> s6 = (v0: s6) -> s6 {
    let v3: s6 = f8(v0) in
    var v2: s6 = v3 in
    let v6: s0 = v2.p1 in
    var v4: s0 = v6 in
    var v13: s6 = v0 in
    let v9: s0 = v3.p1 in
    var v8: s0 = v9 in
    var v12: s6 = v13 in
    v12.p1 = v8 in
    v12.p1 = v4 in
    v12
  } in
  let noinline_f0: (s0, s6, Float) -> Float = (v0: s0, v1: s6, v2: Float) -> Float {
    let v5: [Float] = [v2, v2, v2, v2, v2] in
    let v8: Float = v5[3] in
    var v4: s0 = v0 in
    let v17: [Float] = v4.p1 in
    let v19: Float = v17[0] in
    let v18: [Float] = v4.p1 in
    let v33: Float = v8 + v19 in
    let v30: Float = v18[0] in
    let v37: s6 = f1(v1) in
    let v22: s0 = v37.p1 in
    let v32: [[Float]] = v22.p0 in
    let v34: [Float] = v32[2] in
    let v49: Float = v34[0] in
    let v86: [Float] = [v33, v49, v2, v2, v30] in
    let v95: Float = v86[1] in
    v95
  } in
  fun loop(i: Int, v0: s0, v1: s6, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0], [2.0]], [3.0, 4.0], [[5.0]]) in
    let v1: s6 = s6([[s4([[s2([s0([[6.0], [7.0], [8.0]], [9.0, 10.0], [[11.0]])], s0([[12.0], [13.0], [14.0]], [15.0, 16.0], [[17.0]]))], [s2([s0([[18.0], [19.0], [20.0]], [21.0, 22.0], [[23.0]])], s0([[24.0], [25.0], [26.0]], [27.0, 28.0], [[29.0]]))], [s2([s0([[30.0], [31.0], [32.0]], [33.0, 34.0], [[35.0]])], s0([[36.0], [37.0], [38.0]], [39.0, 40.0], [[41.0]]))]], s2([s0([[42.0], [43.0], [44.0]], [45.0, 46.0], [[47.0]])], s0([[48.0], [49.0], [50.0]], [51.0, 52.0], [[53.0]])))], [s4([[s2([s0([[54.0], [55.0], [56.0]], [57.0, 58.0], [[59.0]])], s0([[60.0], [61.0], [62.0]], [63.0, 64.0], [[65.0]]))], [s2([s0([[66.0], [67.0], [68.0]], [69.0, 70.0], [[71.0]])], s0([[72.0], [73.0], [74.0]], [75.0, 76.0], [[77.0]]))], [s2([s0([[78.0], [79.0], [80.0]], [81.0, 82.0], [[83.0]])], s0([[84.0], [85.0], [86.0]], [87.0, 88.0], [[89.0]]))]], s2([s0([[90.0], [91.0], [92.0]], [93.0, 94.0], [[95.0]])], s0([[96.0], [97.0], [98.0]], [99.0, 100.0], [[101.0]])))]], s0([[102.0], [103.0], [104.0]], [105.0, 106.0], [[107.0]])) in
    let v2: Float = 108.0 in
    let initialResult: Float = 108.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()