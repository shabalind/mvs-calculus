  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
    var p3: [[Float]]
    var p4: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s3 {
    var p0: s1
    var p1: s0
  } in
  let noinline_f0: ([s3], s3, Float) -> Float = (v0: [s3], v1: s3, v2: Float) -> Float {
    let v5: s1 = v1.p0 in
    let v8: [s0] = v5.p1 in
    let v4: s0 = v8[0] in
    let v3: [[Float]] = v4.p4 in
    let v14: [Float] = v3[0] in
    let v9: [Float] = v3[0] in
    let v36: Float = v14[0] in
    var v17: Float = v2 in
    let v20: Float = v9[0] in
    let v44: Float = v14[0] in
    let v84: [Float] = [v44, v17, v2, v36, v20, v2, v36] in
    let v94: Float = v84[1] in
    let v98: Float = v94 + v94 in
    v98
  } in
  fun loop(i: Int, v0: [s3], v1: s3, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s3] = [s3(s1(s0([[0.0], [1.0]], [[2.0]], [[3.0], [4.0], [5.0]], [[6.0], [7.0], [8.0]], [[9.0]]), [s0([[10.0], [11.0]], [[12.0]], [[13.0], [14.0], [15.0]], [[16.0], [17.0], [18.0]], [[19.0]]), s0([[20.0], [21.0]], [[22.0]], [[23.0], [24.0], [25.0]], [[26.0], [27.0], [28.0]], [[29.0]])]), s0([[30.0], [31.0]], [[32.0]], [[33.0], [34.0], [35.0]], [[36.0], [37.0], [38.0]], [[39.0]]))] in
    let v1: s3 = s3(s1(s0([[40.0], [41.0]], [[42.0]], [[43.0], [44.0], [45.0]], [[46.0], [47.0], [48.0]], [[49.0]]), [s0([[50.0], [51.0]], [[52.0]], [[53.0], [54.0], [55.0]], [[56.0], [57.0], [58.0]], [[59.0]]), s0([[60.0], [61.0]], [[62.0]], [[63.0], [64.0], [65.0]], [[66.0], [67.0], [68.0]], [[69.0]])]), s0([[70.0], [71.0]], [[72.0]], [[73.0], [74.0], [75.0]], [[76.0], [77.0], [78.0]], [[79.0]])) in
    let v2: Float = 80.0 in
    let initialResult: Float = 80.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()