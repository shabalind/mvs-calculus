  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: Double
  }
  func f28(_ v0: [s0]) -> [s0] {
    let v1: s0 = v0[0]
    let v2: Double = v1.p1
    let v6: Double = v2 - v2
    let v8: s0 = v0[0]
    let v7: [[Double]] = v8.p0
    var v3: [[Double]] = v7
    let v5: [[Double]] = v8.p0
    var v10: [[Double]] = v3
    let v21: [[Double]] = v1.p0
    var v9: s0 = v8
    v9.p0 = v7
    var v14: [[Double]] = v10
    let v22: [Double] = v14[0]
    let v30: Double = v22[0]
    v14[0] = v22
    var v16: [s0] = v0
    v16[0] = v9
    v3 = v5
    var v85: [Double] = v22
    let v40: s0 = v16[0]
    let v57: [[Double]] = v9.p0
    v9.p1 = v30
    v16[0] = v9
    let v52: [Double] = v7[0]
    let v71: [s0] = [v40, v9, v40, v9, v8, v40]
    v3[0] = v52
    v10[0] = v85
    var v29: [s0] = v16
    let v114: Double = v9.p1
    v9.p0 = v57
    v9.p0 = v21
    v16[0] = v40
    var v38: [s0] = v71
    v9.p1 = v6
    v9.p1 = v114
    v29[0] = v9
    let v50: s0 = v38[0]
    v16[0] = v50
    return v29
  }
  func f22(_ v0: s0) -> s0 {
    var v1: s0 = v0
    let v4: Double = v0.p1
    let v7: Double = v1.p1
    let v5: [Double] = [v4, v4, v4, v7, v4, v7]
    v1.p1 = v7
    var v18: s0 = v1
    var v14: s0 = v0
    let v16: Double = v5[5]
    v1.p1 = v16
    let v13: [s0] = [v14]
    let v11: [s0] = f28(v13)
    v1.p1 = v16
    let v21: s0 = v11[0]
    let v24: [[Double]] = v14.p0
    var v15: [[Double]] = v24
    let v30: [[Double]] = v18.p0
    let v28: [Double] = v15[0]
    v14.p0 = v30
    let v34: [[[Double]]] = [v24, v24, v15]
    v18.p0 = v24
    var v47: s0 = v14
    let v42: [[Double]] = v21.p0
    let v38: Double = v18.p1
    v15[0] = v28
    var v27: [[[Double]]] = v34
    v15[0] = v28
    var v25: [[Double]] = v24
    let v41: [Double] = v42[0]
    let v61: s0 = s0(p0: v25, p1: v38)
    let v53: [[Double]] = v47.p0
    let v80: Double = v28[0]
    let v54: [[Double]] = v27[0]
    v18.p1 = v80
    let v36: [Double] = v42[0]
    v15[0] = v36
    let v85: [[Double]] = v0.p0
    var v77: [[Double]] = v85
    var v72: [[Double]] = v15
    let v93: [[Double]] = v27[2]
    v1.p0 = v54
    var v91: [[[Double]]] = v27
    var v154: [[Double]] = v93
    let v180: [[Double]] = v91[0]
    v25 = v42
    v154[0] = v41
    v77 = v72
    v18.p0 = v77
    v27[2] = v154
    v15 = v53
    v154 = v180
    return v61
  }
  func f6(_ v0: s0) -> s0 {
    let v2: s0 = f22(v0)
    var v7: s0 = v2
    let v5: s0 = f22(v2)
    let v4: s0 = f22(v7)
    var v3: s0 = v5
    var v9: s0 = v4
    var v6: s0 = v7
    let v8: Double = v7.p1
    let v1: [[Double]] = v2.p0
    let v11: s0 = f22(v2)
    v7.p0 = v1
    let v15: Double = v6.p1
    let v23: Double = v11.p1
    let v10: [[Double]] = v4.p0
    let v16: [Double] = v10[0]
    let v14: s0 = s0(p0: v1, p1: v8)
    let v17: s0 = f22(v3)
    var v25: [Double] = v16
    let v18: [[Double]] = v0.p0
    let v12: s0 = f22(v2)
    v25 = v16
    let v35: Double = v9.p1
    let v19: Double = v16[0]
    v25[0] = v15
    v25[0] = v19
    let v29: [Double] = v18[0]
    v6.p1 = v23
    let v39: s0 = f22(v11)
    let v46: [Double] = v1[0]
    let v27: s0 = f22(v0)
    var v68: [Double] = v29
    let v44: [[Double]] = v12.p0
    let v45: [Double] = v1[0]
    let v26: [[Double]] = v12.p0
    v3.p1 = v35
    v3.p0 = v10
    let v57: s0 = f22(v39)
    v25[0] = v19
    let v49: [[Double]] = v11.p0
    v25[0] = v15
    let v40: [s0] = [v4, v27, v2, v14, v5, v3, v57]
    v25[0] = v35
    let v28: Double = v16[0]
    v68[0] = v28
    v68[0] = v15
    let v87: s0 = s0(p0: v49, p1: v8)
    let v43: Double = v4.p1
    v25[0] = v19
    v25[0] = v19
    v7.p0 = v26
    let v80: [Double] = v10[0]
    var v51: [Double] = v45
    let v36: Double = v17.p1
    v9.p1 = v8
    let v48: Double = v87.p1
    var v83: [[Double]] = v26
    v83[0] = v46
    v51[0] = v8
    let v93: Double = v51[0]
    v7.p0 = v83
    let v74: s0 = f22(v27)
    v51[0] = v28
    v6.p1 = v93
    let v62: s0 = v40[3]
    v51[0] = v48
    var v108: [s0] = v40
    v3.p1 = v35
    let v137: s0 = s0(p0: v44, p1: v43)
    var v139: [s0] = v108
    v25[0] = v36
    let v158: s0 = f22(v137)
    v83[0] = v68
    v83[0] = v25
    let v194: s0 = v108[1]
    v108[1] = v5
    let v141: [[Double]] = v62.p0
    v9.p1 = v23
    let v150: s0 = f22(v74)
    v108 = v139
    v108[1] = v158
    v6.p0 = v141
    v108[2] = v150
    v51[0] = v8
    v6.p1 = v48
    v83[0] = v80
    return v194
  }
  @inline(never)
  func f0(_ v0: s0, _ v1: Double) -> Double {
    var v4: s0 = v0
    let v7: Double = v1 - v1
    let v6: [[Double]] = v4.p0
    v4 = v0
    let v3: [Double] = v6[0]
    let v5: s0 = f22(v0)
    let v2: Double = v4.p1
    let v12: Double = v7 + v2
    var v14: [[Double]] = v6
    v14[0] = v3
    var v8: [Double] = v3
    let v9: [Double] = v14[0]
    v8[0] = v2
    let v11: s0 = f6(v4)
    v4.p1 = v2
    let v15: s0 = s0(p0: v14, p1: v12)
    let v13: [Double] = v14[0]
    let v20: s0 = f6(v11)
    let v33: [[Double]] = v20.p0
    var v21: [[Double]] = v6
    let v18: [s0] = [v4, v20, v20, v11, v15, v4]
    let v19: [Double] = v6[0]
    let v24: [Double] = v33[0]
    let v37: [[Double]] = v11.p0
    let v16: Double = v9[0]
    v4.p1 = v1
    var v46: [[Double]] = v21
    v8[0] = v1
    v14[0] = v8
    var v73: [Double] = v24
    v4.p0 = v46
    v4.p0 = v21
    v4.p0 = v46
    let v36: [[Double]] = [v73]
    let v55: s0 = v18[1]
    let v27: Double = v55.p1
    v73[0] = v2
    let v35: s0 = v18[5]
    let v38: Double = v9[0]
    v4.p1 = v16
    v21[0] = v73
    v8[0] = v1
    v14[0] = v19
    let v51: Double = v35.p1
    v8[0] = v1
    v4.p1 = v27
    v4.p0 = v36
    let v31: s0 = f22(v5)
    let v67: [[Double]] = v15.p0
    v4.p0 = v33
    let v75: Double = v31.p1
    v4.p0 = v36
    v4.p0 = v37
    v8[0] = v1
    var v104: Double = v38
    let v110: [[Double]] = v11.p0
    var v120: Double = v75
    v4.p1 = v104
    v4.p0 = v110
    var v88: Double = v120
    v4.p0 = v37
    let v130: Double = v1 - v51
    v4.p0 = v67
    v4.p0 = v110
    v4.p1 = v88
    v4.p1 = v38
    v21[0] = v13
    return v130
  }
  func benchmark() {
    let v0: s0 = s0(p0: [[0.0]], p1: 1.0)
    let v1: Double = 2.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 2.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
