  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: s0
    var p1: [s0]
  } in
  let f36: (s2) -> s2 = (v0: s2) -> s2 {
    v0
  } in
  let f31: (s2) -> s2 = (v0: s2) -> s2 {
    let v1: s2 = f36(v0) in
    let v2: s2 = f36(v0) in
    let v12: s2 = f36(v0) in
    let v23: s2 = f36(v12) in
    let v15: s2 = f36(v2) in
    let v18: s2 = f36(v1) in
    let v55: s2 = f36(v18) in
    let v110: [s2] = [v55, v15, v23] in
    let v69: s2 = v110[0] in
    let v203: s2 = f36(v69) in
    v203
  } in
  let f24: ([s2], s2) -> [s2] = (v0: [s2], v1: s2) -> [s2] {
    let v5: s2 = v0[0] in
    var v7: [s2] = v0 in
    let v9: s2 = f31(v5) in
    v7[0] = v9 in
    v7[0] = v1 in
    v7[0] = v5 in
    let v11: s2 = f36(v1) in
    let v33: s2 = f36(v11) in
    v7[0] = v1 in
    let v14: s2 = f31(v33) in
    let v18: s2 = f31(v33) in
    v7 = v0 in
    let v39: s2 = f36(v14) in
    let v34: s2 = f36(v18) in
    v7[0] = v14 in
    let v158: s2 = f31(v39) in
    let v118: s2 = f36(v158) in
    v7[0] = v118 in
    v7[0] = v34 in
    v7
  } in
  let noinline_f0: ([[s1]], [s2], Float) -> Float = (v0: [[s1]], v1: [s2], v2: Float) -> Float {
    let v5: s2 = v1[1] in
    let v7: [s2] = f24(v1, v5) in
    let v4: s2 = v7[1] in
    let v10: [s0] = v4.p1 in
    let v26: s0 = v10[0] in
    let v15: [[Float]] = v26.p1 in
    let v36: [Float] = v15[2] in
    let v46: Float = v36[0] in
    v46
  } in
  fun loop(i: Int, v0: [[s1]], v1: [s2], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s1]] = [[s1([s0([[0.0]], [[1.0], [2.0], [3.0]]), s0([[4.0]], [[5.0], [6.0], [7.0]]), s0([[8.0]], [[9.0], [10.0], [11.0]])], [[s0([[12.0]], [[13.0], [14.0], [15.0]])], [s0([[16.0]], [[17.0], [18.0], [19.0]])]])], [s1([s0([[20.0]], [[21.0], [22.0], [23.0]]), s0([[24.0]], [[25.0], [26.0], [27.0]]), s0([[28.0]], [[29.0], [30.0], [31.0]])], [[s0([[32.0]], [[33.0], [34.0], [35.0]])], [s0([[36.0]], [[37.0], [38.0], [39.0]])]])], [s1([s0([[40.0]], [[41.0], [42.0], [43.0]]), s0([[44.0]], [[45.0], [46.0], [47.0]]), s0([[48.0]], [[49.0], [50.0], [51.0]])], [[s0([[52.0]], [[53.0], [54.0], [55.0]])], [s0([[56.0]], [[57.0], [58.0], [59.0]])]])]] in
    let v1: [s2] = [s2(s0([[60.0]], [[61.0], [62.0], [63.0]]), [s0([[64.0]], [[65.0], [66.0], [67.0]])]), s2(s0([[68.0]], [[69.0], [70.0], [71.0]]), [s0([[72.0]], [[73.0], [74.0], [75.0]])])] in
    let v2: Float = 76.0 in
    let initialResult: Float = 76.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()