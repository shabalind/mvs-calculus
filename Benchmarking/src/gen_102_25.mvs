  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: s1
    var p1: s1
  } in
  let noinline_f0: ([s2], [s1], Float) -> Float = (v0: [s2], v1: [s1], v2: Float) -> Float {
    let v4: s1 = v1[0] in
    let v9: [s0] = v4.p1 in
    let v6: s1 = v1[0] in
    let v5: s0 = v6.p0 in
    let v12: s0 = v9[2] in
    let v25: [[Float]] = v5.p1 in
    var v29: s0 = v12 in
    var v21: Float = v2 in
    v29.p1 = v25 in
    let v36: [[Float]] = v29.p0 in
    let v140: [Float] = v36[0] in
    let v95: Float = v140[0] in
    let v124: Float = v95 / v21 in
    let v168: [[Float]] = v29.p0 in
    v29.p1 = v168 in
    v124
  } in
  fun loop(i: Int, v0: [s2], v1: [s1], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2(s1(s0([[0.0]], [[1.0]]), [s0([[2.0]], [[3.0]]), s0([[4.0]], [[5.0]]), s0([[6.0]], [[7.0]])]), s1(s0([[8.0]], [[9.0]]), [s0([[10.0]], [[11.0]]), s0([[12.0]], [[13.0]]), s0([[14.0]], [[15.0]])])), s2(s1(s0([[16.0]], [[17.0]]), [s0([[18.0]], [[19.0]]), s0([[20.0]], [[21.0]]), s0([[22.0]], [[23.0]])]), s1(s0([[24.0]], [[25.0]]), [s0([[26.0]], [[27.0]]), s0([[28.0]], [[29.0]]), s0([[30.0]], [[31.0]])]))] in
    let v1: [s1] = [s1(s0([[32.0]], [[33.0]]), [s0([[34.0]], [[35.0]]), s0([[36.0]], [[37.0]]), s0([[38.0]], [[39.0]])])] in
    let v2: Float = 40.0 in
    let initialResult: Float = 40.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()