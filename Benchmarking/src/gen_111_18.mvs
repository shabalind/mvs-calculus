  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: ([s0], Float) -> Float = (v0: [s0], v1: Float) -> Float {
    let v2: s0 = v0[0] in
    let v5: [[Float]] = v2.p0 in
    let v4: [[Float]] = v2.p0 in
    let v3: s0 = s0(v5, v4) in
    var v13: Float = v1 in
    let v14: [[Float]] = v3.p0 in
    var v10: [[Float]] = v4 in
    v10 = v14 in
    let v15: [Float] = v10[0] in
    let v26: Float = v15[0] in
    v13 = v26 in
    v13
  } in
  fun loop(i: Int, v0: [s0], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0]], [[1.0]])] in
    let v1: Float = 2.0 in
    let initialResult: Float = 2.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()