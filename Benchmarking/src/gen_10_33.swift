  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: [s0]
    var p1: [[s1]]
    var p2: s0
    var p3: [s1]
  }
  struct s3 {
    var p0: [s0]
    var p1: s1
  }
  struct s8 {
    var p0: [[s3]]
    var p1: [s2]
  }
  @inline(never)
  func f0(_ v0: [s8], _ v1: Double) -> Double {
    let v15: s8 = v0[0]
    let v14: [[s3]] = v15.p0
    let v19: [s3] = v14[0]
    let v30: s3 = v19[0]
    let v22: [s0] = v30.p0
    let v21: [s0] = v30.p0
    let v37: s0 = v22[2]
    let v27: s0 = v21[0]
    var v29: s0 = v37
    let v39: [[Double]] = v29.p1
    v29.p1 = v39
    v29.p1 = v39
    let v33: [[Double]] = v27.p0
    let v63: [Double] = v39[0]
    let v62: Double = v63[0]
    v29.p2 = v33
    v29.p2 = v33
    v29.p0 = v33
    return v62
  }
  func benchmark() {
    let v0: [s8] = [s8(p0: [[s3(p0: [s0(p0: [[0.0], [1.0]], p1: [[2.0]], p2: [[3.0], [4.0]]), s0(p0: [[5.0], [6.0]], p1: [[7.0]], p2: [[8.0], [9.0]]), s0(p0: [[10.0], [11.0]], p1: [[12.0]], p2: [[13.0], [14.0]])], p1: s1(p0: s0(p0: [[15.0], [16.0]], p1: [[17.0]], p2: [[18.0], [19.0]]), p1: s0(p0: [[20.0], [21.0]], p1: [[22.0]], p2: [[23.0], [24.0]])))], [s3(p0: [s0(p0: [[25.0], [26.0]], p1: [[27.0]], p2: [[28.0], [29.0]]), s0(p0: [[30.0], [31.0]], p1: [[32.0]], p2: [[33.0], [34.0]]), s0(p0: [[35.0], [36.0]], p1: [[37.0]], p2: [[38.0], [39.0]])], p1: s1(p0: s0(p0: [[40.0], [41.0]], p1: [[42.0]], p2: [[43.0], [44.0]]), p1: s0(p0: [[45.0], [46.0]], p1: [[47.0]], p2: [[48.0], [49.0]])))]], p1: [s2(p0: [s0(p0: [[50.0], [51.0]], p1: [[52.0]], p2: [[53.0], [54.0]]), s0(p0: [[55.0], [56.0]], p1: [[57.0]], p2: [[58.0], [59.0]]), s0(p0: [[60.0], [61.0]], p1: [[62.0]], p2: [[63.0], [64.0]])], p1: [[s1(p0: s0(p0: [[65.0], [66.0]], p1: [[67.0]], p2: [[68.0], [69.0]]), p1: s0(p0: [[70.0], [71.0]], p1: [[72.0]], p2: [[73.0], [74.0]]))], [s1(p0: s0(p0: [[75.0], [76.0]], p1: [[77.0]], p2: [[78.0], [79.0]]), p1: s0(p0: [[80.0], [81.0]], p1: [[82.0]], p2: [[83.0], [84.0]]))]], p2: s0(p0: [[85.0], [86.0]], p1: [[87.0]], p2: [[88.0], [89.0]]), p3: [s1(p0: s0(p0: [[90.0], [91.0]], p1: [[92.0]], p2: [[93.0], [94.0]]), p1: s0(p0: [[95.0], [96.0]], p1: [[97.0]], p2: [[98.0], [99.0]])), s1(p0: s0(p0: [[100.0], [101.0]], p1: [[102.0]], p2: [[103.0], [104.0]]), p1: s0(p0: [[105.0], [106.0]], p1: [[107.0]], p2: [[108.0], [109.0]]))])]), s8(p0: [[s3(p0: [s0(p0: [[110.0], [111.0]], p1: [[112.0]], p2: [[113.0], [114.0]]), s0(p0: [[115.0], [116.0]], p1: [[117.0]], p2: [[118.0], [119.0]]), s0(p0: [[120.0], [121.0]], p1: [[122.0]], p2: [[123.0], [124.0]])], p1: s1(p0: s0(p0: [[125.0], [126.0]], p1: [[127.0]], p2: [[128.0], [129.0]]), p1: s0(p0: [[130.0], [131.0]], p1: [[132.0]], p2: [[133.0], [134.0]])))], [s3(p0: [s0(p0: [[135.0], [136.0]], p1: [[137.0]], p2: [[138.0], [139.0]]), s0(p0: [[140.0], [141.0]], p1: [[142.0]], p2: [[143.0], [144.0]]), s0(p0: [[145.0], [146.0]], p1: [[147.0]], p2: [[148.0], [149.0]])], p1: s1(p0: s0(p0: [[150.0], [151.0]], p1: [[152.0]], p2: [[153.0], [154.0]]), p1: s0(p0: [[155.0], [156.0]], p1: [[157.0]], p2: [[158.0], [159.0]])))]], p1: [s2(p0: [s0(p0: [[160.0], [161.0]], p1: [[162.0]], p2: [[163.0], [164.0]]), s0(p0: [[165.0], [166.0]], p1: [[167.0]], p2: [[168.0], [169.0]]), s0(p0: [[170.0], [171.0]], p1: [[172.0]], p2: [[173.0], [174.0]])], p1: [[s1(p0: s0(p0: [[175.0], [176.0]], p1: [[177.0]], p2: [[178.0], [179.0]]), p1: s0(p0: [[180.0], [181.0]], p1: [[182.0]], p2: [[183.0], [184.0]]))], [s1(p0: s0(p0: [[185.0], [186.0]], p1: [[187.0]], p2: [[188.0], [189.0]]), p1: s0(p0: [[190.0], [191.0]], p1: [[192.0]], p2: [[193.0], [194.0]]))]], p2: s0(p0: [[195.0], [196.0]], p1: [[197.0]], p2: [[198.0], [199.0]]), p3: [s1(p0: s0(p0: [[200.0], [201.0]], p1: [[202.0]], p2: [[203.0], [204.0]]), p1: s0(p0: [[205.0], [206.0]], p1: [[207.0]], p2: [[208.0], [209.0]])), s1(p0: s0(p0: [[210.0], [211.0]], p1: [[212.0]], p2: [[213.0], [214.0]]), p1: s0(p0: [[215.0], [216.0]], p1: [[217.0]], p2: [[218.0], [219.0]]))])]), s8(p0: [[s3(p0: [s0(p0: [[220.0], [221.0]], p1: [[222.0]], p2: [[223.0], [224.0]]), s0(p0: [[225.0], [226.0]], p1: [[227.0]], p2: [[228.0], [229.0]]), s0(p0: [[230.0], [231.0]], p1: [[232.0]], p2: [[233.0], [234.0]])], p1: s1(p0: s0(p0: [[235.0], [236.0]], p1: [[237.0]], p2: [[238.0], [239.0]]), p1: s0(p0: [[240.0], [241.0]], p1: [[242.0]], p2: [[243.0], [244.0]])))], [s3(p0: [s0(p0: [[245.0], [246.0]], p1: [[247.0]], p2: [[248.0], [249.0]]), s0(p0: [[250.0], [251.0]], p1: [[252.0]], p2: [[253.0], [254.0]]), s0(p0: [[255.0], [256.0]], p1: [[257.0]], p2: [[258.0], [259.0]])], p1: s1(p0: s0(p0: [[260.0], [261.0]], p1: [[262.0]], p2: [[263.0], [264.0]]), p1: s0(p0: [[265.0], [266.0]], p1: [[267.0]], p2: [[268.0], [269.0]])))]], p1: [s2(p0: [s0(p0: [[270.0], [271.0]], p1: [[272.0]], p2: [[273.0], [274.0]]), s0(p0: [[275.0], [276.0]], p1: [[277.0]], p2: [[278.0], [279.0]]), s0(p0: [[280.0], [281.0]], p1: [[282.0]], p2: [[283.0], [284.0]])], p1: [[s1(p0: s0(p0: [[285.0], [286.0]], p1: [[287.0]], p2: [[288.0], [289.0]]), p1: s0(p0: [[290.0], [291.0]], p1: [[292.0]], p2: [[293.0], [294.0]]))], [s1(p0: s0(p0: [[295.0], [296.0]], p1: [[297.0]], p2: [[298.0], [299.0]]), p1: s0(p0: [[300.0], [301.0]], p1: [[302.0]], p2: [[303.0], [304.0]]))]], p2: s0(p0: [[305.0], [306.0]], p1: [[307.0]], p2: [[308.0], [309.0]]), p3: [s1(p0: s0(p0: [[310.0], [311.0]], p1: [[312.0]], p2: [[313.0], [314.0]]), p1: s0(p0: [[315.0], [316.0]], p1: [[317.0]], p2: [[318.0], [319.0]])), s1(p0: s0(p0: [[320.0], [321.0]], p1: [[322.0]], p2: [[323.0], [324.0]]), p1: s0(p0: [[325.0], [326.0]], p1: [[327.0]], p2: [[328.0], [329.0]]))])])]
    let v1: Double = 330.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 330.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
