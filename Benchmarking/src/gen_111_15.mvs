  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  let f87: (Float) -> Float = (v0: Float) -> Float {
    let v4: Float = v0 + v0 in
    var v1: Float = v4 in
    let v3: [Float] = [v4, v4, v0, v4, v1] in
    let v2: Float = v3[2] in
    let v6: Float = v3[0] in
    var v10: Float = v6 in
    var v11: [Float] = v3 in
    v11[4] = v10 in
    v11[0] = v1 in
    v11[2] = v2 in
    v1 = v4 in
    let v28: Float = v11[4] in
    v28
  } in
  let noinline_f0: (s0, s1, s0, [s0], Float) -> Float = (v0: s0, v1: s1, v2: s0, v3: [s0], v4: Float) -> Float {
    var v22: Float = v4 in
    var v32: Float = v4 in
    let v73: Float = f87(v32) in
    let v51: Float = v73 - v32 in
    v32 = v22 in
    v51
  } in
  fun loop(i: Int, v0: s0, v1: s1, v2: s0, v3: [s0], v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]]) in
    let v1: s1 = s1(s0([[6.0], [7.0], [8.0]], [[9.0], [10.0], [11.0]]), [[s0([[12.0], [13.0], [14.0]], [[15.0], [16.0], [17.0]])], [s0([[18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0]])], [s0([[24.0], [25.0], [26.0]], [[27.0], [28.0], [29.0]])]]) in
    let v2: s0 = s0([[30.0], [31.0], [32.0]], [[33.0], [34.0], [35.0]]) in
    let v3: [s0] = [s0([[36.0], [37.0], [38.0]], [[39.0], [40.0], [41.0]]), s0([[42.0], [43.0], [44.0]], [[45.0], [46.0], [47.0]])] in
    let v4: Float = 48.0 in
    let initialResult: Float = 48.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()