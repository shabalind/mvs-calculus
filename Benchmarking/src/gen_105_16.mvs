  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: Float
    var p1: s0
  } in
  struct s2 {
    var p0: s1
    var p1: [[s1]]
  } in
  struct s3 {
    var p0: s2
    var p1: [s0]
  } in
  struct s4 {
    var p0: [s3]
    var p1: [s0]
  } in
  struct s5 {
    var p0: [s4]
    var p1: [s3]
  } in
  struct s6 {
    var p0: [[s5]]
    var p1: s2
  } in
  let noinline_f0: (s6, Float) -> Float = (v0: s6, v1: Float) -> Float {
    var v7: Float = v1 in
    var v9: s6 = v0 in
    let v10: s2 = v9.p1 in
    let v11: [[s1]] = v10.p1 in
    let v16: [s1] = v11[1] in
    let v21: [[s5]] = v9.p0 in
    v9.p0 = v21 in
    let v13: s1 = v10.p0 in
    var v20: [[s5]] = v21 in
    let v33: [[s5]] = v0.p0 in
    let v22: [s1] = v11[1] in
    let v19: s1 = v16[0] in
    v20 = v21 in
    var v29: [s1] = v22 in
    v9.p0 = v33 in
    var v32: Float = v7 in
    let v24: s1 = v16[0] in
    var v28: s1 = v19 in
    var v66: [[s5]] = v33 in
    let v40: Float = v24.p0 in
    let v44: [s5] = v20[0] in
    let v34: s0 = v24.p1 in
    let v91: s1 = v29[0] in
    let v81: [[s5]] = [v44, v44, v44, v44, v44, v44] in
    var v115: s1 = v13 in
    v20 = v33 in
    var v43: s1 = v91 in
    let v37: [[Float]] = v34.p1 in
    var v61: Float = v40 in
    let v75: s0 = v43.p1 in
    var v169: [[s1]] = v11 in
    var v76: s1 = v13 in
    let v247: [Float] = v37[1] in
    var v125: [Float] = v247 in
    let v92: [s5] = v81[4] in
    v115.p0 = v61 in
    let v74: Float = v125[0] in
    let v96: s1 = s1(v74, v75) in
    v28.p0 = v32 in
    let v106: s2 = s2(v115, v169) in
    let v99: Float = v96.p0 in
    let v114: s0 = v28.p1 in
    v9.p1 = v106 in
    v61 = v99 in
    v43.p1 = v75 in
    v76.p1 = v75 in
    v115.p1 = v114 in
    let v98: Float = v76.p0 in
    v9.p0 = v66 in
    v66[0] = v92 in
    var v124: [s5] = v92 in
    v66[0] = v124 in
    v98
  } in
  fun loop(i: Int, v0: s6, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s6 = s6([[s5([s4([s3(s2(s1(0.0, s0([[1.0], [2.0], [3.0]], [[4.0], [5.0]])), [[s1(6.0, s0([[7.0], [8.0], [9.0]], [[10.0], [11.0]]))], [s1(12.0, s0([[13.0], [14.0], [15.0]], [[16.0], [17.0]]))]]), [s0([[18.0], [19.0], [20.0]], [[21.0], [22.0]])]), s3(s2(s1(23.0, s0([[24.0], [25.0], [26.0]], [[27.0], [28.0]])), [[s1(29.0, s0([[30.0], [31.0], [32.0]], [[33.0], [34.0]]))], [s1(35.0, s0([[36.0], [37.0], [38.0]], [[39.0], [40.0]]))]]), [s0([[41.0], [42.0], [43.0]], [[44.0], [45.0]])]), s3(s2(s1(46.0, s0([[47.0], [48.0], [49.0]], [[50.0], [51.0]])), [[s1(52.0, s0([[53.0], [54.0], [55.0]], [[56.0], [57.0]]))], [s1(58.0, s0([[59.0], [60.0], [61.0]], [[62.0], [63.0]]))]]), [s0([[64.0], [65.0], [66.0]], [[67.0], [68.0]])])], [s0([[69.0], [70.0], [71.0]], [[72.0], [73.0]]), s0([[74.0], [75.0], [76.0]], [[77.0], [78.0]])]), s4([s3(s2(s1(79.0, s0([[80.0], [81.0], [82.0]], [[83.0], [84.0]])), [[s1(85.0, s0([[86.0], [87.0], [88.0]], [[89.0], [90.0]]))], [s1(91.0, s0([[92.0], [93.0], [94.0]], [[95.0], [96.0]]))]]), [s0([[97.0], [98.0], [99.0]], [[100.0], [101.0]])]), s3(s2(s1(102.0, s0([[103.0], [104.0], [105.0]], [[106.0], [107.0]])), [[s1(108.0, s0([[109.0], [110.0], [111.0]], [[112.0], [113.0]]))], [s1(114.0, s0([[115.0], [116.0], [117.0]], [[118.0], [119.0]]))]]), [s0([[120.0], [121.0], [122.0]], [[123.0], [124.0]])]), s3(s2(s1(125.0, s0([[126.0], [127.0], [128.0]], [[129.0], [130.0]])), [[s1(131.0, s0([[132.0], [133.0], [134.0]], [[135.0], [136.0]]))], [s1(137.0, s0([[138.0], [139.0], [140.0]], [[141.0], [142.0]]))]]), [s0([[143.0], [144.0], [145.0]], [[146.0], [147.0]])])], [s0([[148.0], [149.0], [150.0]], [[151.0], [152.0]]), s0([[153.0], [154.0], [155.0]], [[156.0], [157.0]])]), s4([s3(s2(s1(158.0, s0([[159.0], [160.0], [161.0]], [[162.0], [163.0]])), [[s1(164.0, s0([[165.0], [166.0], [167.0]], [[168.0], [169.0]]))], [s1(170.0, s0([[171.0], [172.0], [173.0]], [[174.0], [175.0]]))]]), [s0([[176.0], [177.0], [178.0]], [[179.0], [180.0]])]), s3(s2(s1(181.0, s0([[182.0], [183.0], [184.0]], [[185.0], [186.0]])), [[s1(187.0, s0([[188.0], [189.0], [190.0]], [[191.0], [192.0]]))], [s1(193.0, s0([[194.0], [195.0], [196.0]], [[197.0], [198.0]]))]]), [s0([[199.0], [200.0], [201.0]], [[202.0], [203.0]])]), s3(s2(s1(204.0, s0([[205.0], [206.0], [207.0]], [[208.0], [209.0]])), [[s1(210.0, s0([[211.0], [212.0], [213.0]], [[214.0], [215.0]]))], [s1(216.0, s0([[217.0], [218.0], [219.0]], [[220.0], [221.0]]))]]), [s0([[222.0], [223.0], [224.0]], [[225.0], [226.0]])])], [s0([[227.0], [228.0], [229.0]], [[230.0], [231.0]]), s0([[232.0], [233.0], [234.0]], [[235.0], [236.0]])])], [s3(s2(s1(237.0, s0([[238.0], [239.0], [240.0]], [[241.0], [242.0]])), [[s1(243.0, s0([[244.0], [245.0], [246.0]], [[247.0], [248.0]]))], [s1(249.0, s0([[250.0], [251.0], [252.0]], [[253.0], [254.0]]))]]), [s0([[255.0], [256.0], [257.0]], [[258.0], [259.0]])]), s3(s2(s1(260.0, s0([[261.0], [262.0], [263.0]], [[264.0], [265.0]])), [[s1(266.0, s0([[267.0], [268.0], [269.0]], [[270.0], [271.0]]))], [s1(272.0, s0([[273.0], [274.0], [275.0]], [[276.0], [277.0]]))]]), [s0([[278.0], [279.0], [280.0]], [[281.0], [282.0]])]), s3(s2(s1(283.0, s0([[284.0], [285.0], [286.0]], [[287.0], [288.0]])), [[s1(289.0, s0([[290.0], [291.0], [292.0]], [[293.0], [294.0]]))], [s1(295.0, s0([[296.0], [297.0], [298.0]], [[299.0], [300.0]]))]]), [s0([[301.0], [302.0], [303.0]], [[304.0], [305.0]])])])]], s2(s1(306.0, s0([[307.0], [308.0], [309.0]], [[310.0], [311.0]])), [[s1(312.0, s0([[313.0], [314.0], [315.0]], [[316.0], [317.0]]))], [s1(318.0, s0([[319.0], [320.0], [321.0]], [[322.0], [323.0]]))]])) in
    let v1: Float = 324.0 in
    let initialResult: Float = 324.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()