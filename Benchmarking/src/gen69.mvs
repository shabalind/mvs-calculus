  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s2 {
    var p0: [s0]
    var p1: s1
    var p2: [s0]
    var p3: s0
  } in
  struct s3 {
    var p0: [s0]
    var p1: [s2]
  } in
  struct s4 {
    var p0: [s2]
    var p1: s3
  } in
  let f32: (s0, s4) -> s4 = (v0: s0, v1: s4) -> s4 {
    var v4: s4 = v1 in
    var v7: s4 = v4 in
    let v2: s3 = v7.p1 in
    let v6: [s2] = v2.p1 in
    v7.p0 = v6 in
    let v20: s3 = v7.p1 in
    v7.p1 = v20 in
    v7.p1 = v2 in
    let v24: [s2] = v1.p0 in
    v4.p0 = v24 in
    v4.p0 = v24 in
    v7
  } in
  let f25: (s2) -> s2 = (v0: s2) -> s2 {
    v0
  } in
  let f5: (Float) -> Float = (v0: Float) -> Float {
    var v3: Float = v0 in
    var v1: Float = v3 in
    var v6: Float = v1 in
    var v2: Float = v1 in
    let v4: [Float] = [v6, v0, v1, v2, v1, v0] in
    let v7: Float = v4[3] in
    var v12: [Float] = v4 in
    v12[3] = v7 in
    let v11: Float = v12[4] in
    v11
  } in
  let f3: (s0) -> s0 = (v0: s0) -> s0 {
    var v3: s0 = v0 in
    var v1: s0 = v3 in
    let v2: [[Float]] = v1.p0 in
    v1.p0 = v2 in
    let v6: [[Float]] = v3.p0 in
    var v4: s0 = v0 in
    let v7: [[Float]] = v4.p1 in
    v3.p1 = v2 in
    v3.p0 = v7 in
    v3.p0 = v6 in
    v3
  } in
  let noinline_f0: (s4, s4, Float) -> Float = (v0: s4, v1: s4, v2: Float) -> Float {
    let v3: s3 = v1.p1 in
    var v5: s4 = v0 in
    var v8: Float = v2 in
    let v4: [s2] = v5.p0 in
    let v10: s2 = v4[0] in
    let v6: [s2] = v3.p1 in
    let v14: s2 = v6[1] in
    let v11: [s2] = v3.p1 in
    let v12: s4 = s4(v6, v3) in
    var v13: [s2] = v11 in
    v13[0] = v14 in
    let v16: s2 = f25(v10) in
    let v18: s3 = v1.p1 in
    let v17: s2 = v4[1] in
    v13[0] = v10 in
    v5.p0 = v13 in
    let v30: s0 = v17.p3 in
    v13[0] = v17 in
    let v29: Float = f5(v8) in
    let v48: [[Float]] = v30.p1 in
    var v21: s3 = v18 in
    let v31: [Float] = v48[0] in
    var v33: s2 = v16 in
    let v115: s4 = f32(v30, v12) in
    let v26: s0 = f3(v30) in
    v13[0] = v16 in
    let v27: [s2] = v115.p0 in
    var v37: Float = v29 in
    let v72: Float = v31[0] in
    v33.p3 = v26 in
    let v39: [s0] = v21.p0 in
    let v40: s0 = v39[1] in
    v13[0] = v33 in
    v33.p3 = v40 in
    let v116: Float = v2 + v72 in
    v5.p0 = v27 in
    let v61: Float = v116 + v37 in
    v61
  } in
  fun loop(i: Int, v0: s4, v1: s4, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s4 = s4([s2([s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]])], s1([s0([[6.0], [7.0], [8.0]], [[9.0], [10.0], [11.0]])], [s0([[12.0], [13.0], [14.0]], [[15.0], [16.0], [17.0]]), s0([[18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0]]), s0([[24.0], [25.0], [26.0]], [[27.0], [28.0], [29.0]])]), [s0([[30.0], [31.0], [32.0]], [[33.0], [34.0], [35.0]]), s0([[36.0], [37.0], [38.0]], [[39.0], [40.0], [41.0]])], s0([[42.0], [43.0], [44.0]], [[45.0], [46.0], [47.0]])), s2([s0([[48.0], [49.0], [50.0]], [[51.0], [52.0], [53.0]])], s1([s0([[54.0], [55.0], [56.0]], [[57.0], [58.0], [59.0]])], [s0([[60.0], [61.0], [62.0]], [[63.0], [64.0], [65.0]]), s0([[66.0], [67.0], [68.0]], [[69.0], [70.0], [71.0]]), s0([[72.0], [73.0], [74.0]], [[75.0], [76.0], [77.0]])]), [s0([[78.0], [79.0], [80.0]], [[81.0], [82.0], [83.0]]), s0([[84.0], [85.0], [86.0]], [[87.0], [88.0], [89.0]])], s0([[90.0], [91.0], [92.0]], [[93.0], [94.0], [95.0]]))], s3([s0([[96.0], [97.0], [98.0]], [[99.0], [100.0], [101.0]]), s0([[102.0], [103.0], [104.0]], [[105.0], [106.0], [107.0]])], [s2([s0([[108.0], [109.0], [110.0]], [[111.0], [112.0], [113.0]])], s1([s0([[114.0], [115.0], [116.0]], [[117.0], [118.0], [119.0]])], [s0([[120.0], [121.0], [122.0]], [[123.0], [124.0], [125.0]]), s0([[126.0], [127.0], [128.0]], [[129.0], [130.0], [131.0]]), s0([[132.0], [133.0], [134.0]], [[135.0], [136.0], [137.0]])]), [s0([[138.0], [139.0], [140.0]], [[141.0], [142.0], [143.0]]), s0([[144.0], [145.0], [146.0]], [[147.0], [148.0], [149.0]])], s0([[150.0], [151.0], [152.0]], [[153.0], [154.0], [155.0]])), s2([s0([[156.0], [157.0], [158.0]], [[159.0], [160.0], [161.0]])], s1([s0([[162.0], [163.0], [164.0]], [[165.0], [166.0], [167.0]])], [s0([[168.0], [169.0], [170.0]], [[171.0], [172.0], [173.0]]), s0([[174.0], [175.0], [176.0]], [[177.0], [178.0], [179.0]]), s0([[180.0], [181.0], [182.0]], [[183.0], [184.0], [185.0]])]), [s0([[186.0], [187.0], [188.0]], [[189.0], [190.0], [191.0]]), s0([[192.0], [193.0], [194.0]], [[195.0], [196.0], [197.0]])], s0([[198.0], [199.0], [200.0]], [[201.0], [202.0], [203.0]]))])) in
    let v1: s4 = s4([s2([s0([[204.0], [205.0], [206.0]], [[207.0], [208.0], [209.0]])], s1([s0([[210.0], [211.0], [212.0]], [[213.0], [214.0], [215.0]])], [s0([[216.0], [217.0], [218.0]], [[219.0], [220.0], [221.0]]), s0([[222.0], [223.0], [224.0]], [[225.0], [226.0], [227.0]]), s0([[228.0], [229.0], [230.0]], [[231.0], [232.0], [233.0]])]), [s0([[234.0], [235.0], [236.0]], [[237.0], [238.0], [239.0]]), s0([[240.0], [241.0], [242.0]], [[243.0], [244.0], [245.0]])], s0([[246.0], [247.0], [248.0]], [[249.0], [250.0], [251.0]])), s2([s0([[252.0], [253.0], [254.0]], [[255.0], [256.0], [257.0]])], s1([s0([[258.0], [259.0], [260.0]], [[261.0], [262.0], [263.0]])], [s0([[264.0], [265.0], [266.0]], [[267.0], [268.0], [269.0]]), s0([[270.0], [271.0], [272.0]], [[273.0], [274.0], [275.0]]), s0([[276.0], [277.0], [278.0]], [[279.0], [280.0], [281.0]])]), [s0([[282.0], [283.0], [284.0]], [[285.0], [286.0], [287.0]]), s0([[288.0], [289.0], [290.0]], [[291.0], [292.0], [293.0]])], s0([[294.0], [295.0], [296.0]], [[297.0], [298.0], [299.0]]))], s3([s0([[300.0], [301.0], [302.0]], [[303.0], [304.0], [305.0]]), s0([[306.0], [307.0], [308.0]], [[309.0], [310.0], [311.0]])], [s2([s0([[312.0], [313.0], [314.0]], [[315.0], [316.0], [317.0]])], s1([s0([[318.0], [319.0], [320.0]], [[321.0], [322.0], [323.0]])], [s0([[324.0], [325.0], [326.0]], [[327.0], [328.0], [329.0]]), s0([[330.0], [331.0], [332.0]], [[333.0], [334.0], [335.0]]), s0([[336.0], [337.0], [338.0]], [[339.0], [340.0], [341.0]])]), [s0([[342.0], [343.0], [344.0]], [[345.0], [346.0], [347.0]]), s0([[348.0], [349.0], [350.0]], [[351.0], [352.0], [353.0]])], s0([[354.0], [355.0], [356.0]], [[357.0], [358.0], [359.0]])), s2([s0([[360.0], [361.0], [362.0]], [[363.0], [364.0], [365.0]])], s1([s0([[366.0], [367.0], [368.0]], [[369.0], [370.0], [371.0]])], [s0([[372.0], [373.0], [374.0]], [[375.0], [376.0], [377.0]]), s0([[378.0], [379.0], [380.0]], [[381.0], [382.0], [383.0]]), s0([[384.0], [385.0], [386.0]], [[387.0], [388.0], [389.0]])]), [s0([[390.0], [391.0], [392.0]], [[393.0], [394.0], [395.0]]), s0([[396.0], [397.0], [398.0]], [[399.0], [400.0], [401.0]])], s0([[402.0], [403.0], [404.0]], [[405.0], [406.0], [407.0]]))])) in
    let v2: Float = 408.0 in
    let initialResult: Float = 408.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()