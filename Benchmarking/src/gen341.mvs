  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s2 {
    var p0: [s1]
    var p1: [s0]
  } in
  struct s3 {
    var p0: s2
    var p1: [s0]
  } in
  let noinline_f0: (s3, Float) -> Float = (v0: s3, v1: Float) -> Float {
    var v7: Float = v1 in
    let v8: [s0] = v0.p1 in
    let v3: s0 = v8[1] in
    let v20: [[Float]] = v3.p0 in
    let v16: [Float] = v20[0] in
    var v57: [Float] = v16 in
    let v39: Float = v57[0] in
    var v79: Float = v39 in
    v57[0] = v7 in
    let v100: Float = v79 * v1 in
    v100
  } in
  fun loop(i: Int, v0: s3, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(s2([s1([s0([[0.0], [1.0], [2.0]], [[3.0]])], [s0([[4.0], [5.0], [6.0]], [[7.0]]), s0([[8.0], [9.0], [10.0]], [[11.0]])])], [s0([[12.0], [13.0], [14.0]], [[15.0]])]), [s0([[16.0], [17.0], [18.0]], [[19.0]]), s0([[20.0], [21.0], [22.0]], [[23.0]]), s0([[24.0], [25.0], [26.0]], [[27.0]])]) in
    let v1: Float = 28.0 in
    let initialResult: Float = 28.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()