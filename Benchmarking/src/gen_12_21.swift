  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: s0
    var p2: [[s0]]
  }
  struct s2 {
    var p0: [s0]
    var p1: s1
  }
  struct s3 {
    var p0: [s1]
    var p1: s2
  }
  struct s4 {
    var p0: s3
    var p1: s1
  }
  func f105(_ v0: s3) -> s3 {
    let v4: [s1] = v0.p0
    var v9: [s1] = v4
    let v8: [s1] = v0.p0
    let v2: [s1] = v0.p0
    let v7: s1 = v8[1]
    v9 = v4
    let v6: s1 = v9[1]
    let v11: s1 = v2[1]
    let v12: [[s0]] = v6.p2
    let v14: [s1] = v0.p0
    var v15: [s1] = v8
    let v19: s2 = v0.p1
    let v37: s3 = s3(p0: v14, p1: v19)
    v15[0] = v7
    let v27: [s0] = v12[1]
    let v24: [s0] = v6.p0
    var v13: s2 = v19
    let v16: s0 = v27[0]
    let v25: [[s0]] = v7.p2
    let v39: s1 = v13.p1
    v13.p1 = v39
    v13.p1 = v11
    v15 = v8
    v15[0] = v6
    v13.p0 = v27
    v9[1] = v7
    var v21: s1 = v39
    var v44: [s0] = v24
    var v35: s2 = v19
    let v90: s1 = v19.p1
    v35.p1 = v6
    v21.p0 = v24
    var v59: s1 = v21
    let v65: [s0] = v25[1]
    let v47: [[s0]] = [v44, v24]
    var v71: s1 = v59
    v35.p1 = v71
    var v73: s3 = v37
    v9 = v15
    var v124: s3 = v73
    v35.p1 = v90
    v9[0] = v11
    let v62: [s0] = v47[1]
    v124.p0 = v15
    v35.p0 = v65
    v59.p0 = v62
    v73.p1 = v35
    v44[2] = v16
    return v124
  }
  func f103(_ v0: [s1]) -> [s1] {
    var v6: [s1] = v0
    let v5: s1 = v6[0]
    let v8: [[s0]] = v5.p2
    v6[1] = v5
    let v12: [s0] = v5.p0
    let v16: [s0] = v8[2]
    let v18: s0 = v16[0]
    let v24: [[s0]] = v5.p2
    v6[0] = v5
    let v13: s1 = s1(p0: v12, p1: v18, p2: v24)
    let v17: [s0] = v8[0]
    let v48: s2 = s2(p0: v17, p1: v13)
    let v113: s3 = s3(p0: v6, p1: v48)
    let v169: s3 = f105(v113)
    let v262: s3 = f105(v169)
    let v121: s3 = f105(v262)
    let v209: [s1] = v121.p0
    return v209
  }
  func f79(_ v0: s4) -> s4 {
    var v1: s4 = v0
    let v3: s3 = v1.p0
    let v6: [s1] = v3.p0
    let v2: [s1] = f103(v6)
    var v10: s4 = v1
    let v7: s1 = v2[0]
    v1.p1 = v7
    return v10
  }
  @inline(never)
  func f0(_ v0: [s4], _ v1: Double) -> Double {
    let v4: s4 = v0[0]
    let v6: s4 = f79(v4)
    let v5: s3 = v6.p0
    let v39: [s1] = v5.p0
    let v33: s1 = v39[1]
    let v40: s0 = v33.p1
    let v34: [[Double]] = v40.p1
    let v32: [Double] = [v1, v1, v1]
    let v44: Double = v32[1]
    let v61: Double = v32[0]
    let v47: [Double] = v34[0]
    let v174: Double = v1 / v44
    var v138: [Double] = v47
    v138[0] = v61
    v138[0] = v174
    let v283: Double = v47[0]
    let v166: Double = v138[0]
    let v380: Double = v166 + v283
    return v380
  }
  func benchmark() {
    let v0: [s4] = [s4(p0: s3(p0: [s1(p0: [s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0]]), s0(p0: [[4.0], [5.0]], p1: [[6.0], [7.0]]), s0(p0: [[8.0], [9.0]], p1: [[10.0], [11.0]])], p1: s0(p0: [[12.0], [13.0]], p1: [[14.0], [15.0]]), p2: [[s0(p0: [[16.0], [17.0]], p1: [[18.0], [19.0]])], [s0(p0: [[20.0], [21.0]], p1: [[22.0], [23.0]])], [s0(p0: [[24.0], [25.0]], p1: [[26.0], [27.0]])]]), s1(p0: [s0(p0: [[28.0], [29.0]], p1: [[30.0], [31.0]]), s0(p0: [[32.0], [33.0]], p1: [[34.0], [35.0]]), s0(p0: [[36.0], [37.0]], p1: [[38.0], [39.0]])], p1: s0(p0: [[40.0], [41.0]], p1: [[42.0], [43.0]]), p2: [[s0(p0: [[44.0], [45.0]], p1: [[46.0], [47.0]])], [s0(p0: [[48.0], [49.0]], p1: [[50.0], [51.0]])], [s0(p0: [[52.0], [53.0]], p1: [[54.0], [55.0]])]])], p1: s2(p0: [s0(p0: [[56.0], [57.0]], p1: [[58.0], [59.0]])], p1: s1(p0: [s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0]]), s0(p0: [[64.0], [65.0]], p1: [[66.0], [67.0]]), s0(p0: [[68.0], [69.0]], p1: [[70.0], [71.0]])], p1: s0(p0: [[72.0], [73.0]], p1: [[74.0], [75.0]]), p2: [[s0(p0: [[76.0], [77.0]], p1: [[78.0], [79.0]])], [s0(p0: [[80.0], [81.0]], p1: [[82.0], [83.0]])], [s0(p0: [[84.0], [85.0]], p1: [[86.0], [87.0]])]]))), p1: s1(p0: [s0(p0: [[88.0], [89.0]], p1: [[90.0], [91.0]]), s0(p0: [[92.0], [93.0]], p1: [[94.0], [95.0]]), s0(p0: [[96.0], [97.0]], p1: [[98.0], [99.0]])], p1: s0(p0: [[100.0], [101.0]], p1: [[102.0], [103.0]]), p2: [[s0(p0: [[104.0], [105.0]], p1: [[106.0], [107.0]])], [s0(p0: [[108.0], [109.0]], p1: [[110.0], [111.0]])], [s0(p0: [[112.0], [113.0]], p1: [[114.0], [115.0]])]])), s4(p0: s3(p0: [s1(p0: [s0(p0: [[116.0], [117.0]], p1: [[118.0], [119.0]]), s0(p0: [[120.0], [121.0]], p1: [[122.0], [123.0]]), s0(p0: [[124.0], [125.0]], p1: [[126.0], [127.0]])], p1: s0(p0: [[128.0], [129.0]], p1: [[130.0], [131.0]]), p2: [[s0(p0: [[132.0], [133.0]], p1: [[134.0], [135.0]])], [s0(p0: [[136.0], [137.0]], p1: [[138.0], [139.0]])], [s0(p0: [[140.0], [141.0]], p1: [[142.0], [143.0]])]]), s1(p0: [s0(p0: [[144.0], [145.0]], p1: [[146.0], [147.0]]), s0(p0: [[148.0], [149.0]], p1: [[150.0], [151.0]]), s0(p0: [[152.0], [153.0]], p1: [[154.0], [155.0]])], p1: s0(p0: [[156.0], [157.0]], p1: [[158.0], [159.0]]), p2: [[s0(p0: [[160.0], [161.0]], p1: [[162.0], [163.0]])], [s0(p0: [[164.0], [165.0]], p1: [[166.0], [167.0]])], [s0(p0: [[168.0], [169.0]], p1: [[170.0], [171.0]])]])], p1: s2(p0: [s0(p0: [[172.0], [173.0]], p1: [[174.0], [175.0]])], p1: s1(p0: [s0(p0: [[176.0], [177.0]], p1: [[178.0], [179.0]]), s0(p0: [[180.0], [181.0]], p1: [[182.0], [183.0]]), s0(p0: [[184.0], [185.0]], p1: [[186.0], [187.0]])], p1: s0(p0: [[188.0], [189.0]], p1: [[190.0], [191.0]]), p2: [[s0(p0: [[192.0], [193.0]], p1: [[194.0], [195.0]])], [s0(p0: [[196.0], [197.0]], p1: [[198.0], [199.0]])], [s0(p0: [[200.0], [201.0]], p1: [[202.0], [203.0]])]]))), p1: s1(p0: [s0(p0: [[204.0], [205.0]], p1: [[206.0], [207.0]]), s0(p0: [[208.0], [209.0]], p1: [[210.0], [211.0]]), s0(p0: [[212.0], [213.0]], p1: [[214.0], [215.0]])], p1: s0(p0: [[216.0], [217.0]], p1: [[218.0], [219.0]]), p2: [[s0(p0: [[220.0], [221.0]], p1: [[222.0], [223.0]])], [s0(p0: [[224.0], [225.0]], p1: [[226.0], [227.0]])], [s0(p0: [[228.0], [229.0]], p1: [[230.0], [231.0]])]])), s4(p0: s3(p0: [s1(p0: [s0(p0: [[232.0], [233.0]], p1: [[234.0], [235.0]]), s0(p0: [[236.0], [237.0]], p1: [[238.0], [239.0]]), s0(p0: [[240.0], [241.0]], p1: [[242.0], [243.0]])], p1: s0(p0: [[244.0], [245.0]], p1: [[246.0], [247.0]]), p2: [[s0(p0: [[248.0], [249.0]], p1: [[250.0], [251.0]])], [s0(p0: [[252.0], [253.0]], p1: [[254.0], [255.0]])], [s0(p0: [[256.0], [257.0]], p1: [[258.0], [259.0]])]]), s1(p0: [s0(p0: [[260.0], [261.0]], p1: [[262.0], [263.0]]), s0(p0: [[264.0], [265.0]], p1: [[266.0], [267.0]]), s0(p0: [[268.0], [269.0]], p1: [[270.0], [271.0]])], p1: s0(p0: [[272.0], [273.0]], p1: [[274.0], [275.0]]), p2: [[s0(p0: [[276.0], [277.0]], p1: [[278.0], [279.0]])], [s0(p0: [[280.0], [281.0]], p1: [[282.0], [283.0]])], [s0(p0: [[284.0], [285.0]], p1: [[286.0], [287.0]])]])], p1: s2(p0: [s0(p0: [[288.0], [289.0]], p1: [[290.0], [291.0]])], p1: s1(p0: [s0(p0: [[292.0], [293.0]], p1: [[294.0], [295.0]]), s0(p0: [[296.0], [297.0]], p1: [[298.0], [299.0]]), s0(p0: [[300.0], [301.0]], p1: [[302.0], [303.0]])], p1: s0(p0: [[304.0], [305.0]], p1: [[306.0], [307.0]]), p2: [[s0(p0: [[308.0], [309.0]], p1: [[310.0], [311.0]])], [s0(p0: [[312.0], [313.0]], p1: [[314.0], [315.0]])], [s0(p0: [[316.0], [317.0]], p1: [[318.0], [319.0]])]]))), p1: s1(p0: [s0(p0: [[320.0], [321.0]], p1: [[322.0], [323.0]]), s0(p0: [[324.0], [325.0]], p1: [[326.0], [327.0]]), s0(p0: [[328.0], [329.0]], p1: [[330.0], [331.0]])], p1: s0(p0: [[332.0], [333.0]], p1: [[334.0], [335.0]]), p2: [[s0(p0: [[336.0], [337.0]], p1: [[338.0], [339.0]])], [s0(p0: [[340.0], [341.0]], p1: [[342.0], [343.0]])], [s0(p0: [[344.0], [345.0]], p1: [[346.0], [347.0]])]]))]
    let v1: Double = 348.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 348.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
