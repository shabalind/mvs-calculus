  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: s0
    var p1: [s1]
  } in
  struct s3 {
    var p0: s1
    var p1: s0
  } in
  struct s4 {
    var p0: [s1]
    var p1: [s0]
  } in
  struct s7 {
    var p0: [s4]
    var p1: [[s1]]
  } in
  let f45: (Float) -> Float = (v0: Float) -> Float {
    var v1: Float = v0 in
    var v5: Float = v1 in
    var v7: Float = v5 in
    let v3: [Float] = [v5, v0, v0, v0, v1, v5] in
    var v4: [Float] = v3 in
    var v6: [Float] = v4 in
    var v2: Float = v1 in
    v1 = v0 in
    v6[1] = v2 in
    let v9: Float = v3[2] in
    let v10: Float = v6[4] in
    var v12: Float = v9 in
    let v15: Float = v3[3] in
    var v25: Float = v7 in
    let v29: Float = v6[5] in
    let v14: Float = v4[5] in
    let v17: Float = v3[3] in
    var v11: [Float] = v4 in
    let v20: [Float] = [v1, v12, v14] in
    var v13: [Float] = v20 in
    v13[0] = v29 in
    var v30: [Float] = v11 in
    v6[4] = v25 in
    v6[0] = v12 in
    let v21: Float = v13[1] in
    var v50: [Float] = v13 in
    v50[2] = v5 in
    var v23: [Float] = v20 in
    var v27: [Float] = v20 in
    let v18: Float = v50[1] in
    v50 = v23 in
    v30[4] = v9 in
    let v40: Float = v18 + v21 in
    var v80: Float = v10 in
    v13 = v27 in
    let v49: Float = v30[0] in
    v27[2] = v17 in
    var v63: Float = v49 in
    let v61: [Float] = [v7] in
    v13[0] = v15 in
    let v65: Float = v61[0] in
    v23[2] = v65 in
    v13[1] = v5 in
    v30[0] = v80 in
    v6[2] = v63 in
    v40
  } in
  let noinline_f0: (s7, [s3], s2, Float) -> Float = (v0: s7, v1: [s3], v2: s2, v3: Float) -> Float {
    let v4: Float = v3 * v3 in
    let v18: Float = v3 + v4 in
    let v27: Float = f45(v18) in
    v27
  } in
  fun loop(i: Int, v0: s7, v1: [s3], v2: s2, v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s7 = s7([s4([s1(s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]), [[s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]])], [s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]])], [s0([[15.0], [16.0], [17.0]], [[18.0], [19.0]])]])], [s0([[20.0], [21.0], [22.0]], [[23.0], [24.0]])]), s4([s1(s0([[25.0], [26.0], [27.0]], [[28.0], [29.0]]), [[s0([[30.0], [31.0], [32.0]], [[33.0], [34.0]])], [s0([[35.0], [36.0], [37.0]], [[38.0], [39.0]])], [s0([[40.0], [41.0], [42.0]], [[43.0], [44.0]])]])], [s0([[45.0], [46.0], [47.0]], [[48.0], [49.0]])])], [[s1(s0([[50.0], [51.0], [52.0]], [[53.0], [54.0]]), [[s0([[55.0], [56.0], [57.0]], [[58.0], [59.0]])], [s0([[60.0], [61.0], [62.0]], [[63.0], [64.0]])], [s0([[65.0], [66.0], [67.0]], [[68.0], [69.0]])]])]]) in
    let v1: [s3] = [s3(s1(s0([[70.0], [71.0], [72.0]], [[73.0], [74.0]]), [[s0([[75.0], [76.0], [77.0]], [[78.0], [79.0]])], [s0([[80.0], [81.0], [82.0]], [[83.0], [84.0]])], [s0([[85.0], [86.0], [87.0]], [[88.0], [89.0]])]]), s0([[90.0], [91.0], [92.0]], [[93.0], [94.0]])), s3(s1(s0([[95.0], [96.0], [97.0]], [[98.0], [99.0]]), [[s0([[100.0], [101.0], [102.0]], [[103.0], [104.0]])], [s0([[105.0], [106.0], [107.0]], [[108.0], [109.0]])], [s0([[110.0], [111.0], [112.0]], [[113.0], [114.0]])]]), s0([[115.0], [116.0], [117.0]], [[118.0], [119.0]]))] in
    let v2: s2 = s2(s0([[120.0], [121.0], [122.0]], [[123.0], [124.0]]), [s1(s0([[125.0], [126.0], [127.0]], [[128.0], [129.0]]), [[s0([[130.0], [131.0], [132.0]], [[133.0], [134.0]])], [s0([[135.0], [136.0], [137.0]], [[138.0], [139.0]])], [s0([[140.0], [141.0], [142.0]], [[143.0], [144.0]])]]), s1(s0([[145.0], [146.0], [147.0]], [[148.0], [149.0]]), [[s0([[150.0], [151.0], [152.0]], [[153.0], [154.0]])], [s0([[155.0], [156.0], [157.0]], [[158.0], [159.0]])], [s0([[160.0], [161.0], [162.0]], [[163.0], [164.0]])]])]) in
    let v3: Float = 165.0 in
    let initialResult: Float = 165.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()