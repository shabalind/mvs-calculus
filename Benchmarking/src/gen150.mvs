  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: s1
  } in
  struct s3 {
    var p0: s0
    var p1: s1
  } in
  struct s4 {
    var p0: s0
    var p1: [s1]
  } in
  struct s7 {
    var p0: [s0]
    var p1: [[s3]]
  } in
  struct s8 {
    var p0: [s2]
    var p1: s4
  } in
  let f52: ([[s1]]) -> [[s1]] = (v0: [[s1]]) -> [[s1]] {
    var v4: [[s1]] = v0 in
    let v2: [s1] = v0[2] in
    v4[2] = v2 in
    var v1: [s1] = v2 in
    let v7: [[s1]] = [v1, v1, v2] in
    let v3: [[s1]] = [v1, v1, v2, v2, v2, v1, v1] in
    var v13: [[s1]] = v3 in
    let v12: [s1] = v4[0] in
    var v15: [[s1]] = v7 in
    let v8: [s1] = v13[6] in
    let v14: s1 = v12[0] in
    let v17: [s1] = v13[0] in
    v13[1] = v2 in
    let v30: [[s0]] = v14.p1 in
    var v9: s1 = v14 in
    let v19: [[s0]] = v9.p1 in
    let v18: [s1] = v13[0] in
    var v22: [s1] = v17 in
    v15[0] = v18 in
    v1[0] = v9 in
    let v21: [s0] = v19[0] in
    let v59: [s0] = v14.p0 in
    let v42: s1 = s1(v59, v30) in
    var v23: [s1] = v18 in
    var v32: [s0] = v59 in
    var v33: [[s0]] = v19 in
    v1[0] = v42 in
    var v29: s1 = v9 in
    let v44: [[s0]] = v42.p1 in
    v29.p0 = v59 in
    let v28: s1 = v18[0] in
    var v47: [[s0]] = v30 in
    var v58: s1 = v14 in
    let v41: s1 = v23[0] in
    v29.p0 = v32 in
    var v51: [[s0]] = v19 in
    v9.p1 = v51 in
    var v56: [[s1]] = v15 in
    v47 = v44 in
    v15[1] = v8 in
    v23[0] = v58 in
    v29.p1 = v44 in
    let v60: [s0] = v33[0] in
    v4[0] = v1 in
    let v63: [s0] = v44[2] in
    let v73: [s0] = v28.p0 in
    let v54: [s0] = v44[2] in
    let v78: [[s0]] = v41.p1 in
    v15[2] = v2 in
    v58.p0 = v60 in
    v58.p0 = v63 in
    let v112: [[s0]] = v29.p1 in
    v58.p1 = v44 in
    v1[0] = v42 in
    v33[2] = v21 in
    v58 = v42 in
    v58.p1 = v112 in
    let v97: s1 = s1(v54, v78) in
    v33 = v47 in
    v9.p1 = v78 in
    v23[0] = v97 in
    v56[1] = v22 in
    v29.p0 = v60 in
    v15[1] = v18 in
    v58.p0 = v73 in
    v4[1] = v2 in
    v29.p0 = v32 in
    v1[0] = v58 in
    v56
  } in
  let noinline_f0: ([[s1]], Float, [s8], [s7]) -> Float = (v0: [[s1]], v1: Float, v2: [s8], v3: [s7]) -> Float {
    let v10: [[s1]] = f52(v0) in
    let v21: [s1] = v10[0] in
    let v27: s1 = v21[0] in
    let v22: [s0] = v27.p0 in
    let v74: s0 = v22[0] in
    let v69: [[Float]] = v74.p1 in
    let v65: [Float] = v69[0] in
    let v55: Float = v65[0] in
    v55
  } in
  fun loop(i: Int, v0: [[s1]], v1: Float, v2: [s8], v3: [s7], result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s1]] = [[s1([s0([[0.0], [1.0]], [[2.0]])], [[s0([[3.0], [4.0]], [[5.0]])], [s0([[6.0], [7.0]], [[8.0]])], [s0([[9.0], [10.0]], [[11.0]])]])], [s1([s0([[12.0], [13.0]], [[14.0]])], [[s0([[15.0], [16.0]], [[17.0]])], [s0([[18.0], [19.0]], [[20.0]])], [s0([[21.0], [22.0]], [[23.0]])]])], [s1([s0([[24.0], [25.0]], [[26.0]])], [[s0([[27.0], [28.0]], [[29.0]])], [s0([[30.0], [31.0]], [[32.0]])], [s0([[33.0], [34.0]], [[35.0]])]])]] in
    let v1: Float = 36.0 in
    let v2: [s8] = [s8([s2(s1([s0([[37.0], [38.0]], [[39.0]])], [[s0([[40.0], [41.0]], [[42.0]])], [s0([[43.0], [44.0]], [[45.0]])], [s0([[46.0], [47.0]], [[48.0]])]]))], s4(s0([[49.0], [50.0]], [[51.0]]), [s1([s0([[52.0], [53.0]], [[54.0]])], [[s0([[55.0], [56.0]], [[57.0]])], [s0([[58.0], [59.0]], [[60.0]])], [s0([[61.0], [62.0]], [[63.0]])]]), s1([s0([[64.0], [65.0]], [[66.0]])], [[s0([[67.0], [68.0]], [[69.0]])], [s0([[70.0], [71.0]], [[72.0]])], [s0([[73.0], [74.0]], [[75.0]])]]), s1([s0([[76.0], [77.0]], [[78.0]])], [[s0([[79.0], [80.0]], [[81.0]])], [s0([[82.0], [83.0]], [[84.0]])], [s0([[85.0], [86.0]], [[87.0]])]])])), s8([s2(s1([s0([[88.0], [89.0]], [[90.0]])], [[s0([[91.0], [92.0]], [[93.0]])], [s0([[94.0], [95.0]], [[96.0]])], [s0([[97.0], [98.0]], [[99.0]])]]))], s4(s0([[100.0], [101.0]], [[102.0]]), [s1([s0([[103.0], [104.0]], [[105.0]])], [[s0([[106.0], [107.0]], [[108.0]])], [s0([[109.0], [110.0]], [[111.0]])], [s0([[112.0], [113.0]], [[114.0]])]]), s1([s0([[115.0], [116.0]], [[117.0]])], [[s0([[118.0], [119.0]], [[120.0]])], [s0([[121.0], [122.0]], [[123.0]])], [s0([[124.0], [125.0]], [[126.0]])]]), s1([s0([[127.0], [128.0]], [[129.0]])], [[s0([[130.0], [131.0]], [[132.0]])], [s0([[133.0], [134.0]], [[135.0]])], [s0([[136.0], [137.0]], [[138.0]])]])]))] in
    let v3: [s7] = [s7([s0([[139.0], [140.0]], [[141.0]]), s0([[142.0], [143.0]], [[144.0]]), s0([[145.0], [146.0]], [[147.0]])], [[s3(s0([[148.0], [149.0]], [[150.0]]), s1([s0([[151.0], [152.0]], [[153.0]])], [[s0([[154.0], [155.0]], [[156.0]])], [s0([[157.0], [158.0]], [[159.0]])], [s0([[160.0], [161.0]], [[162.0]])]]))], [s3(s0([[163.0], [164.0]], [[165.0]]), s1([s0([[166.0], [167.0]], [[168.0]])], [[s0([[169.0], [170.0]], [[171.0]])], [s0([[172.0], [173.0]], [[174.0]])], [s0([[175.0], [176.0]], [[177.0]])]]))]]), s7([s0([[178.0], [179.0]], [[180.0]]), s0([[181.0], [182.0]], [[183.0]]), s0([[184.0], [185.0]], [[186.0]])], [[s3(s0([[187.0], [188.0]], [[189.0]]), s1([s0([[190.0], [191.0]], [[192.0]])], [[s0([[193.0], [194.0]], [[195.0]])], [s0([[196.0], [197.0]], [[198.0]])], [s0([[199.0], [200.0]], [[201.0]])]]))], [s3(s0([[202.0], [203.0]], [[204.0]]), s1([s0([[205.0], [206.0]], [[207.0]])], [[s0([[208.0], [209.0]], [[210.0]])], [s0([[211.0], [212.0]], [[213.0]])], [s0([[214.0], [215.0]], [[216.0]])]]))]])] in
    let initialResult: Float = [s7([s0([[139.0], [140.0]], [[141.0]]), s0([[142.0], [143.0]], [[144.0]]), s0([[145.0], [146.0]], [[147.0]])], [[s3(s0([[148.0], [149.0]], [[150.0]]), s1([s0([[151.0], [152.0]], [[153.0]])], [[s0([[154.0], [155.0]], [[156.0]])], [s0([[157.0], [158.0]], [[159.0]])], [s0([[160.0], [161.0]], [[162.0]])]]))], [s3(s0([[163.0], [164.0]], [[165.0]]), s1([s0([[166.0], [167.0]], [[168.0]])], [[s0([[169.0], [170.0]], [[171.0]])], [s0([[172.0], [173.0]], [[174.0]])], [s0([[175.0], [176.0]], [[177.0]])]]))]]), s7([s0([[178.0], [179.0]], [[180.0]]), s0([[181.0], [182.0]], [[183.0]]), s0([[184.0], [185.0]], [[186.0]])], [[s3(s0([[187.0], [188.0]], [[189.0]]), s1([s0([[190.0], [191.0]], [[192.0]])], [[s0([[193.0], [194.0]], [[195.0]])], [s0([[196.0], [197.0]], [[198.0]])], [s0([[199.0], [200.0]], [[201.0]])]]))], [s3(s0([[202.0], [203.0]], [[204.0]]), s1([s0([[205.0], [206.0]], [[207.0]])], [[s0([[208.0], [209.0]], [[210.0]])], [s0([[211.0], [212.0]], [[213.0]])], [s0([[214.0], [215.0]], [[216.0]])]]))]])] in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()