  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: [[s0]]
    var p1: s1
  }
  struct s4 {
    var p0: [[s1]]
    var p1: s2
  }
  struct s6 {
    var p0: s0
    var p1: s1
  }
  @inline(never)
  func f0(_ v0: s6, _ v1: [Double], _ v2: s2, _ v3: [s4], _ v4: [[Double]], _ v5: s1, _ v6: Double) -> Double {
    let v13: Double = v6 / v6
    let v15: Double = v1[0]
    var v14: [Double] = v1
    v14[0] = v6
    let v19: [Double] = v4[1]
    v14[0] = v13
    let v28: Double = v19[0]
    var v52: Double = v6
    v14[0] = v15
    let v41: Double = v14[0]
    let v241: Double = v1[0]
    v14[0] = v41
    let v160: Double = v28 - v241
    let v173: Double = v160 + v41
    v14[0] = v52
    return v173
  }
  func benchmark() {
    let v0: s6 = s6(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0]], p2: [[3.0], [4.0]], p3: [[5.0]]), p1: s1(p0: s0(p0: [[6.0], [7.0]], p1: [[8.0]], p2: [[9.0], [10.0]], p3: [[11.0]]), p1: s0(p0: [[12.0], [13.0]], p1: [[14.0]], p2: [[15.0], [16.0]], p3: [[17.0]])))
    let v1: [Double] = [18.0]
    let v2: s2 = s2(p0: [[s0(p0: [[19.0], [20.0]], p1: [[21.0]], p2: [[22.0], [23.0]], p3: [[24.0]])], [s0(p0: [[25.0], [26.0]], p1: [[27.0]], p2: [[28.0], [29.0]], p3: [[30.0]])], [s0(p0: [[31.0], [32.0]], p1: [[33.0]], p2: [[34.0], [35.0]], p3: [[36.0]])]], p1: s1(p0: s0(p0: [[37.0], [38.0]], p1: [[39.0]], p2: [[40.0], [41.0]], p3: [[42.0]]), p1: s0(p0: [[43.0], [44.0]], p1: [[45.0]], p2: [[46.0], [47.0]], p3: [[48.0]])))
    let v3: [s4] = [s4(p0: [[s1(p0: s0(p0: [[49.0], [50.0]], p1: [[51.0]], p2: [[52.0], [53.0]], p3: [[54.0]]), p1: s0(p0: [[55.0], [56.0]], p1: [[57.0]], p2: [[58.0], [59.0]], p3: [[60.0]]))], [s1(p0: s0(p0: [[61.0], [62.0]], p1: [[63.0]], p2: [[64.0], [65.0]], p3: [[66.0]]), p1: s0(p0: [[67.0], [68.0]], p1: [[69.0]], p2: [[70.0], [71.0]], p3: [[72.0]]))], [s1(p0: s0(p0: [[73.0], [74.0]], p1: [[75.0]], p2: [[76.0], [77.0]], p3: [[78.0]]), p1: s0(p0: [[79.0], [80.0]], p1: [[81.0]], p2: [[82.0], [83.0]], p3: [[84.0]]))]], p1: s2(p0: [[s0(p0: [[85.0], [86.0]], p1: [[87.0]], p2: [[88.0], [89.0]], p3: [[90.0]])], [s0(p0: [[91.0], [92.0]], p1: [[93.0]], p2: [[94.0], [95.0]], p3: [[96.0]])], [s0(p0: [[97.0], [98.0]], p1: [[99.0]], p2: [[100.0], [101.0]], p3: [[102.0]])]], p1: s1(p0: s0(p0: [[103.0], [104.0]], p1: [[105.0]], p2: [[106.0], [107.0]], p3: [[108.0]]), p1: s0(p0: [[109.0], [110.0]], p1: [[111.0]], p2: [[112.0], [113.0]], p3: [[114.0]]))))]
    let v4: [[Double]] = [[115.0], [116.0]]
    let v5: s1 = s1(p0: s0(p0: [[117.0], [118.0]], p1: [[119.0]], p2: [[120.0], [121.0]], p3: [[122.0]]), p1: s0(p0: [[123.0], [124.0]], p1: [[125.0]], p2: [[126.0], [127.0]], p3: [[128.0]]))
    let v6: Double = 129.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 129.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4, v5, v6)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
