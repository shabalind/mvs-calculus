  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s2 {
    var p0: [[s0]]
    var p1: s0
  } in
  struct s4 {
    var p0: [[s0]]
    var p1: s2
  } in
  struct s7 {
    var p0: [s4]
    var p1: [[s2]]
  } in
  let f98: (Float) -> Float = (v0: Float) -> Float {
    var v3: Float = v0 in
    var v5: Float = v3 in
    var v2: Float = v5 in
    var v11: Float = v0 in
    var v1: Float = v2 in
    var v9: Float = v2 in
    var v10: Float = v11 in
    let v14: [Float] = [v9, v9, v10, v9, v3, v9] in
    let v28: [[Float]] = [v14] in
    let v20: [Float] = v28[0] in
    v10 = v1 in
    v1 = v10 in
    let v21: Float = v14[1] in
    let v26: [Float] = v28[0] in
    let v22: [Float] = v28[0] in
    var v34: Float = v9 in
    let v23: Float = v20[4] in
    v10 = v23 in
    var v16: [[Float]] = v28 in
    v16[0] = v26 in
    let v36: [Float] = [v21, v21, v0, v34, v3] in
    let v58: [Float] = [v5] in
    let v50: [Float] = v28[0] in
    let v25: Float = v58[0] in
    let v35: [Float] = v28[0] in
    v16[0] = v35 in
    var v120: [Float] = v36 in
    var v59: [Float] = v120 in
    let v117: [Float] = v16[0] in
    v59[0] = v23 in
    v16[0] = v22 in
    v16[0] = v26 in
    let v68: Float = v120[0] in
    var v83: [Float] = v117 in
    v83[2] = v68 in
    v120 = v59 in
    v83[0] = v25 in
    v83 = v50 in
    let v175: Float = v83[0] in
    v175
  } in
  let noinline_f0: ([s7], Float) -> Float = (v0: [s7], v1: Float) -> Float {
    var v2: Float = v1 in
    let v6: Float = f98(v2) in
    var v24: Float = v6 in
    let v15: Float = f98(v24) in
    v15
  } in
  fun loop(i: Int, v0: [s7], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s7] = [s7([s4([[s0([[0.0]], [[1.0], [2.0]])]], s2([[s0([[3.0]], [[4.0], [5.0]])]], s0([[6.0]], [[7.0], [8.0]]))), s4([[s0([[9.0]], [[10.0], [11.0]])]], s2([[s0([[12.0]], [[13.0], [14.0]])]], s0([[15.0]], [[16.0], [17.0]])))], [[s2([[s0([[18.0]], [[19.0], [20.0]])]], s0([[21.0]], [[22.0], [23.0]]))], [s2([[s0([[24.0]], [[25.0], [26.0]])]], s0([[27.0]], [[28.0], [29.0]]))]]), s7([s4([[s0([[30.0]], [[31.0], [32.0]])]], s2([[s0([[33.0]], [[34.0], [35.0]])]], s0([[36.0]], [[37.0], [38.0]]))), s4([[s0([[39.0]], [[40.0], [41.0]])]], s2([[s0([[42.0]], [[43.0], [44.0]])]], s0([[45.0]], [[46.0], [47.0]])))], [[s2([[s0([[48.0]], [[49.0], [50.0]])]], s0([[51.0]], [[52.0], [53.0]]))], [s2([[s0([[54.0]], [[55.0], [56.0]])]], s0([[57.0]], [[58.0], [59.0]]))]]), s7([s4([[s0([[60.0]], [[61.0], [62.0]])]], s2([[s0([[63.0]], [[64.0], [65.0]])]], s0([[66.0]], [[67.0], [68.0]]))), s4([[s0([[69.0]], [[70.0], [71.0]])]], s2([[s0([[72.0]], [[73.0], [74.0]])]], s0([[75.0]], [[76.0], [77.0]])))], [[s2([[s0([[78.0]], [[79.0], [80.0]])]], s0([[81.0]], [[82.0], [83.0]]))], [s2([[s0([[84.0]], [[85.0], [86.0]])]], s0([[87.0]], [[88.0], [89.0]]))]])] in
    let v1: Float = 90.0 in
    let initialResult: Float = 90.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()