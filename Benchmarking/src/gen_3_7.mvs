  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: ([s0], s0, Float) -> Float = (v0: [s0], v1: s0, v2: Float) -> Float {
    let v3: s0 = v0[0] in
    let v6: [[Float]] = v3.p0 in
    let v11: [Float] = v6[0] in
    let v5: Float = v2 - v2 in
    let v15: Float = v11[0] in
    let v8: [Float] = v6[0] in
    let v20: Float = v5 + v2 in
    var v28: [Float] = v11 in
    var v33: [Float] = v28 in
    let v30: Float = v8[0] in
    var v49: [Float] = v33 in
    v33[0] = v15 in
    v49[0] = v15 in
    v49[0] = v15 in
    let v39: Float = v5 + v30 in
    var v70: Float = v20 in
    let v66: Float = v8[0] in
    v28[0] = v66 in
    v28[0] = v5 in
    v28[0] = v70 in
    v33[0] = v39 in
    let v106: Float = v49[0] in
    v106
  } in
  fun loop(i: Int, v0: [s0], v1: s0, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0]], [[1.0], [2.0]]), s0([[3.0]], [[4.0], [5.0]])] in
    let v1: s0 = s0([[6.0]], [[7.0], [8.0]]) in
    let v2: Float = 9.0 in
    let initialResult: Float = 9.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()