  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: s0
    var p2: s0
    var p3: s0
    var p4: [s0]
  } in
  struct s3 {
    var p0: s0
  } in
  let noinline_f0: ([s1], s3, Float) -> Float = (v0: [s1], v1: s3, v2: Float) -> Float {
    let v3: s1 = v0[0] in
    let v8: s0 = v3.p3 in
    let v24: [[Float]] = v8.p1 in
    let v32: [[Float]] = v8.p1 in
    let v30: [[Float]] = v8.p0 in
    let v14: [Float] = v24[0] in
    let v37: [Float] = v32[2] in
    var v47: [[Float]] = v24 in
    var v83: [[Float]] = v47 in
    v47[0] = v14 in
    var v35: [[Float]] = v30 in
    v83[1] = v37 in
    v35[0] = v37 in
    v35[0] = v37 in
    v35[0] = v37 in
    let v53: [Float] = v35[0] in
    let v77: Float = v53[0] in
    let v139: [Float] = v83[1] in
    v35[0] = v139 in
    v77
  } in
  fun loop(i: Int, v0: [s1], v1: s3, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1([[s0([[0.0]], [[1.0], [2.0], [3.0]])]], s0([[4.0]], [[5.0], [6.0], [7.0]]), s0([[8.0]], [[9.0], [10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0], [15.0]]), [s0([[16.0]], [[17.0], [18.0], [19.0]])]), s1([[s0([[20.0]], [[21.0], [22.0], [23.0]])]], s0([[24.0]], [[25.0], [26.0], [27.0]]), s0([[28.0]], [[29.0], [30.0], [31.0]]), s0([[32.0]], [[33.0], [34.0], [35.0]]), [s0([[36.0]], [[37.0], [38.0], [39.0]])]), s1([[s0([[40.0]], [[41.0], [42.0], [43.0]])]], s0([[44.0]], [[45.0], [46.0], [47.0]]), s0([[48.0]], [[49.0], [50.0], [51.0]]), s0([[52.0]], [[53.0], [54.0], [55.0]]), [s0([[56.0]], [[57.0], [58.0], [59.0]])])] in
    let v1: s3 = s3(s0([[60.0]], [[61.0], [62.0], [63.0]])) in
    let v2: Float = 64.0 in
    let initialResult: Float = 64.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()