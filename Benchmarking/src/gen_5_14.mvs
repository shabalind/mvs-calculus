  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s1]
    var p1: s0
  } in
  let f5: (s0, s2, s0) -> s0 = (v0: s0, v1: s2, v2: s0) -> s0 {
    let v5: s0 = v1.p1 in
    let v4: s1 = s1(v2, v0) in
    let v3: [s1] = v1.p0 in
    let v15: s1 = v3[0] in
    var v8: s1 = v4 in
    let v10: s0 = v15.p1 in
    let v24: s0 = v4.p1 in
    var v21: s0 = v2 in
    v8.p0 = v0 in
    var v23: s2 = v1 in
    var v39: s2 = v23 in
    var v40: s1 = v8 in
    let v73: s0 = v40.p0 in
    let v54: s0 = v39.p1 in
    let v66: [[Float]] = v0.p0 in
    v21.p0 = v66 in
    v8.p0 = v54 in
    let v65: [s0] = [v73, v54, v54, v5, v10] in
    v39.p1 = v5 in
    let v145: s0 = v65[2] in
    v39.p1 = v21 in
    v39.p1 = v24 in
    v23.p1 = v10 in
    v145
  } in
  let noinline_f0: (s1, s2, Float) -> Float = (v0: s1, v1: s2, v2: Float) -> Float {
    var v5: s1 = v0 in
    let v11: s0 = v5.p1 in
    let v12: s0 = v0.p0 in
    var v4: s0 = v12 in
    v5.p0 = v4 in
    v5.p1 = v4 in
    let v20: s0 = f5(v11, v1, v4) in
    let v17: [[Float]] = v4.p1 in
    let v24: [[Float]] = v11.p1 in
    v4.p1 = v17 in
    let v34: [Float] = v24[1] in
    let v123: Float = v34[0] in
    var v216: s0 = v20 in
    v4 = v216 in
    v123
  } in
  fun loop(i: Int, v0: s1, v1: s2, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1(s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]), s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]])) in
    let v1: s2 = s2([s1(s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]]), s0([[15.0], [16.0]], [[17.0], [18.0], [19.0]]))], s0([[20.0], [21.0]], [[22.0], [23.0], [24.0]])) in
    let v2: Float = 25.0 in
    let initialResult: Float = 25.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()