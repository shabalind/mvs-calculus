  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: [s0]
    var p1: s1
    var p2: s0
    var p3: s1
  }
  struct s3 {
    var p0: [[s1]]
    var p1: s2
  }
  struct s5 {
    var p0: s1
    var p1: s1
  }
  struct s6 {
    var p0: s0
    var p1: s5
  }
  struct s10 {
    var p0: s3
    var p1: s5
  }
  func f62(_ v0: s5) -> s5 {
    let v3: s1 = v0.p1
    var v6: s1 = v3
    let v5: s0 = v6.p1
    v6.p0 = v5
    let v2: s1 = v0.p0
    var v4: s5 = v0
    let v12: s1 = v4.p1
    let v7: s1 = v0.p0
    let v1: s0 = v12.p1
    let v8: [[Double]] = v1.p1
    let v11: s0 = v2.p1
    let v10: s0 = v12.p1
    var v19: s1 = v7
    v19.p1 = v1
    v6.p1 = v5
    v6.p1 = v5
    let v16: s0 = v2.p0
    let v55: s1 = v4.p1
    let v38: s0 = v12.p0
    let v103: s1 = v0.p1
    v4.p0 = v19
    var v47: s0 = v38
    let v81: [[Double]] = v38.p0
    v6.p1 = v11
    v47.p0 = v81
    v19.p0 = v5
    var v112: s0 = v47
    let v82: s1 = s1(p0: v10, p1: v112)
    let v254: s0 = v55.p0
    v19.p1 = v254
    v6.p0 = v16
    v112.p1 = v8
    var v182: s1 = v103
    v19.p0 = v5
    let v137: s5 = s5(p0: v82, p1: v182)
    return v137
  }
  func f57(_ v0: s5) -> s5 {
    var v7: s5 = v0
    let v4: s1 = v0.p0
    var v5: s5 = v7
    v7 = v0
    let v9: s1 = v7.p1
    v7.p0 = v9
    v7.p1 = v4
    return v5
  }
  func f52(_ v0: s6) -> s6 {
    var v1: s6 = v0
    let v6: [s6] = [v1, v1, v1, v1, v0, v1, v1]
    let v3: s0 = v1.p0
    var v8: [s6] = v6
    v8[3] = v0
    var v2: s6 = v0
    let v7: s0 = v1.p0
    var v15: s6 = v0
    v1.p0 = v3
    let v12: s1 = s1(p0: v3, p1: v7)
    v2.p0 = v3
    let v16: s0 = v12.p0
    let v22: s1 = s1(p0: v7, p1: v3)
    v15 = v0
    var v29: [s6] = v8
    v2.p0 = v7
    let v31: s0 = v22.p1
    v1.p0 = v3
    v8[2] = v2
    var v25: [s6] = v8
    let v49: s5 = v1.p1
    let v75: s5 = f57(v49)
    let v57: s6 = v25[6]
    let v54: s5 = f57(v75)
    var v56: s6 = v1
    let v23: [s6] = [v57, v15, v2, v56]
    v25 = v29
    let v59: s5 = f62(v54)
    let v36: s5 = f62(v59)
    let v58: s5 = f57(v54)
    v8 = v29
    let v68: s5 = f57(v49)
    var v103: [s6] = v29
    let v55: s5 = v1.p1
    v1.p0 = v7
    let v92: s5 = f57(v68)
    let v82: s5 = f57(v92)
    let v63: s6 = v23[0]
    v29[3] = v63
    v2.p0 = v3
    v56.p0 = v31
    v103[4] = v56
    let v128: s6 = v103[1]
    v29 = v103
    v56.p1 = v82
    v103[3] = v57
    v56.p0 = v3
    v29[2] = v63
    v29[5] = v1
    v25[3] = v56
    v8[2] = v1
    v1.p0 = v16
    v56.p1 = v36
    v29[0] = v128
    var v162: s6 = v128
    v1.p1 = v55
    v2.p1 = v58
    return v162
  }
  @inline(never)
  func f0(_ v0: s6, _ v1: s10, _ v2: s10, _ v3: [s3], _ v4: Double) -> Double {
    let v7: s6 = f52(v0)
    let v8: s5 = v7.p1
    let v13: s1 = v8.p1
    let v41: s0 = v13.p0
    let v32: [[Double]] = v41.p0
    let v29: [Double] = v32[1]
    let v127: Double = v29[0]
    return v127
  }
  func benchmark() {
    let v0: s6 = s6(p0: s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0]]), p1: s5(p0: s1(p0: s0(p0: [[5.0], [6.0], [7.0]], p1: [[8.0], [9.0]]), p1: s0(p0: [[10.0], [11.0], [12.0]], p1: [[13.0], [14.0]])), p1: s1(p0: s0(p0: [[15.0], [16.0], [17.0]], p1: [[18.0], [19.0]]), p1: s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0], [24.0]]))))
    let v1: s10 = s10(p0: s3(p0: [[s1(p0: s0(p0: [[25.0], [26.0], [27.0]], p1: [[28.0], [29.0]]), p1: s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0]]))]], p1: s2(p0: [s0(p0: [[35.0], [36.0], [37.0]], p1: [[38.0], [39.0]])], p1: s1(p0: s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0], [44.0]]), p1: s0(p0: [[45.0], [46.0], [47.0]], p1: [[48.0], [49.0]])), p2: s0(p0: [[50.0], [51.0], [52.0]], p1: [[53.0], [54.0]]), p3: s1(p0: s0(p0: [[55.0], [56.0], [57.0]], p1: [[58.0], [59.0]]), p1: s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0], [64.0]])))), p1: s5(p0: s1(p0: s0(p0: [[65.0], [66.0], [67.0]], p1: [[68.0], [69.0]]), p1: s0(p0: [[70.0], [71.0], [72.0]], p1: [[73.0], [74.0]])), p1: s1(p0: s0(p0: [[75.0], [76.0], [77.0]], p1: [[78.0], [79.0]]), p1: s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0], [84.0]]))))
    let v2: s10 = s10(p0: s3(p0: [[s1(p0: s0(p0: [[85.0], [86.0], [87.0]], p1: [[88.0], [89.0]]), p1: s0(p0: [[90.0], [91.0], [92.0]], p1: [[93.0], [94.0]]))]], p1: s2(p0: [s0(p0: [[95.0], [96.0], [97.0]], p1: [[98.0], [99.0]])], p1: s1(p0: s0(p0: [[100.0], [101.0], [102.0]], p1: [[103.0], [104.0]]), p1: s0(p0: [[105.0], [106.0], [107.0]], p1: [[108.0], [109.0]])), p2: s0(p0: [[110.0], [111.0], [112.0]], p1: [[113.0], [114.0]]), p3: s1(p0: s0(p0: [[115.0], [116.0], [117.0]], p1: [[118.0], [119.0]]), p1: s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0], [124.0]])))), p1: s5(p0: s1(p0: s0(p0: [[125.0], [126.0], [127.0]], p1: [[128.0], [129.0]]), p1: s0(p0: [[130.0], [131.0], [132.0]], p1: [[133.0], [134.0]])), p1: s1(p0: s0(p0: [[135.0], [136.0], [137.0]], p1: [[138.0], [139.0]]), p1: s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0], [144.0]]))))
    let v3: [s3] = [s3(p0: [[s1(p0: s0(p0: [[145.0], [146.0], [147.0]], p1: [[148.0], [149.0]]), p1: s0(p0: [[150.0], [151.0], [152.0]], p1: [[153.0], [154.0]]))]], p1: s2(p0: [s0(p0: [[155.0], [156.0], [157.0]], p1: [[158.0], [159.0]])], p1: s1(p0: s0(p0: [[160.0], [161.0], [162.0]], p1: [[163.0], [164.0]]), p1: s0(p0: [[165.0], [166.0], [167.0]], p1: [[168.0], [169.0]])), p2: s0(p0: [[170.0], [171.0], [172.0]], p1: [[173.0], [174.0]]), p3: s1(p0: s0(p0: [[175.0], [176.0], [177.0]], p1: [[178.0], [179.0]]), p1: s0(p0: [[180.0], [181.0], [182.0]], p1: [[183.0], [184.0]])))), s3(p0: [[s1(p0: s0(p0: [[185.0], [186.0], [187.0]], p1: [[188.0], [189.0]]), p1: s0(p0: [[190.0], [191.0], [192.0]], p1: [[193.0], [194.0]]))]], p1: s2(p0: [s0(p0: [[195.0], [196.0], [197.0]], p1: [[198.0], [199.0]])], p1: s1(p0: s0(p0: [[200.0], [201.0], [202.0]], p1: [[203.0], [204.0]]), p1: s0(p0: [[205.0], [206.0], [207.0]], p1: [[208.0], [209.0]])), p2: s0(p0: [[210.0], [211.0], [212.0]], p1: [[213.0], [214.0]]), p3: s1(p0: s0(p0: [[215.0], [216.0], [217.0]], p1: [[218.0], [219.0]]), p1: s0(p0: [[220.0], [221.0], [222.0]], p1: [[223.0], [224.0]]))))]
    let v4: Double = 225.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 225.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
