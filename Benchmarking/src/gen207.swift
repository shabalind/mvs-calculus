  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s4 {
    var p0: Double
    var p1: [s0]
  }
  struct s5 {
    var p0: s4
    var p1: s4
  }
  struct s6 {
    var p0: s1
    var p1: s1
  }
  struct s7 {
    var p0: s5
    var p1: Double
  }
  struct s9 {
    var p0: [[s0]]
    var p1: s5
  }
  struct s10 {
    var p0: s9
    var p1: s5
  }
  @inline(never)
  func f0(_ v0: [s10], _ v1: [s7], _ v2: [s6], _ v3: Double) -> Double {
    let v7: s7 = v1[1]
    let v4: s5 = v7.p0
    let v13: Double = v3 * v3
    let v9: s5 = v7.p0
    let v21: s7 = s7(p0: v9, p1: v13)
    let v24: s5 = v21.p0
    var v25: s5 = v24
    let v61: s4 = v25.p1
    v25.p0 = v61
    let v68: Double = v61.p0
    var v53: s4 = v61
    let v66: s4 = v4.p0
    let v72: Double = v53.p0
    v53.p0 = v68
    v25.p0 = v66
    return v72
  }
  func benchmark() {
    let v0: [s10] = [s10(p0: s9(p0: [[s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0], [5.0]], p2: [[6.0], [7.0], [8.0]], p3: [[9.0]])], [s0(p0: [[10.0], [11.0], [12.0]], p1: [[13.0], [14.0], [15.0]], p2: [[16.0], [17.0], [18.0]], p3: [[19.0]])]], p1: s5(p0: s4(p0: 20.0, p1: [s0(p0: [[21.0], [22.0], [23.0]], p1: [[24.0], [25.0], [26.0]], p2: [[27.0], [28.0], [29.0]], p3: [[30.0]]), s0(p0: [[31.0], [32.0], [33.0]], p1: [[34.0], [35.0], [36.0]], p2: [[37.0], [38.0], [39.0]], p3: [[40.0]])]), p1: s4(p0: 41.0, p1: [s0(p0: [[42.0], [43.0], [44.0]], p1: [[45.0], [46.0], [47.0]], p2: [[48.0], [49.0], [50.0]], p3: [[51.0]]), s0(p0: [[52.0], [53.0], [54.0]], p1: [[55.0], [56.0], [57.0]], p2: [[58.0], [59.0], [60.0]], p3: [[61.0]])]))), p1: s5(p0: s4(p0: 62.0, p1: [s0(p0: [[63.0], [64.0], [65.0]], p1: [[66.0], [67.0], [68.0]], p2: [[69.0], [70.0], [71.0]], p3: [[72.0]]), s0(p0: [[73.0], [74.0], [75.0]], p1: [[76.0], [77.0], [78.0]], p2: [[79.0], [80.0], [81.0]], p3: [[82.0]])]), p1: s4(p0: 83.0, p1: [s0(p0: [[84.0], [85.0], [86.0]], p1: [[87.0], [88.0], [89.0]], p2: [[90.0], [91.0], [92.0]], p3: [[93.0]]), s0(p0: [[94.0], [95.0], [96.0]], p1: [[97.0], [98.0], [99.0]], p2: [[100.0], [101.0], [102.0]], p3: [[103.0]])]))), s10(p0: s9(p0: [[s0(p0: [[104.0], [105.0], [106.0]], p1: [[107.0], [108.0], [109.0]], p2: [[110.0], [111.0], [112.0]], p3: [[113.0]])], [s0(p0: [[114.0], [115.0], [116.0]], p1: [[117.0], [118.0], [119.0]], p2: [[120.0], [121.0], [122.0]], p3: [[123.0]])]], p1: s5(p0: s4(p0: 124.0, p1: [s0(p0: [[125.0], [126.0], [127.0]], p1: [[128.0], [129.0], [130.0]], p2: [[131.0], [132.0], [133.0]], p3: [[134.0]]), s0(p0: [[135.0], [136.0], [137.0]], p1: [[138.0], [139.0], [140.0]], p2: [[141.0], [142.0], [143.0]], p3: [[144.0]])]), p1: s4(p0: 145.0, p1: [s0(p0: [[146.0], [147.0], [148.0]], p1: [[149.0], [150.0], [151.0]], p2: [[152.0], [153.0], [154.0]], p3: [[155.0]]), s0(p0: [[156.0], [157.0], [158.0]], p1: [[159.0], [160.0], [161.0]], p2: [[162.0], [163.0], [164.0]], p3: [[165.0]])]))), p1: s5(p0: s4(p0: 166.0, p1: [s0(p0: [[167.0], [168.0], [169.0]], p1: [[170.0], [171.0], [172.0]], p2: [[173.0], [174.0], [175.0]], p3: [[176.0]]), s0(p0: [[177.0], [178.0], [179.0]], p1: [[180.0], [181.0], [182.0]], p2: [[183.0], [184.0], [185.0]], p3: [[186.0]])]), p1: s4(p0: 187.0, p1: [s0(p0: [[188.0], [189.0], [190.0]], p1: [[191.0], [192.0], [193.0]], p2: [[194.0], [195.0], [196.0]], p3: [[197.0]]), s0(p0: [[198.0], [199.0], [200.0]], p1: [[201.0], [202.0], [203.0]], p2: [[204.0], [205.0], [206.0]], p3: [[207.0]])]))), s10(p0: s9(p0: [[s0(p0: [[208.0], [209.0], [210.0]], p1: [[211.0], [212.0], [213.0]], p2: [[214.0], [215.0], [216.0]], p3: [[217.0]])], [s0(p0: [[218.0], [219.0], [220.0]], p1: [[221.0], [222.0], [223.0]], p2: [[224.0], [225.0], [226.0]], p3: [[227.0]])]], p1: s5(p0: s4(p0: 228.0, p1: [s0(p0: [[229.0], [230.0], [231.0]], p1: [[232.0], [233.0], [234.0]], p2: [[235.0], [236.0], [237.0]], p3: [[238.0]]), s0(p0: [[239.0], [240.0], [241.0]], p1: [[242.0], [243.0], [244.0]], p2: [[245.0], [246.0], [247.0]], p3: [[248.0]])]), p1: s4(p0: 249.0, p1: [s0(p0: [[250.0], [251.0], [252.0]], p1: [[253.0], [254.0], [255.0]], p2: [[256.0], [257.0], [258.0]], p3: [[259.0]]), s0(p0: [[260.0], [261.0], [262.0]], p1: [[263.0], [264.0], [265.0]], p2: [[266.0], [267.0], [268.0]], p3: [[269.0]])]))), p1: s5(p0: s4(p0: 270.0, p1: [s0(p0: [[271.0], [272.0], [273.0]], p1: [[274.0], [275.0], [276.0]], p2: [[277.0], [278.0], [279.0]], p3: [[280.0]]), s0(p0: [[281.0], [282.0], [283.0]], p1: [[284.0], [285.0], [286.0]], p2: [[287.0], [288.0], [289.0]], p3: [[290.0]])]), p1: s4(p0: 291.0, p1: [s0(p0: [[292.0], [293.0], [294.0]], p1: [[295.0], [296.0], [297.0]], p2: [[298.0], [299.0], [300.0]], p3: [[301.0]]), s0(p0: [[302.0], [303.0], [304.0]], p1: [[305.0], [306.0], [307.0]], p2: [[308.0], [309.0], [310.0]], p3: [[311.0]])])))]
    let v1: [s7] = [s7(p0: s5(p0: s4(p0: 312.0, p1: [s0(p0: [[313.0], [314.0], [315.0]], p1: [[316.0], [317.0], [318.0]], p2: [[319.0], [320.0], [321.0]], p3: [[322.0]]), s0(p0: [[323.0], [324.0], [325.0]], p1: [[326.0], [327.0], [328.0]], p2: [[329.0], [330.0], [331.0]], p3: [[332.0]])]), p1: s4(p0: 333.0, p1: [s0(p0: [[334.0], [335.0], [336.0]], p1: [[337.0], [338.0], [339.0]], p2: [[340.0], [341.0], [342.0]], p3: [[343.0]]), s0(p0: [[344.0], [345.0], [346.0]], p1: [[347.0], [348.0], [349.0]], p2: [[350.0], [351.0], [352.0]], p3: [[353.0]])])), p1: 354.0), s7(p0: s5(p0: s4(p0: 355.0, p1: [s0(p0: [[356.0], [357.0], [358.0]], p1: [[359.0], [360.0], [361.0]], p2: [[362.0], [363.0], [364.0]], p3: [[365.0]]), s0(p0: [[366.0], [367.0], [368.0]], p1: [[369.0], [370.0], [371.0]], p2: [[372.0], [373.0], [374.0]], p3: [[375.0]])]), p1: s4(p0: 376.0, p1: [s0(p0: [[377.0], [378.0], [379.0]], p1: [[380.0], [381.0], [382.0]], p2: [[383.0], [384.0], [385.0]], p3: [[386.0]]), s0(p0: [[387.0], [388.0], [389.0]], p1: [[390.0], [391.0], [392.0]], p2: [[393.0], [394.0], [395.0]], p3: [[396.0]])])), p1: 397.0), s7(p0: s5(p0: s4(p0: 398.0, p1: [s0(p0: [[399.0], [400.0], [401.0]], p1: [[402.0], [403.0], [404.0]], p2: [[405.0], [406.0], [407.0]], p3: [[408.0]]), s0(p0: [[409.0], [410.0], [411.0]], p1: [[412.0], [413.0], [414.0]], p2: [[415.0], [416.0], [417.0]], p3: [[418.0]])]), p1: s4(p0: 419.0, p1: [s0(p0: [[420.0], [421.0], [422.0]], p1: [[423.0], [424.0], [425.0]], p2: [[426.0], [427.0], [428.0]], p3: [[429.0]]), s0(p0: [[430.0], [431.0], [432.0]], p1: [[433.0], [434.0], [435.0]], p2: [[436.0], [437.0], [438.0]], p3: [[439.0]])])), p1: 440.0)]
    let v2: [s6] = [s6(p0: s1(p0: [s0(p0: [[441.0], [442.0], [443.0]], p1: [[444.0], [445.0], [446.0]], p2: [[447.0], [448.0], [449.0]], p3: [[450.0]]), s0(p0: [[451.0], [452.0], [453.0]], p1: [[454.0], [455.0], [456.0]], p2: [[457.0], [458.0], [459.0]], p3: [[460.0]]), s0(p0: [[461.0], [462.0], [463.0]], p1: [[464.0], [465.0], [466.0]], p2: [[467.0], [468.0], [469.0]], p3: [[470.0]])], p1: [s0(p0: [[471.0], [472.0], [473.0]], p1: [[474.0], [475.0], [476.0]], p2: [[477.0], [478.0], [479.0]], p3: [[480.0]]), s0(p0: [[481.0], [482.0], [483.0]], p1: [[484.0], [485.0], [486.0]], p2: [[487.0], [488.0], [489.0]], p3: [[490.0]]), s0(p0: [[491.0], [492.0], [493.0]], p1: [[494.0], [495.0], [496.0]], p2: [[497.0], [498.0], [499.0]], p3: [[500.0]])]), p1: s1(p0: [s0(p0: [[501.0], [502.0], [503.0]], p1: [[504.0], [505.0], [506.0]], p2: [[507.0], [508.0], [509.0]], p3: [[510.0]]), s0(p0: [[511.0], [512.0], [513.0]], p1: [[514.0], [515.0], [516.0]], p2: [[517.0], [518.0], [519.0]], p3: [[520.0]]), s0(p0: [[521.0], [522.0], [523.0]], p1: [[524.0], [525.0], [526.0]], p2: [[527.0], [528.0], [529.0]], p3: [[530.0]])], p1: [s0(p0: [[531.0], [532.0], [533.0]], p1: [[534.0], [535.0], [536.0]], p2: [[537.0], [538.0], [539.0]], p3: [[540.0]]), s0(p0: [[541.0], [542.0], [543.0]], p1: [[544.0], [545.0], [546.0]], p2: [[547.0], [548.0], [549.0]], p3: [[550.0]]), s0(p0: [[551.0], [552.0], [553.0]], p1: [[554.0], [555.0], [556.0]], p2: [[557.0], [558.0], [559.0]], p3: [[560.0]])])), s6(p0: s1(p0: [s0(p0: [[561.0], [562.0], [563.0]], p1: [[564.0], [565.0], [566.0]], p2: [[567.0], [568.0], [569.0]], p3: [[570.0]]), s0(p0: [[571.0], [572.0], [573.0]], p1: [[574.0], [575.0], [576.0]], p2: [[577.0], [578.0], [579.0]], p3: [[580.0]]), s0(p0: [[581.0], [582.0], [583.0]], p1: [[584.0], [585.0], [586.0]], p2: [[587.0], [588.0], [589.0]], p3: [[590.0]])], p1: [s0(p0: [[591.0], [592.0], [593.0]], p1: [[594.0], [595.0], [596.0]], p2: [[597.0], [598.0], [599.0]], p3: [[600.0]]), s0(p0: [[601.0], [602.0], [603.0]], p1: [[604.0], [605.0], [606.0]], p2: [[607.0], [608.0], [609.0]], p3: [[610.0]]), s0(p0: [[611.0], [612.0], [613.0]], p1: [[614.0], [615.0], [616.0]], p2: [[617.0], [618.0], [619.0]], p3: [[620.0]])]), p1: s1(p0: [s0(p0: [[621.0], [622.0], [623.0]], p1: [[624.0], [625.0], [626.0]], p2: [[627.0], [628.0], [629.0]], p3: [[630.0]]), s0(p0: [[631.0], [632.0], [633.0]], p1: [[634.0], [635.0], [636.0]], p2: [[637.0], [638.0], [639.0]], p3: [[640.0]]), s0(p0: [[641.0], [642.0], [643.0]], p1: [[644.0], [645.0], [646.0]], p2: [[647.0], [648.0], [649.0]], p3: [[650.0]])], p1: [s0(p0: [[651.0], [652.0], [653.0]], p1: [[654.0], [655.0], [656.0]], p2: [[657.0], [658.0], [659.0]], p3: [[660.0]]), s0(p0: [[661.0], [662.0], [663.0]], p1: [[664.0], [665.0], [666.0]], p2: [[667.0], [668.0], [669.0]], p3: [[670.0]]), s0(p0: [[671.0], [672.0], [673.0]], p1: [[674.0], [675.0], [676.0]], p2: [[677.0], [678.0], [679.0]], p3: [[680.0]])])), s6(p0: s1(p0: [s0(p0: [[681.0], [682.0], [683.0]], p1: [[684.0], [685.0], [686.0]], p2: [[687.0], [688.0], [689.0]], p3: [[690.0]]), s0(p0: [[691.0], [692.0], [693.0]], p1: [[694.0], [695.0], [696.0]], p2: [[697.0], [698.0], [699.0]], p3: [[700.0]]), s0(p0: [[701.0], [702.0], [703.0]], p1: [[704.0], [705.0], [706.0]], p2: [[707.0], [708.0], [709.0]], p3: [[710.0]])], p1: [s0(p0: [[711.0], [712.0], [713.0]], p1: [[714.0], [715.0], [716.0]], p2: [[717.0], [718.0], [719.0]], p3: [[720.0]]), s0(p0: [[721.0], [722.0], [723.0]], p1: [[724.0], [725.0], [726.0]], p2: [[727.0], [728.0], [729.0]], p3: [[730.0]]), s0(p0: [[731.0], [732.0], [733.0]], p1: [[734.0], [735.0], [736.0]], p2: [[737.0], [738.0], [739.0]], p3: [[740.0]])]), p1: s1(p0: [s0(p0: [[741.0], [742.0], [743.0]], p1: [[744.0], [745.0], [746.0]], p2: [[747.0], [748.0], [749.0]], p3: [[750.0]]), s0(p0: [[751.0], [752.0], [753.0]], p1: [[754.0], [755.0], [756.0]], p2: [[757.0], [758.0], [759.0]], p3: [[760.0]]), s0(p0: [[761.0], [762.0], [763.0]], p1: [[764.0], [765.0], [766.0]], p2: [[767.0], [768.0], [769.0]], p3: [[770.0]])], p1: [s0(p0: [[771.0], [772.0], [773.0]], p1: [[774.0], [775.0], [776.0]], p2: [[777.0], [778.0], [779.0]], p3: [[780.0]]), s0(p0: [[781.0], [782.0], [783.0]], p1: [[784.0], [785.0], [786.0]], p2: [[787.0], [788.0], [789.0]], p3: [[790.0]]), s0(p0: [[791.0], [792.0], [793.0]], p1: [[794.0], [795.0], [796.0]], p2: [[797.0], [798.0], [799.0]], p3: [[800.0]])]))]
    let v3: Double = 801.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 801.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
