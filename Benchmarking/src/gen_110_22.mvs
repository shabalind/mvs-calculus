  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s2 {
    var p0: s0
    var p1: s1
  } in
  let f12: (Float) -> Float = (v0: Float) -> Float {
    var v4: Float = v0 in
    var v7: Float = v0 in
    var v6: Float = v7 in
    var v2: Float = v4 in
    var v3: Float = v2 in
    var v1: Float = v7 in
    var v18: Float = v3 in
    let v9: [Float] = [v18, v1, v18, v2, v0] in
    var v14: Float = v2 in
    v2 = v1 in
    let v12: Float = v9[4] in
    v3 = v6 in
    var v5: [Float] = v9 in
    var v16: Float = v14 in
    let v10: Float = v5[1] in
    v5[3] = v7 in
    v5[3] = v14 in
    v5[4] = v14 in
    v5[1] = v7 in
    var v25: [Float] = v5 in
    var v23: Float = v10 in
    var v17: [Float] = v25 in
    var v19: [Float] = v17 in
    var v33: [Float] = v19 in
    var v20: Float = v16 in
    v33[4] = v12 in
    var v27: Float = v20 in
    var v35: [Float] = v19 in
    var v45: [Float] = v17 in
    let v36: [[Float]] = [v33, v33, v19, v45, v45, v17] in
    let v108: [Float] = v36[4] in
    var v75: [[Float]] = v36 in
    let v186: [Float] = v75[4] in
    v25 = v33 in
    let v61: Float = v35[4] in
    let v34: [Float] = v75[1] in
    let v42: [Float] = v36[1] in
    let v145: [Float] = v36[0] in
    let v135: [[Float]] = [v35, v35, v108, v34, v186, v42, v145] in
    let v68: Float = v23 * v0 in
    var v85: [Float] = v17 in
    var v78: [[Float]] = v135 in
    v17[1] = v61 in
    v78[2] = v33 in
    v75[5] = v5 in
    var v121: [[Float]] = v78 in
    v75[5] = v35 in
    let v100: [Float] = v121[1] in
    v33[4] = v27 in
    v35[3] = v4 in
    let v98: Float = v100[0] in
    var v116: [[Float]] = v135 in
    v116[4] = v85 in
    v25[1] = v4 in
    v45[4] = v2 in
    v121 = v116 in
    v33[4] = v68 in
    v98
  } in
  let noinline_f0: (s2, [[s1]], [[s1]], Float) -> Float = (v0: s2, v1: [[s1]], v2: [[s1]], v3: Float) -> Float {
    let v8: Float = f12(v3) in
    let v11: Float = v3 * v8 in
    let v44: Float = v3 / v3 in
    let v61: Float = v11 - v3 in
    let v150: Float = v44 + v61 in
    v150
  } in
  fun loop(i: Int, v0: s2, v1: [[s1]], v2: [[s1]], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(s0([[0.0]], [[1.0]]), s1([s0([[2.0]], [[3.0]]), s0([[4.0]], [[5.0]])], [s0([[6.0]], [[7.0]]), s0([[8.0]], [[9.0]]), s0([[10.0]], [[11.0]])])) in
    let v1: [[s1]] = [[s1([s0([[12.0]], [[13.0]]), s0([[14.0]], [[15.0]])], [s0([[16.0]], [[17.0]]), s0([[18.0]], [[19.0]]), s0([[20.0]], [[21.0]])])], [s1([s0([[22.0]], [[23.0]]), s0([[24.0]], [[25.0]])], [s0([[26.0]], [[27.0]]), s0([[28.0]], [[29.0]]), s0([[30.0]], [[31.0]])])]] in
    let v2: [[s1]] = [[s1([s0([[32.0]], [[33.0]]), s0([[34.0]], [[35.0]])], [s0([[36.0]], [[37.0]]), s0([[38.0]], [[39.0]]), s0([[40.0]], [[41.0]])])]] in
    let v3: Float = 42.0 in
    let initialResult: Float = 42.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()