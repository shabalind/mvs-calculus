  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
  }
  struct s2 {
    var p0: s1
  }
  struct s3 {
    var p0: s0
    var p1: s1
  }
  struct s4 {
    var p0: s0
    var p1: [s1]
  }
  struct s7 {
    var p0: [s0]
    var p1: [[s3]]
  }
  struct s8 {
    var p0: [s2]
    var p1: s4
  }
  func f52(_ v0: [[s1]]) -> [[s1]] {
    var v4: [[s1]] = v0
    let v2: [s1] = v0[2]
    v4[2] = v2
    var v1: [s1] = v2
    let v7: [[s1]] = [v1, v1, v2]
    let v3: [[s1]] = [v1, v1, v2, v2, v2, v1, v1]
    var v13: [[s1]] = v3
    let v12: [s1] = v4[0]
    var v15: [[s1]] = v7
    let v8: [s1] = v13[6]
    let v14: s1 = v12[0]
    let v17: [s1] = v13[0]
    v13[1] = v2
    let v30: [[s0]] = v14.p1
    var v9: s1 = v14
    let v19: [[s0]] = v9.p1
    let v18: [s1] = v13[0]
    var v22: [s1] = v17
    v15[0] = v18
    v1[0] = v9
    let v21: [s0] = v19[0]
    let v59: [s0] = v14.p0
    let v42: s1 = s1(p0: v59, p1: v30)
    var v23: [s1] = v18
    var v32: [s0] = v59
    var v33: [[s0]] = v19
    v1[0] = v42
    var v29: s1 = v9
    let v44: [[s0]] = v42.p1
    v29.p0 = v59
    let v28: s1 = v18[0]
    var v47: [[s0]] = v30
    var v58: s1 = v14
    let v41: s1 = v23[0]
    v29.p0 = v32
    var v51: [[s0]] = v19
    v9.p1 = v51
    var v56: [[s1]] = v15
    v47 = v44
    v15[1] = v8
    v23[0] = v58
    v29.p1 = v44
    let v60: [s0] = v33[0]
    v4[0] = v1
    let v63: [s0] = v44[2]
    let v73: [s0] = v28.p0
    let v54: [s0] = v44[2]
    let v78: [[s0]] = v41.p1
    v15[2] = v2
    v58.p0 = v60
    v58.p0 = v63
    let v112: [[s0]] = v29.p1
    v58.p1 = v44
    v1[0] = v42
    v33[2] = v21
    v58 = v42
    v58.p1 = v112
    let v97: s1 = s1(p0: v54, p1: v78)
    v33 = v47
    v9.p1 = v78
    v23[0] = v97
    v56[1] = v22
    v29.p0 = v60
    v15[1] = v18
    v58.p0 = v73
    v4[1] = v2
    v29.p0 = v32
    v1[0] = v58
    return v56
  }
  @inline(never)
  func f0(_ v0: [[s1]], _ v1: Double, _ v2: [s8], _ v3: [s7]) -> Double {
    let v10: [[s1]] = f52(v0)
    let v21: [s1] = v10[0]
    let v27: s1 = v21[0]
    let v22: [s0] = v27.p0
    let v74: s0 = v22[0]
    let v69: [[Double]] = v74.p1
    let v65: [Double] = v69[0]
    let v55: Double = v65[0]
    return v55
  }
  func benchmark() {
    let v0: [[s1]] = [[s1(p0: [s0(p0: [[0.0], [1.0]], p1: [[2.0]])], p1: [[s0(p0: [[3.0], [4.0]], p1: [[5.0]])], [s0(p0: [[6.0], [7.0]], p1: [[8.0]])], [s0(p0: [[9.0], [10.0]], p1: [[11.0]])]])], [s1(p0: [s0(p0: [[12.0], [13.0]], p1: [[14.0]])], p1: [[s0(p0: [[15.0], [16.0]], p1: [[17.0]])], [s0(p0: [[18.0], [19.0]], p1: [[20.0]])], [s0(p0: [[21.0], [22.0]], p1: [[23.0]])]])], [s1(p0: [s0(p0: [[24.0], [25.0]], p1: [[26.0]])], p1: [[s0(p0: [[27.0], [28.0]], p1: [[29.0]])], [s0(p0: [[30.0], [31.0]], p1: [[32.0]])], [s0(p0: [[33.0], [34.0]], p1: [[35.0]])]])]]
    let v1: Double = 36.0
    let v2: [s8] = [s8(p0: [s2(p0: s1(p0: [s0(p0: [[37.0], [38.0]], p1: [[39.0]])], p1: [[s0(p0: [[40.0], [41.0]], p1: [[42.0]])], [s0(p0: [[43.0], [44.0]], p1: [[45.0]])], [s0(p0: [[46.0], [47.0]], p1: [[48.0]])]]))], p1: s4(p0: s0(p0: [[49.0], [50.0]], p1: [[51.0]]), p1: [s1(p0: [s0(p0: [[52.0], [53.0]], p1: [[54.0]])], p1: [[s0(p0: [[55.0], [56.0]], p1: [[57.0]])], [s0(p0: [[58.0], [59.0]], p1: [[60.0]])], [s0(p0: [[61.0], [62.0]], p1: [[63.0]])]]), s1(p0: [s0(p0: [[64.0], [65.0]], p1: [[66.0]])], p1: [[s0(p0: [[67.0], [68.0]], p1: [[69.0]])], [s0(p0: [[70.0], [71.0]], p1: [[72.0]])], [s0(p0: [[73.0], [74.0]], p1: [[75.0]])]]), s1(p0: [s0(p0: [[76.0], [77.0]], p1: [[78.0]])], p1: [[s0(p0: [[79.0], [80.0]], p1: [[81.0]])], [s0(p0: [[82.0], [83.0]], p1: [[84.0]])], [s0(p0: [[85.0], [86.0]], p1: [[87.0]])]])])), s8(p0: [s2(p0: s1(p0: [s0(p0: [[88.0], [89.0]], p1: [[90.0]])], p1: [[s0(p0: [[91.0], [92.0]], p1: [[93.0]])], [s0(p0: [[94.0], [95.0]], p1: [[96.0]])], [s0(p0: [[97.0], [98.0]], p1: [[99.0]])]]))], p1: s4(p0: s0(p0: [[100.0], [101.0]], p1: [[102.0]]), p1: [s1(p0: [s0(p0: [[103.0], [104.0]], p1: [[105.0]])], p1: [[s0(p0: [[106.0], [107.0]], p1: [[108.0]])], [s0(p0: [[109.0], [110.0]], p1: [[111.0]])], [s0(p0: [[112.0], [113.0]], p1: [[114.0]])]]), s1(p0: [s0(p0: [[115.0], [116.0]], p1: [[117.0]])], p1: [[s0(p0: [[118.0], [119.0]], p1: [[120.0]])], [s0(p0: [[121.0], [122.0]], p1: [[123.0]])], [s0(p0: [[124.0], [125.0]], p1: [[126.0]])]]), s1(p0: [s0(p0: [[127.0], [128.0]], p1: [[129.0]])], p1: [[s0(p0: [[130.0], [131.0]], p1: [[132.0]])], [s0(p0: [[133.0], [134.0]], p1: [[135.0]])], [s0(p0: [[136.0], [137.0]], p1: [[138.0]])]])]))]
    let v3: [s7] = [s7(p0: [s0(p0: [[139.0], [140.0]], p1: [[141.0]]), s0(p0: [[142.0], [143.0]], p1: [[144.0]]), s0(p0: [[145.0], [146.0]], p1: [[147.0]])], p1: [[s3(p0: s0(p0: [[148.0], [149.0]], p1: [[150.0]]), p1: s1(p0: [s0(p0: [[151.0], [152.0]], p1: [[153.0]])], p1: [[s0(p0: [[154.0], [155.0]], p1: [[156.0]])], [s0(p0: [[157.0], [158.0]], p1: [[159.0]])], [s0(p0: [[160.0], [161.0]], p1: [[162.0]])]]))], [s3(p0: s0(p0: [[163.0], [164.0]], p1: [[165.0]]), p1: s1(p0: [s0(p0: [[166.0], [167.0]], p1: [[168.0]])], p1: [[s0(p0: [[169.0], [170.0]], p1: [[171.0]])], [s0(p0: [[172.0], [173.0]], p1: [[174.0]])], [s0(p0: [[175.0], [176.0]], p1: [[177.0]])]]))]]), s7(p0: [s0(p0: [[178.0], [179.0]], p1: [[180.0]]), s0(p0: [[181.0], [182.0]], p1: [[183.0]]), s0(p0: [[184.0], [185.0]], p1: [[186.0]])], p1: [[s3(p0: s0(p0: [[187.0], [188.0]], p1: [[189.0]]), p1: s1(p0: [s0(p0: [[190.0], [191.0]], p1: [[192.0]])], p1: [[s0(p0: [[193.0], [194.0]], p1: [[195.0]])], [s0(p0: [[196.0], [197.0]], p1: [[198.0]])], [s0(p0: [[199.0], [200.0]], p1: [[201.0]])]]))], [s3(p0: s0(p0: [[202.0], [203.0]], p1: [[204.0]]), p1: s1(p0: [s0(p0: [[205.0], [206.0]], p1: [[207.0]])], p1: [[s0(p0: [[208.0], [209.0]], p1: [[210.0]])], [s0(p0: [[211.0], [212.0]], p1: [[213.0]])], [s0(p0: [[214.0], [215.0]], p1: [[216.0]])]]))]])]
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = [StructValue(Name(str='s7', ty=None), [[StructValue(Name(str='s0', ty=None), [[[139.0], [140.0]], [[141.0]]]), StructValue(Name(str='s0', ty=None), [[[142.0], [143.0]], [[144.0]]]), StructValue(Name(str='s0', ty=None), [[[145.0], [146.0]], [[147.0]]])], [[StructValue(Name(str='s3', ty=None), [StructValue(Name(str='s0', ty=None), [[[148.0], [149.0]], [[150.0]]]), StructValue(Name(str='s1', ty=None), [[StructValue(Name(str='s0', ty=None), [[[151.0], [152.0]], [[153.0]]])], [[StructValue(Name(str='s0', ty=None), [[[154.0], [155.0]], [[156.0]]])], [StructValue(Name(str='s0', ty=None), [[[157.0], [158.0]], [[159.0]]])], [StructValue(Name(str='s0', ty=None), [[[160.0], [161.0]], [[162.0]]])]]])])], [StructValue(Name(str='s3', ty=None), [StructValue(Name(str='s0', ty=None), [[[163.0], [164.0]], [[165.0]]]), StructValue(Name(str='s1', ty=None), [[StructValue(Name(str='s0', ty=None), [[[166.0], [167.0]], [[168.0]]])], [[StructValue(Name(str='s0', ty=None), [[[169.0], [170.0]], [[171.0]]])], [StructValue(Name(str='s0', ty=None), [[[172.0], [173.0]], [[174.0]]])], [StructValue(Name(str='s0', ty=None), [[[175.0], [176.0]], [[177.0]]])]]])])]]]), StructValue(Name(str='s7', ty=None), [[StructValue(Name(str='s0', ty=None), [[[178.0], [179.0]], [[180.0]]]), StructValue(Name(str='s0', ty=None), [[[181.0], [182.0]], [[183.0]]]), StructValue(Name(str='s0', ty=None), [[[184.0], [185.0]], [[186.0]]])], [[StructValue(Name(str='s3', ty=None), [StructValue(Name(str='s0', ty=None), [[[187.0], [188.0]], [[189.0]]]), StructValue(Name(str='s1', ty=None), [[StructValue(Name(str='s0', ty=None), [[[190.0], [191.0]], [[192.0]]])], [[StructValue(Name(str='s0', ty=None), [[[193.0], [194.0]], [[195.0]]])], [StructValue(Name(str='s0', ty=None), [[[196.0], [197.0]], [[198.0]]])], [StructValue(Name(str='s0', ty=None), [[[199.0], [200.0]], [[201.0]]])]]])])], [StructValue(Name(str='s3', ty=None), [StructValue(Name(str='s0', ty=None), [[[202.0], [203.0]], [[204.0]]]), StructValue(Name(str='s1', ty=None), [[StructValue(Name(str='s0', ty=None), [[[205.0], [206.0]], [[207.0]]])], [[StructValue(Name(str='s0', ty=None), [[[208.0], [209.0]], [[210.0]]])], [StructValue(Name(str='s0', ty=None), [[[211.0], [212.0]], [[213.0]]])], [StructValue(Name(str='s0', ty=None), [[[214.0], [215.0]], [[216.0]]])]]])])]]])]
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
