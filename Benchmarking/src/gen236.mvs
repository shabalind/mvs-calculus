  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s6 {
    var p0: [s1]
    var p1: [s1]
  } in
  let f46: (s6, s6) -> s6 = (v0: s6, v1: s6) -> s6 {
    var v17: s6 = v1 in
    v17 = v0 in
    v17
  } in
  let f31: (s6, s6) -> s6 = (v0: s6, v1: s6) -> s6 {
    let v7: s6 = f46(v0, v1) in
    var v9: s6 = v0 in
    let v2: [s1] = v0.p1 in
    v9.p1 = v2 in
    let v6: [s1] = v9.p0 in
    var v4: [s1] = v6 in
    let v3: s6 = s6(v6, v2) in
    let v14: [s1] = v0.p0 in
    v9.p1 = v2 in
    let v19: s6 = f46(v9, v7) in
    v9.p1 = v2 in
    var v24: [s1] = v14 in
    v9.p0 = v4 in
    let v30: s6 = f46(v0, v9) in
    let v11: s1 = v24[0] in
    var v13: s6 = v19 in
    v24[0] = v11 in
    let v20: s6 = f46(v19, v30) in
    v9 = v13 in
    v4[1] = v11 in
    v13.p0 = v14 in
    v13.p0 = v14 in
    v24[0] = v11 in
    var v73: [s1] = v14 in
    v73[0] = v11 in
    v13.p0 = v14 in
    let v72: s6 = f46(v3, v30) in
    v9.p0 = v73 in
    v13.p0 = v14 in
    let v87: s6 = f46(v20, v72) in
    v9.p0 = v73 in
    v87
  } in
  let f12: ([s6]) -> [s6] = (v0: [s6]) -> [s6] {
    let v7: s6 = v0[2] in
    let v6: [s1] = v7.p1 in
    let v5: s6 = v0[0] in
    var v2: [s6] = v0 in
    var v3: s6 = v7 in
    var v4: [s6] = v2 in
    let v10: [[s1]] = [v6, v6, v6, v6] in
    let v15: s6 = f46(v5, v5) in
    let v9: [s1] = v7.p0 in
    let v11: s6 = f46(v7, v5) in
    let v1: s6 = f46(v5, v3) in
    let v20: [s1] = v10[3] in
    var v12: s6 = v11 in
    let v23: s6 = f31(v15, v15) in
    let v8: s6 = f31(v1, v1) in
    let v29: s6 = f31(v7, v23) in
    v12.p0 = v9 in
    v3.p1 = v20 in
    let v51: [s1] = v12.p1 in
    var v19: [s6] = v4 in
    let v78: s6 = f46(v29, v8) in
    v3.p1 = v51 in
    let v33: [s1] = v12.p0 in
    v12.p1 = v6 in
    v19[2] = v3 in
    let v59: [s1] = v10[1] in
    v12.p0 = v33 in
    v12.p1 = v20 in
    let v148: s6 = f31(v5, v12) in
    v3.p1 = v59 in
    v4[2] = v78 in
    v12.p1 = v51 in
    v4[0] = v148 in
    v19
  } in
  let noinline_f0: ([s6], Float) -> Float = (v0: [s6], v1: Float) -> Float {
    var v7: [s6] = v0 in
    let v8: s6 = v7[0] in
    let v14: [s1] = v8.p1 in
    let v18: s1 = v14[1] in
    let v16: [s0] = v18.p1 in
    let v30: s0 = v16[1] in
    let v23: [[Float]] = v30.p1 in
    let v24: [Float] = v23[2] in
    let v52: [s6] = f12(v0) in
    var v112: [s6] = v52 in
    v7 = v112 in
    let v171: Float = v24[0] in
    v171
  } in
  fun loop(i: Int, v0: [s6], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s6] = [s6([s1(s0([[0.0]], [[1.0], [2.0], [3.0]]), [s0([[4.0]], [[5.0], [6.0], [7.0]]), s0([[8.0]], [[9.0], [10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0], [15.0]])]), s1(s0([[16.0]], [[17.0], [18.0], [19.0]]), [s0([[20.0]], [[21.0], [22.0], [23.0]]), s0([[24.0]], [[25.0], [26.0], [27.0]]), s0([[28.0]], [[29.0], [30.0], [31.0]])])], [s1(s0([[32.0]], [[33.0], [34.0], [35.0]]), [s0([[36.0]], [[37.0], [38.0], [39.0]]), s0([[40.0]], [[41.0], [42.0], [43.0]]), s0([[44.0]], [[45.0], [46.0], [47.0]])]), s1(s0([[48.0]], [[49.0], [50.0], [51.0]]), [s0([[52.0]], [[53.0], [54.0], [55.0]]), s0([[56.0]], [[57.0], [58.0], [59.0]]), s0([[60.0]], [[61.0], [62.0], [63.0]])]), s1(s0([[64.0]], [[65.0], [66.0], [67.0]]), [s0([[68.0]], [[69.0], [70.0], [71.0]]), s0([[72.0]], [[73.0], [74.0], [75.0]]), s0([[76.0]], [[77.0], [78.0], [79.0]])])]), s6([s1(s0([[80.0]], [[81.0], [82.0], [83.0]]), [s0([[84.0]], [[85.0], [86.0], [87.0]]), s0([[88.0]], [[89.0], [90.0], [91.0]]), s0([[92.0]], [[93.0], [94.0], [95.0]])]), s1(s0([[96.0]], [[97.0], [98.0], [99.0]]), [s0([[100.0]], [[101.0], [102.0], [103.0]]), s0([[104.0]], [[105.0], [106.0], [107.0]]), s0([[108.0]], [[109.0], [110.0], [111.0]])])], [s1(s0([[112.0]], [[113.0], [114.0], [115.0]]), [s0([[116.0]], [[117.0], [118.0], [119.0]]), s0([[120.0]], [[121.0], [122.0], [123.0]]), s0([[124.0]], [[125.0], [126.0], [127.0]])]), s1(s0([[128.0]], [[129.0], [130.0], [131.0]]), [s0([[132.0]], [[133.0], [134.0], [135.0]]), s0([[136.0]], [[137.0], [138.0], [139.0]]), s0([[140.0]], [[141.0], [142.0], [143.0]])]), s1(s0([[144.0]], [[145.0], [146.0], [147.0]]), [s0([[148.0]], [[149.0], [150.0], [151.0]]), s0([[152.0]], [[153.0], [154.0], [155.0]]), s0([[156.0]], [[157.0], [158.0], [159.0]])])]), s6([s1(s0([[160.0]], [[161.0], [162.0], [163.0]]), [s0([[164.0]], [[165.0], [166.0], [167.0]]), s0([[168.0]], [[169.0], [170.0], [171.0]]), s0([[172.0]], [[173.0], [174.0], [175.0]])]), s1(s0([[176.0]], [[177.0], [178.0], [179.0]]), [s0([[180.0]], [[181.0], [182.0], [183.0]]), s0([[184.0]], [[185.0], [186.0], [187.0]]), s0([[188.0]], [[189.0], [190.0], [191.0]])])], [s1(s0([[192.0]], [[193.0], [194.0], [195.0]]), [s0([[196.0]], [[197.0], [198.0], [199.0]]), s0([[200.0]], [[201.0], [202.0], [203.0]]), s0([[204.0]], [[205.0], [206.0], [207.0]])]), s1(s0([[208.0]], [[209.0], [210.0], [211.0]]), [s0([[212.0]], [[213.0], [214.0], [215.0]]), s0([[216.0]], [[217.0], [218.0], [219.0]]), s0([[220.0]], [[221.0], [222.0], [223.0]])]), s1(s0([[224.0]], [[225.0], [226.0], [227.0]]), [s0([[228.0]], [[229.0], [230.0], [231.0]]), s0([[232.0]], [[233.0], [234.0], [235.0]]), s0([[236.0]], [[237.0], [238.0], [239.0]])])])] in
    let v1: Float = 240.0 in
    let initialResult: Float = 240.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()