  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [[s0]]
    var p2: s0
    var p3: [[s0]]
    var p4: [[s0]]
  }
  struct s2 {
    var p0: [Double]
    var p1: [s0]
  }
  struct s3 {
    var p0: [[s0]]
    var p1: [s2]
    var p2: s0
    var p3: s1
  }
  @inline(never)
  func f0(_ v0: [s3], _ v1: [s3], _ v2: Double) -> Double {
    var v5: Double = v2
    let v8: s3 = v1[0]
    let v6: [s2] = v8.p1
    let v3: s2 = v6[1]
    let v13: [s0] = v3.p1
    let v34: s0 = v13[2]
    let v25: [[Double]] = v34.p1
    let v22: [Double] = v25[0]
    let v32: Double = v22[0]
    let v71: Double = v2 / v5
    let v114: Double = v71 / v32
    let v197: Double = v32 + v114
    return v197
  }
  func benchmark() {
    let v0: [s3] = [s3(p0: [[s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0]])], [s0(p0: [[4.0], [5.0], [6.0]], p1: [[7.0]])]], p1: [s2(p0: [8.0], p1: [s0(p0: [[9.0], [10.0], [11.0]], p1: [[12.0]]), s0(p0: [[13.0], [14.0], [15.0]], p1: [[16.0]]), s0(p0: [[17.0], [18.0], [19.0]], p1: [[20.0]])]), s2(p0: [21.0], p1: [s0(p0: [[22.0], [23.0], [24.0]], p1: [[25.0]]), s0(p0: [[26.0], [27.0], [28.0]], p1: [[29.0]]), s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0]])])], p2: s0(p0: [[34.0], [35.0], [36.0]], p1: [[37.0]]), p3: s1(p0: s0(p0: [[38.0], [39.0], [40.0]], p1: [[41.0]]), p1: [[s0(p0: [[42.0], [43.0], [44.0]], p1: [[45.0]])], [s0(p0: [[46.0], [47.0], [48.0]], p1: [[49.0]])]], p2: s0(p0: [[50.0], [51.0], [52.0]], p1: [[53.0]]), p3: [[s0(p0: [[54.0], [55.0], [56.0]], p1: [[57.0]])], [s0(p0: [[58.0], [59.0], [60.0]], p1: [[61.0]])], [s0(p0: [[62.0], [63.0], [64.0]], p1: [[65.0]])]], p4: [[s0(p0: [[66.0], [67.0], [68.0]], p1: [[69.0]])], [s0(p0: [[70.0], [71.0], [72.0]], p1: [[73.0]])], [s0(p0: [[74.0], [75.0], [76.0]], p1: [[77.0]])]])), s3(p0: [[s0(p0: [[78.0], [79.0], [80.0]], p1: [[81.0]])], [s0(p0: [[82.0], [83.0], [84.0]], p1: [[85.0]])]], p1: [s2(p0: [86.0], p1: [s0(p0: [[87.0], [88.0], [89.0]], p1: [[90.0]]), s0(p0: [[91.0], [92.0], [93.0]], p1: [[94.0]]), s0(p0: [[95.0], [96.0], [97.0]], p1: [[98.0]])]), s2(p0: [99.0], p1: [s0(p0: [[100.0], [101.0], [102.0]], p1: [[103.0]]), s0(p0: [[104.0], [105.0], [106.0]], p1: [[107.0]]), s0(p0: [[108.0], [109.0], [110.0]], p1: [[111.0]])])], p2: s0(p0: [[112.0], [113.0], [114.0]], p1: [[115.0]]), p3: s1(p0: s0(p0: [[116.0], [117.0], [118.0]], p1: [[119.0]]), p1: [[s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0]])], [s0(p0: [[124.0], [125.0], [126.0]], p1: [[127.0]])]], p2: s0(p0: [[128.0], [129.0], [130.0]], p1: [[131.0]]), p3: [[s0(p0: [[132.0], [133.0], [134.0]], p1: [[135.0]])], [s0(p0: [[136.0], [137.0], [138.0]], p1: [[139.0]])], [s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0]])]], p4: [[s0(p0: [[144.0], [145.0], [146.0]], p1: [[147.0]])], [s0(p0: [[148.0], [149.0], [150.0]], p1: [[151.0]])], [s0(p0: [[152.0], [153.0], [154.0]], p1: [[155.0]])]]))]
    let v1: [s3] = [s3(p0: [[s0(p0: [[156.0], [157.0], [158.0]], p1: [[159.0]])], [s0(p0: [[160.0], [161.0], [162.0]], p1: [[163.0]])]], p1: [s2(p0: [164.0], p1: [s0(p0: [[165.0], [166.0], [167.0]], p1: [[168.0]]), s0(p0: [[169.0], [170.0], [171.0]], p1: [[172.0]]), s0(p0: [[173.0], [174.0], [175.0]], p1: [[176.0]])]), s2(p0: [177.0], p1: [s0(p0: [[178.0], [179.0], [180.0]], p1: [[181.0]]), s0(p0: [[182.0], [183.0], [184.0]], p1: [[185.0]]), s0(p0: [[186.0], [187.0], [188.0]], p1: [[189.0]])])], p2: s0(p0: [[190.0], [191.0], [192.0]], p1: [[193.0]]), p3: s1(p0: s0(p0: [[194.0], [195.0], [196.0]], p1: [[197.0]]), p1: [[s0(p0: [[198.0], [199.0], [200.0]], p1: [[201.0]])], [s0(p0: [[202.0], [203.0], [204.0]], p1: [[205.0]])]], p2: s0(p0: [[206.0], [207.0], [208.0]], p1: [[209.0]]), p3: [[s0(p0: [[210.0], [211.0], [212.0]], p1: [[213.0]])], [s0(p0: [[214.0], [215.0], [216.0]], p1: [[217.0]])], [s0(p0: [[218.0], [219.0], [220.0]], p1: [[221.0]])]], p4: [[s0(p0: [[222.0], [223.0], [224.0]], p1: [[225.0]])], [s0(p0: [[226.0], [227.0], [228.0]], p1: [[229.0]])], [s0(p0: [[230.0], [231.0], [232.0]], p1: [[233.0]])]]))]
    let v2: Double = 234.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 234.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
