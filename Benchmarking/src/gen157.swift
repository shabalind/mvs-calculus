  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: s0
    var p2: [s0]
  }
  struct s2 {
    var p0: [[s0]]
    var p1: s1
  }
  struct s4 {
    var p0: s1
    var p1: [[s2]]
  }
  struct s6 {
    var p0: [[s4]]
    var p1: s1
  }
  struct s8 {
    var p0: [s1]
    var p1: s4
  }
  struct s10 {
    var p0: [s0]
    var p1: [s6]
  }
  func f66(_ v0: s4) -> s4 {
    var v8: s4 = v0
    let v3: s1 = v8.p0
    var v7: s4 = v0
    v7.p0 = v3
    let v2: s1 = v8.p0
    var v1: s4 = v7
    var v13: s4 = v7
    v1.p0 = v3
    var v12: s4 = v1
    var v14: s4 = v7
    v7.p0 = v2
    let v40: s1 = v14.p0
    v12 = v13
    let v72: [[s2]] = v12.p1
    v12.p0 = v40
    var v42: [[s2]] = v72
    v14.p1 = v42
    return v12
  }
  func f44(_ v0: [Double]) -> [Double] {
    let v4: Double = v0[0]
    let v7: Double = v0[0]
    let v2: Double = v0[0]
    var v10: [Double] = v0
    var v3: Double = v7
    var v6: [Double] = v10
    let v15: Double = v6[0]
    let v1: Double = v0[0]
    v6[0] = v1
    var v13: [Double] = v6
    v10[0] = v2
    v6[0] = v3
    let v22: Double = v10[0]
    v13[0] = v2
    var v14: [Double] = v0
    var v30: Double = v3
    var v18: [Double] = v14
    v18[0] = v22
    let v21: [[Double]] = [v18, v0]
    v10[0] = v15
    var v25: [[Double]] = v21
    let v37: [Double] = v21[1]
    v10[0] = v30
    v6[0] = v4
    v10[0] = v4
    let v20: [Double] = v25[1]
    var v57: [Double] = v14
    v3 = v7
    var v41: Double = v3
    var v82: [[Double]] = v21
    var v34: [[Double]] = v82
    let v33: Double = v13[0]
    var v28: [Double] = v57
    var v48: [Double] = v28
    var v29: [[Double]] = v34
    var v135: [Double] = v18
    v34[0] = v135
    let v44: Double = v10[0]
    var v53: Double = v41
    v57[0] = v33
    let v156: Double = v48[0]
    var v62: [[Double]] = v29
    v30 = v53
    v10[0] = v41
    var v98: [[Double]] = v25
    v34[1] = v37
    let v91: Double = v20[0]
    var v66: Double = v15
    let v139: Double = v14[0]
    v98[1] = v14
    var v89: Double = v139
    v25 = v34
    v25 = v98
    var v138: Double = v66
    let v215: [Double] = v62[0]
    var v58: [Double] = v215
    var v114: Double = v138
    v48[0] = v44
    v18[0] = v89
    v18[0] = v114
    v48[0] = v91
    v6[0] = v156
    return v58
  }
  func f43(_ v0: s8, _ v1: Double) -> Double {
    var v7: s8 = v0
    let v5: [s1] = v7.p0
    let v4: s1 = v5[0]
    let v3: s4 = v7.p1
    let v8: s4 = f66(v3)
    let v12: s0 = v4.p1
    let v13: s4 = f66(v8)
    let v22: s4 = f66(v13)
    let v20: [[Double]] = v12.p1
    let v33: [[[Double]]] = [v20, v20, v20, v20]
    let v29: [Double] = v20[1]
    v7.p0 = v5
    let v49: [[Double]] = v33[2]
    let v50: s4 = f66(v22)
    let v30: [Double] = f44(v29)
    v7.p1 = v50
    var v99: [[Double]] = v49
    v99 = v49
    v99[0] = v30
    let v72: [Double] = v99[0]
    let v191: Double = v72[0]
    return v191
  }
  func f22(_ v0: s8) -> s8 {
    var v6: s8 = v0
    var v4: s8 = v0
    var v7: s8 = v4
    let v5: [s1] = v0.p0
    var v9: [s1] = v5
    var v1: s8 = v4
    let v14: [s1] = v6.p0
    var v2: [s1] = v5
    v6.p0 = v9
    var v11: [s1] = v2
    let v13: s1 = v11[0]
    v11[0] = v13
    v4.p0 = v5
    let v3: s1 = v5[0]
    let v8: [s1] = v4.p0
    var v12: s8 = v1
    v2[0] = v3
    v11[0] = v3
    var v20: [s1] = v8
    var v15: s1 = v13
    v4.p0 = v14
    let v43: [s1] = v7.p0
    v1.p0 = v20
    v9[0] = v13
    var v33: s1 = v15
    v4.p0 = v43
    let v26: [s0] = v15.p0
    v11[0] = v33
    v2[0] = v3
    v9[0] = v3
    v33.p0 = v26
    v6.p0 = v2
    v6.p0 = v11
    return v12
  }
  func f20(_ v0: s1, _ v1: s4) -> s1 {
    let v8: s4 = f66(v1)
    let v2: s4 = f66(v8)
    var v39: s4 = v2
    let v37: s1 = v39.p0
    return v37
  }
  func f14(_ v0: s2, _ v1: s4) -> s4 {
    let v4: [[s2]] = v1.p1
    let v7: s4 = f66(v1)
    let v8: [s2] = v4[0]
    let v6: s1 = v1.p0
    var v13: s4 = v1
    let v14: [[s2]] = v1.p1
    let v10: s4 = f66(v1)
    v13.p0 = v6
    v13.p0 = v6
    var v30: [[s2]] = v14
    v13.p1 = v14
    let v15: s2 = v8[0]
    var v20: [s2] = v8
    v13.p1 = v4
    v30[0] = v20
    v30[0] = v8
    v13 = v7
    let v72: s4 = f66(v10)
    v30[0] = v8
    var v44: s4 = v13
    v13.p0 = v6
    v30[1] = v20
    v30[0] = v8
    let v113: s1 = v15.p1
    v13.p1 = v14
    v13.p1 = v30
    let v115: s1 = f20(v113, v72)
    v13.p0 = v115
    v44 = v10
    let v145: s4 = f66(v44)
    return v145
  }
  func f12(_ v0: s8, _ v1: s8) -> s8 {
    let v7: [s1] = v0.p0
    let v3: s1 = v7[0]
    var v13: [s1] = v7
    let v8: s1 = v13[0]
    v13[0] = v3
    let v6: s4 = v0.p1
    v13 = v7
    let v10: s8 = s8(p0: v13, p1: v6)
    v13[0] = v8
    v13[0] = v8
    let v67: s8 = f22(v10)
    let v29: s8 = f22(v67)
    var v30: s4 = v6
    let v38: s4 = f66(v30)
    let v56: s4 = v29.p1
    let v59: [s1] = v29.p0
    let v76: s8 = f22(v10)
    let v62: [s4] = [v56]
    var v145: [s4] = v62
    let v110: s4 = v145[0]
    let v215: [[s2]] = v38.p1
    let v104: s8 = s8(p0: v59, p1: v30)
    let v90: [s2] = v215[1]
    v30 = v110
    let v83: s4 = v76.p1
    v13[0] = v3
    let v132: s2 = v90[0]
    let v108: s4 = f14(v132, v83)
    v145[0] = v108
    return v104
  }
  @inline(never)
  func f0(_ v0: [[s6]], _ v1: s10, _ v2: [s1], _ v3: [s8], _ v4: Double) -> Double {
    let v9: s8 = v3[1]
    let v8: s4 = v9.p1
    let v15: s8 = f22(v9)
    let v13: s8 = f22(v15)
    let v10: s8 = f22(v13)
    let v12: s4 = v15.p1
    let v20: s1 = v8.p0
    let v26: s1 = f20(v20, v12)
    let v61: s1 = f20(v26, v12)
    let v46: Double = v4 + v4
    let v32: Double = v46 - v4
    let v92: s0 = v61.p1
    let v111: s8 = f12(v15, v10)
    let v116: [[Double]] = v92.p0
    let v63: [Double] = v116[0]
    let v278: Double = v63[0]
    let v219: Double = f43(v111, v32)
    let v218: Double = v219 * v278
    return v218
  }
  func benchmark() {
    let v0: [[s6]] = [[s6(p0: [[s4(p0: s1(p0: [s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0]])], p1: s0(p0: [[5.0], [6.0], [7.0]], p1: [[8.0], [9.0]]), p2: [s0(p0: [[10.0], [11.0], [12.0]], p1: [[13.0], [14.0]])]), p1: [[s2(p0: [[s0(p0: [[15.0], [16.0], [17.0]], p1: [[18.0], [19.0]])]], p1: s1(p0: [s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0], [24.0]])], p1: s0(p0: [[25.0], [26.0], [27.0]], p1: [[28.0], [29.0]]), p2: [s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0]])]))], [s2(p0: [[s0(p0: [[35.0], [36.0], [37.0]], p1: [[38.0], [39.0]])]], p1: s1(p0: [s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0], [44.0]])], p1: s0(p0: [[45.0], [46.0], [47.0]], p1: [[48.0], [49.0]]), p2: [s0(p0: [[50.0], [51.0], [52.0]], p1: [[53.0], [54.0]])]))]])]], p1: s1(p0: [s0(p0: [[55.0], [56.0], [57.0]], p1: [[58.0], [59.0]])], p1: s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0], [64.0]]), p2: [s0(p0: [[65.0], [66.0], [67.0]], p1: [[68.0], [69.0]])]))], [s6(p0: [[s4(p0: s1(p0: [s0(p0: [[70.0], [71.0], [72.0]], p1: [[73.0], [74.0]])], p1: s0(p0: [[75.0], [76.0], [77.0]], p1: [[78.0], [79.0]]), p2: [s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0], [84.0]])]), p1: [[s2(p0: [[s0(p0: [[85.0], [86.0], [87.0]], p1: [[88.0], [89.0]])]], p1: s1(p0: [s0(p0: [[90.0], [91.0], [92.0]], p1: [[93.0], [94.0]])], p1: s0(p0: [[95.0], [96.0], [97.0]], p1: [[98.0], [99.0]]), p2: [s0(p0: [[100.0], [101.0], [102.0]], p1: [[103.0], [104.0]])]))], [s2(p0: [[s0(p0: [[105.0], [106.0], [107.0]], p1: [[108.0], [109.0]])]], p1: s1(p0: [s0(p0: [[110.0], [111.0], [112.0]], p1: [[113.0], [114.0]])], p1: s0(p0: [[115.0], [116.0], [117.0]], p1: [[118.0], [119.0]]), p2: [s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0], [124.0]])]))]])]], p1: s1(p0: [s0(p0: [[125.0], [126.0], [127.0]], p1: [[128.0], [129.0]])], p1: s0(p0: [[130.0], [131.0], [132.0]], p1: [[133.0], [134.0]]), p2: [s0(p0: [[135.0], [136.0], [137.0]], p1: [[138.0], [139.0]])]))]]
    let v1: s10 = s10(p0: [s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0], [144.0]]), s0(p0: [[145.0], [146.0], [147.0]], p1: [[148.0], [149.0]]), s0(p0: [[150.0], [151.0], [152.0]], p1: [[153.0], [154.0]])], p1: [s6(p0: [[s4(p0: s1(p0: [s0(p0: [[155.0], [156.0], [157.0]], p1: [[158.0], [159.0]])], p1: s0(p0: [[160.0], [161.0], [162.0]], p1: [[163.0], [164.0]]), p2: [s0(p0: [[165.0], [166.0], [167.0]], p1: [[168.0], [169.0]])]), p1: [[s2(p0: [[s0(p0: [[170.0], [171.0], [172.0]], p1: [[173.0], [174.0]])]], p1: s1(p0: [s0(p0: [[175.0], [176.0], [177.0]], p1: [[178.0], [179.0]])], p1: s0(p0: [[180.0], [181.0], [182.0]], p1: [[183.0], [184.0]]), p2: [s0(p0: [[185.0], [186.0], [187.0]], p1: [[188.0], [189.0]])]))], [s2(p0: [[s0(p0: [[190.0], [191.0], [192.0]], p1: [[193.0], [194.0]])]], p1: s1(p0: [s0(p0: [[195.0], [196.0], [197.0]], p1: [[198.0], [199.0]])], p1: s0(p0: [[200.0], [201.0], [202.0]], p1: [[203.0], [204.0]]), p2: [s0(p0: [[205.0], [206.0], [207.0]], p1: [[208.0], [209.0]])]))]])]], p1: s1(p0: [s0(p0: [[210.0], [211.0], [212.0]], p1: [[213.0], [214.0]])], p1: s0(p0: [[215.0], [216.0], [217.0]], p1: [[218.0], [219.0]]), p2: [s0(p0: [[220.0], [221.0], [222.0]], p1: [[223.0], [224.0]])]))])
    let v2: [s1] = [s1(p0: [s0(p0: [[225.0], [226.0], [227.0]], p1: [[228.0], [229.0]])], p1: s0(p0: [[230.0], [231.0], [232.0]], p1: [[233.0], [234.0]]), p2: [s0(p0: [[235.0], [236.0], [237.0]], p1: [[238.0], [239.0]])]), s1(p0: [s0(p0: [[240.0], [241.0], [242.0]], p1: [[243.0], [244.0]])], p1: s0(p0: [[245.0], [246.0], [247.0]], p1: [[248.0], [249.0]]), p2: [s0(p0: [[250.0], [251.0], [252.0]], p1: [[253.0], [254.0]])]), s1(p0: [s0(p0: [[255.0], [256.0], [257.0]], p1: [[258.0], [259.0]])], p1: s0(p0: [[260.0], [261.0], [262.0]], p1: [[263.0], [264.0]]), p2: [s0(p0: [[265.0], [266.0], [267.0]], p1: [[268.0], [269.0]])])]
    let v3: [s8] = [s8(p0: [s1(p0: [s0(p0: [[270.0], [271.0], [272.0]], p1: [[273.0], [274.0]])], p1: s0(p0: [[275.0], [276.0], [277.0]], p1: [[278.0], [279.0]]), p2: [s0(p0: [[280.0], [281.0], [282.0]], p1: [[283.0], [284.0]])])], p1: s4(p0: s1(p0: [s0(p0: [[285.0], [286.0], [287.0]], p1: [[288.0], [289.0]])], p1: s0(p0: [[290.0], [291.0], [292.0]], p1: [[293.0], [294.0]]), p2: [s0(p0: [[295.0], [296.0], [297.0]], p1: [[298.0], [299.0]])]), p1: [[s2(p0: [[s0(p0: [[300.0], [301.0], [302.0]], p1: [[303.0], [304.0]])]], p1: s1(p0: [s0(p0: [[305.0], [306.0], [307.0]], p1: [[308.0], [309.0]])], p1: s0(p0: [[310.0], [311.0], [312.0]], p1: [[313.0], [314.0]]), p2: [s0(p0: [[315.0], [316.0], [317.0]], p1: [[318.0], [319.0]])]))], [s2(p0: [[s0(p0: [[320.0], [321.0], [322.0]], p1: [[323.0], [324.0]])]], p1: s1(p0: [s0(p0: [[325.0], [326.0], [327.0]], p1: [[328.0], [329.0]])], p1: s0(p0: [[330.0], [331.0], [332.0]], p1: [[333.0], [334.0]]), p2: [s0(p0: [[335.0], [336.0], [337.0]], p1: [[338.0], [339.0]])]))]])), s8(p0: [s1(p0: [s0(p0: [[340.0], [341.0], [342.0]], p1: [[343.0], [344.0]])], p1: s0(p0: [[345.0], [346.0], [347.0]], p1: [[348.0], [349.0]]), p2: [s0(p0: [[350.0], [351.0], [352.0]], p1: [[353.0], [354.0]])])], p1: s4(p0: s1(p0: [s0(p0: [[355.0], [356.0], [357.0]], p1: [[358.0], [359.0]])], p1: s0(p0: [[360.0], [361.0], [362.0]], p1: [[363.0], [364.0]]), p2: [s0(p0: [[365.0], [366.0], [367.0]], p1: [[368.0], [369.0]])]), p1: [[s2(p0: [[s0(p0: [[370.0], [371.0], [372.0]], p1: [[373.0], [374.0]])]], p1: s1(p0: [s0(p0: [[375.0], [376.0], [377.0]], p1: [[378.0], [379.0]])], p1: s0(p0: [[380.0], [381.0], [382.0]], p1: [[383.0], [384.0]]), p2: [s0(p0: [[385.0], [386.0], [387.0]], p1: [[388.0], [389.0]])]))], [s2(p0: [[s0(p0: [[390.0], [391.0], [392.0]], p1: [[393.0], [394.0]])]], p1: s1(p0: [s0(p0: [[395.0], [396.0], [397.0]], p1: [[398.0], [399.0]])], p1: s0(p0: [[400.0], [401.0], [402.0]], p1: [[403.0], [404.0]]), p2: [s0(p0: [[405.0], [406.0], [407.0]], p1: [[408.0], [409.0]])]))]]))]
    let v4: Double = 410.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 410.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
