  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: Double
    var p1: s0
  }
  struct s2 {
    var p0: s1
    var p1: [[s1]]
  }
  struct s3 {
    var p0: s2
    var p1: [s0]
  }
  struct s4 {
    var p0: [s3]
    var p1: [s0]
  }
  struct s5 {
    var p0: [s4]
    var p1: [s3]
  }
  struct s6 {
    var p0: [[s5]]
    var p1: s2
  }
  @inline(never)
  func f0(_ v0: s6, _ v1: Double) -> Double {
    var v7: Double = v1
    var v9: s6 = v0
    let v10: s2 = v9.p1
    let v11: [[s1]] = v10.p1
    let v16: [s1] = v11[1]
    let v21: [[s5]] = v9.p0
    v9.p0 = v21
    let v13: s1 = v10.p0
    var v20: [[s5]] = v21
    let v33: [[s5]] = v0.p0
    let v22: [s1] = v11[1]
    let v19: s1 = v16[0]
    v20 = v21
    var v29: [s1] = v22
    v9.p0 = v33
    var v32: Double = v7
    let v24: s1 = v16[0]
    var v28: s1 = v19
    var v66: [[s5]] = v33
    let v40: Double = v24.p0
    let v44: [s5] = v20[0]
    let v34: s0 = v24.p1
    let v91: s1 = v29[0]
    let v81: [[s5]] = [v44, v44, v44, v44, v44, v44]
    var v115: s1 = v13
    v20 = v33
    var v43: s1 = v91
    let v37: [[Double]] = v34.p1
    var v61: Double = v40
    let v75: s0 = v43.p1
    var v169: [[s1]] = v11
    var v76: s1 = v13
    let v247: [Double] = v37[1]
    var v125: [Double] = v247
    let v92: [s5] = v81[4]
    v115.p0 = v61
    let v74: Double = v125[0]
    let v96: s1 = s1(p0: v74, p1: v75)
    v28.p0 = v32
    let v106: s2 = s2(p0: v115, p1: v169)
    let v99: Double = v96.p0
    let v114: s0 = v28.p1
    v9.p1 = v106
    v61 = v99
    v43.p1 = v75
    v76.p1 = v75
    v115.p1 = v114
    let v98: Double = v76.p0
    v9.p0 = v66
    v66[0] = v92
    var v124: [s5] = v92
    v66[0] = v124
    return v98
  }
  func benchmark() {
    let v0: s6 = s6(p0: [[s5(p0: [s4(p0: [s3(p0: s2(p0: s1(p0: 0.0, p1: s0(p0: [[1.0], [2.0], [3.0]], p1: [[4.0], [5.0]])), p1: [[s1(p0: 6.0, p1: s0(p0: [[7.0], [8.0], [9.0]], p1: [[10.0], [11.0]]))], [s1(p0: 12.0, p1: s0(p0: [[13.0], [14.0], [15.0]], p1: [[16.0], [17.0]]))]]), p1: [s0(p0: [[18.0], [19.0], [20.0]], p1: [[21.0], [22.0]])]), s3(p0: s2(p0: s1(p0: 23.0, p1: s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0], [28.0]])), p1: [[s1(p0: 29.0, p1: s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0]]))], [s1(p0: 35.0, p1: s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0], [40.0]]))]]), p1: [s0(p0: [[41.0], [42.0], [43.0]], p1: [[44.0], [45.0]])]), s3(p0: s2(p0: s1(p0: 46.0, p1: s0(p0: [[47.0], [48.0], [49.0]], p1: [[50.0], [51.0]])), p1: [[s1(p0: 52.0, p1: s0(p0: [[53.0], [54.0], [55.0]], p1: [[56.0], [57.0]]))], [s1(p0: 58.0, p1: s0(p0: [[59.0], [60.0], [61.0]], p1: [[62.0], [63.0]]))]]), p1: [s0(p0: [[64.0], [65.0], [66.0]], p1: [[67.0], [68.0]])])], p1: [s0(p0: [[69.0], [70.0], [71.0]], p1: [[72.0], [73.0]]), s0(p0: [[74.0], [75.0], [76.0]], p1: [[77.0], [78.0]])]), s4(p0: [s3(p0: s2(p0: s1(p0: 79.0, p1: s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0], [84.0]])), p1: [[s1(p0: 85.0, p1: s0(p0: [[86.0], [87.0], [88.0]], p1: [[89.0], [90.0]]))], [s1(p0: 91.0, p1: s0(p0: [[92.0], [93.0], [94.0]], p1: [[95.0], [96.0]]))]]), p1: [s0(p0: [[97.0], [98.0], [99.0]], p1: [[100.0], [101.0]])]), s3(p0: s2(p0: s1(p0: 102.0, p1: s0(p0: [[103.0], [104.0], [105.0]], p1: [[106.0], [107.0]])), p1: [[s1(p0: 108.0, p1: s0(p0: [[109.0], [110.0], [111.0]], p1: [[112.0], [113.0]]))], [s1(p0: 114.0, p1: s0(p0: [[115.0], [116.0], [117.0]], p1: [[118.0], [119.0]]))]]), p1: [s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0], [124.0]])]), s3(p0: s2(p0: s1(p0: 125.0, p1: s0(p0: [[126.0], [127.0], [128.0]], p1: [[129.0], [130.0]])), p1: [[s1(p0: 131.0, p1: s0(p0: [[132.0], [133.0], [134.0]], p1: [[135.0], [136.0]]))], [s1(p0: 137.0, p1: s0(p0: [[138.0], [139.0], [140.0]], p1: [[141.0], [142.0]]))]]), p1: [s0(p0: [[143.0], [144.0], [145.0]], p1: [[146.0], [147.0]])])], p1: [s0(p0: [[148.0], [149.0], [150.0]], p1: [[151.0], [152.0]]), s0(p0: [[153.0], [154.0], [155.0]], p1: [[156.0], [157.0]])]), s4(p0: [s3(p0: s2(p0: s1(p0: 158.0, p1: s0(p0: [[159.0], [160.0], [161.0]], p1: [[162.0], [163.0]])), p1: [[s1(p0: 164.0, p1: s0(p0: [[165.0], [166.0], [167.0]], p1: [[168.0], [169.0]]))], [s1(p0: 170.0, p1: s0(p0: [[171.0], [172.0], [173.0]], p1: [[174.0], [175.0]]))]]), p1: [s0(p0: [[176.0], [177.0], [178.0]], p1: [[179.0], [180.0]])]), s3(p0: s2(p0: s1(p0: 181.0, p1: s0(p0: [[182.0], [183.0], [184.0]], p1: [[185.0], [186.0]])), p1: [[s1(p0: 187.0, p1: s0(p0: [[188.0], [189.0], [190.0]], p1: [[191.0], [192.0]]))], [s1(p0: 193.0, p1: s0(p0: [[194.0], [195.0], [196.0]], p1: [[197.0], [198.0]]))]]), p1: [s0(p0: [[199.0], [200.0], [201.0]], p1: [[202.0], [203.0]])]), s3(p0: s2(p0: s1(p0: 204.0, p1: s0(p0: [[205.0], [206.0], [207.0]], p1: [[208.0], [209.0]])), p1: [[s1(p0: 210.0, p1: s0(p0: [[211.0], [212.0], [213.0]], p1: [[214.0], [215.0]]))], [s1(p0: 216.0, p1: s0(p0: [[217.0], [218.0], [219.0]], p1: [[220.0], [221.0]]))]]), p1: [s0(p0: [[222.0], [223.0], [224.0]], p1: [[225.0], [226.0]])])], p1: [s0(p0: [[227.0], [228.0], [229.0]], p1: [[230.0], [231.0]]), s0(p0: [[232.0], [233.0], [234.0]], p1: [[235.0], [236.0]])])], p1: [s3(p0: s2(p0: s1(p0: 237.0, p1: s0(p0: [[238.0], [239.0], [240.0]], p1: [[241.0], [242.0]])), p1: [[s1(p0: 243.0, p1: s0(p0: [[244.0], [245.0], [246.0]], p1: [[247.0], [248.0]]))], [s1(p0: 249.0, p1: s0(p0: [[250.0], [251.0], [252.0]], p1: [[253.0], [254.0]]))]]), p1: [s0(p0: [[255.0], [256.0], [257.0]], p1: [[258.0], [259.0]])]), s3(p0: s2(p0: s1(p0: 260.0, p1: s0(p0: [[261.0], [262.0], [263.0]], p1: [[264.0], [265.0]])), p1: [[s1(p0: 266.0, p1: s0(p0: [[267.0], [268.0], [269.0]], p1: [[270.0], [271.0]]))], [s1(p0: 272.0, p1: s0(p0: [[273.0], [274.0], [275.0]], p1: [[276.0], [277.0]]))]]), p1: [s0(p0: [[278.0], [279.0], [280.0]], p1: [[281.0], [282.0]])]), s3(p0: s2(p0: s1(p0: 283.0, p1: s0(p0: [[284.0], [285.0], [286.0]], p1: [[287.0], [288.0]])), p1: [[s1(p0: 289.0, p1: s0(p0: [[290.0], [291.0], [292.0]], p1: [[293.0], [294.0]]))], [s1(p0: 295.0, p1: s0(p0: [[296.0], [297.0], [298.0]], p1: [[299.0], [300.0]]))]]), p1: [s0(p0: [[301.0], [302.0], [303.0]], p1: [[304.0], [305.0]])])])]], p1: s2(p0: s1(p0: 306.0, p1: s0(p0: [[307.0], [308.0], [309.0]], p1: [[310.0], [311.0]])), p1: [[s1(p0: 312.0, p1: s0(p0: [[313.0], [314.0], [315.0]], p1: [[316.0], [317.0]]))], [s1(p0: 318.0, p1: s0(p0: [[319.0], [320.0], [321.0]], p1: [[322.0], [323.0]]))]]))
    let v1: Double = 324.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 324.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
