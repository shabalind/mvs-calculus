  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
    var p2: [s0]
    var p3: [s0]
    var p4: [[s0]]
    var p5: s0
  } in
  struct s2 {
    var p0: Float
    var p1: s0
  } in
  struct s3 {
    var p0: [[s2]]
    var p1: s1
  } in
  struct s4 {
    var p0: [[s2]]
    var p1: [[s1]]
  } in
  struct s6 {
    var p0: s0
    var p1: s2
  } in
  struct s8 {
    var p0: [s6]
    var p1: s3
  } in
  struct s10 {
    var p0: [s8]
    var p1: s4
  } in
  let f33: (s2) -> s2 = (v0: s2) -> s2 {
    let v4: Float = v0.p0 in
    let v2: Float = v0.p0 in
    let v1: [Float] = [v2, v4, v2, v2, v4] in
    var v19: [Float] = v1 in
    let v5: s0 = v0.p1 in
    var v13: Float = v2 in
    var v8: Float = v4 in
    var v10: s0 = v5 in
    let v16: Float = v0.p0 in
    let v11: Float = v19[0] in
    v19[1] = v16 in
    let v24: s0 = v0.p1 in
    v19[1] = v8 in
    let v14: [[Float]] = v24.p1 in
    let v26: [[Float]] = v5.p1 in
    var v20: s2 = v0 in
    v10.p1 = v26 in
    var v18: s2 = v0 in
    let v36: Float = v20.p0 in
    let v37: s6 = s6(v5, v18) in
    let v50: s2 = s2(v36, v10) in
    let v31: s0 = v50.p1 in
    let v32: Float = v8 * v11 in
    let v30: Float = v50.p0 in
    let v25: [[Float]] = v10.p1 in
    v18.p0 = v32 in
    v19[0] = v32 in
    let v29: s0 = v37.p0 in
    let v28: [Float] = v25[0] in
    let v66: s2 = v37.p1 in
    let v54: Float = v36 + v30 in
    v19[0] = v36 in
    v10.p1 = v14 in
    v19[0] = v54 in
    let v40: [[Float]] = v5.p0 in
    v10.p1 = v25 in
    let v77: s0 = v66.p1 in
    let v186: Float = v28[0] in
    let v70: [[Float]] = v29.p1 in
    var v72: s0 = v31 in
    let v125: s2 = s2(v186, v72) in
    v8 = v30 in
    let v86: [[Float]] = v77.p1 in
    v72.p1 = v25 in
    v10.p0 = v40 in
    v20.p0 = v13 in
    v72.p1 = v25 in
    var v74: [[Float]] = v70 in
    v72.p1 = v86 in
    v10.p1 = v74 in
    v10.p1 = v86 in
    v125
  } in
  let f23: (Float, [[Float]], Float, s3) -> Float = (v0: Float, v1: [[Float]], v2: Float, v3: s3) -> Float {
    var v8: [[Float]] = v1 in
    var v6: [[Float]] = v8 in
    v6 = v1 in
    let v9: [Float] = v6[0] in
    let v18: Float = v9[0] in
    v6[0] = v9 in
    let v10: [Float] = v1[0] in
    let v25: Float = v9[0] in
    let v46: Float = v18 / v25 in
    v8[0] = v10 in
    let v31: Float = v46 * v25 in
    let v42: Float = v31 - v0 in
    v42
  } in
  let noinline_f0: ([s8], [s3], [[s3]], s10, Float) -> Float = (v0: [s8], v1: [s3], v2: [[s3]], v3: s10, v4: Float) -> Float {
    var v5: Float = v4 in
    let v7: s4 = v3.p1 in
    var v9: s4 = v7 in
    let v14: [[s2]] = v9.p0 in
    let v16: s4 = v3.p1 in
    v9.p0 = v14 in
    v9.p0 = v14 in
    let v21: [[s1]] = v16.p1 in
    v5 = v4 in
    v9 = v16 in
    let v50: [s2] = v14[2] in
    let v59: s2 = v50[0] in
    let v23: s0 = v59.p1 in
    v9 = v7 in
    let v118: s2 = f33(v59) in
    let v74: [s3] = v2[0] in
    v9.p0 = v14 in
    v9.p0 = v14 in
    let v173: s3 = v74[0] in
    let v142: [[Float]] = v23.p0 in
    let v167: Float = v118.p0 in
    let v168: Float = f23(v5, v142, v167, v173) in
    v9.p1 = v21 in
    let v123: Float = v168 + v5 in
    var v253: Float = v123 in
    v253
  } in
  fun loop(i: Int, v0: [s8], v1: [s3], v2: [[s3]], v3: s10, v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s8] = [s8([s6(s0([[0.0]], [[1.0], [2.0], [3.0]]), s2(4.0, s0([[5.0]], [[6.0], [7.0], [8.0]])))], s3([[s2(9.0, s0([[10.0]], [[11.0], [12.0], [13.0]]))], [s2(14.0, s0([[15.0]], [[16.0], [17.0], [18.0]]))], [s2(19.0, s0([[20.0]], [[21.0], [22.0], [23.0]]))]], s1(s0([[24.0]], [[25.0], [26.0], [27.0]]), s0([[28.0]], [[29.0], [30.0], [31.0]]), [s0([[32.0]], [[33.0], [34.0], [35.0]]), s0([[36.0]], [[37.0], [38.0], [39.0]]), s0([[40.0]], [[41.0], [42.0], [43.0]])], [s0([[44.0]], [[45.0], [46.0], [47.0]])], [[s0([[48.0]], [[49.0], [50.0], [51.0]])], [s0([[52.0]], [[53.0], [54.0], [55.0]])], [s0([[56.0]], [[57.0], [58.0], [59.0]])]], s0([[60.0]], [[61.0], [62.0], [63.0]])))), s8([s6(s0([[64.0]], [[65.0], [66.0], [67.0]]), s2(68.0, s0([[69.0]], [[70.0], [71.0], [72.0]])))], s3([[s2(73.0, s0([[74.0]], [[75.0], [76.0], [77.0]]))], [s2(78.0, s0([[79.0]], [[80.0], [81.0], [82.0]]))], [s2(83.0, s0([[84.0]], [[85.0], [86.0], [87.0]]))]], s1(s0([[88.0]], [[89.0], [90.0], [91.0]]), s0([[92.0]], [[93.0], [94.0], [95.0]]), [s0([[96.0]], [[97.0], [98.0], [99.0]]), s0([[100.0]], [[101.0], [102.0], [103.0]]), s0([[104.0]], [[105.0], [106.0], [107.0]])], [s0([[108.0]], [[109.0], [110.0], [111.0]])], [[s0([[112.0]], [[113.0], [114.0], [115.0]])], [s0([[116.0]], [[117.0], [118.0], [119.0]])], [s0([[120.0]], [[121.0], [122.0], [123.0]])]], s0([[124.0]], [[125.0], [126.0], [127.0]])))), s8([s6(s0([[128.0]], [[129.0], [130.0], [131.0]]), s2(132.0, s0([[133.0]], [[134.0], [135.0], [136.0]])))], s3([[s2(137.0, s0([[138.0]], [[139.0], [140.0], [141.0]]))], [s2(142.0, s0([[143.0]], [[144.0], [145.0], [146.0]]))], [s2(147.0, s0([[148.0]], [[149.0], [150.0], [151.0]]))]], s1(s0([[152.0]], [[153.0], [154.0], [155.0]]), s0([[156.0]], [[157.0], [158.0], [159.0]]), [s0([[160.0]], [[161.0], [162.0], [163.0]]), s0([[164.0]], [[165.0], [166.0], [167.0]]), s0([[168.0]], [[169.0], [170.0], [171.0]])], [s0([[172.0]], [[173.0], [174.0], [175.0]])], [[s0([[176.0]], [[177.0], [178.0], [179.0]])], [s0([[180.0]], [[181.0], [182.0], [183.0]])], [s0([[184.0]], [[185.0], [186.0], [187.0]])]], s0([[188.0]], [[189.0], [190.0], [191.0]]))))] in
    let v1: [s3] = [s3([[s2(192.0, s0([[193.0]], [[194.0], [195.0], [196.0]]))], [s2(197.0, s0([[198.0]], [[199.0], [200.0], [201.0]]))], [s2(202.0, s0([[203.0]], [[204.0], [205.0], [206.0]]))]], s1(s0([[207.0]], [[208.0], [209.0], [210.0]]), s0([[211.0]], [[212.0], [213.0], [214.0]]), [s0([[215.0]], [[216.0], [217.0], [218.0]]), s0([[219.0]], [[220.0], [221.0], [222.0]]), s0([[223.0]], [[224.0], [225.0], [226.0]])], [s0([[227.0]], [[228.0], [229.0], [230.0]])], [[s0([[231.0]], [[232.0], [233.0], [234.0]])], [s0([[235.0]], [[236.0], [237.0], [238.0]])], [s0([[239.0]], [[240.0], [241.0], [242.0]])]], s0([[243.0]], [[244.0], [245.0], [246.0]]))), s3([[s2(247.0, s0([[248.0]], [[249.0], [250.0], [251.0]]))], [s2(252.0, s0([[253.0]], [[254.0], [255.0], [256.0]]))], [s2(257.0, s0([[258.0]], [[259.0], [260.0], [261.0]]))]], s1(s0([[262.0]], [[263.0], [264.0], [265.0]]), s0([[266.0]], [[267.0], [268.0], [269.0]]), [s0([[270.0]], [[271.0], [272.0], [273.0]]), s0([[274.0]], [[275.0], [276.0], [277.0]]), s0([[278.0]], [[279.0], [280.0], [281.0]])], [s0([[282.0]], [[283.0], [284.0], [285.0]])], [[s0([[286.0]], [[287.0], [288.0], [289.0]])], [s0([[290.0]], [[291.0], [292.0], [293.0]])], [s0([[294.0]], [[295.0], [296.0], [297.0]])]], s0([[298.0]], [[299.0], [300.0], [301.0]]))), s3([[s2(302.0, s0([[303.0]], [[304.0], [305.0], [306.0]]))], [s2(307.0, s0([[308.0]], [[309.0], [310.0], [311.0]]))], [s2(312.0, s0([[313.0]], [[314.0], [315.0], [316.0]]))]], s1(s0([[317.0]], [[318.0], [319.0], [320.0]]), s0([[321.0]], [[322.0], [323.0], [324.0]]), [s0([[325.0]], [[326.0], [327.0], [328.0]]), s0([[329.0]], [[330.0], [331.0], [332.0]]), s0([[333.0]], [[334.0], [335.0], [336.0]])], [s0([[337.0]], [[338.0], [339.0], [340.0]])], [[s0([[341.0]], [[342.0], [343.0], [344.0]])], [s0([[345.0]], [[346.0], [347.0], [348.0]])], [s0([[349.0]], [[350.0], [351.0], [352.0]])]], s0([[353.0]], [[354.0], [355.0], [356.0]])))] in
    let v2: [[s3]] = [[s3([[s2(357.0, s0([[358.0]], [[359.0], [360.0], [361.0]]))], [s2(362.0, s0([[363.0]], [[364.0], [365.0], [366.0]]))], [s2(367.0, s0([[368.0]], [[369.0], [370.0], [371.0]]))]], s1(s0([[372.0]], [[373.0], [374.0], [375.0]]), s0([[376.0]], [[377.0], [378.0], [379.0]]), [s0([[380.0]], [[381.0], [382.0], [383.0]]), s0([[384.0]], [[385.0], [386.0], [387.0]]), s0([[388.0]], [[389.0], [390.0], [391.0]])], [s0([[392.0]], [[393.0], [394.0], [395.0]])], [[s0([[396.0]], [[397.0], [398.0], [399.0]])], [s0([[400.0]], [[401.0], [402.0], [403.0]])], [s0([[404.0]], [[405.0], [406.0], [407.0]])]], s0([[408.0]], [[409.0], [410.0], [411.0]])))], [s3([[s2(412.0, s0([[413.0]], [[414.0], [415.0], [416.0]]))], [s2(417.0, s0([[418.0]], [[419.0], [420.0], [421.0]]))], [s2(422.0, s0([[423.0]], [[424.0], [425.0], [426.0]]))]], s1(s0([[427.0]], [[428.0], [429.0], [430.0]]), s0([[431.0]], [[432.0], [433.0], [434.0]]), [s0([[435.0]], [[436.0], [437.0], [438.0]]), s0([[439.0]], [[440.0], [441.0], [442.0]]), s0([[443.0]], [[444.0], [445.0], [446.0]])], [s0([[447.0]], [[448.0], [449.0], [450.0]])], [[s0([[451.0]], [[452.0], [453.0], [454.0]])], [s0([[455.0]], [[456.0], [457.0], [458.0]])], [s0([[459.0]], [[460.0], [461.0], [462.0]])]], s0([[463.0]], [[464.0], [465.0], [466.0]])))], [s3([[s2(467.0, s0([[468.0]], [[469.0], [470.0], [471.0]]))], [s2(472.0, s0([[473.0]], [[474.0], [475.0], [476.0]]))], [s2(477.0, s0([[478.0]], [[479.0], [480.0], [481.0]]))]], s1(s0([[482.0]], [[483.0], [484.0], [485.0]]), s0([[486.0]], [[487.0], [488.0], [489.0]]), [s0([[490.0]], [[491.0], [492.0], [493.0]]), s0([[494.0]], [[495.0], [496.0], [497.0]]), s0([[498.0]], [[499.0], [500.0], [501.0]])], [s0([[502.0]], [[503.0], [504.0], [505.0]])], [[s0([[506.0]], [[507.0], [508.0], [509.0]])], [s0([[510.0]], [[511.0], [512.0], [513.0]])], [s0([[514.0]], [[515.0], [516.0], [517.0]])]], s0([[518.0]], [[519.0], [520.0], [521.0]])))]] in
    let v3: s10 = s10([s8([s6(s0([[522.0]], [[523.0], [524.0], [525.0]]), s2(526.0, s0([[527.0]], [[528.0], [529.0], [530.0]])))], s3([[s2(531.0, s0([[532.0]], [[533.0], [534.0], [535.0]]))], [s2(536.0, s0([[537.0]], [[538.0], [539.0], [540.0]]))], [s2(541.0, s0([[542.0]], [[543.0], [544.0], [545.0]]))]], s1(s0([[546.0]], [[547.0], [548.0], [549.0]]), s0([[550.0]], [[551.0], [552.0], [553.0]]), [s0([[554.0]], [[555.0], [556.0], [557.0]]), s0([[558.0]], [[559.0], [560.0], [561.0]]), s0([[562.0]], [[563.0], [564.0], [565.0]])], [s0([[566.0]], [[567.0], [568.0], [569.0]])], [[s0([[570.0]], [[571.0], [572.0], [573.0]])], [s0([[574.0]], [[575.0], [576.0], [577.0]])], [s0([[578.0]], [[579.0], [580.0], [581.0]])]], s0([[582.0]], [[583.0], [584.0], [585.0]]))))], s4([[s2(586.0, s0([[587.0]], [[588.0], [589.0], [590.0]]))], [s2(591.0, s0([[592.0]], [[593.0], [594.0], [595.0]]))], [s2(596.0, s0([[597.0]], [[598.0], [599.0], [600.0]]))]], [[s1(s0([[601.0]], [[602.0], [603.0], [604.0]]), s0([[605.0]], [[606.0], [607.0], [608.0]]), [s0([[609.0]], [[610.0], [611.0], [612.0]]), s0([[613.0]], [[614.0], [615.0], [616.0]]), s0([[617.0]], [[618.0], [619.0], [620.0]])], [s0([[621.0]], [[622.0], [623.0], [624.0]])], [[s0([[625.0]], [[626.0], [627.0], [628.0]])], [s0([[629.0]], [[630.0], [631.0], [632.0]])], [s0([[633.0]], [[634.0], [635.0], [636.0]])]], s0([[637.0]], [[638.0], [639.0], [640.0]]))], [s1(s0([[641.0]], [[642.0], [643.0], [644.0]]), s0([[645.0]], [[646.0], [647.0], [648.0]]), [s0([[649.0]], [[650.0], [651.0], [652.0]]), s0([[653.0]], [[654.0], [655.0], [656.0]]), s0([[657.0]], [[658.0], [659.0], [660.0]])], [s0([[661.0]], [[662.0], [663.0], [664.0]])], [[s0([[665.0]], [[666.0], [667.0], [668.0]])], [s0([[669.0]], [[670.0], [671.0], [672.0]])], [s0([[673.0]], [[674.0], [675.0], [676.0]])]], s0([[677.0]], [[678.0], [679.0], [680.0]]))]])) in
    let v4: Float = 681.0 in
    let initialResult: Float = 681.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()