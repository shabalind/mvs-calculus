  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: ([s0], s0, [s0], s0, [s0], [s0], [[s0]], Float) -> Float = (v0: [s0], v1: s0, v2: [s0], v3: s0, v4: [s0], v5: [s0], v6: [[s0]], v7: Float) -> Float {
    let v20: [s0] = v6[1] in
    let v28: [[Float]] = v3.p1 in
    let v19: [Float] = v28[0] in
    let v25: s0 = v20[0] in
    let v37: [[Float]] = v25.p0 in
    let v33: Float = v19[0] in
    let v23: Float = v33 / v33 in
    let v178: [Float] = v37[1] in
    let v103: Float = v178[0] in
    let v46: Float = v103 + v23 in
    v46
  } in
  fun loop(i: Int, v0: [s0], v1: s0, v2: [s0], v3: s0, v4: [s0], v5: [s0], v6: [[s0]], v7: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4, v5, v6, v7) in
      loop(i + 1, v0, v1, v2, v3, v4, v5, v6, v7, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]), s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]])] in
    let v1: s0 = s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]]) in
    let v2: [s0] = [s0([[15.0], [16.0], [17.0]], [[18.0], [19.0]]), s0([[20.0], [21.0], [22.0]], [[23.0], [24.0]])] in
    let v3: s0 = s0([[25.0], [26.0], [27.0]], [[28.0], [29.0]]) in
    let v4: [s0] = [s0([[30.0], [31.0], [32.0]], [[33.0], [34.0]])] in
    let v5: [s0] = [s0([[35.0], [36.0], [37.0]], [[38.0], [39.0]])] in
    let v6: [[s0]] = [[s0([[40.0], [41.0], [42.0]], [[43.0], [44.0]])], [s0([[45.0], [46.0], [47.0]], [[48.0], [49.0]])], [s0([[50.0], [51.0], [52.0]], [[53.0], [54.0]])]] in
    let v7: Float = 55.0 in
    let initialResult: Float = 55.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, v5, v6, v7, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()