  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [Double]
    var p3: [Double]
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s2 {
    var p0: s1
    var p1: s1
    var p2: s1
  }
  struct s3 {
    var p0: [s0]
    var p1: s2
  }
  struct s4 {
    var p0: [[s0]]
    var p1: [s3]
  }
  struct s5 {
    var p0: [s2]
    var p1: s3
  }
  struct s8 {
    var p0: s3
    var p1: s5
  }
  struct s10 {
    var p0: s1
    var p1: [s4]
  }
  func f78(_ v0: s1, _ v1: [s0]) -> [s0] {
    let v2: [s0] = v0.p1
    let v5: s2 = s2(p0: v0, p1: v0, p2: v0)
    let v11: s1 = s1(p0: v1, p1: v2)
    let v8: s1 = v5.p1
    let v18: s1 = v5.p0
    let v28: s2 = s2(p0: v11, p1: v11, p2: v18)
    var v22: s2 = v28
    v22.p1 = v11
    let v39: s1 = v22.p2
    let v123: [s0] = v39.p0
    v22.p0 = v8
    v22.p2 = v11
    return v123
  }
  func f71(_ v0: s2) -> s2 {
    var v3: s2 = v0
    let v7: s1 = v3.p1
    let v6: [s0] = v7.p0
    let v5: [s0] = f78(v7, v6)
    let v1: [s0] = f78(v7, v6)
    let v12: s1 = v3.p2
    var v2: s1 = v7
    var v8: [s0] = v6
    v2.p0 = v8
    var v16: s1 = v12
    var v18: [s0] = v8
    let v15: s0 = v5[1]
    var v29: s1 = v2
    let v19: s0 = v6[0]
    v3.p1 = v7
    var v26: s1 = v2
    let v24: s0 = v18[0]
    v8[2] = v24
    v18 = v1
    let v22: [s0] = f78(v26, v18)
    let v20: [s0] = f78(v26, v22)
    v2.p0 = v22
    let v31: s0 = v18[1]
    let v60: [s0] = v26.p1
    var v34: s2 = v3
    v29.p0 = v6
    var v39: s1 = v2
    let v43: [s0] = f78(v26, v18)
    let v47: [s0] = v16.p1
    v26.p1 = v60
    let v86: [s0] = f78(v29, v43)
    v34.p1 = v29
    var v94: [s0] = v47
    let v68: [s0] = f78(v16, v18)
    v18[0] = v24
    v3.p1 = v12
    let v49: [s0] = f78(v29, v20)
    v18[1] = v15
    let v50: s1 = v34.p0
    var v103: s1 = v7
    v39 = v103
    v94 = v60
    v8[2] = v31
    let v75: [s0] = v39.p1
    v29.p1 = v47
    v94 = v75
    v2 = v50
    let v281: s2 = s2(p0: v103, p1: v16, p2: v16)
    v34.p2 = v16
    v94[1] = v31
    v94[0] = v19
    v103.p1 = v94
    v8 = v49
    v18[1] = v15
    v26.p0 = v68
    v26.p1 = v47
    v29.p0 = v22
    v2.p0 = v86
    return v281
  }
  func f69(_ v0: s5) -> s5 {
    let v2: s3 = v0.p1
    let v6: [s2] = v0.p0
    let v14: s5 = s5(p0: v6, p1: v2)
    return v14
  }
  func f63(_ v0: s0, _ v1: [s0]) -> [s0] {
    let v3: s0 = v1[0]
    var v45: [s0] = v1
    v45[0] = v3
    var v55: [s0] = v45
    return v55
  }
  func f60(_ v0: s0) -> s0 {
    return v0
  }
  func f44(_ v0: s3) -> s3 {
    let v5: s2 = v0.p1
    var v4: s2 = v5
    var v6: s3 = v0
    let v3: [s0] = v6.p0
    let v2: s2 = f71(v5)
    let v9: s0 = v3[0]
    let v10: s0 = f60(v9)
    let v8: [s0] = v0.p0
    let v13: s0 = f60(v10)
    let v14: s0 = v8[0]
    v6.p1 = v4
    let v15: s1 = v4.p2
    let v18: s0 = v8[0]
    var v29: s2 = v4
    v4.p0 = v15
    let v24: s1 = v2.p0
    let v26: s3 = s3(p0: v3, p1: v29)
    let v35: s0 = f60(v9)
    let v20: [s0] = f63(v35, v3)
    var v22: s1 = v15
    let v32: [s0] = v22.p1
    let v34: [s0] = v26.p0
    v6.p0 = v3
    let v36: s3 = s3(p0: v20, p1: v2)
    var v62: [s0] = v32
    let v47: [s0] = f63(v18, v34)
    v29.p1 = v24
    let v41: [s0] = f63(v13, v47)
    var v37: [s0] = v62
    v29.p0 = v15
    v22.p1 = v37
    v29.p1 = v22
    let v87: s0 = v62[0]
    v37[1] = v87
    v6 = v36
    v22.p1 = v32
    let v93: s3 = s3(p0: v41, p1: v29)
    v37[0] = v14
    return v93
  }
  func f37(_ v0: [s8]) -> [s8] {
    let v5: s8 = v0[0]
    let v3: [[s8]] = [v0, v0, v0, v0]
    let v2: s3 = v5.p0
    var v4: [s8] = v0
    var v8: [[s8]] = v3
    let v1: s5 = v5.p1
    let v10: s5 = f69(v1)
    var v18: [s8] = v4
    let v39: [s8] = v3[2]
    v8[1] = v4
    let v34: s8 = v0[0]
    let v16: [s8] = v8[1]
    var v21: [s8] = v18
    v21[0] = v5
    v18[0] = v34
    v18[0] = v5
    let v47: s8 = v21[0]
    v4[0] = v47
    let v32: [s8] = v3[1]
    let v37: s8 = s8(p0: v2, p1: v10)
    v4[0] = v37
    let v130: [[s8]] = [v0, v18, v32, v32, v16, v32, v39]
    v8[2] = v39
    v8[1] = v32
    let v160: [s8] = v130[6]
    return v160
  }
  @inline(never)
  func f0(_ v0: [s10], _ v1: [s8], _ v2: Double) -> Double {
    let v5: [s8] = f37(v1)
    let v11: s8 = v5[0]
    let v18: s3 = v11.p0
    let v29: s3 = f44(v18)
    let v36: [s0] = v29.p0
    let v39: s0 = v36[0]
    let v34: [Double] = v39.p2
    let v67: Double = v34[0]
    return v67
  }
  func benchmark() {
    let v0: [s10] = [s10(p0: s1(p0: [s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0], [4.0]], p2: [5.0], p3: [6.0]), s0(p0: [[7.0], [8.0]], p1: [[9.0], [10.0], [11.0]], p2: [12.0], p3: [13.0]), s0(p0: [[14.0], [15.0]], p1: [[16.0], [17.0], [18.0]], p2: [19.0], p3: [20.0])], p1: [s0(p0: [[21.0], [22.0]], p1: [[23.0], [24.0], [25.0]], p2: [26.0], p3: [27.0]), s0(p0: [[28.0], [29.0]], p1: [[30.0], [31.0], [32.0]], p2: [33.0], p3: [34.0])]), p1: [s4(p0: [[s0(p0: [[35.0], [36.0]], p1: [[37.0], [38.0], [39.0]], p2: [40.0], p3: [41.0])], [s0(p0: [[42.0], [43.0]], p1: [[44.0], [45.0], [46.0]], p2: [47.0], p3: [48.0])], [s0(p0: [[49.0], [50.0]], p1: [[51.0], [52.0], [53.0]], p2: [54.0], p3: [55.0])]], p1: [s3(p0: [s0(p0: [[56.0], [57.0]], p1: [[58.0], [59.0], [60.0]], p2: [61.0], p3: [62.0])], p1: s2(p0: s1(p0: [s0(p0: [[63.0], [64.0]], p1: [[65.0], [66.0], [67.0]], p2: [68.0], p3: [69.0]), s0(p0: [[70.0], [71.0]], p1: [[72.0], [73.0], [74.0]], p2: [75.0], p3: [76.0]), s0(p0: [[77.0], [78.0]], p1: [[79.0], [80.0], [81.0]], p2: [82.0], p3: [83.0])], p1: [s0(p0: [[84.0], [85.0]], p1: [[86.0], [87.0], [88.0]], p2: [89.0], p3: [90.0]), s0(p0: [[91.0], [92.0]], p1: [[93.0], [94.0], [95.0]], p2: [96.0], p3: [97.0])]), p1: s1(p0: [s0(p0: [[98.0], [99.0]], p1: [[100.0], [101.0], [102.0]], p2: [103.0], p3: [104.0]), s0(p0: [[105.0], [106.0]], p1: [[107.0], [108.0], [109.0]], p2: [110.0], p3: [111.0]), s0(p0: [[112.0], [113.0]], p1: [[114.0], [115.0], [116.0]], p2: [117.0], p3: [118.0])], p1: [s0(p0: [[119.0], [120.0]], p1: [[121.0], [122.0], [123.0]], p2: [124.0], p3: [125.0]), s0(p0: [[126.0], [127.0]], p1: [[128.0], [129.0], [130.0]], p2: [131.0], p3: [132.0])]), p2: s1(p0: [s0(p0: [[133.0], [134.0]], p1: [[135.0], [136.0], [137.0]], p2: [138.0], p3: [139.0]), s0(p0: [[140.0], [141.0]], p1: [[142.0], [143.0], [144.0]], p2: [145.0], p3: [146.0]), s0(p0: [[147.0], [148.0]], p1: [[149.0], [150.0], [151.0]], p2: [152.0], p3: [153.0])], p1: [s0(p0: [[154.0], [155.0]], p1: [[156.0], [157.0], [158.0]], p2: [159.0], p3: [160.0]), s0(p0: [[161.0], [162.0]], p1: [[163.0], [164.0], [165.0]], p2: [166.0], p3: [167.0])]))), s3(p0: [s0(p0: [[168.0], [169.0]], p1: [[170.0], [171.0], [172.0]], p2: [173.0], p3: [174.0])], p1: s2(p0: s1(p0: [s0(p0: [[175.0], [176.0]], p1: [[177.0], [178.0], [179.0]], p2: [180.0], p3: [181.0]), s0(p0: [[182.0], [183.0]], p1: [[184.0], [185.0], [186.0]], p2: [187.0], p3: [188.0]), s0(p0: [[189.0], [190.0]], p1: [[191.0], [192.0], [193.0]], p2: [194.0], p3: [195.0])], p1: [s0(p0: [[196.0], [197.0]], p1: [[198.0], [199.0], [200.0]], p2: [201.0], p3: [202.0]), s0(p0: [[203.0], [204.0]], p1: [[205.0], [206.0], [207.0]], p2: [208.0], p3: [209.0])]), p1: s1(p0: [s0(p0: [[210.0], [211.0]], p1: [[212.0], [213.0], [214.0]], p2: [215.0], p3: [216.0]), s0(p0: [[217.0], [218.0]], p1: [[219.0], [220.0], [221.0]], p2: [222.0], p3: [223.0]), s0(p0: [[224.0], [225.0]], p1: [[226.0], [227.0], [228.0]], p2: [229.0], p3: [230.0])], p1: [s0(p0: [[231.0], [232.0]], p1: [[233.0], [234.0], [235.0]], p2: [236.0], p3: [237.0]), s0(p0: [[238.0], [239.0]], p1: [[240.0], [241.0], [242.0]], p2: [243.0], p3: [244.0])]), p2: s1(p0: [s0(p0: [[245.0], [246.0]], p1: [[247.0], [248.0], [249.0]], p2: [250.0], p3: [251.0]), s0(p0: [[252.0], [253.0]], p1: [[254.0], [255.0], [256.0]], p2: [257.0], p3: [258.0]), s0(p0: [[259.0], [260.0]], p1: [[261.0], [262.0], [263.0]], p2: [264.0], p3: [265.0])], p1: [s0(p0: [[266.0], [267.0]], p1: [[268.0], [269.0], [270.0]], p2: [271.0], p3: [272.0]), s0(p0: [[273.0], [274.0]], p1: [[275.0], [276.0], [277.0]], p2: [278.0], p3: [279.0])]))), s3(p0: [s0(p0: [[280.0], [281.0]], p1: [[282.0], [283.0], [284.0]], p2: [285.0], p3: [286.0])], p1: s2(p0: s1(p0: [s0(p0: [[287.0], [288.0]], p1: [[289.0], [290.0], [291.0]], p2: [292.0], p3: [293.0]), s0(p0: [[294.0], [295.0]], p1: [[296.0], [297.0], [298.0]], p2: [299.0], p3: [300.0]), s0(p0: [[301.0], [302.0]], p1: [[303.0], [304.0], [305.0]], p2: [306.0], p3: [307.0])], p1: [s0(p0: [[308.0], [309.0]], p1: [[310.0], [311.0], [312.0]], p2: [313.0], p3: [314.0]), s0(p0: [[315.0], [316.0]], p1: [[317.0], [318.0], [319.0]], p2: [320.0], p3: [321.0])]), p1: s1(p0: [s0(p0: [[322.0], [323.0]], p1: [[324.0], [325.0], [326.0]], p2: [327.0], p3: [328.0]), s0(p0: [[329.0], [330.0]], p1: [[331.0], [332.0], [333.0]], p2: [334.0], p3: [335.0]), s0(p0: [[336.0], [337.0]], p1: [[338.0], [339.0], [340.0]], p2: [341.0], p3: [342.0])], p1: [s0(p0: [[343.0], [344.0]], p1: [[345.0], [346.0], [347.0]], p2: [348.0], p3: [349.0]), s0(p0: [[350.0], [351.0]], p1: [[352.0], [353.0], [354.0]], p2: [355.0], p3: [356.0])]), p2: s1(p0: [s0(p0: [[357.0], [358.0]], p1: [[359.0], [360.0], [361.0]], p2: [362.0], p3: [363.0]), s0(p0: [[364.0], [365.0]], p1: [[366.0], [367.0], [368.0]], p2: [369.0], p3: [370.0]), s0(p0: [[371.0], [372.0]], p1: [[373.0], [374.0], [375.0]], p2: [376.0], p3: [377.0])], p1: [s0(p0: [[378.0], [379.0]], p1: [[380.0], [381.0], [382.0]], p2: [383.0], p3: [384.0]), s0(p0: [[385.0], [386.0]], p1: [[387.0], [388.0], [389.0]], p2: [390.0], p3: [391.0])])))]), s4(p0: [[s0(p0: [[392.0], [393.0]], p1: [[394.0], [395.0], [396.0]], p2: [397.0], p3: [398.0])], [s0(p0: [[399.0], [400.0]], p1: [[401.0], [402.0], [403.0]], p2: [404.0], p3: [405.0])], [s0(p0: [[406.0], [407.0]], p1: [[408.0], [409.0], [410.0]], p2: [411.0], p3: [412.0])]], p1: [s3(p0: [s0(p0: [[413.0], [414.0]], p1: [[415.0], [416.0], [417.0]], p2: [418.0], p3: [419.0])], p1: s2(p0: s1(p0: [s0(p0: [[420.0], [421.0]], p1: [[422.0], [423.0], [424.0]], p2: [425.0], p3: [426.0]), s0(p0: [[427.0], [428.0]], p1: [[429.0], [430.0], [431.0]], p2: [432.0], p3: [433.0]), s0(p0: [[434.0], [435.0]], p1: [[436.0], [437.0], [438.0]], p2: [439.0], p3: [440.0])], p1: [s0(p0: [[441.0], [442.0]], p1: [[443.0], [444.0], [445.0]], p2: [446.0], p3: [447.0]), s0(p0: [[448.0], [449.0]], p1: [[450.0], [451.0], [452.0]], p2: [453.0], p3: [454.0])]), p1: s1(p0: [s0(p0: [[455.0], [456.0]], p1: [[457.0], [458.0], [459.0]], p2: [460.0], p3: [461.0]), s0(p0: [[462.0], [463.0]], p1: [[464.0], [465.0], [466.0]], p2: [467.0], p3: [468.0]), s0(p0: [[469.0], [470.0]], p1: [[471.0], [472.0], [473.0]], p2: [474.0], p3: [475.0])], p1: [s0(p0: [[476.0], [477.0]], p1: [[478.0], [479.0], [480.0]], p2: [481.0], p3: [482.0]), s0(p0: [[483.0], [484.0]], p1: [[485.0], [486.0], [487.0]], p2: [488.0], p3: [489.0])]), p2: s1(p0: [s0(p0: [[490.0], [491.0]], p1: [[492.0], [493.0], [494.0]], p2: [495.0], p3: [496.0]), s0(p0: [[497.0], [498.0]], p1: [[499.0], [500.0], [501.0]], p2: [502.0], p3: [503.0]), s0(p0: [[504.0], [505.0]], p1: [[506.0], [507.0], [508.0]], p2: [509.0], p3: [510.0])], p1: [s0(p0: [[511.0], [512.0]], p1: [[513.0], [514.0], [515.0]], p2: [516.0], p3: [517.0]), s0(p0: [[518.0], [519.0]], p1: [[520.0], [521.0], [522.0]], p2: [523.0], p3: [524.0])]))), s3(p0: [s0(p0: [[525.0], [526.0]], p1: [[527.0], [528.0], [529.0]], p2: [530.0], p3: [531.0])], p1: s2(p0: s1(p0: [s0(p0: [[532.0], [533.0]], p1: [[534.0], [535.0], [536.0]], p2: [537.0], p3: [538.0]), s0(p0: [[539.0], [540.0]], p1: [[541.0], [542.0], [543.0]], p2: [544.0], p3: [545.0]), s0(p0: [[546.0], [547.0]], p1: [[548.0], [549.0], [550.0]], p2: [551.0], p3: [552.0])], p1: [s0(p0: [[553.0], [554.0]], p1: [[555.0], [556.0], [557.0]], p2: [558.0], p3: [559.0]), s0(p0: [[560.0], [561.0]], p1: [[562.0], [563.0], [564.0]], p2: [565.0], p3: [566.0])]), p1: s1(p0: [s0(p0: [[567.0], [568.0]], p1: [[569.0], [570.0], [571.0]], p2: [572.0], p3: [573.0]), s0(p0: [[574.0], [575.0]], p1: [[576.0], [577.0], [578.0]], p2: [579.0], p3: [580.0]), s0(p0: [[581.0], [582.0]], p1: [[583.0], [584.0], [585.0]], p2: [586.0], p3: [587.0])], p1: [s0(p0: [[588.0], [589.0]], p1: [[590.0], [591.0], [592.0]], p2: [593.0], p3: [594.0]), s0(p0: [[595.0], [596.0]], p1: [[597.0], [598.0], [599.0]], p2: [600.0], p3: [601.0])]), p2: s1(p0: [s0(p0: [[602.0], [603.0]], p1: [[604.0], [605.0], [606.0]], p2: [607.0], p3: [608.0]), s0(p0: [[609.0], [610.0]], p1: [[611.0], [612.0], [613.0]], p2: [614.0], p3: [615.0]), s0(p0: [[616.0], [617.0]], p1: [[618.0], [619.0], [620.0]], p2: [621.0], p3: [622.0])], p1: [s0(p0: [[623.0], [624.0]], p1: [[625.0], [626.0], [627.0]], p2: [628.0], p3: [629.0]), s0(p0: [[630.0], [631.0]], p1: [[632.0], [633.0], [634.0]], p2: [635.0], p3: [636.0])]))), s3(p0: [s0(p0: [[637.0], [638.0]], p1: [[639.0], [640.0], [641.0]], p2: [642.0], p3: [643.0])], p1: s2(p0: s1(p0: [s0(p0: [[644.0], [645.0]], p1: [[646.0], [647.0], [648.0]], p2: [649.0], p3: [650.0]), s0(p0: [[651.0], [652.0]], p1: [[653.0], [654.0], [655.0]], p2: [656.0], p3: [657.0]), s0(p0: [[658.0], [659.0]], p1: [[660.0], [661.0], [662.0]], p2: [663.0], p3: [664.0])], p1: [s0(p0: [[665.0], [666.0]], p1: [[667.0], [668.0], [669.0]], p2: [670.0], p3: [671.0]), s0(p0: [[672.0], [673.0]], p1: [[674.0], [675.0], [676.0]], p2: [677.0], p3: [678.0])]), p1: s1(p0: [s0(p0: [[679.0], [680.0]], p1: [[681.0], [682.0], [683.0]], p2: [684.0], p3: [685.0]), s0(p0: [[686.0], [687.0]], p1: [[688.0], [689.0], [690.0]], p2: [691.0], p3: [692.0]), s0(p0: [[693.0], [694.0]], p1: [[695.0], [696.0], [697.0]], p2: [698.0], p3: [699.0])], p1: [s0(p0: [[700.0], [701.0]], p1: [[702.0], [703.0], [704.0]], p2: [705.0], p3: [706.0]), s0(p0: [[707.0], [708.0]], p1: [[709.0], [710.0], [711.0]], p2: [712.0], p3: [713.0])]), p2: s1(p0: [s0(p0: [[714.0], [715.0]], p1: [[716.0], [717.0], [718.0]], p2: [719.0], p3: [720.0]), s0(p0: [[721.0], [722.0]], p1: [[723.0], [724.0], [725.0]], p2: [726.0], p3: [727.0]), s0(p0: [[728.0], [729.0]], p1: [[730.0], [731.0], [732.0]], p2: [733.0], p3: [734.0])], p1: [s0(p0: [[735.0], [736.0]], p1: [[737.0], [738.0], [739.0]], p2: [740.0], p3: [741.0]), s0(p0: [[742.0], [743.0]], p1: [[744.0], [745.0], [746.0]], p2: [747.0], p3: [748.0])])))]), s4(p0: [[s0(p0: [[749.0], [750.0]], p1: [[751.0], [752.0], [753.0]], p2: [754.0], p3: [755.0])], [s0(p0: [[756.0], [757.0]], p1: [[758.0], [759.0], [760.0]], p2: [761.0], p3: [762.0])], [s0(p0: [[763.0], [764.0]], p1: [[765.0], [766.0], [767.0]], p2: [768.0], p3: [769.0])]], p1: [s3(p0: [s0(p0: [[770.0], [771.0]], p1: [[772.0], [773.0], [774.0]], p2: [775.0], p3: [776.0])], p1: s2(p0: s1(p0: [s0(p0: [[777.0], [778.0]], p1: [[779.0], [780.0], [781.0]], p2: [782.0], p3: [783.0]), s0(p0: [[784.0], [785.0]], p1: [[786.0], [787.0], [788.0]], p2: [789.0], p3: [790.0]), s0(p0: [[791.0], [792.0]], p1: [[793.0], [794.0], [795.0]], p2: [796.0], p3: [797.0])], p1: [s0(p0: [[798.0], [799.0]], p1: [[800.0], [801.0], [802.0]], p2: [803.0], p3: [804.0]), s0(p0: [[805.0], [806.0]], p1: [[807.0], [808.0], [809.0]], p2: [810.0], p3: [811.0])]), p1: s1(p0: [s0(p0: [[812.0], [813.0]], p1: [[814.0], [815.0], [816.0]], p2: [817.0], p3: [818.0]), s0(p0: [[819.0], [820.0]], p1: [[821.0], [822.0], [823.0]], p2: [824.0], p3: [825.0]), s0(p0: [[826.0], [827.0]], p1: [[828.0], [829.0], [830.0]], p2: [831.0], p3: [832.0])], p1: [s0(p0: [[833.0], [834.0]], p1: [[835.0], [836.0], [837.0]], p2: [838.0], p3: [839.0]), s0(p0: [[840.0], [841.0]], p1: [[842.0], [843.0], [844.0]], p2: [845.0], p3: [846.0])]), p2: s1(p0: [s0(p0: [[847.0], [848.0]], p1: [[849.0], [850.0], [851.0]], p2: [852.0], p3: [853.0]), s0(p0: [[854.0], [855.0]], p1: [[856.0], [857.0], [858.0]], p2: [859.0], p3: [860.0]), s0(p0: [[861.0], [862.0]], p1: [[863.0], [864.0], [865.0]], p2: [866.0], p3: [867.0])], p1: [s0(p0: [[868.0], [869.0]], p1: [[870.0], [871.0], [872.0]], p2: [873.0], p3: [874.0]), s0(p0: [[875.0], [876.0]], p1: [[877.0], [878.0], [879.0]], p2: [880.0], p3: [881.0])]))), s3(p0: [s0(p0: [[882.0], [883.0]], p1: [[884.0], [885.0], [886.0]], p2: [887.0], p3: [888.0])], p1: s2(p0: s1(p0: [s0(p0: [[889.0], [890.0]], p1: [[891.0], [892.0], [893.0]], p2: [894.0], p3: [895.0]), s0(p0: [[896.0], [897.0]], p1: [[898.0], [899.0], [900.0]], p2: [901.0], p3: [902.0]), s0(p0: [[903.0], [904.0]], p1: [[905.0], [906.0], [907.0]], p2: [908.0], p3: [909.0])], p1: [s0(p0: [[910.0], [911.0]], p1: [[912.0], [913.0], [914.0]], p2: [915.0], p3: [916.0]), s0(p0: [[917.0], [918.0]], p1: [[919.0], [920.0], [921.0]], p2: [922.0], p3: [923.0])]), p1: s1(p0: [s0(p0: [[924.0], [925.0]], p1: [[926.0], [927.0], [928.0]], p2: [929.0], p3: [930.0]), s0(p0: [[931.0], [932.0]], p1: [[933.0], [934.0], [935.0]], p2: [936.0], p3: [937.0]), s0(p0: [[938.0], [939.0]], p1: [[940.0], [941.0], [942.0]], p2: [943.0], p3: [944.0])], p1: [s0(p0: [[945.0], [946.0]], p1: [[947.0], [948.0], [949.0]], p2: [950.0], p3: [951.0]), s0(p0: [[952.0], [953.0]], p1: [[954.0], [955.0], [956.0]], p2: [957.0], p3: [958.0])]), p2: s1(p0: [s0(p0: [[959.0], [960.0]], p1: [[961.0], [962.0], [963.0]], p2: [964.0], p3: [965.0]), s0(p0: [[966.0], [967.0]], p1: [[968.0], [969.0], [970.0]], p2: [971.0], p3: [972.0]), s0(p0: [[973.0], [974.0]], p1: [[975.0], [976.0], [977.0]], p2: [978.0], p3: [979.0])], p1: [s0(p0: [[980.0], [981.0]], p1: [[982.0], [983.0], [984.0]], p2: [985.0], p3: [986.0]), s0(p0: [[987.0], [988.0]], p1: [[989.0], [990.0], [991.0]], p2: [992.0], p3: [993.0])]))), s3(p0: [s0(p0: [[994.0], [995.0]], p1: [[996.0], [997.0], [998.0]], p2: [999.0], p3: [1000.0])], p1: s2(p0: s1(p0: [s0(p0: [[1001.0], [1002.0]], p1: [[1003.0], [1004.0], [1005.0]], p2: [1006.0], p3: [1007.0]), s0(p0: [[1008.0], [1009.0]], p1: [[1010.0], [1011.0], [1012.0]], p2: [1013.0], p3: [1014.0]), s0(p0: [[1015.0], [1016.0]], p1: [[1017.0], [1018.0], [1019.0]], p2: [1020.0], p3: [1021.0])], p1: [s0(p0: [[1022.0], [1023.0]], p1: [[1024.0], [1025.0], [1026.0]], p2: [1027.0], p3: [1028.0]), s0(p0: [[1029.0], [1030.0]], p1: [[1031.0], [1032.0], [1033.0]], p2: [1034.0], p3: [1035.0])]), p1: s1(p0: [s0(p0: [[1036.0], [1037.0]], p1: [[1038.0], [1039.0], [1040.0]], p2: [1041.0], p3: [1042.0]), s0(p0: [[1043.0], [1044.0]], p1: [[1045.0], [1046.0], [1047.0]], p2: [1048.0], p3: [1049.0]), s0(p0: [[1050.0], [1051.0]], p1: [[1052.0], [1053.0], [1054.0]], p2: [1055.0], p3: [1056.0])], p1: [s0(p0: [[1057.0], [1058.0]], p1: [[1059.0], [1060.0], [1061.0]], p2: [1062.0], p3: [1063.0]), s0(p0: [[1064.0], [1065.0]], p1: [[1066.0], [1067.0], [1068.0]], p2: [1069.0], p3: [1070.0])]), p2: s1(p0: [s0(p0: [[1071.0], [1072.0]], p1: [[1073.0], [1074.0], [1075.0]], p2: [1076.0], p3: [1077.0]), s0(p0: [[1078.0], [1079.0]], p1: [[1080.0], [1081.0], [1082.0]], p2: [1083.0], p3: [1084.0]), s0(p0: [[1085.0], [1086.0]], p1: [[1087.0], [1088.0], [1089.0]], p2: [1090.0], p3: [1091.0])], p1: [s0(p0: [[1092.0], [1093.0]], p1: [[1094.0], [1095.0], [1096.0]], p2: [1097.0], p3: [1098.0]), s0(p0: [[1099.0], [1100.0]], p1: [[1101.0], [1102.0], [1103.0]], p2: [1104.0], p3: [1105.0])])))])])]
    let v1: [s8] = [s8(p0: s3(p0: [s0(p0: [[1106.0], [1107.0]], p1: [[1108.0], [1109.0], [1110.0]], p2: [1111.0], p3: [1112.0])], p1: s2(p0: s1(p0: [s0(p0: [[1113.0], [1114.0]], p1: [[1115.0], [1116.0], [1117.0]], p2: [1118.0], p3: [1119.0]), s0(p0: [[1120.0], [1121.0]], p1: [[1122.0], [1123.0], [1124.0]], p2: [1125.0], p3: [1126.0]), s0(p0: [[1127.0], [1128.0]], p1: [[1129.0], [1130.0], [1131.0]], p2: [1132.0], p3: [1133.0])], p1: [s0(p0: [[1134.0], [1135.0]], p1: [[1136.0], [1137.0], [1138.0]], p2: [1139.0], p3: [1140.0]), s0(p0: [[1141.0], [1142.0]], p1: [[1143.0], [1144.0], [1145.0]], p2: [1146.0], p3: [1147.0])]), p1: s1(p0: [s0(p0: [[1148.0], [1149.0]], p1: [[1150.0], [1151.0], [1152.0]], p2: [1153.0], p3: [1154.0]), s0(p0: [[1155.0], [1156.0]], p1: [[1157.0], [1158.0], [1159.0]], p2: [1160.0], p3: [1161.0]), s0(p0: [[1162.0], [1163.0]], p1: [[1164.0], [1165.0], [1166.0]], p2: [1167.0], p3: [1168.0])], p1: [s0(p0: [[1169.0], [1170.0]], p1: [[1171.0], [1172.0], [1173.0]], p2: [1174.0], p3: [1175.0]), s0(p0: [[1176.0], [1177.0]], p1: [[1178.0], [1179.0], [1180.0]], p2: [1181.0], p3: [1182.0])]), p2: s1(p0: [s0(p0: [[1183.0], [1184.0]], p1: [[1185.0], [1186.0], [1187.0]], p2: [1188.0], p3: [1189.0]), s0(p0: [[1190.0], [1191.0]], p1: [[1192.0], [1193.0], [1194.0]], p2: [1195.0], p3: [1196.0]), s0(p0: [[1197.0], [1198.0]], p1: [[1199.0], [1200.0], [1201.0]], p2: [1202.0], p3: [1203.0])], p1: [s0(p0: [[1204.0], [1205.0]], p1: [[1206.0], [1207.0], [1208.0]], p2: [1209.0], p3: [1210.0]), s0(p0: [[1211.0], [1212.0]], p1: [[1213.0], [1214.0], [1215.0]], p2: [1216.0], p3: [1217.0])]))), p1: s5(p0: [s2(p0: s1(p0: [s0(p0: [[1218.0], [1219.0]], p1: [[1220.0], [1221.0], [1222.0]], p2: [1223.0], p3: [1224.0]), s0(p0: [[1225.0], [1226.0]], p1: [[1227.0], [1228.0], [1229.0]], p2: [1230.0], p3: [1231.0]), s0(p0: [[1232.0], [1233.0]], p1: [[1234.0], [1235.0], [1236.0]], p2: [1237.0], p3: [1238.0])], p1: [s0(p0: [[1239.0], [1240.0]], p1: [[1241.0], [1242.0], [1243.0]], p2: [1244.0], p3: [1245.0]), s0(p0: [[1246.0], [1247.0]], p1: [[1248.0], [1249.0], [1250.0]], p2: [1251.0], p3: [1252.0])]), p1: s1(p0: [s0(p0: [[1253.0], [1254.0]], p1: [[1255.0], [1256.0], [1257.0]], p2: [1258.0], p3: [1259.0]), s0(p0: [[1260.0], [1261.0]], p1: [[1262.0], [1263.0], [1264.0]], p2: [1265.0], p3: [1266.0]), s0(p0: [[1267.0], [1268.0]], p1: [[1269.0], [1270.0], [1271.0]], p2: [1272.0], p3: [1273.0])], p1: [s0(p0: [[1274.0], [1275.0]], p1: [[1276.0], [1277.0], [1278.0]], p2: [1279.0], p3: [1280.0]), s0(p0: [[1281.0], [1282.0]], p1: [[1283.0], [1284.0], [1285.0]], p2: [1286.0], p3: [1287.0])]), p2: s1(p0: [s0(p0: [[1288.0], [1289.0]], p1: [[1290.0], [1291.0], [1292.0]], p2: [1293.0], p3: [1294.0]), s0(p0: [[1295.0], [1296.0]], p1: [[1297.0], [1298.0], [1299.0]], p2: [1300.0], p3: [1301.0]), s0(p0: [[1302.0], [1303.0]], p1: [[1304.0], [1305.0], [1306.0]], p2: [1307.0], p3: [1308.0])], p1: [s0(p0: [[1309.0], [1310.0]], p1: [[1311.0], [1312.0], [1313.0]], p2: [1314.0], p3: [1315.0]), s0(p0: [[1316.0], [1317.0]], p1: [[1318.0], [1319.0], [1320.0]], p2: [1321.0], p3: [1322.0])]))], p1: s3(p0: [s0(p0: [[1323.0], [1324.0]], p1: [[1325.0], [1326.0], [1327.0]], p2: [1328.0], p3: [1329.0])], p1: s2(p0: s1(p0: [s0(p0: [[1330.0], [1331.0]], p1: [[1332.0], [1333.0], [1334.0]], p2: [1335.0], p3: [1336.0]), s0(p0: [[1337.0], [1338.0]], p1: [[1339.0], [1340.0], [1341.0]], p2: [1342.0], p3: [1343.0]), s0(p0: [[1344.0], [1345.0]], p1: [[1346.0], [1347.0], [1348.0]], p2: [1349.0], p3: [1350.0])], p1: [s0(p0: [[1351.0], [1352.0]], p1: [[1353.0], [1354.0], [1355.0]], p2: [1356.0], p3: [1357.0]), s0(p0: [[1358.0], [1359.0]], p1: [[1360.0], [1361.0], [1362.0]], p2: [1363.0], p3: [1364.0])]), p1: s1(p0: [s0(p0: [[1365.0], [1366.0]], p1: [[1367.0], [1368.0], [1369.0]], p2: [1370.0], p3: [1371.0]), s0(p0: [[1372.0], [1373.0]], p1: [[1374.0], [1375.0], [1376.0]], p2: [1377.0], p3: [1378.0]), s0(p0: [[1379.0], [1380.0]], p1: [[1381.0], [1382.0], [1383.0]], p2: [1384.0], p3: [1385.0])], p1: [s0(p0: [[1386.0], [1387.0]], p1: [[1388.0], [1389.0], [1390.0]], p2: [1391.0], p3: [1392.0]), s0(p0: [[1393.0], [1394.0]], p1: [[1395.0], [1396.0], [1397.0]], p2: [1398.0], p3: [1399.0])]), p2: s1(p0: [s0(p0: [[1400.0], [1401.0]], p1: [[1402.0], [1403.0], [1404.0]], p2: [1405.0], p3: [1406.0]), s0(p0: [[1407.0], [1408.0]], p1: [[1409.0], [1410.0], [1411.0]], p2: [1412.0], p3: [1413.0]), s0(p0: [[1414.0], [1415.0]], p1: [[1416.0], [1417.0], [1418.0]], p2: [1419.0], p3: [1420.0])], p1: [s0(p0: [[1421.0], [1422.0]], p1: [[1423.0], [1424.0], [1425.0]], p2: [1426.0], p3: [1427.0]), s0(p0: [[1428.0], [1429.0]], p1: [[1430.0], [1431.0], [1432.0]], p2: [1433.0], p3: [1434.0])])))))]
    let v2: Double = 1435.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 1435.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
