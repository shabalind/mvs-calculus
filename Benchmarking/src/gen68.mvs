  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  } in
  let noinline_f0: ([s1], s0, Float) -> Float = (v0: [s1], v1: s0, v2: Float) -> Float {
    var v3: Float = v2 in
    let v9: [[Float]] = v1.p1 in
    let v14: [Float] = v9[0] in
    let v11: [Float] = v9[0] in
    var v31: [Float] = v11 in
    v31[0] = v3 in
    v31[0] = v2 in
    let v41: Float = v14[0] in
    v31[0] = v41 in
    let v139: Float = v31[0] in
    v139
  } in
  fun loop(i: Int, v0: [s1], v1: s0, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1([[s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]])], [s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]])], [s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]])]], s0([[15.0], [16.0]], [[17.0], [18.0], [19.0]])), s1([[s0([[20.0], [21.0]], [[22.0], [23.0], [24.0]])], [s0([[25.0], [26.0]], [[27.0], [28.0], [29.0]])], [s0([[30.0], [31.0]], [[32.0], [33.0], [34.0]])]], s0([[35.0], [36.0]], [[37.0], [38.0], [39.0]]))] in
    let v1: s0 = s0([[40.0], [41.0]], [[42.0], [43.0], [44.0]]) in
    let v2: Float = 45.0 in
    let initialResult: Float = 45.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()