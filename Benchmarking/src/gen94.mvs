  struct s0 {
    var p0: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s1
    var p1: [[s1]]
  } in
  struct s5 {
    var p0: s0
    var p1: s2
  } in
  struct s6 {
    var p0: [s2]
  } in
  struct s7 {
    var p0: s5
    var p1: s0
    var p2: s6
  } in
  let f9: (s0) -> s0 = (v0: s0) -> s0 {
    let v6: s1 = s1(v0, v0) in
    let v15: s0 = v6.p0 in
    v15
  } in
  let noinline_f0: (s0, s2, s7, Float) -> Float = (v0: s0, v1: s2, v2: s7, v3: Float) -> Float {
    let v7: s0 = f9(v0) in
    var v11: Float = v3 in
    let v13: [[Float]] = v7.p0 in
    v11 = v3 in
    let v14: [Float] = v13[0] in
    let v40: Float = v3 * v11 in
    let v28: Float = v40 - v11 in
    v11 = v28 in
    let v66: Float = v14[0] in
    let v60: Float = v3 + v40 in
    var v64: [Float] = v14 in
    v64[0] = v11 in
    v64[0] = v60 in
    v64[0] = v66 in
    let v127: Float = v64[0] in
    v127
  } in
  fun loop(i: Int, v0: s0, v1: s2, v2: s7, v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0]]) in
    let v1: s2 = s2(s1(s0([[1.0]]), s0([[2.0]])), [[s1(s0([[3.0]]), s0([[4.0]]))], [s1(s0([[5.0]]), s0([[6.0]]))], [s1(s0([[7.0]]), s0([[8.0]]))]]) in
    let v2: s7 = s7(s5(s0([[9.0]]), s2(s1(s0([[10.0]]), s0([[11.0]])), [[s1(s0([[12.0]]), s0([[13.0]]))], [s1(s0([[14.0]]), s0([[15.0]]))], [s1(s0([[16.0]]), s0([[17.0]]))]])), s0([[18.0]]), s6([s2(s1(s0([[19.0]]), s0([[20.0]])), [[s1(s0([[21.0]]), s0([[22.0]]))], [s1(s0([[23.0]]), s0([[24.0]]))], [s1(s0([[25.0]]), s0([[26.0]]))]])])) in
    let v3: Float = 27.0 in
    let initialResult: Float = 27.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()