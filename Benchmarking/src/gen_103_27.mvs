  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [[s1]]
    var p1: s1
  } in
  struct s6 {
    var p0: s2
    var p1: s0
  } in
  struct s8 {
    var p0: [s0]
    var p1: [s6]
  } in
  let noinline_f0: ([[s8]], Float) -> Float = (v0: [[s8]], v1: Float) -> Float {
    let v5: [s8] = v0[0] in
    var v2: [[s8]] = v0 in
    let v7: [s8] = v2[0] in
    let v6: s8 = v7[0] in
    let v8: [s6] = v6.p1 in
    let v34: s6 = v8[1] in
    let v15: s2 = v34.p0 in
    let v36: s1 = v15.p1 in
    v2[0] = v7 in
    v2[0] = v5 in
    let v61: Float = v1 + v1 in
    let v67: s0 = v36.p1 in
    let v89: [[Float]] = v67.p0 in
    let v64: [Float] = v89[2] in
    let v108: Float = v64[0] in
    let v79: Float = v61 + v108 in
    v79
  } in
  fun loop(i: Int, v0: [[s8]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s8]] = [[s8([s0([[0.0], [1.0], [2.0]], [[3.0]])], [s6(s2([[s1(s0([[4.0], [5.0], [6.0]], [[7.0]]), s0([[8.0], [9.0], [10.0]], [[11.0]]))]], s1(s0([[12.0], [13.0], [14.0]], [[15.0]]), s0([[16.0], [17.0], [18.0]], [[19.0]]))), s0([[20.0], [21.0], [22.0]], [[23.0]])), s6(s2([[s1(s0([[24.0], [25.0], [26.0]], [[27.0]]), s0([[28.0], [29.0], [30.0]], [[31.0]]))]], s1(s0([[32.0], [33.0], [34.0]], [[35.0]]), s0([[36.0], [37.0], [38.0]], [[39.0]]))), s0([[40.0], [41.0], [42.0]], [[43.0]]))])]] in
    let v1: Float = 44.0 in
    let initialResult: Float = 44.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()