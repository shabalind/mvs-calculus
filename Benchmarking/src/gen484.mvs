  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s2 {
    var p0: s0
  } in
  struct s5 {
    var p0: s2
    var p1: s2
  } in
  let noinline_f0: (s5, Float) -> Float = (v0: s5, v1: Float) -> Float {
    let v2: s2 = v0.p1 in
    let v3: s0 = v2.p0 in
    var v4: s0 = v3 in
    var v6: s0 = v4 in
    let v8: s0 = v2.p0 in
    let v27: [[Float]] = v3.p0 in
    let v16: s0 = v2.p0 in
    let v20: s2 = s2(v4) in
    let v22: [Float] = v27[0] in
    let v23: [[Float]] = v16.p0 in
    let v26: s0 = v2.p0 in
    var v24: s2 = v20 in
    var v40: s0 = v16 in
    let v21: [Float] = v23[0] in
    let v71: [[Float]] = v6.p0 in
    let v37: [Float] = v71[0] in
    let v43: [[Float]] = [v21, v37, v22] in
    let v72: [[Float]] = v16.p1 in
    let v45: [[Float]] = v40.p0 in
    v6.p1 = v72 in
    var v55: [[Float]] = v72 in
    v4.p0 = v27 in
    let v50: s0 = v24.p0 in
    let v78: [[Float]] = v8.p0 in
    v6 = v50 in
    v4.p0 = v45 in
    let v34: [Float] = v43[2] in
    var v97: s0 = v26 in
    var v112: [[Float]] = v72 in
    v97.p0 = v78 in
    var v53: s0 = v97 in
    v4.p1 = v112 in
    v24.p0 = v53 in
    v24.p0 = v16 in
    let v107: Float = v34[0] in
    v4.p1 = v55 in
    v6.p1 = v55 in
    v107
  } in
  fun loop(i: Int, v0: s5, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s5 = s5(s2(s0([[0.0]], [[1.0], [2.0]])), s2(s0([[3.0]], [[4.0], [5.0]]))) in
    let v1: Float = 6.0 in
    let initialResult: Float = 6.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()