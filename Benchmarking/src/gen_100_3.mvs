  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s3 {
    var p0: s1
    var p1: s1
  } in
  let noinline_f0: (Float, s3) -> Float = (v0: Float, v1: s3) -> Float {
    let v7: [Float] = [v0, v0] in
    let v2: Float = v7[1] in
    var v3: [Float] = v7 in
    let v5: Float = v3[1] in
    let v11: Float = v3[1] in
    v3[1] = v11 in
    v3[0] = v5 in
    v3[1] = v11 in
    v3[0] = v11 in
    var v47: [Float] = v3 in
    v3 = v47 in
    v3[0] = v11 in
    v47[1] = v2 in
    let v137: Float = v47[1] in
    v137
  } in
  fun loop(i: Int, v0: Float, v1: s3, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: Float = 0.0 in
    let v1: s3 = s3(s1([s0([[1.0], [2.0], [3.0]], [[4.0], [5.0], [6.0]])], s0([[7.0], [8.0], [9.0]], [[10.0], [11.0], [12.0]])), s1([s0([[13.0], [14.0], [15.0]], [[16.0], [17.0], [18.0]])], s0([[19.0], [20.0], [21.0]], [[22.0], [23.0], [24.0]]))) in
    let initialResult: Float = s3(s1([s0([[1.0], [2.0], [3.0]], [[4.0], [5.0], [6.0]])], s0([[7.0], [8.0], [9.0]], [[10.0], [11.0], [12.0]])), s1([s0([[13.0], [14.0], [15.0]], [[16.0], [17.0], [18.0]])], s0([[19.0], [20.0], [21.0]], [[22.0], [23.0], [24.0]]))) in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()