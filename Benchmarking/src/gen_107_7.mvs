  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  let f96: (Float) -> Float = (v0: Float) -> Float {
    let v3: Float = v0 - v0 in
    var v4: Float = v0 in
    var v7: Float = v3 in
    var v2: Float = v0 in
    var v8: Float = v0 in
    var v5: Float = v7 in
    var v21: Float = v4 in
    let v12: [Float] = [v2, v21, v8, v5] in
    var v17: [Float] = v12 in
    v4 = v8 in
    let v23: Float = v17[3] in
    v17[2] = v8 in
    v23
  } in
  let noinline_f0: ([[s1]], Float) -> Float = (v0: [[s1]], v1: Float) -> Float {
    let v3: Float = f96(v1) in
    var v4: Float = v3 in
    var v10: Float = v4 in
    let v42: Float = v3 + v4 in
    let v22: [Float] = [v1, v42, v10] in
    let v59: Float = v22[2] in
    v59
  } in
  fun loop(i: Int, v0: [[s1]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s1]] = [[s1([s0([[0.0]], [[1.0]]), s0([[2.0]], [[3.0]])], s0([[4.0]], [[5.0]]))], [s1([s0([[6.0]], [[7.0]]), s0([[8.0]], [[9.0]])], s0([[10.0]], [[11.0]]))], [s1([s0([[12.0]], [[13.0]]), s0([[14.0]], [[15.0]])], s0([[16.0]], [[17.0]]))]] in
    let v1: Float = 18.0 in
    let initialResult: Float = 18.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()