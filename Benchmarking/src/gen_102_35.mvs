  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: Float
  } in
  struct s2 {
    var p0: [s0]
    var p1: s1
    var p2: s0
  } in
  let noinline_f0: ([s0], s2, [s0], Float) -> Float = (v0: [s0], v1: s2, v2: [s0], v3: Float) -> Float {
    let v5: [s0] = v1.p0 in
    let v14: s0 = v5[0] in
    let v20: s0 = v5[0] in
    let v29: [[Float]] = v20.p1 in
    let v31: [Float] = v29[1] in
    let v52: Float = v31[0] in
    let v53: [[Float]] = v14.p0 in
    let v77: [Float] = v53[0] in
    let v239: Float = v77[0] in
    let v259: Float = v52 / v239 in
    v259
  } in
  fun loop(i: Int, v0: [s0], v1: s2, v2: [s0], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0]], [[1.0], [2.0], [3.0]]), s0([[4.0]], [[5.0], [6.0], [7.0]])] in
    let v1: s2 = s2([s0([[8.0]], [[9.0], [10.0], [11.0]])], s1(s0([[12.0]], [[13.0], [14.0], [15.0]]), 16.0), s0([[17.0]], [[18.0], [19.0], [20.0]])) in
    let v2: [s0] = [s0([[21.0]], [[22.0], [23.0], [24.0]]), s0([[25.0]], [[26.0], [27.0], [28.0]]), s0([[29.0]], [[30.0], [31.0], [32.0]])] in
    let v3: Float = 33.0 in
    let initialResult: Float = 33.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()