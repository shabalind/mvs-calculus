  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: [s1]
    var p1: [s1]
  } in
  struct s3 {
    var p0: s0
    var p1: [s2]
    var p2: s0
    var p3: [[s2]]
    var p4: [[s0]]
  } in
  struct s4 {
    var p0: s2
  } in
  struct s6 {
    var p0: s2
    var p1: s2
  } in
  struct s8 {
    var p0: [s4]
    var p1: [[s3]]
  } in
  let f27: (s0, Float) -> Float = (v0: s0, v1: Float) -> Float {
    let v6: Float = v1 - v1 in
    let v25: Float = v6 * v1 in
    let v18: Float = v25 / v1 in
    v18
  } in
  let f3: ([[s6]]) -> [[s6]] = (v0: [[s6]]) -> [[s6]] {
    var v2: [[s6]] = v0 in
    v2 = v0 in
    v2 = v0 in
    let v18: [s6] = v2[0] in
    let v35: [[[s6]]] = [v2, v0, v2, v2, v2] in
    let v32: [[s6]] = v35[1] in
    v2[2] = v18 in
    var v45: [[s6]] = v32 in
    v45
  } in
  let noinline_f0: ([s8], [s6], Float) -> Float = (v0: [s8], v1: [s6], v2: Float) -> Float {
    var v3: [s6] = v1 in
    var v4: [s6] = v1 in
    var v9: Float = v2 in
    let v13: [[s6]] = [v4, v4, v4] in
    var v12: Float = v9 in
    let v10: [[s6]] = f3(v13) in
    var v19: [[s6]] = v10 in
    let v18: [s6] = v19[2] in
    var v32: Float = v12 in
    let v38: s6 = v18[0] in
    v19[2] = v3 in
    let v30: s2 = v38.p1 in
    let v49: [s1] = v30.p1 in
    let v39: [s1] = v30.p0 in
    v3 = v4 in
    var v94: [s1] = v39 in
    var v69: Float = v12 in
    let v77: Float = v12 / v12 in
    var v93: [s1] = v49 in
    let v73: s1 = v94[0] in
    var v59: s1 = v73 in
    let v176: [Float] = [v77, v2, v32, v77, v9, v69, v69] in
    let v76: Float = v176[5] in
    v94[1] = v59 in
    let v109: s0 = v59.p0 in
    let v150: s1 = v93[0] in
    let v141: Float = f27(v109, v76) in
    let v206: [[s0]] = v73.p1 in
    v94[1] = v150 in
    v59.p1 = v206 in
    v141
  } in
  fun loop(i: Int, v0: [s8], v1: [s6], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s8] = [s8([s4(s2([s1(s0([[0.0]], [[1.0], [2.0]]), [[s0([[3.0]], [[4.0], [5.0]])]]), s1(s0([[6.0]], [[7.0], [8.0]]), [[s0([[9.0]], [[10.0], [11.0]])]])], [s1(s0([[12.0]], [[13.0], [14.0]]), [[s0([[15.0]], [[16.0], [17.0]])]])])), s4(s2([s1(s0([[18.0]], [[19.0], [20.0]]), [[s0([[21.0]], [[22.0], [23.0]])]]), s1(s0([[24.0]], [[25.0], [26.0]]), [[s0([[27.0]], [[28.0], [29.0]])]])], [s1(s0([[30.0]], [[31.0], [32.0]]), [[s0([[33.0]], [[34.0], [35.0]])]])])), s4(s2([s1(s0([[36.0]], [[37.0], [38.0]]), [[s0([[39.0]], [[40.0], [41.0]])]]), s1(s0([[42.0]], [[43.0], [44.0]]), [[s0([[45.0]], [[46.0], [47.0]])]])], [s1(s0([[48.0]], [[49.0], [50.0]]), [[s0([[51.0]], [[52.0], [53.0]])]])]))], [[s3(s0([[54.0]], [[55.0], [56.0]]), [s2([s1(s0([[57.0]], [[58.0], [59.0]]), [[s0([[60.0]], [[61.0], [62.0]])]]), s1(s0([[63.0]], [[64.0], [65.0]]), [[s0([[66.0]], [[67.0], [68.0]])]])], [s1(s0([[69.0]], [[70.0], [71.0]]), [[s0([[72.0]], [[73.0], [74.0]])]])])], s0([[75.0]], [[76.0], [77.0]]), [[s2([s1(s0([[78.0]], [[79.0], [80.0]]), [[s0([[81.0]], [[82.0], [83.0]])]]), s1(s0([[84.0]], [[85.0], [86.0]]), [[s0([[87.0]], [[88.0], [89.0]])]])], [s1(s0([[90.0]], [[91.0], [92.0]]), [[s0([[93.0]], [[94.0], [95.0]])]])])], [s2([s1(s0([[96.0]], [[97.0], [98.0]]), [[s0([[99.0]], [[100.0], [101.0]])]]), s1(s0([[102.0]], [[103.0], [104.0]]), [[s0([[105.0]], [[106.0], [107.0]])]])], [s1(s0([[108.0]], [[109.0], [110.0]]), [[s0([[111.0]], [[112.0], [113.0]])]])])]], [[s0([[114.0]], [[115.0], [116.0]])], [s0([[117.0]], [[118.0], [119.0]])], [s0([[120.0]], [[121.0], [122.0]])]])], [s3(s0([[123.0]], [[124.0], [125.0]]), [s2([s1(s0([[126.0]], [[127.0], [128.0]]), [[s0([[129.0]], [[130.0], [131.0]])]]), s1(s0([[132.0]], [[133.0], [134.0]]), [[s0([[135.0]], [[136.0], [137.0]])]])], [s1(s0([[138.0]], [[139.0], [140.0]]), [[s0([[141.0]], [[142.0], [143.0]])]])])], s0([[144.0]], [[145.0], [146.0]]), [[s2([s1(s0([[147.0]], [[148.0], [149.0]]), [[s0([[150.0]], [[151.0], [152.0]])]]), s1(s0([[153.0]], [[154.0], [155.0]]), [[s0([[156.0]], [[157.0], [158.0]])]])], [s1(s0([[159.0]], [[160.0], [161.0]]), [[s0([[162.0]], [[163.0], [164.0]])]])])], [s2([s1(s0([[165.0]], [[166.0], [167.0]]), [[s0([[168.0]], [[169.0], [170.0]])]]), s1(s0([[171.0]], [[172.0], [173.0]]), [[s0([[174.0]], [[175.0], [176.0]])]])], [s1(s0([[177.0]], [[178.0], [179.0]]), [[s0([[180.0]], [[181.0], [182.0]])]])])]], [[s0([[183.0]], [[184.0], [185.0]])], [s0([[186.0]], [[187.0], [188.0]])], [s0([[189.0]], [[190.0], [191.0]])]])], [s3(s0([[192.0]], [[193.0], [194.0]]), [s2([s1(s0([[195.0]], [[196.0], [197.0]]), [[s0([[198.0]], [[199.0], [200.0]])]]), s1(s0([[201.0]], [[202.0], [203.0]]), [[s0([[204.0]], [[205.0], [206.0]])]])], [s1(s0([[207.0]], [[208.0], [209.0]]), [[s0([[210.0]], [[211.0], [212.0]])]])])], s0([[213.0]], [[214.0], [215.0]]), [[s2([s1(s0([[216.0]], [[217.0], [218.0]]), [[s0([[219.0]], [[220.0], [221.0]])]]), s1(s0([[222.0]], [[223.0], [224.0]]), [[s0([[225.0]], [[226.0], [227.0]])]])], [s1(s0([[228.0]], [[229.0], [230.0]]), [[s0([[231.0]], [[232.0], [233.0]])]])])], [s2([s1(s0([[234.0]], [[235.0], [236.0]]), [[s0([[237.0]], [[238.0], [239.0]])]]), s1(s0([[240.0]], [[241.0], [242.0]]), [[s0([[243.0]], [[244.0], [245.0]])]])], [s1(s0([[246.0]], [[247.0], [248.0]]), [[s0([[249.0]], [[250.0], [251.0]])]])])]], [[s0([[252.0]], [[253.0], [254.0]])], [s0([[255.0]], [[256.0], [257.0]])], [s0([[258.0]], [[259.0], [260.0]])]])]])] in
    let v1: [s6] = [s6(s2([s1(s0([[261.0]], [[262.0], [263.0]]), [[s0([[264.0]], [[265.0], [266.0]])]]), s1(s0([[267.0]], [[268.0], [269.0]]), [[s0([[270.0]], [[271.0], [272.0]])]])], [s1(s0([[273.0]], [[274.0], [275.0]]), [[s0([[276.0]], [[277.0], [278.0]])]])]), s2([s1(s0([[279.0]], [[280.0], [281.0]]), [[s0([[282.0]], [[283.0], [284.0]])]]), s1(s0([[285.0]], [[286.0], [287.0]]), [[s0([[288.0]], [[289.0], [290.0]])]])], [s1(s0([[291.0]], [[292.0], [293.0]]), [[s0([[294.0]], [[295.0], [296.0]])]])]))] in
    let v2: Float = 297.0 in
    let initialResult: Float = 297.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()