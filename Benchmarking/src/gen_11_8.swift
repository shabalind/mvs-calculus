  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
  }
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  }
  struct s2 {
    var p0: [s0]
    var p1: s1
  }
  struct s3 {
    var p0: s2
    var p1: [s2]
  }
  @inline(never)
  func f0(_ v0: s3, _ v1: s1, _ v2: s1, _ v3: s0, _ v4: Double) -> Double {
    var v11: Double = v4
    let v7: [[Double]] = v3.p1
    let v17: [Double] = v7[0]
    var v63: Double = v11
    var v45: [Double] = v17
    var v34: [Double] = v45
    var v54: Double = v4
    let v58: Double = v34[0]
    v45[0] = v54
    let v91: Double = v17[0]
    let v67: Double = v63 + v58
    v34[0] = v58
    let v112: Double = v67 + v67
    v45 = v34
    v34[0] = v63
    v45[0] = v91
    return v112
  }
  func benchmark() {
    let v0: s3 = s3(p0: s2(p0: [s0(p0: [[0.0]], p1: [[1.0], [2.0], [3.0]], p2: [[4.0], [5.0], [6.0]])], p1: s1(p0: [[s0(p0: [[7.0]], p1: [[8.0], [9.0], [10.0]], p2: [[11.0], [12.0], [13.0]])], [s0(p0: [[14.0]], p1: [[15.0], [16.0], [17.0]], p2: [[18.0], [19.0], [20.0]])]], p1: s0(p0: [[21.0]], p1: [[22.0], [23.0], [24.0]], p2: [[25.0], [26.0], [27.0]]))), p1: [s2(p0: [s0(p0: [[28.0]], p1: [[29.0], [30.0], [31.0]], p2: [[32.0], [33.0], [34.0]])], p1: s1(p0: [[s0(p0: [[35.0]], p1: [[36.0], [37.0], [38.0]], p2: [[39.0], [40.0], [41.0]])], [s0(p0: [[42.0]], p1: [[43.0], [44.0], [45.0]], p2: [[46.0], [47.0], [48.0]])]], p1: s0(p0: [[49.0]], p1: [[50.0], [51.0], [52.0]], p2: [[53.0], [54.0], [55.0]])))])
    let v1: s1 = s1(p0: [[s0(p0: [[56.0]], p1: [[57.0], [58.0], [59.0]], p2: [[60.0], [61.0], [62.0]])], [s0(p0: [[63.0]], p1: [[64.0], [65.0], [66.0]], p2: [[67.0], [68.0], [69.0]])]], p1: s0(p0: [[70.0]], p1: [[71.0], [72.0], [73.0]], p2: [[74.0], [75.0], [76.0]]))
    let v2: s1 = s1(p0: [[s0(p0: [[77.0]], p1: [[78.0], [79.0], [80.0]], p2: [[81.0], [82.0], [83.0]])], [s0(p0: [[84.0]], p1: [[85.0], [86.0], [87.0]], p2: [[88.0], [89.0], [90.0]])]], p1: s0(p0: [[91.0]], p1: [[92.0], [93.0], [94.0]], p2: [[95.0], [96.0], [97.0]]))
    let v3: s0 = s0(p0: [[98.0]], p1: [[99.0], [100.0], [101.0]], p2: [[102.0], [103.0], [104.0]])
    let v4: Double = 105.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 105.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
