  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  let f33: (Float) -> Float = (v0: Float) -> Float {
    var v5: Float = v0 in
    var v7: Float = v5 in
    let v4: [Float] = [v5] in
    v5 = v7 in
    var v2: [Float] = v4 in
    var v3: [Float] = v2 in
    var v16: [Float] = v3 in
    var v8: Float = v0 in
    v3[0] = v8 in
    v3[0] = v5 in
    v2[0] = v7 in
    v3[0] = v8 in
    v16[0] = v0 in
    v3[0] = v5 in
    let v24: Float = v16[0] in
    v3[0] = v24 in
    v24
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    let v7: Float = f33(v1) in
    let v9: Float = f33(v7) in
    let v10: Float = f33(v1) in
    let v13: Float = f33(v9) in
    let v25: Float = f33(v13) in
    let v24: [Float] = [v9] in
    let v30: Float = v24[0] in
    let v33: Float = v24[0] in
    let v146: [Float] = [v25, v25, v10, v30, v33, v10] in
    var v89: [Float] = v146 in
    let v115: Float = v89[1] in
    v115
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]], [[5.0], [6.0], [7.0]])], s0([[8.0], [9.0]], [[10.0], [11.0], [12.0]], [[13.0], [14.0], [15.0]])) in
    let v1: Float = 16.0 in
    let initialResult: Float = 16.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()