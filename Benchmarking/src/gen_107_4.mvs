  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
    var p2: [[s0]]
  } in
  struct s2 {
    var p0: [[s1]]
    var p1: s0
    var p2: s1
  } in
  let f22: ([Float]) -> [Float] = (v0: [Float]) -> [Float] {
    var v4: [Float] = v0 in
    var v2: [Float] = v4 in
    let v6: Float = v2[0] in
    let v5: Float = v2[0] in
    let v3: Float = v2[0] in
    let v10: Float = v2[0] in
    var v12: Float = v10 in
    var v16: Float = v12 in
    let v15: Float = v4[0] in
    var v1: [Float] = v2 in
    var v9: [Float] = v4 in
    var v42: [Float] = v1 in
    v1[0] = v3 in
    let v23: [Float] = [v5, v16, v3, v3, v12] in
    var v36: [Float] = v42 in
    let v17: Float = v6 / v15 in
    let v39: Float = v36[0] in
    v1 = v9 in
    var v37: [Float] = v23 in
    var v56: [Float] = v37 in
    let v54: Float = v23[4] in
    let v45: Float = v37[2] in
    let v28: Float = v56[3] in
    var v67: [Float] = v56 in
    v1[0] = v54 in
    let v60: Float = v37[0] in
    let v68: Float = v56[0] in
    v37[3] = v39 in
    let v102: Float = v37[2] in
    let v74: [Float] = [v68, v60, v54, v102, v28, v17] in
    let v71: [[Float]] = [v74, v74, v74, v74, v74, v74] in
    let v84: [Float] = v71[5] in
    v9[0] = v12 in
    let v92: Float = v84[3] in
    v16 = v45 in
    let v157: Float = v67[1] in
    var v129: [Float] = v2 in
    v4[0] = v92 in
    v129[0] = v157 in
    v129
  } in
  let noinline_f0: ([s2], Float) -> Float = (v0: [s2], v1: Float) -> Float {
    let v7: s2 = v0[0] in
    let v4: s0 = v7.p1 in
    let v5: [[Float]] = v4.p1 in
    let v11: [Float] = v5[0] in
    var v23: [Float] = v11 in
    let v16: [Float] = f22(v23) in
    let v15: [Float] = f22(v16) in
    let v67: Float = v23[0] in
    let v43: Float = v15[0] in
    let v37: Float = v43 - v67 in
    let v97: Float = v16[0] in
    var v79: Float = v37 in
    v23[0] = v97 in
    v79
  } in
  fun loop(i: Int, v0: [s2], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2([[s1(s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]]), s0([[6.0], [7.0], [8.0]], [[9.0], [10.0], [11.0]]), [[s0([[12.0], [13.0], [14.0]], [[15.0], [16.0], [17.0]])], [s0([[18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0]])]])]], s0([[24.0], [25.0], [26.0]], [[27.0], [28.0], [29.0]]), s1(s0([[30.0], [31.0], [32.0]], [[33.0], [34.0], [35.0]]), s0([[36.0], [37.0], [38.0]], [[39.0], [40.0], [41.0]]), [[s0([[42.0], [43.0], [44.0]], [[45.0], [46.0], [47.0]])], [s0([[48.0], [49.0], [50.0]], [[51.0], [52.0], [53.0]])]]))] in
    let v1: Float = 54.0 in
    let initialResult: Float = 54.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()