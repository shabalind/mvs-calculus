  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  let f55: (s1, [s0]) -> [s0] = (v0: s1, v1: [s0]) -> [s0] {
    let v10: [s0] = v0.p0 in
    let v15: s1 = s1(v10, v1) in
    let v57: [s0] = v15.p0 in
    v57
  } in
  let noinline_f0: (s1, [s1], [s1], Float) -> Float = (v0: s1, v1: [s1], v2: [s1], v3: Float) -> Float {
    let v5: [s0] = v0.p0 in
    let v9: [s0] = f55(v0, v5) in
    let v4: s0 = v9[0] in
    let v22: [[Float]] = v4.p1 in
    let v30: [Float] = v22[0] in
    let v45: Float = v30[0] in
    v45
  } in
  fun loop(i: Int, v0: s1, v1: [s1], v2: [s1], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([s0([[0.0], [1.0]], [[2.0], [3.0]])], [s0([[4.0], [5.0]], [[6.0], [7.0]])]) in
    let v1: [s1] = [s1([s0([[8.0], [9.0]], [[10.0], [11.0]])], [s0([[12.0], [13.0]], [[14.0], [15.0]])])] in
    let v2: [s1] = [s1([s0([[16.0], [17.0]], [[18.0], [19.0]])], [s0([[20.0], [21.0]], [[22.0], [23.0]])]), s1([s0([[24.0], [25.0]], [[26.0], [27.0]])], [s0([[28.0], [29.0]], [[30.0], [31.0]])])] in
    let v3: Float = 32.0 in
    let initialResult: Float = 32.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()