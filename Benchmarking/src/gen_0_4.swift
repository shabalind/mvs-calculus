  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [Double]
    var p2: s0
  }
  struct s2 {
    var p0: [s0]
    var p1: s0
  }
  struct s3 {
    var p0: s1
    var p1: s1
  }
  struct s5 {
    var p0: [s3]
    var p1: [s1]
  }
  struct s6 {
    var p0: [s2]
    var p1: [s5]
  }
  @inline(never)
  func f0(_ v0: [s6], _ v1: [s3], _ v2: Double) -> Double {
    var v6: [s3] = v1
    let v5: s3 = v6[0]
    let v4: s1 = v5.p0
    var v3: s1 = v4
    let v10: [Double] = v3.p1
    var v16: s1 = v3
    v16.p1 = v10
    let v46: s3 = v6[0]
    v6[0] = v46
    v16 = v3
    v16.p1 = v10
    let v51: [s0] = v16.p0
    let v39: s0 = v16.p2
    let v44: [[Double]] = v39.p1
    v6[0] = v46
    var v99: [s0] = v51
    v16.p0 = v99
    v16.p0 = v51
    let v43: [Double] = v44[0]
    let v68: Double = v43[0]
    return v68
  }
  func benchmark() {
    let v0: [s6] = [s6(p0: [s2(p0: [s0(p0: [[0.0]], p1: [[1.0], [2.0]]), s0(p0: [[3.0]], p1: [[4.0], [5.0]]), s0(p0: [[6.0]], p1: [[7.0], [8.0]])], p1: s0(p0: [[9.0]], p1: [[10.0], [11.0]]))], p1: [s5(p0: [s3(p0: s1(p0: [s0(p0: [[12.0]], p1: [[13.0], [14.0]]), s0(p0: [[15.0]], p1: [[16.0], [17.0]]), s0(p0: [[18.0]], p1: [[19.0], [20.0]])], p1: [21.0], p2: s0(p0: [[22.0]], p1: [[23.0], [24.0]])), p1: s1(p0: [s0(p0: [[25.0]], p1: [[26.0], [27.0]]), s0(p0: [[28.0]], p1: [[29.0], [30.0]]), s0(p0: [[31.0]], p1: [[32.0], [33.0]])], p1: [34.0], p2: s0(p0: [[35.0]], p1: [[36.0], [37.0]]))), s3(p0: s1(p0: [s0(p0: [[38.0]], p1: [[39.0], [40.0]]), s0(p0: [[41.0]], p1: [[42.0], [43.0]]), s0(p0: [[44.0]], p1: [[45.0], [46.0]])], p1: [47.0], p2: s0(p0: [[48.0]], p1: [[49.0], [50.0]])), p1: s1(p0: [s0(p0: [[51.0]], p1: [[52.0], [53.0]]), s0(p0: [[54.0]], p1: [[55.0], [56.0]]), s0(p0: [[57.0]], p1: [[58.0], [59.0]])], p1: [60.0], p2: s0(p0: [[61.0]], p1: [[62.0], [63.0]]))), s3(p0: s1(p0: [s0(p0: [[64.0]], p1: [[65.0], [66.0]]), s0(p0: [[67.0]], p1: [[68.0], [69.0]]), s0(p0: [[70.0]], p1: [[71.0], [72.0]])], p1: [73.0], p2: s0(p0: [[74.0]], p1: [[75.0], [76.0]])), p1: s1(p0: [s0(p0: [[77.0]], p1: [[78.0], [79.0]]), s0(p0: [[80.0]], p1: [[81.0], [82.0]]), s0(p0: [[83.0]], p1: [[84.0], [85.0]])], p1: [86.0], p2: s0(p0: [[87.0]], p1: [[88.0], [89.0]])))], p1: [s1(p0: [s0(p0: [[90.0]], p1: [[91.0], [92.0]]), s0(p0: [[93.0]], p1: [[94.0], [95.0]]), s0(p0: [[96.0]], p1: [[97.0], [98.0]])], p1: [99.0], p2: s0(p0: [[100.0]], p1: [[101.0], [102.0]])), s1(p0: [s0(p0: [[103.0]], p1: [[104.0], [105.0]]), s0(p0: [[106.0]], p1: [[107.0], [108.0]]), s0(p0: [[109.0]], p1: [[110.0], [111.0]])], p1: [112.0], p2: s0(p0: [[113.0]], p1: [[114.0], [115.0]]))]), s5(p0: [s3(p0: s1(p0: [s0(p0: [[116.0]], p1: [[117.0], [118.0]]), s0(p0: [[119.0]], p1: [[120.0], [121.0]]), s0(p0: [[122.0]], p1: [[123.0], [124.0]])], p1: [125.0], p2: s0(p0: [[126.0]], p1: [[127.0], [128.0]])), p1: s1(p0: [s0(p0: [[129.0]], p1: [[130.0], [131.0]]), s0(p0: [[132.0]], p1: [[133.0], [134.0]]), s0(p0: [[135.0]], p1: [[136.0], [137.0]])], p1: [138.0], p2: s0(p0: [[139.0]], p1: [[140.0], [141.0]]))), s3(p0: s1(p0: [s0(p0: [[142.0]], p1: [[143.0], [144.0]]), s0(p0: [[145.0]], p1: [[146.0], [147.0]]), s0(p0: [[148.0]], p1: [[149.0], [150.0]])], p1: [151.0], p2: s0(p0: [[152.0]], p1: [[153.0], [154.0]])), p1: s1(p0: [s0(p0: [[155.0]], p1: [[156.0], [157.0]]), s0(p0: [[158.0]], p1: [[159.0], [160.0]]), s0(p0: [[161.0]], p1: [[162.0], [163.0]])], p1: [164.0], p2: s0(p0: [[165.0]], p1: [[166.0], [167.0]]))), s3(p0: s1(p0: [s0(p0: [[168.0]], p1: [[169.0], [170.0]]), s0(p0: [[171.0]], p1: [[172.0], [173.0]]), s0(p0: [[174.0]], p1: [[175.0], [176.0]])], p1: [177.0], p2: s0(p0: [[178.0]], p1: [[179.0], [180.0]])), p1: s1(p0: [s0(p0: [[181.0]], p1: [[182.0], [183.0]]), s0(p0: [[184.0]], p1: [[185.0], [186.0]]), s0(p0: [[187.0]], p1: [[188.0], [189.0]])], p1: [190.0], p2: s0(p0: [[191.0]], p1: [[192.0], [193.0]])))], p1: [s1(p0: [s0(p0: [[194.0]], p1: [[195.0], [196.0]]), s0(p0: [[197.0]], p1: [[198.0], [199.0]]), s0(p0: [[200.0]], p1: [[201.0], [202.0]])], p1: [203.0], p2: s0(p0: [[204.0]], p1: [[205.0], [206.0]])), s1(p0: [s0(p0: [[207.0]], p1: [[208.0], [209.0]]), s0(p0: [[210.0]], p1: [[211.0], [212.0]]), s0(p0: [[213.0]], p1: [[214.0], [215.0]])], p1: [216.0], p2: s0(p0: [[217.0]], p1: [[218.0], [219.0]]))]), s5(p0: [s3(p0: s1(p0: [s0(p0: [[220.0]], p1: [[221.0], [222.0]]), s0(p0: [[223.0]], p1: [[224.0], [225.0]]), s0(p0: [[226.0]], p1: [[227.0], [228.0]])], p1: [229.0], p2: s0(p0: [[230.0]], p1: [[231.0], [232.0]])), p1: s1(p0: [s0(p0: [[233.0]], p1: [[234.0], [235.0]]), s0(p0: [[236.0]], p1: [[237.0], [238.0]]), s0(p0: [[239.0]], p1: [[240.0], [241.0]])], p1: [242.0], p2: s0(p0: [[243.0]], p1: [[244.0], [245.0]]))), s3(p0: s1(p0: [s0(p0: [[246.0]], p1: [[247.0], [248.0]]), s0(p0: [[249.0]], p1: [[250.0], [251.0]]), s0(p0: [[252.0]], p1: [[253.0], [254.0]])], p1: [255.0], p2: s0(p0: [[256.0]], p1: [[257.0], [258.0]])), p1: s1(p0: [s0(p0: [[259.0]], p1: [[260.0], [261.0]]), s0(p0: [[262.0]], p1: [[263.0], [264.0]]), s0(p0: [[265.0]], p1: [[266.0], [267.0]])], p1: [268.0], p2: s0(p0: [[269.0]], p1: [[270.0], [271.0]]))), s3(p0: s1(p0: [s0(p0: [[272.0]], p1: [[273.0], [274.0]]), s0(p0: [[275.0]], p1: [[276.0], [277.0]]), s0(p0: [[278.0]], p1: [[279.0], [280.0]])], p1: [281.0], p2: s0(p0: [[282.0]], p1: [[283.0], [284.0]])), p1: s1(p0: [s0(p0: [[285.0]], p1: [[286.0], [287.0]]), s0(p0: [[288.0]], p1: [[289.0], [290.0]]), s0(p0: [[291.0]], p1: [[292.0], [293.0]])], p1: [294.0], p2: s0(p0: [[295.0]], p1: [[296.0], [297.0]])))], p1: [s1(p0: [s0(p0: [[298.0]], p1: [[299.0], [300.0]]), s0(p0: [[301.0]], p1: [[302.0], [303.0]]), s0(p0: [[304.0]], p1: [[305.0], [306.0]])], p1: [307.0], p2: s0(p0: [[308.0]], p1: [[309.0], [310.0]])), s1(p0: [s0(p0: [[311.0]], p1: [[312.0], [313.0]]), s0(p0: [[314.0]], p1: [[315.0], [316.0]]), s0(p0: [[317.0]], p1: [[318.0], [319.0]])], p1: [320.0], p2: s0(p0: [[321.0]], p1: [[322.0], [323.0]]))])]), s6(p0: [s2(p0: [s0(p0: [[324.0]], p1: [[325.0], [326.0]]), s0(p0: [[327.0]], p1: [[328.0], [329.0]]), s0(p0: [[330.0]], p1: [[331.0], [332.0]])], p1: s0(p0: [[333.0]], p1: [[334.0], [335.0]]))], p1: [s5(p0: [s3(p0: s1(p0: [s0(p0: [[336.0]], p1: [[337.0], [338.0]]), s0(p0: [[339.0]], p1: [[340.0], [341.0]]), s0(p0: [[342.0]], p1: [[343.0], [344.0]])], p1: [345.0], p2: s0(p0: [[346.0]], p1: [[347.0], [348.0]])), p1: s1(p0: [s0(p0: [[349.0]], p1: [[350.0], [351.0]]), s0(p0: [[352.0]], p1: [[353.0], [354.0]]), s0(p0: [[355.0]], p1: [[356.0], [357.0]])], p1: [358.0], p2: s0(p0: [[359.0]], p1: [[360.0], [361.0]]))), s3(p0: s1(p0: [s0(p0: [[362.0]], p1: [[363.0], [364.0]]), s0(p0: [[365.0]], p1: [[366.0], [367.0]]), s0(p0: [[368.0]], p1: [[369.0], [370.0]])], p1: [371.0], p2: s0(p0: [[372.0]], p1: [[373.0], [374.0]])), p1: s1(p0: [s0(p0: [[375.0]], p1: [[376.0], [377.0]]), s0(p0: [[378.0]], p1: [[379.0], [380.0]]), s0(p0: [[381.0]], p1: [[382.0], [383.0]])], p1: [384.0], p2: s0(p0: [[385.0]], p1: [[386.0], [387.0]]))), s3(p0: s1(p0: [s0(p0: [[388.0]], p1: [[389.0], [390.0]]), s0(p0: [[391.0]], p1: [[392.0], [393.0]]), s0(p0: [[394.0]], p1: [[395.0], [396.0]])], p1: [397.0], p2: s0(p0: [[398.0]], p1: [[399.0], [400.0]])), p1: s1(p0: [s0(p0: [[401.0]], p1: [[402.0], [403.0]]), s0(p0: [[404.0]], p1: [[405.0], [406.0]]), s0(p0: [[407.0]], p1: [[408.0], [409.0]])], p1: [410.0], p2: s0(p0: [[411.0]], p1: [[412.0], [413.0]])))], p1: [s1(p0: [s0(p0: [[414.0]], p1: [[415.0], [416.0]]), s0(p0: [[417.0]], p1: [[418.0], [419.0]]), s0(p0: [[420.0]], p1: [[421.0], [422.0]])], p1: [423.0], p2: s0(p0: [[424.0]], p1: [[425.0], [426.0]])), s1(p0: [s0(p0: [[427.0]], p1: [[428.0], [429.0]]), s0(p0: [[430.0]], p1: [[431.0], [432.0]]), s0(p0: [[433.0]], p1: [[434.0], [435.0]])], p1: [436.0], p2: s0(p0: [[437.0]], p1: [[438.0], [439.0]]))]), s5(p0: [s3(p0: s1(p0: [s0(p0: [[440.0]], p1: [[441.0], [442.0]]), s0(p0: [[443.0]], p1: [[444.0], [445.0]]), s0(p0: [[446.0]], p1: [[447.0], [448.0]])], p1: [449.0], p2: s0(p0: [[450.0]], p1: [[451.0], [452.0]])), p1: s1(p0: [s0(p0: [[453.0]], p1: [[454.0], [455.0]]), s0(p0: [[456.0]], p1: [[457.0], [458.0]]), s0(p0: [[459.0]], p1: [[460.0], [461.0]])], p1: [462.0], p2: s0(p0: [[463.0]], p1: [[464.0], [465.0]]))), s3(p0: s1(p0: [s0(p0: [[466.0]], p1: [[467.0], [468.0]]), s0(p0: [[469.0]], p1: [[470.0], [471.0]]), s0(p0: [[472.0]], p1: [[473.0], [474.0]])], p1: [475.0], p2: s0(p0: [[476.0]], p1: [[477.0], [478.0]])), p1: s1(p0: [s0(p0: [[479.0]], p1: [[480.0], [481.0]]), s0(p0: [[482.0]], p1: [[483.0], [484.0]]), s0(p0: [[485.0]], p1: [[486.0], [487.0]])], p1: [488.0], p2: s0(p0: [[489.0]], p1: [[490.0], [491.0]]))), s3(p0: s1(p0: [s0(p0: [[492.0]], p1: [[493.0], [494.0]]), s0(p0: [[495.0]], p1: [[496.0], [497.0]]), s0(p0: [[498.0]], p1: [[499.0], [500.0]])], p1: [501.0], p2: s0(p0: [[502.0]], p1: [[503.0], [504.0]])), p1: s1(p0: [s0(p0: [[505.0]], p1: [[506.0], [507.0]]), s0(p0: [[508.0]], p1: [[509.0], [510.0]]), s0(p0: [[511.0]], p1: [[512.0], [513.0]])], p1: [514.0], p2: s0(p0: [[515.0]], p1: [[516.0], [517.0]])))], p1: [s1(p0: [s0(p0: [[518.0]], p1: [[519.0], [520.0]]), s0(p0: [[521.0]], p1: [[522.0], [523.0]]), s0(p0: [[524.0]], p1: [[525.0], [526.0]])], p1: [527.0], p2: s0(p0: [[528.0]], p1: [[529.0], [530.0]])), s1(p0: [s0(p0: [[531.0]], p1: [[532.0], [533.0]]), s0(p0: [[534.0]], p1: [[535.0], [536.0]]), s0(p0: [[537.0]], p1: [[538.0], [539.0]])], p1: [540.0], p2: s0(p0: [[541.0]], p1: [[542.0], [543.0]]))]), s5(p0: [s3(p0: s1(p0: [s0(p0: [[544.0]], p1: [[545.0], [546.0]]), s0(p0: [[547.0]], p1: [[548.0], [549.0]]), s0(p0: [[550.0]], p1: [[551.0], [552.0]])], p1: [553.0], p2: s0(p0: [[554.0]], p1: [[555.0], [556.0]])), p1: s1(p0: [s0(p0: [[557.0]], p1: [[558.0], [559.0]]), s0(p0: [[560.0]], p1: [[561.0], [562.0]]), s0(p0: [[563.0]], p1: [[564.0], [565.0]])], p1: [566.0], p2: s0(p0: [[567.0]], p1: [[568.0], [569.0]]))), s3(p0: s1(p0: [s0(p0: [[570.0]], p1: [[571.0], [572.0]]), s0(p0: [[573.0]], p1: [[574.0], [575.0]]), s0(p0: [[576.0]], p1: [[577.0], [578.0]])], p1: [579.0], p2: s0(p0: [[580.0]], p1: [[581.0], [582.0]])), p1: s1(p0: [s0(p0: [[583.0]], p1: [[584.0], [585.0]]), s0(p0: [[586.0]], p1: [[587.0], [588.0]]), s0(p0: [[589.0]], p1: [[590.0], [591.0]])], p1: [592.0], p2: s0(p0: [[593.0]], p1: [[594.0], [595.0]]))), s3(p0: s1(p0: [s0(p0: [[596.0]], p1: [[597.0], [598.0]]), s0(p0: [[599.0]], p1: [[600.0], [601.0]]), s0(p0: [[602.0]], p1: [[603.0], [604.0]])], p1: [605.0], p2: s0(p0: [[606.0]], p1: [[607.0], [608.0]])), p1: s1(p0: [s0(p0: [[609.0]], p1: [[610.0], [611.0]]), s0(p0: [[612.0]], p1: [[613.0], [614.0]]), s0(p0: [[615.0]], p1: [[616.0], [617.0]])], p1: [618.0], p2: s0(p0: [[619.0]], p1: [[620.0], [621.0]])))], p1: [s1(p0: [s0(p0: [[622.0]], p1: [[623.0], [624.0]]), s0(p0: [[625.0]], p1: [[626.0], [627.0]]), s0(p0: [[628.0]], p1: [[629.0], [630.0]])], p1: [631.0], p2: s0(p0: [[632.0]], p1: [[633.0], [634.0]])), s1(p0: [s0(p0: [[635.0]], p1: [[636.0], [637.0]]), s0(p0: [[638.0]], p1: [[639.0], [640.0]]), s0(p0: [[641.0]], p1: [[642.0], [643.0]])], p1: [644.0], p2: s0(p0: [[645.0]], p1: [[646.0], [647.0]]))])]), s6(p0: [s2(p0: [s0(p0: [[648.0]], p1: [[649.0], [650.0]]), s0(p0: [[651.0]], p1: [[652.0], [653.0]]), s0(p0: [[654.0]], p1: [[655.0], [656.0]])], p1: s0(p0: [[657.0]], p1: [[658.0], [659.0]]))], p1: [s5(p0: [s3(p0: s1(p0: [s0(p0: [[660.0]], p1: [[661.0], [662.0]]), s0(p0: [[663.0]], p1: [[664.0], [665.0]]), s0(p0: [[666.0]], p1: [[667.0], [668.0]])], p1: [669.0], p2: s0(p0: [[670.0]], p1: [[671.0], [672.0]])), p1: s1(p0: [s0(p0: [[673.0]], p1: [[674.0], [675.0]]), s0(p0: [[676.0]], p1: [[677.0], [678.0]]), s0(p0: [[679.0]], p1: [[680.0], [681.0]])], p1: [682.0], p2: s0(p0: [[683.0]], p1: [[684.0], [685.0]]))), s3(p0: s1(p0: [s0(p0: [[686.0]], p1: [[687.0], [688.0]]), s0(p0: [[689.0]], p1: [[690.0], [691.0]]), s0(p0: [[692.0]], p1: [[693.0], [694.0]])], p1: [695.0], p2: s0(p0: [[696.0]], p1: [[697.0], [698.0]])), p1: s1(p0: [s0(p0: [[699.0]], p1: [[700.0], [701.0]]), s0(p0: [[702.0]], p1: [[703.0], [704.0]]), s0(p0: [[705.0]], p1: [[706.0], [707.0]])], p1: [708.0], p2: s0(p0: [[709.0]], p1: [[710.0], [711.0]]))), s3(p0: s1(p0: [s0(p0: [[712.0]], p1: [[713.0], [714.0]]), s0(p0: [[715.0]], p1: [[716.0], [717.0]]), s0(p0: [[718.0]], p1: [[719.0], [720.0]])], p1: [721.0], p2: s0(p0: [[722.0]], p1: [[723.0], [724.0]])), p1: s1(p0: [s0(p0: [[725.0]], p1: [[726.0], [727.0]]), s0(p0: [[728.0]], p1: [[729.0], [730.0]]), s0(p0: [[731.0]], p1: [[732.0], [733.0]])], p1: [734.0], p2: s0(p0: [[735.0]], p1: [[736.0], [737.0]])))], p1: [s1(p0: [s0(p0: [[738.0]], p1: [[739.0], [740.0]]), s0(p0: [[741.0]], p1: [[742.0], [743.0]]), s0(p0: [[744.0]], p1: [[745.0], [746.0]])], p1: [747.0], p2: s0(p0: [[748.0]], p1: [[749.0], [750.0]])), s1(p0: [s0(p0: [[751.0]], p1: [[752.0], [753.0]]), s0(p0: [[754.0]], p1: [[755.0], [756.0]]), s0(p0: [[757.0]], p1: [[758.0], [759.0]])], p1: [760.0], p2: s0(p0: [[761.0]], p1: [[762.0], [763.0]]))]), s5(p0: [s3(p0: s1(p0: [s0(p0: [[764.0]], p1: [[765.0], [766.0]]), s0(p0: [[767.0]], p1: [[768.0], [769.0]]), s0(p0: [[770.0]], p1: [[771.0], [772.0]])], p1: [773.0], p2: s0(p0: [[774.0]], p1: [[775.0], [776.0]])), p1: s1(p0: [s0(p0: [[777.0]], p1: [[778.0], [779.0]]), s0(p0: [[780.0]], p1: [[781.0], [782.0]]), s0(p0: [[783.0]], p1: [[784.0], [785.0]])], p1: [786.0], p2: s0(p0: [[787.0]], p1: [[788.0], [789.0]]))), s3(p0: s1(p0: [s0(p0: [[790.0]], p1: [[791.0], [792.0]]), s0(p0: [[793.0]], p1: [[794.0], [795.0]]), s0(p0: [[796.0]], p1: [[797.0], [798.0]])], p1: [799.0], p2: s0(p0: [[800.0]], p1: [[801.0], [802.0]])), p1: s1(p0: [s0(p0: [[803.0]], p1: [[804.0], [805.0]]), s0(p0: [[806.0]], p1: [[807.0], [808.0]]), s0(p0: [[809.0]], p1: [[810.0], [811.0]])], p1: [812.0], p2: s0(p0: [[813.0]], p1: [[814.0], [815.0]]))), s3(p0: s1(p0: [s0(p0: [[816.0]], p1: [[817.0], [818.0]]), s0(p0: [[819.0]], p1: [[820.0], [821.0]]), s0(p0: [[822.0]], p1: [[823.0], [824.0]])], p1: [825.0], p2: s0(p0: [[826.0]], p1: [[827.0], [828.0]])), p1: s1(p0: [s0(p0: [[829.0]], p1: [[830.0], [831.0]]), s0(p0: [[832.0]], p1: [[833.0], [834.0]]), s0(p0: [[835.0]], p1: [[836.0], [837.0]])], p1: [838.0], p2: s0(p0: [[839.0]], p1: [[840.0], [841.0]])))], p1: [s1(p0: [s0(p0: [[842.0]], p1: [[843.0], [844.0]]), s0(p0: [[845.0]], p1: [[846.0], [847.0]]), s0(p0: [[848.0]], p1: [[849.0], [850.0]])], p1: [851.0], p2: s0(p0: [[852.0]], p1: [[853.0], [854.0]])), s1(p0: [s0(p0: [[855.0]], p1: [[856.0], [857.0]]), s0(p0: [[858.0]], p1: [[859.0], [860.0]]), s0(p0: [[861.0]], p1: [[862.0], [863.0]])], p1: [864.0], p2: s0(p0: [[865.0]], p1: [[866.0], [867.0]]))]), s5(p0: [s3(p0: s1(p0: [s0(p0: [[868.0]], p1: [[869.0], [870.0]]), s0(p0: [[871.0]], p1: [[872.0], [873.0]]), s0(p0: [[874.0]], p1: [[875.0], [876.0]])], p1: [877.0], p2: s0(p0: [[878.0]], p1: [[879.0], [880.0]])), p1: s1(p0: [s0(p0: [[881.0]], p1: [[882.0], [883.0]]), s0(p0: [[884.0]], p1: [[885.0], [886.0]]), s0(p0: [[887.0]], p1: [[888.0], [889.0]])], p1: [890.0], p2: s0(p0: [[891.0]], p1: [[892.0], [893.0]]))), s3(p0: s1(p0: [s0(p0: [[894.0]], p1: [[895.0], [896.0]]), s0(p0: [[897.0]], p1: [[898.0], [899.0]]), s0(p0: [[900.0]], p1: [[901.0], [902.0]])], p1: [903.0], p2: s0(p0: [[904.0]], p1: [[905.0], [906.0]])), p1: s1(p0: [s0(p0: [[907.0]], p1: [[908.0], [909.0]]), s0(p0: [[910.0]], p1: [[911.0], [912.0]]), s0(p0: [[913.0]], p1: [[914.0], [915.0]])], p1: [916.0], p2: s0(p0: [[917.0]], p1: [[918.0], [919.0]]))), s3(p0: s1(p0: [s0(p0: [[920.0]], p1: [[921.0], [922.0]]), s0(p0: [[923.0]], p1: [[924.0], [925.0]]), s0(p0: [[926.0]], p1: [[927.0], [928.0]])], p1: [929.0], p2: s0(p0: [[930.0]], p1: [[931.0], [932.0]])), p1: s1(p0: [s0(p0: [[933.0]], p1: [[934.0], [935.0]]), s0(p0: [[936.0]], p1: [[937.0], [938.0]]), s0(p0: [[939.0]], p1: [[940.0], [941.0]])], p1: [942.0], p2: s0(p0: [[943.0]], p1: [[944.0], [945.0]])))], p1: [s1(p0: [s0(p0: [[946.0]], p1: [[947.0], [948.0]]), s0(p0: [[949.0]], p1: [[950.0], [951.0]]), s0(p0: [[952.0]], p1: [[953.0], [954.0]])], p1: [955.0], p2: s0(p0: [[956.0]], p1: [[957.0], [958.0]])), s1(p0: [s0(p0: [[959.0]], p1: [[960.0], [961.0]]), s0(p0: [[962.0]], p1: [[963.0], [964.0]]), s0(p0: [[965.0]], p1: [[966.0], [967.0]])], p1: [968.0], p2: s0(p0: [[969.0]], p1: [[970.0], [971.0]]))])])]
    let v1: [s3] = [s3(p0: s1(p0: [s0(p0: [[972.0]], p1: [[973.0], [974.0]]), s0(p0: [[975.0]], p1: [[976.0], [977.0]]), s0(p0: [[978.0]], p1: [[979.0], [980.0]])], p1: [981.0], p2: s0(p0: [[982.0]], p1: [[983.0], [984.0]])), p1: s1(p0: [s0(p0: [[985.0]], p1: [[986.0], [987.0]]), s0(p0: [[988.0]], p1: [[989.0], [990.0]]), s0(p0: [[991.0]], p1: [[992.0], [993.0]])], p1: [994.0], p2: s0(p0: [[995.0]], p1: [[996.0], [997.0]])))]
    let v2: Double = 998.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 998.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
