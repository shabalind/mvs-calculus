  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  } in
  struct s2 {
    var p0: [s1]
    var p1: [[s1]]
  } in
  struct s3 {
    var p0: s1
    var p1: [s0]
  } in
  struct s4 {
    var p0: s0
    var p1: s0
  } in
  struct s5 {
    var p0: s4
    var p1: Float
  } in
  struct s9 {
    var p0: [s2]
    var p1: s5
  } in
  struct s10 {
    var p0: [[s4]]
    var p1: [s9]
  } in
  let f22: (s9) -> s9 = (v0: s9) -> s9 {
    v0
  } in
  let f21: (s10) -> s10 = (v0: s10) -> s10 {
    var v1: s10 = v0 in
    var v3: s10 = v0 in
    var v8: s10 = v1 in
    let v4: [[s4]] = v8.p0 in
    var v6: [[s4]] = v4 in
    v3.p0 = v4 in
    var v14: s10 = v0 in
    v14.p0 = v4 in
    v14.p0 = v6 in
    let v17: [[s4]] = v3.p0 in
    v8.p0 = v6 in
    v3.p0 = v17 in
    v8.p0 = v17 in
    v8.p0 = v6 in
    let v46: [s9] = v1.p1 in
    v3.p1 = v46 in
    v14.p1 = v46 in
    v14
  } in
  let f14: (s10) -> s10 = (v0: s10) -> s10 {
    var v2: s10 = v0 in
    let v1: s10 = f21(v2) in
    let v7: [s9] = v1.p1 in
    let v5: s9 = v7[0] in
    let v9: [s9] = v1.p1 in
    let v10: [[s4]] = v2.p0 in
    var v8: s10 = v0 in
    let v14: s10 = f21(v8) in
    v8.p0 = v10 in
    v2.p1 = v7 in
    let v18: [s4] = v10[0] in
    let v15: [s4] = v10[0] in
    v8.p1 = v9 in
    v2.p1 = v9 in
    v8.p1 = v7 in
    let v35: s4 = v15[0] in
    var v26: s4 = v35 in
    var v39: [s4] = v15 in
    v8.p0 = v10 in
    let v51: [s4] = v10[0] in
    v39[0] = v35 in
    v8.p0 = v10 in
    v39[0] = v35 in
    let v21: s9 = f22(v5) in
    v39[0] = v26 in
    let v58: [s4] = v10[0] in
    let v57: s0 = v26.p1 in
    var v30: [[s4]] = v10 in
    let v69: s0 = v26.p0 in
    var v78: [[s4]] = v30 in
    v78[0] = v39 in
    v26.p1 = v69 in
    let v59: s5 = v21.p1 in
    v26.p0 = v57 in
    v39[0] = v35 in
    v30[0] = v51 in
    let v88: s10 = f21(v14) in
    v39[0] = v26 in
    v30 = v78 in
    v8.p0 = v30 in
    let v52: s10 = f21(v88) in
    let v102: s4 = v59.p0 in
    v30[0] = v58 in
    v30[0] = v18 in
    v39[0] = v102 in
    v30[0] = v15 in
    v8.p0 = v10 in
    v52
  } in
  let f4: ([s10], Float) -> Float = (v0: [s10], v1: Float) -> Float {
    var v4: Float = v1 in
    v4
  } in
  let noinline_f0: (s3, [[s10]], Float) -> Float = (v0: s3, v1: [[s10]], v2: Float) -> Float {
    let v4: [s10] = v1[0] in
    let v5: s10 = v4[0] in
    let v8: s10 = v4[0] in
    let v7: Float = f4(v4, v2) in
    let v13: s10 = f21(v5) in
    var v18: [s10] = v4 in
    let v11: s10 = f21(v5) in
    let v24: [s10] = v1[0] in
    let v22: s10 = f14(v11) in
    v18[0] = v13 in
    let v15: [[s10]] = [v18, v24, v4, v4, v4] in
    let v33: [s10] = v15[4] in
    var v19: [[s10]] = v15 in
    let v14: [s9] = v22.p1 in
    var v36: [s9] = v14 in
    var v30: [[s10]] = v19 in
    var v61: [s10] = v33 in
    var v73: s10 = v8 in
    let v83: s10 = f14(v73) in
    var v64: [s10] = v61 in
    let v59: [s10] = v30[3] in
    v73.p1 = v14 in
    let v75: s10 = v18[0] in
    let v127: s9 = v14[0] in
    v64 = v59 in
    let v111: s10 = f21(v83) in
    v73.p1 = v36 in
    v64[0] = v83 in
    let v120: Float = f4(v64, v7) in
    v36[0] = v127 in
    let v150: s10 = f14(v75) in
    v61[0] = v111 in
    v18[0] = v5 in
    v64[0] = v150 in
    v120
  } in
  fun loop(i: Int, v0: s3, v1: [[s10]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(s1([[s0([[0.0], [1.0], [2.0]], [[3.0]])]], s0([[4.0], [5.0], [6.0]], [[7.0]])), [s0([[8.0], [9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0], [14.0]], [[15.0]])]) in
    let v1: [[s10]] = [[s10([[s4(s0([[16.0], [17.0], [18.0]], [[19.0]]), s0([[20.0], [21.0], [22.0]], [[23.0]]))]], [s9([s2([s1([[s0([[24.0], [25.0], [26.0]], [[27.0]])]], s0([[28.0], [29.0], [30.0]], [[31.0]])), s1([[s0([[32.0], [33.0], [34.0]], [[35.0]])]], s0([[36.0], [37.0], [38.0]], [[39.0]])), s1([[s0([[40.0], [41.0], [42.0]], [[43.0]])]], s0([[44.0], [45.0], [46.0]], [[47.0]]))], [[s1([[s0([[48.0], [49.0], [50.0]], [[51.0]])]], s0([[52.0], [53.0], [54.0]], [[55.0]]))]]), s2([s1([[s0([[56.0], [57.0], [58.0]], [[59.0]])]], s0([[60.0], [61.0], [62.0]], [[63.0]])), s1([[s0([[64.0], [65.0], [66.0]], [[67.0]])]], s0([[68.0], [69.0], [70.0]], [[71.0]])), s1([[s0([[72.0], [73.0], [74.0]], [[75.0]])]], s0([[76.0], [77.0], [78.0]], [[79.0]]))], [[s1([[s0([[80.0], [81.0], [82.0]], [[83.0]])]], s0([[84.0], [85.0], [86.0]], [[87.0]]))]]), s2([s1([[s0([[88.0], [89.0], [90.0]], [[91.0]])]], s0([[92.0], [93.0], [94.0]], [[95.0]])), s1([[s0([[96.0], [97.0], [98.0]], [[99.0]])]], s0([[100.0], [101.0], [102.0]], [[103.0]])), s1([[s0([[104.0], [105.0], [106.0]], [[107.0]])]], s0([[108.0], [109.0], [110.0]], [[111.0]]))], [[s1([[s0([[112.0], [113.0], [114.0]], [[115.0]])]], s0([[116.0], [117.0], [118.0]], [[119.0]]))]])], s5(s4(s0([[120.0], [121.0], [122.0]], [[123.0]]), s0([[124.0], [125.0], [126.0]], [[127.0]])), 128.0))])], [s10([[s4(s0([[129.0], [130.0], [131.0]], [[132.0]]), s0([[133.0], [134.0], [135.0]], [[136.0]]))]], [s9([s2([s1([[s0([[137.0], [138.0], [139.0]], [[140.0]])]], s0([[141.0], [142.0], [143.0]], [[144.0]])), s1([[s0([[145.0], [146.0], [147.0]], [[148.0]])]], s0([[149.0], [150.0], [151.0]], [[152.0]])), s1([[s0([[153.0], [154.0], [155.0]], [[156.0]])]], s0([[157.0], [158.0], [159.0]], [[160.0]]))], [[s1([[s0([[161.0], [162.0], [163.0]], [[164.0]])]], s0([[165.0], [166.0], [167.0]], [[168.0]]))]]), s2([s1([[s0([[169.0], [170.0], [171.0]], [[172.0]])]], s0([[173.0], [174.0], [175.0]], [[176.0]])), s1([[s0([[177.0], [178.0], [179.0]], [[180.0]])]], s0([[181.0], [182.0], [183.0]], [[184.0]])), s1([[s0([[185.0], [186.0], [187.0]], [[188.0]])]], s0([[189.0], [190.0], [191.0]], [[192.0]]))], [[s1([[s0([[193.0], [194.0], [195.0]], [[196.0]])]], s0([[197.0], [198.0], [199.0]], [[200.0]]))]]), s2([s1([[s0([[201.0], [202.0], [203.0]], [[204.0]])]], s0([[205.0], [206.0], [207.0]], [[208.0]])), s1([[s0([[209.0], [210.0], [211.0]], [[212.0]])]], s0([[213.0], [214.0], [215.0]], [[216.0]])), s1([[s0([[217.0], [218.0], [219.0]], [[220.0]])]], s0([[221.0], [222.0], [223.0]], [[224.0]]))], [[s1([[s0([[225.0], [226.0], [227.0]], [[228.0]])]], s0([[229.0], [230.0], [231.0]], [[232.0]]))]])], s5(s4(s0([[233.0], [234.0], [235.0]], [[236.0]]), s0([[237.0], [238.0], [239.0]], [[240.0]])), 241.0))])]] in
    let v2: Float = 242.0 in
    let initialResult: Float = 242.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()