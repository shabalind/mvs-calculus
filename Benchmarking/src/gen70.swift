  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: [s1]
    var p1: s1
  }
  struct s4 {
    var p0: s0
    var p1: s1
  }
  struct s5 {
    var p0: s4
    var p1: [s2]
    var p2: [[s1]]
    var p3: [[s1]]
    var p4: Double
    var p5: [s0]
  }
  struct s7 {
    var p0: [[s5]]
    var p1: [s1]
  }
  func f68(_ v0: Double) -> Double {
    var v5: Double = v0
    var v6: Double = v0
    var v2: Double = v6
    var v7: Double = v6
    var v4: Double = v7
    let v1: [Double] = [v4, v0, v7, v7, v5]
    let v3: Double = v1[0]
    var v8: [Double] = v1
    v8[4] = v4
    let v9: Double = v1[4]
    var v10: Double = v0
    var v12: [Double] = v8
    var v16: [Double] = v8
    let v15: Double = v16[2]
    var v13: Double = v9
    let v25: Double = v8[3]
    var v14: Double = v13
    v8[3] = v15
    var v30: [Double] = v16
    let v24: Double = v30[4]
    let v11: Double = v12[4]
    v16[2] = v15
    var v17: Double = v6
    v12[0] = v24
    let v42: [Double] = [v11, v9, v10]
    var v31: [Double] = v42
    let v38: Double = v1[3]
    v8[4] = v25
    v16[1] = v2
    v8[2] = v17
    v7 = v3
    var v20: [Double] = v31
    var v26: [Double] = v31
    var v41: [Double] = v26
    v30[2] = v2
    v41 = v26
    var v48: [Double] = v41
    var v22: [Double] = v20
    v12[3] = v38
    let v47: Double = v48[2]
    var v45: [Double] = v48
    v4 = v9
    v30[0] = v38
    var v35: [Double] = v45
    let v135: Double = v35[2]
    let v75: Double = v22[2]
    var v126: Double = v75
    var v239: Double = v14
    v8[4] = v47
    v41[1] = v239
    v126 = v135
    return v126
  }
  func f27(_ v0: s0, _ v1: s0) -> s0 {
    let v4: [[Double]] = v0.p0
    var v7: [[Double]] = v4
    let v15: [[Double]] = v0.p1
    let v9: [[Double]] = v1.p0
    let v5: [[Double]] = v1.p0
    let v29: [Double] = v9[2]
    var v38: [[Double]] = v9
    var v41: s0 = v0
    v41.p0 = v9
    let v25: [Double] = v7[1]
    let v51: [[Double]] = v1.p1
    var v44: [Double] = v29
    v41.p0 = v38
    let v58: [Double] = v15[0]
    var v62: s0 = v1
    v38[0] = v25
    var v56: [[Double]] = v5
    v62.p1 = v5
    let v83: [[Double]] = v62.p0
    v38[1] = v58
    var v50: s0 = v41
    v7[1] = v25
    var v120: [[Double]] = v15
    let v54: [Double] = v56[1]
    v50.p1 = v5
    v62.p1 = v120
    v56[2] = v54
    var v151: [Double] = v54
    var v197: s0 = v50
    v120[0] = v151
    v197.p0 = v51
    v7[0] = v25
    v120[2] = v44
    let v176: s1 = s1(p0: v197, p1: v50)
    v62.p0 = v83
    let v280: s0 = v176.p0
    v41.p1 = v83
    return v280
  }
  func f4(_ v0: s0) -> s0 {
    var v6: s0 = v0
    var v1: s0 = v6
    let v9: s0 = f27(v1, v1)
    var v7: s0 = v1
    let v2: s0 = f27(v9, v6)
    var v5: s0 = v7
    let v8: [[Double]] = v5.p0
    let v3: s0 = f27(v2, v5)
    let v10: [Double] = v8[0]
    let v11: [Double] = v8[2]
    v6.p0 = v8
    let v12: [Double] = v8[0]
    var v27: [Double] = v12
    var v19: [[Double]] = v8
    let v24: Double = v11[0]
    var v60: [[Double]] = v8
    var v33: [Double] = v11
    let v36: [Double] = v8[1]
    v5.p1 = v19
    v7.p0 = v60
    var v16: [[Double]] = v60
    v7.p0 = v8
    var v57: [[Double]] = v60
    v7.p0 = v57
    let v46: Double = v27[0]
    v19[0] = v33
    v33[0] = v46
    let v67: Double = f68(v24)
    v33[0] = v67
    v5.p0 = v57
    v6.p1 = v8
    v16[2] = v36
    v5.p1 = v16
    v7.p1 = v57
    v57[0] = v10
    return v3
  }
  @inline(never)
  func f0(_ v0: [s7], _ v1: s2, _ v2: [s0], _ v3: Double) -> Double {
    let v6: Double = f68(v3)
    var v4: [s0] = v2
    var v10: Double = v6
    let v12: s0 = v4[0]
    let v18: s0 = f4(v12)
    let v85: [[Double]] = v12.p0
    v4[0] = v12
    v4[0] = v18
    var v140: [[Double]] = v85
    let v56: [Double] = v140[2]
    var v161: Double = v10
    let v83: Double = v3 - v161
    let v156: Double = v56[0]
    let v334: Double = v83 - v3
    let v143: Double = v334 * v156
    return v143
  }
  func benchmark() {
    let v0: [s7] = [s7(p0: [[s5(p0: s4(p0: s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0], [5.0]]), p1: s1(p0: s0(p0: [[6.0], [7.0], [8.0]], p1: [[9.0], [10.0], [11.0]]), p1: s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0], [16.0], [17.0]]))), p1: [s2(p0: [s1(p0: s0(p0: [[18.0], [19.0], [20.0]], p1: [[21.0], [22.0], [23.0]]), p1: s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0], [28.0], [29.0]])), s1(p0: s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0], [35.0]]), p1: s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0], [40.0], [41.0]]))], p1: s1(p0: s0(p0: [[42.0], [43.0], [44.0]], p1: [[45.0], [46.0], [47.0]]), p1: s0(p0: [[48.0], [49.0], [50.0]], p1: [[51.0], [52.0], [53.0]])))], p2: [[s1(p0: s0(p0: [[54.0], [55.0], [56.0]], p1: [[57.0], [58.0], [59.0]]), p1: s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0], [64.0], [65.0]]))], [s1(p0: s0(p0: [[66.0], [67.0], [68.0]], p1: [[69.0], [70.0], [71.0]]), p1: s0(p0: [[72.0], [73.0], [74.0]], p1: [[75.0], [76.0], [77.0]]))]], p3: [[s1(p0: s0(p0: [[78.0], [79.0], [80.0]], p1: [[81.0], [82.0], [83.0]]), p1: s0(p0: [[84.0], [85.0], [86.0]], p1: [[87.0], [88.0], [89.0]]))]], p4: 90.0, p5: [s0(p0: [[91.0], [92.0], [93.0]], p1: [[94.0], [95.0], [96.0]]), s0(p0: [[97.0], [98.0], [99.0]], p1: [[100.0], [101.0], [102.0]]), s0(p0: [[103.0], [104.0], [105.0]], p1: [[106.0], [107.0], [108.0]])])], [s5(p0: s4(p0: s0(p0: [[109.0], [110.0], [111.0]], p1: [[112.0], [113.0], [114.0]]), p1: s1(p0: s0(p0: [[115.0], [116.0], [117.0]], p1: [[118.0], [119.0], [120.0]]), p1: s0(p0: [[121.0], [122.0], [123.0]], p1: [[124.0], [125.0], [126.0]]))), p1: [s2(p0: [s1(p0: s0(p0: [[127.0], [128.0], [129.0]], p1: [[130.0], [131.0], [132.0]]), p1: s0(p0: [[133.0], [134.0], [135.0]], p1: [[136.0], [137.0], [138.0]])), s1(p0: s0(p0: [[139.0], [140.0], [141.0]], p1: [[142.0], [143.0], [144.0]]), p1: s0(p0: [[145.0], [146.0], [147.0]], p1: [[148.0], [149.0], [150.0]]))], p1: s1(p0: s0(p0: [[151.0], [152.0], [153.0]], p1: [[154.0], [155.0], [156.0]]), p1: s0(p0: [[157.0], [158.0], [159.0]], p1: [[160.0], [161.0], [162.0]])))], p2: [[s1(p0: s0(p0: [[163.0], [164.0], [165.0]], p1: [[166.0], [167.0], [168.0]]), p1: s0(p0: [[169.0], [170.0], [171.0]], p1: [[172.0], [173.0], [174.0]]))], [s1(p0: s0(p0: [[175.0], [176.0], [177.0]], p1: [[178.0], [179.0], [180.0]]), p1: s0(p0: [[181.0], [182.0], [183.0]], p1: [[184.0], [185.0], [186.0]]))]], p3: [[s1(p0: s0(p0: [[187.0], [188.0], [189.0]], p1: [[190.0], [191.0], [192.0]]), p1: s0(p0: [[193.0], [194.0], [195.0]], p1: [[196.0], [197.0], [198.0]]))]], p4: 199.0, p5: [s0(p0: [[200.0], [201.0], [202.0]], p1: [[203.0], [204.0], [205.0]]), s0(p0: [[206.0], [207.0], [208.0]], p1: [[209.0], [210.0], [211.0]]), s0(p0: [[212.0], [213.0], [214.0]], p1: [[215.0], [216.0], [217.0]])])]], p1: [s1(p0: s0(p0: [[218.0], [219.0], [220.0]], p1: [[221.0], [222.0], [223.0]]), p1: s0(p0: [[224.0], [225.0], [226.0]], p1: [[227.0], [228.0], [229.0]]))]), s7(p0: [[s5(p0: s4(p0: s0(p0: [[230.0], [231.0], [232.0]], p1: [[233.0], [234.0], [235.0]]), p1: s1(p0: s0(p0: [[236.0], [237.0], [238.0]], p1: [[239.0], [240.0], [241.0]]), p1: s0(p0: [[242.0], [243.0], [244.0]], p1: [[245.0], [246.0], [247.0]]))), p1: [s2(p0: [s1(p0: s0(p0: [[248.0], [249.0], [250.0]], p1: [[251.0], [252.0], [253.0]]), p1: s0(p0: [[254.0], [255.0], [256.0]], p1: [[257.0], [258.0], [259.0]])), s1(p0: s0(p0: [[260.0], [261.0], [262.0]], p1: [[263.0], [264.0], [265.0]]), p1: s0(p0: [[266.0], [267.0], [268.0]], p1: [[269.0], [270.0], [271.0]]))], p1: s1(p0: s0(p0: [[272.0], [273.0], [274.0]], p1: [[275.0], [276.0], [277.0]]), p1: s0(p0: [[278.0], [279.0], [280.0]], p1: [[281.0], [282.0], [283.0]])))], p2: [[s1(p0: s0(p0: [[284.0], [285.0], [286.0]], p1: [[287.0], [288.0], [289.0]]), p1: s0(p0: [[290.0], [291.0], [292.0]], p1: [[293.0], [294.0], [295.0]]))], [s1(p0: s0(p0: [[296.0], [297.0], [298.0]], p1: [[299.0], [300.0], [301.0]]), p1: s0(p0: [[302.0], [303.0], [304.0]], p1: [[305.0], [306.0], [307.0]]))]], p3: [[s1(p0: s0(p0: [[308.0], [309.0], [310.0]], p1: [[311.0], [312.0], [313.0]]), p1: s0(p0: [[314.0], [315.0], [316.0]], p1: [[317.0], [318.0], [319.0]]))]], p4: 320.0, p5: [s0(p0: [[321.0], [322.0], [323.0]], p1: [[324.0], [325.0], [326.0]]), s0(p0: [[327.0], [328.0], [329.0]], p1: [[330.0], [331.0], [332.0]]), s0(p0: [[333.0], [334.0], [335.0]], p1: [[336.0], [337.0], [338.0]])])], [s5(p0: s4(p0: s0(p0: [[339.0], [340.0], [341.0]], p1: [[342.0], [343.0], [344.0]]), p1: s1(p0: s0(p0: [[345.0], [346.0], [347.0]], p1: [[348.0], [349.0], [350.0]]), p1: s0(p0: [[351.0], [352.0], [353.0]], p1: [[354.0], [355.0], [356.0]]))), p1: [s2(p0: [s1(p0: s0(p0: [[357.0], [358.0], [359.0]], p1: [[360.0], [361.0], [362.0]]), p1: s0(p0: [[363.0], [364.0], [365.0]], p1: [[366.0], [367.0], [368.0]])), s1(p0: s0(p0: [[369.0], [370.0], [371.0]], p1: [[372.0], [373.0], [374.0]]), p1: s0(p0: [[375.0], [376.0], [377.0]], p1: [[378.0], [379.0], [380.0]]))], p1: s1(p0: s0(p0: [[381.0], [382.0], [383.0]], p1: [[384.0], [385.0], [386.0]]), p1: s0(p0: [[387.0], [388.0], [389.0]], p1: [[390.0], [391.0], [392.0]])))], p2: [[s1(p0: s0(p0: [[393.0], [394.0], [395.0]], p1: [[396.0], [397.0], [398.0]]), p1: s0(p0: [[399.0], [400.0], [401.0]], p1: [[402.0], [403.0], [404.0]]))], [s1(p0: s0(p0: [[405.0], [406.0], [407.0]], p1: [[408.0], [409.0], [410.0]]), p1: s0(p0: [[411.0], [412.0], [413.0]], p1: [[414.0], [415.0], [416.0]]))]], p3: [[s1(p0: s0(p0: [[417.0], [418.0], [419.0]], p1: [[420.0], [421.0], [422.0]]), p1: s0(p0: [[423.0], [424.0], [425.0]], p1: [[426.0], [427.0], [428.0]]))]], p4: 429.0, p5: [s0(p0: [[430.0], [431.0], [432.0]], p1: [[433.0], [434.0], [435.0]]), s0(p0: [[436.0], [437.0], [438.0]], p1: [[439.0], [440.0], [441.0]]), s0(p0: [[442.0], [443.0], [444.0]], p1: [[445.0], [446.0], [447.0]])])]], p1: [s1(p0: s0(p0: [[448.0], [449.0], [450.0]], p1: [[451.0], [452.0], [453.0]]), p1: s0(p0: [[454.0], [455.0], [456.0]], p1: [[457.0], [458.0], [459.0]]))]), s7(p0: [[s5(p0: s4(p0: s0(p0: [[460.0], [461.0], [462.0]], p1: [[463.0], [464.0], [465.0]]), p1: s1(p0: s0(p0: [[466.0], [467.0], [468.0]], p1: [[469.0], [470.0], [471.0]]), p1: s0(p0: [[472.0], [473.0], [474.0]], p1: [[475.0], [476.0], [477.0]]))), p1: [s2(p0: [s1(p0: s0(p0: [[478.0], [479.0], [480.0]], p1: [[481.0], [482.0], [483.0]]), p1: s0(p0: [[484.0], [485.0], [486.0]], p1: [[487.0], [488.0], [489.0]])), s1(p0: s0(p0: [[490.0], [491.0], [492.0]], p1: [[493.0], [494.0], [495.0]]), p1: s0(p0: [[496.0], [497.0], [498.0]], p1: [[499.0], [500.0], [501.0]]))], p1: s1(p0: s0(p0: [[502.0], [503.0], [504.0]], p1: [[505.0], [506.0], [507.0]]), p1: s0(p0: [[508.0], [509.0], [510.0]], p1: [[511.0], [512.0], [513.0]])))], p2: [[s1(p0: s0(p0: [[514.0], [515.0], [516.0]], p1: [[517.0], [518.0], [519.0]]), p1: s0(p0: [[520.0], [521.0], [522.0]], p1: [[523.0], [524.0], [525.0]]))], [s1(p0: s0(p0: [[526.0], [527.0], [528.0]], p1: [[529.0], [530.0], [531.0]]), p1: s0(p0: [[532.0], [533.0], [534.0]], p1: [[535.0], [536.0], [537.0]]))]], p3: [[s1(p0: s0(p0: [[538.0], [539.0], [540.0]], p1: [[541.0], [542.0], [543.0]]), p1: s0(p0: [[544.0], [545.0], [546.0]], p1: [[547.0], [548.0], [549.0]]))]], p4: 550.0, p5: [s0(p0: [[551.0], [552.0], [553.0]], p1: [[554.0], [555.0], [556.0]]), s0(p0: [[557.0], [558.0], [559.0]], p1: [[560.0], [561.0], [562.0]]), s0(p0: [[563.0], [564.0], [565.0]], p1: [[566.0], [567.0], [568.0]])])], [s5(p0: s4(p0: s0(p0: [[569.0], [570.0], [571.0]], p1: [[572.0], [573.0], [574.0]]), p1: s1(p0: s0(p0: [[575.0], [576.0], [577.0]], p1: [[578.0], [579.0], [580.0]]), p1: s0(p0: [[581.0], [582.0], [583.0]], p1: [[584.0], [585.0], [586.0]]))), p1: [s2(p0: [s1(p0: s0(p0: [[587.0], [588.0], [589.0]], p1: [[590.0], [591.0], [592.0]]), p1: s0(p0: [[593.0], [594.0], [595.0]], p1: [[596.0], [597.0], [598.0]])), s1(p0: s0(p0: [[599.0], [600.0], [601.0]], p1: [[602.0], [603.0], [604.0]]), p1: s0(p0: [[605.0], [606.0], [607.0]], p1: [[608.0], [609.0], [610.0]]))], p1: s1(p0: s0(p0: [[611.0], [612.0], [613.0]], p1: [[614.0], [615.0], [616.0]]), p1: s0(p0: [[617.0], [618.0], [619.0]], p1: [[620.0], [621.0], [622.0]])))], p2: [[s1(p0: s0(p0: [[623.0], [624.0], [625.0]], p1: [[626.0], [627.0], [628.0]]), p1: s0(p0: [[629.0], [630.0], [631.0]], p1: [[632.0], [633.0], [634.0]]))], [s1(p0: s0(p0: [[635.0], [636.0], [637.0]], p1: [[638.0], [639.0], [640.0]]), p1: s0(p0: [[641.0], [642.0], [643.0]], p1: [[644.0], [645.0], [646.0]]))]], p3: [[s1(p0: s0(p0: [[647.0], [648.0], [649.0]], p1: [[650.0], [651.0], [652.0]]), p1: s0(p0: [[653.0], [654.0], [655.0]], p1: [[656.0], [657.0], [658.0]]))]], p4: 659.0, p5: [s0(p0: [[660.0], [661.0], [662.0]], p1: [[663.0], [664.0], [665.0]]), s0(p0: [[666.0], [667.0], [668.0]], p1: [[669.0], [670.0], [671.0]]), s0(p0: [[672.0], [673.0], [674.0]], p1: [[675.0], [676.0], [677.0]])])]], p1: [s1(p0: s0(p0: [[678.0], [679.0], [680.0]], p1: [[681.0], [682.0], [683.0]]), p1: s0(p0: [[684.0], [685.0], [686.0]], p1: [[687.0], [688.0], [689.0]]))])]
    let v1: s2 = s2(p0: [s1(p0: s0(p0: [[690.0], [691.0], [692.0]], p1: [[693.0], [694.0], [695.0]]), p1: s0(p0: [[696.0], [697.0], [698.0]], p1: [[699.0], [700.0], [701.0]])), s1(p0: s0(p0: [[702.0], [703.0], [704.0]], p1: [[705.0], [706.0], [707.0]]), p1: s0(p0: [[708.0], [709.0], [710.0]], p1: [[711.0], [712.0], [713.0]]))], p1: s1(p0: s0(p0: [[714.0], [715.0], [716.0]], p1: [[717.0], [718.0], [719.0]]), p1: s0(p0: [[720.0], [721.0], [722.0]], p1: [[723.0], [724.0], [725.0]])))
    let v2: [s0] = [s0(p0: [[726.0], [727.0], [728.0]], p1: [[729.0], [730.0], [731.0]])]
    let v3: Double = 732.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 732.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
