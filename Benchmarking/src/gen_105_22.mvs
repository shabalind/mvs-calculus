  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: [s0]
  } in
  let f38: (s1) -> s1 = (v0: s1) -> s1 {
    let v4: s0 = v0.p1 in
    let v1: s0 = v0.p0 in
    let v11: s0 = v0.p1 in
    let v6: s0 = v0.p0 in
    let v7: [[Float]] = v1.p0 in
    var v12: [[Float]] = v7 in
    let v15: [Float] = v7[0] in
    let v10: [[Float]] = v4.p0 in
    let v3: s0 = v0.p0 in
    let v8: [[Float]] = v6.p1 in
    let v17: [[Float]] = v11.p1 in
    v12[0] = v15 in
    v12[0] = v15 in
    var v9: [[Float]] = v7 in
    let v19: [Float] = v8[0] in
    let v18: [Float] = v8[1] in
    let v26: [Float] = v17[2] in
    let v16: s0 = v0.p1 in
    let v21: [[Float]] = v3.p1 in
    v12[0] = v19 in
    var v40: [[Float]] = v10 in
    v40 = v9 in
    v40[0] = v26 in
    let v24: [Float] = v7[0] in
    v40 = v12 in
    let v20: [Float] = v21[0] in
    v12[0] = v24 in
    v40[0] = v15 in
    let v38: [Float] = v17[1] in
    v9[0] = v18 in
    let v33: [Float] = v9[0] in
    v9[0] = v20 in
    var v34: s0 = v16 in
    v40[0] = v38 in
    let v59: s1 = s1(v4, v34) in
    v34.p1 = v8 in
    v9[0] = v33 in
    v34.p0 = v40 in
    v59
  } in
  let f16: (s2) -> s2 = (v0: s2) -> s2 {
    var v13: s2 = v0 in
    v13
  } in
  let f6: (s0) -> s0 = (v0: s0) -> s0 {
    var v5: s0 = v0 in
    let v1: s1 = s1(v0, v0) in
    let v4: [[Float]] = v5.p0 in
    var v7: [[Float]] = v4 in
    let v3: [Float] = v4[0] in
    let v12: [Float] = v7[0] in
    let v17: s0 = v1.p1 in
    v7[0] = v3 in
    let v6: s1 = f38(v1) in
    let v13: s1 = f38(v1) in
    let v11: s1 = f38(v13) in
    let v19: [[Float]] = v0.p1 in
    v7[0] = v3 in
    let v25: s1 = f38(v11) in
    v5.p0 = v4 in
    v5.p0 = v4 in
    let v34: [Float] = v19[2] in
    var v27: [[Float]] = v4 in
    var v33: [[Float]] = v19 in
    v5.p0 = v27 in
    var v40: [[Float]] = v33 in
    v33 = v40 in
    let v44: s0 = v25.p1 in
    let v22: s0 = s0(v7, v40) in
    let v35: [[Float]] = v44.p0 in
    let v26: [Float] = v7[0] in
    v27[0] = v34 in
    let v15: [Float] = v40[0] in
    v40[0] = v12 in
    let v51: [[Float]] = v17.p0 in
    let v70: [Float] = v40[2] in
    v5.p0 = v51 in
    v7[0] = v15 in
    v7[0] = v70 in
    v5.p1 = v19 in
    let v112: s0 = v6.p1 in
    var v121: s0 = v22 in
    v5.p0 = v35 in
    let v83: [[Float]] = v112.p0 in
    v7[0] = v26 in
    v5.p0 = v83 in
    v27 = v83 in
    v121
  } in
  let noinline_f0: ([s2], Float) -> Float = (v0: [s2], v1: Float) -> Float {
    let v3: s2 = v0[1] in
    let v6: s2 = f16(v3) in
    let v19: [s0] = v6.p0 in
    let v23: s0 = v19[0] in
    let v24: s0 = f6(v23) in
    let v52: [[Float]] = v24.p0 in
    var v56: [[Float]] = v52 in
    let v86: [Float] = v56[0] in
    var v96: [Float] = v86 in
    let v113: Float = v86[0] in
    var v210: Float = v113 in
    v56[0] = v96 in
    v210
  } in
  fun loop(i: Int, v0: [s2], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2([s0([[0.0]], [[1.0], [2.0], [3.0]])], [s0([[4.0]], [[5.0], [6.0], [7.0]])]), s2([s0([[8.0]], [[9.0], [10.0], [11.0]])], [s0([[12.0]], [[13.0], [14.0], [15.0]])]), s2([s0([[16.0]], [[17.0], [18.0], [19.0]])], [s0([[20.0]], [[21.0], [22.0], [23.0]])])] in
    let v1: Float = 24.0 in
    let initialResult: Float = 24.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()