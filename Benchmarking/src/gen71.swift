  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: Double
    var p1: s0
  }
  struct s2 {
    var p0: [s0]
    var p1: [s1]
  }
  struct s3 {
    var p0: s1
    var p1: s2
    var p2: s0
    var p3: s2
    var p4: [s0]
    var p5: [s1]
    var p6: s2
    var p7: s1
  }
  struct s4 {
    var p0: s0
    var p1: s0
  }
  struct s5 {
    var p0: [[s4]]
    var p1: [s3]
  }
  struct s8 {
    var p0: s1
    var p1: s2
  }
  func f2(_ v0: [s1], _ v1: s5) -> [s1] {
    var v149: [s1] = v0
    return v149
  }
  @inline(never)
  func f0(_ v0: s8, _ v1: [[s5]], _ v2: Double) -> Double {
    let v7: [s5] = v1[2]
    let v3: s5 = v7[0]
    let v4: [s5] = v1[2]
    let v14: s5 = v4[0]
    let v16: [s3] = v14.p1
    var v9: Double = v2
    let v13: [Double] = [v2, v2, v9, v9, v2, v2, v2]
    let v21: s2 = v0.p1
    v9 = v2
    let v20: s3 = v16[0]
    let v12: s3 = v16[0]
    var v36: s3 = v12
    v36 = v20
    let v24: s2 = v36.p3
    let v50: [s1] = v21.p1
    let v94: [s1] = f2(v50, v3)
    let v37: [s0] = v24.p0
    v36.p1 = v21
    let v67: Double = v13[2]
    let v29: s0 = v37[1]
    let v95: [[Double]] = v29.p1
    var v73: [[Double]] = v95
    let v65: [Double] = v73[1]
    let v76: s1 = v94[2]
    let v184: Double = v76.p0
    let v189: Double = v184 - v67
    let v93: Double = v65[0]
    let v160: Double = v189 - v93
    return v160
  }
  func benchmark() {
    let v0: s8 = s8(p0: s1(p0: 0.0, p1: s0(p0: [[1.0], [2.0]], p1: [[3.0], [4.0], [5.0]])), p1: s2(p0: [s0(p0: [[6.0], [7.0]], p1: [[8.0], [9.0], [10.0]]), s0(p0: [[11.0], [12.0]], p1: [[13.0], [14.0], [15.0]])], p1: [s1(p0: 16.0, p1: s0(p0: [[17.0], [18.0]], p1: [[19.0], [20.0], [21.0]])), s1(p0: 22.0, p1: s0(p0: [[23.0], [24.0]], p1: [[25.0], [26.0], [27.0]])), s1(p0: 28.0, p1: s0(p0: [[29.0], [30.0]], p1: [[31.0], [32.0], [33.0]]))]))
    let v1: [[s5]] = [[s5(p0: [[s4(p0: s0(p0: [[34.0], [35.0]], p1: [[36.0], [37.0], [38.0]]), p1: s0(p0: [[39.0], [40.0]], p1: [[41.0], [42.0], [43.0]]))], [s4(p0: s0(p0: [[44.0], [45.0]], p1: [[46.0], [47.0], [48.0]]), p1: s0(p0: [[49.0], [50.0]], p1: [[51.0], [52.0], [53.0]]))]], p1: [s3(p0: s1(p0: 54.0, p1: s0(p0: [[55.0], [56.0]], p1: [[57.0], [58.0], [59.0]])), p1: s2(p0: [s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0], [64.0]]), s0(p0: [[65.0], [66.0]], p1: [[67.0], [68.0], [69.0]])], p1: [s1(p0: 70.0, p1: s0(p0: [[71.0], [72.0]], p1: [[73.0], [74.0], [75.0]])), s1(p0: 76.0, p1: s0(p0: [[77.0], [78.0]], p1: [[79.0], [80.0], [81.0]])), s1(p0: 82.0, p1: s0(p0: [[83.0], [84.0]], p1: [[85.0], [86.0], [87.0]]))]), p2: s0(p0: [[88.0], [89.0]], p1: [[90.0], [91.0], [92.0]]), p3: s2(p0: [s0(p0: [[93.0], [94.0]], p1: [[95.0], [96.0], [97.0]]), s0(p0: [[98.0], [99.0]], p1: [[100.0], [101.0], [102.0]])], p1: [s1(p0: 103.0, p1: s0(p0: [[104.0], [105.0]], p1: [[106.0], [107.0], [108.0]])), s1(p0: 109.0, p1: s0(p0: [[110.0], [111.0]], p1: [[112.0], [113.0], [114.0]])), s1(p0: 115.0, p1: s0(p0: [[116.0], [117.0]], p1: [[118.0], [119.0], [120.0]]))]), p4: [s0(p0: [[121.0], [122.0]], p1: [[123.0], [124.0], [125.0]])], p5: [s1(p0: 126.0, p1: s0(p0: [[127.0], [128.0]], p1: [[129.0], [130.0], [131.0]])), s1(p0: 132.0, p1: s0(p0: [[133.0], [134.0]], p1: [[135.0], [136.0], [137.0]]))], p6: s2(p0: [s0(p0: [[138.0], [139.0]], p1: [[140.0], [141.0], [142.0]]), s0(p0: [[143.0], [144.0]], p1: [[145.0], [146.0], [147.0]])], p1: [s1(p0: 148.0, p1: s0(p0: [[149.0], [150.0]], p1: [[151.0], [152.0], [153.0]])), s1(p0: 154.0, p1: s0(p0: [[155.0], [156.0]], p1: [[157.0], [158.0], [159.0]])), s1(p0: 160.0, p1: s0(p0: [[161.0], [162.0]], p1: [[163.0], [164.0], [165.0]]))]), p7: s1(p0: 166.0, p1: s0(p0: [[167.0], [168.0]], p1: [[169.0], [170.0], [171.0]])))])], [s5(p0: [[s4(p0: s0(p0: [[172.0], [173.0]], p1: [[174.0], [175.0], [176.0]]), p1: s0(p0: [[177.0], [178.0]], p1: [[179.0], [180.0], [181.0]]))], [s4(p0: s0(p0: [[182.0], [183.0]], p1: [[184.0], [185.0], [186.0]]), p1: s0(p0: [[187.0], [188.0]], p1: [[189.0], [190.0], [191.0]]))]], p1: [s3(p0: s1(p0: 192.0, p1: s0(p0: [[193.0], [194.0]], p1: [[195.0], [196.0], [197.0]])), p1: s2(p0: [s0(p0: [[198.0], [199.0]], p1: [[200.0], [201.0], [202.0]]), s0(p0: [[203.0], [204.0]], p1: [[205.0], [206.0], [207.0]])], p1: [s1(p0: 208.0, p1: s0(p0: [[209.0], [210.0]], p1: [[211.0], [212.0], [213.0]])), s1(p0: 214.0, p1: s0(p0: [[215.0], [216.0]], p1: [[217.0], [218.0], [219.0]])), s1(p0: 220.0, p1: s0(p0: [[221.0], [222.0]], p1: [[223.0], [224.0], [225.0]]))]), p2: s0(p0: [[226.0], [227.0]], p1: [[228.0], [229.0], [230.0]]), p3: s2(p0: [s0(p0: [[231.0], [232.0]], p1: [[233.0], [234.0], [235.0]]), s0(p0: [[236.0], [237.0]], p1: [[238.0], [239.0], [240.0]])], p1: [s1(p0: 241.0, p1: s0(p0: [[242.0], [243.0]], p1: [[244.0], [245.0], [246.0]])), s1(p0: 247.0, p1: s0(p0: [[248.0], [249.0]], p1: [[250.0], [251.0], [252.0]])), s1(p0: 253.0, p1: s0(p0: [[254.0], [255.0]], p1: [[256.0], [257.0], [258.0]]))]), p4: [s0(p0: [[259.0], [260.0]], p1: [[261.0], [262.0], [263.0]])], p5: [s1(p0: 264.0, p1: s0(p0: [[265.0], [266.0]], p1: [[267.0], [268.0], [269.0]])), s1(p0: 270.0, p1: s0(p0: [[271.0], [272.0]], p1: [[273.0], [274.0], [275.0]]))], p6: s2(p0: [s0(p0: [[276.0], [277.0]], p1: [[278.0], [279.0], [280.0]]), s0(p0: [[281.0], [282.0]], p1: [[283.0], [284.0], [285.0]])], p1: [s1(p0: 286.0, p1: s0(p0: [[287.0], [288.0]], p1: [[289.0], [290.0], [291.0]])), s1(p0: 292.0, p1: s0(p0: [[293.0], [294.0]], p1: [[295.0], [296.0], [297.0]])), s1(p0: 298.0, p1: s0(p0: [[299.0], [300.0]], p1: [[301.0], [302.0], [303.0]]))]), p7: s1(p0: 304.0, p1: s0(p0: [[305.0], [306.0]], p1: [[307.0], [308.0], [309.0]])))])], [s5(p0: [[s4(p0: s0(p0: [[310.0], [311.0]], p1: [[312.0], [313.0], [314.0]]), p1: s0(p0: [[315.0], [316.0]], p1: [[317.0], [318.0], [319.0]]))], [s4(p0: s0(p0: [[320.0], [321.0]], p1: [[322.0], [323.0], [324.0]]), p1: s0(p0: [[325.0], [326.0]], p1: [[327.0], [328.0], [329.0]]))]], p1: [s3(p0: s1(p0: 330.0, p1: s0(p0: [[331.0], [332.0]], p1: [[333.0], [334.0], [335.0]])), p1: s2(p0: [s0(p0: [[336.0], [337.0]], p1: [[338.0], [339.0], [340.0]]), s0(p0: [[341.0], [342.0]], p1: [[343.0], [344.0], [345.0]])], p1: [s1(p0: 346.0, p1: s0(p0: [[347.0], [348.0]], p1: [[349.0], [350.0], [351.0]])), s1(p0: 352.0, p1: s0(p0: [[353.0], [354.0]], p1: [[355.0], [356.0], [357.0]])), s1(p0: 358.0, p1: s0(p0: [[359.0], [360.0]], p1: [[361.0], [362.0], [363.0]]))]), p2: s0(p0: [[364.0], [365.0]], p1: [[366.0], [367.0], [368.0]]), p3: s2(p0: [s0(p0: [[369.0], [370.0]], p1: [[371.0], [372.0], [373.0]]), s0(p0: [[374.0], [375.0]], p1: [[376.0], [377.0], [378.0]])], p1: [s1(p0: 379.0, p1: s0(p0: [[380.0], [381.0]], p1: [[382.0], [383.0], [384.0]])), s1(p0: 385.0, p1: s0(p0: [[386.0], [387.0]], p1: [[388.0], [389.0], [390.0]])), s1(p0: 391.0, p1: s0(p0: [[392.0], [393.0]], p1: [[394.0], [395.0], [396.0]]))]), p4: [s0(p0: [[397.0], [398.0]], p1: [[399.0], [400.0], [401.0]])], p5: [s1(p0: 402.0, p1: s0(p0: [[403.0], [404.0]], p1: [[405.0], [406.0], [407.0]])), s1(p0: 408.0, p1: s0(p0: [[409.0], [410.0]], p1: [[411.0], [412.0], [413.0]]))], p6: s2(p0: [s0(p0: [[414.0], [415.0]], p1: [[416.0], [417.0], [418.0]]), s0(p0: [[419.0], [420.0]], p1: [[421.0], [422.0], [423.0]])], p1: [s1(p0: 424.0, p1: s0(p0: [[425.0], [426.0]], p1: [[427.0], [428.0], [429.0]])), s1(p0: 430.0, p1: s0(p0: [[431.0], [432.0]], p1: [[433.0], [434.0], [435.0]])), s1(p0: 436.0, p1: s0(p0: [[437.0], [438.0]], p1: [[439.0], [440.0], [441.0]]))]), p7: s1(p0: 442.0, p1: s0(p0: [[443.0], [444.0]], p1: [[445.0], [446.0], [447.0]])))])]]
    let v2: Double = 448.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 448.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
