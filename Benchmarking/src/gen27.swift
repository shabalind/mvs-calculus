  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: s1
    var p1: s0
  }
  struct s3 {
    var p0: [[s2]]
    var p1: s2
  }
  struct s5 {
    var p0: s0
    var p1: [s1]
  }
  struct s6 {
    var p0: [s5]
    var p1: [[s3]]
  }
  struct s11 {
    var p0: s0
    var p1: s6
  }
  func f52(_ v0: s11, _ v1: s1) -> s11 {
    let v3: s0 = v1.p0
    var v2: s11 = v0
    let v6: [[Double]] = v3.p2
    let v7: s0 = v1.p0
    v2.p0 = v7
    var v5: s11 = v2
    let v9: [s0] = v1.p1
    let v12: s1 = s1(p0: v3, p1: v9)
    let v11: s0 = v5.p0
    v5.p0 = v7
    var v28: s11 = v5
    let v27: s6 = v5.p1
    let v33: s0 = v12.p0
    v2.p0 = v33
    v2.p1 = v27
    var v15: s0 = v11
    v5.p0 = v15
    v15.p2 = v6
    let v123: s0 = v9[1]
    var v63: s11 = v28
    let v57: [[Double]] = v123.p1
    let v51: s6 = v63.p1
    v15.p0 = v57
    var v71: s6 = v51
    v15.p2 = v6
    v5.p1 = v71
    return v63
  }
  func f43(_ v0: s11) -> s11 {
    var v5: s11 = v0
    var v3: s11 = v0
    let v6: s6 = v3.p1
    let v9: s0 = v0.p0
    let v13: s6 = v3.p1
    v5.p0 = v9
    let v10: s11 = s11(p0: v9, p1: v13)
    v3.p1 = v13
    let v22: s0 = v10.p0
    let v30: s6 = v5.p1
    v5.p1 = v13
    v3.p0 = v9
    let v26: [s6] = [v13, v6, v13, v30, v30]
    v3.p0 = v9
    let v42: s6 = v26[1]
    let v28: s11 = s11(p0: v9, p1: v42)
    v3.p0 = v22
    return v28
  }
  func f24(_ v0: s11, _ v1: Double) -> Double {
    let v7: Double = v1 + v1
    let v8: s11 = f43(v0)
    var v5: Double = v7
    let v4: s0 = v8.p0
    let v11: [[Double]] = v4.p0
    let v9: [[Double]] = v4.p0
    let v14: [[Double]] = v4.p0
    var v60: Double = v5
    var v49: s0 = v4
    v49.p1 = v9
    v60 = v5
    v5 = v60
    var v53: s0 = v49
    let v50: [[Double]] = v53.p2
    let v48: [Double] = v50[0]
    let v64: [[[Double]]] = [v9, v11, v14, v11, v11, v11]
    let v128: Double = v48[0]
    var v59: Double = v128
    var v142: [[[Double]]] = v64
    let v163: [[Double]] = v142[3]
    v49.p1 = v11
    v142[0] = v11
    v53.p1 = v9
    let v159: Double = v60 / v59
    v53.p1 = v163
    return v159
  }
  @inline(never)
  func f0(_ v0: [s11], _ v1: s1, _ v2: Double) -> Double {
    let v6: s0 = v1.p0
    let v3: s11 = v0[0]
    let v7: s2 = s2(p0: v1, p1: v6)
    let v9: Double = f24(v3, v2)
    var v8: s11 = v3
    let v16: s11 = f43(v8)
    let v10: s11 = f52(v16, v1)
    let v15: Double = f24(v16, v9)
    v8.p0 = v6
    let v20: s11 = f43(v16)
    let v25: s0 = v7.p1
    let v17: s2 = s2(p0: v1, p1: v25)
    let v18: [s11] = [v10, v16, v20, v16, v10]
    v8.p0 = v6
    let v19: s0 = v17.p1
    let v101: s11 = v18[0]
    v8.p0 = v19
    let v79: Double = f24(v101, v15)
    return v79
  }
  func benchmark() {
    let v0: [s11] = [s11(p0: s0(p0: [[0.0]], p1: [[1.0]], p2: [[2.0], [3.0]]), p1: s6(p0: [s5(p0: s0(p0: [[4.0]], p1: [[5.0]], p2: [[6.0], [7.0]]), p1: [s1(p0: s0(p0: [[8.0]], p1: [[9.0]], p2: [[10.0], [11.0]]), p1: [s0(p0: [[12.0]], p1: [[13.0]], p2: [[14.0], [15.0]]), s0(p0: [[16.0]], p1: [[17.0]], p2: [[18.0], [19.0]])])])], p1: [[s3(p0: [[s2(p0: s1(p0: s0(p0: [[20.0]], p1: [[21.0]], p2: [[22.0], [23.0]]), p1: [s0(p0: [[24.0]], p1: [[25.0]], p2: [[26.0], [27.0]]), s0(p0: [[28.0]], p1: [[29.0]], p2: [[30.0], [31.0]])]), p1: s0(p0: [[32.0]], p1: [[33.0]], p2: [[34.0], [35.0]]))], [s2(p0: s1(p0: s0(p0: [[36.0]], p1: [[37.0]], p2: [[38.0], [39.0]]), p1: [s0(p0: [[40.0]], p1: [[41.0]], p2: [[42.0], [43.0]]), s0(p0: [[44.0]], p1: [[45.0]], p2: [[46.0], [47.0]])]), p1: s0(p0: [[48.0]], p1: [[49.0]], p2: [[50.0], [51.0]]))], [s2(p0: s1(p0: s0(p0: [[52.0]], p1: [[53.0]], p2: [[54.0], [55.0]]), p1: [s0(p0: [[56.0]], p1: [[57.0]], p2: [[58.0], [59.0]]), s0(p0: [[60.0]], p1: [[61.0]], p2: [[62.0], [63.0]])]), p1: s0(p0: [[64.0]], p1: [[65.0]], p2: [[66.0], [67.0]]))]], p1: s2(p0: s1(p0: s0(p0: [[68.0]], p1: [[69.0]], p2: [[70.0], [71.0]]), p1: [s0(p0: [[72.0]], p1: [[73.0]], p2: [[74.0], [75.0]]), s0(p0: [[76.0]], p1: [[77.0]], p2: [[78.0], [79.0]])]), p1: s0(p0: [[80.0]], p1: [[81.0]], p2: [[82.0], [83.0]])))], [s3(p0: [[s2(p0: s1(p0: s0(p0: [[84.0]], p1: [[85.0]], p2: [[86.0], [87.0]]), p1: [s0(p0: [[88.0]], p1: [[89.0]], p2: [[90.0], [91.0]]), s0(p0: [[92.0]], p1: [[93.0]], p2: [[94.0], [95.0]])]), p1: s0(p0: [[96.0]], p1: [[97.0]], p2: [[98.0], [99.0]]))], [s2(p0: s1(p0: s0(p0: [[100.0]], p1: [[101.0]], p2: [[102.0], [103.0]]), p1: [s0(p0: [[104.0]], p1: [[105.0]], p2: [[106.0], [107.0]]), s0(p0: [[108.0]], p1: [[109.0]], p2: [[110.0], [111.0]])]), p1: s0(p0: [[112.0]], p1: [[113.0]], p2: [[114.0], [115.0]]))], [s2(p0: s1(p0: s0(p0: [[116.0]], p1: [[117.0]], p2: [[118.0], [119.0]]), p1: [s0(p0: [[120.0]], p1: [[121.0]], p2: [[122.0], [123.0]]), s0(p0: [[124.0]], p1: [[125.0]], p2: [[126.0], [127.0]])]), p1: s0(p0: [[128.0]], p1: [[129.0]], p2: [[130.0], [131.0]]))]], p1: s2(p0: s1(p0: s0(p0: [[132.0]], p1: [[133.0]], p2: [[134.0], [135.0]]), p1: [s0(p0: [[136.0]], p1: [[137.0]], p2: [[138.0], [139.0]]), s0(p0: [[140.0]], p1: [[141.0]], p2: [[142.0], [143.0]])]), p1: s0(p0: [[144.0]], p1: [[145.0]], p2: [[146.0], [147.0]])))]])), s11(p0: s0(p0: [[148.0]], p1: [[149.0]], p2: [[150.0], [151.0]]), p1: s6(p0: [s5(p0: s0(p0: [[152.0]], p1: [[153.0]], p2: [[154.0], [155.0]]), p1: [s1(p0: s0(p0: [[156.0]], p1: [[157.0]], p2: [[158.0], [159.0]]), p1: [s0(p0: [[160.0]], p1: [[161.0]], p2: [[162.0], [163.0]]), s0(p0: [[164.0]], p1: [[165.0]], p2: [[166.0], [167.0]])])])], p1: [[s3(p0: [[s2(p0: s1(p0: s0(p0: [[168.0]], p1: [[169.0]], p2: [[170.0], [171.0]]), p1: [s0(p0: [[172.0]], p1: [[173.0]], p2: [[174.0], [175.0]]), s0(p0: [[176.0]], p1: [[177.0]], p2: [[178.0], [179.0]])]), p1: s0(p0: [[180.0]], p1: [[181.0]], p2: [[182.0], [183.0]]))], [s2(p0: s1(p0: s0(p0: [[184.0]], p1: [[185.0]], p2: [[186.0], [187.0]]), p1: [s0(p0: [[188.0]], p1: [[189.0]], p2: [[190.0], [191.0]]), s0(p0: [[192.0]], p1: [[193.0]], p2: [[194.0], [195.0]])]), p1: s0(p0: [[196.0]], p1: [[197.0]], p2: [[198.0], [199.0]]))], [s2(p0: s1(p0: s0(p0: [[200.0]], p1: [[201.0]], p2: [[202.0], [203.0]]), p1: [s0(p0: [[204.0]], p1: [[205.0]], p2: [[206.0], [207.0]]), s0(p0: [[208.0]], p1: [[209.0]], p2: [[210.0], [211.0]])]), p1: s0(p0: [[212.0]], p1: [[213.0]], p2: [[214.0], [215.0]]))]], p1: s2(p0: s1(p0: s0(p0: [[216.0]], p1: [[217.0]], p2: [[218.0], [219.0]]), p1: [s0(p0: [[220.0]], p1: [[221.0]], p2: [[222.0], [223.0]]), s0(p0: [[224.0]], p1: [[225.0]], p2: [[226.0], [227.0]])]), p1: s0(p0: [[228.0]], p1: [[229.0]], p2: [[230.0], [231.0]])))], [s3(p0: [[s2(p0: s1(p0: s0(p0: [[232.0]], p1: [[233.0]], p2: [[234.0], [235.0]]), p1: [s0(p0: [[236.0]], p1: [[237.0]], p2: [[238.0], [239.0]]), s0(p0: [[240.0]], p1: [[241.0]], p2: [[242.0], [243.0]])]), p1: s0(p0: [[244.0]], p1: [[245.0]], p2: [[246.0], [247.0]]))], [s2(p0: s1(p0: s0(p0: [[248.0]], p1: [[249.0]], p2: [[250.0], [251.0]]), p1: [s0(p0: [[252.0]], p1: [[253.0]], p2: [[254.0], [255.0]]), s0(p0: [[256.0]], p1: [[257.0]], p2: [[258.0], [259.0]])]), p1: s0(p0: [[260.0]], p1: [[261.0]], p2: [[262.0], [263.0]]))], [s2(p0: s1(p0: s0(p0: [[264.0]], p1: [[265.0]], p2: [[266.0], [267.0]]), p1: [s0(p0: [[268.0]], p1: [[269.0]], p2: [[270.0], [271.0]]), s0(p0: [[272.0]], p1: [[273.0]], p2: [[274.0], [275.0]])]), p1: s0(p0: [[276.0]], p1: [[277.0]], p2: [[278.0], [279.0]]))]], p1: s2(p0: s1(p0: s0(p0: [[280.0]], p1: [[281.0]], p2: [[282.0], [283.0]]), p1: [s0(p0: [[284.0]], p1: [[285.0]], p2: [[286.0], [287.0]]), s0(p0: [[288.0]], p1: [[289.0]], p2: [[290.0], [291.0]])]), p1: s0(p0: [[292.0]], p1: [[293.0]], p2: [[294.0], [295.0]])))]])), s11(p0: s0(p0: [[296.0]], p1: [[297.0]], p2: [[298.0], [299.0]]), p1: s6(p0: [s5(p0: s0(p0: [[300.0]], p1: [[301.0]], p2: [[302.0], [303.0]]), p1: [s1(p0: s0(p0: [[304.0]], p1: [[305.0]], p2: [[306.0], [307.0]]), p1: [s0(p0: [[308.0]], p1: [[309.0]], p2: [[310.0], [311.0]]), s0(p0: [[312.0]], p1: [[313.0]], p2: [[314.0], [315.0]])])])], p1: [[s3(p0: [[s2(p0: s1(p0: s0(p0: [[316.0]], p1: [[317.0]], p2: [[318.0], [319.0]]), p1: [s0(p0: [[320.0]], p1: [[321.0]], p2: [[322.0], [323.0]]), s0(p0: [[324.0]], p1: [[325.0]], p2: [[326.0], [327.0]])]), p1: s0(p0: [[328.0]], p1: [[329.0]], p2: [[330.0], [331.0]]))], [s2(p0: s1(p0: s0(p0: [[332.0]], p1: [[333.0]], p2: [[334.0], [335.0]]), p1: [s0(p0: [[336.0]], p1: [[337.0]], p2: [[338.0], [339.0]]), s0(p0: [[340.0]], p1: [[341.0]], p2: [[342.0], [343.0]])]), p1: s0(p0: [[344.0]], p1: [[345.0]], p2: [[346.0], [347.0]]))], [s2(p0: s1(p0: s0(p0: [[348.0]], p1: [[349.0]], p2: [[350.0], [351.0]]), p1: [s0(p0: [[352.0]], p1: [[353.0]], p2: [[354.0], [355.0]]), s0(p0: [[356.0]], p1: [[357.0]], p2: [[358.0], [359.0]])]), p1: s0(p0: [[360.0]], p1: [[361.0]], p2: [[362.0], [363.0]]))]], p1: s2(p0: s1(p0: s0(p0: [[364.0]], p1: [[365.0]], p2: [[366.0], [367.0]]), p1: [s0(p0: [[368.0]], p1: [[369.0]], p2: [[370.0], [371.0]]), s0(p0: [[372.0]], p1: [[373.0]], p2: [[374.0], [375.0]])]), p1: s0(p0: [[376.0]], p1: [[377.0]], p2: [[378.0], [379.0]])))], [s3(p0: [[s2(p0: s1(p0: s0(p0: [[380.0]], p1: [[381.0]], p2: [[382.0], [383.0]]), p1: [s0(p0: [[384.0]], p1: [[385.0]], p2: [[386.0], [387.0]]), s0(p0: [[388.0]], p1: [[389.0]], p2: [[390.0], [391.0]])]), p1: s0(p0: [[392.0]], p1: [[393.0]], p2: [[394.0], [395.0]]))], [s2(p0: s1(p0: s0(p0: [[396.0]], p1: [[397.0]], p2: [[398.0], [399.0]]), p1: [s0(p0: [[400.0]], p1: [[401.0]], p2: [[402.0], [403.0]]), s0(p0: [[404.0]], p1: [[405.0]], p2: [[406.0], [407.0]])]), p1: s0(p0: [[408.0]], p1: [[409.0]], p2: [[410.0], [411.0]]))], [s2(p0: s1(p0: s0(p0: [[412.0]], p1: [[413.0]], p2: [[414.0], [415.0]]), p1: [s0(p0: [[416.0]], p1: [[417.0]], p2: [[418.0], [419.0]]), s0(p0: [[420.0]], p1: [[421.0]], p2: [[422.0], [423.0]])]), p1: s0(p0: [[424.0]], p1: [[425.0]], p2: [[426.0], [427.0]]))]], p1: s2(p0: s1(p0: s0(p0: [[428.0]], p1: [[429.0]], p2: [[430.0], [431.0]]), p1: [s0(p0: [[432.0]], p1: [[433.0]], p2: [[434.0], [435.0]]), s0(p0: [[436.0]], p1: [[437.0]], p2: [[438.0], [439.0]])]), p1: s0(p0: [[440.0]], p1: [[441.0]], p2: [[442.0], [443.0]])))]]))]
    let v1: s1 = s1(p0: s0(p0: [[444.0]], p1: [[445.0]], p2: [[446.0], [447.0]]), p1: [s0(p0: [[448.0]], p1: [[449.0]], p2: [[450.0], [451.0]]), s0(p0: [[452.0]], p1: [[453.0]], p2: [[454.0], [455.0]])])
    let v2: Double = 456.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 456.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
