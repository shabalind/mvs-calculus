  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: Float
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s1]
    var p1: s0
  } in
  struct s3 {
    var p0: [s1]
    var p1: [s2]
    var p2: [[s0]]
  } in
  struct s10 {
    var p0: [s0]
    var p1: s3
  } in
  let f50: (Float) -> Float = (v0: Float) -> Float {
    var v1: Float = v0 in
    let v7: Float = v1 - v0 in
    let v13: Float = v0 * v1 in
    var v4: Float = v13 in
    var v8: Float = v1 in
    var v6: Float = v1 in
    var v5: Float = v6 in
    var v10: Float = v8 in
    var v17: Float = v0 in
    var v3: Float = v7 in
    v8 = v1 in
    let v11: Float = v13 + v5 in
    var v16: Float = v17 in
    var v12: Float = v1 in
    var v15: Float = v1 in
    var v19: Float = v15 in
    var v14: Float = v12 in
    let v34: [Float] = [v12, v5, v12, v15, v15, v16] in
    var v35: [Float] = v34 in
    let v24: Float = v15 * v1 in
    let v51: Float = v35[1] in
    let v25: Float = v15 * v11 in
    let v32: Float = v14 - v10 in
    v35[0] = v25 in
    let v23: [Float] = [v51, v16, v24, v19, v17, v32, v24] in
    var v53: [Float] = v23 in
    let v28: Float = v53[4] in
    let v33: Float = v35[0] in
    v35[5] = v33 in
    var v29: [Float] = v35 in
    v53[2] = v4 in
    let v46: Float = v34[1] in
    let v60: Float = v34[1] in
    v29[5] = v3 in
    v53[1] = v8 in
    v17 = v46 in
    var v58: [Float] = v29 in
    v29[3] = v28 in
    var v37: [Float] = v58 in
    v37[5] = v60 in
    let v49: Float = v37[5] in
    v37[4] = v11 in
    v49
  } in
  let noinline_f0: ([s1], s10, Float) -> Float = (v0: [s1], v1: s10, v2: Float) -> Float {
    let v6: Float = f50(v2) in
    let v11: Float = f50(v2) in
    let v9: Float = v11 + v11 in
    let v78: Float = v9 + v6 in
    v78
  } in
  fun loop(i: Int, v0: [s1], v1: s10, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1(s0([[0.0], [1.0]], [[2.0], [3.0]], 4.0), s0([[5.0], [6.0]], [[7.0], [8.0]], 9.0)), s1(s0([[10.0], [11.0]], [[12.0], [13.0]], 14.0), s0([[15.0], [16.0]], [[17.0], [18.0]], 19.0)), s1(s0([[20.0], [21.0]], [[22.0], [23.0]], 24.0), s0([[25.0], [26.0]], [[27.0], [28.0]], 29.0))] in
    let v1: s10 = s10([s0([[30.0], [31.0]], [[32.0], [33.0]], 34.0)], s3([s1(s0([[35.0], [36.0]], [[37.0], [38.0]], 39.0), s0([[40.0], [41.0]], [[42.0], [43.0]], 44.0))], [s2([s1(s0([[45.0], [46.0]], [[47.0], [48.0]], 49.0), s0([[50.0], [51.0]], [[52.0], [53.0]], 54.0)), s1(s0([[55.0], [56.0]], [[57.0], [58.0]], 59.0), s0([[60.0], [61.0]], [[62.0], [63.0]], 64.0))], s0([[65.0], [66.0]], [[67.0], [68.0]], 69.0))], [[s0([[70.0], [71.0]], [[72.0], [73.0]], 74.0)]])) in
    let v2: Float = 75.0 in
    let initialResult: Float = 75.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()