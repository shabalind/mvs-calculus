  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s2 {
    var p0: s1
    var p1: s0
  } in
  struct s4 {
    var p0: s1
    var p1: s2
  } in
  struct s12 {
    var p0: [s4]
    var p1: s2
  } in
  let f15: (Float) -> Float = (v0: Float) -> Float {
    let v6: Float = v0 * v0 in
    var v3: Float = v6 in
    var v5: Float = v0 in
    var v4: Float = v0 in
    var v1: Float = v3 in
    var v8: Float = v4 in
    let v10: [Float] = [v6, v6, v0, v1] in
    let v25: [[Float]] = [v10, v10, v10, v10, v10] in
    let v12: [Float] = v25[4] in
    let v18: [Float] = v25[4] in
    var v14: [[Float]] = v25 in
    var v17: [[Float]] = v14 in
    v17[3] = v10 in
    var v37: [Float] = v12 in
    let v26: [Float] = v17[3] in
    v37[1] = v0 in
    v14[1] = v18 in
    let v57: Float = v8 + v5 in
    let v41: Float = v12[0] in
    v17[3] = v37 in
    v14[4] = v12 in
    var v24: [Float] = v26 in
    v14[0] = v26 in
    let v48: Float = v24[3] in
    v24[0] = v1 in
    v24[3] = v57 in
    v37[2] = v3 in
    var v61: Float = v48 in
    let v63: Float = v61 * v41 in
    v63
  } in
  let noinline_f0: ([s12], Float) -> Float = (v0: [s12], v1: Float) -> Float {
    var v5: Float = v1 in
    let v4: Float = f15(v1) in
    let v3: Float = f15(v4) in
    v5 = v3 in
    var v23: Float = v5 in
    let v32: Float = f15(v23) in
    v23 = v32 in
    v32
  } in
  fun loop(i: Int, v0: [s12], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s12] = [s12([s4(s1([s0([[0.0], [1.0]], [[2.0], [3.0]]), s0([[4.0], [5.0]], [[6.0], [7.0]])], s0([[8.0], [9.0]], [[10.0], [11.0]])), s2(s1([s0([[12.0], [13.0]], [[14.0], [15.0]]), s0([[16.0], [17.0]], [[18.0], [19.0]])], s0([[20.0], [21.0]], [[22.0], [23.0]])), s0([[24.0], [25.0]], [[26.0], [27.0]]))), s4(s1([s0([[28.0], [29.0]], [[30.0], [31.0]]), s0([[32.0], [33.0]], [[34.0], [35.0]])], s0([[36.0], [37.0]], [[38.0], [39.0]])), s2(s1([s0([[40.0], [41.0]], [[42.0], [43.0]]), s0([[44.0], [45.0]], [[46.0], [47.0]])], s0([[48.0], [49.0]], [[50.0], [51.0]])), s0([[52.0], [53.0]], [[54.0], [55.0]])))], s2(s1([s0([[56.0], [57.0]], [[58.0], [59.0]]), s0([[60.0], [61.0]], [[62.0], [63.0]])], s0([[64.0], [65.0]], [[66.0], [67.0]])), s0([[68.0], [69.0]], [[70.0], [71.0]])))] in
    let v1: Float = 72.0 in
    let initialResult: Float = 72.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()