  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s3 {
    var p0: Float
    var p1: s1
  } in
  let noinline_f0: (s3, s0, Float) -> Float = (v0: s3, v1: s0, v2: Float) -> Float {
    let v13: [[Float]] = v1.p1 in
    var v12: Float = v2 in
    let v14: [Float] = v13[0] in
    var v23: [Float] = v14 in
    let v10: Float = v14[0] in
    var v28: Float = v12 in
    let v15: Float = v23[0] in
    v23[0] = v12 in
    v23[0] = v28 in
    v23[0] = v15 in
    var v20: Float = v15 in
    let v51: Float = v23[0] in
    var v32: Float = v51 in
    v23[0] = v10 in
    var v75: Float = v32 in
    v23[0] = v20 in
    v75
  } in
  fun loop(i: Int, v0: s3, v1: s0, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(0.0, s1([s0([[1.0]], [[2.0]]), s0([[3.0]], [[4.0]])], s0([[5.0]], [[6.0]]))) in
    let v1: s0 = s0([[7.0]], [[8.0]]) in
    let v2: Float = 9.0 in
    let initialResult: Float = 9.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()