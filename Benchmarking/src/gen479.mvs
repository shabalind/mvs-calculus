  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s2 {
    var p0: s1
    var p1: [s1]
  } in
  struct s3 {
    var p0: s0
    var p1: s0
  } in
  let f87: (s1, s3) -> s1 = (v0: s1, v1: s3) -> s1 {
    var v4: s1 = v0 in
    let v3: [s1] = [v0, v4, v4, v0, v0, v0] in
    let v6: s0 = v1.p1 in
    v4.p1 = v6 in
    v4.p1 = v6 in
    let v19: [s0] = v4.p0 in
    var v18: [s1] = v3 in
    let v12: s1 = v18[5] in
    v18[2] = v4 in
    var v32: [s0] = v19 in
    v4.p0 = v32 in
    v32[2] = v6 in
    v18[2] = v0 in
    v12
  } in
  let f86: (s1) -> s1 = (v0: s1) -> s1 {
    var v1: s1 = v0 in
    let v6: [s0] = v0.p0 in
    let v3: s0 = v6[2] in
    v1.p0 = v6 in
    var v9: s0 = v3 in
    let v16: [s0] = v0.p0 in
    let v28: s0 = v6[0] in
    let v13: s0 = v6[1] in
    v1.p1 = v13 in
    let v32: s0 = v0.p1 in
    v1.p1 = v9 in
    let v29: s0 = v16[2] in
    let v31: [[Float]] = v28.p0 in
    v9.p0 = v31 in
    let v43: s3 = s3(v9, v9) in
    let v69: s1 = f87(v1, v43) in
    var v36: s3 = v43 in
    let v30: s0 = v36.p0 in
    let v85: s3 = s3(v3, v29) in
    var v95: s1 = v69 in
    let v118: s1 = f87(v95, v36) in
    v36.p0 = v32 in
    let v49: s1 = f87(v118, v85) in
    v95.p1 = v30 in
    let v125: s1 = f87(v49, v43) in
    v125
  } in
  let f84: (s1) -> s1 = (v0: s1) -> s1 {
    let v4: s0 = v0.p1 in
    let v3: [s0] = v0.p0 in
    let v7: s1 = s1(v3, v4) in
    let v2: s1 = f86(v7) in
    let v14: s1 = f86(v2) in
    let v21: s1 = f86(v14) in
    let v34: s1 = f86(v21) in
    let v72: s1 = f86(v34) in
    let v124: s1 = f86(v72) in
    v124
  } in
  let f71: (s0, s1) -> s0 = (v0: s0, v1: s1) -> s0 {
    let v4: s1 = f84(v1) in
    let v14: s1 = f84(v1) in
    let v11: s0 = v14.p1 in
    let v17: s3 = s3(v11, v0) in
    let v33: s1 = f87(v4, v17) in
    let v59: [s0] = v33.p0 in
    var v141: [s0] = v59 in
    let v108: s0 = v141[2] in
    v141[2] = v11 in
    v108
  } in
  let noinline_f0: ([s2], Float) -> Float = (v0: [s2], v1: Float) -> Float {
    let v7: s2 = v0[0] in
    let v2: s2 = v0[0] in
    let v11: s1 = v7.p0 in
    let v9: [s1] = v7.p1 in
    let v10: s1 = v7.p0 in
    let v6: [s0] = v11.p0 in
    let v13: s1 = v2.p0 in
    let v15: s0 = v6[2] in
    let v20: s0 = f71(v15, v10) in
    var v28: [s0] = v6 in
    let v22: Float = v1 + v1 in
    var v29: [s0] = v28 in
    let v58: s0 = v6[0] in
    v28[0] = v58 in
    v28[1] = v20 in
    let v32: s0 = v29[1] in
    var v35: s0 = v20 in
    let v37: s0 = v28[0] in
    let v52: [[Float]] = v32.p0 in
    let v60: s0 = v13.p1 in
    let v57: s1 = v9[0] in
    let v68: s0 = f71(v35, v57) in
    v28[2] = v32 in
    let v124: [[Float]] = v68.p1 in
    v29[2] = v35 in
    let v110: [[[Float]]] = [v124, v124, v124, v124, v124, v124] in
    v28[1] = v32 in
    let v185: [Float] = v52[1] in
    v28[1] = v60 in
    var v162: [[[Float]]] = v110 in
    let v192: [[Float]] = v162[3] in
    let v133: Float = v185[0] in
    v35.p1 = v192 in
    let v90: Float = v133 - v22 in
    v29[1] = v37 in
    v90
  } in
  fun loop(i: Int, v0: [s2], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2(s1([s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]), s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]]), s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]])], s0([[15.0], [16.0], [17.0]], [[18.0], [19.0]])), [s1([s0([[20.0], [21.0], [22.0]], [[23.0], [24.0]]), s0([[25.0], [26.0], [27.0]], [[28.0], [29.0]]), s0([[30.0], [31.0], [32.0]], [[33.0], [34.0]])], s0([[35.0], [36.0], [37.0]], [[38.0], [39.0]])), s1([s0([[40.0], [41.0], [42.0]], [[43.0], [44.0]]), s0([[45.0], [46.0], [47.0]], [[48.0], [49.0]]), s0([[50.0], [51.0], [52.0]], [[53.0], [54.0]])], s0([[55.0], [56.0], [57.0]], [[58.0], [59.0]]))]), s2(s1([s0([[60.0], [61.0], [62.0]], [[63.0], [64.0]]), s0([[65.0], [66.0], [67.0]], [[68.0], [69.0]]), s0([[70.0], [71.0], [72.0]], [[73.0], [74.0]])], s0([[75.0], [76.0], [77.0]], [[78.0], [79.0]])), [s1([s0([[80.0], [81.0], [82.0]], [[83.0], [84.0]]), s0([[85.0], [86.0], [87.0]], [[88.0], [89.0]]), s0([[90.0], [91.0], [92.0]], [[93.0], [94.0]])], s0([[95.0], [96.0], [97.0]], [[98.0], [99.0]])), s1([s0([[100.0], [101.0], [102.0]], [[103.0], [104.0]]), s0([[105.0], [106.0], [107.0]], [[108.0], [109.0]]), s0([[110.0], [111.0], [112.0]], [[113.0], [114.0]])], s0([[115.0], [116.0], [117.0]], [[118.0], [119.0]]))]), s2(s1([s0([[120.0], [121.0], [122.0]], [[123.0], [124.0]]), s0([[125.0], [126.0], [127.0]], [[128.0], [129.0]]), s0([[130.0], [131.0], [132.0]], [[133.0], [134.0]])], s0([[135.0], [136.0], [137.0]], [[138.0], [139.0]])), [s1([s0([[140.0], [141.0], [142.0]], [[143.0], [144.0]]), s0([[145.0], [146.0], [147.0]], [[148.0], [149.0]]), s0([[150.0], [151.0], [152.0]], [[153.0], [154.0]])], s0([[155.0], [156.0], [157.0]], [[158.0], [159.0]])), s1([s0([[160.0], [161.0], [162.0]], [[163.0], [164.0]]), s0([[165.0], [166.0], [167.0]], [[168.0], [169.0]]), s0([[170.0], [171.0], [172.0]], [[173.0], [174.0]])], s0([[175.0], [176.0], [177.0]], [[178.0], [179.0]]))])] in
    let v1: Float = 180.0 in
    let initialResult: Float = 180.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()