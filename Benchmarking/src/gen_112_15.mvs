  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s4 {
    var p0: s0
    var p1: [s0]
  } in
  let noinline_f0: (s1, [s4], s4, Float) -> Float = (v0: s1, v1: [s4], v2: s4, v3: Float) -> Float {
    let v4: [s0] = v2.p1 in
    let v12: s0 = v4[1] in
    let v15: [[Float]] = v12.p1 in
    let v17: [Float] = v15[0] in
    let v36: Float = v17[0] in
    var v29: Float = v3 in
    let v60: Float = v29 - v3 in
    let v51: [Float] = [v36, v3, v60, v3] in
    var v215: [Float] = v51 in
    let v149: Float = v215[1] in
    v149
  } in
  fun loop(i: Int, v0: s1, v1: [s4], v2: s4, v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([s0([[0.0], [1.0]], [[2.0]]), s0([[3.0], [4.0]], [[5.0]])], s0([[6.0], [7.0]], [[8.0]])) in
    let v1: [s4] = [s4(s0([[9.0], [10.0]], [[11.0]]), [s0([[12.0], [13.0]], [[14.0]]), s0([[15.0], [16.0]], [[17.0]]), s0([[18.0], [19.0]], [[20.0]])]), s4(s0([[21.0], [22.0]], [[23.0]]), [s0([[24.0], [25.0]], [[26.0]]), s0([[27.0], [28.0]], [[29.0]]), s0([[30.0], [31.0]], [[32.0]])])] in
    let v2: s4 = s4(s0([[33.0], [34.0]], [[35.0]]), [s0([[36.0], [37.0]], [[38.0]]), s0([[39.0], [40.0]], [[41.0]]), s0([[42.0], [43.0]], [[44.0]])]) in
    let v3: Float = 45.0 in
    let initialResult: Float = 45.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()