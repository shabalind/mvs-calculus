  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: (s0, s0, s0, s0, [s0], Float) -> Float = (v0: s0, v1: s0, v2: s0, v3: s0, v4: [s0], v5: Float) -> Float {
    let v28: s0 = v4[2] in
    let v9: [[Float]] = v28.p1 in
    var v13: [[Float]] = v9 in
    let v15: [Float] = v13[1] in
    var v16: [Float] = v15 in
    var v59: [Float] = v16 in
    let v36: Float = v59[0] in
    let v29: Float = v15[0] in
    v16[0] = v36 in
    v59[0] = v5 in
    let v94: [[Float]] = v1.p1 in
    let v37: [[Float]] = v3.p1 in
    var v87: Float = v36 in
    var v39: Float = v87 in
    v59[0] = v29 in
    v13[0] = v16 in
    v13 = v94 in
    v13 = v37 in
    v39
  } in
  fun loop(i: Int, v0: s0, v1: s0, v2: s0, v3: s0, v4: [s0], v5: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4, v5) in
      loop(i + 1, v0, v1, v2, v3, v4, v5, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]]) in
    let v1: s0 = s0([[6.0], [7.0], [8.0]], [[9.0], [10.0], [11.0]]) in
    let v2: s0 = s0([[12.0], [13.0], [14.0]], [[15.0], [16.0], [17.0]]) in
    let v3: s0 = s0([[18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0]]) in
    let v4: [s0] = [s0([[24.0], [25.0], [26.0]], [[27.0], [28.0], [29.0]]), s0([[30.0], [31.0], [32.0]], [[33.0], [34.0], [35.0]]), s0([[36.0], [37.0], [38.0]], [[39.0], [40.0], [41.0]])] in
    let v5: Float = 42.0 in
    let initialResult: Float = 42.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, v5, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()