  struct s0 {
    var p0: Float
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  } in
  struct s2 {
    var p0: s1
    var p1: [[s1]]
  } in
  struct s4 {
    var p0: Float
    var p1: [[s2]]
  } in
  let f4: (s4) -> s4 = (v0: s4) -> s4 {
    let v1: [s4] = [v0, v0, v0, v0, v0] in
    let v3: s4 = v1[0] in
    var v2: s4 = v3 in
    let v6: s4 = v1[0] in
    let v4: [[s2]] = v3.p1 in
    v2.p1 = v4 in
    v2.p1 = v4 in
    var v17: s4 = v6 in
    let v21: [[s2]] = v2.p1 in
    let v30: [[s2]] = v2.p1 in
    v17.p1 = v30 in
    v2.p1 = v21 in
    v17
  } in
  let noinline_f0: ([[s4]], s4, Float) -> Float = (v0: [[s4]], v1: s4, v2: Float) -> Float {
    let v3: s4 = f4(v1) in
    let v7: [s4] = v0[0] in
    var v8: [s4] = v7 in
    let v11: [s4] = v0[0] in
    var v6: s4 = v3 in
    v8[0] = v6 in
    let v9: s4 = v8[0] in
    let v12: s4 = f4(v6) in
    let v4: s4 = f4(v9) in
    let v10: s4 = f4(v12) in
    let v17: s4 = v11[0] in
    let v18: s4 = f4(v10) in
    let v5: [[s2]] = v4.p1 in
    let v21: s4 = f4(v6) in
    var v20: [[s2]] = v5 in
    v8[0] = v21 in
    let v61: [[s2]] = v17.p1 in
    v6.p1 = v61 in
    v6.p1 = v61 in
    v6.p1 = v20 in
    v6.p1 = v61 in
    let v40: [[s2]] = v4.p1 in
    let v62: [[s2]] = v18.p1 in
    let v90: Float = v4.p0 in
    v20 = v40 in
    v6.p1 = v62 in
    v90
  } in
  fun loop(i: Int, v0: [[s4]], v1: s4, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s4]] = [[s4(0.0, [[s2(s1([[s0(1.0, [[2.0]])], [s0(3.0, [[4.0]])], [s0(5.0, [[6.0]])]], s0(7.0, [[8.0]])), [[s1([[s0(9.0, [[10.0]])], [s0(11.0, [[12.0]])], [s0(13.0, [[14.0]])]], s0(15.0, [[16.0]]))]])], [s2(s1([[s0(17.0, [[18.0]])], [s0(19.0, [[20.0]])], [s0(21.0, [[22.0]])]], s0(23.0, [[24.0]])), [[s1([[s0(25.0, [[26.0]])], [s0(27.0, [[28.0]])], [s0(29.0, [[30.0]])]], s0(31.0, [[32.0]]))]])], [s2(s1([[s0(33.0, [[34.0]])], [s0(35.0, [[36.0]])], [s0(37.0, [[38.0]])]], s0(39.0, [[40.0]])), [[s1([[s0(41.0, [[42.0]])], [s0(43.0, [[44.0]])], [s0(45.0, [[46.0]])]], s0(47.0, [[48.0]]))]])]])]] in
    let v1: s4 = s4(49.0, [[s2(s1([[s0(50.0, [[51.0]])], [s0(52.0, [[53.0]])], [s0(54.0, [[55.0]])]], s0(56.0, [[57.0]])), [[s1([[s0(58.0, [[59.0]])], [s0(60.0, [[61.0]])], [s0(62.0, [[63.0]])]], s0(64.0, [[65.0]]))]])], [s2(s1([[s0(66.0, [[67.0]])], [s0(68.0, [[69.0]])], [s0(70.0, [[71.0]])]], s0(72.0, [[73.0]])), [[s1([[s0(74.0, [[75.0]])], [s0(76.0, [[77.0]])], [s0(78.0, [[79.0]])]], s0(80.0, [[81.0]]))]])], [s2(s1([[s0(82.0, [[83.0]])], [s0(84.0, [[85.0]])], [s0(86.0, [[87.0]])]], s0(88.0, [[89.0]])), [[s1([[s0(90.0, [[91.0]])], [s0(92.0, [[93.0]])], [s0(94.0, [[95.0]])]], s0(96.0, [[97.0]]))]])]]) in
    let v2: Float = 98.0 in
    let initialResult: Float = 98.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()