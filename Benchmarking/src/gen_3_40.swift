  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
    var p4: [[Double]]
    var p5: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s3 {
    var p0: [s1]
    var p1: [[s1]]
  }
  struct s4 {
    var p0: s0
    var p1: [s3]
  }
  func f36(_ v0: s4) -> s4 {
    var v3: s4 = v0
    let v5: s0 = v3.p0
    v3.p0 = v5
    v3.p0 = v5
    var v7: s4 = v3
    var v1: s4 = v7
    var v6: s4 = v1
    v3.p0 = v5
    v3 = v6
    return v1
  }
  @inline(never)
  func f0(_ v0: s4, _ v1: Double) -> Double {
    let v6: s4 = f36(v0)
    let v8: s0 = v6.p0
    var v5: Double = v1
    var v7: Double = v1
    let v19: Double = v5 + v7
    var v18: Double = v19
    v5 = v1
    v7 = v1
    let v20: [[Double]] = v8.p5
    let v21: [Double] = v20[0]
    var v14: [Double] = v21
    let v46: [Double] = v20[0]
    v14[0] = v5
    let v66: Double = v46[0]
    v14[0] = v7
    v14[0] = v19
    v14[0] = v18
    v14[0] = v66
    v14[0] = v18
    let v199: Double = v14[0]
    var v136: Double = v199
    return v136
  }
  func benchmark() {
    let v0: s4 = s4(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0], [4.0]], p2: [[5.0], [6.0]], p3: [[7.0]], p4: [[8.0], [9.0], [10.0]], p5: [[11.0]]), p1: [s3(p0: [s1(p0: s0(p0: [[12.0], [13.0]], p1: [[14.0], [15.0], [16.0]], p2: [[17.0], [18.0]], p3: [[19.0]], p4: [[20.0], [21.0], [22.0]], p5: [[23.0]]), p1: s0(p0: [[24.0], [25.0]], p1: [[26.0], [27.0], [28.0]], p2: [[29.0], [30.0]], p3: [[31.0]], p4: [[32.0], [33.0], [34.0]], p5: [[35.0]]))], p1: [[s1(p0: s0(p0: [[36.0], [37.0]], p1: [[38.0], [39.0], [40.0]], p2: [[41.0], [42.0]], p3: [[43.0]], p4: [[44.0], [45.0], [46.0]], p5: [[47.0]]), p1: s0(p0: [[48.0], [49.0]], p1: [[50.0], [51.0], [52.0]], p2: [[53.0], [54.0]], p3: [[55.0]], p4: [[56.0], [57.0], [58.0]], p5: [[59.0]]))], [s1(p0: s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0], [64.0]], p2: [[65.0], [66.0]], p3: [[67.0]], p4: [[68.0], [69.0], [70.0]], p5: [[71.0]]), p1: s0(p0: [[72.0], [73.0]], p1: [[74.0], [75.0], [76.0]], p2: [[77.0], [78.0]], p3: [[79.0]], p4: [[80.0], [81.0], [82.0]], p5: [[83.0]]))], [s1(p0: s0(p0: [[84.0], [85.0]], p1: [[86.0], [87.0], [88.0]], p2: [[89.0], [90.0]], p3: [[91.0]], p4: [[92.0], [93.0], [94.0]], p5: [[95.0]]), p1: s0(p0: [[96.0], [97.0]], p1: [[98.0], [99.0], [100.0]], p2: [[101.0], [102.0]], p3: [[103.0]], p4: [[104.0], [105.0], [106.0]], p5: [[107.0]]))]]), s3(p0: [s1(p0: s0(p0: [[108.0], [109.0]], p1: [[110.0], [111.0], [112.0]], p2: [[113.0], [114.0]], p3: [[115.0]], p4: [[116.0], [117.0], [118.0]], p5: [[119.0]]), p1: s0(p0: [[120.0], [121.0]], p1: [[122.0], [123.0], [124.0]], p2: [[125.0], [126.0]], p3: [[127.0]], p4: [[128.0], [129.0], [130.0]], p5: [[131.0]]))], p1: [[s1(p0: s0(p0: [[132.0], [133.0]], p1: [[134.0], [135.0], [136.0]], p2: [[137.0], [138.0]], p3: [[139.0]], p4: [[140.0], [141.0], [142.0]], p5: [[143.0]]), p1: s0(p0: [[144.0], [145.0]], p1: [[146.0], [147.0], [148.0]], p2: [[149.0], [150.0]], p3: [[151.0]], p4: [[152.0], [153.0], [154.0]], p5: [[155.0]]))], [s1(p0: s0(p0: [[156.0], [157.0]], p1: [[158.0], [159.0], [160.0]], p2: [[161.0], [162.0]], p3: [[163.0]], p4: [[164.0], [165.0], [166.0]], p5: [[167.0]]), p1: s0(p0: [[168.0], [169.0]], p1: [[170.0], [171.0], [172.0]], p2: [[173.0], [174.0]], p3: [[175.0]], p4: [[176.0], [177.0], [178.0]], p5: [[179.0]]))], [s1(p0: s0(p0: [[180.0], [181.0]], p1: [[182.0], [183.0], [184.0]], p2: [[185.0], [186.0]], p3: [[187.0]], p4: [[188.0], [189.0], [190.0]], p5: [[191.0]]), p1: s0(p0: [[192.0], [193.0]], p1: [[194.0], [195.0], [196.0]], p2: [[197.0], [198.0]], p3: [[199.0]], p4: [[200.0], [201.0], [202.0]], p5: [[203.0]]))]])])
    let v1: Double = 204.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 204.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
