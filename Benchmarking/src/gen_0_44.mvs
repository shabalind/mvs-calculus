  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s3 {
    var p0: [[s1]]
    var p1: s0
  } in
  let f29: (s3) -> s3 = (v0: s3) -> s3 {
    var v8: s3 = v0 in
    v8
  } in
  let noinline_f0: (s3, Float) -> Float = (v0: s3, v1: Float) -> Float {
    let v4: s3 = f29(v0) in
    let v2: Float = v1 / v1 in
    let v11: s0 = v4.p1 in
    let v23: [[Float]] = v11.p0 in
    var v21: Float = v2 in
    let v46: [Float] = v23[0] in
    var v95: [Float] = v46 in
    v95[0] = v1 in
    let v131: Float = v95[0] in
    v95[0] = v21 in
    let v171: Float = v21 * v131 in
    v171
  } in
  fun loop(i: Int, v0: s3, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3([[s1([s0([[0.0], [1.0]], [[2.0]]), s0([[3.0], [4.0]], [[5.0]])], [s0([[6.0], [7.0]], [[8.0]]), s0([[9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0]], [[14.0]])])]], s0([[15.0], [16.0]], [[17.0]])) in
    let v1: Float = 18.0 in
    let initialResult: Float = 18.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()