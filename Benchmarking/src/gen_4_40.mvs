  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
    var p3: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    let v3: [Float] = [v1, v1, v1, v1, v1, v1] in
    let v7: Float = v3[3] in
    var v4: Float = v7 in
    let v10: Float = v4 + v7 in
    let v6: Float = v3[5] in
    v4 = v6 in
    let v8: Float = v3[4] in
    let v68: Float = v8 + v1 in
    var v163: Float = v68 in
    let v133: Float = v10 - v68 in
    let v285: Float = v163 + v133 in
    v285
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]], [[5.0], [6.0]], [[7.0]]), s0([[8.0], [9.0]], [[10.0], [11.0], [12.0]], [[13.0], [14.0]], [[15.0]]), s0([[16.0], [17.0]], [[18.0], [19.0], [20.0]], [[21.0], [22.0]], [[23.0]])], [s0([[24.0], [25.0]], [[26.0], [27.0], [28.0]], [[29.0], [30.0]], [[31.0]])]) in
    let v1: Float = 32.0 in
    let initialResult: Float = 32.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()