  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s4 {
    var p0: s1
    var p1: [[Float]]
  } in
  struct s5 {
    var p0: [[s1]]
    var p1: [[s4]]
    var p2: s1
    var p3: s0
  } in
  let noinline_f0: ([s5], Float) -> Float = (v0: [s5], v1: Float) -> Float {
    var v6: [s5] = v0 in
    let v9: s5 = v6[2] in
    var v19: Float = v1 in
    let v20: s0 = v9.p3 in
    let v25: [[Float]] = v20.p1 in
    let v22: [Float] = v25[0] in
    let v38: Float = v22[0] in
    var v37: Float = v19 in
    let v118: [Float] = [v37, v19, v37, v38] in
    let v89: s5 = v0[2] in
    v6[1] = v89 in
    let v137: Float = v118[3] in
    v137
  } in
  fun loop(i: Int, v0: [s5], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s5] = [s5([[s1(s0([[0.0], [1.0]], [[2.0], [3.0]], [[4.0], [5.0]]), s0([[6.0], [7.0]], [[8.0], [9.0]], [[10.0], [11.0]]))], [s1(s0([[12.0], [13.0]], [[14.0], [15.0]], [[16.0], [17.0]]), s0([[18.0], [19.0]], [[20.0], [21.0]], [[22.0], [23.0]]))]], [[s4(s1(s0([[24.0], [25.0]], [[26.0], [27.0]], [[28.0], [29.0]]), s0([[30.0], [31.0]], [[32.0], [33.0]], [[34.0], [35.0]])), [[36.0], [37.0]])]], s1(s0([[38.0], [39.0]], [[40.0], [41.0]], [[42.0], [43.0]]), s0([[44.0], [45.0]], [[46.0], [47.0]], [[48.0], [49.0]])), s0([[50.0], [51.0]], [[52.0], [53.0]], [[54.0], [55.0]])), s5([[s1(s0([[56.0], [57.0]], [[58.0], [59.0]], [[60.0], [61.0]]), s0([[62.0], [63.0]], [[64.0], [65.0]], [[66.0], [67.0]]))], [s1(s0([[68.0], [69.0]], [[70.0], [71.0]], [[72.0], [73.0]]), s0([[74.0], [75.0]], [[76.0], [77.0]], [[78.0], [79.0]]))]], [[s4(s1(s0([[80.0], [81.0]], [[82.0], [83.0]], [[84.0], [85.0]]), s0([[86.0], [87.0]], [[88.0], [89.0]], [[90.0], [91.0]])), [[92.0], [93.0]])]], s1(s0([[94.0], [95.0]], [[96.0], [97.0]], [[98.0], [99.0]]), s0([[100.0], [101.0]], [[102.0], [103.0]], [[104.0], [105.0]])), s0([[106.0], [107.0]], [[108.0], [109.0]], [[110.0], [111.0]])), s5([[s1(s0([[112.0], [113.0]], [[114.0], [115.0]], [[116.0], [117.0]]), s0([[118.0], [119.0]], [[120.0], [121.0]], [[122.0], [123.0]]))], [s1(s0([[124.0], [125.0]], [[126.0], [127.0]], [[128.0], [129.0]]), s0([[130.0], [131.0]], [[132.0], [133.0]], [[134.0], [135.0]]))]], [[s4(s1(s0([[136.0], [137.0]], [[138.0], [139.0]], [[140.0], [141.0]]), s0([[142.0], [143.0]], [[144.0], [145.0]], [[146.0], [147.0]])), [[148.0], [149.0]])]], s1(s0([[150.0], [151.0]], [[152.0], [153.0]], [[154.0], [155.0]]), s0([[156.0], [157.0]], [[158.0], [159.0]], [[160.0], [161.0]])), s0([[162.0], [163.0]], [[164.0], [165.0]], [[166.0], [167.0]]))] in
    let v1: Float = 168.0 in
    let initialResult: Float = 168.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()