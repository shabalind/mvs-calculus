  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s2 {
    var p0: s0
    var p1: [s0]
  } in
  let f32: (s2) -> s2 = (v0: s2) -> s2 {
    let v4: [s0] = v0.p1 in
    var v2: s2 = v0 in
    let v6: s0 = v2.p0 in
    let v1: s2 = s2(v6, v4) in
    v2.p0 = v6 in
    v2.p1 = v4 in
    v2 = v0 in
    var v55: s2 = v1 in
    v55
  } in
  let noinline_f0: (s2, Float) -> Float = (v0: s2, v1: Float) -> Float {
    let v3: s2 = f32(v0) in
    let v5: s0 = v3.p0 in
    let v6: [[Float]] = v5.p0 in
    let v13: [Float] = v6[1] in
    var v12: [[Float]] = v6 in
    v12[0] = v13 in
    let v22: [Float] = v12[0] in
    let v29: Float = v22[0] in
    let v47: Float = v29 * v1 in
    v47
  } in
  fun loop(i: Int, v0: s2, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(s0([[0.0], [1.0]], [[2.0]]), [s0([[3.0], [4.0]], [[5.0]])]) in
    let v1: Float = 6.0 in
    let initialResult: Float = 6.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()