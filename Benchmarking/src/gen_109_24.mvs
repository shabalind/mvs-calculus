  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    let v11: [s0] = v0.p1 in
    let v7: s0 = v11[0] in
    let v5: [[Float]] = v7.p0 in
    let v10: [[Float]] = v7.p1 in
    let v12: [Float] = v5[1] in
    let v15: [Float] = v5[1] in
    let v16: Float = v15[0] in
    var v27: [[Float]] = v10 in
    v27[1] = v15 in
    let v45: Float = v1 / v1 in
    let v41: [Float] = v27[0] in
    let v74: Float = v41[0] in
    v27[0] = v12 in
    let v161: Float = v16 - v74 in
    let v67: Float = v45 * v161 in
    v67
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([[s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]], [[5.0]])]], [s0([[6.0], [7.0]], [[8.0], [9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0]], [[14.0], [15.0], [16.0]], [[17.0]]), s0([[18.0], [19.0]], [[20.0], [21.0], [22.0]], [[23.0]])]) in
    let v1: Float = 24.0 in
    let initialResult: Float = 24.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()