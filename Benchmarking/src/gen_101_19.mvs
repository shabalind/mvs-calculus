  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s3 {
    var p0: [s1]
    var p1: s0
  } in
  let noinline_f0: (s3, Float) -> Float = (v0: s3, v1: Float) -> Float {
    let v2: [s1] = v0.p0 in
    let v3: s1 = v2[0] in
    let v7: [s0] = v3.p0 in
    let v11: s0 = v7[0] in
    let v12: s0 = v7[0] in
    let v18: [[Float]] = v11.p1 in
    var v43: Float = v1 in
    let v34: [Float] = v18[0] in
    let v14: [[Float]] = v12.p0 in
    let v60: Float = v43 - v43 in
    let v58: [[[Float]]] = [v14, v14, v14, v14, v14, v14] in
    let v61: [[Float]] = v58[2] in
    var v36: Float = v60 in
    let v56: Float = v34[0] in
    let v53: [Float] = v61[1] in
    v43 = v56 in
    v43 = v36 in
    let v180: Float = v53[0] in
    let v112: Float = v60 + v180 in
    v112
  } in
  fun loop(i: Int, v0: s3, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3([s1([s0([[0.0], [1.0]], [[2.0]], [[3.0], [4.0], [5.0]]), s0([[6.0], [7.0]], [[8.0]], [[9.0], [10.0], [11.0]])], [s0([[12.0], [13.0]], [[14.0]], [[15.0], [16.0], [17.0]])])], s0([[18.0], [19.0]], [[20.0]], [[21.0], [22.0], [23.0]])) in
    let v1: Float = 24.0 in
    let initialResult: Float = 24.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()