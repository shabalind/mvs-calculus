  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s0
    var p1: s0
  } in
  let noinline_f0: (s1, [[s2]], [s0], Float) -> Float = (v0: s1, v1: [[s2]], v2: [s0], v3: Float) -> Float {
    let v8: s0 = v2[0] in
    let v6: [[Float]] = v8.p0 in
    var v11: [[Float]] = v6 in
    let v15: [Float] = v11[1] in
    let v29: [Float] = v6[1] in
    v11[2] = v29 in
    let v34: [Float] = v11[0] in
    let v81: Float = v34[0] in
    let v109: Float = v81 + v81 in
    v11[1] = v15 in
    v109
  } in
  fun loop(i: Int, v0: s1, v1: [[s2]], v2: [s0], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1(s0([[0.0], [1.0], [2.0]], [[3.0]]), s0([[4.0], [5.0], [6.0]], [[7.0]])) in
    let v1: [[s2]] = [[s2(s0([[8.0], [9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0], [14.0]], [[15.0]]))], [s2(s0([[16.0], [17.0], [18.0]], [[19.0]]), s0([[20.0], [21.0], [22.0]], [[23.0]]))]] in
    let v2: [s0] = [s0([[24.0], [25.0], [26.0]], [[27.0]])] in
    let v3: Float = 28.0 in
    let initialResult: Float = 28.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()