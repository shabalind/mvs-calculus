  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: s0
    var p1: s1
  } in
  struct s3 {
    var p0: [[s0]]
    var p1: [s2]
  } in
  struct s5 {
    var p0: s0
    var p1: s1
    var p2: s0
  } in
  struct s7 {
    var p0: s3
    var p1: [s1]
  } in
  struct s9 {
    var p0: [s7]
    var p1: [s5]
  } in
  let f105: (Float) -> Float = (v0: Float) -> Float {
    let v3: [Float] = [v0, v0, v0] in
    let v8: Float = v0 + v0 in
    let v6: Float = v8 / v0 in
    var v1: [Float] = v3 in
    v1[2] = v6 in
    let v11: Float = v1[0] in
    var v12: Float = v11 in
    let v17: [Float] = [v12] in
    let v9: Float = v17[0] in
    v1[0] = v9 in
    v9
  } in
  let noinline_f0: ([[s0]], s9, Float) -> Float = (v0: [[s0]], v1: s9, v2: Float) -> Float {
    let v5: [s0] = v0[2] in
    let v4: s0 = v5[0] in
    var v7: Float = v2 in
    let v6: Float = f105(v7) in
    let v18: [[Float]] = v4.p0 in
    let v14: Float = f105(v6) in
    let v70: [Float] = v18[2] in
    let v140: Float = v70[0] in
    var v133: Float = v14 in
    v133 = v140 in
    v133
  } in
  fun loop(i: Int, v0: [[s0]], v1: s9, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s0]] = [[s0([[0.0], [1.0], [2.0]], [[3.0]])], [s0([[4.0], [5.0], [6.0]], [[7.0]])], [s0([[8.0], [9.0], [10.0]], [[11.0]])]] in
    let v1: s9 = s9([s7(s3([[s0([[12.0], [13.0], [14.0]], [[15.0]])], [s0([[16.0], [17.0], [18.0]], [[19.0]])]], [s2(s0([[20.0], [21.0], [22.0]], [[23.0]]), s1([[s0([[24.0], [25.0], [26.0]], [[27.0]])], [s0([[28.0], [29.0], [30.0]], [[31.0]])]], [[s0([[32.0], [33.0], [34.0]], [[35.0]])], [s0([[36.0], [37.0], [38.0]], [[39.0]])]]))]), [s1([[s0([[40.0], [41.0], [42.0]], [[43.0]])], [s0([[44.0], [45.0], [46.0]], [[47.0]])]], [[s0([[48.0], [49.0], [50.0]], [[51.0]])], [s0([[52.0], [53.0], [54.0]], [[55.0]])]])]), s7(s3([[s0([[56.0], [57.0], [58.0]], [[59.0]])], [s0([[60.0], [61.0], [62.0]], [[63.0]])]], [s2(s0([[64.0], [65.0], [66.0]], [[67.0]]), s1([[s0([[68.0], [69.0], [70.0]], [[71.0]])], [s0([[72.0], [73.0], [74.0]], [[75.0]])]], [[s0([[76.0], [77.0], [78.0]], [[79.0]])], [s0([[80.0], [81.0], [82.0]], [[83.0]])]]))]), [s1([[s0([[84.0], [85.0], [86.0]], [[87.0]])], [s0([[88.0], [89.0], [90.0]], [[91.0]])]], [[s0([[92.0], [93.0], [94.0]], [[95.0]])], [s0([[96.0], [97.0], [98.0]], [[99.0]])]])])], [s5(s0([[100.0], [101.0], [102.0]], [[103.0]]), s1([[s0([[104.0], [105.0], [106.0]], [[107.0]])], [s0([[108.0], [109.0], [110.0]], [[111.0]])]], [[s0([[112.0], [113.0], [114.0]], [[115.0]])], [s0([[116.0], [117.0], [118.0]], [[119.0]])]]), s0([[120.0], [121.0], [122.0]], [[123.0]])), s5(s0([[124.0], [125.0], [126.0]], [[127.0]]), s1([[s0([[128.0], [129.0], [130.0]], [[131.0]])], [s0([[132.0], [133.0], [134.0]], [[135.0]])]], [[s0([[136.0], [137.0], [138.0]], [[139.0]])], [s0([[140.0], [141.0], [142.0]], [[143.0]])]]), s0([[144.0], [145.0], [146.0]], [[147.0]]))]) in
    let v2: Float = 148.0 in
    let initialResult: Float = 148.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()