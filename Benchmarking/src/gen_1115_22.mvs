  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s2 {
    var p0: [s0]
    var p1: s0
  } in
  let noinline_f0: (s0, s2, s2, Float) -> Float = (v0: s0, v1: s2, v2: s2, v3: Float) -> Float {
    let v6: s0 = v1.p1 in
    let v9: [[Float]] = v6.p1 in
    let v5: [[Float]] = v6.p0 in
    let v12: [Float] = v5[0] in
    let v41: [Float] = v9[0] in
    let v29: Float = v41[0] in
    var v49: [Float] = v12 in
    v49[0] = v3 in
    var v27: [Float] = v49 in
    v49[0] = v29 in
    let v145: Float = v27[0] in
    v49[0] = v3 in
    v145
  } in
  fun loop(i: Int, v0: s0, v1: s2, v2: s2, v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0]], [[1.0]]) in
    let v1: s2 = s2([s0([[2.0]], [[3.0]]), s0([[4.0]], [[5.0]])], s0([[6.0]], [[7.0]])) in
    let v2: s2 = s2([s0([[8.0]], [[9.0]]), s0([[10.0]], [[11.0]])], s0([[12.0]], [[13.0]])) in
    let v3: Float = 14.0 in
    let initialResult: Float = 14.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()