  struct s0 {
    var p0: [[Float]]
    var p1: [Float]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: Float
    var p1: s1
  } in
  let f26: (s0) -> s0 = (v0: s0) -> s0 {
    let v3: [s0] = [v0, v0, v0, v0] in
    var v7: s0 = v0 in
    var v4: [s0] = v3 in
    v4[2] = v0 in
    let v6: [[s0]] = [v3, v3, v4, v3, v3, v4, v4] in
    let v8: [[Float]] = v0.p0 in
    v7.p0 = v8 in
    v4[2] = v7 in
    let v21: [Float] = v0.p1 in
    v7.p0 = v8 in
    v7.p0 = v8 in
    v7.p1 = v21 in
    let v10: [Float] = v7.p1 in
    v7.p0 = v8 in
    v4[0] = v7 in
    v7.p1 = v21 in
    let v23: [[Float]] = v7.p0 in
    v4[2] = v0 in
    v7.p0 = v23 in
    var v32: s0 = v7 in
    v7.p1 = v10 in
    v7.p0 = v8 in
    v4[2] = v32 in
    let v48: [s0] = v6[2] in
    let v79: s0 = v48[2] in
    v7.p1 = v10 in
    v79
  } in
  let f25: ([[Float]]) -> [[Float]] = (v0: [[Float]]) -> [[Float]] {
    let v6: [Float] = v0[1] in
    var v7: [[Float]] = v0 in
    let v19: [[[Float]]] = [v7, v0, v0] in
    var v11: [[[Float]]] = v19 in
    let v26: [[Float]] = v11[0] in
    var v12: [[Float]] = v26 in
    v12[2] = v6 in
    v12
  } in
  let f15: (s0) -> s0 = (v0: s0) -> s0 {
    let v6: s0 = f26(v0) in
    let v4: [Float] = v0.p1 in
    let v3: [[Float]] = [v4, v4, v4, v4, v4, v4, v4] in
    let v1: [Float] = v3[0] in
    let v2: s0 = f26(v0) in
    var v10: [[Float]] = v3 in
    let v14: s0 = f26(v6) in
    let v15: [[Float]] = v14.p0 in
    let v20: [Float] = v6.p1 in
    v10[5] = v20 in
    let v18: [[Float]] = v2.p0 in
    let v27: s0 = f26(v2) in
    var v29: [[Float]] = v3 in
    let v21: [Float] = v27.p1 in
    v29[3] = v1 in
    let v25: [Float] = v27.p1 in
    let v35: [Float] = v14.p1 in
    let v55: [[Float]] = f25(v18) in
    v29[5] = v4 in
    v10[5] = v21 in
    let v60: [Float] = v3[3] in
    let v81: [Float] = v10[3] in
    v10[2] = v60 in
    let v40: s0 = f26(v14) in
    let v94: s0 = f26(v40) in
    let v51: [Float] = v29[5] in
    v29[3] = v81 in
    v10[1] = v25 in
    var v66: s0 = v94 in
    v66.p0 = v15 in
    v66.p1 = v51 in
    v66.p1 = v21 in
    v66.p0 = v55 in
    v66.p1 = v35 in
    v66
  } in
  let noinline_f0: ([s1], s0, [[s1]], Float) -> Float = (v0: [s1], v1: s0, v2: [[s1]], v3: Float) -> Float {
    var v7: s0 = v1 in
    let v4: s0 = f15(v7) in
    let v8: [Float] = v4.p1 in
    var v5: s0 = v4 in
    let v15: Float = v8[1] in
    let v17: s1 = v0[0] in
    let v20: [[Float]] = v4.p0 in
    let v23: [Float] = v20[0] in
    let v24: s0 = f26(v5) in
    var v27: [[Float]] = v20 in
    let v47: s0 = v17.p0 in
    v27[2] = v23 in
    v27[0] = v23 in
    let v13: s1 = v0[0] in
    v27[1] = v23 in
    v5 = v47 in
    v7.p0 = v27 in
    let v26: s2 = s2(v15, v13) in
    let v28: [[Float]] = f25(v20) in
    v5 = v4 in
    let v37: [Float] = v28[1] in
    let v63: [Float] = v24.p1 in
    let v58: Float = v26.p0 in
    v27[2] = v37 in
    v7.p1 = v63 in
    v58
  } in
  fun loop(i: Int, v0: [s1], v1: s0, v2: [[s1]], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1(s0([[0.0], [1.0], [2.0]], [3.0, 4.0, 5.0]), [s0([[6.0], [7.0], [8.0]], [9.0, 10.0, 11.0])])] in
    let v1: s0 = s0([[12.0], [13.0], [14.0]], [15.0, 16.0, 17.0]) in
    let v2: [[s1]] = [[s1(s0([[18.0], [19.0], [20.0]], [21.0, 22.0, 23.0]), [s0([[24.0], [25.0], [26.0]], [27.0, 28.0, 29.0])])]] in
    let v3: Float = 30.0 in
    let initialResult: Float = 30.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()