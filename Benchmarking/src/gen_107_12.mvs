  let noinline_f0: ([[Float]], [[Float]], [[Float]], [[Float]], Float) -> Float = (v0: [[Float]], v1: [[Float]], v2: [[Float]], v3: [[Float]], v4: Float) -> Float {
    var v6: Float = v4 in
    let v7: Float = v6 - v4 in
    var v12: Float = v7 in
    let v11: [Float] = v0[0] in
    var v15: Float = v12 in
    let v13: Float = v11[0] in
    var v17: [Float] = v11 in
    var v20: Float = v13 in
    v17[0] = v15 in
    var v29: [Float] = v17 in
    let v81: Float = v29[0] in
    v17 = v11 in
    v17[0] = v20 in
    v81
  } in
  fun loop(i: Int, v0: [[Float]], v1: [[Float]], v2: [[Float]], v3: [[Float]], v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0]] in
    let v1: [[Float]] = [[1.0]] in
    let v2: [[Float]] = [[2.0]] in
    let v3: [[Float]] = [[3.0]] in
    let v4: Float = 4.0 in
    let initialResult: Float = 4.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()