  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  } in
  struct s3 {
    var p0: [Float]
    var p1: [[s1]]
  } in
  struct s5 {
    var p0: s3
    var p1: s1
  } in
  let noinline_f0: (s5, s5, Float) -> Float = (v0: s5, v1: s5, v2: Float) -> Float {
    let v6: s3 = v0.p0 in
    let v8: Float = v2 * v2 in
    let v3: [Float] = v6.p0 in
    let v9: Float = v3[0] in
    var v12: Float = v9 in
    let v10: [[s1]] = v6.p1 in
    let v15: Float = v3[0] in
    let v20: [Float] = v6.p0 in
    let v11: [s1] = v10[1] in
    let v27: Float = v20[0] in
    let v17: s1 = v11[0] in
    let v19: s0 = v17.p1 in
    let v36: [[Float]] = v19.p1 in
    let v14: [[Float]] = v19.p1 in
    let v23: [Float] = v14[0] in
    v12 = v8 in
    var v21: [[Float]] = v36 in
    v21[0] = v23 in
    var v28: [Float] = v23 in
    v21[0] = v28 in
    v28[0] = v27 in
    v28[0] = v12 in
    let v49: [Float] = v21[0] in
    let v43: Float = v12 + v27 in
    var v57: [Float] = v49 in
    v28[0] = v43 in
    let v90: Float = v57[0] in
    let v85: Float = v15 / v90 in
    v85
  } in
  fun loop(i: Int, v0: s5, v1: s5, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s5 = s5(s3([0.0, 1.0], [[s1([[s0([[2.0], [3.0], [4.0]], [[5.0]])], [s0([[6.0], [7.0], [8.0]], [[9.0]])], [s0([[10.0], [11.0], [12.0]], [[13.0]])]], s0([[14.0], [15.0], [16.0]], [[17.0]]))], [s1([[s0([[18.0], [19.0], [20.0]], [[21.0]])], [s0([[22.0], [23.0], [24.0]], [[25.0]])], [s0([[26.0], [27.0], [28.0]], [[29.0]])]], s0([[30.0], [31.0], [32.0]], [[33.0]]))], [s1([[s0([[34.0], [35.0], [36.0]], [[37.0]])], [s0([[38.0], [39.0], [40.0]], [[41.0]])], [s0([[42.0], [43.0], [44.0]], [[45.0]])]], s0([[46.0], [47.0], [48.0]], [[49.0]]))]]), s1([[s0([[50.0], [51.0], [52.0]], [[53.0]])], [s0([[54.0], [55.0], [56.0]], [[57.0]])], [s0([[58.0], [59.0], [60.0]], [[61.0]])]], s0([[62.0], [63.0], [64.0]], [[65.0]]))) in
    let v1: s5 = s5(s3([66.0, 67.0], [[s1([[s0([[68.0], [69.0], [70.0]], [[71.0]])], [s0([[72.0], [73.0], [74.0]], [[75.0]])], [s0([[76.0], [77.0], [78.0]], [[79.0]])]], s0([[80.0], [81.0], [82.0]], [[83.0]]))], [s1([[s0([[84.0], [85.0], [86.0]], [[87.0]])], [s0([[88.0], [89.0], [90.0]], [[91.0]])], [s0([[92.0], [93.0], [94.0]], [[95.0]])]], s0([[96.0], [97.0], [98.0]], [[99.0]]))], [s1([[s0([[100.0], [101.0], [102.0]], [[103.0]])], [s0([[104.0], [105.0], [106.0]], [[107.0]])], [s0([[108.0], [109.0], [110.0]], [[111.0]])]], s0([[112.0], [113.0], [114.0]], [[115.0]]))]]), s1([[s0([[116.0], [117.0], [118.0]], [[119.0]])], [s0([[120.0], [121.0], [122.0]], [[123.0]])], [s0([[124.0], [125.0], [126.0]], [[127.0]])]], s0([[128.0], [129.0], [130.0]], [[131.0]]))) in
    let v2: Float = 132.0 in
    let initialResult: Float = 132.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()