  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  } in
  struct s2 {
    var p0: s1
    var p1: [[Float]]
  } in
  struct s4 {
    var p0: Float
    var p1: s0
  } in
  let noinline_f0: (s2, Float) -> Float = (v0: s2, v1: Float) -> Float {
    var v4: s2 = v0 in
    let v6: [[Float]] = v4.p1 in
    let v2: s1 = v0.p0 in
    let v3: [[s0]] = v2.p0 in
    let v11: [[Float]] = v4.p1 in
    let v8: s1 = v4.p0 in
    let v12: [Float] = v6[0] in
    v4.p1 = v11 in
    let v9: [s2] = [v0, v0] in
    var v15: [Float] = v12 in
    v15 = v12 in
    let v14: s0 = v8.p1 in
    let v21: Float = v1 + v1 in
    let v18: [s0] = v3[0] in
    v4.p0 = v8 in
    v4.p0 = v2 in
    var v20: [s0] = v18 in
    let v24: Float = v15[0] in
    let v28: s2 = v9[0] in
    let v29: Float = v15[0] in
    let v30: s0 = v20[0] in
    var v25: Float = v29 in
    let v23: Float = v25 * v21 in
    let v43: s1 = s1(v3, v30) in
    v4.p0 = v43 in
    let v46: [Float] = v11[0] in
    let v57: Float = v1 / v25 in
    v15 = v46 in
    let v50: s1 = v28.p0 in
    v4.p0 = v50 in
    v25 = v24 in
    v15[0] = v23 in
    let v67: s4 = s4(v57, v14) in
    let v92: Float = v67.p0 in
    v92
  } in
  fun loop(i: Int, v0: s2, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(s1([[s0([[0.0], [1.0], [2.0]], [[3.0]])]], s0([[4.0], [5.0], [6.0]], [[7.0]])), [[8.0], [9.0], [10.0]]) in
    let v1: Float = 11.0 in
    let initialResult: Float = 11.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()