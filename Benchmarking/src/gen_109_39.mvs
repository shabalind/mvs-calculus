  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: Float
    var p1: s0
  } in
  struct s2 {
    var p0: [s1]
    var p1: [[s1]]
  } in
  struct s4 {
    var p0: s1
    var p1: s1
  } in
  struct s5 {
    var p0: s2
    var p1: [[s0]]
  } in
  struct s9 {
    var p0: [s5]
    var p1: s4
  } in
  struct s10 {
    var p0: s9
    var p1: s2
  } in
  let noinline_f0: ([s10], Float) -> Float = (v0: [s10], v1: Float) -> Float {
    let v6: s10 = v0[0] in
    let v4: s9 = v6.p0 in
    let v26: s4 = v4.p1 in
    let v47: s1 = v26.p1 in
    let v104: s0 = v47.p1 in
    var v62: s0 = v104 in
    v62 = v104 in
    let v220: [[Float]] = v62.p1 in
    let v130: [Float] = v220[0] in
    let v168: Float = v130[0] in
    v168
  } in
  fun loop(i: Int, v0: [s10], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s10] = [s10(s9([s5(s2([s1(0.0, s0([[1.0], [2.0], [3.0]], [[4.0], [5.0], [6.0]])), s1(7.0, s0([[8.0], [9.0], [10.0]], [[11.0], [12.0], [13.0]])), s1(14.0, s0([[15.0], [16.0], [17.0]], [[18.0], [19.0], [20.0]]))], [[s1(21.0, s0([[22.0], [23.0], [24.0]], [[25.0], [26.0], [27.0]]))]]), [[s0([[28.0], [29.0], [30.0]], [[31.0], [32.0], [33.0]])]]), s5(s2([s1(34.0, s0([[35.0], [36.0], [37.0]], [[38.0], [39.0], [40.0]])), s1(41.0, s0([[42.0], [43.0], [44.0]], [[45.0], [46.0], [47.0]])), s1(48.0, s0([[49.0], [50.0], [51.0]], [[52.0], [53.0], [54.0]]))], [[s1(55.0, s0([[56.0], [57.0], [58.0]], [[59.0], [60.0], [61.0]]))]]), [[s0([[62.0], [63.0], [64.0]], [[65.0], [66.0], [67.0]])]])], s4(s1(68.0, s0([[69.0], [70.0], [71.0]], [[72.0], [73.0], [74.0]])), s1(75.0, s0([[76.0], [77.0], [78.0]], [[79.0], [80.0], [81.0]])))), s2([s1(82.0, s0([[83.0], [84.0], [85.0]], [[86.0], [87.0], [88.0]])), s1(89.0, s0([[90.0], [91.0], [92.0]], [[93.0], [94.0], [95.0]])), s1(96.0, s0([[97.0], [98.0], [99.0]], [[100.0], [101.0], [102.0]]))], [[s1(103.0, s0([[104.0], [105.0], [106.0]], [[107.0], [108.0], [109.0]]))]]))] in
    let v1: Float = 110.0 in
    let initialResult: Float = 110.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()