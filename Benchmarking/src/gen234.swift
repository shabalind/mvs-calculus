  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
    var p4: [Double]
  }
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
  }
  struct s2 {
    var p0: s1
    var p1: s0
  }
  struct s3 {
    var p0: [s2]
    var p1: s0
    var p2: [[s2]]
    var p3: s1
    var p4: s0
    var p5: s2
  }
  @inline(never)
  func f0(_ v0: s3, _ v1: Double) -> Double {
    let v7: Double = v1 + v1
    let v5: s0 = v0.p1
    let v2: [[Double]] = v5.p3
    let v13: [Double] = v2[0]
    let v19: Double = v7 + v7
    var v14: Double = v19
    v14 = v19
    var v32: [Double] = v13
    let v42: Double = v32[0]
    let v69: [Double] = [v14, v19, v19, v42, v14, v1, v1]
    var v86: [Double] = v69
    let v53: Double = v69[3]
    let v105: Double = v86[5]
    v86[0] = v7
    let v115: Double = v105 + v53
    return v115
  }
  func benchmark() {
    let v0: s3 = s3(p0: [s2(p0: s1(p0: [s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0], [4.0]], p2: [[5.0], [6.0], [7.0]], p3: [[8.0], [9.0], [10.0]], p4: [11.0, 12.0, 13.0]), s0(p0: [[14.0], [15.0]], p1: [[16.0], [17.0], [18.0]], p2: [[19.0], [20.0], [21.0]], p3: [[22.0], [23.0], [24.0]], p4: [25.0, 26.0, 27.0])], p1: [[s0(p0: [[28.0], [29.0]], p1: [[30.0], [31.0], [32.0]], p2: [[33.0], [34.0], [35.0]], p3: [[36.0], [37.0], [38.0]], p4: [39.0, 40.0, 41.0])]]), p1: s0(p0: [[42.0], [43.0]], p1: [[44.0], [45.0], [46.0]], p2: [[47.0], [48.0], [49.0]], p3: [[50.0], [51.0], [52.0]], p4: [53.0, 54.0, 55.0]))], p1: s0(p0: [[56.0], [57.0]], p1: [[58.0], [59.0], [60.0]], p2: [[61.0], [62.0], [63.0]], p3: [[64.0], [65.0], [66.0]], p4: [67.0, 68.0, 69.0]), p2: [[s2(p0: s1(p0: [s0(p0: [[70.0], [71.0]], p1: [[72.0], [73.0], [74.0]], p2: [[75.0], [76.0], [77.0]], p3: [[78.0], [79.0], [80.0]], p4: [81.0, 82.0, 83.0]), s0(p0: [[84.0], [85.0]], p1: [[86.0], [87.0], [88.0]], p2: [[89.0], [90.0], [91.0]], p3: [[92.0], [93.0], [94.0]], p4: [95.0, 96.0, 97.0])], p1: [[s0(p0: [[98.0], [99.0]], p1: [[100.0], [101.0], [102.0]], p2: [[103.0], [104.0], [105.0]], p3: [[106.0], [107.0], [108.0]], p4: [109.0, 110.0, 111.0])]]), p1: s0(p0: [[112.0], [113.0]], p1: [[114.0], [115.0], [116.0]], p2: [[117.0], [118.0], [119.0]], p3: [[120.0], [121.0], [122.0]], p4: [123.0, 124.0, 125.0]))], [s2(p0: s1(p0: [s0(p0: [[126.0], [127.0]], p1: [[128.0], [129.0], [130.0]], p2: [[131.0], [132.0], [133.0]], p3: [[134.0], [135.0], [136.0]], p4: [137.0, 138.0, 139.0]), s0(p0: [[140.0], [141.0]], p1: [[142.0], [143.0], [144.0]], p2: [[145.0], [146.0], [147.0]], p3: [[148.0], [149.0], [150.0]], p4: [151.0, 152.0, 153.0])], p1: [[s0(p0: [[154.0], [155.0]], p1: [[156.0], [157.0], [158.0]], p2: [[159.0], [160.0], [161.0]], p3: [[162.0], [163.0], [164.0]], p4: [165.0, 166.0, 167.0])]]), p1: s0(p0: [[168.0], [169.0]], p1: [[170.0], [171.0], [172.0]], p2: [[173.0], [174.0], [175.0]], p3: [[176.0], [177.0], [178.0]], p4: [179.0, 180.0, 181.0]))], [s2(p0: s1(p0: [s0(p0: [[182.0], [183.0]], p1: [[184.0], [185.0], [186.0]], p2: [[187.0], [188.0], [189.0]], p3: [[190.0], [191.0], [192.0]], p4: [193.0, 194.0, 195.0]), s0(p0: [[196.0], [197.0]], p1: [[198.0], [199.0], [200.0]], p2: [[201.0], [202.0], [203.0]], p3: [[204.0], [205.0], [206.0]], p4: [207.0, 208.0, 209.0])], p1: [[s0(p0: [[210.0], [211.0]], p1: [[212.0], [213.0], [214.0]], p2: [[215.0], [216.0], [217.0]], p3: [[218.0], [219.0], [220.0]], p4: [221.0, 222.0, 223.0])]]), p1: s0(p0: [[224.0], [225.0]], p1: [[226.0], [227.0], [228.0]], p2: [[229.0], [230.0], [231.0]], p3: [[232.0], [233.0], [234.0]], p4: [235.0, 236.0, 237.0]))]], p3: s1(p0: [s0(p0: [[238.0], [239.0]], p1: [[240.0], [241.0], [242.0]], p2: [[243.0], [244.0], [245.0]], p3: [[246.0], [247.0], [248.0]], p4: [249.0, 250.0, 251.0]), s0(p0: [[252.0], [253.0]], p1: [[254.0], [255.0], [256.0]], p2: [[257.0], [258.0], [259.0]], p3: [[260.0], [261.0], [262.0]], p4: [263.0, 264.0, 265.0])], p1: [[s0(p0: [[266.0], [267.0]], p1: [[268.0], [269.0], [270.0]], p2: [[271.0], [272.0], [273.0]], p3: [[274.0], [275.0], [276.0]], p4: [277.0, 278.0, 279.0])]]), p4: s0(p0: [[280.0], [281.0]], p1: [[282.0], [283.0], [284.0]], p2: [[285.0], [286.0], [287.0]], p3: [[288.0], [289.0], [290.0]], p4: [291.0, 292.0, 293.0]), p5: s2(p0: s1(p0: [s0(p0: [[294.0], [295.0]], p1: [[296.0], [297.0], [298.0]], p2: [[299.0], [300.0], [301.0]], p3: [[302.0], [303.0], [304.0]], p4: [305.0, 306.0, 307.0]), s0(p0: [[308.0], [309.0]], p1: [[310.0], [311.0], [312.0]], p2: [[313.0], [314.0], [315.0]], p3: [[316.0], [317.0], [318.0]], p4: [319.0, 320.0, 321.0])], p1: [[s0(p0: [[322.0], [323.0]], p1: [[324.0], [325.0], [326.0]], p2: [[327.0], [328.0], [329.0]], p3: [[330.0], [331.0], [332.0]], p4: [333.0, 334.0, 335.0])]]), p1: s0(p0: [[336.0], [337.0]], p1: [[338.0], [339.0], [340.0]], p2: [[341.0], [342.0], [343.0]], p3: [[344.0], [345.0], [346.0]], p4: [347.0, 348.0, 349.0])))
    let v1: Double = 350.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 350.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
