  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
    var p4: [[Double]]
    var p5: [[Double]]
    var p6: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: s0
    var p1: [s0]
    var p2: s1
    var p3: Double
    var p4: s0
    var p5: s1
  }
  struct s3 {
    var p0: s0
    var p1: s1
  }
  func f30(_ v0: s1) -> s1 {
    let v6: s0 = v0.p1
    let v11: s0 = v0.p1
    let v7: s1 = s1(p0: v11, p1: v6)
    let v5: s0 = v0.p1
    let v9: s0 = v0.p1
    let v18: [[Double]] = v9.p0
    var v26: s0 = v5
    var v43: s1 = v7
    let v50: [[Double]] = v11.p4
    let v39: s0 = v0.p0
    let v31: s1 = s1(p0: v26, p1: v39)
    v43.p0 = v6
    let v33: s0 = v31.p0
    v26.p0 = v18
    v26.p4 = v50
    let v25: s3 = s3(p0: v33, p1: v7)
    let v38: s1 = v25.p1
    var v152: s1 = v43
    var v114: s1 = v152
    v114 = v38
    return v114
  }
  func f18(_ v0: s1, _ v1: s1) -> s1 {
    let v5: s0 = v1.p0
    let v3: s0 = v1.p0
    let v4: s0 = v0.p1
    var v8: s1 = v1
    let v6: [s0] = [v4, v4, v4, v4, v5, v4, v3]
    let v15: s0 = v6[1]
    let v9: s0 = v6[1]
    let v25: s1 = f30(v8)
    let v22: s0 = v6[0]
    v8.p1 = v22
    var v41: s1 = v25
    v8.p1 = v9
    v41.p0 = v15
    let v33: s1 = f30(v41)
    let v73: s0 = v6[5]
    v8.p1 = v73
    let v97: s0 = v1.p1
    let v153: s1 = f30(v33)
    v41.p1 = v97
    let v123: s0 = v1.p0
    var v112: s1 = v153
    v112.p1 = v123
    return v112
  }
  func f14(_ v0: s0) -> s0 {
    let v3: [[Double]] = v0.p0
    var v7: s0 = v0
    var v2: s0 = v0
    let v1: [Double] = v3[0]
    var v5: [Double] = v1
    let v9: [[Double]] = [v5]
    var v8: s0 = v0
    v2.p3 = v9
    let v10: [[Double]] = v7.p4
    let v11: [[Double]] = v2.p6
    v2 = v8
    v7 = v8
    v2.p0 = v3
    let v27: [[Double]] = v7.p3
    v2.p1 = v10
    let v23: s0 = s0(p0: v3, p1: v10, p2: v3, p3: v27, p4: v10, p5: v3, p6: v11)
    return v23
  }
  func f6(_ v0: s0, _ v1: s1, _ v2: s1, _ v3: s1) -> s1 {
    let v15: s1 = f30(v3)
    let v34: s1 = f30(v15)
    let v71: s1 = f18(v1, v1)
    let v37: s1 = f30(v34)
    let v32: s1 = f18(v37, v71)
    let v47: s0 = v32.p0
    let v124: s3 = s3(p0: v47, p1: v2)
    var v159: s1 = v71
    let v146: s1 = v124.p1
    v159.p1 = v47
    let v136: s1 = f18(v146, v159)
    return v136
  }
  func f4(_ v0: s0, _ v1: s1) -> s1 {
    let v4: [[Double]] = v0.p6
    let v2: s0 = f14(v0)
    let v3: [Double] = v4[1]
    var v7: [[Double]] = v4
    let v8: [[Double]] = v2.p3
    let v9: [Double] = v8[0]
    v7[0] = v3
    let v14: s1 = f30(v1)
    v7[0] = v9
    var v5: [Double] = v9
    let v22: s1 = f18(v1, v14)
    let v10: s0 = f14(v2)
    let v24: [Double] = v8[0]
    var v38: [[Double]] = v4
    let v30: [[[Double]]] = [v8, v8, v8, v8, v8, v8]
    let v17: [[Double]] = v0.p4
    var v43: s1 = v22
    let v26: s1 = f18(v43, v22)
    v38[0] = v3
    v7[0] = v9
    let v21: [[Double]] = v30[4]
    v38[0] = v5
    var v44: [[Double]] = v7
    let v19: s0 = s0(p0: v44, p1: v17, p2: v38, p3: v21, p4: v17, p5: v4, p6: v44)
    v43.p0 = v10
    v7[1] = v24
    let v40: s0 = f14(v19)
    var v28: s1 = v1
    let v33: s1 = f6(v0, v28, v26, v22)
    v43.p0 = v40
    v28.p1 = v40
    return v33
  }
  @inline(never)
  func f0(_ v0: s0, _ v1: [s2], _ v2: [[s0]], _ v3: s1, _ v4: [s0], _ v5: Double) -> Double {
    let v24: s1 = f18(v3, v3)
    let v25: s0 = f14(v0)
    let v28: s1 = f4(v25, v24)
    let v31: s0 = v28.p1
    let v48: [[Double]] = v31.p4
    let v38: [Double] = v48[1]
    let v78: Double = v38[0]
    let v70: Double = v38[0]
    var v141: Double = v78
    let v96: Double = v141 - v70
    return v96
  }
  func benchmark() {
    let v0: s0 = s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0], [4.0]], p2: [[5.0], [6.0]], p3: [[7.0]], p4: [[8.0], [9.0], [10.0]], p5: [[11.0], [12.0]], p6: [[13.0], [14.0]])
    let v1: [s2] = [s2(p0: s0(p0: [[15.0], [16.0]], p1: [[17.0], [18.0], [19.0]], p2: [[20.0], [21.0]], p3: [[22.0]], p4: [[23.0], [24.0], [25.0]], p5: [[26.0], [27.0]], p6: [[28.0], [29.0]]), p1: [s0(p0: [[30.0], [31.0]], p1: [[32.0], [33.0], [34.0]], p2: [[35.0], [36.0]], p3: [[37.0]], p4: [[38.0], [39.0], [40.0]], p5: [[41.0], [42.0]], p6: [[43.0], [44.0]])], p2: s1(p0: s0(p0: [[45.0], [46.0]], p1: [[47.0], [48.0], [49.0]], p2: [[50.0], [51.0]], p3: [[52.0]], p4: [[53.0], [54.0], [55.0]], p5: [[56.0], [57.0]], p6: [[58.0], [59.0]]), p1: s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0], [64.0]], p2: [[65.0], [66.0]], p3: [[67.0]], p4: [[68.0], [69.0], [70.0]], p5: [[71.0], [72.0]], p6: [[73.0], [74.0]])), p3: 75.0, p4: s0(p0: [[76.0], [77.0]], p1: [[78.0], [79.0], [80.0]], p2: [[81.0], [82.0]], p3: [[83.0]], p4: [[84.0], [85.0], [86.0]], p5: [[87.0], [88.0]], p6: [[89.0], [90.0]]), p5: s1(p0: s0(p0: [[91.0], [92.0]], p1: [[93.0], [94.0], [95.0]], p2: [[96.0], [97.0]], p3: [[98.0]], p4: [[99.0], [100.0], [101.0]], p5: [[102.0], [103.0]], p6: [[104.0], [105.0]]), p1: s0(p0: [[106.0], [107.0]], p1: [[108.0], [109.0], [110.0]], p2: [[111.0], [112.0]], p3: [[113.0]], p4: [[114.0], [115.0], [116.0]], p5: [[117.0], [118.0]], p6: [[119.0], [120.0]]))), s2(p0: s0(p0: [[121.0], [122.0]], p1: [[123.0], [124.0], [125.0]], p2: [[126.0], [127.0]], p3: [[128.0]], p4: [[129.0], [130.0], [131.0]], p5: [[132.0], [133.0]], p6: [[134.0], [135.0]]), p1: [s0(p0: [[136.0], [137.0]], p1: [[138.0], [139.0], [140.0]], p2: [[141.0], [142.0]], p3: [[143.0]], p4: [[144.0], [145.0], [146.0]], p5: [[147.0], [148.0]], p6: [[149.0], [150.0]])], p2: s1(p0: s0(p0: [[151.0], [152.0]], p1: [[153.0], [154.0], [155.0]], p2: [[156.0], [157.0]], p3: [[158.0]], p4: [[159.0], [160.0], [161.0]], p5: [[162.0], [163.0]], p6: [[164.0], [165.0]]), p1: s0(p0: [[166.0], [167.0]], p1: [[168.0], [169.0], [170.0]], p2: [[171.0], [172.0]], p3: [[173.0]], p4: [[174.0], [175.0], [176.0]], p5: [[177.0], [178.0]], p6: [[179.0], [180.0]])), p3: 181.0, p4: s0(p0: [[182.0], [183.0]], p1: [[184.0], [185.0], [186.0]], p2: [[187.0], [188.0]], p3: [[189.0]], p4: [[190.0], [191.0], [192.0]], p5: [[193.0], [194.0]], p6: [[195.0], [196.0]]), p5: s1(p0: s0(p0: [[197.0], [198.0]], p1: [[199.0], [200.0], [201.0]], p2: [[202.0], [203.0]], p3: [[204.0]], p4: [[205.0], [206.0], [207.0]], p5: [[208.0], [209.0]], p6: [[210.0], [211.0]]), p1: s0(p0: [[212.0], [213.0]], p1: [[214.0], [215.0], [216.0]], p2: [[217.0], [218.0]], p3: [[219.0]], p4: [[220.0], [221.0], [222.0]], p5: [[223.0], [224.0]], p6: [[225.0], [226.0]]))), s2(p0: s0(p0: [[227.0], [228.0]], p1: [[229.0], [230.0], [231.0]], p2: [[232.0], [233.0]], p3: [[234.0]], p4: [[235.0], [236.0], [237.0]], p5: [[238.0], [239.0]], p6: [[240.0], [241.0]]), p1: [s0(p0: [[242.0], [243.0]], p1: [[244.0], [245.0], [246.0]], p2: [[247.0], [248.0]], p3: [[249.0]], p4: [[250.0], [251.0], [252.0]], p5: [[253.0], [254.0]], p6: [[255.0], [256.0]])], p2: s1(p0: s0(p0: [[257.0], [258.0]], p1: [[259.0], [260.0], [261.0]], p2: [[262.0], [263.0]], p3: [[264.0]], p4: [[265.0], [266.0], [267.0]], p5: [[268.0], [269.0]], p6: [[270.0], [271.0]]), p1: s0(p0: [[272.0], [273.0]], p1: [[274.0], [275.0], [276.0]], p2: [[277.0], [278.0]], p3: [[279.0]], p4: [[280.0], [281.0], [282.0]], p5: [[283.0], [284.0]], p6: [[285.0], [286.0]])), p3: 287.0, p4: s0(p0: [[288.0], [289.0]], p1: [[290.0], [291.0], [292.0]], p2: [[293.0], [294.0]], p3: [[295.0]], p4: [[296.0], [297.0], [298.0]], p5: [[299.0], [300.0]], p6: [[301.0], [302.0]]), p5: s1(p0: s0(p0: [[303.0], [304.0]], p1: [[305.0], [306.0], [307.0]], p2: [[308.0], [309.0]], p3: [[310.0]], p4: [[311.0], [312.0], [313.0]], p5: [[314.0], [315.0]], p6: [[316.0], [317.0]]), p1: s0(p0: [[318.0], [319.0]], p1: [[320.0], [321.0], [322.0]], p2: [[323.0], [324.0]], p3: [[325.0]], p4: [[326.0], [327.0], [328.0]], p5: [[329.0], [330.0]], p6: [[331.0], [332.0]])))]
    let v2: [[s0]] = [[s0(p0: [[333.0], [334.0]], p1: [[335.0], [336.0], [337.0]], p2: [[338.0], [339.0]], p3: [[340.0]], p4: [[341.0], [342.0], [343.0]], p5: [[344.0], [345.0]], p6: [[346.0], [347.0]])], [s0(p0: [[348.0], [349.0]], p1: [[350.0], [351.0], [352.0]], p2: [[353.0], [354.0]], p3: [[355.0]], p4: [[356.0], [357.0], [358.0]], p5: [[359.0], [360.0]], p6: [[361.0], [362.0]])]]
    let v3: s1 = s1(p0: s0(p0: [[363.0], [364.0]], p1: [[365.0], [366.0], [367.0]], p2: [[368.0], [369.0]], p3: [[370.0]], p4: [[371.0], [372.0], [373.0]], p5: [[374.0], [375.0]], p6: [[376.0], [377.0]]), p1: s0(p0: [[378.0], [379.0]], p1: [[380.0], [381.0], [382.0]], p2: [[383.0], [384.0]], p3: [[385.0]], p4: [[386.0], [387.0], [388.0]], p5: [[389.0], [390.0]], p6: [[391.0], [392.0]]))
    let v4: [s0] = [s0(p0: [[393.0], [394.0]], p1: [[395.0], [396.0], [397.0]], p2: [[398.0], [399.0]], p3: [[400.0]], p4: [[401.0], [402.0], [403.0]], p5: [[404.0], [405.0]], p6: [[406.0], [407.0]])]
    let v5: Double = 408.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 408.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4, v5)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
