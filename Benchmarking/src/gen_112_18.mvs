  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
  } in
  struct s2 {
    var p0: [s1]
    var p1: [s1]
  } in
  struct s3 {
    var p0: s2
    var p1: s2
  } in
  let f19: (Float, s1) -> Float = (v0: Float, v1: s1) -> Float {
    let v6: [s0] = v1.p1 in
    let v4: s0 = v6[0] in
    let v17: [[Float]] = v4.p1 in
    let v18: [Float] = v17[1] in
    let v36: Float = v18[0] in
    var v72: Float = v36 in
    v72
  } in
  let noinline_f0: (s3, Float) -> Float = (v0: s3, v1: Float) -> Float {
    let v6: s2 = v0.p0 in
    var v3: s2 = v6 in
    var v11: s2 = v3 in
    var v10: s2 = v11 in
    var v8: Float = v1 in
    let v2: [s1] = v3.p0 in
    let v7: s2 = v0.p0 in
    var v21: s3 = v0 in
    let v9: s1 = v2[0] in
    let v20: [s1] = v11.p1 in
    v21.p0 = v3 in
    v10.p1 = v2 in
    let v23: s1 = v2[0] in
    let v25: Float = f19(v1, v9) in
    let v41: Float = f19(v25, v23) in
    let v26: Float = v41 - v1 in
    v3 = v7 in
    let v30: s1 = v2[0] in
    v21.p1 = v10 in
    v10.p0 = v20 in
    var v35: [s1] = v20 in
    let v34: s2 = v21.p1 in
    v3.p0 = v35 in
    v11.p0 = v20 in
    v21 = v0 in
    let v45: Float = v26 * v8 in
    let v63: s2 = v0.p1 in
    let v230: [s1] = v34.p0 in
    v3.p0 = v230 in
    let v87: [s1] = v63.p0 in
    let v156: Float = f19(v45, v30) in
    v3.p1 = v87 in
    v156
  } in
  fun loop(i: Int, v0: s3, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(s2([s1([[s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]])]], [s0([[6.0], [7.0], [8.0]], [[9.0], [10.0], [11.0]])])], [s1([[s0([[12.0], [13.0], [14.0]], [[15.0], [16.0], [17.0]])]], [s0([[18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0]])])]), s2([s1([[s0([[24.0], [25.0], [26.0]], [[27.0], [28.0], [29.0]])]], [s0([[30.0], [31.0], [32.0]], [[33.0], [34.0], [35.0]])])], [s1([[s0([[36.0], [37.0], [38.0]], [[39.0], [40.0], [41.0]])]], [s0([[42.0], [43.0], [44.0]], [[45.0], [46.0], [47.0]])])])) in
    let v1: Float = 48.0 in
    let initialResult: Float = 48.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()