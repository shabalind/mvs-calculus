  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s3 {
    var p0: Float
    var p1: [s1]
  } in
  let noinline_f0: ([s3], Float) -> Float = (v0: [s3], v1: Float) -> Float {
    var v4: Float = v1 in
    let v2: s3 = v0[1] in
    let v3: s3 = v0[0] in
    v4 = v1 in
    var v5: s3 = v2 in
    let v7: Float = v3.p0 in
    let v8: [s1] = v5.p1 in
    v5.p0 = v7 in
    var v18: Float = v7 in
    let v23: Float = v1 - v7 in
    v5.p1 = v8 in
    let v176: Float = v5.p0 in
    let v151: [Float] = [v4, v176, v23, v23, v18, v7] in
    let v93: Float = v151[4] in
    v93
  } in
  fun loop(i: Int, v0: [s3], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s3] = [s3(0.0, [s1(s0([[1.0], [2.0], [3.0]], [[4.0], [5.0]]), s0([[6.0], [7.0], [8.0]], [[9.0], [10.0]])), s1(s0([[11.0], [12.0], [13.0]], [[14.0], [15.0]]), s0([[16.0], [17.0], [18.0]], [[19.0], [20.0]])), s1(s0([[21.0], [22.0], [23.0]], [[24.0], [25.0]]), s0([[26.0], [27.0], [28.0]], [[29.0], [30.0]]))]), s3(31.0, [s1(s0([[32.0], [33.0], [34.0]], [[35.0], [36.0]]), s0([[37.0], [38.0], [39.0]], [[40.0], [41.0]])), s1(s0([[42.0], [43.0], [44.0]], [[45.0], [46.0]]), s0([[47.0], [48.0], [49.0]], [[50.0], [51.0]])), s1(s0([[52.0], [53.0], [54.0]], [[55.0], [56.0]]), s0([[57.0], [58.0], [59.0]], [[60.0], [61.0]]))])] in
    let v1: Float = 62.0 in
    let initialResult: Float = 62.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()