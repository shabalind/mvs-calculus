  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: ([s0], s0, Float) -> Float = (v0: [s0], v1: s0, v2: Float) -> Float {
    let v7: s0 = v0[0] in
    var v6: Float = v2 in
    let v14: [[Float]] = v7.p0 in
    let v11: [Float] = v14[1] in
    var v29: Float = v2 in
    let v26: Float = v11[0] in
    let v47: [Float] = v14[0] in
    var v61: [Float] = v47 in
    v61[0] = v29 in
    v61[0] = v6 in
    v29 = v26 in
    v61[0] = v6 in
    let v88: Float = v61[0] in
    v88
  } in
  fun loop(i: Int, v0: [s0], v1: s0, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0]], [[2.0], [3.0]]), s0([[4.0], [5.0]], [[6.0], [7.0]]), s0([[8.0], [9.0]], [[10.0], [11.0]])] in
    let v1: s0 = s0([[12.0], [13.0]], [[14.0], [15.0]]) in
    let v2: Float = 16.0 in
    let initialResult: Float = 16.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()