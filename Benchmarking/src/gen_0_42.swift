  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: [[Double]]
    var p1: [[s0]]
  }
  struct s3 {
    var p0: [[s0]]
    var p1: [[s1]]
  }
  struct s4 {
    var p0: s0
    var p1: s1
  }
  struct s5 {
    var p0: [s3]
    var p1: s1
    var p2: [[s0]]
  }
  struct s6 {
    var p0: [[s0]]
    var p1: [s4]
    var p2: s0
  }
  struct s10 {
    var p0: s5
    var p1: s6
  }
  func f6(_ v0: s2) -> s2 {
    var v6: s2 = v0
    var v3: s2 = v0
    var v1: s2 = v6
    let v5: [[s0]] = v3.p1
    v1.p1 = v5
    v1 = v0
    let v4: [[Double]] = v1.p0
    var v10: [[Double]] = v4
    let v38: [Double] = v4[1]
    v10[0] = v38
    var v11: s2 = v0
    let v24: [[s0]] = v0.p1
    let v15: [[s0]] = v3.p1
    var v14: [[Double]] = v4
    v11.p0 = v14
    v14[1] = v38
    let v20: [[Double]] = v11.p0
    v6.p0 = v20
    v1.p0 = v14
    v1.p0 = v10
    var v22: s2 = v11
    v22.p1 = v15
    v22.p1 = v24
    return v22
  }
  @inline(never)
  func f0(_ v0: s10, _ v1: [s2], _ v2: Double) -> Double {
    var v7: [s2] = v1
    v7 = v1
    var v5: Double = v2
    v7 = v1
    let v4: s2 = v7[0]
    var v17: [s2] = v7
    let v10: s2 = f6(v4)
    let v11: s2 = f6(v4)
    v17[0] = v11
    let v14: s2 = f6(v10)
    let v62: [[Double]] = v4.p0
    let v40: Double = v5 + v5
    v7 = v17
    let v46: s2 = v17[0]
    let v39: s2 = f6(v10)
    let v24: Double = v5 - v40
    v17[0] = v46
    let v31: [Double] = v62[0]
    let v43: Double = v31[0]
    let v79: s2 = f6(v11)
    v17[0] = v39
    let v48: [s2] = [v4, v11, v39, v14, v79]
    let v44: s2 = f6(v79)
    let v63: Double = v31[0]
    let v42: Double = v63 / v43
    var v61: [s2] = v48
    let v161: Double = v63 / v24
    v61[2] = v46
    let v174: s2 = v61[4]
    let v172: Double = v40 * v42
    v7[0] = v10
    v61[1] = v10
    v61[3] = v79
    let v173: Double = v161 * v172
    v17[0] = v174
    v7[0] = v44
    return v173
  }
  func benchmark() {
    let v0: s10 = s10(p0: s5(p0: [s3(p0: [[s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0]])], [s0(p0: [[4.0], [5.0], [6.0]], p1: [[7.0]])]], p1: [[s1(p0: s0(p0: [[8.0], [9.0], [10.0]], p1: [[11.0]]), p1: s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0]]))], [s1(p0: s0(p0: [[16.0], [17.0], [18.0]], p1: [[19.0]]), p1: s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0]]))]]), s3(p0: [[s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0]])], [s0(p0: [[28.0], [29.0], [30.0]], p1: [[31.0]])]], p1: [[s1(p0: s0(p0: [[32.0], [33.0], [34.0]], p1: [[35.0]]), p1: s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0]]))], [s1(p0: s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0]]), p1: s0(p0: [[44.0], [45.0], [46.0]], p1: [[47.0]]))]]), s3(p0: [[s0(p0: [[48.0], [49.0], [50.0]], p1: [[51.0]])], [s0(p0: [[52.0], [53.0], [54.0]], p1: [[55.0]])]], p1: [[s1(p0: s0(p0: [[56.0], [57.0], [58.0]], p1: [[59.0]]), p1: s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0]]))], [s1(p0: s0(p0: [[64.0], [65.0], [66.0]], p1: [[67.0]]), p1: s0(p0: [[68.0], [69.0], [70.0]], p1: [[71.0]]))]])], p1: s1(p0: s0(p0: [[72.0], [73.0], [74.0]], p1: [[75.0]]), p1: s0(p0: [[76.0], [77.0], [78.0]], p1: [[79.0]])), p2: [[s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0]])]]), p1: s6(p0: [[s0(p0: [[84.0], [85.0], [86.0]], p1: [[87.0]])], [s0(p0: [[88.0], [89.0], [90.0]], p1: [[91.0]])], [s0(p0: [[92.0], [93.0], [94.0]], p1: [[95.0]])]], p1: [s4(p0: s0(p0: [[96.0], [97.0], [98.0]], p1: [[99.0]]), p1: s1(p0: s0(p0: [[100.0], [101.0], [102.0]], p1: [[103.0]]), p1: s0(p0: [[104.0], [105.0], [106.0]], p1: [[107.0]]))), s4(p0: s0(p0: [[108.0], [109.0], [110.0]], p1: [[111.0]]), p1: s1(p0: s0(p0: [[112.0], [113.0], [114.0]], p1: [[115.0]]), p1: s0(p0: [[116.0], [117.0], [118.0]], p1: [[119.0]]))), s4(p0: s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0]]), p1: s1(p0: s0(p0: [[124.0], [125.0], [126.0]], p1: [[127.0]]), p1: s0(p0: [[128.0], [129.0], [130.0]], p1: [[131.0]])))], p2: s0(p0: [[132.0], [133.0], [134.0]], p1: [[135.0]])))
    let v1: [s2] = [s2(p0: [[136.0], [137.0], [138.0]], p1: [[s0(p0: [[139.0], [140.0], [141.0]], p1: [[142.0]])]])]
    let v2: Double = 143.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 143.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
