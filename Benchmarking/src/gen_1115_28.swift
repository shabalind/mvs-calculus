  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  }
  struct s2 {
    var p0: [[s0]]
    var p1: s0
  }
  struct s3 {
    var p0: s1
    var p1: s2
  }
  struct s4 {
    var p0: [s3]
    var p1: s3
  }
  struct s5 {
    var p0: [[s2]]
  }
  func f68(_ v0: Double) -> Double {
    var v3: Double = v0
    var v6: Double = v3
    let v1: Double = v3 * v6
    var v4: Double = v3
    var v2: Double = v6
    var v13: Double = v0
    var v11: Double = v2
    var v8: Double = v13
    var v9: Double = v8
    var v15: Double = v6
    var v12: Double = v9
    var v21: Double = v8
    var v18: Double = v8
    let v23: Double = v13 + v15
    var v16: Double = v21
    var v36: Double = v13
    let v22: [Double] = [v8, v8, v36, v16, v12, v4]
    var v31: [Double] = v22
    var v35: [Double] = v31
    var v51: [Double] = v31
    v31[2] = v11
    v51[1] = v23
    var v91: Double = v18
    v51[3] = v1
    var v96: [Double] = v51
    let v42: Double = v96[0]
    let v48: Double = v51[4]
    var v90: [Double] = v96
    let v66: Double = v51[3]
    v35[0] = v4
    v31[1] = v6
    v4 = v15
    v96[1] = v91
    v35[0] = v48
    let v70: Double = v35[3]
    var v76: Double = v66
    v51[3] = v76
    v12 = v70
    v90[4] = v42
    let v151: Double = v90[1]
    return v151
  }
  @inline(never)
  func f0(_ v0: [s5], _ v1: [s1], _ v2: [s4], _ v3: Double) -> Double {
    var v5: Double = v3
    let v4: Double = f68(v5)
    let v11: Double = f68(v5)
    let v15: Double = v4 / v11
    var v20: Double = v3
    v5 = v20
    return v15
  }
  func benchmark() {
    let v0: [s5] = [s5(p0: [[s2(p0: [[s0(p0: [[0.0], [1.0]], p1: [[2.0]])]], p1: s0(p0: [[3.0], [4.0]], p1: [[5.0]]))], [s2(p0: [[s0(p0: [[6.0], [7.0]], p1: [[8.0]])]], p1: s0(p0: [[9.0], [10.0]], p1: [[11.0]]))], [s2(p0: [[s0(p0: [[12.0], [13.0]], p1: [[14.0]])]], p1: s0(p0: [[15.0], [16.0]], p1: [[17.0]]))]]), s5(p0: [[s2(p0: [[s0(p0: [[18.0], [19.0]], p1: [[20.0]])]], p1: s0(p0: [[21.0], [22.0]], p1: [[23.0]]))], [s2(p0: [[s0(p0: [[24.0], [25.0]], p1: [[26.0]])]], p1: s0(p0: [[27.0], [28.0]], p1: [[29.0]]))], [s2(p0: [[s0(p0: [[30.0], [31.0]], p1: [[32.0]])]], p1: s0(p0: [[33.0], [34.0]], p1: [[35.0]]))]])]
    let v1: [s1] = [s1(p0: s0(p0: [[36.0], [37.0]], p1: [[38.0]]), p1: [[s0(p0: [[39.0], [40.0]], p1: [[41.0]])], [s0(p0: [[42.0], [43.0]], p1: [[44.0]])]]), s1(p0: s0(p0: [[45.0], [46.0]], p1: [[47.0]]), p1: [[s0(p0: [[48.0], [49.0]], p1: [[50.0]])], [s0(p0: [[51.0], [52.0]], p1: [[53.0]])]]), s1(p0: s0(p0: [[54.0], [55.0]], p1: [[56.0]]), p1: [[s0(p0: [[57.0], [58.0]], p1: [[59.0]])], [s0(p0: [[60.0], [61.0]], p1: [[62.0]])]])]
    let v2: [s4] = [s4(p0: [s3(p0: s1(p0: s0(p0: [[63.0], [64.0]], p1: [[65.0]]), p1: [[s0(p0: [[66.0], [67.0]], p1: [[68.0]])], [s0(p0: [[69.0], [70.0]], p1: [[71.0]])]]), p1: s2(p0: [[s0(p0: [[72.0], [73.0]], p1: [[74.0]])]], p1: s0(p0: [[75.0], [76.0]], p1: [[77.0]])))], p1: s3(p0: s1(p0: s0(p0: [[78.0], [79.0]], p1: [[80.0]]), p1: [[s0(p0: [[81.0], [82.0]], p1: [[83.0]])], [s0(p0: [[84.0], [85.0]], p1: [[86.0]])]]), p1: s2(p0: [[s0(p0: [[87.0], [88.0]], p1: [[89.0]])]], p1: s0(p0: [[90.0], [91.0]], p1: [[92.0]])))), s4(p0: [s3(p0: s1(p0: s0(p0: [[93.0], [94.0]], p1: [[95.0]]), p1: [[s0(p0: [[96.0], [97.0]], p1: [[98.0]])], [s0(p0: [[99.0], [100.0]], p1: [[101.0]])]]), p1: s2(p0: [[s0(p0: [[102.0], [103.0]], p1: [[104.0]])]], p1: s0(p0: [[105.0], [106.0]], p1: [[107.0]])))], p1: s3(p0: s1(p0: s0(p0: [[108.0], [109.0]], p1: [[110.0]]), p1: [[s0(p0: [[111.0], [112.0]], p1: [[113.0]])], [s0(p0: [[114.0], [115.0]], p1: [[116.0]])]]), p1: s2(p0: [[s0(p0: [[117.0], [118.0]], p1: [[119.0]])]], p1: s0(p0: [[120.0], [121.0]], p1: [[122.0]])))), s4(p0: [s3(p0: s1(p0: s0(p0: [[123.0], [124.0]], p1: [[125.0]]), p1: [[s0(p0: [[126.0], [127.0]], p1: [[128.0]])], [s0(p0: [[129.0], [130.0]], p1: [[131.0]])]]), p1: s2(p0: [[s0(p0: [[132.0], [133.0]], p1: [[134.0]])]], p1: s0(p0: [[135.0], [136.0]], p1: [[137.0]])))], p1: s3(p0: s1(p0: s0(p0: [[138.0], [139.0]], p1: [[140.0]]), p1: [[s0(p0: [[141.0], [142.0]], p1: [[143.0]])], [s0(p0: [[144.0], [145.0]], p1: [[146.0]])]]), p1: s2(p0: [[s0(p0: [[147.0], [148.0]], p1: [[149.0]])]], p1: s0(p0: [[150.0], [151.0]], p1: [[152.0]]))))]
    let v3: Double = 153.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 153.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
