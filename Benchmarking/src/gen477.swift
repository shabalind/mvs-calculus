  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
  }
  struct s2 {
    var p0: [[s1]]
    var p1: [s0]
  }
  struct s3 {
    var p0: [s2]
    var p1: s2
  }
  func f70(_ v0: s2) -> s2 {
    let v2: [[s1]] = v0.p0
    let v4: [s1] = v2[0]
    let v5: s1 = v4[0]
    let v6: [[s1]] = v0.p0
    var v7: [s1] = v4
    v7[0] = v5
    let v3: [s1] = v6[0]
    v7[0] = v5
    v7[0] = v5
    var v11: [[s1]] = v2
    v11[1] = v4
    var v19: [[s1]] = v11
    v11[1] = v4
    v7[0] = v5
    var v23: [s1] = v3
    var v41: [s1] = v4
    let v46: s1 = v4[0]
    v7[0] = v5
    v19[1] = v23
    var v35: s2 = v0
    v19[1] = v3
    var v31: s1 = v46
    let v57: [[s1]] = v0.p0
    v35.p0 = v57
    let v59: [s0] = v35.p1
    var v47: [s1] = v41
    let v56: s2 = s2(p0: v19, p1: v59)
    v41[0] = v31
    v11[1] = v47
    v19[0] = v7
    v11[0] = v4
    return v56
  }
  func f25(_ v0: s0) -> s0 {
    var v3: s0 = v0
    let v1: [[Double]] = v3.p0
    let v2: [[Double]] = v3.p0
    let v5: [[Double]] = v0.p1
    v3.p0 = v2
    let v9: [[Double]] = v0.p0
    v3.p0 = v9
    let v7: [[Double]] = v0.p1
    let v8: [[Double]] = v0.p1
    v3.p0 = v9
    let v15: [[[Double]]] = [v5]
    let v18: [[Double]] = v15[0]
    let v13: [[Double]] = v3.p0
    let v17: [[[Double]]] = [v7, v18, v8, v7, v5, v5, v5]
    let v21: [[Double]] = v0.p1
    v3.p1 = v21
    let v30: [[Double]] = v17[6]
    v3.p0 = v9
    v3.p0 = v2
    var v39: [[[Double]]] = v15
    v3.p0 = v1
    let v31: [[Double]] = v39[0]
    let v51: [[Double]] = v39[0]
    let v46: [[Double]] = v0.p1
    let v79: [[Double]] = v0.p0
    v3.p0 = v79
    let v36: [[Double]] = v0.p0
    v3.p1 = v30
    let v71: s0 = s0(p0: v79, p1: v31)
    var v77: s0 = v3
    let v82: [[Double]] = v71.p0
    v3.p0 = v13
    v3.p1 = v51
    v3.p0 = v36
    v3.p0 = v79
    v77.p0 = v82
    v77.p1 = v30
    v3.p1 = v46
    return v77
  }
  func f24(_ v0: s2) -> s2 {
    var v6: s2 = v0
    var v2: s2 = v0
    let v4: s2 = f70(v2)
    var v1: s2 = v2
    let v9: [s2] = [v0, v1, v2, v4, v4, v0, v6]
    let v5: [[s1]] = v4.p0
    let v7: [[s1]] = v6.p0
    let v8: s2 = f70(v1)
    let v3: s2 = f70(v2)
    let v12: [[[s1]]] = [v7, v7, v5, v5, v7]
    let v15: s2 = f70(v8)
    let v11: [s0] = v1.p1
    v2 = v3
    var v10: [s2] = v9
    let v23: s2 = f70(v1)
    var v19: [[[s1]]] = v12
    let v14: [[s1]] = v6.p0
    let v25: [[s1]] = v1.p0
    let v30: [[s1]] = v15.p0
    let v21: s2 = f70(v4)
    v10[2] = v21
    let v20: s2 = f70(v0)
    let v39: s2 = s2(p0: v14, p1: v11)
    v10[2] = v6
    let v34: [[s1]] = v19[0]
    let v22: [[s1]] = v23.p0
    v10[4] = v2
    v19[3] = v25
    var v43: [s2] = v10
    v10[5] = v39
    var v36: [s2] = v9
    v10 = v36
    v2.p0 = v5
    v1.p0 = v22
    v2.p0 = v5
    v2.p0 = v25
    v6.p0 = v34
    v19[3] = v25
    let v131: s2 = v43[1]
    v6.p0 = v25
    v2.p0 = v30
    v6.p0 = v25
    v43[1] = v20
    return v131
  }
  @inline(never)
  func f0(_ v0: [s3], _ v1: Double) -> Double {
    var v2: [s3] = v0
    let v5: s3 = v2[1]
    v2[0] = v5
    let v7: s2 = v5.p1
    v2[1] = v5
    let v3: s3 = v0[0]
    v2[1] = v3
    v2[1] = v5
    let v20: s2 = f24(v7)
    v2[1] = v5
    let v26: s2 = f70(v20)
    let v27: [s0] = v26.p1
    let v24: s0 = v27[0]
    let v28: s0 = f25(v24)
    let v68: [[Double]] = v28.p1
    let v52: [Double] = v68[0]
    let v206: Double = v52[0]
    return v206
  }
  func benchmark() {
    let v0: [s3] = [s3(p0: [s2(p0: [[s1(p0: [s0(p0: [[0.0], [1.0]], p1: [[2.0]]), s0(p0: [[3.0], [4.0]], p1: [[5.0]]), s0(p0: [[6.0], [7.0]], p1: [[8.0]])], p1: [[s0(p0: [[9.0], [10.0]], p1: [[11.0]])], [s0(p0: [[12.0], [13.0]], p1: [[14.0]])], [s0(p0: [[15.0], [16.0]], p1: [[17.0]])]])], [s1(p0: [s0(p0: [[18.0], [19.0]], p1: [[20.0]]), s0(p0: [[21.0], [22.0]], p1: [[23.0]]), s0(p0: [[24.0], [25.0]], p1: [[26.0]])], p1: [[s0(p0: [[27.0], [28.0]], p1: [[29.0]])], [s0(p0: [[30.0], [31.0]], p1: [[32.0]])], [s0(p0: [[33.0], [34.0]], p1: [[35.0]])]])]], p1: [s0(p0: [[36.0], [37.0]], p1: [[38.0]]), s0(p0: [[39.0], [40.0]], p1: [[41.0]])]), s2(p0: [[s1(p0: [s0(p0: [[42.0], [43.0]], p1: [[44.0]]), s0(p0: [[45.0], [46.0]], p1: [[47.0]]), s0(p0: [[48.0], [49.0]], p1: [[50.0]])], p1: [[s0(p0: [[51.0], [52.0]], p1: [[53.0]])], [s0(p0: [[54.0], [55.0]], p1: [[56.0]])], [s0(p0: [[57.0], [58.0]], p1: [[59.0]])]])], [s1(p0: [s0(p0: [[60.0], [61.0]], p1: [[62.0]]), s0(p0: [[63.0], [64.0]], p1: [[65.0]]), s0(p0: [[66.0], [67.0]], p1: [[68.0]])], p1: [[s0(p0: [[69.0], [70.0]], p1: [[71.0]])], [s0(p0: [[72.0], [73.0]], p1: [[74.0]])], [s0(p0: [[75.0], [76.0]], p1: [[77.0]])]])]], p1: [s0(p0: [[78.0], [79.0]], p1: [[80.0]]), s0(p0: [[81.0], [82.0]], p1: [[83.0]])]), s2(p0: [[s1(p0: [s0(p0: [[84.0], [85.0]], p1: [[86.0]]), s0(p0: [[87.0], [88.0]], p1: [[89.0]]), s0(p0: [[90.0], [91.0]], p1: [[92.0]])], p1: [[s0(p0: [[93.0], [94.0]], p1: [[95.0]])], [s0(p0: [[96.0], [97.0]], p1: [[98.0]])], [s0(p0: [[99.0], [100.0]], p1: [[101.0]])]])], [s1(p0: [s0(p0: [[102.0], [103.0]], p1: [[104.0]]), s0(p0: [[105.0], [106.0]], p1: [[107.0]]), s0(p0: [[108.0], [109.0]], p1: [[110.0]])], p1: [[s0(p0: [[111.0], [112.0]], p1: [[113.0]])], [s0(p0: [[114.0], [115.0]], p1: [[116.0]])], [s0(p0: [[117.0], [118.0]], p1: [[119.0]])]])]], p1: [s0(p0: [[120.0], [121.0]], p1: [[122.0]]), s0(p0: [[123.0], [124.0]], p1: [[125.0]])])], p1: s2(p0: [[s1(p0: [s0(p0: [[126.0], [127.0]], p1: [[128.0]]), s0(p0: [[129.0], [130.0]], p1: [[131.0]]), s0(p0: [[132.0], [133.0]], p1: [[134.0]])], p1: [[s0(p0: [[135.0], [136.0]], p1: [[137.0]])], [s0(p0: [[138.0], [139.0]], p1: [[140.0]])], [s0(p0: [[141.0], [142.0]], p1: [[143.0]])]])], [s1(p0: [s0(p0: [[144.0], [145.0]], p1: [[146.0]]), s0(p0: [[147.0], [148.0]], p1: [[149.0]]), s0(p0: [[150.0], [151.0]], p1: [[152.0]])], p1: [[s0(p0: [[153.0], [154.0]], p1: [[155.0]])], [s0(p0: [[156.0], [157.0]], p1: [[158.0]])], [s0(p0: [[159.0], [160.0]], p1: [[161.0]])]])]], p1: [s0(p0: [[162.0], [163.0]], p1: [[164.0]]), s0(p0: [[165.0], [166.0]], p1: [[167.0]])])), s3(p0: [s2(p0: [[s1(p0: [s0(p0: [[168.0], [169.0]], p1: [[170.0]]), s0(p0: [[171.0], [172.0]], p1: [[173.0]]), s0(p0: [[174.0], [175.0]], p1: [[176.0]])], p1: [[s0(p0: [[177.0], [178.0]], p1: [[179.0]])], [s0(p0: [[180.0], [181.0]], p1: [[182.0]])], [s0(p0: [[183.0], [184.0]], p1: [[185.0]])]])], [s1(p0: [s0(p0: [[186.0], [187.0]], p1: [[188.0]]), s0(p0: [[189.0], [190.0]], p1: [[191.0]]), s0(p0: [[192.0], [193.0]], p1: [[194.0]])], p1: [[s0(p0: [[195.0], [196.0]], p1: [[197.0]])], [s0(p0: [[198.0], [199.0]], p1: [[200.0]])], [s0(p0: [[201.0], [202.0]], p1: [[203.0]])]])]], p1: [s0(p0: [[204.0], [205.0]], p1: [[206.0]]), s0(p0: [[207.0], [208.0]], p1: [[209.0]])]), s2(p0: [[s1(p0: [s0(p0: [[210.0], [211.0]], p1: [[212.0]]), s0(p0: [[213.0], [214.0]], p1: [[215.0]]), s0(p0: [[216.0], [217.0]], p1: [[218.0]])], p1: [[s0(p0: [[219.0], [220.0]], p1: [[221.0]])], [s0(p0: [[222.0], [223.0]], p1: [[224.0]])], [s0(p0: [[225.0], [226.0]], p1: [[227.0]])]])], [s1(p0: [s0(p0: [[228.0], [229.0]], p1: [[230.0]]), s0(p0: [[231.0], [232.0]], p1: [[233.0]]), s0(p0: [[234.0], [235.0]], p1: [[236.0]])], p1: [[s0(p0: [[237.0], [238.0]], p1: [[239.0]])], [s0(p0: [[240.0], [241.0]], p1: [[242.0]])], [s0(p0: [[243.0], [244.0]], p1: [[245.0]])]])]], p1: [s0(p0: [[246.0], [247.0]], p1: [[248.0]]), s0(p0: [[249.0], [250.0]], p1: [[251.0]])]), s2(p0: [[s1(p0: [s0(p0: [[252.0], [253.0]], p1: [[254.0]]), s0(p0: [[255.0], [256.0]], p1: [[257.0]]), s0(p0: [[258.0], [259.0]], p1: [[260.0]])], p1: [[s0(p0: [[261.0], [262.0]], p1: [[263.0]])], [s0(p0: [[264.0], [265.0]], p1: [[266.0]])], [s0(p0: [[267.0], [268.0]], p1: [[269.0]])]])], [s1(p0: [s0(p0: [[270.0], [271.0]], p1: [[272.0]]), s0(p0: [[273.0], [274.0]], p1: [[275.0]]), s0(p0: [[276.0], [277.0]], p1: [[278.0]])], p1: [[s0(p0: [[279.0], [280.0]], p1: [[281.0]])], [s0(p0: [[282.0], [283.0]], p1: [[284.0]])], [s0(p0: [[285.0], [286.0]], p1: [[287.0]])]])]], p1: [s0(p0: [[288.0], [289.0]], p1: [[290.0]]), s0(p0: [[291.0], [292.0]], p1: [[293.0]])])], p1: s2(p0: [[s1(p0: [s0(p0: [[294.0], [295.0]], p1: [[296.0]]), s0(p0: [[297.0], [298.0]], p1: [[299.0]]), s0(p0: [[300.0], [301.0]], p1: [[302.0]])], p1: [[s0(p0: [[303.0], [304.0]], p1: [[305.0]])], [s0(p0: [[306.0], [307.0]], p1: [[308.0]])], [s0(p0: [[309.0], [310.0]], p1: [[311.0]])]])], [s1(p0: [s0(p0: [[312.0], [313.0]], p1: [[314.0]]), s0(p0: [[315.0], [316.0]], p1: [[317.0]]), s0(p0: [[318.0], [319.0]], p1: [[320.0]])], p1: [[s0(p0: [[321.0], [322.0]], p1: [[323.0]])], [s0(p0: [[324.0], [325.0]], p1: [[326.0]])], [s0(p0: [[327.0], [328.0]], p1: [[329.0]])]])]], p1: [s0(p0: [[330.0], [331.0]], p1: [[332.0]]), s0(p0: [[333.0], [334.0]], p1: [[335.0]])]))]
    let v1: Double = 336.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 336.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
