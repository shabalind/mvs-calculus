  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [Double]
  }
  struct s2 {
    var p0: [s0]
    var p1: s1
  }
  struct s3 {
    var p0: [s2]
    var p1: [s1]
  }
  struct s4 {
    var p0: s3
    var p1: s0
    var p2: s0
  }
  struct s7 {
    var p0: s3
    var p1: [s1]
  }
  func f43(_ v0: s4) -> s4 {
    var v1: s4 = v0
    var v12: s4 = v1
    return v12
  }
  func f41(_ v0: [Double]) -> [Double] {
    var v3: [Double] = v0
    var v8: [Double] = v0
    var v1: [Double] = v0
    var v2: [Double] = v8
    let v9: Double = v3[0]
    let v5: Double = v3[0]
    let v7: Double = v2[0]
    v8 = v1
    var v13: Double = v7
    var v14: Double = v13
    var v11: [Double] = v3
    v8[1] = v9
    let v20: [Double] = [v9, v14, v5]
    v1[1] = v5
    var v26: [Double] = v20
    let v16: Double = v26[1]
    v11[1] = v14
    v3[1] = v16
    v2[0] = v14
    return v11
  }
  func f37(_ v0: s3, _ v1: s3) -> s3 {
    let v2: [s2] = v1.p0
    var v4: [s2] = v2
    let v10: s2 = v4[0]
    let v3: [s2] = v1.p0
    var v8: [s2] = v3
    let v7: s2 = v2[0]
    v8[0] = v7
    let v6: s2 = v4[0]
    var v13: s2 = v7
    var v22: s2 = v6
    let v9: s2 = v8[0]
    var v11: s3 = v1
    let v12: s2 = v3[0]
    v4 = v2
    let v18: [s2] = v0.p0
    let v20: [s1] = v11.p1
    v8[0] = v13
    v11.p0 = v4
    let v15: s1 = v20[2]
    let v17: s0 = v15.p0
    let v21: [s1] = v0.p1
    v11.p0 = v2
    v22.p1 = v15
    let v51: [s0] = v9.p0
    let v31: [Double] = v15.p1
    let v23: s0 = v51[0]
    v8[0] = v10
    let v45: s1 = v21[0]
    let v35: s4 = s4(p0: v1, p1: v23, p2: v17)
    v13 = v12
    v13.p0 = v51
    v8[0] = v6
    let v76: s4 = f43(v35)
    v11.p0 = v18
    v8[0] = v6
    var v105: s1 = v45
    v8[0] = v12
    let v102: [Double] = f41(v31)
    v13.p0 = v51
    let v131: s3 = v76.p0
    v105.p1 = v102
    v13.p1 = v105
    v8[0] = v22
    v8[0] = v9
    v8 = v4
    return v131
  }
  func f5(_ v0: [s2]) -> [s2] {
    var v7: [s2] = v0
    let v6: s2 = v7[0]
    let v4: [s0] = v6.p0
    let v8: [s0] = v6.p0
    var v9: s2 = v6
    var v11: s2 = v9
    v7[0] = v11
    v11.p0 = v4
    let v3: s2 = v0[0]
    v7[0] = v3
    var v29: [s0] = v8
    v9.p0 = v29
    return v7
  }
  @inline(never)
  func f0(_ v0: s7, _ v1: [s3], _ v2: s3, _ v3: Double) -> Double {
    var v5: s3 = v2
    let v15: s3 = f37(v2, v5)
    let v18: [s2] = v15.p0
    let v13: [s2] = v15.p0
    let v29: s2 = v18[0]
    let v10: [s2] = f5(v13)
    let v19: [s1] = v0.p1
    v5.p0 = v10
    let v50: [s0] = v29.p0
    let v49: s0 = v50[0]
    var v23: [s1] = v19
    v5.p1 = v23
    let v51: [[Double]] = v49.p3
    let v97: [Double] = v51[0]
    let v265: Double = v97[0]
    return v265
  }
  func benchmark() {
    let v0: s7 = s7(p0: s3(p0: [s2(p0: [s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0], [4.0]], p2: [[5.0]], p3: [[6.0], [7.0], [8.0]]), s0(p0: [[9.0], [10.0]], p1: [[11.0], [12.0], [13.0]], p2: [[14.0]], p3: [[15.0], [16.0], [17.0]]), s0(p0: [[18.0], [19.0]], p1: [[20.0], [21.0], [22.0]], p2: [[23.0]], p3: [[24.0], [25.0], [26.0]])], p1: s1(p0: s0(p0: [[27.0], [28.0]], p1: [[29.0], [30.0], [31.0]], p2: [[32.0]], p3: [[33.0], [34.0], [35.0]]), p1: [36.0, 37.0]))], p1: [s1(p0: s0(p0: [[38.0], [39.0]], p1: [[40.0], [41.0], [42.0]], p2: [[43.0]], p3: [[44.0], [45.0], [46.0]]), p1: [47.0, 48.0]), s1(p0: s0(p0: [[49.0], [50.0]], p1: [[51.0], [52.0], [53.0]], p2: [[54.0]], p3: [[55.0], [56.0], [57.0]]), p1: [58.0, 59.0]), s1(p0: s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0], [64.0]], p2: [[65.0]], p3: [[66.0], [67.0], [68.0]]), p1: [69.0, 70.0])]), p1: [s1(p0: s0(p0: [[71.0], [72.0]], p1: [[73.0], [74.0], [75.0]], p2: [[76.0]], p3: [[77.0], [78.0], [79.0]]), p1: [80.0, 81.0]), s1(p0: s0(p0: [[82.0], [83.0]], p1: [[84.0], [85.0], [86.0]], p2: [[87.0]], p3: [[88.0], [89.0], [90.0]]), p1: [91.0, 92.0]), s1(p0: s0(p0: [[93.0], [94.0]], p1: [[95.0], [96.0], [97.0]], p2: [[98.0]], p3: [[99.0], [100.0], [101.0]]), p1: [102.0, 103.0])])
    let v1: [s3] = [s3(p0: [s2(p0: [s0(p0: [[104.0], [105.0]], p1: [[106.0], [107.0], [108.0]], p2: [[109.0]], p3: [[110.0], [111.0], [112.0]]), s0(p0: [[113.0], [114.0]], p1: [[115.0], [116.0], [117.0]], p2: [[118.0]], p3: [[119.0], [120.0], [121.0]]), s0(p0: [[122.0], [123.0]], p1: [[124.0], [125.0], [126.0]], p2: [[127.0]], p3: [[128.0], [129.0], [130.0]])], p1: s1(p0: s0(p0: [[131.0], [132.0]], p1: [[133.0], [134.0], [135.0]], p2: [[136.0]], p3: [[137.0], [138.0], [139.0]]), p1: [140.0, 141.0]))], p1: [s1(p0: s0(p0: [[142.0], [143.0]], p1: [[144.0], [145.0], [146.0]], p2: [[147.0]], p3: [[148.0], [149.0], [150.0]]), p1: [151.0, 152.0]), s1(p0: s0(p0: [[153.0], [154.0]], p1: [[155.0], [156.0], [157.0]], p2: [[158.0]], p3: [[159.0], [160.0], [161.0]]), p1: [162.0, 163.0]), s1(p0: s0(p0: [[164.0], [165.0]], p1: [[166.0], [167.0], [168.0]], p2: [[169.0]], p3: [[170.0], [171.0], [172.0]]), p1: [173.0, 174.0])])]
    let v2: s3 = s3(p0: [s2(p0: [s0(p0: [[175.0], [176.0]], p1: [[177.0], [178.0], [179.0]], p2: [[180.0]], p3: [[181.0], [182.0], [183.0]]), s0(p0: [[184.0], [185.0]], p1: [[186.0], [187.0], [188.0]], p2: [[189.0]], p3: [[190.0], [191.0], [192.0]]), s0(p0: [[193.0], [194.0]], p1: [[195.0], [196.0], [197.0]], p2: [[198.0]], p3: [[199.0], [200.0], [201.0]])], p1: s1(p0: s0(p0: [[202.0], [203.0]], p1: [[204.0], [205.0], [206.0]], p2: [[207.0]], p3: [[208.0], [209.0], [210.0]]), p1: [211.0, 212.0]))], p1: [s1(p0: s0(p0: [[213.0], [214.0]], p1: [[215.0], [216.0], [217.0]], p2: [[218.0]], p3: [[219.0], [220.0], [221.0]]), p1: [222.0, 223.0]), s1(p0: s0(p0: [[224.0], [225.0]], p1: [[226.0], [227.0], [228.0]], p2: [[229.0]], p3: [[230.0], [231.0], [232.0]]), p1: [233.0, 234.0]), s1(p0: s0(p0: [[235.0], [236.0]], p1: [[237.0], [238.0], [239.0]], p2: [[240.0]], p3: [[241.0], [242.0], [243.0]]), p1: [244.0, 245.0])])
    let v3: Double = 246.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 246.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
