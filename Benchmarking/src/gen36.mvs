  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: s0
    var p1: s1
  } in
  struct s3 {
    var p0: [[s1]]
    var p1: [s0]
  } in
  let f19: (s3, s3, s3) -> s3 = (v0: s3, v1: s3, v2: s3) -> s3 {
    let v6: [[s1]] = v2.p0 in
    var v4: s3 = v0 in
    v4.p0 = v6 in
    v4 = v0 in
    v4
  } in
  let f9: (s3, [s3]) -> s3 = (v0: s3, v1: [s3]) -> s3 {
    v0
  } in
  let noinline_f0: ([s2], [[s3]], Float) -> Float = (v0: [s2], v1: [[s3]], v2: Float) -> Float {
    let v4: [s3] = v1[1] in
    var v5: Float = v2 in
    let v8: s3 = v4[0] in
    var v9: Float = v5 in
    let v10: s3 = f19(v8, v8, v8) in
    let v15: s3 = f9(v10, v4) in
    let v11: [s0] = v15.p1 in
    let v34: s0 = v11[1] in
    let v40: [[Float]] = v34.p0 in
    var v24: Float = v5 in
    let v22: [Float] = v40[1] in
    let v43: Float = v22[0] in
    v9 = v2 in
    let v29: Float = v24 - v2 in
    let v118: Float = v43 + v29 in
    v5 = v9 in
    v118
  } in
  fun loop(i: Int, v0: [s2], v1: [[s3]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2(s0([[0.0], [1.0]], [[2.0]]), s1(s0([[3.0], [4.0]], [[5.0]]), [s0([[6.0], [7.0]], [[8.0]])]))] in
    let v1: [[s3]] = [[s3([[s1(s0([[9.0], [10.0]], [[11.0]]), [s0([[12.0], [13.0]], [[14.0]])])]], [s0([[15.0], [16.0]], [[17.0]]), s0([[18.0], [19.0]], [[20.0]])])], [s3([[s1(s0([[21.0], [22.0]], [[23.0]]), [s0([[24.0], [25.0]], [[26.0]])])]], [s0([[27.0], [28.0]], [[29.0]]), s0([[30.0], [31.0]], [[32.0]])])], [s3([[s1(s0([[33.0], [34.0]], [[35.0]]), [s0([[36.0], [37.0]], [[38.0]])])]], [s0([[39.0], [40.0]], [[41.0]]), s0([[42.0], [43.0]], [[44.0]])])]] in
    let v2: Float = 45.0 in
    let initialResult: Float = 45.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()