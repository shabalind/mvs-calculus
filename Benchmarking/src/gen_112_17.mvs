  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s3 {
    var p0: s1
    var p1: s1
  } in
  let noinline_f0: (s3, [s0], Float) -> Float = (v0: s3, v1: [s0], v2: Float) -> Float {
    let v7: s0 = v1[0] in
    let v5: [[Float]] = v7.p0 in
    var v3: [[Float]] = v5 in
    let v50: [Float] = v5[0] in
    v3[1] = v50 in
    v3[1] = v50 in
    v3[2] = v50 in
    let v49: [Float] = v3[0] in
    let v46: Float = v49[0] in
    let v95: Float = v46 * v46 in
    v95
  } in
  fun loop(i: Int, v0: s3, v1: [s0], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(s1(s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]]), [s0([[6.0], [7.0], [8.0]], [[9.0], [10.0], [11.0]])]), s1(s0([[12.0], [13.0], [14.0]], [[15.0], [16.0], [17.0]]), [s0([[18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0]])])) in
    let v1: [s0] = [s0([[24.0], [25.0], [26.0]], [[27.0], [28.0], [29.0]])] in
    let v2: Float = 30.0 in
    let initialResult: Float = 30.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()