  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: Float
    var p1: s0
  } in
  struct s2 {
    var p0: [s1]
    var p1: [s1]
    var p2: [s1]
    var p3: [s0]
  } in
  struct s3 {
    var p0: s1
    var p1: [s0]
  } in
  struct s4 {
    var p0: s3
    var p1: s0
  } in
  struct s5 {
    var p0: [s2]
    var p1: s2
  } in
  struct s8 {
    var p0: s3
    var p1: [s1]
  } in
  let f22: (s2) -> s2 = (v0: s2) -> s2 {
    var v1: s2 = v0 in
    var v5: s2 = v1 in
    var v11: s2 = v5 in
    v11 = v0 in
    v11
  } in
  let f18: ([s2]) -> [s2] = (v0: [s2]) -> [s2] {
    let v7: s2 = v0[1] in
    let v5: s2 = f22(v7) in
    var v8: s2 = v5 in
    let v10: s2 = f22(v8) in
    let v9: [s1] = v10.p0 in
    v8.p0 = v9 in
    let v11: s2 = f22(v10) in
    v8.p0 = v9 in
    v8.p0 = v9 in
    let v62: s5 = s5(v0, v11) in
    let v71: [s2] = v62.p0 in
    v71
  } in
  let noinline_f0: (s3, [s2], [s4], Float) -> Float = (v0: s3, v1: [s2], v2: [s4], v3: Float) -> Float {
    let v9: [s2] = f18(v1) in
    var v8: [s2] = v9 in
    var v7: Float = v3 in
    let v17: Float = v7 + v3 in
    var v13: s3 = v0 in
    let v14: s2 = v8[0] in
    let v22: [s1] = v14.p2 in
    let v16: s1 = v22[0] in
    let v28: [s1] = v14.p1 in
    v8[1] = v14 in
    v13.p0 = v16 in
    let v19: s8 = s8(v0, v28) in
    var v15: [s1] = v28 in
    v13.p0 = v16 in
    let v64: s8 = s8(v13, v15) in
    let v59: s1 = v0.p0 in
    let v48: s3 = v19.p0 in
    v15[0] = v59 in
    let v54: [s1] = v64.p1 in
    let v82: [s1] = [v16, v59, v59, v16, v16, v59] in
    v13 = v48 in
    let v119: s1 = v82[5] in
    var v90: [s1] = v54 in
    v13.p0 = v119 in
    let v176: Float = v7 * v17 in
    let v130: s1 = v90[0] in
    let v213: Float = v130.p0 in
    v13.p0 = v59 in
    var v98: Float = v213 in
    let v171: [Float] = [v213, v17, v98, v98, v176, v213, v98] in
    let v301: Float = v171[4] in
    v90[0] = v119 in
    v301
  } in
  fun loop(i: Int, v0: s3, v1: [s2], v2: [s4], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(s1(0.0, s0([[1.0], [2.0], [3.0]], [[4.0], [5.0]])), [s0([[6.0], [7.0], [8.0]], [[9.0], [10.0]])]) in
    let v1: [s2] = [s2([s1(11.0, s0([[12.0], [13.0], [14.0]], [[15.0], [16.0]])), s1(17.0, s0([[18.0], [19.0], [20.0]], [[21.0], [22.0]]))], [s1(23.0, s0([[24.0], [25.0], [26.0]], [[27.0], [28.0]]))], [s1(29.0, s0([[30.0], [31.0], [32.0]], [[33.0], [34.0]]))], [s0([[35.0], [36.0], [37.0]], [[38.0], [39.0]]), s0([[40.0], [41.0], [42.0]], [[43.0], [44.0]])]), s2([s1(45.0, s0([[46.0], [47.0], [48.0]], [[49.0], [50.0]])), s1(51.0, s0([[52.0], [53.0], [54.0]], [[55.0], [56.0]]))], [s1(57.0, s0([[58.0], [59.0], [60.0]], [[61.0], [62.0]]))], [s1(63.0, s0([[64.0], [65.0], [66.0]], [[67.0], [68.0]]))], [s0([[69.0], [70.0], [71.0]], [[72.0], [73.0]]), s0([[74.0], [75.0], [76.0]], [[77.0], [78.0]])]), s2([s1(79.0, s0([[80.0], [81.0], [82.0]], [[83.0], [84.0]])), s1(85.0, s0([[86.0], [87.0], [88.0]], [[89.0], [90.0]]))], [s1(91.0, s0([[92.0], [93.0], [94.0]], [[95.0], [96.0]]))], [s1(97.0, s0([[98.0], [99.0], [100.0]], [[101.0], [102.0]]))], [s0([[103.0], [104.0], [105.0]], [[106.0], [107.0]]), s0([[108.0], [109.0], [110.0]], [[111.0], [112.0]])])] in
    let v2: [s4] = [s4(s3(s1(113.0, s0([[114.0], [115.0], [116.0]], [[117.0], [118.0]])), [s0([[119.0], [120.0], [121.0]], [[122.0], [123.0]])]), s0([[124.0], [125.0], [126.0]], [[127.0], [128.0]])), s4(s3(s1(129.0, s0([[130.0], [131.0], [132.0]], [[133.0], [134.0]])), [s0([[135.0], [136.0], [137.0]], [[138.0], [139.0]])]), s0([[140.0], [141.0], [142.0]], [[143.0], [144.0]]))] in
    let v3: Float = 145.0 in
    let initialResult: Float = 145.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()