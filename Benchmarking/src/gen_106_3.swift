  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  }
  struct s2 {
    var p0: s1
    var p1: [s0]
  }
  struct s3 {
    var p0: s2
    var p1: s1
  }
  struct s5 {
    var p0: s3
    var p1: [[s3]]
  }
  struct s7 {
    var p0: s5
    var p1: [s5]
  }
  func f51(_ v0: s0) -> s0 {
    var v4: s0 = v0
    var v7: s0 = v4
    let v2: [[Double]] = v0.p1
    let v5: [[Double]] = v4.p0
    let v8: [[Double]] = v0.p1
    let v9: s0 = s0(p0: v5, p1: v8)
    let v11: [[Double]] = v7.p1
    v7.p0 = v5
    let v13: [[Double]] = v0.p0
    v7.p0 = v5
    v7.p1 = v2
    v4.p0 = v13
    let v19: [[Double]] = v7.p0
    let v12: [[Double]] = v7.p1
    let v54: [s0] = [v9]
    v4.p1 = v8
    var v27: [[Double]] = v12
    let v46: [Double] = v19[0]
    let v36: [[s0]] = [v54, v54, v54, v54]
    let v72: [s0] = v36[2]
    let v29: s0 = v72[0]
    let v31: [[Double]] = v29.p1
    let v43: [[Double]] = v29.p0
    let v32: [Double] = v19[1]
    let v60: [s0] = v36[1]
    v7.p1 = v31
    v7.p0 = v43
    let v33: [[s0]] = [v60, v72]
    v4.p0 = v43
    let v101: [[Double]] = v7.p0
    var v89: [[s0]] = v33
    var v58: [[Double]] = v2
    v58 = v11
    let v44: [[Double]] = v9.p1
    v4.p0 = v13
    v7.p0 = v43
    v4.p1 = v27
    v27[2] = v32
    let v109: [[Double]] = v7.p1
    v89[0] = v60
    v7.p0 = v101
    v7.p1 = v58
    v89[0] = v72
    let v64: s1 = s1(p0: v89, p1: v4)
    let v100: s0 = v64.p1
    v4.p1 = v109
    let v150: [[s0]] = v64.p0
    let v79: [s0] = [v0, v100, v7]
    v89 = v150
    v58 = v44
    v27[1] = v46
    let v290: s0 = v79[0]
    v4.p1 = v11
    return v290
  }
  @inline(never)
  func f0(_ v0: s7, _ v1: [[s0]], _ v2: Double) -> Double {
    let v5: [s0] = v1[0]
    let v36: s0 = v5[0]
    let v43: s0 = f51(v36)
    let v32: [[Double]] = v43.p1
    let v59: [Double] = v32[1]
    let v118: Double = v59[0]
    return v118
  }
  func benchmark() {
    let v0: s7 = s7(p0: s5(p0: s3(p0: s2(p0: s1(p0: [[s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0], [4.0]])], [s0(p0: [[5.0], [6.0]], p1: [[7.0], [8.0], [9.0]])]], p1: s0(p0: [[10.0], [11.0]], p1: [[12.0], [13.0], [14.0]])), p1: [s0(p0: [[15.0], [16.0]], p1: [[17.0], [18.0], [19.0]]), s0(p0: [[20.0], [21.0]], p1: [[22.0], [23.0], [24.0]]), s0(p0: [[25.0], [26.0]], p1: [[27.0], [28.0], [29.0]])]), p1: s1(p0: [[s0(p0: [[30.0], [31.0]], p1: [[32.0], [33.0], [34.0]])], [s0(p0: [[35.0], [36.0]], p1: [[37.0], [38.0], [39.0]])]], p1: s0(p0: [[40.0], [41.0]], p1: [[42.0], [43.0], [44.0]]))), p1: [[s3(p0: s2(p0: s1(p0: [[s0(p0: [[45.0], [46.0]], p1: [[47.0], [48.0], [49.0]])], [s0(p0: [[50.0], [51.0]], p1: [[52.0], [53.0], [54.0]])]], p1: s0(p0: [[55.0], [56.0]], p1: [[57.0], [58.0], [59.0]])), p1: [s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0], [64.0]]), s0(p0: [[65.0], [66.0]], p1: [[67.0], [68.0], [69.0]]), s0(p0: [[70.0], [71.0]], p1: [[72.0], [73.0], [74.0]])]), p1: s1(p0: [[s0(p0: [[75.0], [76.0]], p1: [[77.0], [78.0], [79.0]])], [s0(p0: [[80.0], [81.0]], p1: [[82.0], [83.0], [84.0]])]], p1: s0(p0: [[85.0], [86.0]], p1: [[87.0], [88.0], [89.0]])))], [s3(p0: s2(p0: s1(p0: [[s0(p0: [[90.0], [91.0]], p1: [[92.0], [93.0], [94.0]])], [s0(p0: [[95.0], [96.0]], p1: [[97.0], [98.0], [99.0]])]], p1: s0(p0: [[100.0], [101.0]], p1: [[102.0], [103.0], [104.0]])), p1: [s0(p0: [[105.0], [106.0]], p1: [[107.0], [108.0], [109.0]]), s0(p0: [[110.0], [111.0]], p1: [[112.0], [113.0], [114.0]]), s0(p0: [[115.0], [116.0]], p1: [[117.0], [118.0], [119.0]])]), p1: s1(p0: [[s0(p0: [[120.0], [121.0]], p1: [[122.0], [123.0], [124.0]])], [s0(p0: [[125.0], [126.0]], p1: [[127.0], [128.0], [129.0]])]], p1: s0(p0: [[130.0], [131.0]], p1: [[132.0], [133.0], [134.0]])))]]), p1: [s5(p0: s3(p0: s2(p0: s1(p0: [[s0(p0: [[135.0], [136.0]], p1: [[137.0], [138.0], [139.0]])], [s0(p0: [[140.0], [141.0]], p1: [[142.0], [143.0], [144.0]])]], p1: s0(p0: [[145.0], [146.0]], p1: [[147.0], [148.0], [149.0]])), p1: [s0(p0: [[150.0], [151.0]], p1: [[152.0], [153.0], [154.0]]), s0(p0: [[155.0], [156.0]], p1: [[157.0], [158.0], [159.0]]), s0(p0: [[160.0], [161.0]], p1: [[162.0], [163.0], [164.0]])]), p1: s1(p0: [[s0(p0: [[165.0], [166.0]], p1: [[167.0], [168.0], [169.0]])], [s0(p0: [[170.0], [171.0]], p1: [[172.0], [173.0], [174.0]])]], p1: s0(p0: [[175.0], [176.0]], p1: [[177.0], [178.0], [179.0]]))), p1: [[s3(p0: s2(p0: s1(p0: [[s0(p0: [[180.0], [181.0]], p1: [[182.0], [183.0], [184.0]])], [s0(p0: [[185.0], [186.0]], p1: [[187.0], [188.0], [189.0]])]], p1: s0(p0: [[190.0], [191.0]], p1: [[192.0], [193.0], [194.0]])), p1: [s0(p0: [[195.0], [196.0]], p1: [[197.0], [198.0], [199.0]]), s0(p0: [[200.0], [201.0]], p1: [[202.0], [203.0], [204.0]]), s0(p0: [[205.0], [206.0]], p1: [[207.0], [208.0], [209.0]])]), p1: s1(p0: [[s0(p0: [[210.0], [211.0]], p1: [[212.0], [213.0], [214.0]])], [s0(p0: [[215.0], [216.0]], p1: [[217.0], [218.0], [219.0]])]], p1: s0(p0: [[220.0], [221.0]], p1: [[222.0], [223.0], [224.0]])))], [s3(p0: s2(p0: s1(p0: [[s0(p0: [[225.0], [226.0]], p1: [[227.0], [228.0], [229.0]])], [s0(p0: [[230.0], [231.0]], p1: [[232.0], [233.0], [234.0]])]], p1: s0(p0: [[235.0], [236.0]], p1: [[237.0], [238.0], [239.0]])), p1: [s0(p0: [[240.0], [241.0]], p1: [[242.0], [243.0], [244.0]]), s0(p0: [[245.0], [246.0]], p1: [[247.0], [248.0], [249.0]]), s0(p0: [[250.0], [251.0]], p1: [[252.0], [253.0], [254.0]])]), p1: s1(p0: [[s0(p0: [[255.0], [256.0]], p1: [[257.0], [258.0], [259.0]])], [s0(p0: [[260.0], [261.0]], p1: [[262.0], [263.0], [264.0]])]], p1: s0(p0: [[265.0], [266.0]], p1: [[267.0], [268.0], [269.0]])))]])])
    let v1: [[s0]] = [[s0(p0: [[270.0], [271.0]], p1: [[272.0], [273.0], [274.0]])]]
    let v2: Double = 275.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 275.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
