  let noinline_f0: ([[Float]], [[Float]], [[Float]], [[Float]], Float) -> Float = (v0: [[Float]], v1: [[Float]], v2: [[Float]], v3: [[Float]], v4: Float) -> Float {
    let v12: [Float] = v3[2] in
    var v6: Float = v4 in
    let v8: Float = v6 - v6 in
    let v15: Float = v12[0] in
    let v50: [Float] = v3[1] in
    let v14: [Float] = [v15, v4, v8] in
    let v29: Float = v50[0] in
    var v41: [Float] = v14 in
    var v54: [Float] = v41 in
    v54[2] = v29 in
    let v84: Float = v54[1] in
    v84
  } in
  fun loop(i: Int, v0: [[Float]], v1: [[Float]], v2: [[Float]], v3: [[Float]], v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0], [1.0]] in
    let v1: [[Float]] = [[2.0], [3.0]] in
    let v2: [[Float]] = [[4.0]] in
    let v3: [[Float]] = [[5.0], [6.0], [7.0]] in
    let v4: Float = 8.0 in
    let initialResult: Float = 8.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()