  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [Float]
  } in
  struct s2 {
    var p0: s1
    var p1: [[s1]]
  } in
  struct s3 {
    var p0: [[s2]]
    var p1: [s0]
  } in
  let noinline_f0: ([[s3]], s0, Float) -> Float = (v0: [[s3]], v1: s0, v2: Float) -> Float {
    let v8: [[Float]] = v1.p1 in
    let v9: [Float] = v8[0] in
    let v3: Float = v9[0] in
    let v18: [[Float]] = v1.p1 in
    let v10: Float = v9[0] in
    let v22: [Float] = v18[0] in
    let v34: Float = v22[0] in
    let v63: Float = v2 * v10 in
    let v102: Float = v63 - v3 in
    var v104: Float = v34 in
    let v145: Float = v102 / v104 in
    v145
  } in
  fun loop(i: Int, v0: [[s3]], v1: s0, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s3]] = [[s3([[s2(s1(s0([[0.0], [1.0], [2.0]], [[3.0]]), [4.0, 5.0]), [[s1(s0([[6.0], [7.0], [8.0]], [[9.0]]), [10.0, 11.0])]])], [s2(s1(s0([[12.0], [13.0], [14.0]], [[15.0]]), [16.0, 17.0]), [[s1(s0([[18.0], [19.0], [20.0]], [[21.0]]), [22.0, 23.0])]])]], [s0([[24.0], [25.0], [26.0]], [[27.0]]), s0([[28.0], [29.0], [30.0]], [[31.0]])])]] in
    let v1: s0 = s0([[32.0], [33.0], [34.0]], [[35.0]]) in
    let v2: Float = 36.0 in
    let initialResult: Float = 36.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()