  let f29: ([Float]) -> [Float] = (v0: [Float]) -> [Float] {
    var v3: [Float] = v0 in
    let v1: Float = v3[2] in
    let v7: Float = v0[0] in
    var v4: [Float] = v0 in
    var v6: [Float] = v3 in
    var v5: Float = v7 in
    let v15: Float = v4[0] in
    let v14: Float = v6[2] in
    var v9: [Float] = v3 in
    let v12: Float = v6[2] in
    v9[0] = v5 in
    var v11: [Float] = v0 in
    let v10: [Float] = [v1, v15, v14, v14, v15, v15, v1] in
    v9[1] = v12 in
    v11[1] = v14 in
    var v13: [Float] = v10 in
    v9 = v3 in
    let v23: Float = v13[1] in
    var v19: [Float] = v9 in
    let v22: Float = v9[0] in
    let v60: Float = v0[2] in
    let v62: Float = v22 + v1 in
    v19[0] = v22 in
    var v86: [Float] = v19 in
    v86 = v11 in
    v3[0] = v60 in
    v19[0] = v23 in
    v5 = v15 in
    v6[2] = v62 in
    v86
  } in
  let f22: ([Float]) -> [Float] = (v0: [Float]) -> [Float] {
    let v6: Float = v0[2] in
    var v2: [Float] = v0 in
    v2[2] = v6 in
    let v4: Float = v2[0] in
    let v5: Float = v0[1] in
    let v1: [Float] = f29(v2) in
    v2[0] = v5 in
    let v9: [Float] = f29(v2) in
    let v25: Float = v4 / v4 in
    let v19: [[Float]] = [v0, v1, v9] in
    let v24: [Float] = v19[2] in
    var v29: [Float] = v24 in
    v29[0] = v25 in
    v29
  } in
  let noinline_f0: ([[Float]], [Float], Float) -> Float = (v0: [[Float]], v1: [Float], v2: Float) -> Float {
    let v13: Float = v1[0] in
    let v11: [Float] = f22(v1) in
    var v10: [Float] = v1 in
    v10 = v11 in
    v10[2] = v13 in
    let v18: Float = v11[0] in
    v10[1] = v13 in
    let v33: Float = v10[0] in
    var v23: Float = v33 in
    var v26: [Float] = v11 in
    v26[0] = v23 in
    var v61: [Float] = v26 in
    v10[2] = v18 in
    let v32: Float = v61[2] in
    v32
  } in
  fun loop(i: Int, v0: [[Float]], v1: [Float], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0], [1.0], [2.0]] in
    let v1: [Float] = [3.0, 4.0, 5.0] in
    let v2: Float = 6.0 in
    let initialResult: Float = 6.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()