  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
    var p2: s0
  }
  struct s2 {
    var p0: s0
    var p1: [s0]
    var p2: s0
  }
  struct s3 {
    var p0: s2
    var p1: s2
  }
  struct s4 {
    var p0: [s1]
    var p1: s0
    var p2: s1
    var p3: s3
  }
  struct s6 {
    var p0: [[s1]]
    var p1: [s4]
  }
  struct s7 {
    var p0: s6
    var p1: [[s3]]
  }
  func f44(_ v0: Double) -> Double {
    var v4: Double = v0
    var v6: Double = v4
    let v2: [Double] = [v4, v6, v6, v4, v6, v4, v6]
    let v8: Double = v2[2]
    var v5: Double = v8
    var v1: [Double] = v2
    let v11: Double = v1[5]
    var v3: [Double] = v2
    v3[4] = v8
    let v15: Double = v1[0]
    v1[4] = v8
    v3 = v1
    var v7: Double = v15
    let v12: Double = v1[6]
    var v10: [Double] = v3
    var v9: [Double] = v1
    v1[2] = v4
    v10[0] = v8
    v3[2] = v12
    var v27: [Double] = v1
    v1[3] = v12
    v1[3] = v0
    var v14: Double = v5
    v3[3] = v7
    let v19: Double = v9[5]
    v1[4] = v11
    let v25: Double = v1[5]
    var v30: Double = v7
    var v45: [Double] = v27
    v5 = v25
    var v23: Double = v0
    v3[4] = v8
    var v35: Double = v19
    var v36: [Double] = v3
    let v32: Double = v10[1]
    let v33: Double = v27[5]
    v9[2] = v35
    let v41: Double = v3[5]
    let v46: Double = v2[3]
    let v20: Double = v45[3]
    let v57: Double = v36[1]
    let v58: Double = v36[4]
    v45[2] = v25
    var v49: [Double] = v45
    var v42: [Double] = v49
    var v39: Double = v6
    v10[3] = v33
    v36[3] = v30
    v9[2] = v32
    let v67: Double = v45[6]
    var v51: Double = v14
    var v66: Double = v41
    v1[1] = v57
    v5 = v23
    v10[4] = v41
    v3[1] = v39
    var v60: [Double] = v9
    var v37: [Double] = v45
    v36[0] = v11
    var v38: [Double] = v1
    let v141: [[Double]] = [v36, v49, v60, v37, v38, v42]
    v42[3] = v33
    var v127: [[Double]] = v141
    let v47: [Double] = v127[0]
    let v81: [Double] = [v51]
    v45[3] = v66
    v38[0] = v7
    var v106: [Double] = v81
    let v78: Double = v47[5]
    var v92: [Double] = v106
    let v120: Double = v92[0]
    v10[0] = v30
    v3[5] = v20
    v38[2] = v58
    v38[0] = v46
    v9[6] = v67
    v38[5] = v120
    return v78
  }
  @inline(never)
  func f0(_ v0: s7, _ v1: Double) -> Double {
    let v4: Double = f44(v1)
    let v24: Double = v4 / v4
    let v13: Double = f44(v4)
    let v15: Double = v13 * v24
    let v53: Double = v15 - v4
    return v53
  }
  func benchmark() {
    let v0: s7 = s7(p0: s6(p0: [[s1(p0: s0(p0: [[0.0]], p1: [[1.0], [2.0]], p2: [[3.0], [4.0], [5.0]], p3: [[6.0]]), p1: s0(p0: [[7.0]], p1: [[8.0], [9.0]], p2: [[10.0], [11.0], [12.0]], p3: [[13.0]]), p2: s0(p0: [[14.0]], p1: [[15.0], [16.0]], p2: [[17.0], [18.0], [19.0]], p3: [[20.0]]))], [s1(p0: s0(p0: [[21.0]], p1: [[22.0], [23.0]], p2: [[24.0], [25.0], [26.0]], p3: [[27.0]]), p1: s0(p0: [[28.0]], p1: [[29.0], [30.0]], p2: [[31.0], [32.0], [33.0]], p3: [[34.0]]), p2: s0(p0: [[35.0]], p1: [[36.0], [37.0]], p2: [[38.0], [39.0], [40.0]], p3: [[41.0]]))]], p1: [s4(p0: [s1(p0: s0(p0: [[42.0]], p1: [[43.0], [44.0]], p2: [[45.0], [46.0], [47.0]], p3: [[48.0]]), p1: s0(p0: [[49.0]], p1: [[50.0], [51.0]], p2: [[52.0], [53.0], [54.0]], p3: [[55.0]]), p2: s0(p0: [[56.0]], p1: [[57.0], [58.0]], p2: [[59.0], [60.0], [61.0]], p3: [[62.0]]))], p1: s0(p0: [[63.0]], p1: [[64.0], [65.0]], p2: [[66.0], [67.0], [68.0]], p3: [[69.0]]), p2: s1(p0: s0(p0: [[70.0]], p1: [[71.0], [72.0]], p2: [[73.0], [74.0], [75.0]], p3: [[76.0]]), p1: s0(p0: [[77.0]], p1: [[78.0], [79.0]], p2: [[80.0], [81.0], [82.0]], p3: [[83.0]]), p2: s0(p0: [[84.0]], p1: [[85.0], [86.0]], p2: [[87.0], [88.0], [89.0]], p3: [[90.0]])), p3: s3(p0: s2(p0: s0(p0: [[91.0]], p1: [[92.0], [93.0]], p2: [[94.0], [95.0], [96.0]], p3: [[97.0]]), p1: [s0(p0: [[98.0]], p1: [[99.0], [100.0]], p2: [[101.0], [102.0], [103.0]], p3: [[104.0]]), s0(p0: [[105.0]], p1: [[106.0], [107.0]], p2: [[108.0], [109.0], [110.0]], p3: [[111.0]]), s0(p0: [[112.0]], p1: [[113.0], [114.0]], p2: [[115.0], [116.0], [117.0]], p3: [[118.0]])], p2: s0(p0: [[119.0]], p1: [[120.0], [121.0]], p2: [[122.0], [123.0], [124.0]], p3: [[125.0]])), p1: s2(p0: s0(p0: [[126.0]], p1: [[127.0], [128.0]], p2: [[129.0], [130.0], [131.0]], p3: [[132.0]]), p1: [s0(p0: [[133.0]], p1: [[134.0], [135.0]], p2: [[136.0], [137.0], [138.0]], p3: [[139.0]]), s0(p0: [[140.0]], p1: [[141.0], [142.0]], p2: [[143.0], [144.0], [145.0]], p3: [[146.0]]), s0(p0: [[147.0]], p1: [[148.0], [149.0]], p2: [[150.0], [151.0], [152.0]], p3: [[153.0]])], p2: s0(p0: [[154.0]], p1: [[155.0], [156.0]], p2: [[157.0], [158.0], [159.0]], p3: [[160.0]]))))]), p1: [[s3(p0: s2(p0: s0(p0: [[161.0]], p1: [[162.0], [163.0]], p2: [[164.0], [165.0], [166.0]], p3: [[167.0]]), p1: [s0(p0: [[168.0]], p1: [[169.0], [170.0]], p2: [[171.0], [172.0], [173.0]], p3: [[174.0]]), s0(p0: [[175.0]], p1: [[176.0], [177.0]], p2: [[178.0], [179.0], [180.0]], p3: [[181.0]]), s0(p0: [[182.0]], p1: [[183.0], [184.0]], p2: [[185.0], [186.0], [187.0]], p3: [[188.0]])], p2: s0(p0: [[189.0]], p1: [[190.0], [191.0]], p2: [[192.0], [193.0], [194.0]], p3: [[195.0]])), p1: s2(p0: s0(p0: [[196.0]], p1: [[197.0], [198.0]], p2: [[199.0], [200.0], [201.0]], p3: [[202.0]]), p1: [s0(p0: [[203.0]], p1: [[204.0], [205.0]], p2: [[206.0], [207.0], [208.0]], p3: [[209.0]]), s0(p0: [[210.0]], p1: [[211.0], [212.0]], p2: [[213.0], [214.0], [215.0]], p3: [[216.0]]), s0(p0: [[217.0]], p1: [[218.0], [219.0]], p2: [[220.0], [221.0], [222.0]], p3: [[223.0]])], p2: s0(p0: [[224.0]], p1: [[225.0], [226.0]], p2: [[227.0], [228.0], [229.0]], p3: [[230.0]])))], [s3(p0: s2(p0: s0(p0: [[231.0]], p1: [[232.0], [233.0]], p2: [[234.0], [235.0], [236.0]], p3: [[237.0]]), p1: [s0(p0: [[238.0]], p1: [[239.0], [240.0]], p2: [[241.0], [242.0], [243.0]], p3: [[244.0]]), s0(p0: [[245.0]], p1: [[246.0], [247.0]], p2: [[248.0], [249.0], [250.0]], p3: [[251.0]]), s0(p0: [[252.0]], p1: [[253.0], [254.0]], p2: [[255.0], [256.0], [257.0]], p3: [[258.0]])], p2: s0(p0: [[259.0]], p1: [[260.0], [261.0]], p2: [[262.0], [263.0], [264.0]], p3: [[265.0]])), p1: s2(p0: s0(p0: [[266.0]], p1: [[267.0], [268.0]], p2: [[269.0], [270.0], [271.0]], p3: [[272.0]]), p1: [s0(p0: [[273.0]], p1: [[274.0], [275.0]], p2: [[276.0], [277.0], [278.0]], p3: [[279.0]]), s0(p0: [[280.0]], p1: [[281.0], [282.0]], p2: [[283.0], [284.0], [285.0]], p3: [[286.0]]), s0(p0: [[287.0]], p1: [[288.0], [289.0]], p2: [[290.0], [291.0], [292.0]], p3: [[293.0]])], p2: s0(p0: [[294.0]], p1: [[295.0], [296.0]], p2: [[297.0], [298.0], [299.0]], p3: [[300.0]])))], [s3(p0: s2(p0: s0(p0: [[301.0]], p1: [[302.0], [303.0]], p2: [[304.0], [305.0], [306.0]], p3: [[307.0]]), p1: [s0(p0: [[308.0]], p1: [[309.0], [310.0]], p2: [[311.0], [312.0], [313.0]], p3: [[314.0]]), s0(p0: [[315.0]], p1: [[316.0], [317.0]], p2: [[318.0], [319.0], [320.0]], p3: [[321.0]]), s0(p0: [[322.0]], p1: [[323.0], [324.0]], p2: [[325.0], [326.0], [327.0]], p3: [[328.0]])], p2: s0(p0: [[329.0]], p1: [[330.0], [331.0]], p2: [[332.0], [333.0], [334.0]], p3: [[335.0]])), p1: s2(p0: s0(p0: [[336.0]], p1: [[337.0], [338.0]], p2: [[339.0], [340.0], [341.0]], p3: [[342.0]]), p1: [s0(p0: [[343.0]], p1: [[344.0], [345.0]], p2: [[346.0], [347.0], [348.0]], p3: [[349.0]]), s0(p0: [[350.0]], p1: [[351.0], [352.0]], p2: [[353.0], [354.0], [355.0]], p3: [[356.0]]), s0(p0: [[357.0]], p1: [[358.0], [359.0]], p2: [[360.0], [361.0], [362.0]], p3: [[363.0]])], p2: s0(p0: [[364.0]], p1: [[365.0], [366.0]], p2: [[367.0], [368.0], [369.0]], p3: [[370.0]])))]])
    let v1: Double = 371.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 371.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
