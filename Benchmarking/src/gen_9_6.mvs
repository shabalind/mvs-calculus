  struct s0 {
    var p0: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: s1
    var p1: s1
  } in
  struct s3 {
    var p0: [[s0]]
    var p1: s0
  } in
  struct s6 {
    var p0: s2
    var p1: s1
  } in
  struct s10 {
    var p0: s6
    var p1: [[s2]]
  } in
  let f65: (s10) -> s10 = (v0: s10) -> s10 {
    var v7: s10 = v0 in
    var v39: s10 = v7 in
    v39
  } in
  let f36: (s10) -> s10 = (v0: s10) -> s10 {
    let v5: [s10] = [v0, v0, v0, v0, v0] in
    var v6: [s10] = v5 in
    let v9: s10 = v5[4] in
    let v3: s10 = v5[0] in
    let v10: s10 = f65(v3) in
    v6[2] = v10 in
    let v23: s10 = v5[2] in
    let v24: s10 = v6[4] in
    v6[3] = v23 in
    v6[2] = v3 in
    v6[2] = v24 in
    v6[0] = v0 in
    v6[0] = v9 in
    let v61: s10 = v6[3] in
    v6[3] = v61 in
    v6[4] = v0 in
    v6[1] = v61 in
    let v161: s10 = f65(v61) in
    v161
  } in
  let f25: (s10, Float) -> Float = (v0: s10, v1: Float) -> Float {
    let v4: s10 = f36(v0) in
    let v6: s6 = v4.p0 in
    let v10: s2 = v6.p0 in
    let v9: s1 = v10.p0 in
    var v43: s1 = v9 in
    let v107: [s0] = v43.p1 in
    var v23: s1 = v43 in
    let v47: s0 = v23.p0 in
    v43.p1 = v107 in
    let v41: [[Float]] = v47.p0 in
    let v68: [Float] = v41[1] in
    let v64: Float = v68[0] in
    var v166: Float = v64 in
    var v161: Float = v166 in
    v161
  } in
  let noinline_f0: (s3, [[s10]], s2, Float) -> Float = (v0: s3, v1: [[s10]], v2: s2, v3: Float) -> Float {
    let v4: s0 = v0.p1 in
    var v5: Float = v3 in
    let v6: [s10] = v1[0] in
    let v7: s10 = v6[0] in
    var v8: Float = v5 in
    let v15: [[Float]] = v4.p0 in
    let v25: s10 = f65(v7) in
    let v56: [Float] = v15[1] in
    var v34: [Float] = v56 in
    v34[0] = v3 in
    v34[0] = v3 in
    var v31: [Float] = v34 in
    let v64: Float = v31[0] in
    let v67: Float = v5 + v8 in
    v34[0] = v67 in
    let v83: Float = f25(v25, v64) in
    v83
  } in
  fun loop(i: Int, v0: s3, v1: [[s10]], v2: s2, v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3([[s0([[0.0], [1.0], [2.0]])], [s0([[3.0], [4.0], [5.0]])]], s0([[6.0], [7.0], [8.0]])) in
    let v1: [[s10]] = [[s10(s6(s2(s1(s0([[9.0], [10.0], [11.0]]), [s0([[12.0], [13.0], [14.0]])]), s1(s0([[15.0], [16.0], [17.0]]), [s0([[18.0], [19.0], [20.0]])])), s1(s0([[21.0], [22.0], [23.0]]), [s0([[24.0], [25.0], [26.0]])])), [[s2(s1(s0([[27.0], [28.0], [29.0]]), [s0([[30.0], [31.0], [32.0]])]), s1(s0([[33.0], [34.0], [35.0]]), [s0([[36.0], [37.0], [38.0]])]))]])], [s10(s6(s2(s1(s0([[39.0], [40.0], [41.0]]), [s0([[42.0], [43.0], [44.0]])]), s1(s0([[45.0], [46.0], [47.0]]), [s0([[48.0], [49.0], [50.0]])])), s1(s0([[51.0], [52.0], [53.0]]), [s0([[54.0], [55.0], [56.0]])])), [[s2(s1(s0([[57.0], [58.0], [59.0]]), [s0([[60.0], [61.0], [62.0]])]), s1(s0([[63.0], [64.0], [65.0]]), [s0([[66.0], [67.0], [68.0]])]))]])]] in
    let v2: s2 = s2(s1(s0([[69.0], [70.0], [71.0]]), [s0([[72.0], [73.0], [74.0]])]), s1(s0([[75.0], [76.0], [77.0]]), [s0([[78.0], [79.0], [80.0]])])) in
    let v3: Float = 81.0 in
    let initialResult: Float = 81.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()