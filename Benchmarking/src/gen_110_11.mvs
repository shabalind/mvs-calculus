  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
    var p2: s0
    var p3: [s0]
    var p4: [[s0]]
    var p5: s0
  } in
  struct s2 {
    var p0: [[s1]]
    var p1: [s0]
  } in
  struct s6 {
    var p0: s1
    var p1: s0
  } in
  let f31: (Float) -> Float = (v0: Float) -> Float {
    var v2: Float = v0 in
    var v7: Float = v2 in
    var v1: Float = v2 in
    var v3: Float = v7 in
    var v6: Float = v2 in
    var v13: Float = v7 in
    var v5: Float = v0 in
    var v11: Float = v3 in
    var v10: Float = v0 in
    var v8: Float = v10 in
    var v31: Float = v1 in
    var v19: Float = v13 in
    let v18: [Float] = [v1, v11, v1, v10, v8, v0, v19] in
    let v17: Float = v18[5] in
    var v21: [Float] = v18 in
    v21[2] = v11 in
    let v27: Float = v18[0] in
    let v33: Float = v5 - v27 in
    let v44: Float = v21[5] in
    let v43: Float = v18[4] in
    let v41: Float = v19 + v13 in
    v21[6] = v17 in
    var v93: Float = v6 in
    v21[6] = v93 in
    let v28: [Float] = [v44, v8, v0, v41, v43] in
    v21[0] = v11 in
    var v22: [Float] = v28 in
    v22[4] = v33 in
    v22[0] = v7 in
    let v116: Float = v22[1] in
    v21[3] = v31 in
    v116
  } in
  let noinline_f0: ([s6], s2, Float) -> Float = (v0: [s6], v1: s2, v2: Float) -> Float {
    let v3: Float = f31(v2) in
    var v6: Float = v2 in
    var v7: Float = v2 in
    v6 = v2 in
    v7 = v3 in
    v6 = v7 in
    v6
  } in
  fun loop(i: Int, v0: [s6], v1: s2, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s6] = [s6(s1([s0([[0.0], [1.0]], [[2.0]])], s0([[3.0], [4.0]], [[5.0]]), s0([[6.0], [7.0]], [[8.0]]), [s0([[9.0], [10.0]], [[11.0]])], [[s0([[12.0], [13.0]], [[14.0]])]], s0([[15.0], [16.0]], [[17.0]])), s0([[18.0], [19.0]], [[20.0]])), s6(s1([s0([[21.0], [22.0]], [[23.0]])], s0([[24.0], [25.0]], [[26.0]]), s0([[27.0], [28.0]], [[29.0]]), [s0([[30.0], [31.0]], [[32.0]])], [[s0([[33.0], [34.0]], [[35.0]])]], s0([[36.0], [37.0]], [[38.0]])), s0([[39.0], [40.0]], [[41.0]])), s6(s1([s0([[42.0], [43.0]], [[44.0]])], s0([[45.0], [46.0]], [[47.0]]), s0([[48.0], [49.0]], [[50.0]]), [s0([[51.0], [52.0]], [[53.0]])], [[s0([[54.0], [55.0]], [[56.0]])]], s0([[57.0], [58.0]], [[59.0]])), s0([[60.0], [61.0]], [[62.0]]))] in
    let v1: s2 = s2([[s1([s0([[63.0], [64.0]], [[65.0]])], s0([[66.0], [67.0]], [[68.0]]), s0([[69.0], [70.0]], [[71.0]]), [s0([[72.0], [73.0]], [[74.0]])], [[s0([[75.0], [76.0]], [[77.0]])]], s0([[78.0], [79.0]], [[80.0]]))], [s1([s0([[81.0], [82.0]], [[83.0]])], s0([[84.0], [85.0]], [[86.0]]), s0([[87.0], [88.0]], [[89.0]]), [s0([[90.0], [91.0]], [[92.0]])], [[s0([[93.0], [94.0]], [[95.0]])]], s0([[96.0], [97.0]], [[98.0]]))], [s1([s0([[99.0], [100.0]], [[101.0]])], s0([[102.0], [103.0]], [[104.0]]), s0([[105.0], [106.0]], [[107.0]]), [s0([[108.0], [109.0]], [[110.0]])], [[s0([[111.0], [112.0]], [[113.0]])]], s0([[114.0], [115.0]], [[116.0]]))]], [s0([[117.0], [118.0]], [[119.0]]), s0([[120.0], [121.0]], [[122.0]]), s0([[123.0], [124.0]], [[125.0]])]) in
    let v2: Float = 126.0 in
    let initialResult: Float = 126.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()