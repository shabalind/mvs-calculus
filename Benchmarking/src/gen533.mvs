  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  let f85: (s0, [Float]) -> s0 = (v0: s0, v1: [Float]) -> s0 {
    let v17: s1 = s1(v0, v0) in
    var v33: s0 = v0 in
    var v32: s1 = v17 in
    v32.p1 = v33 in
    let v18: s0 = v32.p0 in
    v18
  } in
  let f83: (s1, s0) -> s1 = (v0: s1, v1: s0) -> s1 {
    let v3: [s1] = [v0, v0, v0, v0, v0, v0] in
    let v7: s1 = v3[0] in
    let v4: s0 = v7.p1 in
    let v5: s1 = v3[4] in
    let v8: s0 = v5.p1 in
    let v10: [[Float]] = v4.p0 in
    var v2: [s1] = v3 in
    var v15: [s1] = v2 in
    let v9: [Float] = v10[1] in
    v2 = v15 in
    let v12: s0 = f85(v1, v9) in
    v2[3] = v5 in
    let v24: s1 = v15[0] in
    let v22: s0 = f85(v12, v9) in
    let v23: s1 = v15[0] in
    v2[4] = v24 in
    let v45: [[Float]] = v1.p1 in
    var v33: s1 = v23 in
    v33.p0 = v1 in
    v2[0] = v24 in
    v15[1] = v5 in
    v33.p0 = v12 in
    let v29: [[Float]] = v1.p0 in
    let v48: [Float] = v29[1] in
    let v50: s1 = v3[2] in
    let v70: s0 = f85(v22, v48) in
    let v63: [Float] = v45[0] in
    var v43: s0 = v8 in
    let v44: s0 = f85(v70, v63) in
    let v140: [[Float]] = v44.p0 in
    var v80: s1 = v24 in
    v2 = v3 in
    v80.p0 = v70 in
    v15[2] = v23 in
    v15[5] = v50 in
    let v111: [[Float]] = v44.p1 in
    v15[4] = v33 in
    v43.p1 = v111 in
    v80.p1 = v43 in
    v43.p0 = v140 in
    v80
  } in
  let f82: (s1) -> s1 = (v0: s1) -> s1 {
    let v2: [s1] = [v0, v0, v0, v0, v0] in
    let v8: s0 = v0.p1 in
    let v6: s1 = f83(v0, v8) in
    var v5: s0 = v8 in
    let v7: [[Float]] = v8.p1 in
    var v4: [s1] = v2 in
    v4[3] = v6 in
    v4[2] = v0 in
    let v3: [[Float]] = v8.p0 in
    let v10: s1 = f83(v0, v5) in
    var v1: s1 = v6 in
    v5.p1 = v7 in
    let v13: s1 = v4[3] in
    let v12: [Float] = v7[0] in
    v4[3] = v10 in
    var v15: [[Float]] = v3 in
    v15[0] = v12 in
    v15[0] = v12 in
    let v27: s0 = f85(v5, v12) in
    let v37: [Float] = v15[0] in
    let v35: s0 = f85(v8, v12) in
    v5.p0 = v15 in
    let v29: s0 = f85(v5, v37) in
    v1.p1 = v27 in
    let v23: [Float] = v7[0] in
    v1.p1 = v8 in
    let v47: [[Float]] = v35.p0 in
    v4[4] = v1 in
    v5.p0 = v47 in
    v1.p1 = v5 in
    let v57: s0 = v13.p1 in
    let v48: s1 = s1(v29, v57) in
    v5.p1 = v15 in
    v1.p1 = v57 in
    v15[1] = v23 in
    v5.p0 = v15 in
    v1.p1 = v5 in
    v48
  } in
  let f79: (s0, s0) -> s0 = (v0: s0, v1: s0) -> s0 {
    var v7: s0 = v1 in
    let v3: s1 = s1(v1, v0) in
    let v5: s1 = f82(v3) in
    var v11: s1 = v5 in
    var v6: s1 = v11 in
    let v9: s1 = f83(v11, v1) in
    let v4: s1 = f82(v6) in
    let v13: s0 = v4.p0 in
    let v14: s0 = v9.p1 in
    let v19: s0 = v3.p0 in
    v6.p0 = v7 in
    let v30: [[Float]] = v14.p0 in
    let v26: [Float] = v30[0] in
    var v20: [Float] = v26 in
    var v25: s1 = v5 in
    let v24: s0 = f85(v1, v20) in
    let v33: s1 = f83(v9, v24) in
    let v34: [s1] = [v9, v4, v5, v25, v33] in
    let v63: [[Float]] = v13.p0 in
    v7.p1 = v63 in
    let v27: s1 = v34[4] in
    let v46: s0 = v4.p0 in
    let v49: s0 = v33.p0 in
    v6.p1 = v19 in
    let v125: s0 = v5.p1 in
    let v55: [[Float]] = v46.p0 in
    let v65: s0 = v27.p0 in
    v6.p1 = v125 in
    v7.p0 = v55 in
    v25.p0 = v49 in
    v65
  } in
  let f72: (s0) -> s0 = (v0: s0) -> s0 {
    var v4: s0 = v0 in
    var v5: s0 = v4 in
    let v6: [[Float]] = v5.p1 in
    let v7: [[Float]] = v0.p0 in
    v4.p1 = v7 in
    let v13: [s0] = [v5, v0, v5, v5, v5, v5] in
    v4.p1 = v6 in
    let v17: s0 = v13[3] in
    let v35: [[Float]] = v17.p0 in
    let v45: s0 = f79(v5, v17) in
    v5.p1 = v35 in
    v45
  } in
  let noinline_f0: ([[s1]], s0, Float) -> Float = (v0: [[s1]], v1: s0, v2: Float) -> Float {
    let v4: s0 = f72(v1) in
    let v6: [[Float]] = v4.p0 in
    let v3: [Float] = v6[1] in
    let v15: [Float] = v6[0] in
    let v24: Float = v3[0] in
    let v87: Float = v15[0] in
    let v65: Float = v87 + v24 in
    v65
  } in
  fun loop(i: Int, v0: [[s1]], v1: s0, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s1]] = [[s1(s0([[0.0], [1.0]], [[2.0], [3.0]]), s0([[4.0], [5.0]], [[6.0], [7.0]]))], [s1(s0([[8.0], [9.0]], [[10.0], [11.0]]), s0([[12.0], [13.0]], [[14.0], [15.0]]))]] in
    let v1: s0 = s0([[16.0], [17.0]], [[18.0], [19.0]]) in
    let v2: Float = 20.0 in
    let initialResult: Float = 20.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()