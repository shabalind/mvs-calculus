  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s3 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s7 {
    var p0: s3
    var p1: [s3]
  } in
  struct s8 {
    var p0: s3
    var p1: [[s0]]
  } in
  let f57: ([[s0]]) -> [[s0]] = (v0: [[s0]]) -> [[s0]] {
    let v3: [s0] = v0[0] in
    var v2: [[s0]] = v0 in
    var v7: [[s0]] = v2 in
    var v20: [[s0]] = v2 in
    let v47: [[[s0]]] = [v20, v7, v2] in
    var v60: [s0] = v3 in
    v2[0] = v60 in
    let v97: [[s0]] = v47[0] in
    var v153: [[s0]] = v97 in
    v2[0] = v3 in
    v153
  } in
  let f25: ([[s7]]) -> [[s7]] = (v0: [[s7]]) -> [[s7]] {
    var v6: [[s7]] = v0 in
    let v8: [[[s7]]] = [v0, v6, v0, v0] in
    v6 = v0 in
    let v10: [s7] = v6[0] in
    v6[0] = v10 in
    var v13: [s7] = v10 in
    let v3: [s7] = v0[1] in
    var v11: [[s7]] = v6 in
    v11[0] = v3 in
    v11[1] = v13 in
    let v62: [[s7]] = v8[1] in
    v11 = v62 in
    v11
  } in
  let f8: (s3) -> s3 = (v0: s3) -> s3 {
    var v8: s3 = v0 in
    var v13: s3 = v8 in
    let v30: [s3] = [v0, v13, v8, v8, v8, v8, v8] in
    let v16: [s0] = v13.p0 in
    v8.p0 = v16 in
    let v88: s3 = v30[3] in
    v13 = v0 in
    v8.p0 = v16 in
    v88
  } in
  let noinline_f0: (s8, [[s7]], Float) -> Float = (v0: s8, v1: [[s7]], v2: Float) -> Float {
    let v7: [s7] = v1[0] in
    let v6: s3 = v0.p0 in
    let v4: [[s7]] = f25(v1) in
    var v5: s3 = v6 in
    var v22: s8 = v0 in
    var v8: s8 = v0 in
    let v10: [s0] = v5.p0 in
    v22.p0 = v6 in
    v8 = v22 in
    let v12: s3 = v8.p0 in
    let v18: s0 = v10[0] in
    v5.p0 = v10 in
    var v15: s0 = v18 in
    let v21: [s7] = v4[0] in
    var v31: [s7] = v7 in
    v8.p0 = v5 in
    v22.p0 = v6 in
    let v26: [[s0]] = v8.p1 in
    let v55: [[Float]] = v15.p0 in
    let v36: [[s0]] = f57(v26) in
    let v116: s3 = f8(v12) in
    let v45: s7 = v31[0] in
    let v85: [s0] = v36[0] in
    v31[0] = v45 in
    let v54: s3 = v45.p0 in
    let v51: [s0] = v116.p0 in
    v5.p0 = v85 in
    let v66: [[s0]] = f57(v26) in
    let v86: s7 = v21[0] in
    let v100: [Float] = v55[2] in
    v5.p0 = v51 in
    v31[0] = v86 in
    v22.p1 = v66 in
    v8.p0 = v54 in
    let v186: Float = v100[0] in
    v186
  } in
  fun loop(i: Int, v0: s8, v1: [[s7]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s8 = s8(s3([s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]])], [s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]]), s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]]), s0([[15.0], [16.0], [17.0]], [[18.0], [19.0]])]), [[s0([[20.0], [21.0], [22.0]], [[23.0], [24.0]])]]) in
    let v1: [[s7]] = [[s7(s3([s0([[25.0], [26.0], [27.0]], [[28.0], [29.0]])], [s0([[30.0], [31.0], [32.0]], [[33.0], [34.0]]), s0([[35.0], [36.0], [37.0]], [[38.0], [39.0]]), s0([[40.0], [41.0], [42.0]], [[43.0], [44.0]])]), [s3([s0([[45.0], [46.0], [47.0]], [[48.0], [49.0]])], [s0([[50.0], [51.0], [52.0]], [[53.0], [54.0]]), s0([[55.0], [56.0], [57.0]], [[58.0], [59.0]]), s0([[60.0], [61.0], [62.0]], [[63.0], [64.0]])]), s3([s0([[65.0], [66.0], [67.0]], [[68.0], [69.0]])], [s0([[70.0], [71.0], [72.0]], [[73.0], [74.0]]), s0([[75.0], [76.0], [77.0]], [[78.0], [79.0]]), s0([[80.0], [81.0], [82.0]], [[83.0], [84.0]])]), s3([s0([[85.0], [86.0], [87.0]], [[88.0], [89.0]])], [s0([[90.0], [91.0], [92.0]], [[93.0], [94.0]]), s0([[95.0], [96.0], [97.0]], [[98.0], [99.0]]), s0([[100.0], [101.0], [102.0]], [[103.0], [104.0]])])])], [s7(s3([s0([[105.0], [106.0], [107.0]], [[108.0], [109.0]])], [s0([[110.0], [111.0], [112.0]], [[113.0], [114.0]]), s0([[115.0], [116.0], [117.0]], [[118.0], [119.0]]), s0([[120.0], [121.0], [122.0]], [[123.0], [124.0]])]), [s3([s0([[125.0], [126.0], [127.0]], [[128.0], [129.0]])], [s0([[130.0], [131.0], [132.0]], [[133.0], [134.0]]), s0([[135.0], [136.0], [137.0]], [[138.0], [139.0]]), s0([[140.0], [141.0], [142.0]], [[143.0], [144.0]])]), s3([s0([[145.0], [146.0], [147.0]], [[148.0], [149.0]])], [s0([[150.0], [151.0], [152.0]], [[153.0], [154.0]]), s0([[155.0], [156.0], [157.0]], [[158.0], [159.0]]), s0([[160.0], [161.0], [162.0]], [[163.0], [164.0]])]), s3([s0([[165.0], [166.0], [167.0]], [[168.0], [169.0]])], [s0([[170.0], [171.0], [172.0]], [[173.0], [174.0]]), s0([[175.0], [176.0], [177.0]], [[178.0], [179.0]]), s0([[180.0], [181.0], [182.0]], [[183.0], [184.0]])])])]] in
    let v2: Float = 185.0 in
    let initialResult: Float = 185.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()