  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
    var p3: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  } in
  struct s3 {
    var p0: [s1]
    var p1: [[s0]]
  } in
  let noinline_f0: (s3, s3, Float) -> Float = (v0: s3, v1: s3, v2: Float) -> Float {
    let v7: [s1] = v0.p0 in
    let v4: s1 = v7[1] in
    let v6: s0 = v4.p1 in
    let v5: s0 = v4.p1 in
    let v8: [[Float]] = v5.p0 in
    let v9: [[Float]] = v6.p1 in
    let v11: [[[Float]]] = [v9, v9, v9, v8, v8] in
    let v41: [[Float]] = v11[4] in
    let v29: [Float] = v41[0] in
    let v56: Float = v29[0] in
    var v87: Float = v56 in
    let v116: Float = v87 - v2 in
    let v74: Float = v2 - v116 in
    let v83: Float = v74 - v116 in
    v83
  } in
  fun loop(i: Int, v0: s3, v1: s3, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3([s1([[s0([[0.0], [1.0]], [[2.0], [3.0]], [[4.0], [5.0], [6.0]], [[7.0], [8.0]])], [s0([[9.0], [10.0]], [[11.0], [12.0]], [[13.0], [14.0], [15.0]], [[16.0], [17.0]])], [s0([[18.0], [19.0]], [[20.0], [21.0]], [[22.0], [23.0], [24.0]], [[25.0], [26.0]])]], s0([[27.0], [28.0]], [[29.0], [30.0]], [[31.0], [32.0], [33.0]], [[34.0], [35.0]])), s1([[s0([[36.0], [37.0]], [[38.0], [39.0]], [[40.0], [41.0], [42.0]], [[43.0], [44.0]])], [s0([[45.0], [46.0]], [[47.0], [48.0]], [[49.0], [50.0], [51.0]], [[52.0], [53.0]])], [s0([[54.0], [55.0]], [[56.0], [57.0]], [[58.0], [59.0], [60.0]], [[61.0], [62.0]])]], s0([[63.0], [64.0]], [[65.0], [66.0]], [[67.0], [68.0], [69.0]], [[70.0], [71.0]]))], [[s0([[72.0], [73.0]], [[74.0], [75.0]], [[76.0], [77.0], [78.0]], [[79.0], [80.0]])]]) in
    let v1: s3 = s3([s1([[s0([[81.0], [82.0]], [[83.0], [84.0]], [[85.0], [86.0], [87.0]], [[88.0], [89.0]])], [s0([[90.0], [91.0]], [[92.0], [93.0]], [[94.0], [95.0], [96.0]], [[97.0], [98.0]])], [s0([[99.0], [100.0]], [[101.0], [102.0]], [[103.0], [104.0], [105.0]], [[106.0], [107.0]])]], s0([[108.0], [109.0]], [[110.0], [111.0]], [[112.0], [113.0], [114.0]], [[115.0], [116.0]])), s1([[s0([[117.0], [118.0]], [[119.0], [120.0]], [[121.0], [122.0], [123.0]], [[124.0], [125.0]])], [s0([[126.0], [127.0]], [[128.0], [129.0]], [[130.0], [131.0], [132.0]], [[133.0], [134.0]])], [s0([[135.0], [136.0]], [[137.0], [138.0]], [[139.0], [140.0], [141.0]], [[142.0], [143.0]])]], s0([[144.0], [145.0]], [[146.0], [147.0]], [[148.0], [149.0], [150.0]], [[151.0], [152.0]]))], [[s0([[153.0], [154.0]], [[155.0], [156.0]], [[157.0], [158.0], [159.0]], [[160.0], [161.0]])]]) in
    let v2: Float = 162.0 in
    let initialResult: Float = 162.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()