  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s2 {
    var p0: s0
    var p1: s0
    var p2: s1
  }
  struct s3 {
    var p0: [[s1]]
    var p1: [s2]
  }
  struct s5 {
    var p0: s1
    var p1: [[s3]]
  }
  func f89(_ v0: s1) -> s1 {
    let v6: [s0] = v0.p1
    let v2: s0 = v6[2]
    let v4: [[Double]] = v2.p0
    var v7: s1 = v0
    var v5: [[Double]] = v4
    v5 = v4
    var v3: s0 = v2
    var v9: s0 = v3
    let v8: [[Double]] = v9.p0
    var v15: [s0] = v6
    v7 = v0
    let v28: [s0] = v7.p1
    let v12: s0 = v15[2]
    var v18: s1 = v0
    let v13: [Double] = v5[1]
    v5[0] = v13
    var v10: [Double] = v13
    var v21: s1 = v0
    v18.p1 = v6
    v9.p0 = v5
    var v27: [[Double]] = v5
    v5[0] = v10
    v27[1] = v13
    let v23: [s0] = v21.p0
    v5[1] = v13
    let v22: [[Double]] = v2.p0
    let v26: [[Double]] = v12.p0
    v3.p0 = v4
    v15 = v28
    v3.p0 = v8
    let v33: [Double] = v26[2]
    var v56: [s0] = v23
    let v25: [s0] = v18.p0
    v27[2] = v33
    let v52: [[[Double]]] = [v26, v26, v4, v4, v27, v22, v27]
    let v49: [s0] = v21.p1
    let v39: [[Double]] = v52[4]
    let v65: s0 = v25[0]
    v21.p0 = v56
    v56[0] = v9
    let v50: s1 = s1(p0: v56, p1: v15)
    var v44: [[Double]] = v39
    v18.p1 = v15
    let v75: [[Double]] = v3.p1
    v56[0] = v65
    v18 = v50
    v7.p1 = v49
    let v55: [Double] = v75[0]
    var v163: [s0] = v23
    v27[2] = v55
    v21.p0 = v23
    v21.p0 = v163
    var v121: s1 = v50
    v3.p0 = v44
    return v121
  }
  @inline(never)
  func f0(_ v0: s5, _ v1: s2, _ v2: Double) -> Double {
    let v6: s1 = v0.p0
    let v13: s1 = f89(v6)
    var v23: s2 = v1
    let v10: s0 = v23.p0
    let v18: [[Double]] = v10.p1
    let v25: [Double] = v18[0]
    let v36: Double = v25[0]
    let v24: Double = v25[0]
    let v22: [s1] = [v6]
    v23.p1 = v10
    let v83: s1 = v22[0]
    v23.p2 = v83
    v23.p2 = v83
    v23.p2 = v13
    let v283: Double = v36 + v24
    return v283
  }
  func benchmark() {
    let v0: s5 = s5(p0: s1(p0: [s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0]])], p1: [s0(p0: [[4.0], [5.0], [6.0]], p1: [[7.0]]), s0(p0: [[8.0], [9.0], [10.0]], p1: [[11.0]]), s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0]])]), p1: [[s3(p0: [[s1(p0: [s0(p0: [[16.0], [17.0], [18.0]], p1: [[19.0]])], p1: [s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0]]), s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0]]), s0(p0: [[28.0], [29.0], [30.0]], p1: [[31.0]])])], [s1(p0: [s0(p0: [[32.0], [33.0], [34.0]], p1: [[35.0]])], p1: [s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0]]), s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0]]), s0(p0: [[44.0], [45.0], [46.0]], p1: [[47.0]])])]], p1: [s2(p0: s0(p0: [[48.0], [49.0], [50.0]], p1: [[51.0]]), p1: s0(p0: [[52.0], [53.0], [54.0]], p1: [[55.0]]), p2: s1(p0: [s0(p0: [[56.0], [57.0], [58.0]], p1: [[59.0]])], p1: [s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0]]), s0(p0: [[64.0], [65.0], [66.0]], p1: [[67.0]]), s0(p0: [[68.0], [69.0], [70.0]], p1: [[71.0]])]))])], [s3(p0: [[s1(p0: [s0(p0: [[72.0], [73.0], [74.0]], p1: [[75.0]])], p1: [s0(p0: [[76.0], [77.0], [78.0]], p1: [[79.0]]), s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0]]), s0(p0: [[84.0], [85.0], [86.0]], p1: [[87.0]])])], [s1(p0: [s0(p0: [[88.0], [89.0], [90.0]], p1: [[91.0]])], p1: [s0(p0: [[92.0], [93.0], [94.0]], p1: [[95.0]]), s0(p0: [[96.0], [97.0], [98.0]], p1: [[99.0]]), s0(p0: [[100.0], [101.0], [102.0]], p1: [[103.0]])])]], p1: [s2(p0: s0(p0: [[104.0], [105.0], [106.0]], p1: [[107.0]]), p1: s0(p0: [[108.0], [109.0], [110.0]], p1: [[111.0]]), p2: s1(p0: [s0(p0: [[112.0], [113.0], [114.0]], p1: [[115.0]])], p1: [s0(p0: [[116.0], [117.0], [118.0]], p1: [[119.0]]), s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0]]), s0(p0: [[124.0], [125.0], [126.0]], p1: [[127.0]])]))])]])
    let v1: s2 = s2(p0: s0(p0: [[128.0], [129.0], [130.0]], p1: [[131.0]]), p1: s0(p0: [[132.0], [133.0], [134.0]], p1: [[135.0]]), p2: s1(p0: [s0(p0: [[136.0], [137.0], [138.0]], p1: [[139.0]])], p1: [s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0]]), s0(p0: [[144.0], [145.0], [146.0]], p1: [[147.0]]), s0(p0: [[148.0], [149.0], [150.0]], p1: [[151.0]])]))
    let v2: Double = 152.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 152.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
