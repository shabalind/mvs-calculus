  import Dispatch
  struct s0 {
    var p0: [Double]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  }
  struct s2 {
    var p0: s0
    var p1: s0
  }
  struct s3 {
    var p0: [[s0]]
    var p1: [s0]
  }
  struct s4 {
    var p0: [s0]
    var p1: s2
  }
  struct s5 {
    var p0: s2
    var p1: [[s4]]
  }
  struct s6 {
    var p0: s4
    var p1: [s2]
  }
  struct s7 {
    var p0: s6
    var p1: s3
  }
  struct s9 {
    var p0: s7
    var p1: [[s5]]
  }
  func f116(_ v0: s7) -> s7 {
    var v6: s7 = v0
    let v9: s6 = v6.p0
    let v4: s4 = v9.p0
    v6.p0 = v9
    var v1: s6 = v9
    var v8: s7 = v0
    v8.p0 = v9
    let v2: [s7] = [v8, v6, v0, v0, v0, v6, v8]
    v6.p0 = v1
    var v7: s6 = v9
    var v3: s6 = v1
    v6.p0 = v3
    let v14: s7 = v2[1]
    let v18: [s2] = v9.p1
    let v5: s2 = v18[1]
    v1.p1 = v18
    v3.p1 = v18
    let v12: s6 = v14.p0
    let v21: [s2] = v7.p1
    let v10: s4 = v12.p0
    v3.p1 = v18
    let v23: s0 = v5.p0
    v7.p0 = v4
    var v17: s2 = v5
    var v33: s4 = v10
    var v49: [s2] = v18
    v49[0] = v5
    v17 = v5
    let v22: s2 = v49[2]
    v49[2] = v22
    let v48: [s2] = [v17, v17, v22, v5, v22]
    let v64: s7 = v2[0]
    v33.p1 = v22
    v17.p0 = v23
    let v94: [s0] = v4.p0
    v8.p0 = v12
    let v140: s2 = v21[1]
    let v62: s4 = s4(p0: v94, p1: v140)
    v7.p0 = v62
    var v68: [s2] = v21
    v7.p0 = v33
    v49 = v21
    var v81: [s2] = v48
    let v167: s2 = v81[0]
    v49[0] = v167
    v1.p1 = v68
    var v171: s7 = v64
    v3.p1 = v49
    v171.p0 = v3
    v7.p0 = v4
    return v171
  }
  func f107(_ v0: s2) -> s2 {
    let v7: s0 = v0.p1
    let v2: s0 = v0.p0
    var v3: s0 = v2
    var v1: s0 = v3
    let v5: s0 = v0.p1
    let v11: [Double] = v3.p0
    v3 = v5
    let v4: s0 = v0.p1
    let v8: s0 = v0.p0
    v1.p0 = v11
    var v15: s0 = v7
    let v13: [[Double]] = v15.p1
    var v22: s2 = v0
    v22.p1 = v1
    let v17: [Double] = v13[1]
    var v16: s2 = v22
    let v23: s0 = v0.p0
    v22.p0 = v23
    let v34: s2 = s2(p0: v1, p1: v3)
    var v45: [[Double]] = v13
    var v36: s2 = v16
    v1.p1 = v13
    var v39: s2 = v16
    var v38: [[Double]] = v45
    var v50: s2 = v36
    v39.p1 = v4
    v45[0] = v17
    let v70: s0 = v39.p0
    let v56: [[Double]] = v15.p1
    let v40: s0 = v34.p0
    v39.p1 = v8
    var v100: [[Double]] = v13
    let v67: [Double] = v38[1]
    v16.p0 = v40
    v15.p1 = v56
    v45[1] = v67
    v1.p1 = v38
    v36.p1 = v70
    v50.p1 = v40
    var v73: [[Double]] = v100
    v38 = v73
    return v50
  }
  func f104(_ v0: s0, _ v1: [s0]) -> [s0] {
    var v52: [s0] = v1
    return v52
  }
  func f86(_ v0: s9) -> s9 {
    let v3: s7 = v0.p0
    let v1: s7 = f116(v3)
    var v6: s7 = v3
    let v7: s6 = v6.p0
    var v8: s9 = v0
    v6.p0 = v7
    var v11: s9 = v0
    var v2: s9 = v11
    let v4: [[s5]] = v0.p1
    let v16: s3 = v6.p1
    let v13: [[s5]] = v0.p1
    var v23: [[s5]] = v13
    let v10: s7 = f116(v3)
    v11 = v8
    var v20: s3 = v16
    let v31: [s0] = v20.p1
    var v19: s3 = v16
    var v29: [[s5]] = v4
    let v37: s7 = f116(v10)
    var v40: s9 = v0
    var v24: s7 = v3
    let v25: [s9] = [v40, v11, v0, v8, v0, v8]
    let v51: [[s0]] = v16.p0
    v8.p0 = v24
    v6.p1 = v16
    v6.p1 = v20
    v8.p0 = v1
    let v63: [s5] = v29[2]
    v6.p1 = v19
    let v72: s7 = f116(v6)
    var v50: [s0] = v31
    v20.p1 = v50
    v20.p0 = v51
    let v57: s0 = v50[0]
    v40.p1 = v4
    let v177: s9 = s9(p0: v37, p1: v23)
    v50[1] = v57
    var v98: [[s5]] = v23
    let v123: s9 = v25[4]
    let v96: s9 = s9(p0: v72, p1: v98)
    v11.p1 = v29
    let v162: [s9] = [v177, v2, v177, v2, v96, v40, v123]
    var v400: [s9] = v162
    let v83: s9 = v400[3]
    v98[2] = v63
    return v83
  }
  func f81(_ v0: s9) -> s9 {
    let v4: [[s5]] = v0.p1
    let v3: s9 = f86(v0)
    var v1: s9 = v3
    let v2: s7 = v1.p0
    var v5: s9 = v3
    let v7: s7 = f116(v2)
    let v16: s7 = v5.p0
    v5 = v0
    v5 = v0
    let v12: s7 = f116(v16)
    var v27: s9 = v5
    v1.p1 = v4
    let v19: [[s5]] = v27.p1
    let v30: s7 = f116(v16)
    v27.p1 = v4
    v5.p1 = v4
    let v48: s9 = s9(p0: v30, p1: v19)
    v5.p0 = v7
    v5.p1 = v19
    v5.p1 = v19
    v27.p0 = v12
    v27.p1 = v4
    v1.p1 = v19
    return v48
  }
  func f73(_ v0: s0, _ v1: s4) -> s0 {
    var v5: s4 = v1
    v5 = v1
    let v2: [s0] = v5.p0
    let v8: s0 = v2[0]
    let v7: [s0] = v1.p0
    let v4: s0 = v2[0]
    var v6: [s0] = v2
    let v14: s0 = v2[1]
    let v12: s2 = v1.p1
    let v11: s2 = f107(v12)
    v5 = v1
    let v21: s2 = f107(v11)
    let v37: s2 = f107(v12)
    let v22: [s0] = f104(v14, v6)
    let v51: s2 = f107(v11)
    let v27: s0 = v2[0]
    let v24: [s0] = f104(v4, v7)
    v6[0] = v4
    let v16: s2 = f107(v51)
    let v41: s2 = v1.p1
    v5.p0 = v22
    let v28: s2 = f107(v21)
    v6[0] = v8
    v6 = v24
    var v35: s2 = v41
    let v87: [s0] = f104(v14, v22)
    v5 = v1
    let v42: s2 = f107(v21)
    let v95: s0 = v12.p0
    v35.p0 = v27
    let v73: s2 = f107(v16)
    let v54: s2 = s2(p0: v14, p1: v8)
    let v52: s2 = f107(v37)
    var v179: s4 = v5
    let v68: s2 = v179.p1
    v6[2] = v95
    let v84: s0 = v35.p0
    let v92: s2 = f107(v73)
    let v106: s2 = f107(v42)
    let v130: [s2] = [v51, v21, v92, v52, v106, v68]
    let v120: s2 = v130[5]
    let v253: s0 = v87[0]
    v179.p1 = v54
    let v211: s0 = v120.p0
    v179.p1 = v28
    v5.p1 = v21
    v6[2] = v84
    v35.p0 = v253
    return v211
  }
  @inline(never)
  func f0(_ v0: [s9], _ v1: [s1], _ v2: Double) -> Double {
    var v3: [s9] = v0
    var v11: [s9] = v3
    var v7: [s9] = v3
    var v4: [s9] = v11
    let v18: s9 = v7[1]
    let v12: s9 = f81(v18)
    v4[0] = v18
    let v10: s9 = f81(v12)
    v11[0] = v10
    let v17: s1 = v1[0]
    let v14: s9 = v0[0]
    let v13: [[s0]] = v17.p1
    var v28: [[s0]] = v13
    let v23: s9 = v4[0]
    let v21: [[s0]] = v17.p1
    let v68: [s0] = v21[0]
    v11[2] = v14
    let v59: s7 = v23.p0
    v28[0] = v68
    var v42: [s0] = v68
    let v94: s6 = v59.p0
    let v43: s4 = v94.p0
    v28[0] = v42
    let v33: [s0] = v28[0]
    let v35: s0 = v33[0]
    v42 = v68
    v4[2] = v12
    v28[0] = v33
    let v48: s0 = f73(v35, v43)
    let v120: [Double] = v48.p0
    let v47: Double = v120[0]
    return v47
  }
  func benchmark() {
    let v0: [s9] = [s9(p0: s7(p0: s6(p0: s4(p0: [s0(p0: [0.0], p1: [[1.0], [2.0], [3.0]]), s0(p0: [4.0], p1: [[5.0], [6.0], [7.0]]), s0(p0: [8.0], p1: [[9.0], [10.0], [11.0]])], p1: s2(p0: s0(p0: [12.0], p1: [[13.0], [14.0], [15.0]]), p1: s0(p0: [16.0], p1: [[17.0], [18.0], [19.0]]))), p1: [s2(p0: s0(p0: [20.0], p1: [[21.0], [22.0], [23.0]]), p1: s0(p0: [24.0], p1: [[25.0], [26.0], [27.0]])), s2(p0: s0(p0: [28.0], p1: [[29.0], [30.0], [31.0]]), p1: s0(p0: [32.0], p1: [[33.0], [34.0], [35.0]])), s2(p0: s0(p0: [36.0], p1: [[37.0], [38.0], [39.0]]), p1: s0(p0: [40.0], p1: [[41.0], [42.0], [43.0]]))]), p1: s3(p0: [[s0(p0: [44.0], p1: [[45.0], [46.0], [47.0]])], [s0(p0: [48.0], p1: [[49.0], [50.0], [51.0]])]], p1: [s0(p0: [52.0], p1: [[53.0], [54.0], [55.0]]), s0(p0: [56.0], p1: [[57.0], [58.0], [59.0]])])), p1: [[s5(p0: s2(p0: s0(p0: [60.0], p1: [[61.0], [62.0], [63.0]]), p1: s0(p0: [64.0], p1: [[65.0], [66.0], [67.0]])), p1: [[s4(p0: [s0(p0: [68.0], p1: [[69.0], [70.0], [71.0]]), s0(p0: [72.0], p1: [[73.0], [74.0], [75.0]]), s0(p0: [76.0], p1: [[77.0], [78.0], [79.0]])], p1: s2(p0: s0(p0: [80.0], p1: [[81.0], [82.0], [83.0]]), p1: s0(p0: [84.0], p1: [[85.0], [86.0], [87.0]])))]])], [s5(p0: s2(p0: s0(p0: [88.0], p1: [[89.0], [90.0], [91.0]]), p1: s0(p0: [92.0], p1: [[93.0], [94.0], [95.0]])), p1: [[s4(p0: [s0(p0: [96.0], p1: [[97.0], [98.0], [99.0]]), s0(p0: [100.0], p1: [[101.0], [102.0], [103.0]]), s0(p0: [104.0], p1: [[105.0], [106.0], [107.0]])], p1: s2(p0: s0(p0: [108.0], p1: [[109.0], [110.0], [111.0]]), p1: s0(p0: [112.0], p1: [[113.0], [114.0], [115.0]])))]])], [s5(p0: s2(p0: s0(p0: [116.0], p1: [[117.0], [118.0], [119.0]]), p1: s0(p0: [120.0], p1: [[121.0], [122.0], [123.0]])), p1: [[s4(p0: [s0(p0: [124.0], p1: [[125.0], [126.0], [127.0]]), s0(p0: [128.0], p1: [[129.0], [130.0], [131.0]]), s0(p0: [132.0], p1: [[133.0], [134.0], [135.0]])], p1: s2(p0: s0(p0: [136.0], p1: [[137.0], [138.0], [139.0]]), p1: s0(p0: [140.0], p1: [[141.0], [142.0], [143.0]])))]])]]), s9(p0: s7(p0: s6(p0: s4(p0: [s0(p0: [144.0], p1: [[145.0], [146.0], [147.0]]), s0(p0: [148.0], p1: [[149.0], [150.0], [151.0]]), s0(p0: [152.0], p1: [[153.0], [154.0], [155.0]])], p1: s2(p0: s0(p0: [156.0], p1: [[157.0], [158.0], [159.0]]), p1: s0(p0: [160.0], p1: [[161.0], [162.0], [163.0]]))), p1: [s2(p0: s0(p0: [164.0], p1: [[165.0], [166.0], [167.0]]), p1: s0(p0: [168.0], p1: [[169.0], [170.0], [171.0]])), s2(p0: s0(p0: [172.0], p1: [[173.0], [174.0], [175.0]]), p1: s0(p0: [176.0], p1: [[177.0], [178.0], [179.0]])), s2(p0: s0(p0: [180.0], p1: [[181.0], [182.0], [183.0]]), p1: s0(p0: [184.0], p1: [[185.0], [186.0], [187.0]]))]), p1: s3(p0: [[s0(p0: [188.0], p1: [[189.0], [190.0], [191.0]])], [s0(p0: [192.0], p1: [[193.0], [194.0], [195.0]])]], p1: [s0(p0: [196.0], p1: [[197.0], [198.0], [199.0]]), s0(p0: [200.0], p1: [[201.0], [202.0], [203.0]])])), p1: [[s5(p0: s2(p0: s0(p0: [204.0], p1: [[205.0], [206.0], [207.0]]), p1: s0(p0: [208.0], p1: [[209.0], [210.0], [211.0]])), p1: [[s4(p0: [s0(p0: [212.0], p1: [[213.0], [214.0], [215.0]]), s0(p0: [216.0], p1: [[217.0], [218.0], [219.0]]), s0(p0: [220.0], p1: [[221.0], [222.0], [223.0]])], p1: s2(p0: s0(p0: [224.0], p1: [[225.0], [226.0], [227.0]]), p1: s0(p0: [228.0], p1: [[229.0], [230.0], [231.0]])))]])], [s5(p0: s2(p0: s0(p0: [232.0], p1: [[233.0], [234.0], [235.0]]), p1: s0(p0: [236.0], p1: [[237.0], [238.0], [239.0]])), p1: [[s4(p0: [s0(p0: [240.0], p1: [[241.0], [242.0], [243.0]]), s0(p0: [244.0], p1: [[245.0], [246.0], [247.0]]), s0(p0: [248.0], p1: [[249.0], [250.0], [251.0]])], p1: s2(p0: s0(p0: [252.0], p1: [[253.0], [254.0], [255.0]]), p1: s0(p0: [256.0], p1: [[257.0], [258.0], [259.0]])))]])], [s5(p0: s2(p0: s0(p0: [260.0], p1: [[261.0], [262.0], [263.0]]), p1: s0(p0: [264.0], p1: [[265.0], [266.0], [267.0]])), p1: [[s4(p0: [s0(p0: [268.0], p1: [[269.0], [270.0], [271.0]]), s0(p0: [272.0], p1: [[273.0], [274.0], [275.0]]), s0(p0: [276.0], p1: [[277.0], [278.0], [279.0]])], p1: s2(p0: s0(p0: [280.0], p1: [[281.0], [282.0], [283.0]]), p1: s0(p0: [284.0], p1: [[285.0], [286.0], [287.0]])))]])]]), s9(p0: s7(p0: s6(p0: s4(p0: [s0(p0: [288.0], p1: [[289.0], [290.0], [291.0]]), s0(p0: [292.0], p1: [[293.0], [294.0], [295.0]]), s0(p0: [296.0], p1: [[297.0], [298.0], [299.0]])], p1: s2(p0: s0(p0: [300.0], p1: [[301.0], [302.0], [303.0]]), p1: s0(p0: [304.0], p1: [[305.0], [306.0], [307.0]]))), p1: [s2(p0: s0(p0: [308.0], p1: [[309.0], [310.0], [311.0]]), p1: s0(p0: [312.0], p1: [[313.0], [314.0], [315.0]])), s2(p0: s0(p0: [316.0], p1: [[317.0], [318.0], [319.0]]), p1: s0(p0: [320.0], p1: [[321.0], [322.0], [323.0]])), s2(p0: s0(p0: [324.0], p1: [[325.0], [326.0], [327.0]]), p1: s0(p0: [328.0], p1: [[329.0], [330.0], [331.0]]))]), p1: s3(p0: [[s0(p0: [332.0], p1: [[333.0], [334.0], [335.0]])], [s0(p0: [336.0], p1: [[337.0], [338.0], [339.0]])]], p1: [s0(p0: [340.0], p1: [[341.0], [342.0], [343.0]]), s0(p0: [344.0], p1: [[345.0], [346.0], [347.0]])])), p1: [[s5(p0: s2(p0: s0(p0: [348.0], p1: [[349.0], [350.0], [351.0]]), p1: s0(p0: [352.0], p1: [[353.0], [354.0], [355.0]])), p1: [[s4(p0: [s0(p0: [356.0], p1: [[357.0], [358.0], [359.0]]), s0(p0: [360.0], p1: [[361.0], [362.0], [363.0]]), s0(p0: [364.0], p1: [[365.0], [366.0], [367.0]])], p1: s2(p0: s0(p0: [368.0], p1: [[369.0], [370.0], [371.0]]), p1: s0(p0: [372.0], p1: [[373.0], [374.0], [375.0]])))]])], [s5(p0: s2(p0: s0(p0: [376.0], p1: [[377.0], [378.0], [379.0]]), p1: s0(p0: [380.0], p1: [[381.0], [382.0], [383.0]])), p1: [[s4(p0: [s0(p0: [384.0], p1: [[385.0], [386.0], [387.0]]), s0(p0: [388.0], p1: [[389.0], [390.0], [391.0]]), s0(p0: [392.0], p1: [[393.0], [394.0], [395.0]])], p1: s2(p0: s0(p0: [396.0], p1: [[397.0], [398.0], [399.0]]), p1: s0(p0: [400.0], p1: [[401.0], [402.0], [403.0]])))]])], [s5(p0: s2(p0: s0(p0: [404.0], p1: [[405.0], [406.0], [407.0]]), p1: s0(p0: [408.0], p1: [[409.0], [410.0], [411.0]])), p1: [[s4(p0: [s0(p0: [412.0], p1: [[413.0], [414.0], [415.0]]), s0(p0: [416.0], p1: [[417.0], [418.0], [419.0]]), s0(p0: [420.0], p1: [[421.0], [422.0], [423.0]])], p1: s2(p0: s0(p0: [424.0], p1: [[425.0], [426.0], [427.0]]), p1: s0(p0: [428.0], p1: [[429.0], [430.0], [431.0]])))]])]])]
    let v1: [s1] = [s1(p0: s0(p0: [432.0], p1: [[433.0], [434.0], [435.0]]), p1: [[s0(p0: [436.0], p1: [[437.0], [438.0], [439.0]])]])]
    let v2: Double = 440.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 440.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
