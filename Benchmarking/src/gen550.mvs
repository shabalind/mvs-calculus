  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s5 {
    var p0: s0
    var p1: [[s0]]
  } in
  let f23: (s5) -> s5 = (v0: s5) -> s5 {
    var v3: s5 = v0 in
    let v1: [[s0]] = v0.p1 in
    v3.p1 = v1 in
    let v2: [s0] = v1[0] in
    let v5: [s0] = v1[0] in
    var v4: [[s0]] = v1 in
    v3.p1 = v1 in
    v3.p1 = v4 in
    let v18: s0 = v2[0] in
    let v6: [[Float]] = v18.p0 in
    v4[0] = v5 in
    v3.p0 = v18 in
    v4[1] = v2 in
    var v23: [s0] = v5 in
    let v56: [[s0]] = v3.p1 in
    v3.p1 = v1 in
    v3.p1 = v56 in
    v23[0] = v18 in
    let v20: [[Float]] = v18.p1 in
    var v24: s5 = v0 in
    let v52: s0 = s0(v6, v20) in
    v23[0] = v52 in
    var v51: [s0] = v23 in
    v3 = v0 in
    var v46: [s0] = v51 in
    v4[1] = v23 in
    v4[0] = v23 in
    let v76: s0 = v46[0] in
    var v109: s5 = v3 in
    let v86: [s5] = [v109, v24, v0] in
    var v62: [s0] = v5 in
    let v183: s0 = v62[0] in
    v24.p0 = v76 in
    v51[0] = v183 in
    v24.p0 = v183 in
    let v61: s5 = v86[0] in
    v61
  } in
  let noinline_f0: ([[s5]], Float) -> Float = (v0: [[s5]], v1: Float) -> Float {
    let v3: [s5] = v0[0] in
    let v5: s5 = v3[0] in
    let v4: s5 = f23(v5) in
    let v29: s0 = v4.p0 in
    let v21: [[Float]] = v29.p0 in
    var v70: [[Float]] = v21 in
    var v38: Float = v1 in
    let v49: Float = v38 / v1 in
    let v31: [Float] = v70[1] in
    var v50: [Float] = v31 in
    v50[0] = v49 in
    let v78: Float = v31[0] in
    let v40: Float = v78 - v1 in
    v70[1] = v50 in
    v50[0] = v1 in
    var v46: Float = v40 in
    v50[0] = v1 in
    v46
  } in
  fun loop(i: Int, v0: [[s5]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s5]] = [[s5(s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]), [[s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]])], [s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]])]])]] in
    let v1: Float = 15.0 in
    let initialResult: Float = 15.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()