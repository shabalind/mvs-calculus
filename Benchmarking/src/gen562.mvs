  struct s0 {
    var p0: [[Float]]
    var p1: [Float]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s1
    var p1: [[s0]]
  } in
  struct s3 {
    var p0: s2
    var p1: [[Float]]
  } in
  let f53: (s3) -> s3 = (v0: s3) -> s3 {
    v0
  } in
  let f51: (Float) -> Float = (v0: Float) -> Float {
    var v5: Float = v0 in
    var v1: Float = v5 in
    v1 = v5 in
    var v6: Float = v0 in
    var v3: Float = v1 in
    var v2: Float = v6 in
    var v9: Float = v6 in
    var v10: Float = v2 in
    let v18: [Float] = [v2, v0, v10, v3] in
    let v13: [[Float]] = [v18, v18, v18, v18, v18, v18] in
    let v21: [Float] = v13[2] in
    v1 = v9 in
    let v58: Float = v21[3] in
    v9 = v2 in
    v58
  } in
  let f41: (s2) -> s2 = (v0: s2) -> s2 {
    let v5: s1 = v0.p0 in
    var v4: s2 = v0 in
    let v2: [[s0]] = v0.p1 in
    v4.p0 = v5 in
    let v7: [s0] = v2[2] in
    let v13: s0 = v5.p1 in
    v4.p0 = v5 in
    let v1: [s0] = v2[2] in
    let v9: [[s0]] = v4.p1 in
    let v11: s0 = v5.p1 in
    var v6: [[s0]] = v2 in
    let v8: [s0] = v6[2] in
    v4.p1 = v6 in
    v6[2] = v8 in
    v6 = v9 in
    let v17: [[s0]] = v4.p1 in
    let v31: [[s0]] = v0.p1 in
    v4.p1 = v31 in
    v6[1] = v7 in
    var v18: s0 = v11 in
    let v102: s1 = v0.p0 in
    var v104: s1 = v102 in
    v104.p0 = v13 in
    let v95: s2 = s2(v104, v17) in
    v104.p1 = v18 in
    v6[0] = v1 in
    let v149: [[Float]] = v18.p0 in
    v18.p0 = v149 in
    v95
  } in
  let f39: (s3, s2) -> s3 = (v0: s3, v1: s2) -> s3 {
    let v4: s2 = f41(v1) in
    let v10: s2 = f41(v4) in
    let v8: [[s0]] = v10.p1 in
    let v13: [s0] = v8[1] in
    let v16: s0 = v13[0] in
    let v42: s3 = f53(v0) in
    let v77: [[Float]] = v16.p0 in
    var v51: s3 = v42 in
    let v119: s3 = f53(v51) in
    v51.p1 = v77 in
    v119
  } in
  let noinline_f0: (s2, [s3], Float) -> Float = (v0: s2, v1: [s3], v2: Float) -> Float {
    let v8: s3 = v1[1] in
    let v6: s3 = v1[1] in
    let v7: s3 = f39(v6, v0) in
    let v9: s3 = f39(v7, v0) in
    var v12: s3 = v8 in
    let v16: s3 = f39(v12, v0) in
    let v23: [[Float]] = v16.p1 in
    v12.p1 = v23 in
    let v25: [Float] = v23[0] in
    let v18: Float = f51(v2) in
    let v37: Float = v25[0] in
    var v40: [Float] = v25 in
    let v36: [[Float]] = v9.p1 in
    let v85: Float = v40[0] in
    v12.p1 = v36 in
    let v122: Float = v37 / v85 in
    v40[0] = v18 in
    v122
  } in
  fun loop(i: Int, v0: s2, v1: [s3], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(s1(s0([[0.0]], [1.0, 2.0]), s0([[3.0]], [4.0, 5.0])), [[s0([[6.0]], [7.0, 8.0])], [s0([[9.0]], [10.0, 11.0])], [s0([[12.0]], [13.0, 14.0])]]) in
    let v1: [s3] = [s3(s2(s1(s0([[15.0]], [16.0, 17.0]), s0([[18.0]], [19.0, 20.0])), [[s0([[21.0]], [22.0, 23.0])], [s0([[24.0]], [25.0, 26.0])], [s0([[27.0]], [28.0, 29.0])]]), [[30.0]]), s3(s2(s1(s0([[31.0]], [32.0, 33.0]), s0([[34.0]], [35.0, 36.0])), [[s0([[37.0]], [38.0, 39.0])], [s0([[40.0]], [41.0, 42.0])], [s0([[43.0]], [44.0, 45.0])]]), [[46.0]])] in
    let v2: Float = 47.0 in
    let initialResult: Float = 47.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()