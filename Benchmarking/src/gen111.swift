  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: [[s0]]
    var p1: s1
    var p2: s1
    var p3: s1
    var p4: [s0]
  }
  struct s3 {
    var p0: s0
    var p1: s1
  }
  struct s4 {
    var p0: [s2]
    var p1: s3
  }
  struct s6 {
    var p0: s4
    var p1: [s2]
  }
  func f81(_ v0: s2) -> s2 {
    return v0
  }
  func f73(_ v0: Double) -> Double {
    var v4: Double = v0
    var v5: Double = v4
    var v8: Double = v0
    var v1: Double = v4
    let v16: Double = v4 - v4
    let v3: Double = v5 - v4
    var v2: Double = v4
    let v11: Double = v8 / v2
    var v6: Double = v8
    var v15: Double = v11
    var v9: Double = v11
    var v17: Double = v6
    let v27: [Double] = [v3]
    var v13: Double = v9
    var v37: [Double] = v27
    v37[0] = v3
    let v14: Double = v37[0]
    var v12: Double = v11
    var v18: Double = v16
    var v45: Double = v14
    let v25: Double = v27[0]
    v37[0] = v45
    var v36: Double = v13
    v37[0] = v1
    let v33: Double = v37[0]
    var v21: [Double] = v37
    v37[0] = v8
    let v31: Double = v21[0]
    let v48: Double = v37[0]
    v21[0] = v36
    let v40: [Double] = [v15, v45, v8, v12, v31, v17, v8]
    v4 = v48
    v21[0] = v36
    v1 = v4
    v21[0] = v33
    v37[0] = v25
    let v51: Double = v40[4]
    let v71: [Double] = [v25, v51, v51, v18, v6, v15]
    v21[0] = v4
    let v63: Double = v71[2]
    v37[0] = v9
    return v63
  }
  func f39(_ v0: [s2]) -> [s2] {
    var v23: [s2] = v0
    var v43: [s2] = v23
    return v43
  }
  func f4(_ v0: s2) -> s2 {
    let v6: s2 = f81(v0)
    let v3: s2 = f81(v6)
    return v3
  }
  @inline(never)
  func f0(_ v0: s6, _ v1: Double) -> Double {
    var v2: Double = v1
    var v6: Double = v2
    let v3: [s2] = v0.p1
    var v10: [s2] = v3
    v10 = v3
    let v7: [s2] = f39(v10)
    v10 = v3
    let v8: s2 = v10[0]
    v10[0] = v8
    let v21: s2 = f4(v8)
    v10[0] = v8
    let v13: Double = v6 * v1
    let v23: s2 = v7[2]
    v10[0] = v21
    v10[0] = v21
    let v27: Double = f73(v13)
    let v108: [[s0]] = v23.p0
    let v63: [s0] = v108[0]
    let v36: s0 = v63[0]
    let v54: [[Double]] = v36.p1
    let v151: Double = v27 + v13
    let v90: [Double] = v54[1]
    var v134: [Double] = v90
    v134[0] = v151
    let v118: Double = v134[0]
    return v118
  }
  func benchmark() {
    let v0: s6 = s6(p0: s4(p0: [s2(p0: [[s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0]])], [s0(p0: [[4.0], [5.0]], p1: [[6.0], [7.0]])]], p1: s1(p0: s0(p0: [[8.0], [9.0]], p1: [[10.0], [11.0]]), p1: [s0(p0: [[12.0], [13.0]], p1: [[14.0], [15.0]]), s0(p0: [[16.0], [17.0]], p1: [[18.0], [19.0]])]), p2: s1(p0: s0(p0: [[20.0], [21.0]], p1: [[22.0], [23.0]]), p1: [s0(p0: [[24.0], [25.0]], p1: [[26.0], [27.0]]), s0(p0: [[28.0], [29.0]], p1: [[30.0], [31.0]])]), p3: s1(p0: s0(p0: [[32.0], [33.0]], p1: [[34.0], [35.0]]), p1: [s0(p0: [[36.0], [37.0]], p1: [[38.0], [39.0]]), s0(p0: [[40.0], [41.0]], p1: [[42.0], [43.0]])]), p4: [s0(p0: [[44.0], [45.0]], p1: [[46.0], [47.0]]), s0(p0: [[48.0], [49.0]], p1: [[50.0], [51.0]]), s0(p0: [[52.0], [53.0]], p1: [[54.0], [55.0]])]), s2(p0: [[s0(p0: [[56.0], [57.0]], p1: [[58.0], [59.0]])], [s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0]])]], p1: s1(p0: s0(p0: [[64.0], [65.0]], p1: [[66.0], [67.0]]), p1: [s0(p0: [[68.0], [69.0]], p1: [[70.0], [71.0]]), s0(p0: [[72.0], [73.0]], p1: [[74.0], [75.0]])]), p2: s1(p0: s0(p0: [[76.0], [77.0]], p1: [[78.0], [79.0]]), p1: [s0(p0: [[80.0], [81.0]], p1: [[82.0], [83.0]]), s0(p0: [[84.0], [85.0]], p1: [[86.0], [87.0]])]), p3: s1(p0: s0(p0: [[88.0], [89.0]], p1: [[90.0], [91.0]]), p1: [s0(p0: [[92.0], [93.0]], p1: [[94.0], [95.0]]), s0(p0: [[96.0], [97.0]], p1: [[98.0], [99.0]])]), p4: [s0(p0: [[100.0], [101.0]], p1: [[102.0], [103.0]]), s0(p0: [[104.0], [105.0]], p1: [[106.0], [107.0]]), s0(p0: [[108.0], [109.0]], p1: [[110.0], [111.0]])]), s2(p0: [[s0(p0: [[112.0], [113.0]], p1: [[114.0], [115.0]])], [s0(p0: [[116.0], [117.0]], p1: [[118.0], [119.0]])]], p1: s1(p0: s0(p0: [[120.0], [121.0]], p1: [[122.0], [123.0]]), p1: [s0(p0: [[124.0], [125.0]], p1: [[126.0], [127.0]]), s0(p0: [[128.0], [129.0]], p1: [[130.0], [131.0]])]), p2: s1(p0: s0(p0: [[132.0], [133.0]], p1: [[134.0], [135.0]]), p1: [s0(p0: [[136.0], [137.0]], p1: [[138.0], [139.0]]), s0(p0: [[140.0], [141.0]], p1: [[142.0], [143.0]])]), p3: s1(p0: s0(p0: [[144.0], [145.0]], p1: [[146.0], [147.0]]), p1: [s0(p0: [[148.0], [149.0]], p1: [[150.0], [151.0]]), s0(p0: [[152.0], [153.0]], p1: [[154.0], [155.0]])]), p4: [s0(p0: [[156.0], [157.0]], p1: [[158.0], [159.0]]), s0(p0: [[160.0], [161.0]], p1: [[162.0], [163.0]]), s0(p0: [[164.0], [165.0]], p1: [[166.0], [167.0]])])], p1: s3(p0: s0(p0: [[168.0], [169.0]], p1: [[170.0], [171.0]]), p1: s1(p0: s0(p0: [[172.0], [173.0]], p1: [[174.0], [175.0]]), p1: [s0(p0: [[176.0], [177.0]], p1: [[178.0], [179.0]]), s0(p0: [[180.0], [181.0]], p1: [[182.0], [183.0]])]))), p1: [s2(p0: [[s0(p0: [[184.0], [185.0]], p1: [[186.0], [187.0]])], [s0(p0: [[188.0], [189.0]], p1: [[190.0], [191.0]])]], p1: s1(p0: s0(p0: [[192.0], [193.0]], p1: [[194.0], [195.0]]), p1: [s0(p0: [[196.0], [197.0]], p1: [[198.0], [199.0]]), s0(p0: [[200.0], [201.0]], p1: [[202.0], [203.0]])]), p2: s1(p0: s0(p0: [[204.0], [205.0]], p1: [[206.0], [207.0]]), p1: [s0(p0: [[208.0], [209.0]], p1: [[210.0], [211.0]]), s0(p0: [[212.0], [213.0]], p1: [[214.0], [215.0]])]), p3: s1(p0: s0(p0: [[216.0], [217.0]], p1: [[218.0], [219.0]]), p1: [s0(p0: [[220.0], [221.0]], p1: [[222.0], [223.0]]), s0(p0: [[224.0], [225.0]], p1: [[226.0], [227.0]])]), p4: [s0(p0: [[228.0], [229.0]], p1: [[230.0], [231.0]]), s0(p0: [[232.0], [233.0]], p1: [[234.0], [235.0]]), s0(p0: [[236.0], [237.0]], p1: [[238.0], [239.0]])]), s2(p0: [[s0(p0: [[240.0], [241.0]], p1: [[242.0], [243.0]])], [s0(p0: [[244.0], [245.0]], p1: [[246.0], [247.0]])]], p1: s1(p0: s0(p0: [[248.0], [249.0]], p1: [[250.0], [251.0]]), p1: [s0(p0: [[252.0], [253.0]], p1: [[254.0], [255.0]]), s0(p0: [[256.0], [257.0]], p1: [[258.0], [259.0]])]), p2: s1(p0: s0(p0: [[260.0], [261.0]], p1: [[262.0], [263.0]]), p1: [s0(p0: [[264.0], [265.0]], p1: [[266.0], [267.0]]), s0(p0: [[268.0], [269.0]], p1: [[270.0], [271.0]])]), p3: s1(p0: s0(p0: [[272.0], [273.0]], p1: [[274.0], [275.0]]), p1: [s0(p0: [[276.0], [277.0]], p1: [[278.0], [279.0]]), s0(p0: [[280.0], [281.0]], p1: [[282.0], [283.0]])]), p4: [s0(p0: [[284.0], [285.0]], p1: [[286.0], [287.0]]), s0(p0: [[288.0], [289.0]], p1: [[290.0], [291.0]]), s0(p0: [[292.0], [293.0]], p1: [[294.0], [295.0]])]), s2(p0: [[s0(p0: [[296.0], [297.0]], p1: [[298.0], [299.0]])], [s0(p0: [[300.0], [301.0]], p1: [[302.0], [303.0]])]], p1: s1(p0: s0(p0: [[304.0], [305.0]], p1: [[306.0], [307.0]]), p1: [s0(p0: [[308.0], [309.0]], p1: [[310.0], [311.0]]), s0(p0: [[312.0], [313.0]], p1: [[314.0], [315.0]])]), p2: s1(p0: s0(p0: [[316.0], [317.0]], p1: [[318.0], [319.0]]), p1: [s0(p0: [[320.0], [321.0]], p1: [[322.0], [323.0]]), s0(p0: [[324.0], [325.0]], p1: [[326.0], [327.0]])]), p3: s1(p0: s0(p0: [[328.0], [329.0]], p1: [[330.0], [331.0]]), p1: [s0(p0: [[332.0], [333.0]], p1: [[334.0], [335.0]]), s0(p0: [[336.0], [337.0]], p1: [[338.0], [339.0]])]), p4: [s0(p0: [[340.0], [341.0]], p1: [[342.0], [343.0]]), s0(p0: [[344.0], [345.0]], p1: [[346.0], [347.0]]), s0(p0: [[348.0], [349.0]], p1: [[350.0], [351.0]])])])
    let v1: Double = 352.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 352.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
