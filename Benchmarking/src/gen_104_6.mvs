  struct s0 {
    var p0: [[Float]]
    var p1: [Float]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: [[s0]]
  } in
  let f16: (Float) -> Float = (v0: Float) -> Float {
    var v7: Float = v0 in
    var v4: Float = v0 in
    let v5: Float = v0 / v4 in
    var v6: Float = v5 in
    var v11: Float = v0 in
    var v8: Float = v0 in
    var v1: Float = v11 in
    var v9: Float = v4 in
    var v29: Float = v8 in
    var v17: Float = v9 in
    var v20: Float = v8 in
    var v43: Float = v5 in
    var v18: Float = v6 in
    let v34: [Float] = [v20, v29, v17, v18] in
    var v24: Float = v18 in
    var v37: [Float] = v34 in
    v37[3] = v1 in
    let v32: Float = v37[2] in
    v37[1] = v1 in
    var v27: [Float] = v34 in
    v37[2] = v32 in
    let v19: Float = v37[3] in
    var v31: Float = v19 in
    var v58: [Float] = v27 in
    v37[2] = v5 in
    let v59: Float = v58[2] in
    var v60: [Float] = v27 in
    v37[2] = v7 in
    var v82: [Float] = v60 in
    v82[1] = v24 in
    v60[3] = v59 in
    var v63: [Float] = v37 in
    let v40: Float = v63[1] in
    v63[1] = v40 in
    v27[1] = v40 in
    let v50: Float = v37[1] in
    var v140: Float = v50 in
    v27[1] = v31 in
    v27[1] = v5 in
    v27[0] = v4 in
    v82[1] = v43 in
    v27[1] = v140 in
    let v78: Float = v82[1] in
    v78
  } in
  let f1: ([Float]) -> [Float] = (v0: [Float]) -> [Float] {
    var v1: [Float] = v0 in
    let v3: Float = v1[0] in
    let v4: Float = v0[0] in
    let v6: Float = v0[0] in
    let v5: [[Float]] = [v1, v1] in
    let v2: [Float] = v5[1] in
    let v9: Float = v3 * v4 in
    v1[0] = v3 in
    var v10: [[Float]] = v5 in
    v10[0] = v2 in
    var v21: [Float] = v2 in
    let v14: Float = v6 * v9 in
    let v50: Float = f16(v9) in
    let v23: Float = f16(v14) in
    let v33: [[[Float]]] = [v5, v10] in
    var v24: [[[Float]]] = v33 in
    v21[0] = v50 in
    v10[1] = v0 in
    let v72: Float = f16(v23) in
    v10[1] = v21 in
    v24[1] = v10 in
    let v95: Float = f16(v72) in
    let v83: [[Float]] = v24[0] in
    v21[0] = v95 in
    v24[1] = v10 in
    let v125: [Float] = v83[1] in
    v125
  } in
  let noinline_f0: ([s1], Float) -> Float = (v0: [s1], v1: Float) -> Float {
    let v9: s1 = v0[2] in
    let v7: [[s0]] = v9.p1 in
    var v15: [[s0]] = v7 in
    let v13: [s0] = v15[0] in
    let v20: Float = f16(v1) in
    let v33: [s0] = v15[0] in
    let v25: Float = f16(v20) in
    let v30: [[s0]] = [v13, v13, v33, v33, v13] in
    var v40: [[s0]] = v30 in
    var v39: [s0] = v13 in
    let v72: [s0] = v40[1] in
    v15[1] = v13 in
    v15[0] = v33 in
    let v87: s0 = v39[0] in
    var v85: s0 = v87 in
    let v76: [Float] = v85.p1 in
    let v83: [Float] = f1(v76) in
    v85.p1 = v76 in
    let v104: Float = v83[0] in
    let v380: s0 = v72[0] in
    v39[0] = v380 in
    let v211: Float = v25 + v104 in
    v211
  } in
  fun loop(i: Int, v0: [s1], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1([[s0([[0.0], [1.0], [2.0]], [3.0])], [s0([[4.0], [5.0], [6.0]], [7.0])], [s0([[8.0], [9.0], [10.0]], [11.0])]], [[s0([[12.0], [13.0], [14.0]], [15.0])], [s0([[16.0], [17.0], [18.0]], [19.0])], [s0([[20.0], [21.0], [22.0]], [23.0])]]), s1([[s0([[24.0], [25.0], [26.0]], [27.0])], [s0([[28.0], [29.0], [30.0]], [31.0])], [s0([[32.0], [33.0], [34.0]], [35.0])]], [[s0([[36.0], [37.0], [38.0]], [39.0])], [s0([[40.0], [41.0], [42.0]], [43.0])], [s0([[44.0], [45.0], [46.0]], [47.0])]]), s1([[s0([[48.0], [49.0], [50.0]], [51.0])], [s0([[52.0], [53.0], [54.0]], [55.0])], [s0([[56.0], [57.0], [58.0]], [59.0])]], [[s0([[60.0], [61.0], [62.0]], [63.0])], [s0([[64.0], [65.0], [66.0]], [67.0])], [s0([[68.0], [69.0], [70.0]], [71.0])]])] in
    let v1: Float = 72.0 in
    let initialResult: Float = 72.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()