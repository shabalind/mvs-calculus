  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s3 {
    var p0: s1
    var p1: s0
  } in
  let f47: ([s0]) -> [s0] = (v0: [s0]) -> [s0] {
    var v1: [s0] = v0 in
    let v3: s0 = v0[0] in
    let v2: s0 = v1[1] in
    let v4: [[Float]] = v3.p0 in
    v1[1] = v2 in
    v1[0] = v2 in
    v1 = v0 in
    v1 = v0 in
    var v5: [s0] = v0 in
    let v10: [[Float]] = v3.p1 in
    v1[0] = v2 in
    v5[0] = v3 in
    let v18: [[Float]] = v3.p0 in
    let v16: [[Float]] = v3.p1 in
    let v22: [[Float]] = v2.p0 in
    v5[1] = v3 in
    var v20: s0 = v2 in
    v20.p0 = v18 in
    v5[0] = v20 in
    let v46: [[Float]] = v3.p1 in
    v20.p1 = v4 in
    v20.p1 = v10 in
    v1[0] = v3 in
    v20.p1 = v10 in
    v20.p0 = v22 in
    v20.p0 = v46 in
    let v34: [[Float]] = v3.p1 in
    v1[1] = v20 in
    v20.p0 = v34 in
    var v41: s0 = v3 in
    v41.p0 = v22 in
    v1 = v5 in
    var v78: s0 = v20 in
    v41.p0 = v16 in
    var v53: [s0] = v1 in
    v53[1] = v78 in
    v53[0] = v41 in
    v53
  } in
  let noinline_f0: ([s3], Float) -> Float = (v0: [s3], v1: Float) -> Float {
    let v7: s3 = v0[0] in
    let v2: s1 = v7.p0 in
    let v9: [s0] = v2.p0 in
    let v21: s0 = v9[0] in
    let v12: [s0] = f47(v9) in
    var v22: [s0] = v12 in
    v22[1] = v21 in
    let v56: s0 = v22[0] in
    let v44: [s0] = v2.p0 in
    v22 = v44 in
    let v47: [[Float]] = v56.p1 in
    var v63: [[Float]] = v47 in
    let v80: [Float] = v63[0] in
    let v146: Float = v80[0] in
    v146
  } in
  fun loop(i: Int, v0: [s3], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s3] = [s3(s1([s0([[0.0]], [[1.0]]), s0([[2.0]], [[3.0]])], [s0([[4.0]], [[5.0]])]), s0([[6.0]], [[7.0]])), s3(s1([s0([[8.0]], [[9.0]]), s0([[10.0]], [[11.0]])], [s0([[12.0]], [[13.0]])]), s0([[14.0]], [[15.0]]))] in
    let v1: Float = 16.0 in
    let initialResult: Float = 16.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()