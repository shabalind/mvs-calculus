  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
  }
  struct s2 {
    var p0: [s1]
    var p1: [s1]
  }
  struct s3 {
    var p0: [[s2]]
    var p1: s0
  }
  struct s4 {
    var p0: s3
    var p1: [[s3]]
  }
  struct s5 {
    var p0: s0
    var p1: [Double]
  }
  struct s9 {
    var p0: [s4]
    var p1: s0
  }
  func f9(_ v0: Double, _ v1: s3) -> Double {
    var v6: s3 = v1
    let v4: [[s2]] = v6.p0
    let v2: [s2] = v4[0]
    var v12: [[s2]] = v4
    v12[0] = v2
    let v15: s0 = v6.p1
    v6.p0 = v12
    let v26: [[Double]] = v15.p0
    var v63: [[Double]] = v26
    let v118: [Double] = v63[0]
    v6 = v1
    var v112: [Double] = v118
    let v254: Double = v112[0]
    var v171: Double = v254
    return v171
  }
  @inline(never)
  func f0(_ v0: s5, _ v1: [[s3]], _ v2: [s9], _ v3: Double) -> Double {
    let v4: [s3] = v1[1]
    var v6: Double = v3
    var v12: [s3] = v4
    let v10: s3 = v12[0]
    let v13: Double = f9(v6, v10)
    v12[0] = v10
    v12[0] = v10
    v12[0] = v10
    let v21: [s3] = v1[0]
    v12[0] = v10
    let v83: s3 = v21[0]
    v12[0] = v10
    v12[0] = v83
    let v35: s3 = v12[0]
    let v73: Double = f9(v13, v35)
    return v73
  }
  func benchmark() {
    let v0: s5 = s5(p0: s0(p0: [[0.0]], p1: [[1.0]]), p1: [2.0, 3.0])
    let v1: [[s3]] = [[s3(p0: [[s2(p0: [s1(p0: s0(p0: [[4.0]], p1: [[5.0]])), s1(p0: s0(p0: [[6.0]], p1: [[7.0]]))], p1: [s1(p0: s0(p0: [[8.0]], p1: [[9.0]])), s1(p0: s0(p0: [[10.0]], p1: [[11.0]])), s1(p0: s0(p0: [[12.0]], p1: [[13.0]]))])]], p1: s0(p0: [[14.0]], p1: [[15.0]]))], [s3(p0: [[s2(p0: [s1(p0: s0(p0: [[16.0]], p1: [[17.0]])), s1(p0: s0(p0: [[18.0]], p1: [[19.0]]))], p1: [s1(p0: s0(p0: [[20.0]], p1: [[21.0]])), s1(p0: s0(p0: [[22.0]], p1: [[23.0]])), s1(p0: s0(p0: [[24.0]], p1: [[25.0]]))])]], p1: s0(p0: [[26.0]], p1: [[27.0]]))], [s3(p0: [[s2(p0: [s1(p0: s0(p0: [[28.0]], p1: [[29.0]])), s1(p0: s0(p0: [[30.0]], p1: [[31.0]]))], p1: [s1(p0: s0(p0: [[32.0]], p1: [[33.0]])), s1(p0: s0(p0: [[34.0]], p1: [[35.0]])), s1(p0: s0(p0: [[36.0]], p1: [[37.0]]))])]], p1: s0(p0: [[38.0]], p1: [[39.0]]))]]
    let v2: [s9] = [s9(p0: [s4(p0: s3(p0: [[s2(p0: [s1(p0: s0(p0: [[40.0]], p1: [[41.0]])), s1(p0: s0(p0: [[42.0]], p1: [[43.0]]))], p1: [s1(p0: s0(p0: [[44.0]], p1: [[45.0]])), s1(p0: s0(p0: [[46.0]], p1: [[47.0]])), s1(p0: s0(p0: [[48.0]], p1: [[49.0]]))])]], p1: s0(p0: [[50.0]], p1: [[51.0]])), p1: [[s3(p0: [[s2(p0: [s1(p0: s0(p0: [[52.0]], p1: [[53.0]])), s1(p0: s0(p0: [[54.0]], p1: [[55.0]]))], p1: [s1(p0: s0(p0: [[56.0]], p1: [[57.0]])), s1(p0: s0(p0: [[58.0]], p1: [[59.0]])), s1(p0: s0(p0: [[60.0]], p1: [[61.0]]))])]], p1: s0(p0: [[62.0]], p1: [[63.0]]))], [s3(p0: [[s2(p0: [s1(p0: s0(p0: [[64.0]], p1: [[65.0]])), s1(p0: s0(p0: [[66.0]], p1: [[67.0]]))], p1: [s1(p0: s0(p0: [[68.0]], p1: [[69.0]])), s1(p0: s0(p0: [[70.0]], p1: [[71.0]])), s1(p0: s0(p0: [[72.0]], p1: [[73.0]]))])]], p1: s0(p0: [[74.0]], p1: [[75.0]]))], [s3(p0: [[s2(p0: [s1(p0: s0(p0: [[76.0]], p1: [[77.0]])), s1(p0: s0(p0: [[78.0]], p1: [[79.0]]))], p1: [s1(p0: s0(p0: [[80.0]], p1: [[81.0]])), s1(p0: s0(p0: [[82.0]], p1: [[83.0]])), s1(p0: s0(p0: [[84.0]], p1: [[85.0]]))])]], p1: s0(p0: [[86.0]], p1: [[87.0]]))]])], p1: s0(p0: [[88.0]], p1: [[89.0]])), s9(p0: [s4(p0: s3(p0: [[s2(p0: [s1(p0: s0(p0: [[90.0]], p1: [[91.0]])), s1(p0: s0(p0: [[92.0]], p1: [[93.0]]))], p1: [s1(p0: s0(p0: [[94.0]], p1: [[95.0]])), s1(p0: s0(p0: [[96.0]], p1: [[97.0]])), s1(p0: s0(p0: [[98.0]], p1: [[99.0]]))])]], p1: s0(p0: [[100.0]], p1: [[101.0]])), p1: [[s3(p0: [[s2(p0: [s1(p0: s0(p0: [[102.0]], p1: [[103.0]])), s1(p0: s0(p0: [[104.0]], p1: [[105.0]]))], p1: [s1(p0: s0(p0: [[106.0]], p1: [[107.0]])), s1(p0: s0(p0: [[108.0]], p1: [[109.0]])), s1(p0: s0(p0: [[110.0]], p1: [[111.0]]))])]], p1: s0(p0: [[112.0]], p1: [[113.0]]))], [s3(p0: [[s2(p0: [s1(p0: s0(p0: [[114.0]], p1: [[115.0]])), s1(p0: s0(p0: [[116.0]], p1: [[117.0]]))], p1: [s1(p0: s0(p0: [[118.0]], p1: [[119.0]])), s1(p0: s0(p0: [[120.0]], p1: [[121.0]])), s1(p0: s0(p0: [[122.0]], p1: [[123.0]]))])]], p1: s0(p0: [[124.0]], p1: [[125.0]]))], [s3(p0: [[s2(p0: [s1(p0: s0(p0: [[126.0]], p1: [[127.0]])), s1(p0: s0(p0: [[128.0]], p1: [[129.0]]))], p1: [s1(p0: s0(p0: [[130.0]], p1: [[131.0]])), s1(p0: s0(p0: [[132.0]], p1: [[133.0]])), s1(p0: s0(p0: [[134.0]], p1: [[135.0]]))])]], p1: s0(p0: [[136.0]], p1: [[137.0]]))]])], p1: s0(p0: [[138.0]], p1: [[139.0]])), s9(p0: [s4(p0: s3(p0: [[s2(p0: [s1(p0: s0(p0: [[140.0]], p1: [[141.0]])), s1(p0: s0(p0: [[142.0]], p1: [[143.0]]))], p1: [s1(p0: s0(p0: [[144.0]], p1: [[145.0]])), s1(p0: s0(p0: [[146.0]], p1: [[147.0]])), s1(p0: s0(p0: [[148.0]], p1: [[149.0]]))])]], p1: s0(p0: [[150.0]], p1: [[151.0]])), p1: [[s3(p0: [[s2(p0: [s1(p0: s0(p0: [[152.0]], p1: [[153.0]])), s1(p0: s0(p0: [[154.0]], p1: [[155.0]]))], p1: [s1(p0: s0(p0: [[156.0]], p1: [[157.0]])), s1(p0: s0(p0: [[158.0]], p1: [[159.0]])), s1(p0: s0(p0: [[160.0]], p1: [[161.0]]))])]], p1: s0(p0: [[162.0]], p1: [[163.0]]))], [s3(p0: [[s2(p0: [s1(p0: s0(p0: [[164.0]], p1: [[165.0]])), s1(p0: s0(p0: [[166.0]], p1: [[167.0]]))], p1: [s1(p0: s0(p0: [[168.0]], p1: [[169.0]])), s1(p0: s0(p0: [[170.0]], p1: [[171.0]])), s1(p0: s0(p0: [[172.0]], p1: [[173.0]]))])]], p1: s0(p0: [[174.0]], p1: [[175.0]]))], [s3(p0: [[s2(p0: [s1(p0: s0(p0: [[176.0]], p1: [[177.0]])), s1(p0: s0(p0: [[178.0]], p1: [[179.0]]))], p1: [s1(p0: s0(p0: [[180.0]], p1: [[181.0]])), s1(p0: s0(p0: [[182.0]], p1: [[183.0]])), s1(p0: s0(p0: [[184.0]], p1: [[185.0]]))])]], p1: s0(p0: [[186.0]], p1: [[187.0]]))]])], p1: s0(p0: [[188.0]], p1: [[189.0]]))]
    let v3: Double = 190.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 190.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
