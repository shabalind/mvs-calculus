  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s4 {
    var p0: [s1]
    var p1: [s1]
  } in
  let noinline_f0: ([s4], Float) -> Float = (v0: [s4], v1: Float) -> Float {
    let v7: s4 = v0[0] in
    let v15: [s1] = v7.p0 in
    let v10: s1 = v15[1] in
    var v18: s1 = v10 in
    let v22: s0 = v18.p0 in
    let v32: [[Float]] = v22.p0 in
    let v41: [[Float]] = v22.p0 in
    let v57: [Float] = v41[0] in
    let v78: [Float] = v32[0] in
    let v67: Float = v78[0] in
    let v69: s0 = v10.p0 in
    v18.p0 = v69 in
    let v80: Float = v57[0] in
    let v244: Float = v67 / v80 in
    var v170: Float = v244 in
    v170
  } in
  fun loop(i: Int, v0: [s4], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s4] = [s4([s1(s0([[0.0]], [[1.0]]), [s0([[2.0]], [[3.0]]), s0([[4.0]], [[5.0]]), s0([[6.0]], [[7.0]])]), s1(s0([[8.0]], [[9.0]]), [s0([[10.0]], [[11.0]]), s0([[12.0]], [[13.0]]), s0([[14.0]], [[15.0]])])], [s1(s0([[16.0]], [[17.0]]), [s0([[18.0]], [[19.0]]), s0([[20.0]], [[21.0]]), s0([[22.0]], [[23.0]])]), s1(s0([[24.0]], [[25.0]]), [s0([[26.0]], [[27.0]]), s0([[28.0]], [[29.0]]), s0([[30.0]], [[31.0]])]), s1(s0([[32.0]], [[33.0]]), [s0([[34.0]], [[35.0]]), s0([[36.0]], [[37.0]]), s0([[38.0]], [[39.0]])])])] in
    let v1: Float = 40.0 in
    let initialResult: Float = 40.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()