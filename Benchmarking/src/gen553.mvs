  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  let f33: (s1) -> s1 = (v0: s1) -> s1 {
    var v4: s1 = v0 in
    let v5: [s0] = v4.p1 in
    v4.p1 = v5 in
    var v7: [s0] = v5 in
    let v2: s0 = v7[0] in
    var v12: s1 = v4 in
    let v1: s0 = v7[0] in
    let v3: [s0] = v0.p1 in
    var v11: s1 = v4 in
    v7[0] = v2 in
    var v10: s1 = v4 in
    var v24: s1 = v0 in
    let v14: s0 = v5[0] in
    let v16: [s1] = [v12, v0, v11, v10, v24, v4] in
    v7[0] = v14 in
    var v13: [s1] = v16 in
    v10.p0 = v7 in
    v7[0] = v14 in
    v13[3] = v12 in
    let v18: [s0] = v4.p1 in
    let v31: s0 = v3[0] in
    var v36: [s0] = v18 in
    var v33: s0 = v31 in
    v11.p0 = v7 in
    v11.p1 = v36 in
    v12.p1 = v7 in
    var v46: [s1] = v13 in
    let v78: s1 = v46[3] in
    let v40: [[Float]] = v1.p1 in
    v13[3] = v0 in
    var v60: s1 = v78 in
    v4.p0 = v7 in
    let v50: [s0] = v4.p1 in
    v11 = v10 in
    v33.p1 = v40 in
    v4.p0 = v50 in
    v36[0] = v33 in
    v4.p0 = v7 in
    v60
  } in
  let f5: (Float) -> Float = (v0: Float) -> Float {
    var v3: Float = v0 in
    let v2: [Float] = [v3] in
    var v7: Float = v3 in
    var v6: Float = v0 in
    var v5: Float = v3 in
    var v4: Float = v7 in
    v5 = v3 in
    let v10: Float = v2[0] in
    var v8: [Float] = v2 in
    var v14: [Float] = v8 in
    let v16: Float = v4 + v5 in
    var v9: [Float] = v14 in
    v5 = v4 in
    let v13: Float = v9[0] in
    v7 = v6 in
    var v25: Float = v3 in
    let v32: Float = v14[0] in
    let v17: Float = v14[0] in
    let v18: Float = v14[0] in
    var v27: Float = v25 in
    let v28: Float = v8[0] in
    var v19: [Float] = v8 in
    v9[0] = v16 in
    v27 = v18 in
    v14[0] = v17 in
    let v21: Float = v19[0] in
    v19[0] = v18 in
    let v20: Float = v8[0] in
    var v55: Float = v27 in
    v14[0] = v6 in
    v19[0] = v32 in
    let v38: Float = v19[0] in
    var v34: Float = v21 in
    v8[0] = v55 in
    v8[0] = v13 in
    v8[0] = v10 in
    v3 = v38 in
    let v46: [Float] = [v28, v13, v38, v20, v16, v25] in
    v19[0] = v34 in
    var v73: [Float] = v46 in
    v73[3] = v25 in
    v9[0] = v25 in
    v34 = v13 in
    let v43: Float = v73[2] in
    v43
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    let v3: s1 = f33(v0) in
    let v5: [s0] = v3.p1 in
    let v4: s0 = v5[0] in
    let v14: [[Float]] = v4.p1 in
    let v36: [Float] = v14[0] in
    let v34: Float = v36[0] in
    let v35: Float = f5(v34) in
    v35
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([s0([[0.0], [1.0], [2.0]], [[3.0]])], [s0([[4.0], [5.0], [6.0]], [[7.0]])]) in
    let v1: Float = 8.0 in
    let initialResult: Float = 8.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()