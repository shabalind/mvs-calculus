  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
    var p3: [[Float]]
    var p4: [[Float]]
    var p5: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  let noinline_f0: ([[s1]], Float) -> Float = (v0: [[s1]], v1: Float) -> Float {
    let v5: [s1] = v0[0] in
    let v6: s1 = v5[0] in
    let v10: s0 = v6.p1 in
    let v11: s1 = v5[0] in
    let v9: s0 = v11.p0 in
    let v20: [[Float]] = v10.p3 in
    let v15: [Float] = v20[1] in
    let v31: [[Float]] = v9.p5 in
    var v36: [[Float]] = v31 in
    v36[0] = v15 in
    let v41: [Float] = v36[0] in
    v36[0] = v15 in
    let v134: Float = v41[0] in
    v134
  } in
  fun loop(i: Int, v0: [[s1]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s1]] = [[s1(s0([[0.0], [1.0]], [[2.0]], [[3.0], [4.0], [5.0]], [[6.0], [7.0], [8.0]], [[9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0]], [[14.0]], [[15.0], [16.0], [17.0]], [[18.0], [19.0], [20.0]], [[21.0], [22.0]], [[23.0]]))]] in
    let v1: Float = 24.0 in
    let initialResult: Float = 24.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()