  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s2 {
    var p0: s0
    var p1: s0
  } in
  struct s5 {
    var p0: s2
  } in
  let f31: (s5) -> s5 = (v0: s5) -> s5 {
    let v3: s2 = v0.p0 in
    let v7: s5 = s5(v3) in
    let v14: s2 = v7.p0 in
    let v21: [s2] = [v3, v3, v14, v3] in
    let v26: s2 = v21[0] in
    var v36: s5 = v0 in
    let v24: s2 = v21[2] in
    v36.p0 = v26 in
    v36.p0 = v24 in
    var v107: s5 = v36 in
    v107
  } in
  let noinline_f0: ([s5], Float) -> Float = (v0: [s5], v1: Float) -> Float {
    let v9: s5 = v0[2] in
    let v8: s5 = v0[2] in
    let v16: s2 = v9.p0 in
    let v11: s5 = f31(v8) in
    let v10: s2 = v11.p0 in
    let v32: s2 = v9.p0 in
    var v45: s2 = v16 in
    v45 = v10 in
    let v52: s0 = v32.p0 in
    let v31: s0 = v45.p1 in
    let v79: [[Float]] = v31.p0 in
    var v74: s0 = v52 in
    var v87: [[Float]] = v79 in
    let v47: [[Float]] = v74.p0 in
    let v118: [Float] = v87[2] in
    let v66: [Float] = v47[2] in
    v87[0] = v66 in
    var v78: [[Float]] = v47 in
    let v129: [Float] = v79[2] in
    v78[2] = v129 in
    let v132: Float = v118[0] in
    let v134: [Float] = v78[0] in
    v87[2] = v134 in
    v132
  } in
  fun loop(i: Int, v0: [s5], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s5] = [s5(s2(s0([[0.0], [1.0], [2.0]], [[3.0]]), s0([[4.0], [5.0], [6.0]], [[7.0]]))), s5(s2(s0([[8.0], [9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0], [14.0]], [[15.0]]))), s5(s2(s0([[16.0], [17.0], [18.0]], [[19.0]]), s0([[20.0], [21.0], [22.0]], [[23.0]])))] in
    let v1: Float = 24.0 in
    let initialResult: Float = 24.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()