  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
    var p2: s0
    var p3: s0
    var p4: s0
    var p5: s0
    var p6: s0
  } in
  struct s2 {
    var p0: [s1]
    var p1: [s0]
  } in
  struct s4 {
    var p0: s0
    var p1: s0
    var p2: s0
  } in
  struct s6 {
    var p0: [s1]
    var p1: s2
  } in
  let f85: (s4) -> s4 = (v0: s4) -> s4 {
    let v19: s0 = v0.p0 in
    var v33: s4 = v0 in
    v33.p2 = v19 in
    v33
  } in
  let f82: (s2) -> s2 = (v0: s2) -> s2 {
    let v7: [s2] = [v0, v0, v0, v0, v0, v0] in
    var v3: [s2] = v7 in
    let v8: s2 = v3[5] in
    v8
  } in
  let f79: (s2, [s1]) -> s2 = (v0: s2, v1: [s1]) -> s2 {
    let v7: s2 = f82(v0) in
    let v11: s2 = f82(v7) in
    let v13: s2 = f82(v11) in
    let v33: s2 = f82(v13) in
    var v93: s2 = v33 in
    var v171: s2 = v93 in
    v171
  } in
  let f68: ([s1]) -> [s1] = (v0: [s1]) -> [s1] {
    var v6: [s1] = v0 in
    let v8: [[s1]] = [v0, v6, v6, v0, v0, v0] in
    let v5: [s1] = v8[2] in
    v5
  } in
  let f67: (s6) -> s6 = (v0: s6) -> s6 {
    var v2: s6 = v0 in
    var v8: s6 = v2 in
    var v3: s6 = v8 in
    var v7: s6 = v3 in
    let v5: [s1] = v7.p0 in
    let v11: s2 = v0.p1 in
    let v9: [s1] = v11.p0 in
    var v4: [s1] = v5 in
    let v17: [s1] = v11.p0 in
    var v6: s2 = v11 in
    let v13: s2 = f82(v11) in
    v7.p1 = v13 in
    let v15: s1 = v9[1] in
    let v16: s2 = f82(v11) in
    v3.p1 = v16 in
    let v20: s2 = f82(v16) in
    let v25: [s1] = v6.p0 in
    v2.p1 = v11 in
    let v33: [s0] = v20.p1 in
    let v34: s1 = v17[1] in
    v3.p0 = v17 in
    v2.p0 = v25 in
    v6.p1 = v33 in
    v6.p0 = v4 in
    v4[0] = v34 in
    v7.p1 = v16 in
    v4[1] = v15 in
    v8.p1 = v6 in
    v7
  } in
  let f52: ([s6]) -> [s6] = (v0: [s6]) -> [s6] {
    var v6: [s6] = v0 in
    let v3: s6 = v0[2] in
    var v4: s6 = v3 in
    v6 = v0 in
    let v2: [[s6]] = [v6, v6, v0, v0] in
    let v7: s6 = f67(v4) in
    let v1: s2 = v3.p1 in
    var v10: s2 = v1 in
    v4 = v3 in
    let v8: [s1] = v10.p0 in
    let v13: [s1] = f68(v8) in
    v6[0] = v4 in
    v10.p0 = v8 in
    v6[2] = v7 in
    v4.p0 = v13 in
    v6[2] = v3 in
    var v9: [s6] = v0 in
    let v43: s6 = v9[0] in
    v9[1] = v7 in
    v6[2] = v43 in
    let v48: [s6] = v2[0] in
    var v63: [s6] = v48 in
    v9 = v48 in
    v63
  } in
  let f49: (s4) -> s4 = (v0: s4) -> s4 {
    let v7: s4 = f85(v0) in
    let v6: s4 = f85(v7) in
    var v1: s4 = v0 in
    let v5: s0 = v0.p0 in
    v1.p0 = v5 in
    v1.p2 = v5 in
    var v9: s4 = v1 in
    var v13: s4 = v1 in
    let v35: s4 = f85(v7) in
    let v20: s4 = f85(v9) in
    let v21: s4 = f85(v35) in
    let v27: [s4] = [v13, v35, v6, v21, v7, v20, v20] in
    let v73: s4 = v27[1] in
    v73
  } in
  let f48: (s4) -> s4 = (v0: s4) -> s4 {
    var v2: s4 = v0 in
    var v3: s4 = v2 in
    let v1: s4 = f85(v3) in
    let v9: s0 = v0.p0 in
    var v5: s4 = v2 in
    let v16: s4 = f49(v5) in
    v2.p2 = v9 in
    v2 = v16 in
    var v13: s4 = v2 in
    let v8: s0 = v13.p0 in
    let v14: s4 = f49(v5) in
    v13.p2 = v8 in
    var v18: s4 = v0 in
    var v36: s4 = v14 in
    v18.p1 = v8 in
    v36.p0 = v9 in
    let v40: s0 = v18.p2 in
    v5.p2 = v40 in
    v2 = v1 in
    v36 = v2 in
    v36 = v18 in
    v36
  } in
  let f42: (s2) -> s2 = (v0: s2) -> s2 {
    let v3: s2 = f82(v0) in
    let v2: [s2] = [v3, v3, v0, v0, v3, v0, v0] in
    let v8: [s1] = v0.p0 in
    var v7: [s1] = v8 in
    let v10: s1 = v8[1] in
    var v24: [s1] = v7 in
    let v20: s1 = v24[1] in
    let v14: s2 = v2[5] in
    let v16: s1 = v8[1] in
    let v37: [s1] = v14.p0 in
    var v30: s1 = v16 in
    var v59: [s1] = v37 in
    v7[0] = v30 in
    var v49: [s1] = v59 in
    let v139: s0 = v20.p6 in
    v59[0] = v10 in
    v30.p0 = v139 in
    let v117: s6 = s6(v49, v14) in
    v49 = v24 in
    var v245: s6 = v117 in
    v245.p0 = v59 in
    let v253: s2 = v245.p1 in
    v245.p1 = v14 in
    v253
  } in
  let f34: (s6, s2) -> s2 = (v0: s6, v1: s2) -> s2 {
    let v5: [s2] = [v1, v1, v1, v1, v1, v1, v1] in
    let v7: s2 = v0.p1 in
    var v9: s6 = v0 in
    let v6: s2 = v9.p1 in
    let v4: [s1] = v9.p0 in
    let v21: s2 = f79(v6, v4) in
    var v17: [s2] = v5 in
    let v25: s2 = f79(v21, v4) in
    let v20: s2 = f42(v25) in
    v9.p0 = v4 in
    let v16: s2 = v17[6] in
    v17[5] = v16 in
    v17[5] = v20 in
    v17[4] = v7 in
    let v41: s2 = v17[5] in
    v41
  } in
  let f32: (s1, s2) -> s1 = (v0: s1, v1: s2) -> s1 {
    let v2: [s2] = [v1, v1, v1, v1, v1, v1] in
    let v5: s2 = v2[3] in
    let v31: s2 = f82(v5) in
    let v73: [s1] = v31.p0 in
    let v52: s1 = v73[0] in
    v52
  } in
  let f30: (s6) -> s6 = (v0: s6) -> s6 {
    let v1: [s1] = v0.p0 in
    let v7: s2 = v0.p1 in
    let v8: s1 = v1[1] in
    let v6: s1 = f32(v8, v7) in
    let v9: [s1] = f68(v1) in
    let v15: s2 = f82(v7) in
    var v27: [s1] = v9 in
    let v59: s2 = f34(v0, v15) in
    v27[0] = v6 in
    let v58: s6 = s6(v27, v59) in
    let v110: s6 = f67(v58) in
    v110
  } in
  let f21: (s1) -> s1 = (v0: s1) -> s1 {
    var v2: s1 = v0 in
    let v1: s0 = v0.p0 in
    let v4: s0 = v0.p1 in
    let v6: [[Float]] = v4.p0 in
    let v3: s0 = v0.p0 in
    v2.p0 = v4 in
    v2.p4 = v1 in
    let v10: s0 = v2.p4 in
    let v14: s0 = v2.p1 in
    v2.p0 = v4 in
    let v9: s4 = s4(v3, v3, v1) in
    let v12: s4 = f48(v9) in
    let v21: s0 = v9.p1 in
    v2.p3 = v10 in
    let v20: s0 = v0.p2 in
    let v29: s4 = f85(v12) in
    v2.p4 = v14 in
    var v16: s0 = v20 in
    let v35: s1 = s1(v20, v10, v1, v16, v20, v20, v3) in
    v2.p3 = v21 in
    let v69: s4 = f85(v29) in
    let v75: s0 = v69.p0 in
    v2.p5 = v75 in
    v16.p0 = v6 in
    v2 = v35 in
    v35
  } in
  let f7: (Float, s1) -> Float = (v0: Float, v1: s1) -> Float {
    let v6: s1 = f21(v1) in
    var v2: Float = v0 in
    var v12: Float = v2 in
    var v3: Float = v2 in
    let v8: s0 = v6.p6 in
    var v13: s0 = v8 in
    let v20: [[Float]] = v8.p1 in
    let v17: [Float] = v20[0] in
    var v15: [Float] = v17 in
    var v14: s0 = v13 in
    let v10: [[Float]] = v13.p0 in
    v14.p0 = v10 in
    v15[0] = v12 in
    v13.p0 = v10 in
    v13 = v14 in
    let v42: [Float] = v10[2] in
    v14.p0 = v10 in
    let v23: Float = v15[0] in
    v14.p1 = v20 in
    let v41: [[Float]] = [v42, v42, v15, v17, v15] in
    let v40: s0 = v6.p5 in
    let v31: [[Float]] = v40.p0 in
    v15[0] = v23 in
    v14.p0 = v31 in
    v15[0] = v0 in
    var v71: [[Float]] = v41 in
    var v82: [[Float]] = v71 in
    let v115: [Float] = v82[3] in
    v15[0] = v3 in
    let v364: Float = v115[0] in
    v364
  } in
  let noinline_f0: ([s6], Float) -> Float = (v0: [s6], v1: Float) -> Float {
    let v2: [s6] = f52(v0) in
    let v6: s6 = v0[0] in
    let v8: s6 = v2[0] in
    var v5: s6 = v8 in
    let v17: [s1] = v5.p0 in
    let v12: s1 = v17[1] in
    v5.p0 = v17 in
    let v9: [s1] = f68(v17) in
    v5.p0 = v9 in
    var v13: [s1] = v9 in
    let v15: [s1] = v6.p0 in
    let v14: s1 = v9[0] in
    v5.p0 = v13 in
    let v19: [s1] = f68(v9) in
    let v24: [s1] = v8.p0 in
    v5.p0 = v19 in
    let v28: s1 = v13[0] in
    let v21: s6 = v2[2] in
    let v23: Float = f7(v1, v28) in
    let v46: s1 = v24[0] in
    v5.p0 = v24 in
    let v22: s6 = f30(v21) in
    v5.p0 = v17 in
    let v86: s1 = v19[1] in
    var v65: Float = v23 in
    v13[1] = v12 in
    let v53: s2 = v22.p1 in
    let v132: Float = f7(v65, v46) in
    var v56: Float = v132 in
    v5.p0 = v15 in
    var v62: [s1] = v9 in
    v56 = v65 in
    var v141: [s1] = v62 in
    let v118: s1 = f32(v14, v53) in
    v5.p0 = v141 in
    v141[0] = v86 in
    var v128: Float = v56 in
    v5.p0 = v141 in
    v62[0] = v86 in
    v141[1] = v118 in
    v128
  } in
  fun loop(i: Int, v0: [s6], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s6] = [s6([s1(s0([[0.0], [1.0], [2.0]], [[3.0]]), s0([[4.0], [5.0], [6.0]], [[7.0]]), s0([[8.0], [9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0], [14.0]], [[15.0]]), s0([[16.0], [17.0], [18.0]], [[19.0]]), s0([[20.0], [21.0], [22.0]], [[23.0]]), s0([[24.0], [25.0], [26.0]], [[27.0]])), s1(s0([[28.0], [29.0], [30.0]], [[31.0]]), s0([[32.0], [33.0], [34.0]], [[35.0]]), s0([[36.0], [37.0], [38.0]], [[39.0]]), s0([[40.0], [41.0], [42.0]], [[43.0]]), s0([[44.0], [45.0], [46.0]], [[47.0]]), s0([[48.0], [49.0], [50.0]], [[51.0]]), s0([[52.0], [53.0], [54.0]], [[55.0]]))], s2([s1(s0([[56.0], [57.0], [58.0]], [[59.0]]), s0([[60.0], [61.0], [62.0]], [[63.0]]), s0([[64.0], [65.0], [66.0]], [[67.0]]), s0([[68.0], [69.0], [70.0]], [[71.0]]), s0([[72.0], [73.0], [74.0]], [[75.0]]), s0([[76.0], [77.0], [78.0]], [[79.0]]), s0([[80.0], [81.0], [82.0]], [[83.0]])), s1(s0([[84.0], [85.0], [86.0]], [[87.0]]), s0([[88.0], [89.0], [90.0]], [[91.0]]), s0([[92.0], [93.0], [94.0]], [[95.0]]), s0([[96.0], [97.0], [98.0]], [[99.0]]), s0([[100.0], [101.0], [102.0]], [[103.0]]), s0([[104.0], [105.0], [106.0]], [[107.0]]), s0([[108.0], [109.0], [110.0]], [[111.0]]))], [s0([[112.0], [113.0], [114.0]], [[115.0]]), s0([[116.0], [117.0], [118.0]], [[119.0]]), s0([[120.0], [121.0], [122.0]], [[123.0]])])), s6([s1(s0([[124.0], [125.0], [126.0]], [[127.0]]), s0([[128.0], [129.0], [130.0]], [[131.0]]), s0([[132.0], [133.0], [134.0]], [[135.0]]), s0([[136.0], [137.0], [138.0]], [[139.0]]), s0([[140.0], [141.0], [142.0]], [[143.0]]), s0([[144.0], [145.0], [146.0]], [[147.0]]), s0([[148.0], [149.0], [150.0]], [[151.0]])), s1(s0([[152.0], [153.0], [154.0]], [[155.0]]), s0([[156.0], [157.0], [158.0]], [[159.0]]), s0([[160.0], [161.0], [162.0]], [[163.0]]), s0([[164.0], [165.0], [166.0]], [[167.0]]), s0([[168.0], [169.0], [170.0]], [[171.0]]), s0([[172.0], [173.0], [174.0]], [[175.0]]), s0([[176.0], [177.0], [178.0]], [[179.0]]))], s2([s1(s0([[180.0], [181.0], [182.0]], [[183.0]]), s0([[184.0], [185.0], [186.0]], [[187.0]]), s0([[188.0], [189.0], [190.0]], [[191.0]]), s0([[192.0], [193.0], [194.0]], [[195.0]]), s0([[196.0], [197.0], [198.0]], [[199.0]]), s0([[200.0], [201.0], [202.0]], [[203.0]]), s0([[204.0], [205.0], [206.0]], [[207.0]])), s1(s0([[208.0], [209.0], [210.0]], [[211.0]]), s0([[212.0], [213.0], [214.0]], [[215.0]]), s0([[216.0], [217.0], [218.0]], [[219.0]]), s0([[220.0], [221.0], [222.0]], [[223.0]]), s0([[224.0], [225.0], [226.0]], [[227.0]]), s0([[228.0], [229.0], [230.0]], [[231.0]]), s0([[232.0], [233.0], [234.0]], [[235.0]]))], [s0([[236.0], [237.0], [238.0]], [[239.0]]), s0([[240.0], [241.0], [242.0]], [[243.0]]), s0([[244.0], [245.0], [246.0]], [[247.0]])])), s6([s1(s0([[248.0], [249.0], [250.0]], [[251.0]]), s0([[252.0], [253.0], [254.0]], [[255.0]]), s0([[256.0], [257.0], [258.0]], [[259.0]]), s0([[260.0], [261.0], [262.0]], [[263.0]]), s0([[264.0], [265.0], [266.0]], [[267.0]]), s0([[268.0], [269.0], [270.0]], [[271.0]]), s0([[272.0], [273.0], [274.0]], [[275.0]])), s1(s0([[276.0], [277.0], [278.0]], [[279.0]]), s0([[280.0], [281.0], [282.0]], [[283.0]]), s0([[284.0], [285.0], [286.0]], [[287.0]]), s0([[288.0], [289.0], [290.0]], [[291.0]]), s0([[292.0], [293.0], [294.0]], [[295.0]]), s0([[296.0], [297.0], [298.0]], [[299.0]]), s0([[300.0], [301.0], [302.0]], [[303.0]]))], s2([s1(s0([[304.0], [305.0], [306.0]], [[307.0]]), s0([[308.0], [309.0], [310.0]], [[311.0]]), s0([[312.0], [313.0], [314.0]], [[315.0]]), s0([[316.0], [317.0], [318.0]], [[319.0]]), s0([[320.0], [321.0], [322.0]], [[323.0]]), s0([[324.0], [325.0], [326.0]], [[327.0]]), s0([[328.0], [329.0], [330.0]], [[331.0]])), s1(s0([[332.0], [333.0], [334.0]], [[335.0]]), s0([[336.0], [337.0], [338.0]], [[339.0]]), s0([[340.0], [341.0], [342.0]], [[343.0]]), s0([[344.0], [345.0], [346.0]], [[347.0]]), s0([[348.0], [349.0], [350.0]], [[351.0]]), s0([[352.0], [353.0], [354.0]], [[355.0]]), s0([[356.0], [357.0], [358.0]], [[359.0]]))], [s0([[360.0], [361.0], [362.0]], [[363.0]]), s0([[364.0], [365.0], [366.0]], [[367.0]]), s0([[368.0], [369.0], [370.0]], [[371.0]])]))] in
    let v1: Float = 372.0 in
    let initialResult: Float = 372.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()