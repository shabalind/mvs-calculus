  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
    var p2: s0
  } in
  struct s3 {
    var p0: s0
    var p1: s0
    var p2: s1
    var p3: s0
  } in
  let f50: (Float) -> Float = (v0: Float) -> Float {
    var v6: Float = v0 in
    var v3: Float = v0 in
    var v2: Float = v6 in
    v3 = v0 in
    var v1: Float = v3 in
    var v11: Float = v1 in
    let v23: [Float] = [v0, v0, v11] in
    let v21: [[Float]] = [v23, v23, v23, v23] in
    var v80: [[Float]] = v21 in
    v80[1] = v23 in
    let v60: [Float] = v80[2] in
    var v39: [Float] = v60 in
    v39[0] = v2 in
    let v37: Float = v39[2] in
    v37
  } in
  let noinline_f0: (s3, Float) -> Float = (v0: s3, v1: Float) -> Float {
    let v3: Float = f50(v1) in
    let v21: Float = v1 + v3 in
    let v47: [Float] = [v1, v3, v3, v21, v1] in
    let v59: Float = v47[4] in
    v59
  } in
  fun loop(i: Int, v0: s3, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(s0([[0.0]], [[1.0]]), s0([[2.0]], [[3.0]]), s1([s0([[4.0]], [[5.0]]), s0([[6.0]], [[7.0]]), s0([[8.0]], [[9.0]])], s0([[10.0]], [[11.0]]), s0([[12.0]], [[13.0]])), s0([[14.0]], [[15.0]])) in
    let v1: Float = 16.0 in
    let initialResult: Float = 16.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()