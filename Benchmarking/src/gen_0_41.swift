  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: [[s1]]
    var p1: Double
  }
  struct s3 {
    var p0: s2
    var p1: [s0]
  }
  struct s4 {
    var p0: [[s2]]
    var p1: s0
  }
  struct s6 {
    var p0: s1
    var p1: [[s0]]
  }
  struct s7 {
    var p0: [s3]
    var p1: [s4]
  }
  struct s11 {
    var p0: [s4]
    var p1: s1
  }
  struct s12 {
    var p0: s6
    var p1: s6
  }
  @inline(never)
  func f0(_ v0: [s12], _ v1: [s7], _ v2: s7, _ v3: [[s11]], _ v4: Double) -> Double {
    let v16: [s4] = v2.p1
    let v17: s4 = v16[1]
    let v12: [[s2]] = v17.p0
    let v26: [s2] = v12[0]
    let v21: [s2] = v12[0]
    var v50: [[s2]] = v12
    let v88: [s2] = v50[0]
    v50[0] = v26
    v50[0] = v88
    v50[0] = v21
    let v176: s2 = v88[0]
    let v180: Double = v176.p1
    return v180
  }
  func benchmark() {
    let v0: [s12] = [s12(p0: s6(p0: s1(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0]]), p1: [s0(p0: [[4.0], [5.0]], p1: [[6.0], [7.0]]), s0(p0: [[8.0], [9.0]], p1: [[10.0], [11.0]]), s0(p0: [[12.0], [13.0]], p1: [[14.0], [15.0]])]), p1: [[s0(p0: [[16.0], [17.0]], p1: [[18.0], [19.0]])], [s0(p0: [[20.0], [21.0]], p1: [[22.0], [23.0]])], [s0(p0: [[24.0], [25.0]], p1: [[26.0], [27.0]])]]), p1: s6(p0: s1(p0: s0(p0: [[28.0], [29.0]], p1: [[30.0], [31.0]]), p1: [s0(p0: [[32.0], [33.0]], p1: [[34.0], [35.0]]), s0(p0: [[36.0], [37.0]], p1: [[38.0], [39.0]]), s0(p0: [[40.0], [41.0]], p1: [[42.0], [43.0]])]), p1: [[s0(p0: [[44.0], [45.0]], p1: [[46.0], [47.0]])], [s0(p0: [[48.0], [49.0]], p1: [[50.0], [51.0]])], [s0(p0: [[52.0], [53.0]], p1: [[54.0], [55.0]])]])), s12(p0: s6(p0: s1(p0: s0(p0: [[56.0], [57.0]], p1: [[58.0], [59.0]]), p1: [s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0]]), s0(p0: [[64.0], [65.0]], p1: [[66.0], [67.0]]), s0(p0: [[68.0], [69.0]], p1: [[70.0], [71.0]])]), p1: [[s0(p0: [[72.0], [73.0]], p1: [[74.0], [75.0]])], [s0(p0: [[76.0], [77.0]], p1: [[78.0], [79.0]])], [s0(p0: [[80.0], [81.0]], p1: [[82.0], [83.0]])]]), p1: s6(p0: s1(p0: s0(p0: [[84.0], [85.0]], p1: [[86.0], [87.0]]), p1: [s0(p0: [[88.0], [89.0]], p1: [[90.0], [91.0]]), s0(p0: [[92.0], [93.0]], p1: [[94.0], [95.0]]), s0(p0: [[96.0], [97.0]], p1: [[98.0], [99.0]])]), p1: [[s0(p0: [[100.0], [101.0]], p1: [[102.0], [103.0]])], [s0(p0: [[104.0], [105.0]], p1: [[106.0], [107.0]])], [s0(p0: [[108.0], [109.0]], p1: [[110.0], [111.0]])]])), s12(p0: s6(p0: s1(p0: s0(p0: [[112.0], [113.0]], p1: [[114.0], [115.0]]), p1: [s0(p0: [[116.0], [117.0]], p1: [[118.0], [119.0]]), s0(p0: [[120.0], [121.0]], p1: [[122.0], [123.0]]), s0(p0: [[124.0], [125.0]], p1: [[126.0], [127.0]])]), p1: [[s0(p0: [[128.0], [129.0]], p1: [[130.0], [131.0]])], [s0(p0: [[132.0], [133.0]], p1: [[134.0], [135.0]])], [s0(p0: [[136.0], [137.0]], p1: [[138.0], [139.0]])]]), p1: s6(p0: s1(p0: s0(p0: [[140.0], [141.0]], p1: [[142.0], [143.0]]), p1: [s0(p0: [[144.0], [145.0]], p1: [[146.0], [147.0]]), s0(p0: [[148.0], [149.0]], p1: [[150.0], [151.0]]), s0(p0: [[152.0], [153.0]], p1: [[154.0], [155.0]])]), p1: [[s0(p0: [[156.0], [157.0]], p1: [[158.0], [159.0]])], [s0(p0: [[160.0], [161.0]], p1: [[162.0], [163.0]])], [s0(p0: [[164.0], [165.0]], p1: [[166.0], [167.0]])]]))]
    let v1: [s7] = [s7(p0: [s3(p0: s2(p0: [[s1(p0: s0(p0: [[168.0], [169.0]], p1: [[170.0], [171.0]]), p1: [s0(p0: [[172.0], [173.0]], p1: [[174.0], [175.0]]), s0(p0: [[176.0], [177.0]], p1: [[178.0], [179.0]]), s0(p0: [[180.0], [181.0]], p1: [[182.0], [183.0]])])], [s1(p0: s0(p0: [[184.0], [185.0]], p1: [[186.0], [187.0]]), p1: [s0(p0: [[188.0], [189.0]], p1: [[190.0], [191.0]]), s0(p0: [[192.0], [193.0]], p1: [[194.0], [195.0]]), s0(p0: [[196.0], [197.0]], p1: [[198.0], [199.0]])])]], p1: 200.0), p1: [s0(p0: [[201.0], [202.0]], p1: [[203.0], [204.0]]), s0(p0: [[205.0], [206.0]], p1: [[207.0], [208.0]])])], p1: [s4(p0: [[s2(p0: [[s1(p0: s0(p0: [[209.0], [210.0]], p1: [[211.0], [212.0]]), p1: [s0(p0: [[213.0], [214.0]], p1: [[215.0], [216.0]]), s0(p0: [[217.0], [218.0]], p1: [[219.0], [220.0]]), s0(p0: [[221.0], [222.0]], p1: [[223.0], [224.0]])])], [s1(p0: s0(p0: [[225.0], [226.0]], p1: [[227.0], [228.0]]), p1: [s0(p0: [[229.0], [230.0]], p1: [[231.0], [232.0]]), s0(p0: [[233.0], [234.0]], p1: [[235.0], [236.0]]), s0(p0: [[237.0], [238.0]], p1: [[239.0], [240.0]])])]], p1: 241.0)]], p1: s0(p0: [[242.0], [243.0]], p1: [[244.0], [245.0]])), s4(p0: [[s2(p0: [[s1(p0: s0(p0: [[246.0], [247.0]], p1: [[248.0], [249.0]]), p1: [s0(p0: [[250.0], [251.0]], p1: [[252.0], [253.0]]), s0(p0: [[254.0], [255.0]], p1: [[256.0], [257.0]]), s0(p0: [[258.0], [259.0]], p1: [[260.0], [261.0]])])], [s1(p0: s0(p0: [[262.0], [263.0]], p1: [[264.0], [265.0]]), p1: [s0(p0: [[266.0], [267.0]], p1: [[268.0], [269.0]]), s0(p0: [[270.0], [271.0]], p1: [[272.0], [273.0]]), s0(p0: [[274.0], [275.0]], p1: [[276.0], [277.0]])])]], p1: 278.0)]], p1: s0(p0: [[279.0], [280.0]], p1: [[281.0], [282.0]]))]), s7(p0: [s3(p0: s2(p0: [[s1(p0: s0(p0: [[283.0], [284.0]], p1: [[285.0], [286.0]]), p1: [s0(p0: [[287.0], [288.0]], p1: [[289.0], [290.0]]), s0(p0: [[291.0], [292.0]], p1: [[293.0], [294.0]]), s0(p0: [[295.0], [296.0]], p1: [[297.0], [298.0]])])], [s1(p0: s0(p0: [[299.0], [300.0]], p1: [[301.0], [302.0]]), p1: [s0(p0: [[303.0], [304.0]], p1: [[305.0], [306.0]]), s0(p0: [[307.0], [308.0]], p1: [[309.0], [310.0]]), s0(p0: [[311.0], [312.0]], p1: [[313.0], [314.0]])])]], p1: 315.0), p1: [s0(p0: [[316.0], [317.0]], p1: [[318.0], [319.0]]), s0(p0: [[320.0], [321.0]], p1: [[322.0], [323.0]])])], p1: [s4(p0: [[s2(p0: [[s1(p0: s0(p0: [[324.0], [325.0]], p1: [[326.0], [327.0]]), p1: [s0(p0: [[328.0], [329.0]], p1: [[330.0], [331.0]]), s0(p0: [[332.0], [333.0]], p1: [[334.0], [335.0]]), s0(p0: [[336.0], [337.0]], p1: [[338.0], [339.0]])])], [s1(p0: s0(p0: [[340.0], [341.0]], p1: [[342.0], [343.0]]), p1: [s0(p0: [[344.0], [345.0]], p1: [[346.0], [347.0]]), s0(p0: [[348.0], [349.0]], p1: [[350.0], [351.0]]), s0(p0: [[352.0], [353.0]], p1: [[354.0], [355.0]])])]], p1: 356.0)]], p1: s0(p0: [[357.0], [358.0]], p1: [[359.0], [360.0]])), s4(p0: [[s2(p0: [[s1(p0: s0(p0: [[361.0], [362.0]], p1: [[363.0], [364.0]]), p1: [s0(p0: [[365.0], [366.0]], p1: [[367.0], [368.0]]), s0(p0: [[369.0], [370.0]], p1: [[371.0], [372.0]]), s0(p0: [[373.0], [374.0]], p1: [[375.0], [376.0]])])], [s1(p0: s0(p0: [[377.0], [378.0]], p1: [[379.0], [380.0]]), p1: [s0(p0: [[381.0], [382.0]], p1: [[383.0], [384.0]]), s0(p0: [[385.0], [386.0]], p1: [[387.0], [388.0]]), s0(p0: [[389.0], [390.0]], p1: [[391.0], [392.0]])])]], p1: 393.0)]], p1: s0(p0: [[394.0], [395.0]], p1: [[396.0], [397.0]]))]), s7(p0: [s3(p0: s2(p0: [[s1(p0: s0(p0: [[398.0], [399.0]], p1: [[400.0], [401.0]]), p1: [s0(p0: [[402.0], [403.0]], p1: [[404.0], [405.0]]), s0(p0: [[406.0], [407.0]], p1: [[408.0], [409.0]]), s0(p0: [[410.0], [411.0]], p1: [[412.0], [413.0]])])], [s1(p0: s0(p0: [[414.0], [415.0]], p1: [[416.0], [417.0]]), p1: [s0(p0: [[418.0], [419.0]], p1: [[420.0], [421.0]]), s0(p0: [[422.0], [423.0]], p1: [[424.0], [425.0]]), s0(p0: [[426.0], [427.0]], p1: [[428.0], [429.0]])])]], p1: 430.0), p1: [s0(p0: [[431.0], [432.0]], p1: [[433.0], [434.0]]), s0(p0: [[435.0], [436.0]], p1: [[437.0], [438.0]])])], p1: [s4(p0: [[s2(p0: [[s1(p0: s0(p0: [[439.0], [440.0]], p1: [[441.0], [442.0]]), p1: [s0(p0: [[443.0], [444.0]], p1: [[445.0], [446.0]]), s0(p0: [[447.0], [448.0]], p1: [[449.0], [450.0]]), s0(p0: [[451.0], [452.0]], p1: [[453.0], [454.0]])])], [s1(p0: s0(p0: [[455.0], [456.0]], p1: [[457.0], [458.0]]), p1: [s0(p0: [[459.0], [460.0]], p1: [[461.0], [462.0]]), s0(p0: [[463.0], [464.0]], p1: [[465.0], [466.0]]), s0(p0: [[467.0], [468.0]], p1: [[469.0], [470.0]])])]], p1: 471.0)]], p1: s0(p0: [[472.0], [473.0]], p1: [[474.0], [475.0]])), s4(p0: [[s2(p0: [[s1(p0: s0(p0: [[476.0], [477.0]], p1: [[478.0], [479.0]]), p1: [s0(p0: [[480.0], [481.0]], p1: [[482.0], [483.0]]), s0(p0: [[484.0], [485.0]], p1: [[486.0], [487.0]]), s0(p0: [[488.0], [489.0]], p1: [[490.0], [491.0]])])], [s1(p0: s0(p0: [[492.0], [493.0]], p1: [[494.0], [495.0]]), p1: [s0(p0: [[496.0], [497.0]], p1: [[498.0], [499.0]]), s0(p0: [[500.0], [501.0]], p1: [[502.0], [503.0]]), s0(p0: [[504.0], [505.0]], p1: [[506.0], [507.0]])])]], p1: 508.0)]], p1: s0(p0: [[509.0], [510.0]], p1: [[511.0], [512.0]]))])]
    let v2: s7 = s7(p0: [s3(p0: s2(p0: [[s1(p0: s0(p0: [[513.0], [514.0]], p1: [[515.0], [516.0]]), p1: [s0(p0: [[517.0], [518.0]], p1: [[519.0], [520.0]]), s0(p0: [[521.0], [522.0]], p1: [[523.0], [524.0]]), s0(p0: [[525.0], [526.0]], p1: [[527.0], [528.0]])])], [s1(p0: s0(p0: [[529.0], [530.0]], p1: [[531.0], [532.0]]), p1: [s0(p0: [[533.0], [534.0]], p1: [[535.0], [536.0]]), s0(p0: [[537.0], [538.0]], p1: [[539.0], [540.0]]), s0(p0: [[541.0], [542.0]], p1: [[543.0], [544.0]])])]], p1: 545.0), p1: [s0(p0: [[546.0], [547.0]], p1: [[548.0], [549.0]]), s0(p0: [[550.0], [551.0]], p1: [[552.0], [553.0]])])], p1: [s4(p0: [[s2(p0: [[s1(p0: s0(p0: [[554.0], [555.0]], p1: [[556.0], [557.0]]), p1: [s0(p0: [[558.0], [559.0]], p1: [[560.0], [561.0]]), s0(p0: [[562.0], [563.0]], p1: [[564.0], [565.0]]), s0(p0: [[566.0], [567.0]], p1: [[568.0], [569.0]])])], [s1(p0: s0(p0: [[570.0], [571.0]], p1: [[572.0], [573.0]]), p1: [s0(p0: [[574.0], [575.0]], p1: [[576.0], [577.0]]), s0(p0: [[578.0], [579.0]], p1: [[580.0], [581.0]]), s0(p0: [[582.0], [583.0]], p1: [[584.0], [585.0]])])]], p1: 586.0)]], p1: s0(p0: [[587.0], [588.0]], p1: [[589.0], [590.0]])), s4(p0: [[s2(p0: [[s1(p0: s0(p0: [[591.0], [592.0]], p1: [[593.0], [594.0]]), p1: [s0(p0: [[595.0], [596.0]], p1: [[597.0], [598.0]]), s0(p0: [[599.0], [600.0]], p1: [[601.0], [602.0]]), s0(p0: [[603.0], [604.0]], p1: [[605.0], [606.0]])])], [s1(p0: s0(p0: [[607.0], [608.0]], p1: [[609.0], [610.0]]), p1: [s0(p0: [[611.0], [612.0]], p1: [[613.0], [614.0]]), s0(p0: [[615.0], [616.0]], p1: [[617.0], [618.0]]), s0(p0: [[619.0], [620.0]], p1: [[621.0], [622.0]])])]], p1: 623.0)]], p1: s0(p0: [[624.0], [625.0]], p1: [[626.0], [627.0]]))])
    let v3: [[s11]] = [[s11(p0: [s4(p0: [[s2(p0: [[s1(p0: s0(p0: [[628.0], [629.0]], p1: [[630.0], [631.0]]), p1: [s0(p0: [[632.0], [633.0]], p1: [[634.0], [635.0]]), s0(p0: [[636.0], [637.0]], p1: [[638.0], [639.0]]), s0(p0: [[640.0], [641.0]], p1: [[642.0], [643.0]])])], [s1(p0: s0(p0: [[644.0], [645.0]], p1: [[646.0], [647.0]]), p1: [s0(p0: [[648.0], [649.0]], p1: [[650.0], [651.0]]), s0(p0: [[652.0], [653.0]], p1: [[654.0], [655.0]]), s0(p0: [[656.0], [657.0]], p1: [[658.0], [659.0]])])]], p1: 660.0)]], p1: s0(p0: [[661.0], [662.0]], p1: [[663.0], [664.0]])), s4(p0: [[s2(p0: [[s1(p0: s0(p0: [[665.0], [666.0]], p1: [[667.0], [668.0]]), p1: [s0(p0: [[669.0], [670.0]], p1: [[671.0], [672.0]]), s0(p0: [[673.0], [674.0]], p1: [[675.0], [676.0]]), s0(p0: [[677.0], [678.0]], p1: [[679.0], [680.0]])])], [s1(p0: s0(p0: [[681.0], [682.0]], p1: [[683.0], [684.0]]), p1: [s0(p0: [[685.0], [686.0]], p1: [[687.0], [688.0]]), s0(p0: [[689.0], [690.0]], p1: [[691.0], [692.0]]), s0(p0: [[693.0], [694.0]], p1: [[695.0], [696.0]])])]], p1: 697.0)]], p1: s0(p0: [[698.0], [699.0]], p1: [[700.0], [701.0]])), s4(p0: [[s2(p0: [[s1(p0: s0(p0: [[702.0], [703.0]], p1: [[704.0], [705.0]]), p1: [s0(p0: [[706.0], [707.0]], p1: [[708.0], [709.0]]), s0(p0: [[710.0], [711.0]], p1: [[712.0], [713.0]]), s0(p0: [[714.0], [715.0]], p1: [[716.0], [717.0]])])], [s1(p0: s0(p0: [[718.0], [719.0]], p1: [[720.0], [721.0]]), p1: [s0(p0: [[722.0], [723.0]], p1: [[724.0], [725.0]]), s0(p0: [[726.0], [727.0]], p1: [[728.0], [729.0]]), s0(p0: [[730.0], [731.0]], p1: [[732.0], [733.0]])])]], p1: 734.0)]], p1: s0(p0: [[735.0], [736.0]], p1: [[737.0], [738.0]]))], p1: s1(p0: s0(p0: [[739.0], [740.0]], p1: [[741.0], [742.0]]), p1: [s0(p0: [[743.0], [744.0]], p1: [[745.0], [746.0]]), s0(p0: [[747.0], [748.0]], p1: [[749.0], [750.0]]), s0(p0: [[751.0], [752.0]], p1: [[753.0], [754.0]])]))], [s11(p0: [s4(p0: [[s2(p0: [[s1(p0: s0(p0: [[755.0], [756.0]], p1: [[757.0], [758.0]]), p1: [s0(p0: [[759.0], [760.0]], p1: [[761.0], [762.0]]), s0(p0: [[763.0], [764.0]], p1: [[765.0], [766.0]]), s0(p0: [[767.0], [768.0]], p1: [[769.0], [770.0]])])], [s1(p0: s0(p0: [[771.0], [772.0]], p1: [[773.0], [774.0]]), p1: [s0(p0: [[775.0], [776.0]], p1: [[777.0], [778.0]]), s0(p0: [[779.0], [780.0]], p1: [[781.0], [782.0]]), s0(p0: [[783.0], [784.0]], p1: [[785.0], [786.0]])])]], p1: 787.0)]], p1: s0(p0: [[788.0], [789.0]], p1: [[790.0], [791.0]])), s4(p0: [[s2(p0: [[s1(p0: s0(p0: [[792.0], [793.0]], p1: [[794.0], [795.0]]), p1: [s0(p0: [[796.0], [797.0]], p1: [[798.0], [799.0]]), s0(p0: [[800.0], [801.0]], p1: [[802.0], [803.0]]), s0(p0: [[804.0], [805.0]], p1: [[806.0], [807.0]])])], [s1(p0: s0(p0: [[808.0], [809.0]], p1: [[810.0], [811.0]]), p1: [s0(p0: [[812.0], [813.0]], p1: [[814.0], [815.0]]), s0(p0: [[816.0], [817.0]], p1: [[818.0], [819.0]]), s0(p0: [[820.0], [821.0]], p1: [[822.0], [823.0]])])]], p1: 824.0)]], p1: s0(p0: [[825.0], [826.0]], p1: [[827.0], [828.0]])), s4(p0: [[s2(p0: [[s1(p0: s0(p0: [[829.0], [830.0]], p1: [[831.0], [832.0]]), p1: [s0(p0: [[833.0], [834.0]], p1: [[835.0], [836.0]]), s0(p0: [[837.0], [838.0]], p1: [[839.0], [840.0]]), s0(p0: [[841.0], [842.0]], p1: [[843.0], [844.0]])])], [s1(p0: s0(p0: [[845.0], [846.0]], p1: [[847.0], [848.0]]), p1: [s0(p0: [[849.0], [850.0]], p1: [[851.0], [852.0]]), s0(p0: [[853.0], [854.0]], p1: [[855.0], [856.0]]), s0(p0: [[857.0], [858.0]], p1: [[859.0], [860.0]])])]], p1: 861.0)]], p1: s0(p0: [[862.0], [863.0]], p1: [[864.0], [865.0]]))], p1: s1(p0: s0(p0: [[866.0], [867.0]], p1: [[868.0], [869.0]]), p1: [s0(p0: [[870.0], [871.0]], p1: [[872.0], [873.0]]), s0(p0: [[874.0], [875.0]], p1: [[876.0], [877.0]]), s0(p0: [[878.0], [879.0]], p1: [[880.0], [881.0]])]))], [s11(p0: [s4(p0: [[s2(p0: [[s1(p0: s0(p0: [[882.0], [883.0]], p1: [[884.0], [885.0]]), p1: [s0(p0: [[886.0], [887.0]], p1: [[888.0], [889.0]]), s0(p0: [[890.0], [891.0]], p1: [[892.0], [893.0]]), s0(p0: [[894.0], [895.0]], p1: [[896.0], [897.0]])])], [s1(p0: s0(p0: [[898.0], [899.0]], p1: [[900.0], [901.0]]), p1: [s0(p0: [[902.0], [903.0]], p1: [[904.0], [905.0]]), s0(p0: [[906.0], [907.0]], p1: [[908.0], [909.0]]), s0(p0: [[910.0], [911.0]], p1: [[912.0], [913.0]])])]], p1: 914.0)]], p1: s0(p0: [[915.0], [916.0]], p1: [[917.0], [918.0]])), s4(p0: [[s2(p0: [[s1(p0: s0(p0: [[919.0], [920.0]], p1: [[921.0], [922.0]]), p1: [s0(p0: [[923.0], [924.0]], p1: [[925.0], [926.0]]), s0(p0: [[927.0], [928.0]], p1: [[929.0], [930.0]]), s0(p0: [[931.0], [932.0]], p1: [[933.0], [934.0]])])], [s1(p0: s0(p0: [[935.0], [936.0]], p1: [[937.0], [938.0]]), p1: [s0(p0: [[939.0], [940.0]], p1: [[941.0], [942.0]]), s0(p0: [[943.0], [944.0]], p1: [[945.0], [946.0]]), s0(p0: [[947.0], [948.0]], p1: [[949.0], [950.0]])])]], p1: 951.0)]], p1: s0(p0: [[952.0], [953.0]], p1: [[954.0], [955.0]])), s4(p0: [[s2(p0: [[s1(p0: s0(p0: [[956.0], [957.0]], p1: [[958.0], [959.0]]), p1: [s0(p0: [[960.0], [961.0]], p1: [[962.0], [963.0]]), s0(p0: [[964.0], [965.0]], p1: [[966.0], [967.0]]), s0(p0: [[968.0], [969.0]], p1: [[970.0], [971.0]])])], [s1(p0: s0(p0: [[972.0], [973.0]], p1: [[974.0], [975.0]]), p1: [s0(p0: [[976.0], [977.0]], p1: [[978.0], [979.0]]), s0(p0: [[980.0], [981.0]], p1: [[982.0], [983.0]]), s0(p0: [[984.0], [985.0]], p1: [[986.0], [987.0]])])]], p1: 988.0)]], p1: s0(p0: [[989.0], [990.0]], p1: [[991.0], [992.0]]))], p1: s1(p0: s0(p0: [[993.0], [994.0]], p1: [[995.0], [996.0]]), p1: [s0(p0: [[997.0], [998.0]], p1: [[999.0], [1000.0]]), s0(p0: [[1001.0], [1002.0]], p1: [[1003.0], [1004.0]]), s0(p0: [[1005.0], [1006.0]], p1: [[1007.0], [1008.0]])]))]]
    let v4: Double = 1009.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 1009.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
