  struct s0 {
    var p0: [[Float]]
    var p1: [Float]
  } in
  let noinline_f0: ([s0], Float) -> Float = (v0: [s0], v1: Float) -> Float {
    let v8: [Float] = [v1, v1, v1, v1] in
    let v2: [Float] = [v1, v1] in
    let v16: Float = v8[3] in
    let v19: Float = v2[0] in
    var v10: [Float] = v8 in
    let v15: Float = v10[2] in
    let v24: [Float] = [v16, v19, v19, v15, v15, v19] in
    v10 = v8 in
    var v27: [Float] = v24 in
    let v70: Float = v27[4] in
    v10[1] = v16 in
    v10[0] = v1 in
    v70
  } in
  fun loop(i: Int, v0: [s0], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0]], [2.0]), s0([[3.0], [4.0]], [5.0])] in
    let v1: Float = 6.0 in
    let initialResult: Float = 6.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()