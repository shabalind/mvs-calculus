  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s5 {
    var p0: s0
    var p1: s1
  } in
  let f67: (s0) -> s0 = (v0: s0) -> s0 {
    var v7: s0 = v0 in
    let v3: [[Float]] = v7.p1 in
    var v5: s0 = v7 in
    var v8: s0 = v5 in
    v7.p1 = v3 in
    let v4: [[Float]] = v8.p1 in
    let v2: [[Float]] = v7.p1 in
    v5.p1 = v2 in
    let v10: [[Float]] = v8.p1 in
    v8.p1 = v3 in
    let v15: [[Float]] = v0.p1 in
    let v23: [[Float]] = v7.p1 in
    v7.p1 = v23 in
    v5.p1 = v2 in
    let v29: [s0] = [v8, v7] in
    v7.p1 = v15 in
    let v37: [[Float]] = v5.p1 in
    let v59: [[Float]] = v5.p0 in
    var v80: [[Float]] = v59 in
    let v49: s0 = s0(v59, v4) in
    v8.p1 = v37 in
    var v42: [s0] = v29 in
    let v38: [[Float]] = v49.p0 in
    let v124: [[Float]] = v8.p1 in
    v5.p0 = v80 in
    v5.p0 = v80 in
    let v119: s0 = v42[1] in
    v7.p1 = v10 in
    var v101: s0 = v119 in
    v101.p1 = v2 in
    v5.p1 = v124 in
    v101.p0 = v38 in
    v101
  } in
  let f60: (s1) -> s1 = (v0: s1) -> s1 {
    var v2: s1 = v0 in
    let v4: [s1] = [v0] in
    let v6: s1 = v4[0] in
    var v5: s1 = v2 in
    v5 = v6 in
    let v15: s1 = v4[0] in
    var v1: s1 = v5 in
    let v8: [s0] = v1.p0 in
    let v13: [s0] = v5.p0 in
    var v9: [s0] = v13 in
    let v10: s0 = v2.p1 in
    v2.p0 = v9 in
    let v19: s0 = v9[0] in
    var v12: [s0] = v13 in
    v9[0] = v10 in
    let v17: s5 = s5(v19, v15) in
    let v21: s0 = v8[0] in
    let v25: s0 = v12[0] in
    v5.p0 = v8 in
    v2.p0 = v12 in
    let v16: [[s0]] = [v12, v12, v8] in
    v9[0] = v21 in
    v5.p1 = v21 in
    var v23: [[s0]] = v16 in
    let v56: [s0] = v23[2] in
    v12[0] = v25 in
    v5.p0 = v56 in
    let v104: s1 = v17.p1 in
    v23[2] = v56 in
    v104
  } in
  let f31: (s1) -> s1 = (v0: s1) -> s1 {
    var v7: s1 = v0 in
    let v1: [s0] = v0.p0 in
    let v2: s0 = v1[0] in
    v7.p1 = v2 in
    let v6: s1 = f60(v7) in
    var v5: s1 = v6 in
    let v9: s1 = f60(v0) in
    let v38: s0 = v1[0] in
    let v15: s0 = v0.p1 in
    v7.p0 = v1 in
    let v18: [s0] = v0.p0 in
    let v29: s5 = s5(v15, v9) in
    let v24: s0 = v29.p0 in
    let v22: s0 = f67(v24) in
    v7.p1 = v22 in
    v7.p1 = v38 in
    let v32: s0 = v6.p1 in
    v7.p0 = v18 in
    let v58: [s0] = v9.p0 in
    v5.p0 = v58 in
    v5.p1 = v32 in
    v7.p0 = v58 in
    v5
  } in
  let noinline_f0: ([s1], Float) -> Float = (v0: [s1], v1: Float) -> Float {
    let v4: s1 = v0[1] in
    let v9: s1 = f31(v4) in
    let v8: [s0] = v9.p0 in
    let v11: s0 = v8[0] in
    let v5: s0 = v8[0] in
    var v10: s0 = v5 in
    let v29: [[Float]] = v10.p1 in
    let v12: [Float] = v29[1] in
    let v24: s0 = f67(v11) in
    let v21: [[Float]] = v11.p0 in
    v10.p1 = v29 in
    v10.p0 = v21 in
    let v62: Float = v12[0] in
    let v32: Float = v1 / v62 in
    let v90: [[Float]] = v24.p0 in
    let v125: Float = v32 + v1 in
    v10.p0 = v90 in
    let v101: [[Float]] = v11.p1 in
    v10.p1 = v101 in
    var v184: Float = v125 in
    v184
  } in
  fun loop(i: Int, v0: [s1], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1([s0([[0.0]], [[1.0], [2.0], [3.0]])], s0([[4.0]], [[5.0], [6.0], [7.0]])), s1([s0([[8.0]], [[9.0], [10.0], [11.0]])], s0([[12.0]], [[13.0], [14.0], [15.0]])), s1([s0([[16.0]], [[17.0], [18.0], [19.0]])], s0([[20.0]], [[21.0], [22.0], [23.0]]))] in
    let v1: Float = 24.0 in
    let initialResult: Float = 24.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()