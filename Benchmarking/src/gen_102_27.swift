  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: [s0]
    var p1: [s1]
  }
  struct s5 {
    var p0: [[s2]]
    var p1: [Double]
  }
  struct s11 {
    var p0: s5
    var p1: [[s2]]
  }
  @inline(never)
  func f0(_ v0: s11, _ v1: Double) -> Double {
    let v5: s5 = v0.p0
    let v8: [Double] = v5.p1
    let v10: s5 = v0.p0
    let v27: [[s2]] = v10.p0
    let v19: s5 = s5(p0: v27, p1: v8)
    let v14: Double = v8[0]
    let v15: [Double] = v19.p1
    let v37: Double = v15[0]
    let v38: Double = v37 + v14
    let v93: Double = v37 + v38
    let v72: Double = v37 * v93
    return v72
  }
  func benchmark() {
    let v0: s11 = s11(p0: s5(p0: [[s2(p0: [s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0]])], p1: [s1(p0: s0(p0: [[4.0], [5.0]], p1: [[6.0], [7.0]]), p1: [s0(p0: [[8.0], [9.0]], p1: [[10.0], [11.0]]), s0(p0: [[12.0], [13.0]], p1: [[14.0], [15.0]]), s0(p0: [[16.0], [17.0]], p1: [[18.0], [19.0]])]), s1(p0: s0(p0: [[20.0], [21.0]], p1: [[22.0], [23.0]]), p1: [s0(p0: [[24.0], [25.0]], p1: [[26.0], [27.0]]), s0(p0: [[28.0], [29.0]], p1: [[30.0], [31.0]]), s0(p0: [[32.0], [33.0]], p1: [[34.0], [35.0]])]), s1(p0: s0(p0: [[36.0], [37.0]], p1: [[38.0], [39.0]]), p1: [s0(p0: [[40.0], [41.0]], p1: [[42.0], [43.0]]), s0(p0: [[44.0], [45.0]], p1: [[46.0], [47.0]]), s0(p0: [[48.0], [49.0]], p1: [[50.0], [51.0]])])])]], p1: [52.0]), p1: [[s2(p0: [s0(p0: [[53.0], [54.0]], p1: [[55.0], [56.0]])], p1: [s1(p0: s0(p0: [[57.0], [58.0]], p1: [[59.0], [60.0]]), p1: [s0(p0: [[61.0], [62.0]], p1: [[63.0], [64.0]]), s0(p0: [[65.0], [66.0]], p1: [[67.0], [68.0]]), s0(p0: [[69.0], [70.0]], p1: [[71.0], [72.0]])]), s1(p0: s0(p0: [[73.0], [74.0]], p1: [[75.0], [76.0]]), p1: [s0(p0: [[77.0], [78.0]], p1: [[79.0], [80.0]]), s0(p0: [[81.0], [82.0]], p1: [[83.0], [84.0]]), s0(p0: [[85.0], [86.0]], p1: [[87.0], [88.0]])]), s1(p0: s0(p0: [[89.0], [90.0]], p1: [[91.0], [92.0]]), p1: [s0(p0: [[93.0], [94.0]], p1: [[95.0], [96.0]]), s0(p0: [[97.0], [98.0]], p1: [[99.0], [100.0]]), s0(p0: [[101.0], [102.0]], p1: [[103.0], [104.0]])])])]])
    let v1: Double = 105.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 105.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
