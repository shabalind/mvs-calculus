  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s2 {
    var p0: [s0]
    var p1: s0
  }
  struct s3 {
    var p0: s2
    var p1: s2
    var p2: [s0]
  }
  struct s4 {
    var p0: [[s1]]
    var p1: s2
  }
  struct s5 {
    var p0: [[s0]]
    var p1: [[s2]]
    var p2: s3
    var p3: [s1]
  }
  struct s6 {
    var p0: s5
    var p1: s1
  }
  struct s10 {
    var p0: [[s6]]
    var p1: s4
  }
  func f20(_ v0: Double, _ v1: Double) -> Double {
    var v8: Double = v1
    var v10: Double = v8
    let v25: [Double] = [v0]
    let v17: Double = v25[0]
    let v15: Double = v25[0]
    let v13: Double = v25[0]
    let v35: [Double] = [v10, v1, v13, v17]
    let v18: Double = v35[1]
    var v40: [Double] = v35
    var v29: [Double] = v35
    let v28: [[Double]] = [v35, v29, v29, v35, v40]
    var v81: [[Double]] = v28
    v40[3] = v18
    var v32: [[Double]] = v81
    var v38: [[Double]] = v32
    v29[2] = v15
    let v54: [Double] = v38[1]
    let v59: Double = v54[1]
    return v59
  }
  @inline(never)
  func f0(_ v0: [s10], _ v1: Double) -> Double {
    let v6: Double = f20(v1, v1)
    let v7: Double = f20(v6, v6)
    let v12: Double = f20(v1, v1)
    let v15: Double = f20(v7, v6)
    var v20: Double = v15
    let v22: Double = f20(v20, v1)
    let v36: Double = f20(v22, v15)
    let v69: Double = f20(v12, v22)
    let v119: Double = f20(v36, v69)
    return v119
  }
  func benchmark() {
    let v0: [s10] = [s10(p0: [[s6(p0: s5(p0: [[s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0], [5.0]])], [s0(p0: [[6.0], [7.0], [8.0]], p1: [[9.0], [10.0], [11.0]])]], p1: [[s2(p0: [s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0], [16.0], [17.0]]), s0(p0: [[18.0], [19.0], [20.0]], p1: [[21.0], [22.0], [23.0]])], p1: s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0], [28.0], [29.0]]))]], p2: s3(p0: s2(p0: [s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0], [35.0]]), s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0], [40.0], [41.0]])], p1: s0(p0: [[42.0], [43.0], [44.0]], p1: [[45.0], [46.0], [47.0]])), p1: s2(p0: [s0(p0: [[48.0], [49.0], [50.0]], p1: [[51.0], [52.0], [53.0]]), s0(p0: [[54.0], [55.0], [56.0]], p1: [[57.0], [58.0], [59.0]])], p1: s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0], [64.0], [65.0]])), p2: [s0(p0: [[66.0], [67.0], [68.0]], p1: [[69.0], [70.0], [71.0]]), s0(p0: [[72.0], [73.0], [74.0]], p1: [[75.0], [76.0], [77.0]])]), p3: [s1(p0: [s0(p0: [[78.0], [79.0], [80.0]], p1: [[81.0], [82.0], [83.0]])], p1: [s0(p0: [[84.0], [85.0], [86.0]], p1: [[87.0], [88.0], [89.0]])])]), p1: s1(p0: [s0(p0: [[90.0], [91.0], [92.0]], p1: [[93.0], [94.0], [95.0]])], p1: [s0(p0: [[96.0], [97.0], [98.0]], p1: [[99.0], [100.0], [101.0]])]))]], p1: s4(p0: [[s1(p0: [s0(p0: [[102.0], [103.0], [104.0]], p1: [[105.0], [106.0], [107.0]])], p1: [s0(p0: [[108.0], [109.0], [110.0]], p1: [[111.0], [112.0], [113.0]])])]], p1: s2(p0: [s0(p0: [[114.0], [115.0], [116.0]], p1: [[117.0], [118.0], [119.0]]), s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0], [124.0], [125.0]])], p1: s0(p0: [[126.0], [127.0], [128.0]], p1: [[129.0], [130.0], [131.0]])))), s10(p0: [[s6(p0: s5(p0: [[s0(p0: [[132.0], [133.0], [134.0]], p1: [[135.0], [136.0], [137.0]])], [s0(p0: [[138.0], [139.0], [140.0]], p1: [[141.0], [142.0], [143.0]])]], p1: [[s2(p0: [s0(p0: [[144.0], [145.0], [146.0]], p1: [[147.0], [148.0], [149.0]]), s0(p0: [[150.0], [151.0], [152.0]], p1: [[153.0], [154.0], [155.0]])], p1: s0(p0: [[156.0], [157.0], [158.0]], p1: [[159.0], [160.0], [161.0]]))]], p2: s3(p0: s2(p0: [s0(p0: [[162.0], [163.0], [164.0]], p1: [[165.0], [166.0], [167.0]]), s0(p0: [[168.0], [169.0], [170.0]], p1: [[171.0], [172.0], [173.0]])], p1: s0(p0: [[174.0], [175.0], [176.0]], p1: [[177.0], [178.0], [179.0]])), p1: s2(p0: [s0(p0: [[180.0], [181.0], [182.0]], p1: [[183.0], [184.0], [185.0]]), s0(p0: [[186.0], [187.0], [188.0]], p1: [[189.0], [190.0], [191.0]])], p1: s0(p0: [[192.0], [193.0], [194.0]], p1: [[195.0], [196.0], [197.0]])), p2: [s0(p0: [[198.0], [199.0], [200.0]], p1: [[201.0], [202.0], [203.0]]), s0(p0: [[204.0], [205.0], [206.0]], p1: [[207.0], [208.0], [209.0]])]), p3: [s1(p0: [s0(p0: [[210.0], [211.0], [212.0]], p1: [[213.0], [214.0], [215.0]])], p1: [s0(p0: [[216.0], [217.0], [218.0]], p1: [[219.0], [220.0], [221.0]])])]), p1: s1(p0: [s0(p0: [[222.0], [223.0], [224.0]], p1: [[225.0], [226.0], [227.0]])], p1: [s0(p0: [[228.0], [229.0], [230.0]], p1: [[231.0], [232.0], [233.0]])]))]], p1: s4(p0: [[s1(p0: [s0(p0: [[234.0], [235.0], [236.0]], p1: [[237.0], [238.0], [239.0]])], p1: [s0(p0: [[240.0], [241.0], [242.0]], p1: [[243.0], [244.0], [245.0]])])]], p1: s2(p0: [s0(p0: [[246.0], [247.0], [248.0]], p1: [[249.0], [250.0], [251.0]]), s0(p0: [[252.0], [253.0], [254.0]], p1: [[255.0], [256.0], [257.0]])], p1: s0(p0: [[258.0], [259.0], [260.0]], p1: [[261.0], [262.0], [263.0]]))))]
    let v1: Double = 264.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 264.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
