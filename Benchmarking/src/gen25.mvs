  let noinline_f0: ([[Float]], [[Float]], Float) -> Float = (v0: [[Float]], v1: [[Float]], v2: Float) -> Float {
    var v5: Float = v2 in
    let v8: Float = v2 + v5 in
    let v14: [Float] = [v5, v8, v8, v5, v5, v5, v5] in
    let v12: Float = v14[4] in
    var v32: [Float] = v14 in
    var v36: [Float] = v32 in
    var v58: Float = v12 in
    let v73: Float = v36[5] in
    v36[6] = v58 in
    v36[6] = v5 in
    v73
  } in
  fun loop(i: Int, v0: [[Float]], v1: [[Float]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0]] in
    let v1: [[Float]] = [[1.0], [2.0], [3.0]] in
    let v2: Float = 4.0 in
    let initialResult: Float = 4.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()