  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let f20: (s0) -> s0 = (v0: s0) -> s0 {
    var v5: s0 = v0 in
    let v7: [[Float]] = v5.p1 in
    let v2: [[Float]] = v0.p0 in
    let v4: [[Float]] = v0.p0 in
    let v13: s0 = s0(v2, v7) in
    var v10: s0 = v0 in
    v10.p1 = v7 in
    v10.p0 = v4 in
    let v42: [Float] = v7[0] in
    v5.p0 = v2 in
    v5.p0 = v2 in
    var v35: [[Float]] = v7 in
    let v23: [[Float]] = v13.p1 in
    let v28: [Float] = v35[0] in
    v5.p1 = v35 in
    v35[1] = v42 in
    let v18: [Float] = v2[0] in
    v10.p1 = v23 in
    var v20: [Float] = v28 in
    let v48: [[Float]] = v10.p0 in
    v10.p1 = v35 in
    v35[0] = v20 in
    v10.p0 = v4 in
    let v33: [Float] = v48[0] in
    v35[1] = v18 in
    var v61: [Float] = v33 in
    v35[0] = v61 in
    v10
  } in
  let f9: (s0) -> s0 = (v0: s0) -> s0 {
    let v8: s0 = f20(v0) in
    let v13: s0 = f20(v8) in
    let v10: s0 = f20(v13) in
    v10
  } in
  let noinline_f0: (s0, Float) -> Float = (v0: s0, v1: Float) -> Float {
    let v3: [[Float]] = v0.p1 in
    let v5: [[Float]] = v0.p1 in
    var v6: s0 = v0 in
    v6.p1 = v3 in
    let v11: [[Float]] = v6.p1 in
    let v14: s0 = f9(v6) in
    var v9: [[Float]] = v5 in
    let v17: s0 = f20(v14) in
    v6.p1 = v11 in
    let v26: [[Float]] = v17.p0 in
    var v21: s0 = v17 in
    let v34: s0 = f20(v14) in
    let v19: s0 = f20(v14) in
    let v23: [Float] = v26[1] in
    let v42: [Float] = v26[2] in
    v6.p1 = v9 in
    v9[0] = v23 in
    var v22: s0 = v34 in
    v6.p1 = v9 in
    let v33: [[Float]] = v21.p1 in
    let v53: Float = v42[0] in
    v6.p1 = v9 in
    v6.p1 = v33 in
    let v51: [[Float]] = v14.p0 in
    v21.p0 = v51 in
    let v58: Float = v53 + v53 in
    let v115: [[Float]] = v19.p0 in
    v6.p1 = v33 in
    v21.p0 = v115 in
    let v174: [[Float]] = v22.p0 in
    v21.p0 = v174 in
    v58
  } in
  fun loop(i: Int, v0: s0, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]) in
    let v1: Float = 5.0 in
    let initialResult: Float = 5.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()