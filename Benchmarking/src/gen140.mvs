  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: (s0, s0, Float) -> Float = (v0: s0, v1: s0, v2: Float) -> Float {
    let v6: [[Float]] = v0.p1 in
    let v4: [Float] = v6[0] in
    var v11: [[Float]] = v6 in
    let v7: [Float] = v11[1] in
    let v3: Float = v7[0] in
    v11[0] = v4 in
    v11[0] = v4 in
    let v16: Float = v7[0] in
    let v29: Float = v3 / v16 in
    let v18: [Float] = [v29] in
    let v78: Float = v18[0] in
    v78
  } in
  fun loop(i: Int, v0: s0, v1: s0, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]]) in
    let v1: s0 = s0([[6.0], [7.0], [8.0]], [[9.0], [10.0], [11.0]]) in
    let v2: Float = 12.0 in
    let initialResult: Float = 12.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()