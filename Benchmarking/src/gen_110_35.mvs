  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  let noinline_f0: ([s1], Float) -> Float = (v0: [s1], v1: Float) -> Float {
    let v8: s1 = v0[0] in
    let v9: [s0] = v8.p1 in
    let v10: s0 = v9[0] in
    let v11: s0 = v9[0] in
    let v14: s0 = v9[0] in
    var v21: s0 = v11 in
    let v17: [[Float]] = v10.p0 in
    v21.p0 = v17 in
    let v24: [[Float]] = v14.p0 in
    let v49: [Float] = v24[2] in
    var v31: [Float] = v49 in
    let v54: [[Float]] = v21.p1 in
    let v36: [Float] = v17[2] in
    let v57: [Float] = v54[0] in
    let v164: [[Float]] = [v31, v31, v49, v31, v57, v36] in
    let v104: [Float] = v164[0] in
    let v169: Float = v104[0] in
    v169
  } in
  fun loop(i: Int, v0: [s1], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1([s0([[0.0], [1.0], [2.0]], [[3.0]]), s0([[4.0], [5.0], [6.0]], [[7.0]])], [s0([[8.0], [9.0], [10.0]], [[11.0]])])] in
    let v1: Float = 12.0 in
    let initialResult: Float = 12.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()