  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
    var p2: [s0]
    var p3: s0
  } in
  struct s2 {
    var p0: s1
    var p1: s0
  } in
  struct s3 {
    var p0: [s1]
    var p1: [s0]
  } in
  let noinline_f0: ([s0], s0, s2, s1, s3, [s0], [s0], Float) -> Float = (v0: [s0], v1: s0, v2: s2, v3: s1, v4: s3, v5: [s0], v6: [s0], v7: Float) -> Float {
    var v13: Float = v7 in
    v13 = v7 in
    let v47: Float = v7 / v13 in
    let v34: Float = v13 * v47 in
    let v33: [Float] = [v13] in
    let v27: Float = v34 - v7 in
    let v94: Float = v7 / v13 in
    let v39: Float = v33[0] in
    let v128: Float = v94 * v27 in
    var v153: Float = v7 in
    let v208: Float = v39 / v153 in
    let v159: Float = v128 + v208 in
    v159
  } in
  fun loop(i: Int, v0: [s0], v1: s0, v2: s2, v3: s1, v4: s3, v5: [s0], v6: [s0], v7: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4, v5, v6, v7) in
      loop(i + 1, v0, v1, v2, v3, v4, v5, v6, v7, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]), s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]]), s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]])] in
    let v1: s0 = s0([[15.0], [16.0]], [[17.0], [18.0], [19.0]]) in
    let v2: s2 = s2(s1([[s0([[20.0], [21.0]], [[22.0], [23.0], [24.0]])], [s0([[25.0], [26.0]], [[27.0], [28.0], [29.0]])]], [s0([[30.0], [31.0]], [[32.0], [33.0], [34.0]])], [s0([[35.0], [36.0]], [[37.0], [38.0], [39.0]]), s0([[40.0], [41.0]], [[42.0], [43.0], [44.0]]), s0([[45.0], [46.0]], [[47.0], [48.0], [49.0]])], s0([[50.0], [51.0]], [[52.0], [53.0], [54.0]])), s0([[55.0], [56.0]], [[57.0], [58.0], [59.0]])) in
    let v3: s1 = s1([[s0([[60.0], [61.0]], [[62.0], [63.0], [64.0]])], [s0([[65.0], [66.0]], [[67.0], [68.0], [69.0]])]], [s0([[70.0], [71.0]], [[72.0], [73.0], [74.0]])], [s0([[75.0], [76.0]], [[77.0], [78.0], [79.0]]), s0([[80.0], [81.0]], [[82.0], [83.0], [84.0]]), s0([[85.0], [86.0]], [[87.0], [88.0], [89.0]])], s0([[90.0], [91.0]], [[92.0], [93.0], [94.0]])) in
    let v4: s3 = s3([s1([[s0([[95.0], [96.0]], [[97.0], [98.0], [99.0]])], [s0([[100.0], [101.0]], [[102.0], [103.0], [104.0]])]], [s0([[105.0], [106.0]], [[107.0], [108.0], [109.0]])], [s0([[110.0], [111.0]], [[112.0], [113.0], [114.0]]), s0([[115.0], [116.0]], [[117.0], [118.0], [119.0]]), s0([[120.0], [121.0]], [[122.0], [123.0], [124.0]])], s0([[125.0], [126.0]], [[127.0], [128.0], [129.0]])), s1([[s0([[130.0], [131.0]], [[132.0], [133.0], [134.0]])], [s0([[135.0], [136.0]], [[137.0], [138.0], [139.0]])]], [s0([[140.0], [141.0]], [[142.0], [143.0], [144.0]])], [s0([[145.0], [146.0]], [[147.0], [148.0], [149.0]]), s0([[150.0], [151.0]], [[152.0], [153.0], [154.0]]), s0([[155.0], [156.0]], [[157.0], [158.0], [159.0]])], s0([[160.0], [161.0]], [[162.0], [163.0], [164.0]])), s1([[s0([[165.0], [166.0]], [[167.0], [168.0], [169.0]])], [s0([[170.0], [171.0]], [[172.0], [173.0], [174.0]])]], [s0([[175.0], [176.0]], [[177.0], [178.0], [179.0]])], [s0([[180.0], [181.0]], [[182.0], [183.0], [184.0]]), s0([[185.0], [186.0]], [[187.0], [188.0], [189.0]]), s0([[190.0], [191.0]], [[192.0], [193.0], [194.0]])], s0([[195.0], [196.0]], [[197.0], [198.0], [199.0]]))], [s0([[200.0], [201.0]], [[202.0], [203.0], [204.0]]), s0([[205.0], [206.0]], [[207.0], [208.0], [209.0]]), s0([[210.0], [211.0]], [[212.0], [213.0], [214.0]])]) in
    let v5: [s0] = [s0([[215.0], [216.0]], [[217.0], [218.0], [219.0]])] in
    let v6: [s0] = [s0([[220.0], [221.0]], [[222.0], [223.0], [224.0]])] in
    let v7: Float = 225.0 in
    let initialResult: Float = 225.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, v5, v6, v7, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()