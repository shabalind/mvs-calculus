  let f6: ([[Float]]) -> [[Float]] = (v0: [[Float]]) -> [[Float]] {
    let v16: [Float] = v0[1] in
    var v12: [[Float]] = v0 in
    var v29: [Float] = v16 in
    var v51: [[Float]] = v12 in
    v12[1] = v29 in
    v51
  } in
  let f3: ([[Float]], [[Float]]) -> [[Float]] = (v0: [[Float]], v1: [[Float]]) -> [[Float]] {
    let v8: [[Float]] = f6(v0) in
    let v4: [Float] = v8[1] in
    var v7: [[Float]] = v0 in
    let v6: [[Float]] = f6(v0) in
    var v9: [Float] = v4 in
    let v12: [[Float]] = f6(v7) in
    let v17: [[[Float]]] = [v8, v8, v1, v6, v12, v8] in
    let v18: Float = v9[0] in
    v9[0] = v18 in
    v7[1] = v9 in
    let v29: [[Float]] = v17[5] in
    v29
  } in
  let noinline_f0: (Float, [[Float]]) -> Float = (v0: Float, v1: [[Float]]) -> Float {
    var v2: [[Float]] = v1 in
    let v7: [[Float]] = f6(v2) in
    let v6: [Float] = [v0, v0, v0] in
    let v3: [Float] = v7[0] in
    v2[1] = v3 in
    v2[1] = v3 in
    let v5: [[Float]] = f6(v7) in
    let v9: [[Float]] = f3(v2, v1) in
    v2 = v1 in
    let v18: [[Float]] = [v3, v3, v3, v3, v3, v3] in
    let v8: [[Float]] = f3(v7, v9) in
    let v19: [[Float]] = f3(v7, v1) in
    let v25: [[Float]] = f3(v1, v19) in
    v2[2] = v3 in
    v2 = v7 in
    let v29: [[Float]] = f3(v8, v5) in
    var v41: [Float] = v6 in
    let v36: [[Float]] = f6(v5) in
    var v58: [Float] = v3 in
    var v15: [[Float]] = v18 in
    let v35: [Float] = v29[1] in
    var v24: [Float] = v58 in
    let v27: [[Float]] = f3(v36, v5) in
    var v37: [[Float]] = v15 in
    v15[5] = v24 in
    v2 = v25 in
    let v47: [Float] = v37[3] in
    let v39: [Float] = v27[2] in
    v15 = v37 in
    let v88: Float = v47[0] in
    v2[0] = v24 in
    v37[4] = v35 in
    let v59: Float = v41[0] in
    v24[0] = v59 in
    v37[5] = v39 in
    v37[2] = v24 in
    v88
  } in
  fun loop(i: Int, v0: Float, v1: [[Float]], result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: Float = 0.0 in
    let v1: [[Float]] = [[1.0], [2.0], [3.0]] in
    let initialResult: Float = [[1.0], [2.0], [3.0]] in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()