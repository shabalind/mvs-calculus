  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
  } in
  struct s2 {
    var p0: s0
    var p1: [s1]
  } in
  struct s3 {
    var p0: [Float]
    var p1: [s1]
    var p2: s2
  } in
  struct s4 {
    var p0: s3
    var p1: s3
  } in
  struct s6 {
    var p0: s2
    var p1: [[s4]]
  } in
  let f59: (Float) -> Float = (v0: Float) -> Float {
    var v4: Float = v0 in
    var v8: Float = v4 in
    var v3: Float = v4 in
    var v2: Float = v8 in
    var v6: Float = v2 in
    let v7: Float = v2 / v8 in
    var v5: Float = v3 in
    var v11: Float = v3 in
    var v15: Float = v7 in
    let v17: Float = v2 + v11 in
    var v21: Float = v0 in
    var v29: Float = v5 in
    var v14: Float = v0 in
    var v30: Float = v4 in
    var v9: Float = v14 in
    var v44: Float = v6 in
    var v19: Float = v21 in
    let v23: Float = v5 - v21 in
    var v13: Float = v30 in
    var v16: Float = v44 in
    var v26: Float = v17 in
    v21 = v23 in
    let v25: [Float] = [v13, v17, v19, v19] in
    var v24: [Float] = v25 in
    v24[0] = v29 in
    v24[2] = v15 in
    var v41: [Float] = v24 in
    v41[0] = v8 in
    var v51: [Float] = v41 in
    v8 = v16 in
    v41[2] = v26 in
    v51[3] = v21 in
    v51[0] = v23 in
    v51[3] = v9 in
    var v45: [Float] = v51 in
    let v48: Float = v45[1] in
    v48
  } in
  let noinline_f0: ([s6], Float) -> Float = (v0: [s6], v1: Float) -> Float {
    var v6: Float = v1 in
    let v4: Float = f59(v6) in
    let v5: Float = f59(v4) in
    v6 = v5 in
    v5
  } in
  fun loop(i: Int, v0: [s6], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s6] = [s6(s2(s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]), [s1([[s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]])]], [s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]]), s0([[15.0], [16.0]], [[17.0], [18.0], [19.0]])])]), [[s4(s3([20.0, 21.0], [s1([[s0([[22.0], [23.0]], [[24.0], [25.0], [26.0]])]], [s0([[27.0], [28.0]], [[29.0], [30.0], [31.0]]), s0([[32.0], [33.0]], [[34.0], [35.0], [36.0]])])], s2(s0([[37.0], [38.0]], [[39.0], [40.0], [41.0]]), [s1([[s0([[42.0], [43.0]], [[44.0], [45.0], [46.0]])]], [s0([[47.0], [48.0]], [[49.0], [50.0], [51.0]]), s0([[52.0], [53.0]], [[54.0], [55.0], [56.0]])])])), s3([57.0, 58.0], [s1([[s0([[59.0], [60.0]], [[61.0], [62.0], [63.0]])]], [s0([[64.0], [65.0]], [[66.0], [67.0], [68.0]]), s0([[69.0], [70.0]], [[71.0], [72.0], [73.0]])])], s2(s0([[74.0], [75.0]], [[76.0], [77.0], [78.0]]), [s1([[s0([[79.0], [80.0]], [[81.0], [82.0], [83.0]])]], [s0([[84.0], [85.0]], [[86.0], [87.0], [88.0]]), s0([[89.0], [90.0]], [[91.0], [92.0], [93.0]])])])))], [s4(s3([94.0, 95.0], [s1([[s0([[96.0], [97.0]], [[98.0], [99.0], [100.0]])]], [s0([[101.0], [102.0]], [[103.0], [104.0], [105.0]]), s0([[106.0], [107.0]], [[108.0], [109.0], [110.0]])])], s2(s0([[111.0], [112.0]], [[113.0], [114.0], [115.0]]), [s1([[s0([[116.0], [117.0]], [[118.0], [119.0], [120.0]])]], [s0([[121.0], [122.0]], [[123.0], [124.0], [125.0]]), s0([[126.0], [127.0]], [[128.0], [129.0], [130.0]])])])), s3([131.0, 132.0], [s1([[s0([[133.0], [134.0]], [[135.0], [136.0], [137.0]])]], [s0([[138.0], [139.0]], [[140.0], [141.0], [142.0]]), s0([[143.0], [144.0]], [[145.0], [146.0], [147.0]])])], s2(s0([[148.0], [149.0]], [[150.0], [151.0], [152.0]]), [s1([[s0([[153.0], [154.0]], [[155.0], [156.0], [157.0]])]], [s0([[158.0], [159.0]], [[160.0], [161.0], [162.0]]), s0([[163.0], [164.0]], [[165.0], [166.0], [167.0]])])])))]]), s6(s2(s0([[168.0], [169.0]], [[170.0], [171.0], [172.0]]), [s1([[s0([[173.0], [174.0]], [[175.0], [176.0], [177.0]])]], [s0([[178.0], [179.0]], [[180.0], [181.0], [182.0]]), s0([[183.0], [184.0]], [[185.0], [186.0], [187.0]])])]), [[s4(s3([188.0, 189.0], [s1([[s0([[190.0], [191.0]], [[192.0], [193.0], [194.0]])]], [s0([[195.0], [196.0]], [[197.0], [198.0], [199.0]]), s0([[200.0], [201.0]], [[202.0], [203.0], [204.0]])])], s2(s0([[205.0], [206.0]], [[207.0], [208.0], [209.0]]), [s1([[s0([[210.0], [211.0]], [[212.0], [213.0], [214.0]])]], [s0([[215.0], [216.0]], [[217.0], [218.0], [219.0]]), s0([[220.0], [221.0]], [[222.0], [223.0], [224.0]])])])), s3([225.0, 226.0], [s1([[s0([[227.0], [228.0]], [[229.0], [230.0], [231.0]])]], [s0([[232.0], [233.0]], [[234.0], [235.0], [236.0]]), s0([[237.0], [238.0]], [[239.0], [240.0], [241.0]])])], s2(s0([[242.0], [243.0]], [[244.0], [245.0], [246.0]]), [s1([[s0([[247.0], [248.0]], [[249.0], [250.0], [251.0]])]], [s0([[252.0], [253.0]], [[254.0], [255.0], [256.0]]), s0([[257.0], [258.0]], [[259.0], [260.0], [261.0]])])])))], [s4(s3([262.0, 263.0], [s1([[s0([[264.0], [265.0]], [[266.0], [267.0], [268.0]])]], [s0([[269.0], [270.0]], [[271.0], [272.0], [273.0]]), s0([[274.0], [275.0]], [[276.0], [277.0], [278.0]])])], s2(s0([[279.0], [280.0]], [[281.0], [282.0], [283.0]]), [s1([[s0([[284.0], [285.0]], [[286.0], [287.0], [288.0]])]], [s0([[289.0], [290.0]], [[291.0], [292.0], [293.0]]), s0([[294.0], [295.0]], [[296.0], [297.0], [298.0]])])])), s3([299.0, 300.0], [s1([[s0([[301.0], [302.0]], [[303.0], [304.0], [305.0]])]], [s0([[306.0], [307.0]], [[308.0], [309.0], [310.0]]), s0([[311.0], [312.0]], [[313.0], [314.0], [315.0]])])], s2(s0([[316.0], [317.0]], [[318.0], [319.0], [320.0]]), [s1([[s0([[321.0], [322.0]], [[323.0], [324.0], [325.0]])]], [s0([[326.0], [327.0]], [[328.0], [329.0], [330.0]]), s0([[331.0], [332.0]], [[333.0], [334.0], [335.0]])])])))]])] in
    let v1: Float = 336.0 in
    let initialResult: Float = 336.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()