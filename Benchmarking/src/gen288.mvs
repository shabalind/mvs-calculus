  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s0
    var p1: s0
  } in
  struct s3 {
    var p0: [[s2]]
    var p1: s0
  } in
  struct s8 {
    var p0: [[s0]]
    var p1: [[s3]]
  } in
  let f45: (s2) -> s2 = (v0: s2) -> s2 {
    let v7: s0 = v0.p1 in
    let v13: [[Float]] = v7.p1 in
    let v16: [[Float]] = v7.p0 in
    let v24: s0 = s0(v16, v13) in
    let v27: [s0] = [v24, v24] in
    var v80: [s0] = v27 in
    let v124: s0 = v80[1] in
    var v180: s2 = v0 in
    v180.p1 = v124 in
    v180
  } in
  let f43: (s0) -> s0 = (v0: s0) -> s0 {
    var v5: s0 = v0 in
    let v2: [s0] = [v0, v0, v0, v0] in
    var v7: s0 = v0 in
    let v3: [[Float]] = v5.p1 in
    var v4: [s0] = v2 in
    v5.p1 = v3 in
    let v8: s0 = v4[3] in
    var v10: [s0] = v4 in
    var v11: [s0] = v2 in
    var v6: [[Float]] = v3 in
    var v12: [[Float]] = v6 in
    let v18: s0 = v11[3] in
    v11[2] = v8 in
    let v14: [[Float]] = v18.p0 in
    let v25: s0 = v10[0] in
    v4[2] = v25 in
    v7.p0 = v14 in
    var v22: [[Float]] = v3 in
    var v23: [[Float]] = v14 in
    var v21: [[Float]] = v23 in
    let v36: s0 = v11[2] in
    v7.p1 = v12 in
    let v20: [[Float]] = v36.p0 in
    let v40: [[Float]] = v25.p1 in
    let v51: [Float] = v21[0] in
    v7.p0 = v20 in
    var v38: [[Float]] = v20 in
    v7.p1 = v12 in
    var v31: [[Float]] = v6 in
    let v39: s2 = s2(v18, v5) in
    v4[3] = v5 in
    var v71: s2 = v39 in
    let v77: s2 = f45(v39) in
    v5.p0 = v38 in
    v7.p1 = v31 in
    let v100: s0 = v10[2] in
    let v29: s0 = v77.p1 in
    var v46: s2 = v71 in
    let v64: s2 = f45(v46) in
    v71.p0 = v36 in
    let v70: s2 = f45(v64) in
    v5.p1 = v40 in
    v71.p0 = v29 in
    v71.p1 = v100 in
    v12[0] = v51 in
    let v52: s0 = v39.p1 in
    v46.p0 = v100 in
    v71.p1 = v52 in
    let v126: [[Float]] = v7.p0 in
    v71.p1 = v5 in
    v4[0] = v18 in
    let v239: s0 = v70.p1 in
    let v170: [[Float]] = v239.p1 in
    v6 = v170 in
    v5.p1 = v22 in
    v5.p0 = v126 in
    v239
  } in
  let noinline_f0: ([s1], s8, Float) -> Float = (v0: [s1], v1: s8, v2: Float) -> Float {
    let v4: s1 = v0[0] in
    let v7: s0 = v4.p0 in
    var v9: Float = v2 in
    let v18: Float = v9 * v9 in
    let v19: [[Float]] = v7.p0 in
    let v59: s0 = f43(v7) in
    let v20: [[Float]] = v59.p0 in
    var v45: Float = v18 in
    let v28: [Float] = v19[0] in
    let v42: [Float] = v20[0] in
    let v26: Float = v28[0] in
    var v48: [Float] = v28 in
    v48[0] = v45 in
    let v39: Float = v26 + v9 in
    let v84: Float = v42[0] in
    var v94: [Float] = v48 in
    v48[0] = v84 in
    v48[0] = v26 in
    v48[0] = v84 in
    v48[0] = v18 in
    v94[0] = v39 in
    let v53: Float = v94[0] in
    v48[0] = v2 in
    v53
  } in
  fun loop(i: Int, v0: [s1], v1: s8, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1(s0([[0.0]], [[1.0], [2.0]]), s0([[3.0]], [[4.0], [5.0]])), s1(s0([[6.0]], [[7.0], [8.0]]), s0([[9.0]], [[10.0], [11.0]]))] in
    let v1: s8 = s8([[s0([[12.0]], [[13.0], [14.0]])]], [[s3([[s2(s0([[15.0]], [[16.0], [17.0]]), s0([[18.0]], [[19.0], [20.0]]))]], s0([[21.0]], [[22.0], [23.0]]))], [s3([[s2(s0([[24.0]], [[25.0], [26.0]]), s0([[27.0]], [[28.0], [29.0]]))]], s0([[30.0]], [[31.0], [32.0]]))]]) in
    let v2: Float = 33.0 in
    let initialResult: Float = 33.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()