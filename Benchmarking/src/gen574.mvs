  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: s0
    var p2: s0
    var p3: [s0]
  } in
  let f70: ([s0], [s0]) -> [s0] = (v0: [s0], v1: [s0]) -> [s0] {
    let v3: s0 = v0[0] in
    var v4: s0 = v3 in
    let v2: [[Float]] = v4.p0 in
    let v7: [[Float]] = v3.p1 in
    var v9: [[Float]] = v7 in
    var v11: [[Float]] = v7 in
    let v5: [Float] = v9[2] in
    let v6: [Float] = v11[1] in
    let v19: [Float] = v2[1] in
    v9[2] = v19 in
    let v8: [[Float]] = v3.p0 in
    let v13: [[Float]] = v3.p0 in
    v11[2] = v6 in
    v4.p1 = v9 in
    var v14: [s0] = v0 in
    var v21: [[Float]] = v11 in
    var v10: [[Float]] = v21 in
    v4.p0 = v2 in
    v9[2] = v19 in
    var v18: s0 = v4 in
    let v49: [[Float]] = v3.p1 in
    v21[0] = v6 in
    let v20: [Float] = v8[1] in
    v14[0] = v18 in
    let v34: [[Float]] = v3.p1 in
    let v30: [[Float]] = v3.p1 in
    var v24: s0 = v18 in
    v21 = v10 in
    let v43: [[Float]] = v4.p0 in
    let v26: [Float] = v13[1] in
    let v80: [Float] = v30[1] in
    v9[2] = v80 in
    v24.p1 = v21 in
    let v38: [Float] = v34[0] in
    let v36: [[Float]] = v3.p1 in
    v10[0] = v38 in
    let v46: [[Float]] = v18.p0 in
    let v90: [Float] = v43[0] in
    v24.p0 = v43 in
    v14[0] = v24 in
    let v73: [[Float]] = v18.p1 in
    v14[0] = v18 in
    let v50: s0 = s0(v8, v73) in
    v11[1] = v20 in
    var v63: [s0] = v14 in
    let v54: [[Float]] = v50.p1 in
    var v103: [[Float]] = v46 in
    v18.p0 = v103 in
    v9[2] = v26 in
    v4.p1 = v49 in
    v18.p1 = v9 in
    v21[2] = v90 in
    v24.p1 = v54 in
    v14 = v0 in
    v24.p1 = v36 in
    v24.p1 = v7 in
    v21[0] = v5 in
    v63
  } in
  let f22: ([s0]) -> [s0] = (v0: [s0]) -> [s0] {
    let v1: [s0] = f70(v0, v0) in
    let v7: [s0] = f70(v1, v0) in
    v7
  } in
  let noinline_f0: ([[s0]], Float) -> Float = (v0: [[s0]], v1: Float) -> Float {
    var v2: [[s0]] = v0 in
    let v3: [s0] = v2[2] in
    var v5: [s0] = v3 in
    v2[0] = v3 in
    let v7: [s0] = f70(v3, v5) in
    var v9: [[s0]] = v0 in
    v2[1] = v7 in
    let v13: [s0] = v2[0] in
    v2[2] = v5 in
    let v10: s0 = v13[0] in
    let v17: s1 = s1(v9, v10, v10, v13) in
    v9[2] = v3 in
    let v16: s0 = v17.p2 in
    let v14: [s0] = f22(v3) in
    let v23: s1 = s1(v9, v16, v10, v13) in
    var v21: s0 = v16 in
    v9[0] = v7 in
    let v30: [s0] = v23.p3 in
    let v19: [[Float]] = v21.p1 in
    let v33: [Float] = v19[1] in
    v21.p1 = v19 in
    v5[0] = v10 in
    let v46: s0 = v13[0] in
    v2[0] = v3 in
    let v92: [[Float]] = v21.p1 in
    let v41: [s0] = f22(v14) in
    v9[0] = v30 in
    v21.p1 = v92 in
    v2[2] = v3 in
    v9[0] = v41 in
    v21 = v46 in
    let v96: Float = v33[0] in
    v96
  } in
  fun loop(i: Int, v0: [[s0]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s0]] = [[s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]])], [s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]])], [s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]])]] in
    let v1: Float = 15.0 in
    let initialResult: Float = 15.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()