  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: (s0, Float) -> Float = (v0: s0, v1: Float) -> Float {
    let v5: [[Float]] = v0.p0 in
    let v7: [Float] = v5[0] in
    var v18: Float = v1 in
    let v12: Float = v7[0] in
    let v4: [[Float]] = v0.p1 in
    let v30: [Float] = v4[1] in
    let v20: Float = v30[0] in
    let v24: [Float] = [v18, v18, v20] in
    var v31: [Float] = v24 in
    let v45: Float = v7[0] in
    let v56: Float = v31[1] in
    let v108: Float = v45 * v56 in
    v18 = v12 in
    var v140: Float = v108 in
    v140
  } in
  fun loop(i: Int, v0: s0, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]) in
    let v1: Float = 5.0 in
    let initialResult: Float = 5.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()