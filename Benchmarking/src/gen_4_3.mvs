  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: ([s0], Float) -> Float = (v0: [s0], v1: Float) -> Float {
    let v6: s0 = v0[2] in
    let v7: [[Float]] = v6.p0 in
    let v10: [[Float]] = v6.p0 in
    var v2: [[Float]] = v7 in
    let v9: [Float] = v2[0] in
    v2[2] = v9 in
    let v59: Float = v9[0] in
    let v36: Float = v1 * v59 in
    let v34: Float = v36 * v36 in
    let v62: [Float] = v10[2] in
    var v70: Float = v34 in
    v2[1] = v62 in
    let v68: Float = v34 * v70 in
    v2 = v10 in
    v68
  } in
  fun loop(i: Int, v0: [s0], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]), s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]]), s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]])] in
    let v1: Float = 15.0 in
    let initialResult: Float = 15.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()