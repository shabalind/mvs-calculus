  let f69: ([[Float]]) -> [[Float]] = (v0: [[Float]]) -> [[Float]] {
    v0
  } in
  let f63: ([[Float]]) -> [[Float]] = (v0: [[Float]]) -> [[Float]] {
    let v2: [[Float]] = f69(v0) in
    let v7: [[Float]] = f69(v0) in
    var v4: [[Float]] = v0 in
    let v5: [Float] = v7[0] in
    let v11: [[Float]] = f69(v2) in
    let v20: [[Float]] = f69(v11) in
    var v12: [Float] = v5 in
    let v24: [Float] = v2[0] in
    let v45: [[Float]] = f69(v4) in
    let v31: Float = v24[0] in
    let v25: [[Float]] = f69(v20) in
    let v37: [[Float]] = f69(v45) in
    let v49: [Float] = v25[0] in
    let v96: Float = v49[0] in
    var v65: Float = v96 in
    var v114: [Float] = v12 in
    v12[0] = v96 in
    var v93: Float = v31 in
    let v78: [Float] = v37[0] in
    var v97: [Float] = v114 in
    v114[0] = v65 in
    var v100: [[Float]] = v7 in
    var v95: [Float] = v78 in
    v114 = v95 in
    v65 = v93 in
    v100[0] = v97 in
    v100
  } in
  let f39: ([Float], [[Float]]) -> [[Float]] = (v0: [Float], v1: [[Float]]) -> [[Float]] {
    let v2: [[[Float]]] = [v1, v1, v1] in
    var v6: [[[Float]]] = v2 in
    v6 = v2 in
    let v3: [[Float]] = v6[0] in
    let v16: [[Float]] = f63(v3) in
    let v32: [[Float]] = f63(v1) in
    v6[0] = v32 in
    v16
  } in
  let f13: ([[Float]]) -> [[Float]] = (v0: [[Float]]) -> [[Float]] {
    var v7: [[Float]] = v0 in
    var v8: [[Float]] = v0 in
    let v9: [Float] = v8[0] in
    let v4: [[Float]] = [v9, v9, v9, v9, v9, v9] in
    var v11: [[Float]] = v4 in
    let v16: [[Float]] = f39(v9, v7) in
    var v26: [[Float]] = v11 in
    v7 = v0 in
    var v10: [Float] = v9 in
    let v27: Float = v9[0] in
    var v18: Float = v27 in
    var v30: [Float] = v10 in
    let v25: [Float] = v4[0] in
    let v22: [Float] = v26[4] in
    let v24: [[Float]] = f63(v8) in
    let v29: [[Float]] = f39(v22, v16) in
    v8[0] = v30 in
    v11[0] = v30 in
    v30[0] = v18 in
    v7 = v24 in
    v11[2] = v25 in
    v29
  } in
  let noinline_f0: ([[Float]], [[Float]], [[Float]], Float) -> Float = (v0: [[Float]], v1: [[Float]], v2: [[Float]], v3: Float) -> Float {
    let v4: [Float] = v2[0] in
    let v13: [[Float]] = f13(v2) in
    let v23: [Float] = v13[0] in
    var v14: [Float] = v4 in
    v14 = v23 in
    v14[0] = v3 in
    let v118: Float = v14[0] in
    var v54: Float = v118 in
    var v90: Float = v54 in
    v14[0] = v54 in
    v90
  } in
  fun loop(i: Int, v0: [[Float]], v1: [[Float]], v2: [[Float]], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0]] in
    let v1: [[Float]] = [[1.0], [2.0]] in
    let v2: [[Float]] = [[3.0]] in
    let v3: Float = 4.0 in
    let initialResult: Float = 4.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()