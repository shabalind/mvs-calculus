  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s2 {
    var p0: s0
    var p1: [Double]
  }
  struct s3 {
    var p0: [[s1]]
    var p1: s1
  }
  struct s4 {
    var p0: [[s2]]
    var p1: s3
  }
  struct s6 {
    var p0: s4
    var p1: [[s4]]
  }
  struct s8 {
    var p0: s6
    var p1: [[s1]]
  }
  func f33(_ v0: s6) -> s6 {
    let v5: [[s4]] = v0.p1
    let v6: s4 = v0.p0
    let v31: s6 = s6(p0: v6, p1: v5)
    return v31
  }
  @inline(never)
  func f0(_ v0: [s8], _ v1: Double) -> Double {
    let v7: s8 = v0[0]
    let v22: s6 = v7.p0
    let v2: s6 = f33(v22)
    let v21: s6 = f33(v2)
    let v55: s4 = v21.p0
    let v40: [[s2]] = v55.p0
    let v37: [s2] = v40[1]
    var v118: [s2] = v37
    let v71: s2 = v118[0]
    let v212: [Double] = v71.p1
    let v210: Double = v212[0]
    return v210
  }
  func benchmark() {
    let v0: [s8] = [s8(p0: s6(p0: s4(p0: [[s2(p0: s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0], [5.0]]), p1: [6.0, 7.0])], [s2(p0: s0(p0: [[8.0], [9.0], [10.0]], p1: [[11.0], [12.0], [13.0]]), p1: [14.0, 15.0])]], p1: s3(p0: [[s1(p0: [s0(p0: [[16.0], [17.0], [18.0]], p1: [[19.0], [20.0], [21.0]]), s0(p0: [[22.0], [23.0], [24.0]], p1: [[25.0], [26.0], [27.0]]), s0(p0: [[28.0], [29.0], [30.0]], p1: [[31.0], [32.0], [33.0]])], p1: [s0(p0: [[34.0], [35.0], [36.0]], p1: [[37.0], [38.0], [39.0]]), s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0], [44.0], [45.0]])])], [s1(p0: [s0(p0: [[46.0], [47.0], [48.0]], p1: [[49.0], [50.0], [51.0]]), s0(p0: [[52.0], [53.0], [54.0]], p1: [[55.0], [56.0], [57.0]]), s0(p0: [[58.0], [59.0], [60.0]], p1: [[61.0], [62.0], [63.0]])], p1: [s0(p0: [[64.0], [65.0], [66.0]], p1: [[67.0], [68.0], [69.0]]), s0(p0: [[70.0], [71.0], [72.0]], p1: [[73.0], [74.0], [75.0]])])]], p1: s1(p0: [s0(p0: [[76.0], [77.0], [78.0]], p1: [[79.0], [80.0], [81.0]]), s0(p0: [[82.0], [83.0], [84.0]], p1: [[85.0], [86.0], [87.0]]), s0(p0: [[88.0], [89.0], [90.0]], p1: [[91.0], [92.0], [93.0]])], p1: [s0(p0: [[94.0], [95.0], [96.0]], p1: [[97.0], [98.0], [99.0]]), s0(p0: [[100.0], [101.0], [102.0]], p1: [[103.0], [104.0], [105.0]])]))), p1: [[s4(p0: [[s2(p0: s0(p0: [[106.0], [107.0], [108.0]], p1: [[109.0], [110.0], [111.0]]), p1: [112.0, 113.0])], [s2(p0: s0(p0: [[114.0], [115.0], [116.0]], p1: [[117.0], [118.0], [119.0]]), p1: [120.0, 121.0])]], p1: s3(p0: [[s1(p0: [s0(p0: [[122.0], [123.0], [124.0]], p1: [[125.0], [126.0], [127.0]]), s0(p0: [[128.0], [129.0], [130.0]], p1: [[131.0], [132.0], [133.0]]), s0(p0: [[134.0], [135.0], [136.0]], p1: [[137.0], [138.0], [139.0]])], p1: [s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0], [144.0], [145.0]]), s0(p0: [[146.0], [147.0], [148.0]], p1: [[149.0], [150.0], [151.0]])])], [s1(p0: [s0(p0: [[152.0], [153.0], [154.0]], p1: [[155.0], [156.0], [157.0]]), s0(p0: [[158.0], [159.0], [160.0]], p1: [[161.0], [162.0], [163.0]]), s0(p0: [[164.0], [165.0], [166.0]], p1: [[167.0], [168.0], [169.0]])], p1: [s0(p0: [[170.0], [171.0], [172.0]], p1: [[173.0], [174.0], [175.0]]), s0(p0: [[176.0], [177.0], [178.0]], p1: [[179.0], [180.0], [181.0]])])]], p1: s1(p0: [s0(p0: [[182.0], [183.0], [184.0]], p1: [[185.0], [186.0], [187.0]]), s0(p0: [[188.0], [189.0], [190.0]], p1: [[191.0], [192.0], [193.0]]), s0(p0: [[194.0], [195.0], [196.0]], p1: [[197.0], [198.0], [199.0]])], p1: [s0(p0: [[200.0], [201.0], [202.0]], p1: [[203.0], [204.0], [205.0]]), s0(p0: [[206.0], [207.0], [208.0]], p1: [[209.0], [210.0], [211.0]])])))], [s4(p0: [[s2(p0: s0(p0: [[212.0], [213.0], [214.0]], p1: [[215.0], [216.0], [217.0]]), p1: [218.0, 219.0])], [s2(p0: s0(p0: [[220.0], [221.0], [222.0]], p1: [[223.0], [224.0], [225.0]]), p1: [226.0, 227.0])]], p1: s3(p0: [[s1(p0: [s0(p0: [[228.0], [229.0], [230.0]], p1: [[231.0], [232.0], [233.0]]), s0(p0: [[234.0], [235.0], [236.0]], p1: [[237.0], [238.0], [239.0]]), s0(p0: [[240.0], [241.0], [242.0]], p1: [[243.0], [244.0], [245.0]])], p1: [s0(p0: [[246.0], [247.0], [248.0]], p1: [[249.0], [250.0], [251.0]]), s0(p0: [[252.0], [253.0], [254.0]], p1: [[255.0], [256.0], [257.0]])])], [s1(p0: [s0(p0: [[258.0], [259.0], [260.0]], p1: [[261.0], [262.0], [263.0]]), s0(p0: [[264.0], [265.0], [266.0]], p1: [[267.0], [268.0], [269.0]]), s0(p0: [[270.0], [271.0], [272.0]], p1: [[273.0], [274.0], [275.0]])], p1: [s0(p0: [[276.0], [277.0], [278.0]], p1: [[279.0], [280.0], [281.0]]), s0(p0: [[282.0], [283.0], [284.0]], p1: [[285.0], [286.0], [287.0]])])]], p1: s1(p0: [s0(p0: [[288.0], [289.0], [290.0]], p1: [[291.0], [292.0], [293.0]]), s0(p0: [[294.0], [295.0], [296.0]], p1: [[297.0], [298.0], [299.0]]), s0(p0: [[300.0], [301.0], [302.0]], p1: [[303.0], [304.0], [305.0]])], p1: [s0(p0: [[306.0], [307.0], [308.0]], p1: [[309.0], [310.0], [311.0]]), s0(p0: [[312.0], [313.0], [314.0]], p1: [[315.0], [316.0], [317.0]])])))], [s4(p0: [[s2(p0: s0(p0: [[318.0], [319.0], [320.0]], p1: [[321.0], [322.0], [323.0]]), p1: [324.0, 325.0])], [s2(p0: s0(p0: [[326.0], [327.0], [328.0]], p1: [[329.0], [330.0], [331.0]]), p1: [332.0, 333.0])]], p1: s3(p0: [[s1(p0: [s0(p0: [[334.0], [335.0], [336.0]], p1: [[337.0], [338.0], [339.0]]), s0(p0: [[340.0], [341.0], [342.0]], p1: [[343.0], [344.0], [345.0]]), s0(p0: [[346.0], [347.0], [348.0]], p1: [[349.0], [350.0], [351.0]])], p1: [s0(p0: [[352.0], [353.0], [354.0]], p1: [[355.0], [356.0], [357.0]]), s0(p0: [[358.0], [359.0], [360.0]], p1: [[361.0], [362.0], [363.0]])])], [s1(p0: [s0(p0: [[364.0], [365.0], [366.0]], p1: [[367.0], [368.0], [369.0]]), s0(p0: [[370.0], [371.0], [372.0]], p1: [[373.0], [374.0], [375.0]]), s0(p0: [[376.0], [377.0], [378.0]], p1: [[379.0], [380.0], [381.0]])], p1: [s0(p0: [[382.0], [383.0], [384.0]], p1: [[385.0], [386.0], [387.0]]), s0(p0: [[388.0], [389.0], [390.0]], p1: [[391.0], [392.0], [393.0]])])]], p1: s1(p0: [s0(p0: [[394.0], [395.0], [396.0]], p1: [[397.0], [398.0], [399.0]]), s0(p0: [[400.0], [401.0], [402.0]], p1: [[403.0], [404.0], [405.0]]), s0(p0: [[406.0], [407.0], [408.0]], p1: [[409.0], [410.0], [411.0]])], p1: [s0(p0: [[412.0], [413.0], [414.0]], p1: [[415.0], [416.0], [417.0]]), s0(p0: [[418.0], [419.0], [420.0]], p1: [[421.0], [422.0], [423.0]])])))]]), p1: [[s1(p0: [s0(p0: [[424.0], [425.0], [426.0]], p1: [[427.0], [428.0], [429.0]]), s0(p0: [[430.0], [431.0], [432.0]], p1: [[433.0], [434.0], [435.0]]), s0(p0: [[436.0], [437.0], [438.0]], p1: [[439.0], [440.0], [441.0]])], p1: [s0(p0: [[442.0], [443.0], [444.0]], p1: [[445.0], [446.0], [447.0]]), s0(p0: [[448.0], [449.0], [450.0]], p1: [[451.0], [452.0], [453.0]])])], [s1(p0: [s0(p0: [[454.0], [455.0], [456.0]], p1: [[457.0], [458.0], [459.0]]), s0(p0: [[460.0], [461.0], [462.0]], p1: [[463.0], [464.0], [465.0]]), s0(p0: [[466.0], [467.0], [468.0]], p1: [[469.0], [470.0], [471.0]])], p1: [s0(p0: [[472.0], [473.0], [474.0]], p1: [[475.0], [476.0], [477.0]]), s0(p0: [[478.0], [479.0], [480.0]], p1: [[481.0], [482.0], [483.0]])])]])]
    let v1: Double = 484.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 484.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
