  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: s0
    var p1: s1
  } in
  struct s7 {
    var p0: Float
    var p1: s2
  } in
  let f22: (Float, s2) -> Float = (v0: Float, v1: s2) -> Float {
    let v5: s0 = v1.p0 in
    let v7: [[Float]] = v5.p1 in
    let v12: [Float] = v7[0] in
    let v10: Float = v12[0] in
    v10
  } in
  let noinline_f0: (s2, s7, Float) -> Float = (v0: s2, v1: s7, v2: Float) -> Float {
    let v4: Float = v2 - v2 in
    let v5: Float = f22(v2, v0) in
    let v7: Float = v4 * v5 in
    let v14: Float = f22(v7, v0) in
    v14
  } in
  fun loop(i: Int, v0: s2, v1: s7, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(s0([[0.0]], [[1.0]]), s1(s0([[2.0]], [[3.0]]), [s0([[4.0]], [[5.0]]), s0([[6.0]], [[7.0]])])) in
    let v1: s7 = s7(8.0, s2(s0([[9.0]], [[10.0]]), s1(s0([[11.0]], [[12.0]]), [s0([[13.0]], [[14.0]]), s0([[15.0]], [[16.0]])]))) in
    let v2: Float = 17.0 in
    let initialResult: Float = 17.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()