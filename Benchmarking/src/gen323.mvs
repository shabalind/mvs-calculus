  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: s0
    var p1: s0
    var p2: [s0]
  } in
  struct s3 {
    var p0: [s1]
    var p1: s2
    var p2: [s0]
  } in
  let f52: (Float) -> Float = (v0: Float) -> Float {
    var v6: Float = v0 in
    var v7: Float = v0 in
    let v2: [Float] = [v7] in
    v7 = v6 in
    let v5: Float = v0 - v7 in
    var v3: [Float] = v2 in
    var v4: [Float] = v2 in
    v4[0] = v0 in
    v6 = v7 in
    var v11: [Float] = v4 in
    var v1: Float = v5 in
    var v8: Float = v5 in
    var v9: Float = v0 in
    var v13: [Float] = v4 in
    v13[0] = v8 in
    var v16: [Float] = v13 in
    let v23: [[Float]] = [v13, v2, v13, v11, v3] in
    let v17: [Float] = v23[2] in
    var v18: [[Float]] = v23 in
    let v19: Float = v16[0] in
    var v14: [Float] = v11 in
    v11[0] = v1 in
    var v15: [Float] = v14 in
    let v27: [Float] = v18[2] in
    v18[1] = v27 in
    v11[0] = v6 in
    let v35: Float = v15[0] in
    var v37: [[Float]] = v18 in
    let v78: [Float] = v37[4] in
    let v83: Float = v35 / v9 in
    v13[0] = v19 in
    v11 = v78 in
    let v103: Float = v17[0] in
    v13[0] = v83 in
    v103
  } in
  let noinline_f0: ([s3], s0, Float) -> Float = (v0: [s3], v1: s0, v2: Float) -> Float {
    var v21: Float = v2 in
    let v40: Float = f52(v21) in
    v21 = v2 in
    v40
  } in
  fun loop(i: Int, v0: [s3], v1: s0, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s3] = [s3([s1(s0([[0.0]], [[1.0]]), [[s0([[2.0]], [[3.0]])]]), s1(s0([[4.0]], [[5.0]]), [[s0([[6.0]], [[7.0]])]]), s1(s0([[8.0]], [[9.0]]), [[s0([[10.0]], [[11.0]])]])], s2(s0([[12.0]], [[13.0]]), s0([[14.0]], [[15.0]]), [s0([[16.0]], [[17.0]]), s0([[18.0]], [[19.0]])]), [s0([[20.0]], [[21.0]]), s0([[22.0]], [[23.0]])]), s3([s1(s0([[24.0]], [[25.0]]), [[s0([[26.0]], [[27.0]])]]), s1(s0([[28.0]], [[29.0]]), [[s0([[30.0]], [[31.0]])]]), s1(s0([[32.0]], [[33.0]]), [[s0([[34.0]], [[35.0]])]])], s2(s0([[36.0]], [[37.0]]), s0([[38.0]], [[39.0]]), [s0([[40.0]], [[41.0]]), s0([[42.0]], [[43.0]])]), [s0([[44.0]], [[45.0]]), s0([[46.0]], [[47.0]])])] in
    let v1: s0 = s0([[48.0]], [[49.0]]) in
    let v2: Float = 50.0 in
    let initialResult: Float = 50.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()