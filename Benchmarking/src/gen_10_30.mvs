  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: Float
  } in
  struct s3 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s5 {
    var p0: [s1]
    var p1: s3
  } in
  let f4: (Float, s3) -> Float = (v0: Float, v1: s3) -> Float {
    let v5: [s0] = v1.p0 in
    let v7: s0 = v5[1] in
    let v2: [[Float]] = v7.p0 in
    let v11: [Float] = v2[1] in
    let v22: Float = v11[0] in
    v22
  } in
  let noinline_f0: (s5, Float) -> Float = (v0: s5, v1: Float) -> Float {
    let v2: s3 = v0.p1 in
    let v14: Float = f4(v1, v2) in
    let v17: Float = f4(v14, v2) in
    let v15: Float = f4(v17, v2) in
    let v19: Float = f4(v15, v2) in
    v19
  } in
  fun loop(i: Int, v0: s5, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s5 = s5([s1(s0([[0.0], [1.0]], [[2.0], [3.0]]), 4.0)], s3([s0([[5.0], [6.0]], [[7.0], [8.0]]), s0([[9.0], [10.0]], [[11.0], [12.0]]), s0([[13.0], [14.0]], [[15.0], [16.0]])], [s0([[17.0], [18.0]], [[19.0], [20.0]]), s0([[21.0], [22.0]], [[23.0], [24.0]])])) in
    let v1: Float = 25.0 in
    let initialResult: Float = 25.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()