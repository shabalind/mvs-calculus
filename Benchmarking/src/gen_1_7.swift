  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
    var p4: [Double]
  }
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  }
  @inline(never)
  func f0(_ v0: [[s1]], _ v1: Double) -> Double {
    var v6: [[s1]] = v0
    let v4: [s1] = v6[2]
    let v7: s1 = v4[0]
    let v3: s0 = v7.p0
    v6[0] = v4
    var v9: s0 = v3
    let v15: [[Double]] = v9.p0
    var v21: s0 = v9
    v21.p0 = v15
    v21.p2 = v15
    let v38: [Double] = v21.p4
    v6[2] = v4
    v6 = v0
    let v50: Double = v38[1]
    return v50
  }
  func benchmark() {
    let v0: [[s1]] = [[s1(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0], [4.0]], p2: [[5.0], [6.0]], p3: [[7.0], [8.0]], p4: [9.0, 10.0, 11.0]), p1: [[s0(p0: [[12.0], [13.0]], p1: [[14.0], [15.0], [16.0]], p2: [[17.0], [18.0]], p3: [[19.0], [20.0]], p4: [21.0, 22.0, 23.0])], [s0(p0: [[24.0], [25.0]], p1: [[26.0], [27.0], [28.0]], p2: [[29.0], [30.0]], p3: [[31.0], [32.0]], p4: [33.0, 34.0, 35.0])], [s0(p0: [[36.0], [37.0]], p1: [[38.0], [39.0], [40.0]], p2: [[41.0], [42.0]], p3: [[43.0], [44.0]], p4: [45.0, 46.0, 47.0])]])], [s1(p0: s0(p0: [[48.0], [49.0]], p1: [[50.0], [51.0], [52.0]], p2: [[53.0], [54.0]], p3: [[55.0], [56.0]], p4: [57.0, 58.0, 59.0]), p1: [[s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0], [64.0]], p2: [[65.0], [66.0]], p3: [[67.0], [68.0]], p4: [69.0, 70.0, 71.0])], [s0(p0: [[72.0], [73.0]], p1: [[74.0], [75.0], [76.0]], p2: [[77.0], [78.0]], p3: [[79.0], [80.0]], p4: [81.0, 82.0, 83.0])], [s0(p0: [[84.0], [85.0]], p1: [[86.0], [87.0], [88.0]], p2: [[89.0], [90.0]], p3: [[91.0], [92.0]], p4: [93.0, 94.0, 95.0])]])], [s1(p0: s0(p0: [[96.0], [97.0]], p1: [[98.0], [99.0], [100.0]], p2: [[101.0], [102.0]], p3: [[103.0], [104.0]], p4: [105.0, 106.0, 107.0]), p1: [[s0(p0: [[108.0], [109.0]], p1: [[110.0], [111.0], [112.0]], p2: [[113.0], [114.0]], p3: [[115.0], [116.0]], p4: [117.0, 118.0, 119.0])], [s0(p0: [[120.0], [121.0]], p1: [[122.0], [123.0], [124.0]], p2: [[125.0], [126.0]], p3: [[127.0], [128.0]], p4: [129.0, 130.0, 131.0])], [s0(p0: [[132.0], [133.0]], p1: [[134.0], [135.0], [136.0]], p2: [[137.0], [138.0]], p3: [[139.0], [140.0]], p4: [141.0, 142.0, 143.0])]])]]
    let v1: Double = 144.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 144.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
