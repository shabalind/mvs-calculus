  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: s1
    var p1: [s0]
  } in
  struct s3 {
    var p0: s1
    var p1: [s2]
  } in
  let f70: (s0, s0) -> s0 = (v0: s0, v1: s0) -> s0 {
    let v5: [[Float]] = v1.p1 in
    let v7: [[Float]] = v0.p0 in
    let v2: [Float] = v7[0] in
    var v6: s0 = v0 in
    let v13: [[Float]] = v1.p0 in
    v6.p0 = v13 in
    let v8: [Float] = v5[1] in
    var v19: [[Float]] = v13 in
    let v15: [[Float]] = v6.p1 in
    var v47: s0 = v0 in
    let v22: [[Float]] = v1.p1 in
    v47.p0 = v19 in
    var v18: s0 = v47 in
    v19[0] = v8 in
    v47.p1 = v15 in
    v19[0] = v2 in
    var v24: s0 = v18 in
    v47.p1 = v15 in
    v18.p1 = v22 in
    v24
  } in
  let f36: (Float) -> Float = (v0: Float) -> Float {
    var v1: Float = v0 in
    var v5: Float = v0 in
    let v3: [Float] = [v5, v0, v0, v5, v1] in
    let v8: Float = v3[2] in
    var v7: [Float] = v3 in
    let v6: [Float] = [v1, v5, v0, v8, v5] in
    v7[1] = v8 in
    let v4: Float = v7[4] in
    let v2: Float = v3[0] in
    v5 = v8 in
    let v15: Float = v3[4] in
    let v11: [[Float]] = [v6, v7, v6, v6, v6, v3, v7] in
    let v13: [Float] = [v15, v2, v4, v2, v2, v1] in
    var v23: [[Float]] = v11 in
    let v16: Float = v13[3] in
    v7[4] = v8 in
    v23[0] = v3 in
    v5 = v0 in
    let v33: [Float] = v23[6] in
    let v14: Float = v13[1] in
    v1 = v2 in
    v23[5] = v33 in
    let v24: Float = v33[4] in
    let v31: [Float] = v23[4] in
    let v45: Float = v7[0] in
    var v35: Float = v5 in
    var v48: [Float] = v13 in
    v48[5] = v24 in
    var v71: [Float] = v48 in
    let v72: Float = v71[5] in
    v7[2] = v35 in
    var v41: Float = v4 in
    let v62: Float = v71[2] in
    v7[2] = v14 in
    v7[1] = v24 in
    let v108: [Float] = [v41, v24, v45, v72] in
    var v74: [Float] = v108 in
    v23[1] = v31 in
    v74[1] = v16 in
    var v192: [Float] = v74 in
    let v181: Float = v192[1] in
    v35 = v62 in
    v181
  } in
  let noinline_f0: ([s0], [s1], s3, Float) -> Float = (v0: [s0], v1: [s1], v2: s3, v3: Float) -> Float {
    let v6: s1 = v1[2] in
    var v10: Float = v3 in
    let v15: s0 = v6.p0 in
    let v13: s0 = f70(v15, v15) in
    let v39: [[Float]] = v13.p1 in
    let v16: Float = f36(v10) in
    let v58: [Float] = v39[0] in
    let v45: Float = v58[0] in
    v10 = v3 in
    let v109: Float = v10 + v16 in
    let v44: Float = v109 - v45 in
    v44
  } in
  fun loop(i: Int, v0: [s0], v1: [s1], v2: s3, v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0]], [[1.0], [2.0], [3.0]]), s0([[4.0]], [[5.0], [6.0], [7.0]])] in
    let v1: [s1] = [s1(s0([[8.0]], [[9.0], [10.0], [11.0]]), [s0([[12.0]], [[13.0], [14.0], [15.0]]), s0([[16.0]], [[17.0], [18.0], [19.0]]), s0([[20.0]], [[21.0], [22.0], [23.0]])]), s1(s0([[24.0]], [[25.0], [26.0], [27.0]]), [s0([[28.0]], [[29.0], [30.0], [31.0]]), s0([[32.0]], [[33.0], [34.0], [35.0]]), s0([[36.0]], [[37.0], [38.0], [39.0]])]), s1(s0([[40.0]], [[41.0], [42.0], [43.0]]), [s0([[44.0]], [[45.0], [46.0], [47.0]]), s0([[48.0]], [[49.0], [50.0], [51.0]]), s0([[52.0]], [[53.0], [54.0], [55.0]])])] in
    let v2: s3 = s3(s1(s0([[56.0]], [[57.0], [58.0], [59.0]]), [s0([[60.0]], [[61.0], [62.0], [63.0]]), s0([[64.0]], [[65.0], [66.0], [67.0]]), s0([[68.0]], [[69.0], [70.0], [71.0]])]), [s2(s1(s0([[72.0]], [[73.0], [74.0], [75.0]]), [s0([[76.0]], [[77.0], [78.0], [79.0]]), s0([[80.0]], [[81.0], [82.0], [83.0]]), s0([[84.0]], [[85.0], [86.0], [87.0]])]), [s0([[88.0]], [[89.0], [90.0], [91.0]]), s0([[92.0]], [[93.0], [94.0], [95.0]])]), s2(s1(s0([[96.0]], [[97.0], [98.0], [99.0]]), [s0([[100.0]], [[101.0], [102.0], [103.0]]), s0([[104.0]], [[105.0], [106.0], [107.0]]), s0([[108.0]], [[109.0], [110.0], [111.0]])]), [s0([[112.0]], [[113.0], [114.0], [115.0]]), s0([[116.0]], [[117.0], [118.0], [119.0]])]), s2(s1(s0([[120.0]], [[121.0], [122.0], [123.0]]), [s0([[124.0]], [[125.0], [126.0], [127.0]]), s0([[128.0]], [[129.0], [130.0], [131.0]]), s0([[132.0]], [[133.0], [134.0], [135.0]])]), [s0([[136.0]], [[137.0], [138.0], [139.0]]), s0([[140.0]], [[141.0], [142.0], [143.0]])])]) in
    let v3: Float = 144.0 in
    let initialResult: Float = 144.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()