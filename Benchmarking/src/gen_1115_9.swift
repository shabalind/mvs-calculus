  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: s1
    var p1: s1
    var p2: [s0]
    var p3: s1
  }
  struct s3 {
    var p0: s2
    var p1: s0
  }
  struct s4 {
    var p0: s2
    var p1: s0
  }
  struct s5 {
    var p0: s1
    var p1: s1
  }
  struct s6 {
    var p0: [s5]
    var p1: s3
  }
  struct s7 {
    var p0: s3
    var p1: s6
    var p2: [[s4]]
  }
  func f32(_ v0: s0) -> s0 {
    let v2: [[Double]] = v0.p1
    let v1: [Double] = v2[0]
    let v4: [[Double]] = v0.p1
    var v5: s0 = v0
    let v9: [[Double]] = v0.p1
    let v3: [[Double]] = v0.p1
    let v8: [s0] = [v5, v0, v5, v5, v0, v0]
    let v16: [[Double]] = v5.p0
    let v11: [Double] = v9[2]
    let v12: [[Double]] = v0.p1
    var v10: [[Double]] = v4
    v10[0] = v1
    v5.p1 = v10
    var v27: [[Double]] = v4
    v27[1] = v1
    let v20: [[Double]] = v5.p0
    v27[2] = v1
    let v15: s1 = s1(p0: v5, p1: v5)
    let v36: [[Double]] = v5.p1
    v5.p1 = v36
    v10[2] = v11
    v27 = v36
    v5.p1 = v12
    let v39: s0 = v8[2]
    v5.p0 = v16
    let v44: s0 = v15.p1
    let v24: s1 = s1(p0: v44, p1: v39)
    v5.p1 = v27
    v5.p0 = v20
    v5.p1 = v3
    let v102: s0 = v24.p0
    return v102
  }
  func f27(_ v0: s0) -> s0 {
    let v4: s0 = f32(v0)
    let v1: s1 = s1(p0: v4, p1: v0)
    let v17: s0 = v1.p1
    let v35: s0 = f32(v17)
    return v35
  }
  @inline(never)
  func f0(_ v0: [s5], _ v1: s7, _ v2: Double) -> Double {
    let v13: s5 = v0[0]
    let v24: s1 = v13.p1
    let v31: s0 = v24.p0
    var v25: s0 = v31
    let v42: s0 = f27(v25)
    let v30: [s0] = [v42, v31, v42, v31, v42]
    let v48: s0 = v24.p0
    var v45: [s0] = v30
    let v38: s0 = v45[4]
    let v62: [[Double]] = v48.p0
    let v100: [[Double]] = v38.p1
    let v56: [Double] = v100[2]
    var v39: [Double] = v56
    let v80: Double = v39[0]
    v25.p0 = v62
    v25.p0 = v62
    v45[1] = v42
    return v80
  }
  func benchmark() {
    let v0: [s5] = [s5(p0: s1(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0], [4.0]]), p1: s0(p0: [[5.0], [6.0]], p1: [[7.0], [8.0], [9.0]])), p1: s1(p0: s0(p0: [[10.0], [11.0]], p1: [[12.0], [13.0], [14.0]]), p1: s0(p0: [[15.0], [16.0]], p1: [[17.0], [18.0], [19.0]])))]
    let v1: s7 = s7(p0: s3(p0: s2(p0: s1(p0: s0(p0: [[20.0], [21.0]], p1: [[22.0], [23.0], [24.0]]), p1: s0(p0: [[25.0], [26.0]], p1: [[27.0], [28.0], [29.0]])), p1: s1(p0: s0(p0: [[30.0], [31.0]], p1: [[32.0], [33.0], [34.0]]), p1: s0(p0: [[35.0], [36.0]], p1: [[37.0], [38.0], [39.0]])), p2: [s0(p0: [[40.0], [41.0]], p1: [[42.0], [43.0], [44.0]]), s0(p0: [[45.0], [46.0]], p1: [[47.0], [48.0], [49.0]])], p3: s1(p0: s0(p0: [[50.0], [51.0]], p1: [[52.0], [53.0], [54.0]]), p1: s0(p0: [[55.0], [56.0]], p1: [[57.0], [58.0], [59.0]]))), p1: s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0], [64.0]])), p1: s6(p0: [s5(p0: s1(p0: s0(p0: [[65.0], [66.0]], p1: [[67.0], [68.0], [69.0]]), p1: s0(p0: [[70.0], [71.0]], p1: [[72.0], [73.0], [74.0]])), p1: s1(p0: s0(p0: [[75.0], [76.0]], p1: [[77.0], [78.0], [79.0]]), p1: s0(p0: [[80.0], [81.0]], p1: [[82.0], [83.0], [84.0]])))], p1: s3(p0: s2(p0: s1(p0: s0(p0: [[85.0], [86.0]], p1: [[87.0], [88.0], [89.0]]), p1: s0(p0: [[90.0], [91.0]], p1: [[92.0], [93.0], [94.0]])), p1: s1(p0: s0(p0: [[95.0], [96.0]], p1: [[97.0], [98.0], [99.0]]), p1: s0(p0: [[100.0], [101.0]], p1: [[102.0], [103.0], [104.0]])), p2: [s0(p0: [[105.0], [106.0]], p1: [[107.0], [108.0], [109.0]]), s0(p0: [[110.0], [111.0]], p1: [[112.0], [113.0], [114.0]])], p3: s1(p0: s0(p0: [[115.0], [116.0]], p1: [[117.0], [118.0], [119.0]]), p1: s0(p0: [[120.0], [121.0]], p1: [[122.0], [123.0], [124.0]]))), p1: s0(p0: [[125.0], [126.0]], p1: [[127.0], [128.0], [129.0]]))), p2: [[s4(p0: s2(p0: s1(p0: s0(p0: [[130.0], [131.0]], p1: [[132.0], [133.0], [134.0]]), p1: s0(p0: [[135.0], [136.0]], p1: [[137.0], [138.0], [139.0]])), p1: s1(p0: s0(p0: [[140.0], [141.0]], p1: [[142.0], [143.0], [144.0]]), p1: s0(p0: [[145.0], [146.0]], p1: [[147.0], [148.0], [149.0]])), p2: [s0(p0: [[150.0], [151.0]], p1: [[152.0], [153.0], [154.0]]), s0(p0: [[155.0], [156.0]], p1: [[157.0], [158.0], [159.0]])], p3: s1(p0: s0(p0: [[160.0], [161.0]], p1: [[162.0], [163.0], [164.0]]), p1: s0(p0: [[165.0], [166.0]], p1: [[167.0], [168.0], [169.0]]))), p1: s0(p0: [[170.0], [171.0]], p1: [[172.0], [173.0], [174.0]]))], [s4(p0: s2(p0: s1(p0: s0(p0: [[175.0], [176.0]], p1: [[177.0], [178.0], [179.0]]), p1: s0(p0: [[180.0], [181.0]], p1: [[182.0], [183.0], [184.0]])), p1: s1(p0: s0(p0: [[185.0], [186.0]], p1: [[187.0], [188.0], [189.0]]), p1: s0(p0: [[190.0], [191.0]], p1: [[192.0], [193.0], [194.0]])), p2: [s0(p0: [[195.0], [196.0]], p1: [[197.0], [198.0], [199.0]]), s0(p0: [[200.0], [201.0]], p1: [[202.0], [203.0], [204.0]])], p3: s1(p0: s0(p0: [[205.0], [206.0]], p1: [[207.0], [208.0], [209.0]]), p1: s0(p0: [[210.0], [211.0]], p1: [[212.0], [213.0], [214.0]]))), p1: s0(p0: [[215.0], [216.0]], p1: [[217.0], [218.0], [219.0]]))]])
    let v2: Double = 220.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 220.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
