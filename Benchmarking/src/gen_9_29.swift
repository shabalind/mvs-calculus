  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  }
  struct s3 {
    var p0: s0
    var p1: s1
  }
  struct s4 {
    var p0: s3
    var p1: s0
  }
  struct s5 {
    var p0: [s0]
    var p1: s4
  }
  @inline(never)
  func f0(_ v0: [[s5]], _ v1: Double) -> Double {
    let v6: [s5] = v0[0]
    let v5: s5 = v6[0]
    let v7: [s0] = v5.p0
    let v17: s0 = v7[2]
    var v11: s0 = v17
    let v34: [[Double]] = v11.p2
    let v75: [[Double]] = v11.p0
    let v36: [Double] = v75[2]
    let v69: Double = v36[0]
    v11.p2 = v34
    var v133: [[Double]] = v75
    v11.p0 = v133
    return v69
  }
  func benchmark() {
    let v0: [[s5]] = [[s5(p0: [s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0]], p2: [[5.0], [6.0]], p3: [[7.0]]), s0(p0: [[8.0], [9.0], [10.0]], p1: [[11.0], [12.0]], p2: [[13.0], [14.0]], p3: [[15.0]]), s0(p0: [[16.0], [17.0], [18.0]], p1: [[19.0], [20.0]], p2: [[21.0], [22.0]], p3: [[23.0]])], p1: s4(p0: s3(p0: s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0], [28.0]], p2: [[29.0], [30.0]], p3: [[31.0]]), p1: s1(p0: s0(p0: [[32.0], [33.0], [34.0]], p1: [[35.0], [36.0]], p2: [[37.0], [38.0]], p3: [[39.0]]), p1: [[s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0], [44.0]], p2: [[45.0], [46.0]], p3: [[47.0]])]])), p1: s0(p0: [[48.0], [49.0], [50.0]], p1: [[51.0], [52.0]], p2: [[53.0], [54.0]], p3: [[55.0]])))], [s5(p0: [s0(p0: [[56.0], [57.0], [58.0]], p1: [[59.0], [60.0]], p2: [[61.0], [62.0]], p3: [[63.0]]), s0(p0: [[64.0], [65.0], [66.0]], p1: [[67.0], [68.0]], p2: [[69.0], [70.0]], p3: [[71.0]]), s0(p0: [[72.0], [73.0], [74.0]], p1: [[75.0], [76.0]], p2: [[77.0], [78.0]], p3: [[79.0]])], p1: s4(p0: s3(p0: s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0], [84.0]], p2: [[85.0], [86.0]], p3: [[87.0]]), p1: s1(p0: s0(p0: [[88.0], [89.0], [90.0]], p1: [[91.0], [92.0]], p2: [[93.0], [94.0]], p3: [[95.0]]), p1: [[s0(p0: [[96.0], [97.0], [98.0]], p1: [[99.0], [100.0]], p2: [[101.0], [102.0]], p3: [[103.0]])]])), p1: s0(p0: [[104.0], [105.0], [106.0]], p1: [[107.0], [108.0]], p2: [[109.0], [110.0]], p3: [[111.0]])))]]
    let v1: Double = 112.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 112.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
