  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: Double
    var p2: [[Double]]
    var p3: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  }
  @inline(never)
  func f0(_ v0: [[s0]], _ v1: [s1], _ v2: s0, _ v3: Double) -> Double {
    let v4: [[Double]] = v2.p3
    let v6: [[Double]] = v2.p0
    let v8: Double = v2.p1
    let v18: s0 = s0(p0: v6, p1: v8, p2: v6, p3: v4)
    let v28: Double = v8 + v8
    let v27: [Double] = v6[0]
    let v37: Double = v18.p1
    let v81: Double = v27[0]
    let v73: Double = v81 * v28
    let v74: Double = v37 * v73
    return v74
  }
  func benchmark() {
    let v0: [[s0]] = [[s0(p0: [[0.0], [1.0]], p1: 2.0, p2: [[3.0], [4.0]], p3: [[5.0], [6.0], [7.0]])]]
    let v1: [s1] = [s1(p0: [s0(p0: [[8.0], [9.0]], p1: 10.0, p2: [[11.0], [12.0]], p3: [[13.0], [14.0], [15.0]]), s0(p0: [[16.0], [17.0]], p1: 18.0, p2: [[19.0], [20.0]], p3: [[21.0], [22.0], [23.0]])], p1: [s0(p0: [[24.0], [25.0]], p1: 26.0, p2: [[27.0], [28.0]], p3: [[29.0], [30.0], [31.0]]), s0(p0: [[32.0], [33.0]], p1: 34.0, p2: [[35.0], [36.0]], p3: [[37.0], [38.0], [39.0]]), s0(p0: [[40.0], [41.0]], p1: 42.0, p2: [[43.0], [44.0]], p3: [[45.0], [46.0], [47.0]])]), s1(p0: [s0(p0: [[48.0], [49.0]], p1: 50.0, p2: [[51.0], [52.0]], p3: [[53.0], [54.0], [55.0]]), s0(p0: [[56.0], [57.0]], p1: 58.0, p2: [[59.0], [60.0]], p3: [[61.0], [62.0], [63.0]])], p1: [s0(p0: [[64.0], [65.0]], p1: 66.0, p2: [[67.0], [68.0]], p3: [[69.0], [70.0], [71.0]]), s0(p0: [[72.0], [73.0]], p1: 74.0, p2: [[75.0], [76.0]], p3: [[77.0], [78.0], [79.0]]), s0(p0: [[80.0], [81.0]], p1: 82.0, p2: [[83.0], [84.0]], p3: [[85.0], [86.0], [87.0]])]), s1(p0: [s0(p0: [[88.0], [89.0]], p1: 90.0, p2: [[91.0], [92.0]], p3: [[93.0], [94.0], [95.0]]), s0(p0: [[96.0], [97.0]], p1: 98.0, p2: [[99.0], [100.0]], p3: [[101.0], [102.0], [103.0]])], p1: [s0(p0: [[104.0], [105.0]], p1: 106.0, p2: [[107.0], [108.0]], p3: [[109.0], [110.0], [111.0]]), s0(p0: [[112.0], [113.0]], p1: 114.0, p2: [[115.0], [116.0]], p3: [[117.0], [118.0], [119.0]]), s0(p0: [[120.0], [121.0]], p1: 122.0, p2: [[123.0], [124.0]], p3: [[125.0], [126.0], [127.0]])])]
    let v2: s0 = s0(p0: [[128.0], [129.0]], p1: 130.0, p2: [[131.0], [132.0]], p3: [[133.0], [134.0], [135.0]])
    let v3: Double = 136.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 136.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
