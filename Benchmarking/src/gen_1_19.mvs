  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: [Float]
  } in
  struct s4 {
    var p0: s2
    var p1: s2
  } in
  let noinline_f0: (s1, [[s1]], [s4], [[s0]], Float) -> Float = (v0: s1, v1: [[s1]], v2: [s4], v3: [[s0]], v4: Float) -> Float {
    var v6: Float = v4 in
    let v5: s4 = v2[1] in
    let v18: s2 = v5.p1 in
    let v38: [Float] = v18.p1 in
    var v109: Float = v4 in
    let v49: Float = v38[0] in
    var v71: Float = v109 in
    let v85: Float = v49 * v6 in
    let v107: Float = v85 + v6 in
    let v54: Float = v71 * v85 in
    let v86: Float = v54 + v107 in
    v86
  } in
  fun loop(i: Int, v0: s1, v1: [[s1]], v2: [s4], v3: [[s0]], v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([s0([[0.0], [1.0], [2.0]], [[3.0]])], s0([[4.0], [5.0], [6.0]], [[7.0]])) in
    let v1: [[s1]] = [[s1([s0([[8.0], [9.0], [10.0]], [[11.0]])], s0([[12.0], [13.0], [14.0]], [[15.0]]))]] in
    let v2: [s4] = [s4(s2([s0([[16.0], [17.0], [18.0]], [[19.0]]), s0([[20.0], [21.0], [22.0]], [[23.0]])], [24.0, 25.0]), s2([s0([[26.0], [27.0], [28.0]], [[29.0]]), s0([[30.0], [31.0], [32.0]], [[33.0]])], [34.0, 35.0])), s4(s2([s0([[36.0], [37.0], [38.0]], [[39.0]]), s0([[40.0], [41.0], [42.0]], [[43.0]])], [44.0, 45.0]), s2([s0([[46.0], [47.0], [48.0]], [[49.0]]), s0([[50.0], [51.0], [52.0]], [[53.0]])], [54.0, 55.0]))] in
    let v3: [[s0]] = [[s0([[56.0], [57.0], [58.0]], [[59.0]])], [s0([[60.0], [61.0], [62.0]], [[63.0]])]] in
    let v4: Float = 64.0 in
    let initialResult: Float = 64.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()