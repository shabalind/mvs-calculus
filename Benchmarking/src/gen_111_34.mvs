  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  let f16: ([s0], Float) -> Float = (v0: [s0], v1: Float) -> Float {
    var v35: Float = v1 in
    var v65: Float = v35 in
    v65
  } in
  let noinline_f0: ([s0], s1, Float) -> Float = (v0: [s0], v1: s1, v2: Float) -> Float {
    let v16: Float = f16(v0, v2) in
    let v19: Float = f16(v0, v2) in
    let v27: Float = f16(v0, v16) in
    let v130: Float = v19 - v27 in
    var v82: Float = v130 in
    v82
  } in
  fun loop(i: Int, v0: [s0], v1: s1, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]), s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]])] in
    let v1: s1 = s1(s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]]), [[s0([[15.0], [16.0]], [[17.0], [18.0], [19.0]])], [s0([[20.0], [21.0]], [[22.0], [23.0], [24.0]])]]) in
    let v2: Float = 25.0 in
    let initialResult: Float = 25.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()