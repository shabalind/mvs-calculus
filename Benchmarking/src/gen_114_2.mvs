  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
    var p3: [[Float]]
  } in
  let f93: (s0) -> s0 = (v0: s0) -> s0 {
    let v2: [[Float]] = v0.p2 in
    let v12: [[Float]] = v0.p3 in
    let v3: [Float] = v12[1] in
    let v7: [Float] = v12[0] in
    let v8: [[Float]] = v0.p3 in
    let v25: [[Float]] = v0.p0 in
    var v15: [[Float]] = v12 in
    let v17: s0 = s0(v2, v15, v25, v15) in
    let v30: [[Float]] = v17.p1 in
    v15[0] = v3 in
    var v20: [[Float]] = v8 in
    let v28: [[Float]] = v0.p1 in
    v20[1] = v7 in
    let v27: [[Float]] = v0.p2 in
    let v35: s0 = s0(v27, v20, v27, v30) in
    let v48: [Float] = v28[0] in
    let v40: [[Float]] = v35.p0 in
    v15[1] = v48 in
    let v124: s0 = s0(v25, v30, v40, v12) in
    v124
  } in
  let f89: (s0) -> s0 = (v0: s0) -> s0 {
    let v1: s0 = f93(v0) in
    let v2: s0 = f93(v0) in
    let v10: [[Float]] = v2.p1 in
    let v24: [[Float]] = v1.p0 in
    let v12: [[Float]] = v2.p3 in
    let v15: s0 = s0(v24, v12, v24, v10) in
    let v186: s0 = f93(v15) in
    v186
  } in
  let noinline_f0: (s0, Float) -> Float = (v0: s0, v1: Float) -> Float {
    let v7: [[Float]] = v0.p2 in
    var v4: s0 = v0 in
    let v5: [[Float]] = v4.p1 in
    var v8: [[Float]] = v7 in
    var v10: s0 = v4 in
    let v3: [Float] = v7[0] in
    v4 = v0 in
    v4 = v0 in
    let v18: s0 = f89(v10) in
    let v16: [[Float]] = v18.p1 in
    let v11: [[Float]] = v10.p3 in
    let v14: [[Float]] = v10.p2 in
    let v43: [[Float]] = v18.p3 in
    let v15: [[[Float]]] = [v7, v8] in
    v8[1] = v3 in
    let v22: s0 = f89(v10) in
    let v24: s0 = f89(v4) in
    var v34: s0 = v22 in
    v8[0] = v3 in
    let v25: [Float] = v5[1] in
    v8[2] = v25 in
    let v36: [[Float]] = v34.p0 in
    let v66: s0 = f93(v4) in
    v8[0] = v3 in
    v4.p2 = v7 in
    let v32: [[Float]] = v24.p1 in
    let v41: [[Float]] = v15[0] in
    v8[0] = v3 in
    v8[2] = v3 in
    v8[2] = v3 in
    v8[2] = v25 in
    v10.p1 = v43 in
    let v27: [[Float]] = v34.p0 in
    let v30: [[Float]] = v66.p1 in
    v4.p2 = v8 in
    v4.p0 = v14 in
    var v31: [Float] = v25 in
    let v37: s0 = f89(v0) in
    v34.p1 = v11 in
    v4.p0 = v27 in
    v31[0] = v1 in
    v34.p2 = v36 in
    let v53: [[Float]] = v15[0] in
    v4.p0 = v41 in
    let v46: [[Float]] = v37.p3 in
    v34.p2 = v7 in
    v8[2] = v31 in
    v34.p1 = v32 in
    let v152: [[Float]] = v34.p1 in
    v34.p1 = v16 in
    v10.p0 = v53 in
    v4.p1 = v46 in
    v10.p3 = v152 in
    let v115: Float = v31[0] in
    v10.p3 = v30 in
    let v172: [[Float]] = v15[0] in
    v10.p2 = v172 in
    v10.p1 = v43 in
    v115
  } in
  fun loop(i: Int, v0: s0, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]], [[5.0], [6.0], [7.0]], [[8.0], [9.0]]) in
    let v1: Float = 10.0 in
    let initialResult: Float = 10.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()