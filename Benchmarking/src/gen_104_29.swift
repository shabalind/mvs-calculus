  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
    var p2: [s0]
    var p3: s0
    var p4: s0
  }
  struct s3 {
    var p0: s1
    var p1: Double
  }
  struct s4 {
    var p0: [s3]
    var p1: s3
  }
  struct s5 {
    var p0: s0
    var p1: s3
  }
  struct s7 {
    var p0: [s0]
    var p1: s4
  }
  @inline(never)
  func f0(_ v0: s5, _ v1: [s5], _ v2: [s7], _ v3: Double) -> Double {
    let v7: s0 = v0.p0
    let v12: [[Double]] = v7.p1
    let v31: [Double] = v12[0]
    var v26: s0 = v7
    let v19: Double = v31[0]
    var v40: Double = v19
    let v39: [[Double]] = v26.p1
    let v46: [[Double]] = v7.p1
    let v34: [Double] = v39[0]
    let v113: Double = v34[0]
    v26.p1 = v46
    let v205: Double = v113 / v40
    var v279: Double = v205
    return v279
  }
  func benchmark() {
    let v0: s5 = s5(p0: s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0]]), p1: s3(p0: s1(p0: [[s0(p0: [[4.0], [5.0], [6.0]], p1: [[7.0]])]], p1: [s0(p0: [[8.0], [9.0], [10.0]], p1: [[11.0]])], p2: [s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0]]), s0(p0: [[16.0], [17.0], [18.0]], p1: [[19.0]])], p3: s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0]]), p4: s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0]])), p1: 28.0))
    let v1: [s5] = [s5(p0: s0(p0: [[29.0], [30.0], [31.0]], p1: [[32.0]]), p1: s3(p0: s1(p0: [[s0(p0: [[33.0], [34.0], [35.0]], p1: [[36.0]])]], p1: [s0(p0: [[37.0], [38.0], [39.0]], p1: [[40.0]])], p2: [s0(p0: [[41.0], [42.0], [43.0]], p1: [[44.0]]), s0(p0: [[45.0], [46.0], [47.0]], p1: [[48.0]])], p3: s0(p0: [[49.0], [50.0], [51.0]], p1: [[52.0]]), p4: s0(p0: [[53.0], [54.0], [55.0]], p1: [[56.0]])), p1: 57.0))]
    let v2: [s7] = [s7(p0: [s0(p0: [[58.0], [59.0], [60.0]], p1: [[61.0]]), s0(p0: [[62.0], [63.0], [64.0]], p1: [[65.0]]), s0(p0: [[66.0], [67.0], [68.0]], p1: [[69.0]])], p1: s4(p0: [s3(p0: s1(p0: [[s0(p0: [[70.0], [71.0], [72.0]], p1: [[73.0]])]], p1: [s0(p0: [[74.0], [75.0], [76.0]], p1: [[77.0]])], p2: [s0(p0: [[78.0], [79.0], [80.0]], p1: [[81.0]]), s0(p0: [[82.0], [83.0], [84.0]], p1: [[85.0]])], p3: s0(p0: [[86.0], [87.0], [88.0]], p1: [[89.0]]), p4: s0(p0: [[90.0], [91.0], [92.0]], p1: [[93.0]])), p1: 94.0), s3(p0: s1(p0: [[s0(p0: [[95.0], [96.0], [97.0]], p1: [[98.0]])]], p1: [s0(p0: [[99.0], [100.0], [101.0]], p1: [[102.0]])], p2: [s0(p0: [[103.0], [104.0], [105.0]], p1: [[106.0]]), s0(p0: [[107.0], [108.0], [109.0]], p1: [[110.0]])], p3: s0(p0: [[111.0], [112.0], [113.0]], p1: [[114.0]]), p4: s0(p0: [[115.0], [116.0], [117.0]], p1: [[118.0]])), p1: 119.0)], p1: s3(p0: s1(p0: [[s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0]])]], p1: [s0(p0: [[124.0], [125.0], [126.0]], p1: [[127.0]])], p2: [s0(p0: [[128.0], [129.0], [130.0]], p1: [[131.0]]), s0(p0: [[132.0], [133.0], [134.0]], p1: [[135.0]])], p3: s0(p0: [[136.0], [137.0], [138.0]], p1: [[139.0]]), p4: s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0]])), p1: 144.0))), s7(p0: [s0(p0: [[145.0], [146.0], [147.0]], p1: [[148.0]]), s0(p0: [[149.0], [150.0], [151.0]], p1: [[152.0]]), s0(p0: [[153.0], [154.0], [155.0]], p1: [[156.0]])], p1: s4(p0: [s3(p0: s1(p0: [[s0(p0: [[157.0], [158.0], [159.0]], p1: [[160.0]])]], p1: [s0(p0: [[161.0], [162.0], [163.0]], p1: [[164.0]])], p2: [s0(p0: [[165.0], [166.0], [167.0]], p1: [[168.0]]), s0(p0: [[169.0], [170.0], [171.0]], p1: [[172.0]])], p3: s0(p0: [[173.0], [174.0], [175.0]], p1: [[176.0]]), p4: s0(p0: [[177.0], [178.0], [179.0]], p1: [[180.0]])), p1: 181.0), s3(p0: s1(p0: [[s0(p0: [[182.0], [183.0], [184.0]], p1: [[185.0]])]], p1: [s0(p0: [[186.0], [187.0], [188.0]], p1: [[189.0]])], p2: [s0(p0: [[190.0], [191.0], [192.0]], p1: [[193.0]]), s0(p0: [[194.0], [195.0], [196.0]], p1: [[197.0]])], p3: s0(p0: [[198.0], [199.0], [200.0]], p1: [[201.0]]), p4: s0(p0: [[202.0], [203.0], [204.0]], p1: [[205.0]])), p1: 206.0)], p1: s3(p0: s1(p0: [[s0(p0: [[207.0], [208.0], [209.0]], p1: [[210.0]])]], p1: [s0(p0: [[211.0], [212.0], [213.0]], p1: [[214.0]])], p2: [s0(p0: [[215.0], [216.0], [217.0]], p1: [[218.0]]), s0(p0: [[219.0], [220.0], [221.0]], p1: [[222.0]])], p3: s0(p0: [[223.0], [224.0], [225.0]], p1: [[226.0]]), p4: s0(p0: [[227.0], [228.0], [229.0]], p1: [[230.0]])), p1: 231.0)))]
    let v3: Double = 232.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 232.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
