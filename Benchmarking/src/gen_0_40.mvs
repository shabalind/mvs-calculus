  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: [s1]
    var p1: [Float]
  } in
  struct s4 {
    var p0: s0
    var p1: s0
  } in
  let f81: (Float) -> Float = (v0: Float) -> Float {
    var v7: Float = v0 in
    v7 = v0 in
    var v5: Float = v0 in
    var v2: Float = v5 in
    let v4: Float = v0 / v7 in
    var v9: Float = v0 in
    var v3: Float = v5 in
    v5 = v4 in
    var v10: Float = v9 in
    var v12: Float = v3 in
    var v41: Float = v2 in
    let v32: Float = v41 + v12 in
    var v46: Float = v32 in
    let v18: Float = v46 / v32 in
    v2 = v10 in
    v18
  } in
  let noinline_f0: ([[s2]], [s1], [[s4]], [s2], Float) -> Float = (v0: [[s2]], v1: [s1], v2: [[s4]], v3: [s2], v4: Float) -> Float {
    let v7: s2 = v3[0] in
    let v16: [Float] = v7.p1 in
    var v26: [Float] = v16 in
    v26[2] = v4 in
    let v28: Float = v26[1] in
    let v14: Float = f81(v4) in
    v26[1] = v28 in
    v26[0] = v28 in
    v26[0] = v14 in
    v26[0] = v4 in
    v26[0] = v14 in
    let v23: Float = f81(v28) in
    let v39: Float = v23 + v28 in
    v39
  } in
  fun loop(i: Int, v0: [[s2]], v1: [s1], v2: [[s4]], v3: [s2], v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s2]] = [[s2([s1(s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]), [[s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]])]]), s1(s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]]), [[s0([[15.0], [16.0], [17.0]], [[18.0], [19.0]])]])], [20.0, 21.0, 22.0])], [s2([s1(s0([[23.0], [24.0], [25.0]], [[26.0], [27.0]]), [[s0([[28.0], [29.0], [30.0]], [[31.0], [32.0]])]]), s1(s0([[33.0], [34.0], [35.0]], [[36.0], [37.0]]), [[s0([[38.0], [39.0], [40.0]], [[41.0], [42.0]])]])], [43.0, 44.0, 45.0])], [s2([s1(s0([[46.0], [47.0], [48.0]], [[49.0], [50.0]]), [[s0([[51.0], [52.0], [53.0]], [[54.0], [55.0]])]]), s1(s0([[56.0], [57.0], [58.0]], [[59.0], [60.0]]), [[s0([[61.0], [62.0], [63.0]], [[64.0], [65.0]])]])], [66.0, 67.0, 68.0])]] in
    let v1: [s1] = [s1(s0([[69.0], [70.0], [71.0]], [[72.0], [73.0]]), [[s0([[74.0], [75.0], [76.0]], [[77.0], [78.0]])]]), s1(s0([[79.0], [80.0], [81.0]], [[82.0], [83.0]]), [[s0([[84.0], [85.0], [86.0]], [[87.0], [88.0]])]])] in
    let v2: [[s4]] = [[s4(s0([[89.0], [90.0], [91.0]], [[92.0], [93.0]]), s0([[94.0], [95.0], [96.0]], [[97.0], [98.0]]))]] in
    let v3: [s2] = [s2([s1(s0([[99.0], [100.0], [101.0]], [[102.0], [103.0]]), [[s0([[104.0], [105.0], [106.0]], [[107.0], [108.0]])]]), s1(s0([[109.0], [110.0], [111.0]], [[112.0], [113.0]]), [[s0([[114.0], [115.0], [116.0]], [[117.0], [118.0]])]])], [119.0, 120.0, 121.0])] in
    let v4: Float = 122.0 in
    let initialResult: Float = 122.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()