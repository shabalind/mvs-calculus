  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  }
  struct s2 {
    var p0: s0
    var p1: [s1]
  }
  struct s3 {
    var p0: s1
    var p1: s0
  }
  struct s4 {
    var p0: [s1]
    var p1: [s0]
  }
  struct s7 {
    var p0: [s4]
    var p1: [[s1]]
  }
  func f45(_ v0: Double) -> Double {
    var v1: Double = v0
    var v5: Double = v1
    var v7: Double = v5
    let v3: [Double] = [v5, v0, v0, v0, v1, v5]
    var v4: [Double] = v3
    var v6: [Double] = v4
    var v2: Double = v1
    v1 = v0
    v6[1] = v2
    let v9: Double = v3[2]
    let v10: Double = v6[4]
    var v12: Double = v9
    let v15: Double = v3[3]
    var v25: Double = v7
    let v29: Double = v6[5]
    let v14: Double = v4[5]
    let v17: Double = v3[3]
    var v11: [Double] = v4
    let v20: [Double] = [v1, v12, v14]
    var v13: [Double] = v20
    v13[0] = v29
    var v30: [Double] = v11
    v6[4] = v25
    v6[0] = v12
    let v21: Double = v13[1]
    var v50: [Double] = v13
    v50[2] = v5
    var v23: [Double] = v20
    var v27: [Double] = v20
    let v18: Double = v50[1]
    v50 = v23
    v30[4] = v9
    let v40: Double = v18 + v21
    var v80: Double = v10
    v13 = v27
    let v49: Double = v30[0]
    v27[2] = v17
    var v63: Double = v49
    let v61: [Double] = [v7]
    v13[0] = v15
    let v65: Double = v61[0]
    v23[2] = v65
    v13[1] = v5
    v30[0] = v80
    v6[2] = v63
    return v40
  }
  @inline(never)
  func f0(_ v0: s7, _ v1: [s3], _ v2: s2, _ v3: Double) -> Double {
    let v4: Double = v3 * v3
    let v18: Double = v3 + v4
    let v27: Double = f45(v18)
    return v27
  }
  func benchmark() {
    let v0: s7 = s7(p0: [s4(p0: [s1(p0: s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0]]), p1: [[s0(p0: [[5.0], [6.0], [7.0]], p1: [[8.0], [9.0]])], [s0(p0: [[10.0], [11.0], [12.0]], p1: [[13.0], [14.0]])], [s0(p0: [[15.0], [16.0], [17.0]], p1: [[18.0], [19.0]])]])], p1: [s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0], [24.0]])]), s4(p0: [s1(p0: s0(p0: [[25.0], [26.0], [27.0]], p1: [[28.0], [29.0]]), p1: [[s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0]])], [s0(p0: [[35.0], [36.0], [37.0]], p1: [[38.0], [39.0]])], [s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0], [44.0]])]])], p1: [s0(p0: [[45.0], [46.0], [47.0]], p1: [[48.0], [49.0]])])], p1: [[s1(p0: s0(p0: [[50.0], [51.0], [52.0]], p1: [[53.0], [54.0]]), p1: [[s0(p0: [[55.0], [56.0], [57.0]], p1: [[58.0], [59.0]])], [s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0], [64.0]])], [s0(p0: [[65.0], [66.0], [67.0]], p1: [[68.0], [69.0]])]])]])
    let v1: [s3] = [s3(p0: s1(p0: s0(p0: [[70.0], [71.0], [72.0]], p1: [[73.0], [74.0]]), p1: [[s0(p0: [[75.0], [76.0], [77.0]], p1: [[78.0], [79.0]])], [s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0], [84.0]])], [s0(p0: [[85.0], [86.0], [87.0]], p1: [[88.0], [89.0]])]]), p1: s0(p0: [[90.0], [91.0], [92.0]], p1: [[93.0], [94.0]])), s3(p0: s1(p0: s0(p0: [[95.0], [96.0], [97.0]], p1: [[98.0], [99.0]]), p1: [[s0(p0: [[100.0], [101.0], [102.0]], p1: [[103.0], [104.0]])], [s0(p0: [[105.0], [106.0], [107.0]], p1: [[108.0], [109.0]])], [s0(p0: [[110.0], [111.0], [112.0]], p1: [[113.0], [114.0]])]]), p1: s0(p0: [[115.0], [116.0], [117.0]], p1: [[118.0], [119.0]]))]
    let v2: s2 = s2(p0: s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0], [124.0]]), p1: [s1(p0: s0(p0: [[125.0], [126.0], [127.0]], p1: [[128.0], [129.0]]), p1: [[s0(p0: [[130.0], [131.0], [132.0]], p1: [[133.0], [134.0]])], [s0(p0: [[135.0], [136.0], [137.0]], p1: [[138.0], [139.0]])], [s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0], [144.0]])]]), s1(p0: s0(p0: [[145.0], [146.0], [147.0]], p1: [[148.0], [149.0]]), p1: [[s0(p0: [[150.0], [151.0], [152.0]], p1: [[153.0], [154.0]])], [s0(p0: [[155.0], [156.0], [157.0]], p1: [[158.0], [159.0]])], [s0(p0: [[160.0], [161.0], [162.0]], p1: [[163.0], [164.0]])]])])
    let v3: Double = 165.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 165.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
