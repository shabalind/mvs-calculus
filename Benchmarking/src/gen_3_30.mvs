  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: Float
  } in
  struct s2 {
    var p0: s1
    var p1: s1
  } in
  struct s3 {
    var p0: [s0]
    var p1: [s1]
  } in
  struct s8 {
    var p0: s2
    var p1: s3
  } in
  let noinline_f0: ([s8], [s1], Float) -> Float = (v0: [s8], v1: [s1], v2: Float) -> Float {
    let v8: s8 = v0[0] in
    let v6: s3 = v8.p1 in
    let v7: s1 = v1[0] in
    let v10: [s1] = [v7, v7, v7, v7, v7] in
    let v24: [s1] = v6.p1 in
    let v85: s1 = v24[0] in
    let v46: s1 = v10[1] in
    let v57: Float = v46.p1 in
    let v44: Float = v57 / v57 in
    let v99: Float = v85.p1 in
    let v151: Float = v99 - v2 in
    let v141: Float = v151 + v44 in
    v141
  } in
  fun loop(i: Int, v0: [s8], v1: [s1], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s8] = [s8(s2(s1(s0([[0.0], [1.0]], [[2.0], [3.0]]), 4.0), s1(s0([[5.0], [6.0]], [[7.0], [8.0]]), 9.0)), s3([s0([[10.0], [11.0]], [[12.0], [13.0]]), s0([[14.0], [15.0]], [[16.0], [17.0]])], [s1(s0([[18.0], [19.0]], [[20.0], [21.0]]), 22.0), s1(s0([[23.0], [24.0]], [[25.0], [26.0]]), 27.0)])), s8(s2(s1(s0([[28.0], [29.0]], [[30.0], [31.0]]), 32.0), s1(s0([[33.0], [34.0]], [[35.0], [36.0]]), 37.0)), s3([s0([[38.0], [39.0]], [[40.0], [41.0]]), s0([[42.0], [43.0]], [[44.0], [45.0]])], [s1(s0([[46.0], [47.0]], [[48.0], [49.0]]), 50.0), s1(s0([[51.0], [52.0]], [[53.0], [54.0]]), 55.0)]))] in
    let v1: [s1] = [s1(s0([[56.0], [57.0]], [[58.0], [59.0]]), 60.0)] in
    let v2: Float = 61.0 in
    let initialResult: Float = 61.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()