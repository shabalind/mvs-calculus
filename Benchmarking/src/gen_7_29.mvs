  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
  } in
  struct s2 {
    var p0: s0
    var p1: [s0]
  } in
  struct s8 {
    var p0: [s1]
    var p1: [s2]
  } in
  let noinline_f0: (s8, Float) -> Float = (v0: s8, v1: Float) -> Float {
    var v4: Float = v1 in
    var v6: Float = v4 in
    var v3: Float = v4 in
    v6 = v3 in
    var v25: Float = v3 in
    var v31: Float = v3 in
    v31 = v25 in
    let v23: Float = v25 * v31 in
    v25 = v4 in
    v3 = v4 in
    let v35: [Float] = [v25, v25, v6, v31] in
    let v55: Float = v35[3] in
    let v38: Float = v55 - v25 in
    v6 = v23 in
    v38
  } in
  fun loop(i: Int, v0: s8, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s8 = s8([s1([[s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]])]], [s0([[6.0], [7.0], [8.0]], [[9.0], [10.0], [11.0]])])], [s2(s0([[12.0], [13.0], [14.0]], [[15.0], [16.0], [17.0]]), [s0([[18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0]])]), s2(s0([[24.0], [25.0], [26.0]], [[27.0], [28.0], [29.0]]), [s0([[30.0], [31.0], [32.0]], [[33.0], [34.0], [35.0]])])]) in
    let v1: Float = 36.0 in
    let initialResult: Float = 36.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()