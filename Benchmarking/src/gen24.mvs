  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
    var p3: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s0
    var p1: s1
  } in
  struct s3 {
    var p0: [[s2]]
    var p1: Float
    var p2: [s0]
  } in
  struct s8 {
    var p0: [s1]
    var p1: [s3]
  } in
  let f37: (s3) -> s3 = (v0: s3) -> s3 {
    let v6: [s0] = v0.p2 in
    let v2: [s0] = v0.p2 in
    var v16: s3 = v0 in
    v16.p2 = v6 in
    v16.p2 = v2 in
    v16.p2 = v2 in
    var v49: s3 = v0 in
    v16 = v49 in
    var v45: s3 = v16 in
    v45
  } in
  let f36: (s3) -> s3 = (v0: s3) -> s3 {
    let v3: Float = v0.p1 in
    var v5: s3 = v0 in
    let v2: s3 = f37(v5) in
    let v4: [[s2]] = v5.p0 in
    v5 = v0 in
    v5.p1 = v3 in
    var v7: Float = v3 in
    let v6: [s2] = v4[0] in
    var v12: [s2] = v6 in
    let v9: [[s2]] = v5.p0 in
    let v17: [s2] = v4[0] in
    var v13: [[s2]] = v9 in
    v13[0] = v12 in
    let v15: [s0] = v5.p2 in
    v13[0] = v12 in
    let v22: [s2] = v9[0] in
    let v18: Float = v2.p1 in
    v5.p1 = v18 in
    v13[0] = v22 in
    let v55: s3 = s3(v4, v7, v15) in
    var v37: [s2] = v12 in
    v13[0] = v12 in
    let v100: s3 = f37(v55) in
    v13[0] = v37 in
    let v50: s2 = v17[0] in
    v12[0] = v50 in
    v5.p0 = v13 in
    v13[0] = v6 in
    v100
  } in
  let f34: (s3) -> s3 = (v0: s3) -> s3 {
    let v7: s3 = f37(v0) in
    var v1: s3 = v7 in
    let v6: Float = v1.p1 in
    var v4: s3 = v1 in
    let v5: Float = v1.p1 in
    var v11: Float = v6 in
    let v15: [s0] = v0.p2 in
    v4.p2 = v15 in
    v1.p1 = v11 in
    v1.p2 = v15 in
    let v13: s3 = f37(v0) in
    v4.p1 = v5 in
    let v47: Float = v7.p1 in
    let v18: s3 = f36(v1) in
    let v30: s3 = f36(v4) in
    let v25: [s0] = v18.p2 in
    v1 = v13 in
    v4.p2 = v25 in
    let v20: [s0] = v4.p2 in
    v1.p1 = v47 in
    let v35: Float = v6 + v47 in
    v1.p1 = v35 in
    v1.p2 = v20 in
    v1.p2 = v15 in
    let v163: s3 = f37(v30) in
    let v170: s3 = f37(v163) in
    v170
  } in
  let f25: (s3) -> s3 = (v0: s3) -> s3 {
    var v1: s3 = v0 in
    let v5: s3 = f36(v0) in
    let v8: [[s2]] = v1.p0 in
    let v2: [s2] = v8[0] in
    let v13: Float = v5.p1 in
    var v6: Float = v13 in
    var v10: Float = v6 in
    let v11: s3 = f37(v1) in
    var v14: [s2] = v2 in
    v1.p1 = v10 in
    var v21: [[s2]] = v8 in
    v21[0] = v14 in
    v1.p0 = v21 in
    v1.p1 = v6 in
    v11
  } in
  let noinline_f0: ([s8], s1, Float) -> Float = (v0: [s8], v1: s1, v2: Float) -> Float {
    let v3: s8 = v0[0] in
    let v39: [s3] = v3.p1 in
    let v50: s3 = v39[0] in
    let v69: s3 = f25(v50) in
    let v72: s3 = f34(v69) in
    let v149: s3 = f36(v72) in
    let v136: s3 = f34(v149) in
    let v93: s3 = f34(v136) in
    let v83: Float = v93.p1 in
    v83
  } in
  fun loop(i: Int, v0: [s8], v1: s1, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s8] = [s8([s1(s0([[0.0]], [[1.0], [2.0]], [[3.0]], [[4.0]]), s0([[5.0]], [[6.0], [7.0]], [[8.0]], [[9.0]])), s1(s0([[10.0]], [[11.0], [12.0]], [[13.0]], [[14.0]]), s0([[15.0]], [[16.0], [17.0]], [[18.0]], [[19.0]])), s1(s0([[20.0]], [[21.0], [22.0]], [[23.0]], [[24.0]]), s0([[25.0]], [[26.0], [27.0]], [[28.0]], [[29.0]]))], [s3([[s2(s0([[30.0]], [[31.0], [32.0]], [[33.0]], [[34.0]]), s1(s0([[35.0]], [[36.0], [37.0]], [[38.0]], [[39.0]]), s0([[40.0]], [[41.0], [42.0]], [[43.0]], [[44.0]])))]], 45.0, [s0([[46.0]], [[47.0], [48.0]], [[49.0]], [[50.0]]), s0([[51.0]], [[52.0], [53.0]], [[54.0]], [[55.0]]), s0([[56.0]], [[57.0], [58.0]], [[59.0]], [[60.0]])])])] in
    let v1: s1 = s1(s0([[61.0]], [[62.0], [63.0]], [[64.0]], [[65.0]]), s0([[66.0]], [[67.0], [68.0]], [[69.0]], [[70.0]])) in
    let v2: Float = 71.0 in
    let initialResult: Float = 71.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()