  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
  } in
  struct s4 {
    var p0: [[s0]]
    var p1: [[s0]]
  } in
  struct s5 {
    var p0: s0
    var p1: [s1]
  } in
  struct s8 {
    var p0: s1
    var p1: [s4]
    var p2: s5
  } in
  struct s10 {
    var p0: [s8]
    var p1: [[s1]]
  } in
  let f64: (Float) -> Float = (v0: Float) -> Float {
    let v2: [Float] = [v0, v0, v0, v0] in
    var v5: [Float] = v2 in
    var v6: [Float] = v5 in
    let v7: Float = v5[0] in
    var v10: [Float] = v2 in
    let v4: Float = v10[3] in
    var v1: [Float] = v6 in
    let v11: Float = v6[3] in
    let v8: Float = v4 * v0 in
    v6[1] = v8 in
    let v9: [[Float]] = [v1, v6] in
    let v13: Float = v7 * v4 in
    v6 = v1 in
    v1 = v2 in
    let v28: [Float] = v9[1] in
    let v19: Float = v1[0] in
    let v31: Float = v1[3] in
    let v24: Float = v1[1] in
    v10[3] = v11 in
    let v35: Float = v28[2] in
    v6[3] = v24 in
    v6[3] = v13 in
    let v33: [Float] = [v31, v19, v19, v0, v0] in
    v5[1] = v35 in
    let v75: Float = v33[2] in
    v75
  } in
  let f21: (Float) -> Float = (v0: Float) -> Float {
    var v3: Float = v0 in
    let v5: Float = f64(v3) in
    var v6: Float = v0 in
    let v2: Float = f64(v6) in
    let v7: Float = f64(v2) in
    var v10: Float = v6 in
    let v1: Float = f64(v0) in
    let v9: Float = v1 * v5 in
    var v13: Float = v10 in
    var v25: Float = v13 in
    var v24: Float = v9 in
    var v11: Float = v13 in
    var v12: Float = v25 in
    let v18: Float = f64(v7) in
    let v19: Float = f64(v9) in
    var v17: Float = v13 in
    let v27: Float = f64(v13) in
    var v62: Float = v17 in
    let v29: Float = f64(v6) in
    let v39: Float = f64(v29) in
    var v49: Float = v39 in
    let v64: Float = f64(v49) in
    v6 = v64 in
    let v79: Float = f64(v19) in
    let v44: Float = f64(v27) in
    let v107: [Float] = [v12, v24, v44] in
    let v119: Float = f64(v79) in
    var v94: [Float] = v107 in
    v94[2] = v62 in
    var v90: [Float] = v94 in
    var v197: [Float] = v90 in
    v90[1] = v18 in
    let v113: Float = v90[0] in
    v90[0] = v17 in
    v197[2] = v119 in
    v90[0] = v113 in
    var v134: [Float] = v197 in
    let v115: Float = v134[0] in
    v134[1] = v11 in
    v115
  } in
  let noinline_f0: ([s10], s8, Float) -> Float = (v0: [s10], v1: s8, v2: Float) -> Float {
    var v18: Float = v2 in
    let v26: Float = f21(v18) in
    v26
  } in
  fun loop(i: Int, v0: [s10], v1: s8, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s10] = [s10([s8(s1([s0([[0.0]], [[1.0]]), s0([[2.0]], [[3.0]])], [[s0([[4.0]], [[5.0]])], [s0([[6.0]], [[7.0]])]]), [s4([[s0([[8.0]], [[9.0]])], [s0([[10.0]], [[11.0]])], [s0([[12.0]], [[13.0]])]], [[s0([[14.0]], [[15.0]])], [s0([[16.0]], [[17.0]])]]), s4([[s0([[18.0]], [[19.0]])], [s0([[20.0]], [[21.0]])], [s0([[22.0]], [[23.0]])]], [[s0([[24.0]], [[25.0]])], [s0([[26.0]], [[27.0]])]])], s5(s0([[28.0]], [[29.0]]), [s1([s0([[30.0]], [[31.0]]), s0([[32.0]], [[33.0]])], [[s0([[34.0]], [[35.0]])], [s0([[36.0]], [[37.0]])]])])), s8(s1([s0([[38.0]], [[39.0]]), s0([[40.0]], [[41.0]])], [[s0([[42.0]], [[43.0]])], [s0([[44.0]], [[45.0]])]]), [s4([[s0([[46.0]], [[47.0]])], [s0([[48.0]], [[49.0]])], [s0([[50.0]], [[51.0]])]], [[s0([[52.0]], [[53.0]])], [s0([[54.0]], [[55.0]])]]), s4([[s0([[56.0]], [[57.0]])], [s0([[58.0]], [[59.0]])], [s0([[60.0]], [[61.0]])]], [[s0([[62.0]], [[63.0]])], [s0([[64.0]], [[65.0]])]])], s5(s0([[66.0]], [[67.0]]), [s1([s0([[68.0]], [[69.0]]), s0([[70.0]], [[71.0]])], [[s0([[72.0]], [[73.0]])], [s0([[74.0]], [[75.0]])]])])), s8(s1([s0([[76.0]], [[77.0]]), s0([[78.0]], [[79.0]])], [[s0([[80.0]], [[81.0]])], [s0([[82.0]], [[83.0]])]]), [s4([[s0([[84.0]], [[85.0]])], [s0([[86.0]], [[87.0]])], [s0([[88.0]], [[89.0]])]], [[s0([[90.0]], [[91.0]])], [s0([[92.0]], [[93.0]])]]), s4([[s0([[94.0]], [[95.0]])], [s0([[96.0]], [[97.0]])], [s0([[98.0]], [[99.0]])]], [[s0([[100.0]], [[101.0]])], [s0([[102.0]], [[103.0]])]])], s5(s0([[104.0]], [[105.0]]), [s1([s0([[106.0]], [[107.0]]), s0([[108.0]], [[109.0]])], [[s0([[110.0]], [[111.0]])], [s0([[112.0]], [[113.0]])]])]))], [[s1([s0([[114.0]], [[115.0]]), s0([[116.0]], [[117.0]])], [[s0([[118.0]], [[119.0]])], [s0([[120.0]], [[121.0]])]])]]), s10([s8(s1([s0([[122.0]], [[123.0]]), s0([[124.0]], [[125.0]])], [[s0([[126.0]], [[127.0]])], [s0([[128.0]], [[129.0]])]]), [s4([[s0([[130.0]], [[131.0]])], [s0([[132.0]], [[133.0]])], [s0([[134.0]], [[135.0]])]], [[s0([[136.0]], [[137.0]])], [s0([[138.0]], [[139.0]])]]), s4([[s0([[140.0]], [[141.0]])], [s0([[142.0]], [[143.0]])], [s0([[144.0]], [[145.0]])]], [[s0([[146.0]], [[147.0]])], [s0([[148.0]], [[149.0]])]])], s5(s0([[150.0]], [[151.0]]), [s1([s0([[152.0]], [[153.0]]), s0([[154.0]], [[155.0]])], [[s0([[156.0]], [[157.0]])], [s0([[158.0]], [[159.0]])]])])), s8(s1([s0([[160.0]], [[161.0]]), s0([[162.0]], [[163.0]])], [[s0([[164.0]], [[165.0]])], [s0([[166.0]], [[167.0]])]]), [s4([[s0([[168.0]], [[169.0]])], [s0([[170.0]], [[171.0]])], [s0([[172.0]], [[173.0]])]], [[s0([[174.0]], [[175.0]])], [s0([[176.0]], [[177.0]])]]), s4([[s0([[178.0]], [[179.0]])], [s0([[180.0]], [[181.0]])], [s0([[182.0]], [[183.0]])]], [[s0([[184.0]], [[185.0]])], [s0([[186.0]], [[187.0]])]])], s5(s0([[188.0]], [[189.0]]), [s1([s0([[190.0]], [[191.0]]), s0([[192.0]], [[193.0]])], [[s0([[194.0]], [[195.0]])], [s0([[196.0]], [[197.0]])]])])), s8(s1([s0([[198.0]], [[199.0]]), s0([[200.0]], [[201.0]])], [[s0([[202.0]], [[203.0]])], [s0([[204.0]], [[205.0]])]]), [s4([[s0([[206.0]], [[207.0]])], [s0([[208.0]], [[209.0]])], [s0([[210.0]], [[211.0]])]], [[s0([[212.0]], [[213.0]])], [s0([[214.0]], [[215.0]])]]), s4([[s0([[216.0]], [[217.0]])], [s0([[218.0]], [[219.0]])], [s0([[220.0]], [[221.0]])]], [[s0([[222.0]], [[223.0]])], [s0([[224.0]], [[225.0]])]])], s5(s0([[226.0]], [[227.0]]), [s1([s0([[228.0]], [[229.0]]), s0([[230.0]], [[231.0]])], [[s0([[232.0]], [[233.0]])], [s0([[234.0]], [[235.0]])]])]))], [[s1([s0([[236.0]], [[237.0]]), s0([[238.0]], [[239.0]])], [[s0([[240.0]], [[241.0]])], [s0([[242.0]], [[243.0]])]])]])] in
    let v1: s8 = s8(s1([s0([[244.0]], [[245.0]]), s0([[246.0]], [[247.0]])], [[s0([[248.0]], [[249.0]])], [s0([[250.0]], [[251.0]])]]), [s4([[s0([[252.0]], [[253.0]])], [s0([[254.0]], [[255.0]])], [s0([[256.0]], [[257.0]])]], [[s0([[258.0]], [[259.0]])], [s0([[260.0]], [[261.0]])]]), s4([[s0([[262.0]], [[263.0]])], [s0([[264.0]], [[265.0]])], [s0([[266.0]], [[267.0]])]], [[s0([[268.0]], [[269.0]])], [s0([[270.0]], [[271.0]])]])], s5(s0([[272.0]], [[273.0]]), [s1([s0([[274.0]], [[275.0]]), s0([[276.0]], [[277.0]])], [[s0([[278.0]], [[279.0]])], [s0([[280.0]], [[281.0]])]])])) in
    let v2: Float = 282.0 in
    let initialResult: Float = 282.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()