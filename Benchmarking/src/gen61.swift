  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [Double]
  }
  struct s2 {
    var p0: [s1]
    var p1: s1
  }
  struct s3 {
    var p0: [[s0]]
    var p1: s2
  }
  struct s4 {
    var p0: [s3]
    var p1: s1
  }
  struct s6 {
    var p0: [s4]
    var p1: [[s1]]
  }
  @inline(never)
  func f0(_ v0: s4, _ v1: [s0], _ v2: s4, _ v3: [[s6]], _ v4: s0, _ v5: Double) -> Double {
    let v9: [s6] = v3[2]
    var v7: [s6] = v9
    let v11: s6 = v7[0]
    v7[0] = v11
    v7[0] = v11
    let v30: [[s1]] = v11.p1
    v7[0] = v11
    let v24: [s1] = v30[0]
    let v117: s1 = v24[0]
    let v104: [Double] = v117.p1
    v7[0] = v11
    let v72: Double = v104[1]
    let v143: Double = v72 * v5
    return v143
  }
  func benchmark() {
    let v0: s4 = s4(p0: [s3(p0: [[s0(p0: [[0.0]], p1: [[1.0], [2.0], [3.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[4.0]], p1: [[5.0], [6.0], [7.0]]), p1: [8.0, 9.0, 10.0]), s1(p0: s0(p0: [[11.0]], p1: [[12.0], [13.0], [14.0]]), p1: [15.0, 16.0, 17.0]), s1(p0: s0(p0: [[18.0]], p1: [[19.0], [20.0], [21.0]]), p1: [22.0, 23.0, 24.0])], p1: s1(p0: s0(p0: [[25.0]], p1: [[26.0], [27.0], [28.0]]), p1: [29.0, 30.0, 31.0]))), s3(p0: [[s0(p0: [[32.0]], p1: [[33.0], [34.0], [35.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[36.0]], p1: [[37.0], [38.0], [39.0]]), p1: [40.0, 41.0, 42.0]), s1(p0: s0(p0: [[43.0]], p1: [[44.0], [45.0], [46.0]]), p1: [47.0, 48.0, 49.0]), s1(p0: s0(p0: [[50.0]], p1: [[51.0], [52.0], [53.0]]), p1: [54.0, 55.0, 56.0])], p1: s1(p0: s0(p0: [[57.0]], p1: [[58.0], [59.0], [60.0]]), p1: [61.0, 62.0, 63.0]))), s3(p0: [[s0(p0: [[64.0]], p1: [[65.0], [66.0], [67.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[68.0]], p1: [[69.0], [70.0], [71.0]]), p1: [72.0, 73.0, 74.0]), s1(p0: s0(p0: [[75.0]], p1: [[76.0], [77.0], [78.0]]), p1: [79.0, 80.0, 81.0]), s1(p0: s0(p0: [[82.0]], p1: [[83.0], [84.0], [85.0]]), p1: [86.0, 87.0, 88.0])], p1: s1(p0: s0(p0: [[89.0]], p1: [[90.0], [91.0], [92.0]]), p1: [93.0, 94.0, 95.0])))], p1: s1(p0: s0(p0: [[96.0]], p1: [[97.0], [98.0], [99.0]]), p1: [100.0, 101.0, 102.0]))
    let v1: [s0] = [s0(p0: [[103.0]], p1: [[104.0], [105.0], [106.0]]), s0(p0: [[107.0]], p1: [[108.0], [109.0], [110.0]])]
    let v2: s4 = s4(p0: [s3(p0: [[s0(p0: [[111.0]], p1: [[112.0], [113.0], [114.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[115.0]], p1: [[116.0], [117.0], [118.0]]), p1: [119.0, 120.0, 121.0]), s1(p0: s0(p0: [[122.0]], p1: [[123.0], [124.0], [125.0]]), p1: [126.0, 127.0, 128.0]), s1(p0: s0(p0: [[129.0]], p1: [[130.0], [131.0], [132.0]]), p1: [133.0, 134.0, 135.0])], p1: s1(p0: s0(p0: [[136.0]], p1: [[137.0], [138.0], [139.0]]), p1: [140.0, 141.0, 142.0]))), s3(p0: [[s0(p0: [[143.0]], p1: [[144.0], [145.0], [146.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[147.0]], p1: [[148.0], [149.0], [150.0]]), p1: [151.0, 152.0, 153.0]), s1(p0: s0(p0: [[154.0]], p1: [[155.0], [156.0], [157.0]]), p1: [158.0, 159.0, 160.0]), s1(p0: s0(p0: [[161.0]], p1: [[162.0], [163.0], [164.0]]), p1: [165.0, 166.0, 167.0])], p1: s1(p0: s0(p0: [[168.0]], p1: [[169.0], [170.0], [171.0]]), p1: [172.0, 173.0, 174.0]))), s3(p0: [[s0(p0: [[175.0]], p1: [[176.0], [177.0], [178.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[179.0]], p1: [[180.0], [181.0], [182.0]]), p1: [183.0, 184.0, 185.0]), s1(p0: s0(p0: [[186.0]], p1: [[187.0], [188.0], [189.0]]), p1: [190.0, 191.0, 192.0]), s1(p0: s0(p0: [[193.0]], p1: [[194.0], [195.0], [196.0]]), p1: [197.0, 198.0, 199.0])], p1: s1(p0: s0(p0: [[200.0]], p1: [[201.0], [202.0], [203.0]]), p1: [204.0, 205.0, 206.0])))], p1: s1(p0: s0(p0: [[207.0]], p1: [[208.0], [209.0], [210.0]]), p1: [211.0, 212.0, 213.0]))
    let v3: [[s6]] = [[s6(p0: [s4(p0: [s3(p0: [[s0(p0: [[214.0]], p1: [[215.0], [216.0], [217.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[218.0]], p1: [[219.0], [220.0], [221.0]]), p1: [222.0, 223.0, 224.0]), s1(p0: s0(p0: [[225.0]], p1: [[226.0], [227.0], [228.0]]), p1: [229.0, 230.0, 231.0]), s1(p0: s0(p0: [[232.0]], p1: [[233.0], [234.0], [235.0]]), p1: [236.0, 237.0, 238.0])], p1: s1(p0: s0(p0: [[239.0]], p1: [[240.0], [241.0], [242.0]]), p1: [243.0, 244.0, 245.0]))), s3(p0: [[s0(p0: [[246.0]], p1: [[247.0], [248.0], [249.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[250.0]], p1: [[251.0], [252.0], [253.0]]), p1: [254.0, 255.0, 256.0]), s1(p0: s0(p0: [[257.0]], p1: [[258.0], [259.0], [260.0]]), p1: [261.0, 262.0, 263.0]), s1(p0: s0(p0: [[264.0]], p1: [[265.0], [266.0], [267.0]]), p1: [268.0, 269.0, 270.0])], p1: s1(p0: s0(p0: [[271.0]], p1: [[272.0], [273.0], [274.0]]), p1: [275.0, 276.0, 277.0]))), s3(p0: [[s0(p0: [[278.0]], p1: [[279.0], [280.0], [281.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[282.0]], p1: [[283.0], [284.0], [285.0]]), p1: [286.0, 287.0, 288.0]), s1(p0: s0(p0: [[289.0]], p1: [[290.0], [291.0], [292.0]]), p1: [293.0, 294.0, 295.0]), s1(p0: s0(p0: [[296.0]], p1: [[297.0], [298.0], [299.0]]), p1: [300.0, 301.0, 302.0])], p1: s1(p0: s0(p0: [[303.0]], p1: [[304.0], [305.0], [306.0]]), p1: [307.0, 308.0, 309.0])))], p1: s1(p0: s0(p0: [[310.0]], p1: [[311.0], [312.0], [313.0]]), p1: [314.0, 315.0, 316.0])), s4(p0: [s3(p0: [[s0(p0: [[317.0]], p1: [[318.0], [319.0], [320.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[321.0]], p1: [[322.0], [323.0], [324.0]]), p1: [325.0, 326.0, 327.0]), s1(p0: s0(p0: [[328.0]], p1: [[329.0], [330.0], [331.0]]), p1: [332.0, 333.0, 334.0]), s1(p0: s0(p0: [[335.0]], p1: [[336.0], [337.0], [338.0]]), p1: [339.0, 340.0, 341.0])], p1: s1(p0: s0(p0: [[342.0]], p1: [[343.0], [344.0], [345.0]]), p1: [346.0, 347.0, 348.0]))), s3(p0: [[s0(p0: [[349.0]], p1: [[350.0], [351.0], [352.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[353.0]], p1: [[354.0], [355.0], [356.0]]), p1: [357.0, 358.0, 359.0]), s1(p0: s0(p0: [[360.0]], p1: [[361.0], [362.0], [363.0]]), p1: [364.0, 365.0, 366.0]), s1(p0: s0(p0: [[367.0]], p1: [[368.0], [369.0], [370.0]]), p1: [371.0, 372.0, 373.0])], p1: s1(p0: s0(p0: [[374.0]], p1: [[375.0], [376.0], [377.0]]), p1: [378.0, 379.0, 380.0]))), s3(p0: [[s0(p0: [[381.0]], p1: [[382.0], [383.0], [384.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[385.0]], p1: [[386.0], [387.0], [388.0]]), p1: [389.0, 390.0, 391.0]), s1(p0: s0(p0: [[392.0]], p1: [[393.0], [394.0], [395.0]]), p1: [396.0, 397.0, 398.0]), s1(p0: s0(p0: [[399.0]], p1: [[400.0], [401.0], [402.0]]), p1: [403.0, 404.0, 405.0])], p1: s1(p0: s0(p0: [[406.0]], p1: [[407.0], [408.0], [409.0]]), p1: [410.0, 411.0, 412.0])))], p1: s1(p0: s0(p0: [[413.0]], p1: [[414.0], [415.0], [416.0]]), p1: [417.0, 418.0, 419.0])), s4(p0: [s3(p0: [[s0(p0: [[420.0]], p1: [[421.0], [422.0], [423.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[424.0]], p1: [[425.0], [426.0], [427.0]]), p1: [428.0, 429.0, 430.0]), s1(p0: s0(p0: [[431.0]], p1: [[432.0], [433.0], [434.0]]), p1: [435.0, 436.0, 437.0]), s1(p0: s0(p0: [[438.0]], p1: [[439.0], [440.0], [441.0]]), p1: [442.0, 443.0, 444.0])], p1: s1(p0: s0(p0: [[445.0]], p1: [[446.0], [447.0], [448.0]]), p1: [449.0, 450.0, 451.0]))), s3(p0: [[s0(p0: [[452.0]], p1: [[453.0], [454.0], [455.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[456.0]], p1: [[457.0], [458.0], [459.0]]), p1: [460.0, 461.0, 462.0]), s1(p0: s0(p0: [[463.0]], p1: [[464.0], [465.0], [466.0]]), p1: [467.0, 468.0, 469.0]), s1(p0: s0(p0: [[470.0]], p1: [[471.0], [472.0], [473.0]]), p1: [474.0, 475.0, 476.0])], p1: s1(p0: s0(p0: [[477.0]], p1: [[478.0], [479.0], [480.0]]), p1: [481.0, 482.0, 483.0]))), s3(p0: [[s0(p0: [[484.0]], p1: [[485.0], [486.0], [487.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[488.0]], p1: [[489.0], [490.0], [491.0]]), p1: [492.0, 493.0, 494.0]), s1(p0: s0(p0: [[495.0]], p1: [[496.0], [497.0], [498.0]]), p1: [499.0, 500.0, 501.0]), s1(p0: s0(p0: [[502.0]], p1: [[503.0], [504.0], [505.0]]), p1: [506.0, 507.0, 508.0])], p1: s1(p0: s0(p0: [[509.0]], p1: [[510.0], [511.0], [512.0]]), p1: [513.0, 514.0, 515.0])))], p1: s1(p0: s0(p0: [[516.0]], p1: [[517.0], [518.0], [519.0]]), p1: [520.0, 521.0, 522.0]))], p1: [[s1(p0: s0(p0: [[523.0]], p1: [[524.0], [525.0], [526.0]]), p1: [527.0, 528.0, 529.0])]])], [s6(p0: [s4(p0: [s3(p0: [[s0(p0: [[530.0]], p1: [[531.0], [532.0], [533.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[534.0]], p1: [[535.0], [536.0], [537.0]]), p1: [538.0, 539.0, 540.0]), s1(p0: s0(p0: [[541.0]], p1: [[542.0], [543.0], [544.0]]), p1: [545.0, 546.0, 547.0]), s1(p0: s0(p0: [[548.0]], p1: [[549.0], [550.0], [551.0]]), p1: [552.0, 553.0, 554.0])], p1: s1(p0: s0(p0: [[555.0]], p1: [[556.0], [557.0], [558.0]]), p1: [559.0, 560.0, 561.0]))), s3(p0: [[s0(p0: [[562.0]], p1: [[563.0], [564.0], [565.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[566.0]], p1: [[567.0], [568.0], [569.0]]), p1: [570.0, 571.0, 572.0]), s1(p0: s0(p0: [[573.0]], p1: [[574.0], [575.0], [576.0]]), p1: [577.0, 578.0, 579.0]), s1(p0: s0(p0: [[580.0]], p1: [[581.0], [582.0], [583.0]]), p1: [584.0, 585.0, 586.0])], p1: s1(p0: s0(p0: [[587.0]], p1: [[588.0], [589.0], [590.0]]), p1: [591.0, 592.0, 593.0]))), s3(p0: [[s0(p0: [[594.0]], p1: [[595.0], [596.0], [597.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[598.0]], p1: [[599.0], [600.0], [601.0]]), p1: [602.0, 603.0, 604.0]), s1(p0: s0(p0: [[605.0]], p1: [[606.0], [607.0], [608.0]]), p1: [609.0, 610.0, 611.0]), s1(p0: s0(p0: [[612.0]], p1: [[613.0], [614.0], [615.0]]), p1: [616.0, 617.0, 618.0])], p1: s1(p0: s0(p0: [[619.0]], p1: [[620.0], [621.0], [622.0]]), p1: [623.0, 624.0, 625.0])))], p1: s1(p0: s0(p0: [[626.0]], p1: [[627.0], [628.0], [629.0]]), p1: [630.0, 631.0, 632.0])), s4(p0: [s3(p0: [[s0(p0: [[633.0]], p1: [[634.0], [635.0], [636.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[637.0]], p1: [[638.0], [639.0], [640.0]]), p1: [641.0, 642.0, 643.0]), s1(p0: s0(p0: [[644.0]], p1: [[645.0], [646.0], [647.0]]), p1: [648.0, 649.0, 650.0]), s1(p0: s0(p0: [[651.0]], p1: [[652.0], [653.0], [654.0]]), p1: [655.0, 656.0, 657.0])], p1: s1(p0: s0(p0: [[658.0]], p1: [[659.0], [660.0], [661.0]]), p1: [662.0, 663.0, 664.0]))), s3(p0: [[s0(p0: [[665.0]], p1: [[666.0], [667.0], [668.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[669.0]], p1: [[670.0], [671.0], [672.0]]), p1: [673.0, 674.0, 675.0]), s1(p0: s0(p0: [[676.0]], p1: [[677.0], [678.0], [679.0]]), p1: [680.0, 681.0, 682.0]), s1(p0: s0(p0: [[683.0]], p1: [[684.0], [685.0], [686.0]]), p1: [687.0, 688.0, 689.0])], p1: s1(p0: s0(p0: [[690.0]], p1: [[691.0], [692.0], [693.0]]), p1: [694.0, 695.0, 696.0]))), s3(p0: [[s0(p0: [[697.0]], p1: [[698.0], [699.0], [700.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[701.0]], p1: [[702.0], [703.0], [704.0]]), p1: [705.0, 706.0, 707.0]), s1(p0: s0(p0: [[708.0]], p1: [[709.0], [710.0], [711.0]]), p1: [712.0, 713.0, 714.0]), s1(p0: s0(p0: [[715.0]], p1: [[716.0], [717.0], [718.0]]), p1: [719.0, 720.0, 721.0])], p1: s1(p0: s0(p0: [[722.0]], p1: [[723.0], [724.0], [725.0]]), p1: [726.0, 727.0, 728.0])))], p1: s1(p0: s0(p0: [[729.0]], p1: [[730.0], [731.0], [732.0]]), p1: [733.0, 734.0, 735.0])), s4(p0: [s3(p0: [[s0(p0: [[736.0]], p1: [[737.0], [738.0], [739.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[740.0]], p1: [[741.0], [742.0], [743.0]]), p1: [744.0, 745.0, 746.0]), s1(p0: s0(p0: [[747.0]], p1: [[748.0], [749.0], [750.0]]), p1: [751.0, 752.0, 753.0]), s1(p0: s0(p0: [[754.0]], p1: [[755.0], [756.0], [757.0]]), p1: [758.0, 759.0, 760.0])], p1: s1(p0: s0(p0: [[761.0]], p1: [[762.0], [763.0], [764.0]]), p1: [765.0, 766.0, 767.0]))), s3(p0: [[s0(p0: [[768.0]], p1: [[769.0], [770.0], [771.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[772.0]], p1: [[773.0], [774.0], [775.0]]), p1: [776.0, 777.0, 778.0]), s1(p0: s0(p0: [[779.0]], p1: [[780.0], [781.0], [782.0]]), p1: [783.0, 784.0, 785.0]), s1(p0: s0(p0: [[786.0]], p1: [[787.0], [788.0], [789.0]]), p1: [790.0, 791.0, 792.0])], p1: s1(p0: s0(p0: [[793.0]], p1: [[794.0], [795.0], [796.0]]), p1: [797.0, 798.0, 799.0]))), s3(p0: [[s0(p0: [[800.0]], p1: [[801.0], [802.0], [803.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[804.0]], p1: [[805.0], [806.0], [807.0]]), p1: [808.0, 809.0, 810.0]), s1(p0: s0(p0: [[811.0]], p1: [[812.0], [813.0], [814.0]]), p1: [815.0, 816.0, 817.0]), s1(p0: s0(p0: [[818.0]], p1: [[819.0], [820.0], [821.0]]), p1: [822.0, 823.0, 824.0])], p1: s1(p0: s0(p0: [[825.0]], p1: [[826.0], [827.0], [828.0]]), p1: [829.0, 830.0, 831.0])))], p1: s1(p0: s0(p0: [[832.0]], p1: [[833.0], [834.0], [835.0]]), p1: [836.0, 837.0, 838.0]))], p1: [[s1(p0: s0(p0: [[839.0]], p1: [[840.0], [841.0], [842.0]]), p1: [843.0, 844.0, 845.0])]])], [s6(p0: [s4(p0: [s3(p0: [[s0(p0: [[846.0]], p1: [[847.0], [848.0], [849.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[850.0]], p1: [[851.0], [852.0], [853.0]]), p1: [854.0, 855.0, 856.0]), s1(p0: s0(p0: [[857.0]], p1: [[858.0], [859.0], [860.0]]), p1: [861.0, 862.0, 863.0]), s1(p0: s0(p0: [[864.0]], p1: [[865.0], [866.0], [867.0]]), p1: [868.0, 869.0, 870.0])], p1: s1(p0: s0(p0: [[871.0]], p1: [[872.0], [873.0], [874.0]]), p1: [875.0, 876.0, 877.0]))), s3(p0: [[s0(p0: [[878.0]], p1: [[879.0], [880.0], [881.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[882.0]], p1: [[883.0], [884.0], [885.0]]), p1: [886.0, 887.0, 888.0]), s1(p0: s0(p0: [[889.0]], p1: [[890.0], [891.0], [892.0]]), p1: [893.0, 894.0, 895.0]), s1(p0: s0(p0: [[896.0]], p1: [[897.0], [898.0], [899.0]]), p1: [900.0, 901.0, 902.0])], p1: s1(p0: s0(p0: [[903.0]], p1: [[904.0], [905.0], [906.0]]), p1: [907.0, 908.0, 909.0]))), s3(p0: [[s0(p0: [[910.0]], p1: [[911.0], [912.0], [913.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[914.0]], p1: [[915.0], [916.0], [917.0]]), p1: [918.0, 919.0, 920.0]), s1(p0: s0(p0: [[921.0]], p1: [[922.0], [923.0], [924.0]]), p1: [925.0, 926.0, 927.0]), s1(p0: s0(p0: [[928.0]], p1: [[929.0], [930.0], [931.0]]), p1: [932.0, 933.0, 934.0])], p1: s1(p0: s0(p0: [[935.0]], p1: [[936.0], [937.0], [938.0]]), p1: [939.0, 940.0, 941.0])))], p1: s1(p0: s0(p0: [[942.0]], p1: [[943.0], [944.0], [945.0]]), p1: [946.0, 947.0, 948.0])), s4(p0: [s3(p0: [[s0(p0: [[949.0]], p1: [[950.0], [951.0], [952.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[953.0]], p1: [[954.0], [955.0], [956.0]]), p1: [957.0, 958.0, 959.0]), s1(p0: s0(p0: [[960.0]], p1: [[961.0], [962.0], [963.0]]), p1: [964.0, 965.0, 966.0]), s1(p0: s0(p0: [[967.0]], p1: [[968.0], [969.0], [970.0]]), p1: [971.0, 972.0, 973.0])], p1: s1(p0: s0(p0: [[974.0]], p1: [[975.0], [976.0], [977.0]]), p1: [978.0, 979.0, 980.0]))), s3(p0: [[s0(p0: [[981.0]], p1: [[982.0], [983.0], [984.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[985.0]], p1: [[986.0], [987.0], [988.0]]), p1: [989.0, 990.0, 991.0]), s1(p0: s0(p0: [[992.0]], p1: [[993.0], [994.0], [995.0]]), p1: [996.0, 997.0, 998.0]), s1(p0: s0(p0: [[999.0]], p1: [[1000.0], [1001.0], [1002.0]]), p1: [1003.0, 1004.0, 1005.0])], p1: s1(p0: s0(p0: [[1006.0]], p1: [[1007.0], [1008.0], [1009.0]]), p1: [1010.0, 1011.0, 1012.0]))), s3(p0: [[s0(p0: [[1013.0]], p1: [[1014.0], [1015.0], [1016.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[1017.0]], p1: [[1018.0], [1019.0], [1020.0]]), p1: [1021.0, 1022.0, 1023.0]), s1(p0: s0(p0: [[1024.0]], p1: [[1025.0], [1026.0], [1027.0]]), p1: [1028.0, 1029.0, 1030.0]), s1(p0: s0(p0: [[1031.0]], p1: [[1032.0], [1033.0], [1034.0]]), p1: [1035.0, 1036.0, 1037.0])], p1: s1(p0: s0(p0: [[1038.0]], p1: [[1039.0], [1040.0], [1041.0]]), p1: [1042.0, 1043.0, 1044.0])))], p1: s1(p0: s0(p0: [[1045.0]], p1: [[1046.0], [1047.0], [1048.0]]), p1: [1049.0, 1050.0, 1051.0])), s4(p0: [s3(p0: [[s0(p0: [[1052.0]], p1: [[1053.0], [1054.0], [1055.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[1056.0]], p1: [[1057.0], [1058.0], [1059.0]]), p1: [1060.0, 1061.0, 1062.0]), s1(p0: s0(p0: [[1063.0]], p1: [[1064.0], [1065.0], [1066.0]]), p1: [1067.0, 1068.0, 1069.0]), s1(p0: s0(p0: [[1070.0]], p1: [[1071.0], [1072.0], [1073.0]]), p1: [1074.0, 1075.0, 1076.0])], p1: s1(p0: s0(p0: [[1077.0]], p1: [[1078.0], [1079.0], [1080.0]]), p1: [1081.0, 1082.0, 1083.0]))), s3(p0: [[s0(p0: [[1084.0]], p1: [[1085.0], [1086.0], [1087.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[1088.0]], p1: [[1089.0], [1090.0], [1091.0]]), p1: [1092.0, 1093.0, 1094.0]), s1(p0: s0(p0: [[1095.0]], p1: [[1096.0], [1097.0], [1098.0]]), p1: [1099.0, 1100.0, 1101.0]), s1(p0: s0(p0: [[1102.0]], p1: [[1103.0], [1104.0], [1105.0]]), p1: [1106.0, 1107.0, 1108.0])], p1: s1(p0: s0(p0: [[1109.0]], p1: [[1110.0], [1111.0], [1112.0]]), p1: [1113.0, 1114.0, 1115.0]))), s3(p0: [[s0(p0: [[1116.0]], p1: [[1117.0], [1118.0], [1119.0]])]], p1: s2(p0: [s1(p0: s0(p0: [[1120.0]], p1: [[1121.0], [1122.0], [1123.0]]), p1: [1124.0, 1125.0, 1126.0]), s1(p0: s0(p0: [[1127.0]], p1: [[1128.0], [1129.0], [1130.0]]), p1: [1131.0, 1132.0, 1133.0]), s1(p0: s0(p0: [[1134.0]], p1: [[1135.0], [1136.0], [1137.0]]), p1: [1138.0, 1139.0, 1140.0])], p1: s1(p0: s0(p0: [[1141.0]], p1: [[1142.0], [1143.0], [1144.0]]), p1: [1145.0, 1146.0, 1147.0])))], p1: s1(p0: s0(p0: [[1148.0]], p1: [[1149.0], [1150.0], [1151.0]]), p1: [1152.0, 1153.0, 1154.0]))], p1: [[s1(p0: s0(p0: [[1155.0]], p1: [[1156.0], [1157.0], [1158.0]]), p1: [1159.0, 1160.0, 1161.0])]])]]
    let v4: s0 = s0(p0: [[1162.0]], p1: [[1163.0], [1164.0], [1165.0]])
    let v5: Double = 1166.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 1166.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4, v5)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
