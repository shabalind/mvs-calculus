  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
    var p2: [s0]
  } in
  let f17: (s0) -> s0 = (v0: s0) -> s0 {
    let v4: [[Float]] = v0.p0 in
    let v6: [s0] = [v0, v0, v0, v0, v0] in
    let v5: [Float] = v4[1] in
    let v7: [[Float]] = v0.p1 in
    var v2: [s0] = v6 in
    let v8: s0 = s0(v4, v7) in
    let v1: Float = v5[0] in
    v2[1] = v8 in
    var v3: [[Float]] = v7 in
    let v16: s0 = v2[2] in
    let v12: [[Float]] = v0.p1 in
    var v10: [[Float]] = v3 in
    let v33: [[Float]] = v0.p0 in
    let v13: [Float] = v10[0] in
    let v21: [[Float]] = v8.p0 in
    var v19: [Float] = v13 in
    var v15: Float = v1 in
    let v24: Float = v1 - v15 in
    let v27: [[[Float]]] = [v3, v3, v7, v7] in
    let v39: [[Float]] = v8.p1 in
    let v25: [[Float]] = v0.p1 in
    let v50: s0 = s0(v33, v25) in
    let v23: [[Float]] = v50.p1 in
    let v34: [[Float]] = v27[1] in
    var v26: [Float] = v5 in
    v19[0] = v24 in
    v10 = v12 in
    let v44: [[Float]] = v0.p0 in
    v19[0] = v1 in
    let v35: [[Float]] = v8.p1 in
    var v41: [[[Float]]] = v27 in
    var v36: s0 = v16 in
    v36.p1 = v23 in
    v36.p1 = v35 in
    v3[0] = v5 in
    v36.p0 = v44 in
    let v52: [[Float]] = v36.p0 in
    v3[0] = v19 in
    v2[0] = v0 in
    let v57: s0 = s0(v52, v23) in
    v3[0] = v26 in
    v26[0] = v15 in
    let v108: [[Float]] = v41[1] in
    v41[1] = v108 in
    let v69: Float = v19[0] in
    v26[0] = v69 in
    v36.p1 = v34 in
    let v111: [[Float]] = v27[3] in
    let v112: s0 = s0(v21, v39) in
    let v89: [[Float]] = v112.p1 in
    v36.p1 = v108 in
    v36.p1 = v7 in
    v36.p1 = v89 in
    v36.p0 = v52 in
    v36.p1 = v10 in
    v36.p1 = v111 in
    v57
  } in
  let noinline_f0: ([s1], Float) -> Float = (v0: [s1], v1: Float) -> Float {
    let v2: s1 = v0[1] in
    var v6: s1 = v2 in
    let v3: s0 = v6.p0 in
    v6.p0 = v3 in
    let v5: [[Float]] = v3.p1 in
    let v7: s0 = v2.p0 in
    v6.p0 = v7 in
    let v13: [Float] = v5[0] in
    v6.p1 = v3 in
    let v9: [s0] = v6.p2 in
    var v19: [s0] = v9 in
    var v10: s0 = v3 in
    v6.p0 = v7 in
    let v12: s0 = v9[0] in
    let v15: s0 = v19[1] in
    v6.p2 = v19 in
    let v23: s1 = v0[0] in
    var v29: s1 = v2 in
    var v21: [[Float]] = v5 in
    var v24: s1 = v23 in
    var v40: [s0] = v19 in
    var v34: s1 = v29 in
    v34.p1 = v12 in
    v34.p1 = v7 in
    v10.p1 = v21 in
    v34.p2 = v9 in
    let v26: s0 = v34.p0 in
    let v35: s0 = v24.p1 in
    let v83: s0 = v23.p1 in
    v6.p2 = v40 in
    v40 = v19 in
    v6.p2 = v9 in
    let v73: s0 = f17(v26) in
    let v17: s0 = f17(v83) in
    let v51: Float = v13[0] in
    let v66: s0 = f17(v83) in
    v29.p0 = v17 in
    let v63: [[Float]] = v66.p1 in
    v6.p1 = v10 in
    v34.p0 = v12 in
    v34.p2 = v40 in
    v34.p2 = v9 in
    v24.p2 = v19 in
    v10.p1 = v63 in
    let v107: [[Float]] = v73.p0 in
    v10.p0 = v107 in
    v40[1] = v15 in
    v29.p1 = v35 in
    v51
  } in
  fun loop(i: Int, v0: [s1], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1(s0([[0.0], [1.0], [2.0]], [[3.0]]), s0([[4.0], [5.0], [6.0]], [[7.0]]), [s0([[8.0], [9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0], [14.0]], [[15.0]])]), s1(s0([[16.0], [17.0], [18.0]], [[19.0]]), s0([[20.0], [21.0], [22.0]], [[23.0]]), [s0([[24.0], [25.0], [26.0]], [[27.0]]), s0([[28.0], [29.0], [30.0]], [[31.0]])])] in
    let v1: Float = 32.0 in
    let initialResult: Float = 32.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()