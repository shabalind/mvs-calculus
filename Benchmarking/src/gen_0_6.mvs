  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let f32: (s0) -> s0 = (v0: s0) -> s0 {
    var v7: s0 = v0 in
    let v1: [[Float]] = v7.p1 in
    var v4: [[Float]] = v1 in
    var v6: s0 = v0 in
    var v2: s0 = v6 in
    let v5: [Float] = v1[1] in
    var v3: [Float] = v5 in
    v4[2] = v5 in
    let v11: [[Float]] = v6.p0 in
    v7.p1 = v1 in
    let v9: Float = v5[0] in
    let v8: [Float] = [v9, v9, v9, v9, v9] in
    var v18: [[Float]] = v11 in
    let v22: [[Float]] = v2.p1 in
    v6.p0 = v11 in
    var v10: [[Float]] = v22 in
    v18[0] = v3 in
    v7 = v2 in
    let v26: s0 = s0(v18, v1) in
    let v27: Float = v8[1] in
    var v45: s0 = v0 in
    let v23: [Float] = v4[0] in
    let v28: [[Float]] = v2.p1 in
    v6.p1 = v10 in
    let v38: [[Float]] = v2.p1 in
    let v34: [Float] = v28[1] in
    let v41: Float = v23[0] in
    v2.p0 = v11 in
    var v33: s0 = v0 in
    v6.p1 = v38 in
    v3[0] = v41 in
    let v42: [Float] = v18[1] in
    let v116: [[Float]] = v26.p0 in
    let v112: [[Float]] = v0.p1 in
    let v109: Float = v9 + v41 in
    let v63: [[Float]] = v26.p0 in
    let v51: [[Float]] = v45.p0 in
    let v72: [[Float]] = v33.p0 in
    var v49: s0 = v7 in
    let v80: [[Float]] = v2.p1 in
    v33.p0 = v11 in
    let v70: s0 = s0(v72, v4) in
    let v75: [[Float]] = v49.p0 in
    let v90: [[Float]] = v0.p0 in
    v33.p0 = v18 in
    v7.p1 = v80 in
    v33.p0 = v51 in
    var v175: [Float] = v42 in
    v2.p0 = v116 in
    let v79: [[Float]] = v45.p1 in
    v45.p0 = v75 in
    let v117: [[Float]] = v33.p1 in
    v6.p1 = v79 in
    v3[0] = v109 in
    v49.p0 = v18 in
    v18[0] = v5 in
    v6.p0 = v90 in
    let v148: [[Float]] = v45.p0 in
    v10[1] = v34 in
    v2.p1 = v117 in
    v18[0] = v175 in
    v45.p0 = v148 in
    v49.p1 = v112 in
    v175[0] = v27 in
    v45.p0 = v63 in
    v70
  } in
  let f2: (s0) -> s0 = (v0: s0) -> s0 {
    let v4: s0 = f32(v0) in
    let v2: s0 = f32(v0) in
    var v1: s0 = v4 in
    var v6: s0 = v0 in
    var v5: s0 = v2 in
    let v9: s0 = f32(v6) in
    var v8: s0 = v9 in
    var v11: s0 = v4 in
    let v13: [[Float]] = v11.p1 in
    v1.p1 = v13 in
    let v12: [Float] = v13[0] in
    v8.p1 = v13 in
    var v7: [[Float]] = v13 in
    let v15: [[Float]] = v5.p0 in
    let v19: [Float] = v7[2] in
    let v10: [[Float]] = v2.p1 in
    var v27: [[Float]] = v15 in
    let v33: [Float] = v27[1] in
    let v26: Float = v12[0] in
    let v23: [[Float]] = v1.p1 in
    var v21: Float = v26 in
    v8.p1 = v7 in
    var v43: [Float] = v33 in
    v8.p1 = v10 in
    let v31: s0 = f32(v5) in
    let v29: [[Float]] = v0.p0 in
    v7[2] = v43 in
    let v30: [s0] = [v31, v2, v8, v31, v31, v8, v1] in
    let v32: [Float] = v7[2] in
    v43[0] = v21 in
    let v37: [Float] = v29[0] in
    var v22: [[Float]] = v23 in
    let v28: s0 = f32(v2) in
    var v36: [[Float]] = v15 in
    var v16: [[Float]] = v15 in
    v27[1] = v43 in
    let v50: s0 = s0(v36, v22) in
    v16[1] = v37 in
    var v58: Float = v21 in
    v8.p1 = v13 in
    let v256: [[s0]] = [v30, v30, v30, v30, v30, v30, v30] in
    let v46: Float = v19[0] in
    v7[1] = v43 in
    let v68: [s0] = v256[6] in
    var v88: [[Float]] = v16 in
    let v98: [Float] = v13[0] in
    let v76: Float = v26 / v58 in
    let v99: Float = v26 / v46 in
    v11 = v50 in
    var v86: [s0] = v68 in
    v58 = v76 in
    let v125: [Float] = v7[0] in
    var v103: [[Float]] = v88 in
    v5.p0 = v103 in
    let v106: Float = v125[0] in
    var v80: [Float] = v32 in
    v80[0] = v106 in
    v11.p0 = v16 in
    v43[0] = v58 in
    var v112: Float = v99 in
    v88[0] = v80 in
    v8.p1 = v7 in
    v80[0] = v112 in
    let v115: [[Float]] = v28.p1 in
    v22[0] = v98 in
    v1.p1 = v115 in
    let v130: s0 = v86[1] in
    v88[1] = v98 in
    v22[0] = v43 in
    v80[0] = v46 in
    v130
  } in
  let noinline_f0: (s0, Float) -> Float = (v0: s0, v1: Float) -> Float {
    let v4: s0 = f2(v0) in
    let v8: [[Float]] = v4.p1 in
    let v9: [Float] = v8[0] in
    let v59: Float = v9[0] in
    v59
  } in
  fun loop(i: Int, v0: s0, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]) in
    let v1: Float = 5.0 in
    let initialResult: Float = 5.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()