  struct s0 {
    var p0: [[Float]]
    var p1: Float
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [[s1]]
    var p1: s1
  } in
  struct s3 {
    var p0: s1
    var p1: s0
    var p2: [s2]
    var p3: s2
  } in
  struct s6 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s7 {
    var p0: s3
    var p1: [s0]
  } in
  struct s8 {
    var p0: s7
    var p1: s6
    var p2: [s6]
    var p3: s3
  } in
  struct s9 {
    var p0: s1
    var p1: [[s8]]
  } in
  struct s10 {
    var p0: [s9]
    var p1: [s3]
  } in
  struct s13 {
    var p0: [s0]
    var p1: s2
  } in
  let f111: (s0) -> s0 = (v0: s0) -> s0 {
    v0
  } in
  let f90: (s1, s1) -> s1 = (v0: s1, v1: s1) -> s1 {
    v0
  } in
  let f82: (s1) -> s1 = (v0: s1) -> s1 {
    var v5: s1 = v0 in
    let v1: [s1] = [v5, v0, v5, v0, v5] in
    let v9: s1 = f90(v0, v0) in
    let v2: s1 = f90(v5, v0) in
    let v3: s1 = f90(v5, v9) in
    let v8: s0 = v9.p0 in
    v5.p0 = v8 in
    v5.p0 = v8 in
    var v29: [s1] = v1 in
    let v109: s1 = f90(v9, v3) in
    let v32: s0 = v2.p0 in
    v5 = v2 in
    let v30: s0 = v109.p0 in
    v5.p0 = v32 in
    v5.p1 = v30 in
    var v96: s1 = v5 in
    let v59: s0 = v96.p0 in
    v5.p1 = v59 in
    let v60: s1 = v29[2] in
    v60
  } in
  let f78: (s1) -> s1 = (v0: s1) -> s1 {
    var v6: s1 = v0 in
    let v8: s0 = v0.p1 in
    let v5: s1 = f90(v0, v0) in
    var v7: s0 = v8 in
    let v1: s0 = f111(v8) in
    let v4: s1 = f82(v5) in
    let v3: Float = v1.p1 in
    let v15: s0 = v6.p0 in
    v7.p1 = v3 in
    let v9: s1 = f90(v6, v0) in
    v7.p1 = v3 in
    let v13: [s1] = [v4, v9, v6] in
    var v19: [s1] = v13 in
    v19[0] = v5 in
    v19[1] = v9 in
    v7.p1 = v3 in
    let v11: s1 = v13[0] in
    let v25: [[Float]] = v15.p0 in
    v19[0] = v11 in
    var v34: s1 = v4 in
    let v54: s0 = f111(v7) in
    let v70: [s1] = [v34, v0, v9] in
    v19 = v70 in
    let v27: s1 = v19[2] in
    v7.p0 = v25 in
    v34.p0 = v54 in
    let v49: s1 = f90(v27, v34) in
    v34.p0 = v54 in
    v19[2] = v11 in
    v49
  } in
  let f54: (Float) -> Float = (v0: Float) -> Float {
    var v1: Float = v0 in
    let v7: Float = v1 + v1 in
    var v2: Float = v1 in
    var v8: Float = v2 in
    var v6: Float = v1 in
    var v5: Float = v2 in
    var v4: Float = v1 in
    var v14: Float = v4 in
    var v10: Float = v8 in
    var v9: Float = v6 in
    var v18: Float = v10 in
    v4 = v5 in
    var v40: Float = v14 in
    let v16: [Float] = [v7, v9, v14, v5, v40] in
    let v27: Float = v16[3] in
    var v45: [Float] = v16 in
    var v166: Float = v5 in
    let v80: Float = v45[0] in
    v45[4] = v166 in
    v45[2] = v18 in
    v45[3] = v27 in
    v80
  } in
  let f50: (s1, s1) -> s1 = (v0: s1, v1: s1) -> s1 {
    var v4: s1 = v0 in
    let v2: s1 = f78(v4) in
    var v5: s1 = v4 in
    let v3: s0 = v1.p1 in
    let v7: s1 = f90(v1, v4) in
    var v8: s0 = v3 in
    var v6: s1 = v4 in
    let v14: s1 = f82(v7) in
    let v16: s1 = f90(v14, v7) in
    v6.p1 = v3 in
    let v22: s0 = v2.p1 in
    var v12: s1 = v14 in
    v5.p0 = v8 in
    let v9: s1 = f82(v16) in
    var v15: s0 = v22 in
    v4.p1 = v8 in
    let v11: s1 = f82(v16) in
    let v20: s0 = v11.p1 in
    var v23: s0 = v3 in
    let v18: s0 = f111(v15) in
    let v13: Float = v18.p1 in
    let v10: s0 = v5.p1 in
    let v36: Float = v20.p1 in
    let v17: Float = f54(v36) in
    v4.p0 = v8 in
    v5 = v6 in
    let v19: s0 = v4.p1 in
    let v21: s1 = f90(v14, v14) in
    let v28: [[Float]] = v10.p0 in
    let v39: [[Float]] = v22.p0 in
    v23.p1 = v36 in
    v6.p0 = v18 in
    let v29: [Float] = v28[0] in
    let v46: Float = v29[0] in
    var v54: s0 = v23 in
    v54.p0 = v28 in
    let v24: [s1] = [v16, v21, v14, v12, v11] in
    var v30: [Float] = v29 in
    let v25: [[Float]] = v8.p0 in
    v5.p1 = v8 in
    let v70: s0 = s0(v25, v36) in
    v30[0] = v13 in
    let v38: s0 = v9.p1 in
    var v34: [[Float]] = v39 in
    var v47: Float = v36 in
    let v104: Float = v47 - v46 in
    v34[0] = v29 in
    v34[0] = v30 in
    let v52: s0 = f111(v38) in
    v5.p1 = v3 in
    let v67: s0 = s0(v28, v104) in
    v34[0] = v30 in
    var v26: Float = v13 in
    let v32: Float = f54(v46) in
    let v40: [Float] = v25[0] in
    let v57: s1 = f78(v2) in
    v54 = v70 in
    v12.p0 = v10 in
    v34[0] = v40 in
    let v50: s0 = v1.p0 in
    let v33: s0 = v2.p0 in
    v30[0] = v17 in
    v34[0] = v29 in
    v30[0] = v46 in
    v30[0] = v32 in
    v34[0] = v40 in
    v5.p1 = v8 in
    var v94: s0 = v52 in
    v12.p0 = v19 in
    let v85: [s1] = [v4, v9, v57, v12] in
    let v56: s1 = f82(v12) in
    let v82: Float = v29[0] in
    v4.p0 = v54 in
    let v48: s1 = v24[4] in
    v6.p1 = v70 in
    let v84: s1 = s1(v20, v50) in
    var v76: [s1] = v24 in
    v23.p0 = v25 in
    let v95: s1 = v85[1] in
    v6.p0 = v38 in
    v23.p1 = v82 in
    v76[2] = v56 in
    v5.p1 = v94 in
    v4.p0 = v33 in
    v34[0] = v29 in
    v4.p0 = v67 in
    v76[2] = v9 in
    v76[1] = v84 in
    v54.p0 = v34 in
    v76[0] = v9 in
    v30[0] = v26 in
    let v113: s1 = v76[1] in
    v76[4] = v95 in
    v76[4] = v48 in
    v4.p1 = v23 in
    v4.p0 = v8 in
    v113
  } in
  let noinline_f0: (s13, s10, Float) -> Float = (v0: s13, v1: s10, v2: Float) -> Float {
    let v25: s2 = v0.p1 in
    let v9: s1 = v25.p1 in
    var v19: s1 = v9 in
    let v21: s1 = f50(v19, v9) in
    let v60: s0 = v21.p1 in
    let v35: Float = v60.p1 in
    v35
  } in
  fun loop(i: Int, v0: s13, v1: s10, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s13 = s13([s0([[0.0]], 1.0), s0([[2.0]], 3.0), s0([[4.0]], 5.0)], s2([[s1(s0([[6.0]], 7.0), s0([[8.0]], 9.0))]], s1(s0([[10.0]], 11.0), s0([[12.0]], 13.0)))) in
    let v1: s10 = s10([s9(s1(s0([[14.0]], 15.0), s0([[16.0]], 17.0)), [[s8(s7(s3(s1(s0([[18.0]], 19.0), s0([[20.0]], 21.0)), s0([[22.0]], 23.0), [s2([[s1(s0([[24.0]], 25.0), s0([[26.0]], 27.0))]], s1(s0([[28.0]], 29.0), s0([[30.0]], 31.0))), s2([[s1(s0([[32.0]], 33.0), s0([[34.0]], 35.0))]], s1(s0([[36.0]], 37.0), s0([[38.0]], 39.0))), s2([[s1(s0([[40.0]], 41.0), s0([[42.0]], 43.0))]], s1(s0([[44.0]], 45.0), s0([[46.0]], 47.0)))], s2([[s1(s0([[48.0]], 49.0), s0([[50.0]], 51.0))]], s1(s0([[52.0]], 53.0), s0([[54.0]], 55.0)))), [s0([[56.0]], 57.0), s0([[58.0]], 59.0)]), s6(s0([[60.0]], 61.0), [[s0([[62.0]], 63.0)], [s0([[64.0]], 65.0)]]), [s6(s0([[66.0]], 67.0), [[s0([[68.0]], 69.0)], [s0([[70.0]], 71.0)]]), s6(s0([[72.0]], 73.0), [[s0([[74.0]], 75.0)], [s0([[76.0]], 77.0)]]), s6(s0([[78.0]], 79.0), [[s0([[80.0]], 81.0)], [s0([[82.0]], 83.0)]])], s3(s1(s0([[84.0]], 85.0), s0([[86.0]], 87.0)), s0([[88.0]], 89.0), [s2([[s1(s0([[90.0]], 91.0), s0([[92.0]], 93.0))]], s1(s0([[94.0]], 95.0), s0([[96.0]], 97.0))), s2([[s1(s0([[98.0]], 99.0), s0([[100.0]], 101.0))]], s1(s0([[102.0]], 103.0), s0([[104.0]], 105.0))), s2([[s1(s0([[106.0]], 107.0), s0([[108.0]], 109.0))]], s1(s0([[110.0]], 111.0), s0([[112.0]], 113.0)))], s2([[s1(s0([[114.0]], 115.0), s0([[116.0]], 117.0))]], s1(s0([[118.0]], 119.0), s0([[120.0]], 121.0)))))], [s8(s7(s3(s1(s0([[122.0]], 123.0), s0([[124.0]], 125.0)), s0([[126.0]], 127.0), [s2([[s1(s0([[128.0]], 129.0), s0([[130.0]], 131.0))]], s1(s0([[132.0]], 133.0), s0([[134.0]], 135.0))), s2([[s1(s0([[136.0]], 137.0), s0([[138.0]], 139.0))]], s1(s0([[140.0]], 141.0), s0([[142.0]], 143.0))), s2([[s1(s0([[144.0]], 145.0), s0([[146.0]], 147.0))]], s1(s0([[148.0]], 149.0), s0([[150.0]], 151.0)))], s2([[s1(s0([[152.0]], 153.0), s0([[154.0]], 155.0))]], s1(s0([[156.0]], 157.0), s0([[158.0]], 159.0)))), [s0([[160.0]], 161.0), s0([[162.0]], 163.0)]), s6(s0([[164.0]], 165.0), [[s0([[166.0]], 167.0)], [s0([[168.0]], 169.0)]]), [s6(s0([[170.0]], 171.0), [[s0([[172.0]], 173.0)], [s0([[174.0]], 175.0)]]), s6(s0([[176.0]], 177.0), [[s0([[178.0]], 179.0)], [s0([[180.0]], 181.0)]]), s6(s0([[182.0]], 183.0), [[s0([[184.0]], 185.0)], [s0([[186.0]], 187.0)]])], s3(s1(s0([[188.0]], 189.0), s0([[190.0]], 191.0)), s0([[192.0]], 193.0), [s2([[s1(s0([[194.0]], 195.0), s0([[196.0]], 197.0))]], s1(s0([[198.0]], 199.0), s0([[200.0]], 201.0))), s2([[s1(s0([[202.0]], 203.0), s0([[204.0]], 205.0))]], s1(s0([[206.0]], 207.0), s0([[208.0]], 209.0))), s2([[s1(s0([[210.0]], 211.0), s0([[212.0]], 213.0))]], s1(s0([[214.0]], 215.0), s0([[216.0]], 217.0)))], s2([[s1(s0([[218.0]], 219.0), s0([[220.0]], 221.0))]], s1(s0([[222.0]], 223.0), s0([[224.0]], 225.0)))))], [s8(s7(s3(s1(s0([[226.0]], 227.0), s0([[228.0]], 229.0)), s0([[230.0]], 231.0), [s2([[s1(s0([[232.0]], 233.0), s0([[234.0]], 235.0))]], s1(s0([[236.0]], 237.0), s0([[238.0]], 239.0))), s2([[s1(s0([[240.0]], 241.0), s0([[242.0]], 243.0))]], s1(s0([[244.0]], 245.0), s0([[246.0]], 247.0))), s2([[s1(s0([[248.0]], 249.0), s0([[250.0]], 251.0))]], s1(s0([[252.0]], 253.0), s0([[254.0]], 255.0)))], s2([[s1(s0([[256.0]], 257.0), s0([[258.0]], 259.0))]], s1(s0([[260.0]], 261.0), s0([[262.0]], 263.0)))), [s0([[264.0]], 265.0), s0([[266.0]], 267.0)]), s6(s0([[268.0]], 269.0), [[s0([[270.0]], 271.0)], [s0([[272.0]], 273.0)]]), [s6(s0([[274.0]], 275.0), [[s0([[276.0]], 277.0)], [s0([[278.0]], 279.0)]]), s6(s0([[280.0]], 281.0), [[s0([[282.0]], 283.0)], [s0([[284.0]], 285.0)]]), s6(s0([[286.0]], 287.0), [[s0([[288.0]], 289.0)], [s0([[290.0]], 291.0)]])], s3(s1(s0([[292.0]], 293.0), s0([[294.0]], 295.0)), s0([[296.0]], 297.0), [s2([[s1(s0([[298.0]], 299.0), s0([[300.0]], 301.0))]], s1(s0([[302.0]], 303.0), s0([[304.0]], 305.0))), s2([[s1(s0([[306.0]], 307.0), s0([[308.0]], 309.0))]], s1(s0([[310.0]], 311.0), s0([[312.0]], 313.0))), s2([[s1(s0([[314.0]], 315.0), s0([[316.0]], 317.0))]], s1(s0([[318.0]], 319.0), s0([[320.0]], 321.0)))], s2([[s1(s0([[322.0]], 323.0), s0([[324.0]], 325.0))]], s1(s0([[326.0]], 327.0), s0([[328.0]], 329.0)))))]])], [s3(s1(s0([[330.0]], 331.0), s0([[332.0]], 333.0)), s0([[334.0]], 335.0), [s2([[s1(s0([[336.0]], 337.0), s0([[338.0]], 339.0))]], s1(s0([[340.0]], 341.0), s0([[342.0]], 343.0))), s2([[s1(s0([[344.0]], 345.0), s0([[346.0]], 347.0))]], s1(s0([[348.0]], 349.0), s0([[350.0]], 351.0))), s2([[s1(s0([[352.0]], 353.0), s0([[354.0]], 355.0))]], s1(s0([[356.0]], 357.0), s0([[358.0]], 359.0)))], s2([[s1(s0([[360.0]], 361.0), s0([[362.0]], 363.0))]], s1(s0([[364.0]], 365.0), s0([[366.0]], 367.0)))), s3(s1(s0([[368.0]], 369.0), s0([[370.0]], 371.0)), s0([[372.0]], 373.0), [s2([[s1(s0([[374.0]], 375.0), s0([[376.0]], 377.0))]], s1(s0([[378.0]], 379.0), s0([[380.0]], 381.0))), s2([[s1(s0([[382.0]], 383.0), s0([[384.0]], 385.0))]], s1(s0([[386.0]], 387.0), s0([[388.0]], 389.0))), s2([[s1(s0([[390.0]], 391.0), s0([[392.0]], 393.0))]], s1(s0([[394.0]], 395.0), s0([[396.0]], 397.0)))], s2([[s1(s0([[398.0]], 399.0), s0([[400.0]], 401.0))]], s1(s0([[402.0]], 403.0), s0([[404.0]], 405.0)))), s3(s1(s0([[406.0]], 407.0), s0([[408.0]], 409.0)), s0([[410.0]], 411.0), [s2([[s1(s0([[412.0]], 413.0), s0([[414.0]], 415.0))]], s1(s0([[416.0]], 417.0), s0([[418.0]], 419.0))), s2([[s1(s0([[420.0]], 421.0), s0([[422.0]], 423.0))]], s1(s0([[424.0]], 425.0), s0([[426.0]], 427.0))), s2([[s1(s0([[428.0]], 429.0), s0([[430.0]], 431.0))]], s1(s0([[432.0]], 433.0), s0([[434.0]], 435.0)))], s2([[s1(s0([[436.0]], 437.0), s0([[438.0]], 439.0))]], s1(s0([[440.0]], 441.0), s0([[442.0]], 443.0))))]) in
    let v2: Float = 444.0 in
    let initialResult: Float = 444.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()