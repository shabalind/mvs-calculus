  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
    var p4: [[Double]]
    var p5: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
    var p2: [s0]
  }
  struct s2 {
    var p0: [s0]
    var p1: [[s1]]
    var p2: [s0]
  }
  func f79(_ v0: Double) -> Double {
    var v3: Double = v0
    let v6: [Double] = [v3, v3, v3, v3, v0]
    let v16: Double = v6[2]
    var v10: Double = v16
    return v10
  }
  @inline(never)
  func f0(_ v0: s2, _ v1: [s2], _ v2: Double) -> Double {
    let v4: Double = f79(v2)
    let v7: Double = f79(v2)
    var v21: Double = v4
    let v14: Double = v7 + v21
    return v14
  }
  func benchmark() {
    let v0: s2 = s2(p0: [s0(p0: [[0.0]], p1: [[1.0], [2.0]], p2: [[3.0]], p3: [[4.0], [5.0], [6.0]], p4: [[7.0], [8.0], [9.0]], p5: [[10.0]]), s0(p0: [[11.0]], p1: [[12.0], [13.0]], p2: [[14.0]], p3: [[15.0], [16.0], [17.0]], p4: [[18.0], [19.0], [20.0]], p5: [[21.0]])], p1: [[s1(p0: s0(p0: [[22.0]], p1: [[23.0], [24.0]], p2: [[25.0]], p3: [[26.0], [27.0], [28.0]], p4: [[29.0], [30.0], [31.0]], p5: [[32.0]]), p1: s0(p0: [[33.0]], p1: [[34.0], [35.0]], p2: [[36.0]], p3: [[37.0], [38.0], [39.0]], p4: [[40.0], [41.0], [42.0]], p5: [[43.0]]), p2: [s0(p0: [[44.0]], p1: [[45.0], [46.0]], p2: [[47.0]], p3: [[48.0], [49.0], [50.0]], p4: [[51.0], [52.0], [53.0]], p5: [[54.0]]), s0(p0: [[55.0]], p1: [[56.0], [57.0]], p2: [[58.0]], p3: [[59.0], [60.0], [61.0]], p4: [[62.0], [63.0], [64.0]], p5: [[65.0]]), s0(p0: [[66.0]], p1: [[67.0], [68.0]], p2: [[69.0]], p3: [[70.0], [71.0], [72.0]], p4: [[73.0], [74.0], [75.0]], p5: [[76.0]])])], [s1(p0: s0(p0: [[77.0]], p1: [[78.0], [79.0]], p2: [[80.0]], p3: [[81.0], [82.0], [83.0]], p4: [[84.0], [85.0], [86.0]], p5: [[87.0]]), p1: s0(p0: [[88.0]], p1: [[89.0], [90.0]], p2: [[91.0]], p3: [[92.0], [93.0], [94.0]], p4: [[95.0], [96.0], [97.0]], p5: [[98.0]]), p2: [s0(p0: [[99.0]], p1: [[100.0], [101.0]], p2: [[102.0]], p3: [[103.0], [104.0], [105.0]], p4: [[106.0], [107.0], [108.0]], p5: [[109.0]]), s0(p0: [[110.0]], p1: [[111.0], [112.0]], p2: [[113.0]], p3: [[114.0], [115.0], [116.0]], p4: [[117.0], [118.0], [119.0]], p5: [[120.0]]), s0(p0: [[121.0]], p1: [[122.0], [123.0]], p2: [[124.0]], p3: [[125.0], [126.0], [127.0]], p4: [[128.0], [129.0], [130.0]], p5: [[131.0]])])]], p2: [s0(p0: [[132.0]], p1: [[133.0], [134.0]], p2: [[135.0]], p3: [[136.0], [137.0], [138.0]], p4: [[139.0], [140.0], [141.0]], p5: [[142.0]]), s0(p0: [[143.0]], p1: [[144.0], [145.0]], p2: [[146.0]], p3: [[147.0], [148.0], [149.0]], p4: [[150.0], [151.0], [152.0]], p5: [[153.0]])])
    let v1: [s2] = [s2(p0: [s0(p0: [[154.0]], p1: [[155.0], [156.0]], p2: [[157.0]], p3: [[158.0], [159.0], [160.0]], p4: [[161.0], [162.0], [163.0]], p5: [[164.0]]), s0(p0: [[165.0]], p1: [[166.0], [167.0]], p2: [[168.0]], p3: [[169.0], [170.0], [171.0]], p4: [[172.0], [173.0], [174.0]], p5: [[175.0]])], p1: [[s1(p0: s0(p0: [[176.0]], p1: [[177.0], [178.0]], p2: [[179.0]], p3: [[180.0], [181.0], [182.0]], p4: [[183.0], [184.0], [185.0]], p5: [[186.0]]), p1: s0(p0: [[187.0]], p1: [[188.0], [189.0]], p2: [[190.0]], p3: [[191.0], [192.0], [193.0]], p4: [[194.0], [195.0], [196.0]], p5: [[197.0]]), p2: [s0(p0: [[198.0]], p1: [[199.0], [200.0]], p2: [[201.0]], p3: [[202.0], [203.0], [204.0]], p4: [[205.0], [206.0], [207.0]], p5: [[208.0]]), s0(p0: [[209.0]], p1: [[210.0], [211.0]], p2: [[212.0]], p3: [[213.0], [214.0], [215.0]], p4: [[216.0], [217.0], [218.0]], p5: [[219.0]]), s0(p0: [[220.0]], p1: [[221.0], [222.0]], p2: [[223.0]], p3: [[224.0], [225.0], [226.0]], p4: [[227.0], [228.0], [229.0]], p5: [[230.0]])])], [s1(p0: s0(p0: [[231.0]], p1: [[232.0], [233.0]], p2: [[234.0]], p3: [[235.0], [236.0], [237.0]], p4: [[238.0], [239.0], [240.0]], p5: [[241.0]]), p1: s0(p0: [[242.0]], p1: [[243.0], [244.0]], p2: [[245.0]], p3: [[246.0], [247.0], [248.0]], p4: [[249.0], [250.0], [251.0]], p5: [[252.0]]), p2: [s0(p0: [[253.0]], p1: [[254.0], [255.0]], p2: [[256.0]], p3: [[257.0], [258.0], [259.0]], p4: [[260.0], [261.0], [262.0]], p5: [[263.0]]), s0(p0: [[264.0]], p1: [[265.0], [266.0]], p2: [[267.0]], p3: [[268.0], [269.0], [270.0]], p4: [[271.0], [272.0], [273.0]], p5: [[274.0]]), s0(p0: [[275.0]], p1: [[276.0], [277.0]], p2: [[278.0]], p3: [[279.0], [280.0], [281.0]], p4: [[282.0], [283.0], [284.0]], p5: [[285.0]])])]], p2: [s0(p0: [[286.0]], p1: [[287.0], [288.0]], p2: [[289.0]], p3: [[290.0], [291.0], [292.0]], p4: [[293.0], [294.0], [295.0]], p5: [[296.0]]), s0(p0: [[297.0]], p1: [[298.0], [299.0]], p2: [[300.0]], p3: [[301.0], [302.0], [303.0]], p4: [[304.0], [305.0], [306.0]], p5: [[307.0]])])]
    let v2: Double = 308.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 308.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
