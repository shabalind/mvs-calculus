  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: (s0, Float) -> Float = (v0: s0, v1: Float) -> Float {
    let v3: [[Float]] = v0.p0 in
    let v4: [[Float]] = v0.p0 in
    var v5: Float = v1 in
    let v16: [Float] = v4[2] in
    let v10: Float = v16[0] in
    let v12: [Float] = v3[2] in
    let v19: Float = v5 - v10 in
    let v11: Float = v12[0] in
    let v63: Float = v19 - v11 in
    var v33: Float = v63 in
    let v130: Float = v12[0] in
    let v137: Float = v33 * v130 in
    v137
  } in
  fun loop(i: Int, v0: s0, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]) in
    let v1: Float = 5.0 in
    let initialResult: Float = 5.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()