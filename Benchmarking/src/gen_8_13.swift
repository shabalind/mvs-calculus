  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s2 {
    var p0: [s1]
    var p1: Double
  }
  struct s4 {
    var p0: s2
    var p1: [[s2]]
  }
  struct s6 {
    var p0: s0
    var p1: [s1]
  }
  struct s9 {
    var p0: [[s0]]
    var p1: [[s2]]
  }
  struct s11 {
    var p0: [s9]
    var p1: s4
  }
  struct s12 {
    var p0: [[s0]]
    var p1: s6
  }
  func f55(_ v0: s1) -> s1 {
    var v6: s1 = v0
    var v21: s1 = v0
    let v24: [s0] = v21.p0
    let v54: [s0] = v6.p1
    let v41: [s0] = v0.p1
    let v13: [s0] = v21.p1
    v6.p0 = v24
    v21.p1 = v13
    v21.p1 = v54
    v21 = v0
    let v124: [s0] = v0.p1
    v6.p1 = v41
    v21.p1 = v124
    v21.p1 = v13
    return v6
  }
  func f31(_ v0: s2) -> s2 {
    var v3: s2 = v0
    return v3
  }
  func f19(_ v0: s4) -> s4 {
    var v1: s4 = v0
    let v7: [[s2]] = v1.p1
    var v3: [[s2]] = v7
    let v6: [s4] = [v1]
    var v2: [[s2]] = v7
    let v5: s4 = v6[0]
    let v4: s4 = v6[0]
    v2 = v7
    v1.p1 = v3
    let v10: s2 = v0.p0
    let v8: s2 = f31(v10)
    var v9: [[s2]] = v3
    v3 = v2
    let v14: Double = v8.p1
    let v21: s2 = f31(v10)
    let v27: Double = v14 / v14
    let v28: [s2] = v7[0]
    let v13: s2 = f31(v8)
    var v12: s2 = v13
    var v15: s2 = v21
    let v17: s2 = f31(v21)
    let v32: [s2] = v7[0]
    let v24: [s2] = [v12, v12, v15, v8, v17, v17]
    let v19: s2 = v32[0]
    let v25: s2 = f31(v19)
    v15.p1 = v27
    let v41: s2 = v28[0]
    v1.p1 = v9
    let v20: s2 = f31(v25)
    let v30: s2 = v5.p0
    var v37: Double = v27
    let v72: [s2] = v7[0]
    let v48: [[s2]] = v0.p1
    let v81: s2 = f31(v10)
    let v26: s2 = v24[5]
    let v56: Double = v81.p1
    v9[0] = v32
    let v78: [s1] = v41.p0
    v9[0] = v72
    let v61: Double = v21.p1
    var v39: [s2] = v24
    let v100: s2 = v39[4]
    let v34: s2 = f31(v26)
    var v51: s4 = v4
    v1.p0 = v41
    let v49: Double = v37 * v56
    var v64: [s1] = v78
    v1.p0 = v30
    v1.p1 = v48
    let v55: [[s2]] = v4.p1
    var v95: [[s2]] = v55
    var v42: s2 = v26
    let v53: [s1] = v42.p0
    v12.p1 = v14
    v15.p1 = v49
    v37 = v61
    var v62: [s2] = v39
    v12.p0 = v64
    v39 = v62
    v62[5] = v34
    v2[0] = v28
    let v58: s1 = v53[0]
    let v105: Double = v20.p1
    v62 = v24
    let v149: s1 = f55(v58)
    var v122: s4 = v51
    v12.p1 = v56
    v51.p1 = v95
    v64[0] = v149
    v12.p1 = v105
    v1.p0 = v42
    v122.p0 = v26
    v51.p0 = v100
    v15.p1 = v37
    let v229: s2 = f31(v42)
    v122.p0 = v229
    return v122
  }
  func f9(_ v0: [[s11]]) -> [[s11]] {
    var v1: [[s11]] = v0
    let v4: [s11] = v0[0]
    let v7: s11 = v4[0]
    var v9: [[s11]] = v0
    v9[2] = v4
    let v8: [s11] = v9[2]
    v1[0] = v4
    v9[1] = v8
    v1[2] = v4
    var v20: [s11] = v4
    v9[2] = v20
    v20[0] = v7
    let v19: [s11] = v1[0]
    v9[2] = v8
    v9[0] = v19
    let v36: [s11] = v1[1]
    v9[0] = v36
    v1[2] = v4
    var v73: [[s11]] = v9
    v9[1] = v8
    v9[1] = v8
    v9[2] = v4
    return v73
  }
  @inline(never)
  func f0(_ v0: [[s11]], _ v1: [s12], _ v2: Double) -> Double {
    var v3: Double = v2
    var v6: [[s11]] = v0
    let v4: [[s11]] = f9(v6)
    var v10: Double = v3
    let v15: [[s11]] = f9(v0)
    let v20: [s11] = v4[0]
    let v18: [[s11]] = f9(v15)
    v6[2] = v20
    let v17: s11 = v20[0]
    let v62: s4 = v17.p1
    var v48: Double = v10
    let v89: s4 = f19(v62)
    v3 = v2
    let v74: [s11] = v18[1]
    let v72: s2 = v89.p0
    let v66: s2 = f31(v72)
    var v120: s2 = v66
    v120.p1 = v48
    v6[0] = v74
    let v139: s2 = f31(v120)
    let v75: Double = v139.p1
    return v75
  }
  func benchmark() {
    let v0: [[s11]] = [[s11(p0: [s9(p0: [[s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0]])], [s0(p0: [[4.0], [5.0], [6.0]], p1: [[7.0]])], [s0(p0: [[8.0], [9.0], [10.0]], p1: [[11.0]])]], p1: [[s2(p0: [s1(p0: [s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0]]), s0(p0: [[16.0], [17.0], [18.0]], p1: [[19.0]])], p1: [s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0]])])], p1: 24.0)]]), s9(p0: [[s0(p0: [[25.0], [26.0], [27.0]], p1: [[28.0]])], [s0(p0: [[29.0], [30.0], [31.0]], p1: [[32.0]])], [s0(p0: [[33.0], [34.0], [35.0]], p1: [[36.0]])]], p1: [[s2(p0: [s1(p0: [s0(p0: [[37.0], [38.0], [39.0]], p1: [[40.0]]), s0(p0: [[41.0], [42.0], [43.0]], p1: [[44.0]])], p1: [s0(p0: [[45.0], [46.0], [47.0]], p1: [[48.0]])])], p1: 49.0)]])], p1: s4(p0: s2(p0: [s1(p0: [s0(p0: [[50.0], [51.0], [52.0]], p1: [[53.0]]), s0(p0: [[54.0], [55.0], [56.0]], p1: [[57.0]])], p1: [s0(p0: [[58.0], [59.0], [60.0]], p1: [[61.0]])])], p1: 62.0), p1: [[s2(p0: [s1(p0: [s0(p0: [[63.0], [64.0], [65.0]], p1: [[66.0]]), s0(p0: [[67.0], [68.0], [69.0]], p1: [[70.0]])], p1: [s0(p0: [[71.0], [72.0], [73.0]], p1: [[74.0]])])], p1: 75.0)]]))], [s11(p0: [s9(p0: [[s0(p0: [[76.0], [77.0], [78.0]], p1: [[79.0]])], [s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0]])], [s0(p0: [[84.0], [85.0], [86.0]], p1: [[87.0]])]], p1: [[s2(p0: [s1(p0: [s0(p0: [[88.0], [89.0], [90.0]], p1: [[91.0]]), s0(p0: [[92.0], [93.0], [94.0]], p1: [[95.0]])], p1: [s0(p0: [[96.0], [97.0], [98.0]], p1: [[99.0]])])], p1: 100.0)]]), s9(p0: [[s0(p0: [[101.0], [102.0], [103.0]], p1: [[104.0]])], [s0(p0: [[105.0], [106.0], [107.0]], p1: [[108.0]])], [s0(p0: [[109.0], [110.0], [111.0]], p1: [[112.0]])]], p1: [[s2(p0: [s1(p0: [s0(p0: [[113.0], [114.0], [115.0]], p1: [[116.0]]), s0(p0: [[117.0], [118.0], [119.0]], p1: [[120.0]])], p1: [s0(p0: [[121.0], [122.0], [123.0]], p1: [[124.0]])])], p1: 125.0)]])], p1: s4(p0: s2(p0: [s1(p0: [s0(p0: [[126.0], [127.0], [128.0]], p1: [[129.0]]), s0(p0: [[130.0], [131.0], [132.0]], p1: [[133.0]])], p1: [s0(p0: [[134.0], [135.0], [136.0]], p1: [[137.0]])])], p1: 138.0), p1: [[s2(p0: [s1(p0: [s0(p0: [[139.0], [140.0], [141.0]], p1: [[142.0]]), s0(p0: [[143.0], [144.0], [145.0]], p1: [[146.0]])], p1: [s0(p0: [[147.0], [148.0], [149.0]], p1: [[150.0]])])], p1: 151.0)]]))], [s11(p0: [s9(p0: [[s0(p0: [[152.0], [153.0], [154.0]], p1: [[155.0]])], [s0(p0: [[156.0], [157.0], [158.0]], p1: [[159.0]])], [s0(p0: [[160.0], [161.0], [162.0]], p1: [[163.0]])]], p1: [[s2(p0: [s1(p0: [s0(p0: [[164.0], [165.0], [166.0]], p1: [[167.0]]), s0(p0: [[168.0], [169.0], [170.0]], p1: [[171.0]])], p1: [s0(p0: [[172.0], [173.0], [174.0]], p1: [[175.0]])])], p1: 176.0)]]), s9(p0: [[s0(p0: [[177.0], [178.0], [179.0]], p1: [[180.0]])], [s0(p0: [[181.0], [182.0], [183.0]], p1: [[184.0]])], [s0(p0: [[185.0], [186.0], [187.0]], p1: [[188.0]])]], p1: [[s2(p0: [s1(p0: [s0(p0: [[189.0], [190.0], [191.0]], p1: [[192.0]]), s0(p0: [[193.0], [194.0], [195.0]], p1: [[196.0]])], p1: [s0(p0: [[197.0], [198.0], [199.0]], p1: [[200.0]])])], p1: 201.0)]])], p1: s4(p0: s2(p0: [s1(p0: [s0(p0: [[202.0], [203.0], [204.0]], p1: [[205.0]]), s0(p0: [[206.0], [207.0], [208.0]], p1: [[209.0]])], p1: [s0(p0: [[210.0], [211.0], [212.0]], p1: [[213.0]])])], p1: 214.0), p1: [[s2(p0: [s1(p0: [s0(p0: [[215.0], [216.0], [217.0]], p1: [[218.0]]), s0(p0: [[219.0], [220.0], [221.0]], p1: [[222.0]])], p1: [s0(p0: [[223.0], [224.0], [225.0]], p1: [[226.0]])])], p1: 227.0)]]))]]
    let v1: [s12] = [s12(p0: [[s0(p0: [[228.0], [229.0], [230.0]], p1: [[231.0]])]], p1: s6(p0: s0(p0: [[232.0], [233.0], [234.0]], p1: [[235.0]]), p1: [s1(p0: [s0(p0: [[236.0], [237.0], [238.0]], p1: [[239.0]]), s0(p0: [[240.0], [241.0], [242.0]], p1: [[243.0]])], p1: [s0(p0: [[244.0], [245.0], [246.0]], p1: [[247.0]])]), s1(p0: [s0(p0: [[248.0], [249.0], [250.0]], p1: [[251.0]]), s0(p0: [[252.0], [253.0], [254.0]], p1: [[255.0]])], p1: [s0(p0: [[256.0], [257.0], [258.0]], p1: [[259.0]])])])), s12(p0: [[s0(p0: [[260.0], [261.0], [262.0]], p1: [[263.0]])]], p1: s6(p0: s0(p0: [[264.0], [265.0], [266.0]], p1: [[267.0]]), p1: [s1(p0: [s0(p0: [[268.0], [269.0], [270.0]], p1: [[271.0]]), s0(p0: [[272.0], [273.0], [274.0]], p1: [[275.0]])], p1: [s0(p0: [[276.0], [277.0], [278.0]], p1: [[279.0]])]), s1(p0: [s0(p0: [[280.0], [281.0], [282.0]], p1: [[283.0]]), s0(p0: [[284.0], [285.0], [286.0]], p1: [[287.0]])], p1: [s0(p0: [[288.0], [289.0], [290.0]], p1: [[291.0]])])])), s12(p0: [[s0(p0: [[292.0], [293.0], [294.0]], p1: [[295.0]])]], p1: s6(p0: s0(p0: [[296.0], [297.0], [298.0]], p1: [[299.0]]), p1: [s1(p0: [s0(p0: [[300.0], [301.0], [302.0]], p1: [[303.0]]), s0(p0: [[304.0], [305.0], [306.0]], p1: [[307.0]])], p1: [s0(p0: [[308.0], [309.0], [310.0]], p1: [[311.0]])]), s1(p0: [s0(p0: [[312.0], [313.0], [314.0]], p1: [[315.0]]), s0(p0: [[316.0], [317.0], [318.0]], p1: [[319.0]])], p1: [s0(p0: [[320.0], [321.0], [322.0]], p1: [[323.0]])])]))]
    let v2: Double = 324.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 324.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
