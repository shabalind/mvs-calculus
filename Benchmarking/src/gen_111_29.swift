  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [Double]
    var p2: [[Double]]
    var p3: [[Double]]
    var p4: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: [s0]
    var p1: [[s1]]
  }
  struct s3 {
    var p0: Double
    var p1: [[s1]]
  }
  struct s4 {
    var p0: s3
    var p1: s3
    var p2: [[s0]]
    var p3: [s1]
    var p4: s2
  }
  struct s9 {
    var p0: [[s4]]
    var p1: s2
  }
  func f26(_ v0: Double) -> Double {
    var v7: Double = v0
    var v4: Double = v0
    v7 = v4
    var v8: Double = v4
    var v5: Double = v7
    var v3: Double = v8
    var v1: Double = v0
    v4 = v7
    var v2: Double = v7
    var v13: Double = v7
    var v9: Double = v5
    var v10: Double = v1
    let v6: Double = v8 + v5
    var v21: Double = v9
    var v11: Double = v2
    var v18: Double = v3
    var v12: Double = v1
    var v22: Double = v10
    var v14: Double = v2
    v5 = v18
    var v55: Double = v11
    var v43: Double = v6
    v7 = v22
    var v49: Double = v14
    v5 = v43
    var v30: Double = v11
    var v54: Double = v10
    var v19: Double = v21
    let v45: Double = v4 * v30
    v21 = v43
    var v56: Double = v54
    var v74: Double = v45
    let v52: [Double] = [v4, v49, v19, v74, v12]
    var v119: [Double] = v52
    v119[4] = v56
    v119[0] = v43
    v119[3] = v55
    let v48: Double = v119[0]
    v74 = v13
    return v48
  }
  @inline(never)
  func f0(_ v0: s9, _ v1: Double) -> Double {
    var v2: Double = v1
    let v4: Double = f26(v2)
    var v10: Double = v2
    let v11: Double = v10 - v4
    let v25: Double = v11 / v1
    let v61: Double = v4 * v25
    return v61
  }
  func benchmark() {
    let v0: s9 = s9(p0: [[s4(p0: s3(p0: 0.0, p1: [[s1(p0: s0(p0: [[1.0], [2.0]], p1: [3.0, 4.0, 5.0], p2: [[6.0], [7.0]], p3: [[8.0], [9.0], [10.0]], p4: [[11.0]]), p1: s0(p0: [[12.0], [13.0]], p1: [14.0, 15.0, 16.0], p2: [[17.0], [18.0]], p3: [[19.0], [20.0], [21.0]], p4: [[22.0]]))], [s1(p0: s0(p0: [[23.0], [24.0]], p1: [25.0, 26.0, 27.0], p2: [[28.0], [29.0]], p3: [[30.0], [31.0], [32.0]], p4: [[33.0]]), p1: s0(p0: [[34.0], [35.0]], p1: [36.0, 37.0, 38.0], p2: [[39.0], [40.0]], p3: [[41.0], [42.0], [43.0]], p4: [[44.0]]))], [s1(p0: s0(p0: [[45.0], [46.0]], p1: [47.0, 48.0, 49.0], p2: [[50.0], [51.0]], p3: [[52.0], [53.0], [54.0]], p4: [[55.0]]), p1: s0(p0: [[56.0], [57.0]], p1: [58.0, 59.0, 60.0], p2: [[61.0], [62.0]], p3: [[63.0], [64.0], [65.0]], p4: [[66.0]]))]]), p1: s3(p0: 67.0, p1: [[s1(p0: s0(p0: [[68.0], [69.0]], p1: [70.0, 71.0, 72.0], p2: [[73.0], [74.0]], p3: [[75.0], [76.0], [77.0]], p4: [[78.0]]), p1: s0(p0: [[79.0], [80.0]], p1: [81.0, 82.0, 83.0], p2: [[84.0], [85.0]], p3: [[86.0], [87.0], [88.0]], p4: [[89.0]]))], [s1(p0: s0(p0: [[90.0], [91.0]], p1: [92.0, 93.0, 94.0], p2: [[95.0], [96.0]], p3: [[97.0], [98.0], [99.0]], p4: [[100.0]]), p1: s0(p0: [[101.0], [102.0]], p1: [103.0, 104.0, 105.0], p2: [[106.0], [107.0]], p3: [[108.0], [109.0], [110.0]], p4: [[111.0]]))], [s1(p0: s0(p0: [[112.0], [113.0]], p1: [114.0, 115.0, 116.0], p2: [[117.0], [118.0]], p3: [[119.0], [120.0], [121.0]], p4: [[122.0]]), p1: s0(p0: [[123.0], [124.0]], p1: [125.0, 126.0, 127.0], p2: [[128.0], [129.0]], p3: [[130.0], [131.0], [132.0]], p4: [[133.0]]))]]), p2: [[s0(p0: [[134.0], [135.0]], p1: [136.0, 137.0, 138.0], p2: [[139.0], [140.0]], p3: [[141.0], [142.0], [143.0]], p4: [[144.0]])], [s0(p0: [[145.0], [146.0]], p1: [147.0, 148.0, 149.0], p2: [[150.0], [151.0]], p3: [[152.0], [153.0], [154.0]], p4: [[155.0]])]], p3: [s1(p0: s0(p0: [[156.0], [157.0]], p1: [158.0, 159.0, 160.0], p2: [[161.0], [162.0]], p3: [[163.0], [164.0], [165.0]], p4: [[166.0]]), p1: s0(p0: [[167.0], [168.0]], p1: [169.0, 170.0, 171.0], p2: [[172.0], [173.0]], p3: [[174.0], [175.0], [176.0]], p4: [[177.0]])), s1(p0: s0(p0: [[178.0], [179.0]], p1: [180.0, 181.0, 182.0], p2: [[183.0], [184.0]], p3: [[185.0], [186.0], [187.0]], p4: [[188.0]]), p1: s0(p0: [[189.0], [190.0]], p1: [191.0, 192.0, 193.0], p2: [[194.0], [195.0]], p3: [[196.0], [197.0], [198.0]], p4: [[199.0]])), s1(p0: s0(p0: [[200.0], [201.0]], p1: [202.0, 203.0, 204.0], p2: [[205.0], [206.0]], p3: [[207.0], [208.0], [209.0]], p4: [[210.0]]), p1: s0(p0: [[211.0], [212.0]], p1: [213.0, 214.0, 215.0], p2: [[216.0], [217.0]], p3: [[218.0], [219.0], [220.0]], p4: [[221.0]]))], p4: s2(p0: [s0(p0: [[222.0], [223.0]], p1: [224.0, 225.0, 226.0], p2: [[227.0], [228.0]], p3: [[229.0], [230.0], [231.0]], p4: [[232.0]]), s0(p0: [[233.0], [234.0]], p1: [235.0, 236.0, 237.0], p2: [[238.0], [239.0]], p3: [[240.0], [241.0], [242.0]], p4: [[243.0]]), s0(p0: [[244.0], [245.0]], p1: [246.0, 247.0, 248.0], p2: [[249.0], [250.0]], p3: [[251.0], [252.0], [253.0]], p4: [[254.0]])], p1: [[s1(p0: s0(p0: [[255.0], [256.0]], p1: [257.0, 258.0, 259.0], p2: [[260.0], [261.0]], p3: [[262.0], [263.0], [264.0]], p4: [[265.0]]), p1: s0(p0: [[266.0], [267.0]], p1: [268.0, 269.0, 270.0], p2: [[271.0], [272.0]], p3: [[273.0], [274.0], [275.0]], p4: [[276.0]]))]]))]], p1: s2(p0: [s0(p0: [[277.0], [278.0]], p1: [279.0, 280.0, 281.0], p2: [[282.0], [283.0]], p3: [[284.0], [285.0], [286.0]], p4: [[287.0]]), s0(p0: [[288.0], [289.0]], p1: [290.0, 291.0, 292.0], p2: [[293.0], [294.0]], p3: [[295.0], [296.0], [297.0]], p4: [[298.0]]), s0(p0: [[299.0], [300.0]], p1: [301.0, 302.0, 303.0], p2: [[304.0], [305.0]], p3: [[306.0], [307.0], [308.0]], p4: [[309.0]])], p1: [[s1(p0: s0(p0: [[310.0], [311.0]], p1: [312.0, 313.0, 314.0], p2: [[315.0], [316.0]], p3: [[317.0], [318.0], [319.0]], p4: [[320.0]]), p1: s0(p0: [[321.0], [322.0]], p1: [323.0, 324.0, 325.0], p2: [[326.0], [327.0]], p3: [[328.0], [329.0], [330.0]], p4: [[331.0]]))]]))
    let v1: Double = 332.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 332.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
