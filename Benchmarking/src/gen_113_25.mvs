  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  } in
  struct s2 {
    var p0: s1
    var p1: s1
  } in
  let noinline_f0: (s2, Float) -> Float = (v0: s2, v1: Float) -> Float {
    var v7: Float = v1 in
    var v2: Float = v1 in
    let v26: [Float] = [v1, v1, v1, v7, v2, v7, v7] in
    var v30: [Float] = v26 in
    var v29: [Float] = v26 in
    v29[6] = v1 in
    let v58: Float = v29[4] in
    v29 = v30 in
    v30[5] = v7 in
    v30[6] = v2 in
    var v242: Float = v58 in
    var v198: Float = v242 in
    v198
  } in
  fun loop(i: Int, v0: s2, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(s1([[s0([[0.0], [1.0]], [[2.0]])]], s0([[3.0], [4.0]], [[5.0]])), s1([[s0([[6.0], [7.0]], [[8.0]])]], s0([[9.0], [10.0]], [[11.0]]))) in
    let v1: Float = 12.0 in
    let initialResult: Float = 12.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()