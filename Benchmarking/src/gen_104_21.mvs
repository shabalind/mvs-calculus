  let noinline_f0: ([Float], Float) -> Float = (v0: [Float], v1: Float) -> Float {
    var v6: Float = v1 in
    var v2: Float = v6 in
    var v4: Float = v2 in
    var v3: [Float] = v0 in
    v3[1] = v4 in
    var v13: Float = v2 in
    v3[1] = v13 in
    v2 = v13 in
    let v10: Float = v3[1] in
    var v9: Float = v1 in
    var v19: [Float] = v0 in
    v3 = v0 in
    v3[1] = v1 in
    v9 = v10 in
    let v63: Float = v2 - v9 in
    v3[0] = v13 in
    v3 = v19 in
    v19[1] = v13 in
    v63
  } in
  fun loop(i: Int, v0: [Float], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [Float] = [0.0, 1.0] in
    let v1: Float = 2.0 in
    let initialResult: Float = 2.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()