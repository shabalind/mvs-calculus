  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let f11: ([[Float]]) -> [[Float]] = (v0: [[Float]]) -> [[Float]] {
    let v7: [[[Float]]] = [v0, v0, v0, v0, v0] in
    let v1: [[Float]] = v7[2] in
    let v5: [Float] = v0[1] in
    let v4: Float = v5[0] in
    let v8: [Float] = v1[0] in
    let v6: [[Float]] = v7[2] in
    var v3: [[Float]] = v0 in
    v3[1] = v8 in
    var v20: [[[Float]]] = v7 in
    var v15: [[Float]] = v1 in
    v3[0] = v8 in
    var v13: Float = v4 in
    var v10: [[Float]] = v3 in
    let v18: [[Float]] = v20[0] in
    let v29: [Float] = v15[1] in
    var v23: [Float] = v8 in
    var v24: [Float] = v29 in
    v20[3] = v1 in
    v20[3] = v18 in
    v3[0] = v23 in
    v20[1] = v18 in
    v15[0] = v24 in
    v15[1] = v29 in
    v24[0] = v13 in
    let v25: [[Float]] = v20[0] in
    let v43: [Float] = v25[0] in
    v3[1] = v23 in
    v3[1] = v43 in
    let v64: [[Float]] = [v23, v43, v5] in
    v3[0] = v24 in
    var v59: [[Float]] = v0 in
    var v39: [[Float]] = v64 in
    var v136: [[Float]] = v64 in
    var v47: Float = v4 in
    v10[1] = v5 in
    let v88: s0 = s0(v39, v6) in
    var v61: s0 = v88 in
    let v105: [[Float]] = v61.p0 in
    v61.p0 = v136 in
    v136[0] = v23 in
    let v110: [[Float]] = v61.p0 in
    v24[0] = v47 in
    let v96: s0 = s0(v110, v10) in
    let v98: [Float] = v59[1] in
    v136[1] = v29 in
    v61.p0 = v105 in
    v61.p0 = v136 in
    v39[2] = v5 in
    let v58: [[Float]] = v88.p0 in
    var v86: [[Float]] = v136 in
    v61.p0 = v39 in
    let v171: [[[Float]]] = [v58] in
    v61.p0 = v39 in
    v39 = v136 in
    let v135: [Float] = v59[1] in
    let v196: [[Float]] = v171[0] in
    v61.p0 = v86 in
    v59[0] = v98 in
    v61.p0 = v196 in
    let v152: [[Float]] = v96.p1 in
    v39[1] = v135 in
    v152
  } in
  let f10: (s0) -> s0 = (v0: s0) -> s0 {
    let v3: [[Float]] = v0.p1 in
    let v7: [[Float]] = v0.p0 in
    let v9: s0 = s0(v7, v3) in
    v9
  } in
  let noinline_f0: ([[s0]], Float) -> Float = (v0: [[s0]], v1: Float) -> Float {
    var v5: [[s0]] = v0 in
    let v7: [s0] = v5[2] in
    let v4: s0 = v7[0] in
    let v3: [[Float]] = v4.p1 in
    let v11: s0 = f10(v4) in
    let v10: [s0] = v0[0] in
    let v12: [[Float]] = f11(v3) in
    let v24: [[Float]] = v11.p0 in
    let v19: [[Float]] = f11(v12) in
    let v21: [Float] = v24[0] in
    var v31: [[Float]] = v12 in
    v5[1] = v10 in
    let v14: [[Float]] = f11(v31) in
    let v50: [Float] = v19[1] in
    v31[1] = v50 in
    let v27: [Float] = v14[0] in
    v31[0] = v27 in
    v31[0] = v21 in
    v31[1] = v50 in
    let v175: Float = v27[0] in
    v175
  } in
  fun loop(i: Int, v0: [[s0]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s0]] = [[s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]])], [s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]])], [s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]])]] in
    let v1: Float = 15.0 in
    let initialResult: Float = 15.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()