  struct s0 {
    var p0: [Float]
    var p1: [[Float]]
  } in
  struct s3 {
    var p0: [s0]
    var p1: s0
  } in
  struct s6 {
    var p0: s3
    var p1: [s3]
  } in
  let noinline_f0: (s6, [[s6]], Float) -> Float = (v0: s6, v1: [[s6]], v2: Float) -> Float {
    let v5: s3 = v0.p0 in
    let v34: [s0] = v5.p0 in
    let v26: s0 = v34[0] in
    let v40: [[Float]] = v26.p1 in
    var v74: [[Float]] = v40 in
    let v38: [Float] = v74[1] in
    let v44: Float = v38[0] in
    v74[0] = v38 in
    v74[1] = v38 in
    v74[1] = v38 in
    let v86: [Float] = v74[2] in
    let v102: [Float] = v74[0] in
    v74[1] = v102 in
    var v83: [Float] = v86 in
    let v111: Float = v83[0] in
    v83[0] = v44 in
    v111
  } in
  fun loop(i: Int, v0: s6, v1: [[s6]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s6 = s6(s3([s0([0.0, 1.0], [[2.0], [3.0], [4.0]])], s0([5.0, 6.0], [[7.0], [8.0], [9.0]])), [s3([s0([10.0, 11.0], [[12.0], [13.0], [14.0]])], s0([15.0, 16.0], [[17.0], [18.0], [19.0]])), s3([s0([20.0, 21.0], [[22.0], [23.0], [24.0]])], s0([25.0, 26.0], [[27.0], [28.0], [29.0]]))]) in
    let v1: [[s6]] = [[s6(s3([s0([30.0, 31.0], [[32.0], [33.0], [34.0]])], s0([35.0, 36.0], [[37.0], [38.0], [39.0]])), [s3([s0([40.0, 41.0], [[42.0], [43.0], [44.0]])], s0([45.0, 46.0], [[47.0], [48.0], [49.0]])), s3([s0([50.0, 51.0], [[52.0], [53.0], [54.0]])], s0([55.0, 56.0], [[57.0], [58.0], [59.0]]))])], [s6(s3([s0([60.0, 61.0], [[62.0], [63.0], [64.0]])], s0([65.0, 66.0], [[67.0], [68.0], [69.0]])), [s3([s0([70.0, 71.0], [[72.0], [73.0], [74.0]])], s0([75.0, 76.0], [[77.0], [78.0], [79.0]])), s3([s0([80.0, 81.0], [[82.0], [83.0], [84.0]])], s0([85.0, 86.0], [[87.0], [88.0], [89.0]]))])]] in
    let v2: Float = 90.0 in
    let initialResult: Float = 90.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()