  let noinline_f0: ([Float], Float) -> Float = (v0: [Float], v1: Float) -> Float {
    let v6: Float = v0[0] in
    var v8: [Float] = v0 in
    let v9: Float = v0[0] in
    let v3: Float = v0[0] in
    let v4: Float = v0[0] in
    let v27: Float = v0[0] in
    var v11: Float = v4 in
    var v10: [Float] = v0 in
    v11 = v4 in
    v10[0] = v9 in
    v10[0] = v6 in
    v8[0] = v4 in
    v8[0] = v9 in
    v8[0] = v11 in
    let v12: Float = v8[0] in
    var v14: [Float] = v8 in
    v11 = v27 in
    let v36: Float = v14[0] in
    let v28: Float = v8[0] in
    let v38: [Float] = [v3, v27, v36, v28, v27, v9, v4] in
    var v29: [Float] = v38 in
    v10[0] = v36 in
    var v24: Float = v28 in
    var v55: [Float] = v29 in
    var v75: [Float] = v29 in
    v29[6] = v12 in
    v29[0] = v27 in
    let v100: Float = v10[0] in
    var v37: [Float] = v55 in
    v29[5] = v27 in
    v55[2] = v100 in
    var v88: [Float] = v75 in
    let v96: Float = v37[0] in
    let v127: Float = v37[1] in
    var v69: [Float] = v88 in
    let v65: Float = v69[3] in
    v8[0] = v24 in
    v69[5] = v127 in
    v88[5] = v127 in
    v75[6] = v96 in
    v65
  } in
  fun loop(i: Int, v0: [Float], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [Float] = [0.0] in
    let v1: Float = 1.0 in
    let initialResult: Float = 1.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()