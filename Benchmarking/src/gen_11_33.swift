  import Dispatch
  struct s0 {
    var p0: [Double]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  }
  struct s2 {
    var p0: s0
    var p1: s1
  }
  struct s3 {
    var p0: [[s2]]
    var p1: [s2]
  }
  struct s4 {
    var p0: s2
    var p1: [[Double]]
  }
  struct s5 {
    var p0: [s3]
    var p1: [s1]
  }
  struct s6 {
    var p0: [s2]
    var p1: Double
    var p2: [s5]
    var p3: [s2]
  }
  @inline(never)
  func f0(_ v0: [s6], _ v1: [s4], _ v2: Double) -> Double {
    let v3: s6 = v0[1]
    let v4: [s2] = v3.p3
    let v12: [s2] = v3.p3
    let v6: s2 = v12[0]
    var v22: s6 = v3
    let v14: s1 = v6.p1
    let v23: [[s0]] = v14.p1
    let v86: Double = v22.p1
    let v230: [s0] = v23[0]
    let v46: s0 = v230[0]
    let v96: [Double] = v46.p0
    var v64: [Double] = v96
    let v99: Double = v64[0]
    let v111: Double = v86 - v99
    v22.p0 = v4
    return v111
  }
  func benchmark() {
    let v0: [s6] = [s6(p0: [s2(p0: s0(p0: [0.0, 1.0], p1: [[2.0], [3.0], [4.0]]), p1: s1(p0: s0(p0: [5.0, 6.0], p1: [[7.0], [8.0], [9.0]]), p1: [[s0(p0: [10.0, 11.0], p1: [[12.0], [13.0], [14.0]])], [s0(p0: [15.0, 16.0], p1: [[17.0], [18.0], [19.0]])]]))], p1: 20.0, p2: [s5(p0: [s3(p0: [[s2(p0: s0(p0: [21.0, 22.0], p1: [[23.0], [24.0], [25.0]]), p1: s1(p0: s0(p0: [26.0, 27.0], p1: [[28.0], [29.0], [30.0]]), p1: [[s0(p0: [31.0, 32.0], p1: [[33.0], [34.0], [35.0]])], [s0(p0: [36.0, 37.0], p1: [[38.0], [39.0], [40.0]])]]))], [s2(p0: s0(p0: [41.0, 42.0], p1: [[43.0], [44.0], [45.0]]), p1: s1(p0: s0(p0: [46.0, 47.0], p1: [[48.0], [49.0], [50.0]]), p1: [[s0(p0: [51.0, 52.0], p1: [[53.0], [54.0], [55.0]])], [s0(p0: [56.0, 57.0], p1: [[58.0], [59.0], [60.0]])]]))], [s2(p0: s0(p0: [61.0, 62.0], p1: [[63.0], [64.0], [65.0]]), p1: s1(p0: s0(p0: [66.0, 67.0], p1: [[68.0], [69.0], [70.0]]), p1: [[s0(p0: [71.0, 72.0], p1: [[73.0], [74.0], [75.0]])], [s0(p0: [76.0, 77.0], p1: [[78.0], [79.0], [80.0]])]]))]], p1: [s2(p0: s0(p0: [81.0, 82.0], p1: [[83.0], [84.0], [85.0]]), p1: s1(p0: s0(p0: [86.0, 87.0], p1: [[88.0], [89.0], [90.0]]), p1: [[s0(p0: [91.0, 92.0], p1: [[93.0], [94.0], [95.0]])], [s0(p0: [96.0, 97.0], p1: [[98.0], [99.0], [100.0]])]]))]), s3(p0: [[s2(p0: s0(p0: [101.0, 102.0], p1: [[103.0], [104.0], [105.0]]), p1: s1(p0: s0(p0: [106.0, 107.0], p1: [[108.0], [109.0], [110.0]]), p1: [[s0(p0: [111.0, 112.0], p1: [[113.0], [114.0], [115.0]])], [s0(p0: [116.0, 117.0], p1: [[118.0], [119.0], [120.0]])]]))], [s2(p0: s0(p0: [121.0, 122.0], p1: [[123.0], [124.0], [125.0]]), p1: s1(p0: s0(p0: [126.0, 127.0], p1: [[128.0], [129.0], [130.0]]), p1: [[s0(p0: [131.0, 132.0], p1: [[133.0], [134.0], [135.0]])], [s0(p0: [136.0, 137.0], p1: [[138.0], [139.0], [140.0]])]]))], [s2(p0: s0(p0: [141.0, 142.0], p1: [[143.0], [144.0], [145.0]]), p1: s1(p0: s0(p0: [146.0, 147.0], p1: [[148.0], [149.0], [150.0]]), p1: [[s0(p0: [151.0, 152.0], p1: [[153.0], [154.0], [155.0]])], [s0(p0: [156.0, 157.0], p1: [[158.0], [159.0], [160.0]])]]))]], p1: [s2(p0: s0(p0: [161.0, 162.0], p1: [[163.0], [164.0], [165.0]]), p1: s1(p0: s0(p0: [166.0, 167.0], p1: [[168.0], [169.0], [170.0]]), p1: [[s0(p0: [171.0, 172.0], p1: [[173.0], [174.0], [175.0]])], [s0(p0: [176.0, 177.0], p1: [[178.0], [179.0], [180.0]])]]))])], p1: [s1(p0: s0(p0: [181.0, 182.0], p1: [[183.0], [184.0], [185.0]]), p1: [[s0(p0: [186.0, 187.0], p1: [[188.0], [189.0], [190.0]])], [s0(p0: [191.0, 192.0], p1: [[193.0], [194.0], [195.0]])]]), s1(p0: s0(p0: [196.0, 197.0], p1: [[198.0], [199.0], [200.0]]), p1: [[s0(p0: [201.0, 202.0], p1: [[203.0], [204.0], [205.0]])], [s0(p0: [206.0, 207.0], p1: [[208.0], [209.0], [210.0]])]]), s1(p0: s0(p0: [211.0, 212.0], p1: [[213.0], [214.0], [215.0]]), p1: [[s0(p0: [216.0, 217.0], p1: [[218.0], [219.0], [220.0]])], [s0(p0: [221.0, 222.0], p1: [[223.0], [224.0], [225.0]])]])])], p3: [s2(p0: s0(p0: [226.0, 227.0], p1: [[228.0], [229.0], [230.0]]), p1: s1(p0: s0(p0: [231.0, 232.0], p1: [[233.0], [234.0], [235.0]]), p1: [[s0(p0: [236.0, 237.0], p1: [[238.0], [239.0], [240.0]])], [s0(p0: [241.0, 242.0], p1: [[243.0], [244.0], [245.0]])]]))]), s6(p0: [s2(p0: s0(p0: [246.0, 247.0], p1: [[248.0], [249.0], [250.0]]), p1: s1(p0: s0(p0: [251.0, 252.0], p1: [[253.0], [254.0], [255.0]]), p1: [[s0(p0: [256.0, 257.0], p1: [[258.0], [259.0], [260.0]])], [s0(p0: [261.0, 262.0], p1: [[263.0], [264.0], [265.0]])]]))], p1: 266.0, p2: [s5(p0: [s3(p0: [[s2(p0: s0(p0: [267.0, 268.0], p1: [[269.0], [270.0], [271.0]]), p1: s1(p0: s0(p0: [272.0, 273.0], p1: [[274.0], [275.0], [276.0]]), p1: [[s0(p0: [277.0, 278.0], p1: [[279.0], [280.0], [281.0]])], [s0(p0: [282.0, 283.0], p1: [[284.0], [285.0], [286.0]])]]))], [s2(p0: s0(p0: [287.0, 288.0], p1: [[289.0], [290.0], [291.0]]), p1: s1(p0: s0(p0: [292.0, 293.0], p1: [[294.0], [295.0], [296.0]]), p1: [[s0(p0: [297.0, 298.0], p1: [[299.0], [300.0], [301.0]])], [s0(p0: [302.0, 303.0], p1: [[304.0], [305.0], [306.0]])]]))], [s2(p0: s0(p0: [307.0, 308.0], p1: [[309.0], [310.0], [311.0]]), p1: s1(p0: s0(p0: [312.0, 313.0], p1: [[314.0], [315.0], [316.0]]), p1: [[s0(p0: [317.0, 318.0], p1: [[319.0], [320.0], [321.0]])], [s0(p0: [322.0, 323.0], p1: [[324.0], [325.0], [326.0]])]]))]], p1: [s2(p0: s0(p0: [327.0, 328.0], p1: [[329.0], [330.0], [331.0]]), p1: s1(p0: s0(p0: [332.0, 333.0], p1: [[334.0], [335.0], [336.0]]), p1: [[s0(p0: [337.0, 338.0], p1: [[339.0], [340.0], [341.0]])], [s0(p0: [342.0, 343.0], p1: [[344.0], [345.0], [346.0]])]]))]), s3(p0: [[s2(p0: s0(p0: [347.0, 348.0], p1: [[349.0], [350.0], [351.0]]), p1: s1(p0: s0(p0: [352.0, 353.0], p1: [[354.0], [355.0], [356.0]]), p1: [[s0(p0: [357.0, 358.0], p1: [[359.0], [360.0], [361.0]])], [s0(p0: [362.0, 363.0], p1: [[364.0], [365.0], [366.0]])]]))], [s2(p0: s0(p0: [367.0, 368.0], p1: [[369.0], [370.0], [371.0]]), p1: s1(p0: s0(p0: [372.0, 373.0], p1: [[374.0], [375.0], [376.0]]), p1: [[s0(p0: [377.0, 378.0], p1: [[379.0], [380.0], [381.0]])], [s0(p0: [382.0, 383.0], p1: [[384.0], [385.0], [386.0]])]]))], [s2(p0: s0(p0: [387.0, 388.0], p1: [[389.0], [390.0], [391.0]]), p1: s1(p0: s0(p0: [392.0, 393.0], p1: [[394.0], [395.0], [396.0]]), p1: [[s0(p0: [397.0, 398.0], p1: [[399.0], [400.0], [401.0]])], [s0(p0: [402.0, 403.0], p1: [[404.0], [405.0], [406.0]])]]))]], p1: [s2(p0: s0(p0: [407.0, 408.0], p1: [[409.0], [410.0], [411.0]]), p1: s1(p0: s0(p0: [412.0, 413.0], p1: [[414.0], [415.0], [416.0]]), p1: [[s0(p0: [417.0, 418.0], p1: [[419.0], [420.0], [421.0]])], [s0(p0: [422.0, 423.0], p1: [[424.0], [425.0], [426.0]])]]))])], p1: [s1(p0: s0(p0: [427.0, 428.0], p1: [[429.0], [430.0], [431.0]]), p1: [[s0(p0: [432.0, 433.0], p1: [[434.0], [435.0], [436.0]])], [s0(p0: [437.0, 438.0], p1: [[439.0], [440.0], [441.0]])]]), s1(p0: s0(p0: [442.0, 443.0], p1: [[444.0], [445.0], [446.0]]), p1: [[s0(p0: [447.0, 448.0], p1: [[449.0], [450.0], [451.0]])], [s0(p0: [452.0, 453.0], p1: [[454.0], [455.0], [456.0]])]]), s1(p0: s0(p0: [457.0, 458.0], p1: [[459.0], [460.0], [461.0]]), p1: [[s0(p0: [462.0, 463.0], p1: [[464.0], [465.0], [466.0]])], [s0(p0: [467.0, 468.0], p1: [[469.0], [470.0], [471.0]])]])])], p3: [s2(p0: s0(p0: [472.0, 473.0], p1: [[474.0], [475.0], [476.0]]), p1: s1(p0: s0(p0: [477.0, 478.0], p1: [[479.0], [480.0], [481.0]]), p1: [[s0(p0: [482.0, 483.0], p1: [[484.0], [485.0], [486.0]])], [s0(p0: [487.0, 488.0], p1: [[489.0], [490.0], [491.0]])]]))]), s6(p0: [s2(p0: s0(p0: [492.0, 493.0], p1: [[494.0], [495.0], [496.0]]), p1: s1(p0: s0(p0: [497.0, 498.0], p1: [[499.0], [500.0], [501.0]]), p1: [[s0(p0: [502.0, 503.0], p1: [[504.0], [505.0], [506.0]])], [s0(p0: [507.0, 508.0], p1: [[509.0], [510.0], [511.0]])]]))], p1: 512.0, p2: [s5(p0: [s3(p0: [[s2(p0: s0(p0: [513.0, 514.0], p1: [[515.0], [516.0], [517.0]]), p1: s1(p0: s0(p0: [518.0, 519.0], p1: [[520.0], [521.0], [522.0]]), p1: [[s0(p0: [523.0, 524.0], p1: [[525.0], [526.0], [527.0]])], [s0(p0: [528.0, 529.0], p1: [[530.0], [531.0], [532.0]])]]))], [s2(p0: s0(p0: [533.0, 534.0], p1: [[535.0], [536.0], [537.0]]), p1: s1(p0: s0(p0: [538.0, 539.0], p1: [[540.0], [541.0], [542.0]]), p1: [[s0(p0: [543.0, 544.0], p1: [[545.0], [546.0], [547.0]])], [s0(p0: [548.0, 549.0], p1: [[550.0], [551.0], [552.0]])]]))], [s2(p0: s0(p0: [553.0, 554.0], p1: [[555.0], [556.0], [557.0]]), p1: s1(p0: s0(p0: [558.0, 559.0], p1: [[560.0], [561.0], [562.0]]), p1: [[s0(p0: [563.0, 564.0], p1: [[565.0], [566.0], [567.0]])], [s0(p0: [568.0, 569.0], p1: [[570.0], [571.0], [572.0]])]]))]], p1: [s2(p0: s0(p0: [573.0, 574.0], p1: [[575.0], [576.0], [577.0]]), p1: s1(p0: s0(p0: [578.0, 579.0], p1: [[580.0], [581.0], [582.0]]), p1: [[s0(p0: [583.0, 584.0], p1: [[585.0], [586.0], [587.0]])], [s0(p0: [588.0, 589.0], p1: [[590.0], [591.0], [592.0]])]]))]), s3(p0: [[s2(p0: s0(p0: [593.0, 594.0], p1: [[595.0], [596.0], [597.0]]), p1: s1(p0: s0(p0: [598.0, 599.0], p1: [[600.0], [601.0], [602.0]]), p1: [[s0(p0: [603.0, 604.0], p1: [[605.0], [606.0], [607.0]])], [s0(p0: [608.0, 609.0], p1: [[610.0], [611.0], [612.0]])]]))], [s2(p0: s0(p0: [613.0, 614.0], p1: [[615.0], [616.0], [617.0]]), p1: s1(p0: s0(p0: [618.0, 619.0], p1: [[620.0], [621.0], [622.0]]), p1: [[s0(p0: [623.0, 624.0], p1: [[625.0], [626.0], [627.0]])], [s0(p0: [628.0, 629.0], p1: [[630.0], [631.0], [632.0]])]]))], [s2(p0: s0(p0: [633.0, 634.0], p1: [[635.0], [636.0], [637.0]]), p1: s1(p0: s0(p0: [638.0, 639.0], p1: [[640.0], [641.0], [642.0]]), p1: [[s0(p0: [643.0, 644.0], p1: [[645.0], [646.0], [647.0]])], [s0(p0: [648.0, 649.0], p1: [[650.0], [651.0], [652.0]])]]))]], p1: [s2(p0: s0(p0: [653.0, 654.0], p1: [[655.0], [656.0], [657.0]]), p1: s1(p0: s0(p0: [658.0, 659.0], p1: [[660.0], [661.0], [662.0]]), p1: [[s0(p0: [663.0, 664.0], p1: [[665.0], [666.0], [667.0]])], [s0(p0: [668.0, 669.0], p1: [[670.0], [671.0], [672.0]])]]))])], p1: [s1(p0: s0(p0: [673.0, 674.0], p1: [[675.0], [676.0], [677.0]]), p1: [[s0(p0: [678.0, 679.0], p1: [[680.0], [681.0], [682.0]])], [s0(p0: [683.0, 684.0], p1: [[685.0], [686.0], [687.0]])]]), s1(p0: s0(p0: [688.0, 689.0], p1: [[690.0], [691.0], [692.0]]), p1: [[s0(p0: [693.0, 694.0], p1: [[695.0], [696.0], [697.0]])], [s0(p0: [698.0, 699.0], p1: [[700.0], [701.0], [702.0]])]]), s1(p0: s0(p0: [703.0, 704.0], p1: [[705.0], [706.0], [707.0]]), p1: [[s0(p0: [708.0, 709.0], p1: [[710.0], [711.0], [712.0]])], [s0(p0: [713.0, 714.0], p1: [[715.0], [716.0], [717.0]])]])])], p3: [s2(p0: s0(p0: [718.0, 719.0], p1: [[720.0], [721.0], [722.0]]), p1: s1(p0: s0(p0: [723.0, 724.0], p1: [[725.0], [726.0], [727.0]]), p1: [[s0(p0: [728.0, 729.0], p1: [[730.0], [731.0], [732.0]])], [s0(p0: [733.0, 734.0], p1: [[735.0], [736.0], [737.0]])]]))])]
    let v1: [s4] = [s4(p0: s2(p0: s0(p0: [738.0, 739.0], p1: [[740.0], [741.0], [742.0]]), p1: s1(p0: s0(p0: [743.0, 744.0], p1: [[745.0], [746.0], [747.0]]), p1: [[s0(p0: [748.0, 749.0], p1: [[750.0], [751.0], [752.0]])], [s0(p0: [753.0, 754.0], p1: [[755.0], [756.0], [757.0]])]])), p1: [[758.0], [759.0]]), s4(p0: s2(p0: s0(p0: [760.0, 761.0], p1: [[762.0], [763.0], [764.0]]), p1: s1(p0: s0(p0: [765.0, 766.0], p1: [[767.0], [768.0], [769.0]]), p1: [[s0(p0: [770.0, 771.0], p1: [[772.0], [773.0], [774.0]])], [s0(p0: [775.0, 776.0], p1: [[777.0], [778.0], [779.0]])]])), p1: [[780.0], [781.0]])]
    let v2: Double = 782.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 782.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
