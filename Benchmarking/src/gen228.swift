  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: [s0]
    var p1: [[s1]]
  }
  struct s3 {
    var p0: s2
    var p1: [[s0]]
  }
  struct s4 {
    var p0: s3
    var p1: s1
  }
  func f45(_ v0: Double) -> Double {
    var v2: Double = v0
    var v7: Double = v0
    var v4: Double = v2
    var v3: Double = v0
    var v8: Double = v0
    v2 = v4
    var v9: Double = v2
    var v6: Double = v8
    var v15: Double = v9
    var v16: Double = v3
    var v13: Double = v9
    var v19: Double = v15
    let v14: Double = v13 / v8
    var v24: Double = v7
    var v29: Double = v19
    var v18: Double = v24
    let v23: [Double] = [v15, v6]
    let v43: Double = v23[1]
    var v26: [Double] = v23
    var v21: Double = v4
    v26[1] = v6
    var v39: Double = v13
    var v25: Double = v39
    var v36: [Double] = v26
    let v34: Double = v23[0]
    let v27: Double = v36[0]
    let v59: Double = v36[0]
    var v28: [Double] = v23
    var v38: [Double] = v36
    var v62: [Double] = v26
    v36[0] = v14
    var v33: [Double] = v62
    v33[0] = v21
    let v46: [[Double]] = [v23, v36, v62, v36]
    var v50: [[Double]] = v46
    var v37: [[Double]] = v50
    var v32: Double = v18
    v36[1] = v21
    v26[1] = v25
    var v53: [[Double]] = v37
    let v67: Double = v33[1]
    v28[1] = v29
    v33[0] = v4
    v37[3] = v28
    let v107: Double = v26[0]
    v50[0] = v28
    v28[0] = v16
    v24 = v107
    v15 = v43
    v53[2] = v38
    v38[0] = v34
    var v87: Double = v67
    v26[1] = v25
    var v108: Double = v21
    v33[0] = v32
    let v117: Double = v62[0]
    v38[1] = v27
    v62[0] = v117
    var v78: [[Double]] = v53
    let v95: [Double] = v78[0]
    let v172: Double = v95[0]
    v62[0] = v59
    v28[1] = v87
    v16 = v34
    v7 = v108
    return v172
  }
  @inline(never)
  func f0(_ v0: s4, _ v1: [s1], _ v2: Double) -> Double {
    let v7: Double = f45(v2)
    let v18: Double = f45(v2)
    var v23: Double = v18
    let v73: Double = v7 - v18
    let v97: Double = v23 * v73
    let v284: Double = v23 - v97
    return v284
  }
  func benchmark() {
    let v0: s4 = s4(p0: s3(p0: s2(p0: [s0(p0: [[0.0]], p1: [[1.0], [2.0]], p2: [[3.0], [4.0], [5.0]], p3: [[6.0], [7.0], [8.0]])], p1: [[s1(p0: s0(p0: [[9.0]], p1: [[10.0], [11.0]], p2: [[12.0], [13.0], [14.0]], p3: [[15.0], [16.0], [17.0]]), p1: [s0(p0: [[18.0]], p1: [[19.0], [20.0]], p2: [[21.0], [22.0], [23.0]], p3: [[24.0], [25.0], [26.0]]), s0(p0: [[27.0]], p1: [[28.0], [29.0]], p2: [[30.0], [31.0], [32.0]], p3: [[33.0], [34.0], [35.0]]), s0(p0: [[36.0]], p1: [[37.0], [38.0]], p2: [[39.0], [40.0], [41.0]], p3: [[42.0], [43.0], [44.0]])])]]), p1: [[s0(p0: [[45.0]], p1: [[46.0], [47.0]], p2: [[48.0], [49.0], [50.0]], p3: [[51.0], [52.0], [53.0]])], [s0(p0: [[54.0]], p1: [[55.0], [56.0]], p2: [[57.0], [58.0], [59.0]], p3: [[60.0], [61.0], [62.0]])], [s0(p0: [[63.0]], p1: [[64.0], [65.0]], p2: [[66.0], [67.0], [68.0]], p3: [[69.0], [70.0], [71.0]])]]), p1: s1(p0: s0(p0: [[72.0]], p1: [[73.0], [74.0]], p2: [[75.0], [76.0], [77.0]], p3: [[78.0], [79.0], [80.0]]), p1: [s0(p0: [[81.0]], p1: [[82.0], [83.0]], p2: [[84.0], [85.0], [86.0]], p3: [[87.0], [88.0], [89.0]]), s0(p0: [[90.0]], p1: [[91.0], [92.0]], p2: [[93.0], [94.0], [95.0]], p3: [[96.0], [97.0], [98.0]]), s0(p0: [[99.0]], p1: [[100.0], [101.0]], p2: [[102.0], [103.0], [104.0]], p3: [[105.0], [106.0], [107.0]])]))
    let v1: [s1] = [s1(p0: s0(p0: [[108.0]], p1: [[109.0], [110.0]], p2: [[111.0], [112.0], [113.0]], p3: [[114.0], [115.0], [116.0]]), p1: [s0(p0: [[117.0]], p1: [[118.0], [119.0]], p2: [[120.0], [121.0], [122.0]], p3: [[123.0], [124.0], [125.0]]), s0(p0: [[126.0]], p1: [[127.0], [128.0]], p2: [[129.0], [130.0], [131.0]], p3: [[132.0], [133.0], [134.0]]), s0(p0: [[135.0]], p1: [[136.0], [137.0]], p2: [[138.0], [139.0], [140.0]], p3: [[141.0], [142.0], [143.0]])]), s1(p0: s0(p0: [[144.0]], p1: [[145.0], [146.0]], p2: [[147.0], [148.0], [149.0]], p3: [[150.0], [151.0], [152.0]]), p1: [s0(p0: [[153.0]], p1: [[154.0], [155.0]], p2: [[156.0], [157.0], [158.0]], p3: [[159.0], [160.0], [161.0]]), s0(p0: [[162.0]], p1: [[163.0], [164.0]], p2: [[165.0], [166.0], [167.0]], p3: [[168.0], [169.0], [170.0]]), s0(p0: [[171.0]], p1: [[172.0], [173.0]], p2: [[174.0], [175.0], [176.0]], p3: [[177.0], [178.0], [179.0]])]), s1(p0: s0(p0: [[180.0]], p1: [[181.0], [182.0]], p2: [[183.0], [184.0], [185.0]], p3: [[186.0], [187.0], [188.0]]), p1: [s0(p0: [[189.0]], p1: [[190.0], [191.0]], p2: [[192.0], [193.0], [194.0]], p3: [[195.0], [196.0], [197.0]]), s0(p0: [[198.0]], p1: [[199.0], [200.0]], p2: [[201.0], [202.0], [203.0]], p3: [[204.0], [205.0], [206.0]]), s0(p0: [[207.0]], p1: [[208.0], [209.0]], p2: [[210.0], [211.0], [212.0]], p3: [[213.0], [214.0], [215.0]])])]
    let v2: Double = 216.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 216.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
