  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s1
    var p1: s1
  } in
  struct s3 {
    var p0: s2
    var p1: s1
  } in
  struct s9 {
    var p0: s1
    var p1: [[s3]]
  } in
  let f47: (Float) -> Float = (v0: Float) -> Float {
    let v5: Float = v0 / v0 in
    var v3: Float = v5 in
    var v13: Float = v3 in
    v3 = v5 in
    var v10: Float = v13 in
    var v1: Float = v10 in
    var v14: Float = v1 in
    var v21: Float = v14 in
    var v20: Float = v21 in
    v20
  } in
  let f15: (Float) -> Float = (v0: Float) -> Float {
    let v4: Float = v0 / v0 in
    let v1: Float = f47(v4) in
    let v2: [Float] = [v1, v1, v4, v4] in
    let v5: Float = f47(v0) in
    var v8: Float = v1 in
    var v7: [Float] = v2 in
    let v6: Float = v7[2] in
    v7[2] = v1 in
    v7[2] = v4 in
    let v9: Float = v2[2] in
    var v12: [Float] = v2 in
    let v14: Float = f47(v9) in
    let v10: Float = f47(v0) in
    var v11: [Float] = v12 in
    let v18: Float = v7[1] in
    var v21: [Float] = v11 in
    let v28: Float = v7[3] in
    var v16: Float = v6 in
    let v22: Float = v5 + v4 in
    let v35: Float = f47(v22) in
    var v19: Float = v18 in
    v16 = v35 in
    v12[3] = v6 in
    v12[3] = v19 in
    let v36: [Float] = [v35, v6, v10, v16] in
    v12[2] = v22 in
    var v39: [Float] = v36 in
    let v40: Float = f47(v28) in
    v12[1] = v5 in
    let v30: Float = v39[0] in
    let v29: Float = v21[3] in
    let v41: [[Float]] = [v36, v39, v11, v2, v39] in
    v21 = v12 in
    let v57: Float = v21[3] in
    var v55: [[Float]] = v41 in
    var v83: Float = v8 in
    v11[0] = v5 in
    var v54: [[Float]] = v55 in
    v7[2] = v57 in
    let v47: Float = f47(v83) in
    v55 = v54 in
    v11[2] = v29 in
    let v95: Float = v30 * v4 in
    v21[2] = v28 in
    v39[2] = v14 in
    let v34: [Float] = v54[1] in
    v11[3] = v47 in
    var v77: Float = v40 in
    v21[2] = v77 in
    v12[2] = v30 in
    let v66: Float = v34[3] in
    v7[0] = v95 in
    v66
  } in
  let noinline_f0: (s9, Float) -> Float = (v0: s9, v1: Float) -> Float {
    let v6: s1 = v0.p0 in
    let v7: s0 = v6.p1 in
    var v18: Float = v1 in
    let v21: [[Float]] = v7.p0 in
    let v47: [Float] = v21[0] in
    let v74: Float = v47[0] in
    let v117: Float = f15(v74) in
    let v129: Float = f47(v18) in
    let v146: Float = v117 / v129 in
    v146
  } in
  fun loop(i: Int, v0: s9, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s9 = s9(s1(s0([[0.0]], [[1.0], [2.0], [3.0]]), s0([[4.0]], [[5.0], [6.0], [7.0]])), [[s3(s2(s1(s0([[8.0]], [[9.0], [10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0], [15.0]])), s1(s0([[16.0]], [[17.0], [18.0], [19.0]]), s0([[20.0]], [[21.0], [22.0], [23.0]]))), s1(s0([[24.0]], [[25.0], [26.0], [27.0]]), s0([[28.0]], [[29.0], [30.0], [31.0]])))]]) in
    let v1: Float = 32.0 in
    let initialResult: Float = 32.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()