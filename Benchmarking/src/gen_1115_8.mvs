  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  let noinline_f0: ([s1], Float) -> Float = (v0: [s1], v1: Float) -> Float {
    let v7: s1 = v0[1] in
    let v3: s1 = v0[0] in
    var v5: [s1] = v0 in
    let v6: s1 = v5[1] in
    v5[1] = v3 in
    var v8: [s1] = v0 in
    v8[1] = v6 in
    let v21: s1 = v8[0] in
    v8[1] = v7 in
    v5[1] = v6 in
    let v12: s1 = v5[1] in
    let v17: s0 = v21.p0 in
    let v10: [Float] = [v1] in
    let v27: s1 = v0[0] in
    let v20: [[Float]] = v17.p0 in
    var v25: s1 = v27 in
    let v29: [[Float]] = v17.p0 in
    let v32: s0 = v12.p1 in
    let v36: s0 = v12.p0 in
    v25.p0 = v36 in
    var v30: [[Float]] = v29 in
    let v39: s0 = s0(v30, v30) in
    v25.p0 = v39 in
    let v93: [Float] = v20[1] in
    var v59: [[Float]] = v30 in
    var v84: s1 = v25 in
    v30[0] = v93 in
    let v72: [Float] = v59[0] in
    v84 = v7 in
    v84.p0 = v32 in
    v59[0] = v10 in
    var v52: [Float] = v72 in
    v5[1] = v84 in
    v30[1] = v72 in
    v30[0] = v93 in
    let v138: Float = v52[0] in
    v138
  } in
  fun loop(i: Int, v0: [s1], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1(s0([[0.0], [1.0]], [[2.0], [3.0]]), s0([[4.0], [5.0]], [[6.0], [7.0]])), s1(s0([[8.0], [9.0]], [[10.0], [11.0]]), s0([[12.0], [13.0]], [[14.0], [15.0]]))] in
    let v1: Float = 16.0 in
    let initialResult: Float = 16.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()