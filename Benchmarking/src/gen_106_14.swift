  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
    var p4: [[Double]]
  }
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  }
  struct s2 {
    var p0: s1
    var p1: s1
  }
  struct s3 {
    var p0: [[s0]]
  }
  struct s5 {
    var p0: [[s2]]
    var p1: [s2]
  }
  struct s9 {
    var p0: s3
  }
  struct s11 {
    var p0: s9
    var p1: s5
  }
  func f97(_ v0: Double) -> Double {
    let v3: [Double] = [v0, v0, v0, v0, v0, v0]
    var v5: [Double] = v3
    let v4: Double = v5[5]
    var v12: Double = v4
    return v12
  }
  @inline(never)
  func f0(_ v0: [[s11]], _ v1: Double) -> Double {
    let v3: Double = v1 + v1
    let v5: Double = f97(v3)
    var v2: Double = v5
    let v10: Double = v3 - v2
    let v20: Double = v10 / v3
    return v20
  }
  func benchmark() {
    let v0: [[s11]] = [[s11(p0: s9(p0: s3(p0: [[s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0]], p2: [[5.0], [6.0]], p3: [[7.0]], p4: [[8.0]])], [s0(p0: [[9.0], [10.0], [11.0]], p1: [[12.0], [13.0]], p2: [[14.0], [15.0]], p3: [[16.0]], p4: [[17.0]])]])), p1: s5(p0: [[s2(p0: s1(p0: [[s0(p0: [[18.0], [19.0], [20.0]], p1: [[21.0], [22.0]], p2: [[23.0], [24.0]], p3: [[25.0]], p4: [[26.0]])]], p1: s0(p0: [[27.0], [28.0], [29.0]], p1: [[30.0], [31.0]], p2: [[32.0], [33.0]], p3: [[34.0]], p4: [[35.0]])), p1: s1(p0: [[s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0], [40.0]], p2: [[41.0], [42.0]], p3: [[43.0]], p4: [[44.0]])]], p1: s0(p0: [[45.0], [46.0], [47.0]], p1: [[48.0], [49.0]], p2: [[50.0], [51.0]], p3: [[52.0]], p4: [[53.0]])))]], p1: [s2(p0: s1(p0: [[s0(p0: [[54.0], [55.0], [56.0]], p1: [[57.0], [58.0]], p2: [[59.0], [60.0]], p3: [[61.0]], p4: [[62.0]])]], p1: s0(p0: [[63.0], [64.0], [65.0]], p1: [[66.0], [67.0]], p2: [[68.0], [69.0]], p3: [[70.0]], p4: [[71.0]])), p1: s1(p0: [[s0(p0: [[72.0], [73.0], [74.0]], p1: [[75.0], [76.0]], p2: [[77.0], [78.0]], p3: [[79.0]], p4: [[80.0]])]], p1: s0(p0: [[81.0], [82.0], [83.0]], p1: [[84.0], [85.0]], p2: [[86.0], [87.0]], p3: [[88.0]], p4: [[89.0]])))]))], [s11(p0: s9(p0: s3(p0: [[s0(p0: [[90.0], [91.0], [92.0]], p1: [[93.0], [94.0]], p2: [[95.0], [96.0]], p3: [[97.0]], p4: [[98.0]])], [s0(p0: [[99.0], [100.0], [101.0]], p1: [[102.0], [103.0]], p2: [[104.0], [105.0]], p3: [[106.0]], p4: [[107.0]])]])), p1: s5(p0: [[s2(p0: s1(p0: [[s0(p0: [[108.0], [109.0], [110.0]], p1: [[111.0], [112.0]], p2: [[113.0], [114.0]], p3: [[115.0]], p4: [[116.0]])]], p1: s0(p0: [[117.0], [118.0], [119.0]], p1: [[120.0], [121.0]], p2: [[122.0], [123.0]], p3: [[124.0]], p4: [[125.0]])), p1: s1(p0: [[s0(p0: [[126.0], [127.0], [128.0]], p1: [[129.0], [130.0]], p2: [[131.0], [132.0]], p3: [[133.0]], p4: [[134.0]])]], p1: s0(p0: [[135.0], [136.0], [137.0]], p1: [[138.0], [139.0]], p2: [[140.0], [141.0]], p3: [[142.0]], p4: [[143.0]])))]], p1: [s2(p0: s1(p0: [[s0(p0: [[144.0], [145.0], [146.0]], p1: [[147.0], [148.0]], p2: [[149.0], [150.0]], p3: [[151.0]], p4: [[152.0]])]], p1: s0(p0: [[153.0], [154.0], [155.0]], p1: [[156.0], [157.0]], p2: [[158.0], [159.0]], p3: [[160.0]], p4: [[161.0]])), p1: s1(p0: [[s0(p0: [[162.0], [163.0], [164.0]], p1: [[165.0], [166.0]], p2: [[167.0], [168.0]], p3: [[169.0]], p4: [[170.0]])]], p1: s0(p0: [[171.0], [172.0], [173.0]], p1: [[174.0], [175.0]], p2: [[176.0], [177.0]], p3: [[178.0]], p4: [[179.0]])))]))], [s11(p0: s9(p0: s3(p0: [[s0(p0: [[180.0], [181.0], [182.0]], p1: [[183.0], [184.0]], p2: [[185.0], [186.0]], p3: [[187.0]], p4: [[188.0]])], [s0(p0: [[189.0], [190.0], [191.0]], p1: [[192.0], [193.0]], p2: [[194.0], [195.0]], p3: [[196.0]], p4: [[197.0]])]])), p1: s5(p0: [[s2(p0: s1(p0: [[s0(p0: [[198.0], [199.0], [200.0]], p1: [[201.0], [202.0]], p2: [[203.0], [204.0]], p3: [[205.0]], p4: [[206.0]])]], p1: s0(p0: [[207.0], [208.0], [209.0]], p1: [[210.0], [211.0]], p2: [[212.0], [213.0]], p3: [[214.0]], p4: [[215.0]])), p1: s1(p0: [[s0(p0: [[216.0], [217.0], [218.0]], p1: [[219.0], [220.0]], p2: [[221.0], [222.0]], p3: [[223.0]], p4: [[224.0]])]], p1: s0(p0: [[225.0], [226.0], [227.0]], p1: [[228.0], [229.0]], p2: [[230.0], [231.0]], p3: [[232.0]], p4: [[233.0]])))]], p1: [s2(p0: s1(p0: [[s0(p0: [[234.0], [235.0], [236.0]], p1: [[237.0], [238.0]], p2: [[239.0], [240.0]], p3: [[241.0]], p4: [[242.0]])]], p1: s0(p0: [[243.0], [244.0], [245.0]], p1: [[246.0], [247.0]], p2: [[248.0], [249.0]], p3: [[250.0]], p4: [[251.0]])), p1: s1(p0: [[s0(p0: [[252.0], [253.0], [254.0]], p1: [[255.0], [256.0]], p2: [[257.0], [258.0]], p3: [[259.0]], p4: [[260.0]])]], p1: s0(p0: [[261.0], [262.0], [263.0]], p1: [[264.0], [265.0]], p2: [[266.0], [267.0]], p3: [[268.0]], p4: [[269.0]])))]))]]
    let v1: Double = 270.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 270.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
