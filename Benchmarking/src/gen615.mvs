  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s2 {
    var p0: s0
    var p1: [Float]
  } in
  struct s4 {
    var p0: [s2]
    var p1: s2
  } in
  struct s7 {
    var p0: s0
    var p1: [s4]
  } in
  struct s8 {
    var p0: s7
    var p1: s1
  } in
  struct s10 {
    var p0: [s1]
    var p1: s0
  } in
  struct s11 {
    var p0: [s10]
    var p1: s0
  } in
  let f57: (Float) -> Float = (v0: Float) -> Float {
    let v6: [Float] = [v0, v0, v0, v0] in
    var v3: [Float] = v6 in
    v3 = v6 in
    let v5: Float = v0 + v0 in
    var v4: Float = v5 in
    let v9: Float = v3[1] in
    var v7: Float = v4 in
    let v1: Float = v3[0] in
    v4 = v5 in
    v3[2] = v4 in
    var v23: Float = v7 in
    let v11: Float = v9 * v1 in
    var v22: Float = v1 in
    var v8: [Float] = v6 in
    let v10: Float = v0 / v23 in
    let v14: Float = v8[1] in
    var v19: Float = v4 in
    var v21: Float = v10 in
    v22 = v19 in
    var v38: Float = v11 in
    let v32: [Float] = [v5, v4] in
    var v51: [Float] = v32 in
    v8[0] = v22 in
    var v24: [Float] = v51 in
    let v41: Float = v32[0] in
    let v37: Float = v32[0] in
    let v55: [Float] = [v0, v21, v41] in
    var v73: [Float] = v32 in
    var v31: [Float] = v55 in
    var v46: [Float] = v51 in
    v24[0] = v37 in
    let v147: [[Float]] = [v46, v73, v24, v73] in
    let v84: [Float] = v147[1] in
    var v74: [[Float]] = v147 in
    var v63: Float = v38 in
    var v61: [Float] = v55 in
    let v54: [Float] = v74[3] in
    v51[1] = v63 in
    let v103: Float = v54[0] in
    v46[0] = v14 in
    let v80: Float = v61[0] in
    v19 = v37 in
    let v151: Float = v8[0] in
    let v133: Float = v31[2] in
    let v93: Float = v80 / v103 in
    v73 = v84 in
    v46[1] = v37 in
    v8[2] = v151 in
    v4 = v133 in
    v93
  } in
  let noinline_f0: ([[s8]], s11, s1, Float) -> Float = (v0: [[s8]], v1: s11, v2: s1, v3: Float) -> Float {
    var v11: Float = v3 in
    var v18: Float = v11 in
    let v25: Float = f57(v18) in
    v25
  } in
  fun loop(i: Int, v0: [[s8]], v1: s11, v2: s1, v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s8]] = [[s8(s7(s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]), [s4([s2(s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]]), [10.0, 11.0])], s2(s0([[12.0], [13.0], [14.0]], [[15.0], [16.0]]), [17.0, 18.0])), s4([s2(s0([[19.0], [20.0], [21.0]], [[22.0], [23.0]]), [24.0, 25.0])], s2(s0([[26.0], [27.0], [28.0]], [[29.0], [30.0]]), [31.0, 32.0])), s4([s2(s0([[33.0], [34.0], [35.0]], [[36.0], [37.0]]), [38.0, 39.0])], s2(s0([[40.0], [41.0], [42.0]], [[43.0], [44.0]]), [45.0, 46.0]))]), s1([s0([[47.0], [48.0], [49.0]], [[50.0], [51.0]])], [s0([[52.0], [53.0], [54.0]], [[55.0], [56.0]])]))]] in
    let v1: s11 = s11([s10([s1([s0([[57.0], [58.0], [59.0]], [[60.0], [61.0]])], [s0([[62.0], [63.0], [64.0]], [[65.0], [66.0]])]), s1([s0([[67.0], [68.0], [69.0]], [[70.0], [71.0]])], [s0([[72.0], [73.0], [74.0]], [[75.0], [76.0]])])], s0([[77.0], [78.0], [79.0]], [[80.0], [81.0]])), s10([s1([s0([[82.0], [83.0], [84.0]], [[85.0], [86.0]])], [s0([[87.0], [88.0], [89.0]], [[90.0], [91.0]])]), s1([s0([[92.0], [93.0], [94.0]], [[95.0], [96.0]])], [s0([[97.0], [98.0], [99.0]], [[100.0], [101.0]])])], s0([[102.0], [103.0], [104.0]], [[105.0], [106.0]])), s10([s1([s0([[107.0], [108.0], [109.0]], [[110.0], [111.0]])], [s0([[112.0], [113.0], [114.0]], [[115.0], [116.0]])]), s1([s0([[117.0], [118.0], [119.0]], [[120.0], [121.0]])], [s0([[122.0], [123.0], [124.0]], [[125.0], [126.0]])])], s0([[127.0], [128.0], [129.0]], [[130.0], [131.0]]))], s0([[132.0], [133.0], [134.0]], [[135.0], [136.0]])) in
    let v2: s1 = s1([s0([[137.0], [138.0], [139.0]], [[140.0], [141.0]])], [s0([[142.0], [143.0], [144.0]], [[145.0], [146.0]])]) in
    let v3: Float = 147.0 in
    let initialResult: Float = 147.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()