  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s3 {
    var p0: s0
    var p1: s0
  } in
  struct s4 {
    var p0: [s1]
  } in
  struct s5 {
    var p0: [s4]
    var p1: s0
  } in
  struct s6 {
    var p0: s3
    var p1: [s1]
    var p2: [[s0]]
    var p3: [s4]
    var p4: s4
    var p5: s3
  } in
  struct s8 {
    var p0: s5
  } in
  let f10: (Float) -> Float = (v0: Float) -> Float {
    var v1: Float = v0 in
    var v4: Float = v0 in
    let v9: [Float] = [v0, v4, v4, v1, v4] in
    let v6: Float = v9[0] in
    let v10: Float = v9[2] in
    let v3: Float = v9[0] in
    let v7: Float = v9[0] in
    let v13: Float = v9[2] in
    let v5: Float = v9[3] in
    let v14: [Float] = [v5, v7, v1, v1, v10, v5, v13] in
    var v8: Float = v3 in
    var v11: [Float] = v14 in
    v11[6] = v6 in
    v11[0] = v0 in
    v11 = v14 in
    let v28: Float = v11[2] in
    let v35: Float = v13 * v8 in
    var v40: Float = v28 in
    v4 = v35 in
    v40
  } in
  let noinline_f0: ([s8], [s6], Float) -> Float = (v0: [s8], v1: [s6], v2: Float) -> Float {
    let v4: Float = f10(v2) in
    v4
  } in
  fun loop(i: Int, v0: [s8], v1: [s6], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s8] = [s8(s5([s4([s1(s0([[0.0], [1.0]], [[2.0]]), [[s0([[3.0], [4.0]], [[5.0]])], [s0([[6.0], [7.0]], [[8.0]])]]), s1(s0([[9.0], [10.0]], [[11.0]]), [[s0([[12.0], [13.0]], [[14.0]])], [s0([[15.0], [16.0]], [[17.0]])]])]), s4([s1(s0([[18.0], [19.0]], [[20.0]]), [[s0([[21.0], [22.0]], [[23.0]])], [s0([[24.0], [25.0]], [[26.0]])]]), s1(s0([[27.0], [28.0]], [[29.0]]), [[s0([[30.0], [31.0]], [[32.0]])], [s0([[33.0], [34.0]], [[35.0]])]])])], s0([[36.0], [37.0]], [[38.0]]))), s8(s5([s4([s1(s0([[39.0], [40.0]], [[41.0]]), [[s0([[42.0], [43.0]], [[44.0]])], [s0([[45.0], [46.0]], [[47.0]])]]), s1(s0([[48.0], [49.0]], [[50.0]]), [[s0([[51.0], [52.0]], [[53.0]])], [s0([[54.0], [55.0]], [[56.0]])]])]), s4([s1(s0([[57.0], [58.0]], [[59.0]]), [[s0([[60.0], [61.0]], [[62.0]])], [s0([[63.0], [64.0]], [[65.0]])]]), s1(s0([[66.0], [67.0]], [[68.0]]), [[s0([[69.0], [70.0]], [[71.0]])], [s0([[72.0], [73.0]], [[74.0]])]])])], s0([[75.0], [76.0]], [[77.0]])))] in
    let v1: [s6] = [s6(s3(s0([[78.0], [79.0]], [[80.0]]), s0([[81.0], [82.0]], [[83.0]])), [s1(s0([[84.0], [85.0]], [[86.0]]), [[s0([[87.0], [88.0]], [[89.0]])], [s0([[90.0], [91.0]], [[92.0]])]]), s1(s0([[93.0], [94.0]], [[95.0]]), [[s0([[96.0], [97.0]], [[98.0]])], [s0([[99.0], [100.0]], [[101.0]])]])], [[s0([[102.0], [103.0]], [[104.0]])], [s0([[105.0], [106.0]], [[107.0]])], [s0([[108.0], [109.0]], [[110.0]])]], [s4([s1(s0([[111.0], [112.0]], [[113.0]]), [[s0([[114.0], [115.0]], [[116.0]])], [s0([[117.0], [118.0]], [[119.0]])]]), s1(s0([[120.0], [121.0]], [[122.0]]), [[s0([[123.0], [124.0]], [[125.0]])], [s0([[126.0], [127.0]], [[128.0]])]])]), s4([s1(s0([[129.0], [130.0]], [[131.0]]), [[s0([[132.0], [133.0]], [[134.0]])], [s0([[135.0], [136.0]], [[137.0]])]]), s1(s0([[138.0], [139.0]], [[140.0]]), [[s0([[141.0], [142.0]], [[143.0]])], [s0([[144.0], [145.0]], [[146.0]])]])]), s4([s1(s0([[147.0], [148.0]], [[149.0]]), [[s0([[150.0], [151.0]], [[152.0]])], [s0([[153.0], [154.0]], [[155.0]])]]), s1(s0([[156.0], [157.0]], [[158.0]]), [[s0([[159.0], [160.0]], [[161.0]])], [s0([[162.0], [163.0]], [[164.0]])]])])], s4([s1(s0([[165.0], [166.0]], [[167.0]]), [[s0([[168.0], [169.0]], [[170.0]])], [s0([[171.0], [172.0]], [[173.0]])]]), s1(s0([[174.0], [175.0]], [[176.0]]), [[s0([[177.0], [178.0]], [[179.0]])], [s0([[180.0], [181.0]], [[182.0]])]])]), s3(s0([[183.0], [184.0]], [[185.0]]), s0([[186.0], [187.0]], [[188.0]])))] in
    let v2: Float = 189.0 in
    let initialResult: Float = 189.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()