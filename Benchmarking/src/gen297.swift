  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: s1
  }
  struct s3 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s4 {
    var p0: s3
    var p1: [[s0]]
  }
  struct s5 {
    var p0: [s1]
    var p1: [s4]
    var p2: [s2]
    var p3: s1
    var p4: [s3]
  }
  func f120(_ v0: s3) -> s3 {
    var v7: s3 = v0
    var v4: s3 = v0
    let v6: [s0] = v0.p0
    var v3: [s0] = v6
    let v8: [s0] = v0.p1
    v4 = v7
    v7.p0 = v6
    let v1: [s0] = v0.p1
    let v2: s0 = v3[1]
    v3[1] = v2
    var v30: [s0] = v6
    v7.p1 = v1
    v4.p0 = v30
    v7.p1 = v8
    v7.p0 = v6
    v30[1] = v2
    v7.p0 = v30
    var v52: s3 = v4
    let v33: [s0] = v0.p0
    let v84: s0 = v30[1]
    var v67: [s0] = v33
    v7.p0 = v33
    v52.p0 = v67
    v4.p1 = v1
    v30[1] = v84
    v4.p0 = v30
    v52 = v4
    var v154: [s0] = v30
    v7.p0 = v154
    return v52
  }
  func f119(_ v0: s1) -> s1 {
    let v4: s0 = v0.p1
    let v8: [[Double]] = v4.p0
    let v2: s0 = v0.p0
    let v7: [Double] = v8[0]
    let v5: [[Double]] = v4.p0
    let v9: [[Double]] = v2.p0
    let v1: Double = v7[0]
    let v15: Double = v7[0]
    let v10: [[Double]] = v2.p1
    var v6: s1 = v0
    var v16: [[Double]] = v10
    let v11: [s0] = [v2, v2, v4, v2, v4]
    v6.p1 = v2
    let v12: s2 = s2(p0: v0)
    var v33: [s0] = v11
    v6.p0 = v4
    var v14: [Double] = v7
    let v13: s0 = v11[2]
    let v35: s0 = v11[1]
    v33 = v11
    let v18: s0 = v6.p1
    let v52: Double = v1 * v1
    var v38: [[Double]] = v10
    v6.p1 = v4
    v14[0] = v15
    v16[0] = v7
    v33[3] = v35
    v38[0] = v14
    var v22: s1 = v6
    let v53: s1 = v12.p0
    v22.p0 = v18
    v14[0] = v52
    let v24: s0 = v22.p1
    let v19: [Double] = v16[0]
    let v23: [s1] = [v22, v0, v0, v0, v0, v53]
    v22 = v6
    v14[0] = v15
    let v34: [[Double]] = v35.p0
    let v100: [[Double]] = v13.p0
    let v29: s0 = v33[3]
    var v37: [[Double]] = v16
    v33[1] = v13
    let v39: s0 = v22.p1
    let v43: [[[Double]]] = [v38]
    v6.p0 = v13
    let v58: s0 = v53.p1
    let v55: s0 = v6.p0
    let v36: s0 = s0(p0: v9, p1: v37)
    v22.p0 = v29
    v22.p0 = v18
    v22.p0 = v36
    let v62: [Double] = v5[1]
    v38 = v37
    let v44: [[Double]] = v43[0]
    v14[0] = v52
    v6.p1 = v58
    let v101: s1 = v23[0]
    let v128: [Double] = v44[0]
    v22.p1 = v29
    v16[0] = v62
    v22.p1 = v18
    let v175: s2 = s2(p0: v101)
    var v91: s0 = v24
    v37[0] = v19
    let v83: [[Double]] = v36.p1
    v33[0] = v35
    v91.p0 = v8
    v91.p0 = v100
    v22.p0 = v39
    var v103: s0 = v39
    v22.p1 = v103
    v16[0] = v128
    let v56: s1 = v175.p0
    v22.p0 = v91
    v6.p0 = v55
    v91.p0 = v34
    v91.p1 = v83
    let v216: s0 = v53.p1
    v6.p0 = v216
    return v56
  }
  func f114(_ v0: s0) -> s0 {
    var v1: s0 = v0
    let v4: [[Double]] = v1.p1
    let v8: [[Double]] = v0.p0
    v1.p0 = v8
    let v7: [Double] = v4[0]
    v1.p0 = v8
    let v2: s0 = s0(p0: v8, p1: v4)
    let v10: [[Double]] = v1.p0
    let v25: [[Double]] = v1.p1
    var v11: [[Double]] = v10
    v11[1] = v7
    let v17: Double = v7[0]
    let v23: [[Double]] = v2.p1
    var v13: Double = v17
    let v24: [[Double]] = v1.p1
    let v39: [Double] = v8[1]
    var v30: [Double] = v7
    v30[0] = v17
    let v22: s0 = s0(p0: v8, p1: v23)
    let v47: [Double] = v24[0]
    let v29: [[Double]] = v22.p0
    var v41: s0 = v0
    v41.p1 = v25
    let v31: s1 = s1(p0: v22, p1: v0)
    let v75: s1 = f119(v31)
    v1.p0 = v11
    v11[0] = v47
    v1.p0 = v29
    let v58: s0 = v75.p1
    var v43: Double = v13
    v11[1] = v39
    v30[0] = v43
    var v135: s1 = v75
    v135.p1 = v58
    let v98: [[Double]] = v41.p0
    v135.p1 = v41
    let v84: s0 = v135.p1
    v1.p1 = v23
    v11[0] = v30
    v1.p0 = v98
    return v84
  }
  func f99(_ v0: s0) -> s0 {
    let v5: [[Double]] = v0.p0
    let v14: [Double] = v5[0]
    var v16: [[Double]] = v5
    var v2: [Double] = v14
    let v1: [Double] = v16[0]
    let v18: [[Double]] = v0.p1
    var v10: [[Double]] = v5
    let v15: Double = v1[0]
    var v19: Double = v15
    let v20: [Double] = v18[0]
    v16 = v10
    v2[0] = v19
    let v25: [Double] = v18[0]
    v16[1] = v14
    var v51: Double = v19
    var v33: [[Double]] = v18
    let v26: [Double] = v33[0]
    v16[1] = v26
    var v38: [[Double]] = v33
    var v50: [[Double]] = v5
    let v45: Double = v51 / v19
    let v70: [[[Double]]] = [v50, v50]
    let v66: [Double] = v33[0]
    v10[1] = v66
    let v65: [[Double]] = v70[1]
    var v58: [[Double]] = v65
    v16[0] = v1
    var v75: [[Double]] = v38
    v16 = v58
    v33[0] = v25
    let v71: s0 = s0(p0: v65, p1: v75)
    let v81: [Double] = v38[0]
    v75[0] = v20
    var v245: s0 = v71
    v245.p0 = v16
    v16[1] = v2
    v50[0] = v81
    v75[0] = v81
    v2[0] = v45
    return v245
  }
  func f64(_ v0: s3) -> s3 {
    let v7: [s0] = v0.p0
    let v5: [[s0]] = [v7]
    let v1: s3 = f120(v0)
    let v6: s3 = f120(v1)
    let v10: s3 = f120(v0)
    let v13: [s0] = v0.p0
    let v8: s3 = f120(v6)
    let v12: s3 = f120(v10)
    let v16: s3 = f120(v1)
    let v37: [s0] = v5[0]
    let v64: s3 = f120(v8)
    let v53: [s3] = [v6, v16, v12, v64, v0, v16, v16]
    var v55: [[s0]] = v5
    v55[0] = v13
    v55[0] = v37
    let v84: s3 = v53[6]
    v55[0] = v37
    let v139: [s0] = v84.p1
    let v276: [s0] = v55[0]
    let v194: s3 = s3(p0: v276, p1: v139)
    return v194
  }
  func f42(_ v0: s0) -> s0 {
    let v2: s0 = f99(v0)
    let v7: s0 = f114(v2)
    let v6: [[Double]] = v7.p0
    let v1: s0 = f99(v7)
    let v3: [[Double]] = v1.p0
    let v8: s0 = f114(v7)
    let v11: [[[Double]]] = [v6, v3, v3, v3, v3]
    let v20: [[Double]] = v8.p1
    let v27: [[Double]] = v8.p0
    var v23: [[[Double]]] = v11
    let v39: [[[[Double]]]] = [v23, v11, v11, v23, v23]
    let v95: [[[Double]]] = v39[1]
    v23 = v95
    var v43: [[[Double]]] = v95
    let v71: [[Double]] = v43[3]
    v43[2] = v27
    let v77: s0 = s0(p0: v71, p1: v20)
    return v77
  }
  func f19(_ v0: s3) -> s3 {
    var v6: s3 = v0
    var v4: s3 = v0
    let v1: [s0] = v4.p0
    var v3: s3 = v6
    let v13: [s0] = v3.p1
    v4 = v6
    v6.p1 = v13
    let v15: [s0] = v4.p0
    let v25: [s0] = v3.p0
    v4.p0 = v25
    let v14: [s0] = v6.p1
    let v19: [[s0]] = [v25, v15, v1]
    let v38: s3 = f64(v3)
    let v48: [s0] = v19[2]
    var v36: [s0] = v14
    v4 = v38
    let v55: s3 = s3(p0: v15, p1: v36)
    v6.p0 = v1
    v6.p0 = v48
    return v55
  }
  func f2(_ v0: Double, _ v1: s0) -> Double {
    let v3: s0 = f42(v1)
    let v14: [[Double]] = v3.p0
    let v5: [Double] = v14[1]
    let v12: Double = v5[0]
    return v12
  }
  @inline(never)
  func f0(_ v0: [s5], _ v1: [[s4]], _ v2: [s4], _ v3: s3, _ v4: Double) -> Double {
    let v24: s3 = f19(v3)
    let v40: [s0] = v24.p0
    let v51: s0 = v40[1]
    let v23: Double = f2(v4, v51)
    let v42: Double = v4 / v4
    let v100: Double = v42 + v23
    var v54: Double = v100
    return v54
  }
  func benchmark() {
    let v0: [s5] = [s5(p0: [s1(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0]]), p1: s0(p0: [[3.0], [4.0]], p1: [[5.0]]))], p1: [s4(p0: s3(p0: [s0(p0: [[6.0], [7.0]], p1: [[8.0]]), s0(p0: [[9.0], [10.0]], p1: [[11.0]])], p1: [s0(p0: [[12.0], [13.0]], p1: [[14.0]])]), p1: [[s0(p0: [[15.0], [16.0]], p1: [[17.0]])], [s0(p0: [[18.0], [19.0]], p1: [[20.0]])]]), s4(p0: s3(p0: [s0(p0: [[21.0], [22.0]], p1: [[23.0]]), s0(p0: [[24.0], [25.0]], p1: [[26.0]])], p1: [s0(p0: [[27.0], [28.0]], p1: [[29.0]])]), p1: [[s0(p0: [[30.0], [31.0]], p1: [[32.0]])], [s0(p0: [[33.0], [34.0]], p1: [[35.0]])]]), s4(p0: s3(p0: [s0(p0: [[36.0], [37.0]], p1: [[38.0]]), s0(p0: [[39.0], [40.0]], p1: [[41.0]])], p1: [s0(p0: [[42.0], [43.0]], p1: [[44.0]])]), p1: [[s0(p0: [[45.0], [46.0]], p1: [[47.0]])], [s0(p0: [[48.0], [49.0]], p1: [[50.0]])]])], p2: [s2(p0: s1(p0: s0(p0: [[51.0], [52.0]], p1: [[53.0]]), p1: s0(p0: [[54.0], [55.0]], p1: [[56.0]]))), s2(p0: s1(p0: s0(p0: [[57.0], [58.0]], p1: [[59.0]]), p1: s0(p0: [[60.0], [61.0]], p1: [[62.0]]))), s2(p0: s1(p0: s0(p0: [[63.0], [64.0]], p1: [[65.0]]), p1: s0(p0: [[66.0], [67.0]], p1: [[68.0]])))], p3: s1(p0: s0(p0: [[69.0], [70.0]], p1: [[71.0]]), p1: s0(p0: [[72.0], [73.0]], p1: [[74.0]])), p4: [s3(p0: [s0(p0: [[75.0], [76.0]], p1: [[77.0]]), s0(p0: [[78.0], [79.0]], p1: [[80.0]])], p1: [s0(p0: [[81.0], [82.0]], p1: [[83.0]])])]), s5(p0: [s1(p0: s0(p0: [[84.0], [85.0]], p1: [[86.0]]), p1: s0(p0: [[87.0], [88.0]], p1: [[89.0]]))], p1: [s4(p0: s3(p0: [s0(p0: [[90.0], [91.0]], p1: [[92.0]]), s0(p0: [[93.0], [94.0]], p1: [[95.0]])], p1: [s0(p0: [[96.0], [97.0]], p1: [[98.0]])]), p1: [[s0(p0: [[99.0], [100.0]], p1: [[101.0]])], [s0(p0: [[102.0], [103.0]], p1: [[104.0]])]]), s4(p0: s3(p0: [s0(p0: [[105.0], [106.0]], p1: [[107.0]]), s0(p0: [[108.0], [109.0]], p1: [[110.0]])], p1: [s0(p0: [[111.0], [112.0]], p1: [[113.0]])]), p1: [[s0(p0: [[114.0], [115.0]], p1: [[116.0]])], [s0(p0: [[117.0], [118.0]], p1: [[119.0]])]]), s4(p0: s3(p0: [s0(p0: [[120.0], [121.0]], p1: [[122.0]]), s0(p0: [[123.0], [124.0]], p1: [[125.0]])], p1: [s0(p0: [[126.0], [127.0]], p1: [[128.0]])]), p1: [[s0(p0: [[129.0], [130.0]], p1: [[131.0]])], [s0(p0: [[132.0], [133.0]], p1: [[134.0]])]])], p2: [s2(p0: s1(p0: s0(p0: [[135.0], [136.0]], p1: [[137.0]]), p1: s0(p0: [[138.0], [139.0]], p1: [[140.0]]))), s2(p0: s1(p0: s0(p0: [[141.0], [142.0]], p1: [[143.0]]), p1: s0(p0: [[144.0], [145.0]], p1: [[146.0]]))), s2(p0: s1(p0: s0(p0: [[147.0], [148.0]], p1: [[149.0]]), p1: s0(p0: [[150.0], [151.0]], p1: [[152.0]])))], p3: s1(p0: s0(p0: [[153.0], [154.0]], p1: [[155.0]]), p1: s0(p0: [[156.0], [157.0]], p1: [[158.0]])), p4: [s3(p0: [s0(p0: [[159.0], [160.0]], p1: [[161.0]]), s0(p0: [[162.0], [163.0]], p1: [[164.0]])], p1: [s0(p0: [[165.0], [166.0]], p1: [[167.0]])])]), s5(p0: [s1(p0: s0(p0: [[168.0], [169.0]], p1: [[170.0]]), p1: s0(p0: [[171.0], [172.0]], p1: [[173.0]]))], p1: [s4(p0: s3(p0: [s0(p0: [[174.0], [175.0]], p1: [[176.0]]), s0(p0: [[177.0], [178.0]], p1: [[179.0]])], p1: [s0(p0: [[180.0], [181.0]], p1: [[182.0]])]), p1: [[s0(p0: [[183.0], [184.0]], p1: [[185.0]])], [s0(p0: [[186.0], [187.0]], p1: [[188.0]])]]), s4(p0: s3(p0: [s0(p0: [[189.0], [190.0]], p1: [[191.0]]), s0(p0: [[192.0], [193.0]], p1: [[194.0]])], p1: [s0(p0: [[195.0], [196.0]], p1: [[197.0]])]), p1: [[s0(p0: [[198.0], [199.0]], p1: [[200.0]])], [s0(p0: [[201.0], [202.0]], p1: [[203.0]])]]), s4(p0: s3(p0: [s0(p0: [[204.0], [205.0]], p1: [[206.0]]), s0(p0: [[207.0], [208.0]], p1: [[209.0]])], p1: [s0(p0: [[210.0], [211.0]], p1: [[212.0]])]), p1: [[s0(p0: [[213.0], [214.0]], p1: [[215.0]])], [s0(p0: [[216.0], [217.0]], p1: [[218.0]])]])], p2: [s2(p0: s1(p0: s0(p0: [[219.0], [220.0]], p1: [[221.0]]), p1: s0(p0: [[222.0], [223.0]], p1: [[224.0]]))), s2(p0: s1(p0: s0(p0: [[225.0], [226.0]], p1: [[227.0]]), p1: s0(p0: [[228.0], [229.0]], p1: [[230.0]]))), s2(p0: s1(p0: s0(p0: [[231.0], [232.0]], p1: [[233.0]]), p1: s0(p0: [[234.0], [235.0]], p1: [[236.0]])))], p3: s1(p0: s0(p0: [[237.0], [238.0]], p1: [[239.0]]), p1: s0(p0: [[240.0], [241.0]], p1: [[242.0]])), p4: [s3(p0: [s0(p0: [[243.0], [244.0]], p1: [[245.0]]), s0(p0: [[246.0], [247.0]], p1: [[248.0]])], p1: [s0(p0: [[249.0], [250.0]], p1: [[251.0]])])])]
    let v1: [[s4]] = [[s4(p0: s3(p0: [s0(p0: [[252.0], [253.0]], p1: [[254.0]]), s0(p0: [[255.0], [256.0]], p1: [[257.0]])], p1: [s0(p0: [[258.0], [259.0]], p1: [[260.0]])]), p1: [[s0(p0: [[261.0], [262.0]], p1: [[263.0]])], [s0(p0: [[264.0], [265.0]], p1: [[266.0]])]])], [s4(p0: s3(p0: [s0(p0: [[267.0], [268.0]], p1: [[269.0]]), s0(p0: [[270.0], [271.0]], p1: [[272.0]])], p1: [s0(p0: [[273.0], [274.0]], p1: [[275.0]])]), p1: [[s0(p0: [[276.0], [277.0]], p1: [[278.0]])], [s0(p0: [[279.0], [280.0]], p1: [[281.0]])]])]]
    let v2: [s4] = [s4(p0: s3(p0: [s0(p0: [[282.0], [283.0]], p1: [[284.0]]), s0(p0: [[285.0], [286.0]], p1: [[287.0]])], p1: [s0(p0: [[288.0], [289.0]], p1: [[290.0]])]), p1: [[s0(p0: [[291.0], [292.0]], p1: [[293.0]])], [s0(p0: [[294.0], [295.0]], p1: [[296.0]])]]), s4(p0: s3(p0: [s0(p0: [[297.0], [298.0]], p1: [[299.0]]), s0(p0: [[300.0], [301.0]], p1: [[302.0]])], p1: [s0(p0: [[303.0], [304.0]], p1: [[305.0]])]), p1: [[s0(p0: [[306.0], [307.0]], p1: [[308.0]])], [s0(p0: [[309.0], [310.0]], p1: [[311.0]])]])]
    let v3: s3 = s3(p0: [s0(p0: [[312.0], [313.0]], p1: [[314.0]]), s0(p0: [[315.0], [316.0]], p1: [[317.0]])], p1: [s0(p0: [[318.0], [319.0]], p1: [[320.0]])])
    let v4: Double = 321.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 321.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
