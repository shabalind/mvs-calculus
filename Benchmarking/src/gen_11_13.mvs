  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s3 {
    var p0: s0
  } in
  let noinline_f0: (s3, s3, Float) -> Float = (v0: s3, v1: s3, v2: Float) -> Float {
    let v12: s0 = v1.p0 in
    let v3: [[Float]] = v12.p0 in
    let v15: s0 = v1.p0 in
    let v35: [[Float]] = v15.p0 in
    let v17: [Float] = v35[0] in
    let v21: Float = v17[0] in
    let v72: Float = v17[0] in
    let v32: Float = v21 / v72 in
    let v54: [Float] = v3[1] in
    let v71: Float = v54[0] in
    let v177: Float = v71 - v32 in
    v177
  } in
  fun loop(i: Int, v0: s3, v1: s3, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]])) in
    let v1: s3 = s3(s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]])) in
    let v2: Float = 10.0 in
    let initialResult: Float = 10.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()