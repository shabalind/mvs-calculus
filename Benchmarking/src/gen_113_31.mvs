  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s2 {
    var p0: s0
    var p1: [s0]
  } in
  let noinline_f0: (s2, Float) -> Float = (v0: s2, v1: Float) -> Float {
    var v3: Float = v1 in
    let v6: [s0] = v0.p1 in
    let v5: [Float] = [v1, v1, v3, v1, v3] in
    let v9: s0 = v6[2] in
    let v17: Float = v5[1] in
    let v16: [[Float]] = v9.p1 in
    let v29: [Float] = v16[0] in
    let v25: Float = v29[0] in
    let v49: Float = v17 - v25 in
    var v54: Float = v49 in
    v54
  } in
  fun loop(i: Int, v0: s2, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(s0([[0.0]], [[1.0]]), [s0([[2.0]], [[3.0]]), s0([[4.0]], [[5.0]]), s0([[6.0]], [[7.0]])]) in
    let v1: Float = 8.0 in
    let initialResult: Float = 8.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()