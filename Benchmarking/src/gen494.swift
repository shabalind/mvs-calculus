  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
    var p4: [[Double]]
    var p5: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: s0
    var p2: [s0]
    var p3: [s0]
    var p4: s0
    var p5: [[s0]]
    var p6: s0
    var p7: [s0]
  }
  func f11(_ v0: s0) -> s0 {
    let v3: [[Double]] = v0.p3
    var v6: [[Double]] = v3
    let v8: [[Double]] = v0.p1
    var v1: s0 = v0
    var v4: s0 = v0
    v1.p1 = v8
    var v7: s0 = v1
    let v2: [Double] = v8[1]
    v6[1] = v2
    var v5: [[Double]] = v8
    v6[0] = v2
    let v10: [[Double]] = v1.p4
    v4.p1 = v6
    let v12: [[Double]] = v1.p2
    let v11: [[Double]] = v0.p5
    let v13: [[Double]] = v7.p0
    v1.p1 = v11
    v4.p5 = v6
    var v9: [[Double]] = v10
    v9[0] = v2
    let v28: [[Double]] = v4.p0
    v5[0] = v2
    v4.p2 = v10
    var v17: [Double] = v2
    let v14: [[Double]] = v7.p4
    v1.p3 = v3
    let v19: [[Double]] = v7.p2
    let v20: [Double] = v6[1]
    var v27: s0 = v0
    var v36: [[Double]] = v14
    let v43: [[Double]] = v0.p3
    v36[0] = v2
    v6[1] = v20
    var v49: [[Double]] = v43
    var v33: [[Double]] = v5
    var v23: [[Double]] = v11
    let v24: [[Double]] = v1.p4
    var v25: [Double] = v17
    let v22: [[Double]] = v7.p2
    let v26: [[Double]] = v27.p3
    v7.p2 = v24
    v4.p5 = v5
    var v65: s0 = v27
    let v54: Double = v2[0]
    let v72: [[Double]] = v65.p1
    v7.p1 = v5
    v27.p0 = v36
    var v37: [[Double]] = v12
    let v29: s0 = s0(p0: v19, p1: v49, p2: v22, p3: v5, p4: v19, p5: v23)
    var v51: [[Double]] = v37
    v27.p3 = v26
    let v59: [[Double]] = v29.p3
    let v50: [[[Double]]] = [v22, v9, v28, v24, v22, v28, v9]
    let v69: [[Double]] = v50[6]
    v51[0] = v2
    let v80: [[[Double]]] = [v22, v13, v36, v13, v10, v51]
    v33[1] = v17
    v27.p4 = v9
    let v67: [Double] = v26[1]
    v33 = v49
    let v253: [[Double]] = v80[3]
    v65.p2 = v69
    v4.p0 = v12
    v27.p1 = v72
    v25[0] = v54
    let v150: s0 = s0(p0: v12, p1: v26, p2: v253, p3: v33, p4: v253, p5: v6)
    v37[0] = v25
    v5[1] = v67
    v27.p4 = v9
    v65.p0 = v51
    v1.p4 = v14
    v7.p0 = v12
    v65.p3 = v59
    var v145: [[Double]] = v28
    v4.p0 = v22
    v1.p4 = v145
    return v150
  }
  func f9(_ v0: [[s0]]) -> [[s0]] {
    let v7: [s0] = v0[0]
    let v8: [s0] = v0[1]
    var v13: [[s0]] = v0
    var v20: [[s0]] = v0
    v13[0] = v7
    var v22: [[s0]] = v13
    v20[0] = v8
    var v306: [[s0]] = v0
    v306 = v22
    var v156: [[s0]] = v306
    let v134: [s0] = v20[0]
    v306[0] = v134
    return v156
  }
  func f5(_ v0: s0) -> s0 {
    let v4: [[Double]] = v0.p2
    var v3: s0 = v0
    let v2: s0 = f11(v0)
    v3.p2 = v4
    let v5: [[Double]] = v2.p1
    let v14: s0 = f11(v0)
    v3.p3 = v5
    let v12: s0 = f11(v3)
    let v11: s0 = f11(v12)
    let v18: [[Double]] = v0.p4
    v3.p4 = v18
    let v24: [[Double]] = v14.p5
    let v46: s0 = f11(v11)
    v3.p1 = v24
    return v46
  }
  @inline(never)
  func f0(_ v0: s1, _ v1: [s1], _ v2: [[s1]], _ v3: s1, _ v4: Double) -> Double {
    let v5: [[s0]] = v3.p5
    let v6: [[s0]] = f9(v5)
    var v9: [[s0]] = v6
    let v8: [[s0]] = v0.p5
    var v23: s1 = v3
    let v14: [s0] = v23.p7
    let v10: [s0] = v3.p3
    let v7: [s1] = v2[0]
    let v18: [s0] = v23.p7
    v23.p2 = v18
    let v21: [s0] = v23.p7
    let v36: s1 = v7[0]
    let v22: s0 = v36.p4
    v23.p4 = v22
    v9[1] = v10
    v9[1] = v10
    let v16: s0 = v14[0]
    let v15: s0 = f11(v22)
    let v70: s0 = f5(v16)
    v23.p0 = v10
    let v34: [s0] = v8[0]
    v9[0] = v34
    v23.p1 = v22
    let v91: [[Double]] = v15.p2
    var v46: [[Double]] = v91
    let v97: [Double] = v46[0]
    let v140: [s0] = v23.p3
    let v104: [[Double]] = v70.p1
    v23.p3 = v140
    var v101: [Double] = v97
    v23.p1 = v15
    v23.p7 = v18
    v23.p5 = v9
    v23.p2 = v21
    v46[0] = v101
    let v124: [Double] = v104[0]
    let v147: Double = v97[0]
    v46[0] = v124
    return v147
  }
  func benchmark() {
    let v0: s1 = s1(p0: [s0(p0: [[0.0]], p1: [[1.0], [2.0]], p2: [[3.0]], p3: [[4.0], [5.0]], p4: [[6.0]], p5: [[7.0], [8.0]])], p1: s0(p0: [[9.0]], p1: [[10.0], [11.0]], p2: [[12.0]], p3: [[13.0], [14.0]], p4: [[15.0]], p5: [[16.0], [17.0]]), p2: [s0(p0: [[18.0]], p1: [[19.0], [20.0]], p2: [[21.0]], p3: [[22.0], [23.0]], p4: [[24.0]], p5: [[25.0], [26.0]]), s0(p0: [[27.0]], p1: [[28.0], [29.0]], p2: [[30.0]], p3: [[31.0], [32.0]], p4: [[33.0]], p5: [[34.0], [35.0]])], p3: [s0(p0: [[36.0]], p1: [[37.0], [38.0]], p2: [[39.0]], p3: [[40.0], [41.0]], p4: [[42.0]], p5: [[43.0], [44.0]])], p4: s0(p0: [[45.0]], p1: [[46.0], [47.0]], p2: [[48.0]], p3: [[49.0], [50.0]], p4: [[51.0]], p5: [[52.0], [53.0]]), p5: [[s0(p0: [[54.0]], p1: [[55.0], [56.0]], p2: [[57.0]], p3: [[58.0], [59.0]], p4: [[60.0]], p5: [[61.0], [62.0]])], [s0(p0: [[63.0]], p1: [[64.0], [65.0]], p2: [[66.0]], p3: [[67.0], [68.0]], p4: [[69.0]], p5: [[70.0], [71.0]])]], p6: s0(p0: [[72.0]], p1: [[73.0], [74.0]], p2: [[75.0]], p3: [[76.0], [77.0]], p4: [[78.0]], p5: [[79.0], [80.0]]), p7: [s0(p0: [[81.0]], p1: [[82.0], [83.0]], p2: [[84.0]], p3: [[85.0], [86.0]], p4: [[87.0]], p5: [[88.0], [89.0]]), s0(p0: [[90.0]], p1: [[91.0], [92.0]], p2: [[93.0]], p3: [[94.0], [95.0]], p4: [[96.0]], p5: [[97.0], [98.0]])])
    let v1: [s1] = [s1(p0: [s0(p0: [[99.0]], p1: [[100.0], [101.0]], p2: [[102.0]], p3: [[103.0], [104.0]], p4: [[105.0]], p5: [[106.0], [107.0]])], p1: s0(p0: [[108.0]], p1: [[109.0], [110.0]], p2: [[111.0]], p3: [[112.0], [113.0]], p4: [[114.0]], p5: [[115.0], [116.0]]), p2: [s0(p0: [[117.0]], p1: [[118.0], [119.0]], p2: [[120.0]], p3: [[121.0], [122.0]], p4: [[123.0]], p5: [[124.0], [125.0]]), s0(p0: [[126.0]], p1: [[127.0], [128.0]], p2: [[129.0]], p3: [[130.0], [131.0]], p4: [[132.0]], p5: [[133.0], [134.0]])], p3: [s0(p0: [[135.0]], p1: [[136.0], [137.0]], p2: [[138.0]], p3: [[139.0], [140.0]], p4: [[141.0]], p5: [[142.0], [143.0]])], p4: s0(p0: [[144.0]], p1: [[145.0], [146.0]], p2: [[147.0]], p3: [[148.0], [149.0]], p4: [[150.0]], p5: [[151.0], [152.0]]), p5: [[s0(p0: [[153.0]], p1: [[154.0], [155.0]], p2: [[156.0]], p3: [[157.0], [158.0]], p4: [[159.0]], p5: [[160.0], [161.0]])], [s0(p0: [[162.0]], p1: [[163.0], [164.0]], p2: [[165.0]], p3: [[166.0], [167.0]], p4: [[168.0]], p5: [[169.0], [170.0]])]], p6: s0(p0: [[171.0]], p1: [[172.0], [173.0]], p2: [[174.0]], p3: [[175.0], [176.0]], p4: [[177.0]], p5: [[178.0], [179.0]]), p7: [s0(p0: [[180.0]], p1: [[181.0], [182.0]], p2: [[183.0]], p3: [[184.0], [185.0]], p4: [[186.0]], p5: [[187.0], [188.0]]), s0(p0: [[189.0]], p1: [[190.0], [191.0]], p2: [[192.0]], p3: [[193.0], [194.0]], p4: [[195.0]], p5: [[196.0], [197.0]])]), s1(p0: [s0(p0: [[198.0]], p1: [[199.0], [200.0]], p2: [[201.0]], p3: [[202.0], [203.0]], p4: [[204.0]], p5: [[205.0], [206.0]])], p1: s0(p0: [[207.0]], p1: [[208.0], [209.0]], p2: [[210.0]], p3: [[211.0], [212.0]], p4: [[213.0]], p5: [[214.0], [215.0]]), p2: [s0(p0: [[216.0]], p1: [[217.0], [218.0]], p2: [[219.0]], p3: [[220.0], [221.0]], p4: [[222.0]], p5: [[223.0], [224.0]]), s0(p0: [[225.0]], p1: [[226.0], [227.0]], p2: [[228.0]], p3: [[229.0], [230.0]], p4: [[231.0]], p5: [[232.0], [233.0]])], p3: [s0(p0: [[234.0]], p1: [[235.0], [236.0]], p2: [[237.0]], p3: [[238.0], [239.0]], p4: [[240.0]], p5: [[241.0], [242.0]])], p4: s0(p0: [[243.0]], p1: [[244.0], [245.0]], p2: [[246.0]], p3: [[247.0], [248.0]], p4: [[249.0]], p5: [[250.0], [251.0]]), p5: [[s0(p0: [[252.0]], p1: [[253.0], [254.0]], p2: [[255.0]], p3: [[256.0], [257.0]], p4: [[258.0]], p5: [[259.0], [260.0]])], [s0(p0: [[261.0]], p1: [[262.0], [263.0]], p2: [[264.0]], p3: [[265.0], [266.0]], p4: [[267.0]], p5: [[268.0], [269.0]])]], p6: s0(p0: [[270.0]], p1: [[271.0], [272.0]], p2: [[273.0]], p3: [[274.0], [275.0]], p4: [[276.0]], p5: [[277.0], [278.0]]), p7: [s0(p0: [[279.0]], p1: [[280.0], [281.0]], p2: [[282.0]], p3: [[283.0], [284.0]], p4: [[285.0]], p5: [[286.0], [287.0]]), s0(p0: [[288.0]], p1: [[289.0], [290.0]], p2: [[291.0]], p3: [[292.0], [293.0]], p4: [[294.0]], p5: [[295.0], [296.0]])])]
    let v2: [[s1]] = [[s1(p0: [s0(p0: [[297.0]], p1: [[298.0], [299.0]], p2: [[300.0]], p3: [[301.0], [302.0]], p4: [[303.0]], p5: [[304.0], [305.0]])], p1: s0(p0: [[306.0]], p1: [[307.0], [308.0]], p2: [[309.0]], p3: [[310.0], [311.0]], p4: [[312.0]], p5: [[313.0], [314.0]]), p2: [s0(p0: [[315.0]], p1: [[316.0], [317.0]], p2: [[318.0]], p3: [[319.0], [320.0]], p4: [[321.0]], p5: [[322.0], [323.0]]), s0(p0: [[324.0]], p1: [[325.0], [326.0]], p2: [[327.0]], p3: [[328.0], [329.0]], p4: [[330.0]], p5: [[331.0], [332.0]])], p3: [s0(p0: [[333.0]], p1: [[334.0], [335.0]], p2: [[336.0]], p3: [[337.0], [338.0]], p4: [[339.0]], p5: [[340.0], [341.0]])], p4: s0(p0: [[342.0]], p1: [[343.0], [344.0]], p2: [[345.0]], p3: [[346.0], [347.0]], p4: [[348.0]], p5: [[349.0], [350.0]]), p5: [[s0(p0: [[351.0]], p1: [[352.0], [353.0]], p2: [[354.0]], p3: [[355.0], [356.0]], p4: [[357.0]], p5: [[358.0], [359.0]])], [s0(p0: [[360.0]], p1: [[361.0], [362.0]], p2: [[363.0]], p3: [[364.0], [365.0]], p4: [[366.0]], p5: [[367.0], [368.0]])]], p6: s0(p0: [[369.0]], p1: [[370.0], [371.0]], p2: [[372.0]], p3: [[373.0], [374.0]], p4: [[375.0]], p5: [[376.0], [377.0]]), p7: [s0(p0: [[378.0]], p1: [[379.0], [380.0]], p2: [[381.0]], p3: [[382.0], [383.0]], p4: [[384.0]], p5: [[385.0], [386.0]]), s0(p0: [[387.0]], p1: [[388.0], [389.0]], p2: [[390.0]], p3: [[391.0], [392.0]], p4: [[393.0]], p5: [[394.0], [395.0]])])]]
    let v3: s1 = s1(p0: [s0(p0: [[396.0]], p1: [[397.0], [398.0]], p2: [[399.0]], p3: [[400.0], [401.0]], p4: [[402.0]], p5: [[403.0], [404.0]])], p1: s0(p0: [[405.0]], p1: [[406.0], [407.0]], p2: [[408.0]], p3: [[409.0], [410.0]], p4: [[411.0]], p5: [[412.0], [413.0]]), p2: [s0(p0: [[414.0]], p1: [[415.0], [416.0]], p2: [[417.0]], p3: [[418.0], [419.0]], p4: [[420.0]], p5: [[421.0], [422.0]]), s0(p0: [[423.0]], p1: [[424.0], [425.0]], p2: [[426.0]], p3: [[427.0], [428.0]], p4: [[429.0]], p5: [[430.0], [431.0]])], p3: [s0(p0: [[432.0]], p1: [[433.0], [434.0]], p2: [[435.0]], p3: [[436.0], [437.0]], p4: [[438.0]], p5: [[439.0], [440.0]])], p4: s0(p0: [[441.0]], p1: [[442.0], [443.0]], p2: [[444.0]], p3: [[445.0], [446.0]], p4: [[447.0]], p5: [[448.0], [449.0]]), p5: [[s0(p0: [[450.0]], p1: [[451.0], [452.0]], p2: [[453.0]], p3: [[454.0], [455.0]], p4: [[456.0]], p5: [[457.0], [458.0]])], [s0(p0: [[459.0]], p1: [[460.0], [461.0]], p2: [[462.0]], p3: [[463.0], [464.0]], p4: [[465.0]], p5: [[466.0], [467.0]])]], p6: s0(p0: [[468.0]], p1: [[469.0], [470.0]], p2: [[471.0]], p3: [[472.0], [473.0]], p4: [[474.0]], p5: [[475.0], [476.0]]), p7: [s0(p0: [[477.0]], p1: [[478.0], [479.0]], p2: [[480.0]], p3: [[481.0], [482.0]], p4: [[483.0]], p5: [[484.0], [485.0]]), s0(p0: [[486.0]], p1: [[487.0], [488.0]], p2: [[489.0]], p3: [[490.0], [491.0]], p4: [[492.0]], p5: [[493.0], [494.0]])])
    let v4: Double = 495.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 495.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
