  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s2 {
    var p0: s0
    var p1: s1
  }
  struct s3 {
    var p0: [s2]
    var p1: Double
    var p2: s0
    var p3: [s1]
  }
  struct s4 {
    var p0: [s2]
    var p1: s0
  }
  struct s5 {
    var p0: s3
    var p1: [[s2]]
  }
  struct s7 {
    var p0: s1
    var p1: s2
  }
  struct s10 {
    var p0: s4
    var p1: [s5]
  }
  func f11(_ v0: [s5], _ v1: Double) -> Double {
    let v2: s5 = v0[0]
    let v6: s3 = v2.p0
    let v19: s0 = v6.p2
    let v46: [[Double]] = v19.p0
    let v21: [Double] = v46[0]
    let v43: [Double] = v46[0]
    let v20: Double = v21[0]
    let v45: Double = v43[0]
    let v102: Double = v45 / v20
    return v102
  }
  @inline(never)
  func f0(_ v0: s10, _ v1: [s7], _ v2: Double) -> Double {
    let v10: [s5] = v0.p1
    let v11: [s5] = v0.p1
    let v15: Double = v2 * v2
    let v37: Double = f11(v10, v15)
    let v73: Double = f11(v11, v37)
    let v62: Double = v73 - v73
    return v62
  }
  func benchmark() {
    let v0: s10 = s10(p0: s4(p0: [s2(p0: s0(p0: [[0.0]], p1: [[1.0], [2.0]]), p1: s1(p0: [s0(p0: [[3.0]], p1: [[4.0], [5.0]]), s0(p0: [[6.0]], p1: [[7.0], [8.0]])], p1: [s0(p0: [[9.0]], p1: [[10.0], [11.0]])])), s2(p0: s0(p0: [[12.0]], p1: [[13.0], [14.0]]), p1: s1(p0: [s0(p0: [[15.0]], p1: [[16.0], [17.0]]), s0(p0: [[18.0]], p1: [[19.0], [20.0]])], p1: [s0(p0: [[21.0]], p1: [[22.0], [23.0]])]))], p1: s0(p0: [[24.0]], p1: [[25.0], [26.0]])), p1: [s5(p0: s3(p0: [s2(p0: s0(p0: [[27.0]], p1: [[28.0], [29.0]]), p1: s1(p0: [s0(p0: [[30.0]], p1: [[31.0], [32.0]]), s0(p0: [[33.0]], p1: [[34.0], [35.0]])], p1: [s0(p0: [[36.0]], p1: [[37.0], [38.0]])])), s2(p0: s0(p0: [[39.0]], p1: [[40.0], [41.0]]), p1: s1(p0: [s0(p0: [[42.0]], p1: [[43.0], [44.0]]), s0(p0: [[45.0]], p1: [[46.0], [47.0]])], p1: [s0(p0: [[48.0]], p1: [[49.0], [50.0]])])), s2(p0: s0(p0: [[51.0]], p1: [[52.0], [53.0]]), p1: s1(p0: [s0(p0: [[54.0]], p1: [[55.0], [56.0]]), s0(p0: [[57.0]], p1: [[58.0], [59.0]])], p1: [s0(p0: [[60.0]], p1: [[61.0], [62.0]])]))], p1: 63.0, p2: s0(p0: [[64.0]], p1: [[65.0], [66.0]]), p3: [s1(p0: [s0(p0: [[67.0]], p1: [[68.0], [69.0]]), s0(p0: [[70.0]], p1: [[71.0], [72.0]])], p1: [s0(p0: [[73.0]], p1: [[74.0], [75.0]])]), s1(p0: [s0(p0: [[76.0]], p1: [[77.0], [78.0]]), s0(p0: [[79.0]], p1: [[80.0], [81.0]])], p1: [s0(p0: [[82.0]], p1: [[83.0], [84.0]])])]), p1: [[s2(p0: s0(p0: [[85.0]], p1: [[86.0], [87.0]]), p1: s1(p0: [s0(p0: [[88.0]], p1: [[89.0], [90.0]]), s0(p0: [[91.0]], p1: [[92.0], [93.0]])], p1: [s0(p0: [[94.0]], p1: [[95.0], [96.0]])]))]]), s5(p0: s3(p0: [s2(p0: s0(p0: [[97.0]], p1: [[98.0], [99.0]]), p1: s1(p0: [s0(p0: [[100.0]], p1: [[101.0], [102.0]]), s0(p0: [[103.0]], p1: [[104.0], [105.0]])], p1: [s0(p0: [[106.0]], p1: [[107.0], [108.0]])])), s2(p0: s0(p0: [[109.0]], p1: [[110.0], [111.0]]), p1: s1(p0: [s0(p0: [[112.0]], p1: [[113.0], [114.0]]), s0(p0: [[115.0]], p1: [[116.0], [117.0]])], p1: [s0(p0: [[118.0]], p1: [[119.0], [120.0]])])), s2(p0: s0(p0: [[121.0]], p1: [[122.0], [123.0]]), p1: s1(p0: [s0(p0: [[124.0]], p1: [[125.0], [126.0]]), s0(p0: [[127.0]], p1: [[128.0], [129.0]])], p1: [s0(p0: [[130.0]], p1: [[131.0], [132.0]])]))], p1: 133.0, p2: s0(p0: [[134.0]], p1: [[135.0], [136.0]]), p3: [s1(p0: [s0(p0: [[137.0]], p1: [[138.0], [139.0]]), s0(p0: [[140.0]], p1: [[141.0], [142.0]])], p1: [s0(p0: [[143.0]], p1: [[144.0], [145.0]])]), s1(p0: [s0(p0: [[146.0]], p1: [[147.0], [148.0]]), s0(p0: [[149.0]], p1: [[150.0], [151.0]])], p1: [s0(p0: [[152.0]], p1: [[153.0], [154.0]])])]), p1: [[s2(p0: s0(p0: [[155.0]], p1: [[156.0], [157.0]]), p1: s1(p0: [s0(p0: [[158.0]], p1: [[159.0], [160.0]]), s0(p0: [[161.0]], p1: [[162.0], [163.0]])], p1: [s0(p0: [[164.0]], p1: [[165.0], [166.0]])]))]]), s5(p0: s3(p0: [s2(p0: s0(p0: [[167.0]], p1: [[168.0], [169.0]]), p1: s1(p0: [s0(p0: [[170.0]], p1: [[171.0], [172.0]]), s0(p0: [[173.0]], p1: [[174.0], [175.0]])], p1: [s0(p0: [[176.0]], p1: [[177.0], [178.0]])])), s2(p0: s0(p0: [[179.0]], p1: [[180.0], [181.0]]), p1: s1(p0: [s0(p0: [[182.0]], p1: [[183.0], [184.0]]), s0(p0: [[185.0]], p1: [[186.0], [187.0]])], p1: [s0(p0: [[188.0]], p1: [[189.0], [190.0]])])), s2(p0: s0(p0: [[191.0]], p1: [[192.0], [193.0]]), p1: s1(p0: [s0(p0: [[194.0]], p1: [[195.0], [196.0]]), s0(p0: [[197.0]], p1: [[198.0], [199.0]])], p1: [s0(p0: [[200.0]], p1: [[201.0], [202.0]])]))], p1: 203.0, p2: s0(p0: [[204.0]], p1: [[205.0], [206.0]]), p3: [s1(p0: [s0(p0: [[207.0]], p1: [[208.0], [209.0]]), s0(p0: [[210.0]], p1: [[211.0], [212.0]])], p1: [s0(p0: [[213.0]], p1: [[214.0], [215.0]])]), s1(p0: [s0(p0: [[216.0]], p1: [[217.0], [218.0]]), s0(p0: [[219.0]], p1: [[220.0], [221.0]])], p1: [s0(p0: [[222.0]], p1: [[223.0], [224.0]])])]), p1: [[s2(p0: s0(p0: [[225.0]], p1: [[226.0], [227.0]]), p1: s1(p0: [s0(p0: [[228.0]], p1: [[229.0], [230.0]]), s0(p0: [[231.0]], p1: [[232.0], [233.0]])], p1: [s0(p0: [[234.0]], p1: [[235.0], [236.0]])]))]])])
    let v1: [s7] = [s7(p0: s1(p0: [s0(p0: [[237.0]], p1: [[238.0], [239.0]]), s0(p0: [[240.0]], p1: [[241.0], [242.0]])], p1: [s0(p0: [[243.0]], p1: [[244.0], [245.0]])]), p1: s2(p0: s0(p0: [[246.0]], p1: [[247.0], [248.0]]), p1: s1(p0: [s0(p0: [[249.0]], p1: [[250.0], [251.0]]), s0(p0: [[252.0]], p1: [[253.0], [254.0]])], p1: [s0(p0: [[255.0]], p1: [[256.0], [257.0]])]))), s7(p0: s1(p0: [s0(p0: [[258.0]], p1: [[259.0], [260.0]]), s0(p0: [[261.0]], p1: [[262.0], [263.0]])], p1: [s0(p0: [[264.0]], p1: [[265.0], [266.0]])]), p1: s2(p0: s0(p0: [[267.0]], p1: [[268.0], [269.0]]), p1: s1(p0: [s0(p0: [[270.0]], p1: [[271.0], [272.0]]), s0(p0: [[273.0]], p1: [[274.0], [275.0]])], p1: [s0(p0: [[276.0]], p1: [[277.0], [278.0]])])))]
    let v2: Double = 279.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 279.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
