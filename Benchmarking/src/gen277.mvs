  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
    var p3: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s3 {
    var p0: Float
    var p1: s0
  } in
  struct s4 {
    var p0: s3
    var p1: s3
  } in
  struct s6 {
    var p0: [s3]
    var p1: s4
  } in
  let f112: (s6) -> s6 = (v0: s6) -> s6 {
    var v6: s6 = v0 in
    var v1: s6 = v6 in
    var v4: s6 = v1 in
    let v3: s4 = v1.p1 in
    v6.p1 = v3 in
    v4
  } in
  let f89: (s0, s0) -> s0 = (v0: s0, v1: s0) -> s0 {
    let v6: [[Float]] = v0.p3 in
    var v3: s0 = v0 in
    let v8: [[Float]] = v3.p2 in
    let v4: [[Float]] = v0.p2 in
    var v9: s0 = v1 in
    let v2: [[Float]] = v9.p3 in
    v9.p3 = v6 in
    let v5: [Float] = v8[0] in
    var v15: s0 = v0 in
    let v22: [[Float]] = v15.p2 in
    var v12: s0 = v15 in
    var v13: [Float] = v5 in
    let v7: Float = v13[0] in
    v15.p1 = v8 in
    v9.p2 = v4 in
    v12.p2 = v4 in
    let v11: Float = v13[0] in
    let v10: Float = v5[0] in
    v13[0] = v10 in
    v15.p0 = v8 in
    var v17: [Float] = v5 in
    v12.p0 = v22 in
    let v26: [[Float]] = v15.p0 in
    let v16: Float = v7 - v11 in
    let v14: [[Float]] = v15.p3 in
    v9.p1 = v14 in
    v13[0] = v16 in
    v3.p0 = v2 in
    let v25: [Float] = v2[0] in
    v13[0] = v11 in
    v9.p3 = v22 in
    v15.p3 = v2 in
    v17[0] = v16 in
    v3.p0 = v2 in
    v15.p0 = v8 in
    v15.p2 = v8 in
    var v84: [[Float]] = v26 in
    var v51: s0 = v3 in
    v84[0] = v17 in
    let v43: s1 = s1(v51, v12) in
    var v61: s1 = v43 in
    var v149: [[Float]] = v8 in
    let v52: [Float] = v149[0] in
    v3.p1 = v84 in
    v84[0] = v52 in
    let v58: s0 = v61.p1 in
    v15.p2 = v149 in
    v84[0] = v25 in
    v15.p2 = v22 in
    v61.p0 = v12 in
    v58
  } in
  let f81: (s6) -> s6 = (v0: s6) -> s6 {
    let v1: s4 = v0.p1 in
    var v3: s6 = v0 in
    v3 = v0 in
    let v5: s4 = v3.p1 in
    v3.p1 = v5 in
    let v8: [s4] = [v5, v1, v5, v1, v5, v1, v5] in
    var v6: s6 = v0 in
    v6.p1 = v5 in
    var v16: s6 = v6 in
    let v25: s4 = v8[6] in
    v16.p1 = v25 in
    v6.p1 = v25 in
    v16
  } in
  let f62: (s6) -> s6 = (v0: s6) -> s6 {
    var v2: s6 = v0 in
    var v6: s6 = v2 in
    let v10: [s3] = v6.p0 in
    v2.p0 = v10 in
    v6
  } in
  let f6: (s4, Float) -> Float = (v0: s4, v1: Float) -> Float {
    let v8: s3 = v0.p0 in
    let v11: s0 = v8.p1 in
    var v12: s0 = v11 in
    let v10: s0 = f89(v12, v11) in
    let v26: s0 = f89(v11, v11) in
    let v43: s0 = f89(v26, v26) in
    let v23: s0 = f89(v10, v43) in
    let v33: [[Float]] = v23.p2 in
    let v47: [Float] = v33[0] in
    let v68: Float = v8.p0 in
    let v51: Float = v47[0] in
    let v53: Float = v51 * v68 in
    v12.p2 = v33 in
    v53
  } in
  let noinline_f0: ([s6], Float) -> Float = (v0: [s6], v1: Float) -> Float {
    var v7: Float = v1 in
    let v2: s6 = v0[0] in
    let v4: s6 = f62(v2) in
    let v6: s6 = f81(v4) in
    let v11: s6 = f62(v2) in
    var v9: Float = v7 in
    var v10: s6 = v6 in
    let v12: s6 = f112(v11) in
    let v16: s6 = v0[0] in
    let v14: s6 = f112(v10) in
    let v21: [s6] = [v14, v6, v4, v12, v16, v2] in
    var v20: Float = v9 in
    let v37: s6 = f62(v10) in
    let v39: s6 = v21[2] in
    let v42: [s3] = v37.p0 in
    v10.p0 = v42 in
    v10.p0 = v42 in
    let v68: s4 = v39.p1 in
    v10.p0 = v42 in
    v10.p0 = v42 in
    let v150: Float = f6(v68, v20) in
    let v134: Float = v150 * v1 in
    v134
  } in
  fun loop(i: Int, v0: [s6], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s6] = [s6([s3(0.0, s0([[1.0]], [[2.0]], [[3.0]], [[4.0]]))], s4(s3(5.0, s0([[6.0]], [[7.0]], [[8.0]], [[9.0]])), s3(10.0, s0([[11.0]], [[12.0]], [[13.0]], [[14.0]]))))] in
    let v1: Float = 15.0 in
    let initialResult: Float = 15.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()