  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: [[s0]]
    var p1: [[s0]]
  }
  struct s3 {
    var p0: s2
    var p1: s0
  }
  struct s4 {
    var p0: [s3]
    var p1: s1
  }
  struct s5 {
    var p0: [s2]
    var p1: s4
  }
  struct s6 {
    var p0: s3
    var p1: s3
    var p2: [s5]
    var p3: s4
    var p4: [s3]
    var p5: [s2]
  }
  struct s7 {
    var p0: Double
    var p1: [[s4]]
  }
  struct s8 {
    var p0: s0
    var p1: s1
  }
  struct s10 {
    var p0: s4
    var p1: s7
  }
  struct s11 {
    var p0: s6
    var p1: s10
  }
  @inline(never)
  func f0(_ v0: s11, _ v1: [[s8]], _ v2: s2, _ v3: s0, _ v4: Double) -> Double {
    let v30: [[Double]] = v3.p0
    let v18: s10 = v0.p1
    let v80: [Double] = v30[0]
    var v38: [Double] = v80
    let v81: s7 = v18.p1
    v38[0] = v4
    let v161: Double = v38[0]
    let v84: Double = v81.p0
    v38[0] = v84
    var v234: Double = v161
    return v234
  }
  func benchmark() {
    let v0: s11 = s11(p0: s6(p0: s3(p0: s2(p0: [[s0(p0: [[0.0]], p1: [[1.0]])], [s0(p0: [[2.0]], p1: [[3.0]])]], p1: [[s0(p0: [[4.0]], p1: [[5.0]])], [s0(p0: [[6.0]], p1: [[7.0]])], [s0(p0: [[8.0]], p1: [[9.0]])]]), p1: s0(p0: [[10.0]], p1: [[11.0]])), p1: s3(p0: s2(p0: [[s0(p0: [[12.0]], p1: [[13.0]])], [s0(p0: [[14.0]], p1: [[15.0]])]], p1: [[s0(p0: [[16.0]], p1: [[17.0]])], [s0(p0: [[18.0]], p1: [[19.0]])], [s0(p0: [[20.0]], p1: [[21.0]])]]), p1: s0(p0: [[22.0]], p1: [[23.0]])), p2: [s5(p0: [s2(p0: [[s0(p0: [[24.0]], p1: [[25.0]])], [s0(p0: [[26.0]], p1: [[27.0]])]], p1: [[s0(p0: [[28.0]], p1: [[29.0]])], [s0(p0: [[30.0]], p1: [[31.0]])], [s0(p0: [[32.0]], p1: [[33.0]])]]), s2(p0: [[s0(p0: [[34.0]], p1: [[35.0]])], [s0(p0: [[36.0]], p1: [[37.0]])]], p1: [[s0(p0: [[38.0]], p1: [[39.0]])], [s0(p0: [[40.0]], p1: [[41.0]])], [s0(p0: [[42.0]], p1: [[43.0]])]]), s2(p0: [[s0(p0: [[44.0]], p1: [[45.0]])], [s0(p0: [[46.0]], p1: [[47.0]])]], p1: [[s0(p0: [[48.0]], p1: [[49.0]])], [s0(p0: [[50.0]], p1: [[51.0]])], [s0(p0: [[52.0]], p1: [[53.0]])]])], p1: s4(p0: [s3(p0: s2(p0: [[s0(p0: [[54.0]], p1: [[55.0]])], [s0(p0: [[56.0]], p1: [[57.0]])]], p1: [[s0(p0: [[58.0]], p1: [[59.0]])], [s0(p0: [[60.0]], p1: [[61.0]])], [s0(p0: [[62.0]], p1: [[63.0]])]]), p1: s0(p0: [[64.0]], p1: [[65.0]])), s3(p0: s2(p0: [[s0(p0: [[66.0]], p1: [[67.0]])], [s0(p0: [[68.0]], p1: [[69.0]])]], p1: [[s0(p0: [[70.0]], p1: [[71.0]])], [s0(p0: [[72.0]], p1: [[73.0]])], [s0(p0: [[74.0]], p1: [[75.0]])]]), p1: s0(p0: [[76.0]], p1: [[77.0]]))], p1: s1(p0: s0(p0: [[78.0]], p1: [[79.0]]), p1: [s0(p0: [[80.0]], p1: [[81.0]])])))], p3: s4(p0: [s3(p0: s2(p0: [[s0(p0: [[82.0]], p1: [[83.0]])], [s0(p0: [[84.0]], p1: [[85.0]])]], p1: [[s0(p0: [[86.0]], p1: [[87.0]])], [s0(p0: [[88.0]], p1: [[89.0]])], [s0(p0: [[90.0]], p1: [[91.0]])]]), p1: s0(p0: [[92.0]], p1: [[93.0]])), s3(p0: s2(p0: [[s0(p0: [[94.0]], p1: [[95.0]])], [s0(p0: [[96.0]], p1: [[97.0]])]], p1: [[s0(p0: [[98.0]], p1: [[99.0]])], [s0(p0: [[100.0]], p1: [[101.0]])], [s0(p0: [[102.0]], p1: [[103.0]])]]), p1: s0(p0: [[104.0]], p1: [[105.0]]))], p1: s1(p0: s0(p0: [[106.0]], p1: [[107.0]]), p1: [s0(p0: [[108.0]], p1: [[109.0]])])), p4: [s3(p0: s2(p0: [[s0(p0: [[110.0]], p1: [[111.0]])], [s0(p0: [[112.0]], p1: [[113.0]])]], p1: [[s0(p0: [[114.0]], p1: [[115.0]])], [s0(p0: [[116.0]], p1: [[117.0]])], [s0(p0: [[118.0]], p1: [[119.0]])]]), p1: s0(p0: [[120.0]], p1: [[121.0]]))], p5: [s2(p0: [[s0(p0: [[122.0]], p1: [[123.0]])], [s0(p0: [[124.0]], p1: [[125.0]])]], p1: [[s0(p0: [[126.0]], p1: [[127.0]])], [s0(p0: [[128.0]], p1: [[129.0]])], [s0(p0: [[130.0]], p1: [[131.0]])]]), s2(p0: [[s0(p0: [[132.0]], p1: [[133.0]])], [s0(p0: [[134.0]], p1: [[135.0]])]], p1: [[s0(p0: [[136.0]], p1: [[137.0]])], [s0(p0: [[138.0]], p1: [[139.0]])], [s0(p0: [[140.0]], p1: [[141.0]])]])]), p1: s10(p0: s4(p0: [s3(p0: s2(p0: [[s0(p0: [[142.0]], p1: [[143.0]])], [s0(p0: [[144.0]], p1: [[145.0]])]], p1: [[s0(p0: [[146.0]], p1: [[147.0]])], [s0(p0: [[148.0]], p1: [[149.0]])], [s0(p0: [[150.0]], p1: [[151.0]])]]), p1: s0(p0: [[152.0]], p1: [[153.0]])), s3(p0: s2(p0: [[s0(p0: [[154.0]], p1: [[155.0]])], [s0(p0: [[156.0]], p1: [[157.0]])]], p1: [[s0(p0: [[158.0]], p1: [[159.0]])], [s0(p0: [[160.0]], p1: [[161.0]])], [s0(p0: [[162.0]], p1: [[163.0]])]]), p1: s0(p0: [[164.0]], p1: [[165.0]]))], p1: s1(p0: s0(p0: [[166.0]], p1: [[167.0]]), p1: [s0(p0: [[168.0]], p1: [[169.0]])])), p1: s7(p0: 170.0, p1: [[s4(p0: [s3(p0: s2(p0: [[s0(p0: [[171.0]], p1: [[172.0]])], [s0(p0: [[173.0]], p1: [[174.0]])]], p1: [[s0(p0: [[175.0]], p1: [[176.0]])], [s0(p0: [[177.0]], p1: [[178.0]])], [s0(p0: [[179.0]], p1: [[180.0]])]]), p1: s0(p0: [[181.0]], p1: [[182.0]])), s3(p0: s2(p0: [[s0(p0: [[183.0]], p1: [[184.0]])], [s0(p0: [[185.0]], p1: [[186.0]])]], p1: [[s0(p0: [[187.0]], p1: [[188.0]])], [s0(p0: [[189.0]], p1: [[190.0]])], [s0(p0: [[191.0]], p1: [[192.0]])]]), p1: s0(p0: [[193.0]], p1: [[194.0]]))], p1: s1(p0: s0(p0: [[195.0]], p1: [[196.0]]), p1: [s0(p0: [[197.0]], p1: [[198.0]])]))]])))
    let v1: [[s8]] = [[s8(p0: s0(p0: [[199.0]], p1: [[200.0]]), p1: s1(p0: s0(p0: [[201.0]], p1: [[202.0]]), p1: [s0(p0: [[203.0]], p1: [[204.0]])]))], [s8(p0: s0(p0: [[205.0]], p1: [[206.0]]), p1: s1(p0: s0(p0: [[207.0]], p1: [[208.0]]), p1: [s0(p0: [[209.0]], p1: [[210.0]])]))]]
    let v2: s2 = s2(p0: [[s0(p0: [[211.0]], p1: [[212.0]])], [s0(p0: [[213.0]], p1: [[214.0]])]], p1: [[s0(p0: [[215.0]], p1: [[216.0]])], [s0(p0: [[217.0]], p1: [[218.0]])], [s0(p0: [[219.0]], p1: [[220.0]])]])
    let v3: s0 = s0(p0: [[221.0]], p1: [[222.0]])
    let v4: Double = 223.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 223.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
