  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s3 {
    var p0: [s2]
    var p1: s2
  } in
  struct s4 {
    var p0: s3
    var p1: s0
  } in
  struct s5 {
    var p0: s1
    var p1: s1
  } in
  struct s7 {
    var p0: s5
    var p1: s5
  } in
  struct s8 {
    var p0: s4
    var p1: s7
  } in
  let f48: (s8) -> s8 = (v0: s8) -> s8 {
    v0
  } in
  let f47: (Float, s8) -> Float = (v0: Float, v1: s8) -> Float {
    var v31: Float = v0 in
    v31
  } in
  let f37: (s7) -> s7 = (v0: s7) -> s7 {
    var v2: s7 = v0 in
    var v4: s7 = v2 in
    let v8: s5 = v2.p0 in
    v4.p0 = v8 in
    let v6: [s5] = [v8, v8, v8, v8, v8] in
    v2.p0 = v8 in
    v4.p0 = v8 in
    var v3: s7 = v4 in
    let v11: s5 = v6[4] in
    v3.p0 = v11 in
    v3
  } in
  let f12: (s8, s8) -> s8 = (v0: s8, v1: s8) -> s8 {
    let v6: s8 = f48(v1) in
    let v4: s7 = v1.p1 in
    let v8: s7 = f37(v4) in
    let v9: s8 = f48(v6) in
    let v11: s8 = f48(v9) in
    let v14: s8 = f48(v11) in
    var v17: s8 = v11 in
    v17.p1 = v8 in
    let v40: s7 = v0.p1 in
    v17 = v14 in
    v17.p1 = v40 in
    v17
  } in
  let noinline_f0: (s8, Float) -> Float = (v0: s8, v1: Float) -> Float {
    let v5: s8 = f12(v0, v0) in
    let v8: Float = f47(v1, v5) in
    let v13: Float = f47(v1, v5) in
    let v19: Float = v13 * v13 in
    var v17: Float = v8 in
    let v52: Float = v19 - v17 in
    v52
  } in
  fun loop(i: Int, v0: s8, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s8 = s8(s4(s3([s2(s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]), [[s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]])], [s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]])]]), s2(s0([[15.0], [16.0]], [[17.0], [18.0], [19.0]]), [[s0([[20.0], [21.0]], [[22.0], [23.0], [24.0]])], [s0([[25.0], [26.0]], [[27.0], [28.0], [29.0]])]])], s2(s0([[30.0], [31.0]], [[32.0], [33.0], [34.0]]), [[s0([[35.0], [36.0]], [[37.0], [38.0], [39.0]])], [s0([[40.0], [41.0]], [[42.0], [43.0], [44.0]])]])), s0([[45.0], [46.0]], [[47.0], [48.0], [49.0]])), s7(s5(s1(s0([[50.0], [51.0]], [[52.0], [53.0], [54.0]]), [s0([[55.0], [56.0]], [[57.0], [58.0], [59.0]]), s0([[60.0], [61.0]], [[62.0], [63.0], [64.0]])]), s1(s0([[65.0], [66.0]], [[67.0], [68.0], [69.0]]), [s0([[70.0], [71.0]], [[72.0], [73.0], [74.0]]), s0([[75.0], [76.0]], [[77.0], [78.0], [79.0]])])), s5(s1(s0([[80.0], [81.0]], [[82.0], [83.0], [84.0]]), [s0([[85.0], [86.0]], [[87.0], [88.0], [89.0]]), s0([[90.0], [91.0]], [[92.0], [93.0], [94.0]])]), s1(s0([[95.0], [96.0]], [[97.0], [98.0], [99.0]]), [s0([[100.0], [101.0]], [[102.0], [103.0], [104.0]]), s0([[105.0], [106.0]], [[107.0], [108.0], [109.0]])])))) in
    let v1: Float = 110.0 in
    let initialResult: Float = 110.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()