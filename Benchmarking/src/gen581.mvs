  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
    var p2: s0
  } in
  struct s2 {
    var p0: s0
    var p1: s0
  } in
  struct s7 {
    var p0: s1
    var p1: [s2]
  } in
  let noinline_f0: (s0, s7, Float) -> Float = (v0: s0, v1: s7, v2: Float) -> Float {
    let v3: [[Float]] = v0.p0 in
    let v4: [Float] = v3[0] in
    var v8: [[Float]] = v3 in
    v8[0] = v4 in
    v8 = v3 in
    v8[0] = v4 in
    let v18: [Float] = v8[0] in
    v8 = v3 in
    let v34: Float = v18[0] in
    var v56: Float = v34 in
    var v99: Float = v56 in
    v99
  } in
  fun loop(i: Int, v0: s0, v1: s7, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0]], [[1.0], [2.0]]) in
    let v1: s7 = s7(s1(s0([[3.0]], [[4.0], [5.0]]), [s0([[6.0]], [[7.0], [8.0]])], s0([[9.0]], [[10.0], [11.0]])), [s2(s0([[12.0]], [[13.0], [14.0]]), s0([[15.0]], [[16.0], [17.0]])), s2(s0([[18.0]], [[19.0], [20.0]]), s0([[21.0]], [[22.0], [23.0]])), s2(s0([[24.0]], [[25.0], [26.0]]), s0([[27.0]], [[28.0], [29.0]]))]) in
    let v2: Float = 30.0 in
    let initialResult: Float = 30.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()