  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s1]
  } in
  struct s3 {
    var p0: s2
    var p1: s2
  } in
  let noinline_f0: (s3, Float) -> Float = (v0: s3, v1: Float) -> Float {
    let v5: [Float] = [v1, v1, v1, v1] in
    let v7: [Float] = [v1, v1, v1, v1, v1, v1, v1] in
    let v3: Float = v5[1] in
    let v2: Float = v7[2] in
    let v13: Float = v7[0] in
    let v15: Float = v2 * v13 in
    let v25: Float = v5[2] in
    let v38: Float = v5[0] in
    let v35: Float = v15 / v25 in
    let v43: Float = v35 * v3 in
    let v181: Float = v43 * v38 in
    v181
  } in
  fun loop(i: Int, v0: s3, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(s2([s1(s0([[0.0]], [[1.0], [2.0]]), s0([[3.0]], [[4.0], [5.0]]))]), s2([s1(s0([[6.0]], [[7.0], [8.0]]), s0([[9.0]], [[10.0], [11.0]]))])) in
    let v1: Float = 12.0 in
    let initialResult: Float = 12.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()