  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: s0
  }
  struct s2 {
    var p0: s0
    var p1: s1
  }
  struct s3 {
    var p0: s1
    var p1: [s0]
    var p2: s2
    var p3: s1
  }
  func f73(_ v0: Double) -> Double {
    var v6: Double = v0
    var v1: Double = v6
    var v4: Double = v1
    var v2: Double = v1
    var v5: Double = v1
    var v10: Double = v6
    var v8: Double = v2
    var v11: Double = v1
    var v27: Double = v4
    var v14: Double = v1
    let v12: [Double] = [v4]
    var v18: [Double] = v12
    var v46: [Double] = v18
    var v21: [Double] = v18
    var v25: [Double] = v21
    var v32: [Double] = v46
    var v40: [Double] = v18
    var v23: Double = v2
    var v37: Double = v5
    let v83: [[Double]] = [v18, v40, v21, v25, v40, v21, v40]
    v18[0] = v37
    let v39: [Double] = v83[0]
    var v70: [Double] = v40
    v32 = v39
    v70 = v46
    var v45: Double = v2
    v40[0] = v14
    v18[0] = v6
    let v78: [Double] = v83[6]
    v2 = v10
    v70[0] = v11
    v32[0] = v23
    v70[0] = v45
    let v138: Double = v70[0]
    v40[0] = v138
    let v92: [[Double]] = [v78, v32]
    v18[0] = v11
    var v84: [[Double]] = v92
    v46[0] = v27
    let v96: [Double] = v84[0]
    let v130: Double = v96[0]
    v46[0] = v8
    return v130
  }
  func f10(_ v0: Double) -> Double {
    var v6: Double = v0
    let v3: Double = f73(v0)
    var v1: Double = v6
    var v9: Double = v6
    var v12: Double = v3
    let v10: Double = f73(v9)
    let v4: Double = f73(v10)
    let v20: Double = f73(v4)
    let v22: [Double] = [v4, v3, v20, v1, v9]
    var v26: [Double] = v22
    var v18: [Double] = v26
    v18[1] = v12
    v26[3] = v3
    v18 = v26
    let v44: Double = v18[1]
    var v125: Double = v44
    return v125
  }
  @inline(never)
  func f0(_ v0: [s3], _ v1: Double) -> Double {
    let v4: s3 = v0[2]
    let v2: Double = f10(v1)
    let v7: s2 = v4.p2
    let v16: Double = f10(v1)
    let v20: Double = f10(v2)
    let v37: Double = v20 + v16
    let v24: s0 = v7.p0
    let v82: Double = f10(v37)
    let v39: [[Double]] = v24.p2
    let v75: [Double] = v39[1]
    var v92: [Double] = v75
    v92[0] = v82
    let v78: Double = v92[0]
    return v78
  }
  func benchmark() {
    let v0: [s3] = [s3(p0: s1(p0: [s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0]], p2: [[4.0], [5.0]], p3: [[6.0]]), s0(p0: [[7.0], [8.0]], p1: [[9.0], [10.0]], p2: [[11.0], [12.0]], p3: [[13.0]])], p1: s0(p0: [[14.0], [15.0]], p1: [[16.0], [17.0]], p2: [[18.0], [19.0]], p3: [[20.0]])), p1: [s0(p0: [[21.0], [22.0]], p1: [[23.0], [24.0]], p2: [[25.0], [26.0]], p3: [[27.0]]), s0(p0: [[28.0], [29.0]], p1: [[30.0], [31.0]], p2: [[32.0], [33.0]], p3: [[34.0]]), s0(p0: [[35.0], [36.0]], p1: [[37.0], [38.0]], p2: [[39.0], [40.0]], p3: [[41.0]])], p2: s2(p0: s0(p0: [[42.0], [43.0]], p1: [[44.0], [45.0]], p2: [[46.0], [47.0]], p3: [[48.0]]), p1: s1(p0: [s0(p0: [[49.0], [50.0]], p1: [[51.0], [52.0]], p2: [[53.0], [54.0]], p3: [[55.0]]), s0(p0: [[56.0], [57.0]], p1: [[58.0], [59.0]], p2: [[60.0], [61.0]], p3: [[62.0]])], p1: s0(p0: [[63.0], [64.0]], p1: [[65.0], [66.0]], p2: [[67.0], [68.0]], p3: [[69.0]]))), p3: s1(p0: [s0(p0: [[70.0], [71.0]], p1: [[72.0], [73.0]], p2: [[74.0], [75.0]], p3: [[76.0]]), s0(p0: [[77.0], [78.0]], p1: [[79.0], [80.0]], p2: [[81.0], [82.0]], p3: [[83.0]])], p1: s0(p0: [[84.0], [85.0]], p1: [[86.0], [87.0]], p2: [[88.0], [89.0]], p3: [[90.0]]))), s3(p0: s1(p0: [s0(p0: [[91.0], [92.0]], p1: [[93.0], [94.0]], p2: [[95.0], [96.0]], p3: [[97.0]]), s0(p0: [[98.0], [99.0]], p1: [[100.0], [101.0]], p2: [[102.0], [103.0]], p3: [[104.0]])], p1: s0(p0: [[105.0], [106.0]], p1: [[107.0], [108.0]], p2: [[109.0], [110.0]], p3: [[111.0]])), p1: [s0(p0: [[112.0], [113.0]], p1: [[114.0], [115.0]], p2: [[116.0], [117.0]], p3: [[118.0]]), s0(p0: [[119.0], [120.0]], p1: [[121.0], [122.0]], p2: [[123.0], [124.0]], p3: [[125.0]]), s0(p0: [[126.0], [127.0]], p1: [[128.0], [129.0]], p2: [[130.0], [131.0]], p3: [[132.0]])], p2: s2(p0: s0(p0: [[133.0], [134.0]], p1: [[135.0], [136.0]], p2: [[137.0], [138.0]], p3: [[139.0]]), p1: s1(p0: [s0(p0: [[140.0], [141.0]], p1: [[142.0], [143.0]], p2: [[144.0], [145.0]], p3: [[146.0]]), s0(p0: [[147.0], [148.0]], p1: [[149.0], [150.0]], p2: [[151.0], [152.0]], p3: [[153.0]])], p1: s0(p0: [[154.0], [155.0]], p1: [[156.0], [157.0]], p2: [[158.0], [159.0]], p3: [[160.0]]))), p3: s1(p0: [s0(p0: [[161.0], [162.0]], p1: [[163.0], [164.0]], p2: [[165.0], [166.0]], p3: [[167.0]]), s0(p0: [[168.0], [169.0]], p1: [[170.0], [171.0]], p2: [[172.0], [173.0]], p3: [[174.0]])], p1: s0(p0: [[175.0], [176.0]], p1: [[177.0], [178.0]], p2: [[179.0], [180.0]], p3: [[181.0]]))), s3(p0: s1(p0: [s0(p0: [[182.0], [183.0]], p1: [[184.0], [185.0]], p2: [[186.0], [187.0]], p3: [[188.0]]), s0(p0: [[189.0], [190.0]], p1: [[191.0], [192.0]], p2: [[193.0], [194.0]], p3: [[195.0]])], p1: s0(p0: [[196.0], [197.0]], p1: [[198.0], [199.0]], p2: [[200.0], [201.0]], p3: [[202.0]])), p1: [s0(p0: [[203.0], [204.0]], p1: [[205.0], [206.0]], p2: [[207.0], [208.0]], p3: [[209.0]]), s0(p0: [[210.0], [211.0]], p1: [[212.0], [213.0]], p2: [[214.0], [215.0]], p3: [[216.0]]), s0(p0: [[217.0], [218.0]], p1: [[219.0], [220.0]], p2: [[221.0], [222.0]], p3: [[223.0]])], p2: s2(p0: s0(p0: [[224.0], [225.0]], p1: [[226.0], [227.0]], p2: [[228.0], [229.0]], p3: [[230.0]]), p1: s1(p0: [s0(p0: [[231.0], [232.0]], p1: [[233.0], [234.0]], p2: [[235.0], [236.0]], p3: [[237.0]]), s0(p0: [[238.0], [239.0]], p1: [[240.0], [241.0]], p2: [[242.0], [243.0]], p3: [[244.0]])], p1: s0(p0: [[245.0], [246.0]], p1: [[247.0], [248.0]], p2: [[249.0], [250.0]], p3: [[251.0]]))), p3: s1(p0: [s0(p0: [[252.0], [253.0]], p1: [[254.0], [255.0]], p2: [[256.0], [257.0]], p3: [[258.0]]), s0(p0: [[259.0], [260.0]], p1: [[261.0], [262.0]], p2: [[263.0], [264.0]], p3: [[265.0]])], p1: s0(p0: [[266.0], [267.0]], p1: [[268.0], [269.0]], p2: [[270.0], [271.0]], p3: [[272.0]])))]
    let v1: Double = 273.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 273.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
