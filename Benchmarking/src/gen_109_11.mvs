  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s2 {
    var p0: [s1]
    var p1: s1
  } in
  struct s5 {
    var p0: s1
  } in
  let f81: (s2, s2) -> s2 = (v0: s2, v1: s2) -> s2 {
    v0
  } in
  let f30: (Float, s2) -> s2 = (v0: Float, v1: s2) -> s2 {
    let v10: s2 = f81(v1, v1) in
    let v6: s1 = v1.p1 in
    let v5: s5 = s5(v6) in
    let v14: s1 = v5.p0 in
    let v4: s2 = f81(v10, v1) in
    var v28: s2 = v4 in
    v28.p1 = v14 in
    let v22: s2 = f81(v28, v4) in
    v28.p1 = v14 in
    let v85: s2 = f81(v10, v22) in
    v85
  } in
  let noinline_f0: (s2, Float) -> Float = (v0: s2, v1: Float) -> Float {
    let v5: s2 = f30(v1, v0) in
    let v7: s1 = v5.p1 in
    var v8: s1 = v7 in
    let v36: [s0] = v8.p1 in
    v8 = v7 in
    let v17: s0 = v36[2] in
    let v24: s0 = v36[0] in
    var v38: [s0] = v36 in
    v38[2] = v24 in
    let v67: [[Float]] = v24.p0 in
    let v29: Float = v1 * v1 in
    v8.p1 = v38 in
    let v103: s0 = v38[2] in
    v38[2] = v17 in
    v38[2] = v17 in
    let v52: [Float] = v67[1] in
    let v42: Float = v52[0] in
    v38[1] = v17 in
    let v54: Float = v42 + v29 in
    var v115: Float = v54 in
    v38[1] = v103 in
    v115
  } in
  fun loop(i: Int, v0: s2, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2([s1([s0([[0.0], [1.0]], [[2.0]]), s0([[3.0], [4.0]], [[5.0]])], [s0([[6.0], [7.0]], [[8.0]]), s0([[9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0]], [[14.0]])]), s1([s0([[15.0], [16.0]], [[17.0]]), s0([[18.0], [19.0]], [[20.0]])], [s0([[21.0], [22.0]], [[23.0]]), s0([[24.0], [25.0]], [[26.0]]), s0([[27.0], [28.0]], [[29.0]])])], s1([s0([[30.0], [31.0]], [[32.0]]), s0([[33.0], [34.0]], [[35.0]])], [s0([[36.0], [37.0]], [[38.0]]), s0([[39.0], [40.0]], [[41.0]]), s0([[42.0], [43.0]], [[44.0]])])) in
    let v1: Float = 45.0 in
    let initialResult: Float = 45.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()