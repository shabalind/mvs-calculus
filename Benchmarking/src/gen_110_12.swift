  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: [[s0]]
    var p1: s0
  }
  struct s3 {
    var p0: s2
    var p1: s2
  }
  struct s4 {
    var p0: [s0]
    var p1: s2
  }
  struct s5 {
    var p0: [s1]
    var p1: [s2]
  }
  struct s6 {
    var p0: s3
    var p1: [[s1]]
  }
  struct s7 {
    var p0: [[s5]]
    var p1: s0
    var p2: [[s3]]
    var p3: s3
  }
  struct s8 {
    var p0: s2
    var p1: s4
  }
  struct s9 {
    var p0: s1
    var p1: s7
    var p2: s1
    var p3: s8
    var p4: [[s0]]
    var p5: s1
    var p6: s4
  }
  struct s11 {
    var p0: [s1]
    var p1: [s2]
  }
  struct s12 {
    var p0: s7
    var p1: [[s2]]
  }
  func f50(_ v0: [Double]) -> [Double] {
    var v3: [Double] = v0
    var v5: [Double] = v0
    let v1: Double = v3[0]
    var v2: [Double] = v3
    var v7: [Double] = v3
    var v4: Double = v1
    let v11: Double = v4 + v4
    v2[0] = v4
    v7[0] = v11
    let v12: Double = v5[0]
    var v8: [Double] = v5
    v2[0] = v11
    v8[0] = v4
    v3[0] = v4
    let v18: [[Double]] = [v8, v5, v2]
    v2[0] = v11
    v7[0] = v11
    var v28: [Double] = v5
    let v15: Double = v2[0]
    v8[0] = v4
    let v16: [Double] = v18[2]
    let v24: [[[Double]]] = [v18, v18, v18, v18]
    var v22: [[[Double]]] = v24
    v22[2] = v18
    let v26: Double = v16[0]
    var v53: [Double] = v0
    var v34: Double = v4
    var v37: [[[Double]]] = v22
    v7[0] = v12
    v53[0] = v26
    var v59: [Double] = v28
    let v70: Double = v7[0]
    v2[0] = v34
    let v143: Double = v59[0]
    let v82: [[[[Double]]]] = [v37, v22, v24, v22, v24]
    var v133: [[[[Double]]]] = v82
    var v57: Double = v12
    var v51: [[[[Double]]]] = v133
    let v42: Double = v53[0]
    v28[0] = v12
    let v97: [Double] = [v143, v42, v57]
    var v103: [[[[Double]]]] = v51
    let v109: [[[Double]]] = v103[4]
    var v52: [Double] = v59
    v7 = v52
    let v135: [[Double]] = v109[1]
    v5[0] = v70
    let v212: [Double] = v135[1]
    v5[0] = v15
    let v171: Double = v97[0]
    v2[0] = v171
    return v212
  }
  func f26(_ v0: s0) -> s0 {
    var v5: s0 = v0
    var v1: s0 = v0
    let v4: [[Double]] = v1.p0
    var v7: s0 = v1
    let v8: [Double] = v4[0]
    var v3: s0 = v1
    v3.p0 = v4
    let v2: [Double] = v4[2]
    var v11: [[Double]] = v4
    v3 = v7
    var v6: [[Double]] = v4
    let v15: [[Double]] = v5.p1
    v3.p1 = v15
    v5.p0 = v11
    var v19: [[Double]] = v15
    v3.p1 = v19
    let v13: [Double] = f50(v2)
    v19[0] = v13
    let v23: [[Double]] = v7.p0
    var v18: s0 = v1
    v3 = v18
    v1 = v7
    let v36: [Double] = f50(v8)
    let v31: [Double] = f50(v36)
    let v30: [[Double]] = v3.p0
    let v20: [Double] = v15[0]
    let v71: [[Double]] = v7.p0
    v19[0] = v13
    let v25: [[Double]] = v5.p1
    v19[0] = v31
    v6[0] = v36
    v5.p0 = v4
    v6[2] = v20
    let v17: [[Double]] = v0.p0
    let v62: [[Double]] = v18.p1
    v5.p0 = v30
    let v58: [Double] = v71[2]
    var v50: s0 = v0
    v3.p1 = v15
    let v53: [[Double]] = v50.p1
    let v150: s0 = s0(p0: v17, p1: v62)
    v3 = v0
    v5.p1 = v62
    v3.p1 = v25
    v11[0] = v58
    v7 = v1
    v1.p0 = v6
    v1.p0 = v11
    v1.p1 = v53
    v50.p0 = v23
    v50 = v7
    return v150
  }
  @inline(never)
  func f0(_ v0: s12, _ v1: s6, _ v2: [s5], _ v3: s9, _ v4: s11, _ v5: s0, _ v6: Double) -> Double {
    var v8: s0 = v5
    let v47: s0 = f26(v8)
    let v57: [[Double]] = v47.p0
    let v77: [Double] = v57[1]
    v8.p0 = v57
    let v371: Double = v77[0]
    return v371
  }
  func benchmark() {
    let v0: s12 = s12(p0: s7(p0: [[s5(p0: [s1(p0: s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0]]), p1: [s0(p0: [[4.0], [5.0], [6.0]], p1: [[7.0]])])], p1: [s2(p0: [[s0(p0: [[8.0], [9.0], [10.0]], p1: [[11.0]])]], p1: s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0]])), s2(p0: [[s0(p0: [[16.0], [17.0], [18.0]], p1: [[19.0]])]], p1: s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0]])), s2(p0: [[s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0]])]], p1: s0(p0: [[28.0], [29.0], [30.0]], p1: [[31.0]]))])], [s5(p0: [s1(p0: s0(p0: [[32.0], [33.0], [34.0]], p1: [[35.0]]), p1: [s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0]])])], p1: [s2(p0: [[s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0]])]], p1: s0(p0: [[44.0], [45.0], [46.0]], p1: [[47.0]])), s2(p0: [[s0(p0: [[48.0], [49.0], [50.0]], p1: [[51.0]])]], p1: s0(p0: [[52.0], [53.0], [54.0]], p1: [[55.0]])), s2(p0: [[s0(p0: [[56.0], [57.0], [58.0]], p1: [[59.0]])]], p1: s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0]]))])]], p1: s0(p0: [[64.0], [65.0], [66.0]], p1: [[67.0]]), p2: [[s3(p0: s2(p0: [[s0(p0: [[68.0], [69.0], [70.0]], p1: [[71.0]])]], p1: s0(p0: [[72.0], [73.0], [74.0]], p1: [[75.0]])), p1: s2(p0: [[s0(p0: [[76.0], [77.0], [78.0]], p1: [[79.0]])]], p1: s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0]])))], [s3(p0: s2(p0: [[s0(p0: [[84.0], [85.0], [86.0]], p1: [[87.0]])]], p1: s0(p0: [[88.0], [89.0], [90.0]], p1: [[91.0]])), p1: s2(p0: [[s0(p0: [[92.0], [93.0], [94.0]], p1: [[95.0]])]], p1: s0(p0: [[96.0], [97.0], [98.0]], p1: [[99.0]])))], [s3(p0: s2(p0: [[s0(p0: [[100.0], [101.0], [102.0]], p1: [[103.0]])]], p1: s0(p0: [[104.0], [105.0], [106.0]], p1: [[107.0]])), p1: s2(p0: [[s0(p0: [[108.0], [109.0], [110.0]], p1: [[111.0]])]], p1: s0(p0: [[112.0], [113.0], [114.0]], p1: [[115.0]])))]], p3: s3(p0: s2(p0: [[s0(p0: [[116.0], [117.0], [118.0]], p1: [[119.0]])]], p1: s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0]])), p1: s2(p0: [[s0(p0: [[124.0], [125.0], [126.0]], p1: [[127.0]])]], p1: s0(p0: [[128.0], [129.0], [130.0]], p1: [[131.0]])))), p1: [[s2(p0: [[s0(p0: [[132.0], [133.0], [134.0]], p1: [[135.0]])]], p1: s0(p0: [[136.0], [137.0], [138.0]], p1: [[139.0]]))]])
    let v1: s6 = s6(p0: s3(p0: s2(p0: [[s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0]])]], p1: s0(p0: [[144.0], [145.0], [146.0]], p1: [[147.0]])), p1: s2(p0: [[s0(p0: [[148.0], [149.0], [150.0]], p1: [[151.0]])]], p1: s0(p0: [[152.0], [153.0], [154.0]], p1: [[155.0]]))), p1: [[s1(p0: s0(p0: [[156.0], [157.0], [158.0]], p1: [[159.0]]), p1: [s0(p0: [[160.0], [161.0], [162.0]], p1: [[163.0]])])], [s1(p0: s0(p0: [[164.0], [165.0], [166.0]], p1: [[167.0]]), p1: [s0(p0: [[168.0], [169.0], [170.0]], p1: [[171.0]])])], [s1(p0: s0(p0: [[172.0], [173.0], [174.0]], p1: [[175.0]]), p1: [s0(p0: [[176.0], [177.0], [178.0]], p1: [[179.0]])])]])
    let v2: [s5] = [s5(p0: [s1(p0: s0(p0: [[180.0], [181.0], [182.0]], p1: [[183.0]]), p1: [s0(p0: [[184.0], [185.0], [186.0]], p1: [[187.0]])])], p1: [s2(p0: [[s0(p0: [[188.0], [189.0], [190.0]], p1: [[191.0]])]], p1: s0(p0: [[192.0], [193.0], [194.0]], p1: [[195.0]])), s2(p0: [[s0(p0: [[196.0], [197.0], [198.0]], p1: [[199.0]])]], p1: s0(p0: [[200.0], [201.0], [202.0]], p1: [[203.0]])), s2(p0: [[s0(p0: [[204.0], [205.0], [206.0]], p1: [[207.0]])]], p1: s0(p0: [[208.0], [209.0], [210.0]], p1: [[211.0]]))]), s5(p0: [s1(p0: s0(p0: [[212.0], [213.0], [214.0]], p1: [[215.0]]), p1: [s0(p0: [[216.0], [217.0], [218.0]], p1: [[219.0]])])], p1: [s2(p0: [[s0(p0: [[220.0], [221.0], [222.0]], p1: [[223.0]])]], p1: s0(p0: [[224.0], [225.0], [226.0]], p1: [[227.0]])), s2(p0: [[s0(p0: [[228.0], [229.0], [230.0]], p1: [[231.0]])]], p1: s0(p0: [[232.0], [233.0], [234.0]], p1: [[235.0]])), s2(p0: [[s0(p0: [[236.0], [237.0], [238.0]], p1: [[239.0]])]], p1: s0(p0: [[240.0], [241.0], [242.0]], p1: [[243.0]]))]), s5(p0: [s1(p0: s0(p0: [[244.0], [245.0], [246.0]], p1: [[247.0]]), p1: [s0(p0: [[248.0], [249.0], [250.0]], p1: [[251.0]])])], p1: [s2(p0: [[s0(p0: [[252.0], [253.0], [254.0]], p1: [[255.0]])]], p1: s0(p0: [[256.0], [257.0], [258.0]], p1: [[259.0]])), s2(p0: [[s0(p0: [[260.0], [261.0], [262.0]], p1: [[263.0]])]], p1: s0(p0: [[264.0], [265.0], [266.0]], p1: [[267.0]])), s2(p0: [[s0(p0: [[268.0], [269.0], [270.0]], p1: [[271.0]])]], p1: s0(p0: [[272.0], [273.0], [274.0]], p1: [[275.0]]))])]
    let v3: s9 = s9(p0: s1(p0: s0(p0: [[276.0], [277.0], [278.0]], p1: [[279.0]]), p1: [s0(p0: [[280.0], [281.0], [282.0]], p1: [[283.0]])]), p1: s7(p0: [[s5(p0: [s1(p0: s0(p0: [[284.0], [285.0], [286.0]], p1: [[287.0]]), p1: [s0(p0: [[288.0], [289.0], [290.0]], p1: [[291.0]])])], p1: [s2(p0: [[s0(p0: [[292.0], [293.0], [294.0]], p1: [[295.0]])]], p1: s0(p0: [[296.0], [297.0], [298.0]], p1: [[299.0]])), s2(p0: [[s0(p0: [[300.0], [301.0], [302.0]], p1: [[303.0]])]], p1: s0(p0: [[304.0], [305.0], [306.0]], p1: [[307.0]])), s2(p0: [[s0(p0: [[308.0], [309.0], [310.0]], p1: [[311.0]])]], p1: s0(p0: [[312.0], [313.0], [314.0]], p1: [[315.0]]))])], [s5(p0: [s1(p0: s0(p0: [[316.0], [317.0], [318.0]], p1: [[319.0]]), p1: [s0(p0: [[320.0], [321.0], [322.0]], p1: [[323.0]])])], p1: [s2(p0: [[s0(p0: [[324.0], [325.0], [326.0]], p1: [[327.0]])]], p1: s0(p0: [[328.0], [329.0], [330.0]], p1: [[331.0]])), s2(p0: [[s0(p0: [[332.0], [333.0], [334.0]], p1: [[335.0]])]], p1: s0(p0: [[336.0], [337.0], [338.0]], p1: [[339.0]])), s2(p0: [[s0(p0: [[340.0], [341.0], [342.0]], p1: [[343.0]])]], p1: s0(p0: [[344.0], [345.0], [346.0]], p1: [[347.0]]))])]], p1: s0(p0: [[348.0], [349.0], [350.0]], p1: [[351.0]]), p2: [[s3(p0: s2(p0: [[s0(p0: [[352.0], [353.0], [354.0]], p1: [[355.0]])]], p1: s0(p0: [[356.0], [357.0], [358.0]], p1: [[359.0]])), p1: s2(p0: [[s0(p0: [[360.0], [361.0], [362.0]], p1: [[363.0]])]], p1: s0(p0: [[364.0], [365.0], [366.0]], p1: [[367.0]])))], [s3(p0: s2(p0: [[s0(p0: [[368.0], [369.0], [370.0]], p1: [[371.0]])]], p1: s0(p0: [[372.0], [373.0], [374.0]], p1: [[375.0]])), p1: s2(p0: [[s0(p0: [[376.0], [377.0], [378.0]], p1: [[379.0]])]], p1: s0(p0: [[380.0], [381.0], [382.0]], p1: [[383.0]])))], [s3(p0: s2(p0: [[s0(p0: [[384.0], [385.0], [386.0]], p1: [[387.0]])]], p1: s0(p0: [[388.0], [389.0], [390.0]], p1: [[391.0]])), p1: s2(p0: [[s0(p0: [[392.0], [393.0], [394.0]], p1: [[395.0]])]], p1: s0(p0: [[396.0], [397.0], [398.0]], p1: [[399.0]])))]], p3: s3(p0: s2(p0: [[s0(p0: [[400.0], [401.0], [402.0]], p1: [[403.0]])]], p1: s0(p0: [[404.0], [405.0], [406.0]], p1: [[407.0]])), p1: s2(p0: [[s0(p0: [[408.0], [409.0], [410.0]], p1: [[411.0]])]], p1: s0(p0: [[412.0], [413.0], [414.0]], p1: [[415.0]])))), p2: s1(p0: s0(p0: [[416.0], [417.0], [418.0]], p1: [[419.0]]), p1: [s0(p0: [[420.0], [421.0], [422.0]], p1: [[423.0]])]), p3: s8(p0: s2(p0: [[s0(p0: [[424.0], [425.0], [426.0]], p1: [[427.0]])]], p1: s0(p0: [[428.0], [429.0], [430.0]], p1: [[431.0]])), p1: s4(p0: [s0(p0: [[432.0], [433.0], [434.0]], p1: [[435.0]]), s0(p0: [[436.0], [437.0], [438.0]], p1: [[439.0]])], p1: s2(p0: [[s0(p0: [[440.0], [441.0], [442.0]], p1: [[443.0]])]], p1: s0(p0: [[444.0], [445.0], [446.0]], p1: [[447.0]])))), p4: [[s0(p0: [[448.0], [449.0], [450.0]], p1: [[451.0]])]], p5: s1(p0: s0(p0: [[452.0], [453.0], [454.0]], p1: [[455.0]]), p1: [s0(p0: [[456.0], [457.0], [458.0]], p1: [[459.0]])]), p6: s4(p0: [s0(p0: [[460.0], [461.0], [462.0]], p1: [[463.0]]), s0(p0: [[464.0], [465.0], [466.0]], p1: [[467.0]])], p1: s2(p0: [[s0(p0: [[468.0], [469.0], [470.0]], p1: [[471.0]])]], p1: s0(p0: [[472.0], [473.0], [474.0]], p1: [[475.0]]))))
    let v4: s11 = s11(p0: [s1(p0: s0(p0: [[476.0], [477.0], [478.0]], p1: [[479.0]]), p1: [s0(p0: [[480.0], [481.0], [482.0]], p1: [[483.0]])])], p1: [s2(p0: [[s0(p0: [[484.0], [485.0], [486.0]], p1: [[487.0]])]], p1: s0(p0: [[488.0], [489.0], [490.0]], p1: [[491.0]]))])
    let v5: s0 = s0(p0: [[492.0], [493.0], [494.0]], p1: [[495.0]])
    let v6: Double = 496.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 496.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4, v5, v6)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
