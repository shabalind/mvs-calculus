  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [Double]
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s2 {
    var p0: s1
    var p1: [s0]
  }
  struct s3 {
    var p0: s2
    var p1: [[s1]]
  }
  func f45(_ v0: Double) -> Double {
    var v8: Double = v0
    v8 = v0
    var v5: Double = v8
    var v1: Double = v5
    v1 = v8
    var v7: Double = v1
    var v6: Double = v8
    var v3: Double = v6
    var v10: Double = v3
    var v20: Double = v6
    var v19: Double = v5
    let v17: [Double] = [v5, v0, v19]
    let v12: Double = v17[1]
    let v34: Double = v17[0]
    var v13: [Double] = v17
    let v23: Double = v13[0]
    v13[2] = v7
    var v22: Double = v19
    let v21: [Double] = [v0, v1, v34, v20, v22, v1]
    v13[0] = v34
    var v15: Double = v12
    v20 = v23
    var v38: [Double] = v21
    let v60: [[Double]] = [v38, v38, v38, v21]
    v19 = v0
    var v55: [[Double]] = v60
    let v100: [Double] = v55[1]
    v19 = v10
    var v104: [Double] = v100
    v104[4] = v15
    v38[2] = v22
    let v122: Double = v104[1]
    return v122
  }
  func f43(_ v0: s2) -> s2 {
    var v6: s2 = v0
    v6 = v0
    let v4: [s0] = v6.p1
    v6.p1 = v4
    let v9: [s0] = v0.p1
    var v1: s2 = v6
    v1.p1 = v9
    v1.p1 = v4
    v1.p1 = v9
    v6.p1 = v9
    var v60: s2 = v1
    v1.p1 = v4
    v1 = v60
    let v64: [s0] = v60.p1
    v1.p1 = v64
    return v60
  }
  func f42(_ v0: [s3]) -> [s3] {
    let v5: s3 = v0[0]
    var v4: [s3] = v0
    let v2: s3 = v4[0]
    let v6: s3 = v4[0]
    let v26: s2 = v2.p0
    let v15: s3 = v4[0]
    var v30: [s3] = v4
    v4[0] = v15
    v4[0] = v15
    let v49: s3 = v0[0]
    let v86: s2 = v49.p0
    var v73: [s3] = v30
    var v57: s3 = v5
    v4[0] = v6
    v57.p0 = v86
    v30 = v73
    v4 = v30
    v57.p0 = v26
    v73 = v0
    v73[0] = v57
    var v138: [s3] = v73
    return v138
  }
  func f22(_ v0: s1, _ v1: s3) -> s1 {
    var v2: s3 = v1
    let v6: [s3] = [v2, v2, v2]
    var v4: [s3] = v6
    v4[2] = v2
    let v3: s3 = v4[0]
    let v8: s3 = v6[0]
    var v7: [s3] = v4
    v4[1] = v2
    v4[2] = v2
    let v11: s3 = v6[0]
    v7[1] = v3
    v4[1] = v1
    var v10: [s3] = v4
    v7[0] = v3
    let v28: s3 = v10[2]
    v10[1] = v11
    v10 = v4
    let v15: s2 = v28.p0
    let v19: s2 = f43(v15)
    v10 = v7
    var v27: s3 = v8
    v4[2] = v11
    v4[1] = v8
    let v82: s1 = v19.p0
    v10[0] = v27
    var v142: [s3] = v7
    v2 = v28
    v4 = v142
    return v82
  }
  func f21(_ v0: s1) -> s1 {
    let v6: [s0] = v0.p0
    let v4: [s0] = v0.p1
    var v2: s1 = v0
    v2.p1 = v4
    var v9: [s0] = v4
    v9 = v4
    v2.p1 = v4
    var v10: s1 = v2
    let v16: [s0] = v2.p1
    v2.p1 = v16
    let v26: [s0] = v2.p0
    v10.p1 = v9
    let v27: s0 = v6[1]
    v2.p1 = v9
    v9[1] = v27
    v2.p1 = v4
    v2.p1 = v4
    v2.p0 = v26
    return v10
  }
  func f10(_ v0: [s3]) -> [s3] {
    let v2: [s3] = f42(v0)
    let v9: [s3] = f42(v2)
    var v10: [s3] = v9
    return v10
  }
  @inline(never)
  func f0(_ v0: [[s3]], _ v1: s3, _ v2: Double) -> Double {
    let v8: [s3] = v0[0]
    var v11: [s3] = v8
    let v13: s2 = v1.p0
    let v9: [s3] = f10(v8)
    let v14: [s3] = f10(v11)
    let v17: s3 = v14[0]
    let v16: s1 = v13.p0
    let v15: s3 = v8[0]
    let v12: s1 = f21(v16)
    let v20: [s3] = f42(v9)
    v11[0] = v1
    v11[0] = v1
    let v28: s1 = f22(v12, v17)
    let v23: s3 = v20[0]
    let v46: [s3] = v0[1]
    v11[0] = v1
    v11[0] = v15
    v11[0] = v1
    let v60: [s3] = f42(v46)
    let v48: [s3] = f42(v60)
    let v31: [s0] = v28.p0
    v11[0] = v23
    let v62: [s3] = f42(v48)
    let v56: s0 = v31[1]
    let v116: [[Double]] = v56.p0
    let v58: [Double] = v116[2]
    v11 = v62
    let v134: Double = v58[0]
    let v142: Double = f45(v134)
    return v142
  }
  func benchmark() {
    let v0: [[s3]] = [[s3(p0: s2(p0: s1(p0: [s0(p0: [[0.0], [1.0], [2.0]], p1: [3.0, 4.0]), s0(p0: [[5.0], [6.0], [7.0]], p1: [8.0, 9.0]), s0(p0: [[10.0], [11.0], [12.0]], p1: [13.0, 14.0])], p1: [s0(p0: [[15.0], [16.0], [17.0]], p1: [18.0, 19.0]), s0(p0: [[20.0], [21.0], [22.0]], p1: [23.0, 24.0])]), p1: [s0(p0: [[25.0], [26.0], [27.0]], p1: [28.0, 29.0]), s0(p0: [[30.0], [31.0], [32.0]], p1: [33.0, 34.0])]), p1: [[s1(p0: [s0(p0: [[35.0], [36.0], [37.0]], p1: [38.0, 39.0]), s0(p0: [[40.0], [41.0], [42.0]], p1: [43.0, 44.0]), s0(p0: [[45.0], [46.0], [47.0]], p1: [48.0, 49.0])], p1: [s0(p0: [[50.0], [51.0], [52.0]], p1: [53.0, 54.0]), s0(p0: [[55.0], [56.0], [57.0]], p1: [58.0, 59.0])])], [s1(p0: [s0(p0: [[60.0], [61.0], [62.0]], p1: [63.0, 64.0]), s0(p0: [[65.0], [66.0], [67.0]], p1: [68.0, 69.0]), s0(p0: [[70.0], [71.0], [72.0]], p1: [73.0, 74.0])], p1: [s0(p0: [[75.0], [76.0], [77.0]], p1: [78.0, 79.0]), s0(p0: [[80.0], [81.0], [82.0]], p1: [83.0, 84.0])])], [s1(p0: [s0(p0: [[85.0], [86.0], [87.0]], p1: [88.0, 89.0]), s0(p0: [[90.0], [91.0], [92.0]], p1: [93.0, 94.0]), s0(p0: [[95.0], [96.0], [97.0]], p1: [98.0, 99.0])], p1: [s0(p0: [[100.0], [101.0], [102.0]], p1: [103.0, 104.0]), s0(p0: [[105.0], [106.0], [107.0]], p1: [108.0, 109.0])])]])], [s3(p0: s2(p0: s1(p0: [s0(p0: [[110.0], [111.0], [112.0]], p1: [113.0, 114.0]), s0(p0: [[115.0], [116.0], [117.0]], p1: [118.0, 119.0]), s0(p0: [[120.0], [121.0], [122.0]], p1: [123.0, 124.0])], p1: [s0(p0: [[125.0], [126.0], [127.0]], p1: [128.0, 129.0]), s0(p0: [[130.0], [131.0], [132.0]], p1: [133.0, 134.0])]), p1: [s0(p0: [[135.0], [136.0], [137.0]], p1: [138.0, 139.0]), s0(p0: [[140.0], [141.0], [142.0]], p1: [143.0, 144.0])]), p1: [[s1(p0: [s0(p0: [[145.0], [146.0], [147.0]], p1: [148.0, 149.0]), s0(p0: [[150.0], [151.0], [152.0]], p1: [153.0, 154.0]), s0(p0: [[155.0], [156.0], [157.0]], p1: [158.0, 159.0])], p1: [s0(p0: [[160.0], [161.0], [162.0]], p1: [163.0, 164.0]), s0(p0: [[165.0], [166.0], [167.0]], p1: [168.0, 169.0])])], [s1(p0: [s0(p0: [[170.0], [171.0], [172.0]], p1: [173.0, 174.0]), s0(p0: [[175.0], [176.0], [177.0]], p1: [178.0, 179.0]), s0(p0: [[180.0], [181.0], [182.0]], p1: [183.0, 184.0])], p1: [s0(p0: [[185.0], [186.0], [187.0]], p1: [188.0, 189.0]), s0(p0: [[190.0], [191.0], [192.0]], p1: [193.0, 194.0])])], [s1(p0: [s0(p0: [[195.0], [196.0], [197.0]], p1: [198.0, 199.0]), s0(p0: [[200.0], [201.0], [202.0]], p1: [203.0, 204.0]), s0(p0: [[205.0], [206.0], [207.0]], p1: [208.0, 209.0])], p1: [s0(p0: [[210.0], [211.0], [212.0]], p1: [213.0, 214.0]), s0(p0: [[215.0], [216.0], [217.0]], p1: [218.0, 219.0])])]])]]
    let v1: s3 = s3(p0: s2(p0: s1(p0: [s0(p0: [[220.0], [221.0], [222.0]], p1: [223.0, 224.0]), s0(p0: [[225.0], [226.0], [227.0]], p1: [228.0, 229.0]), s0(p0: [[230.0], [231.0], [232.0]], p1: [233.0, 234.0])], p1: [s0(p0: [[235.0], [236.0], [237.0]], p1: [238.0, 239.0]), s0(p0: [[240.0], [241.0], [242.0]], p1: [243.0, 244.0])]), p1: [s0(p0: [[245.0], [246.0], [247.0]], p1: [248.0, 249.0]), s0(p0: [[250.0], [251.0], [252.0]], p1: [253.0, 254.0])]), p1: [[s1(p0: [s0(p0: [[255.0], [256.0], [257.0]], p1: [258.0, 259.0]), s0(p0: [[260.0], [261.0], [262.0]], p1: [263.0, 264.0]), s0(p0: [[265.0], [266.0], [267.0]], p1: [268.0, 269.0])], p1: [s0(p0: [[270.0], [271.0], [272.0]], p1: [273.0, 274.0]), s0(p0: [[275.0], [276.0], [277.0]], p1: [278.0, 279.0])])], [s1(p0: [s0(p0: [[280.0], [281.0], [282.0]], p1: [283.0, 284.0]), s0(p0: [[285.0], [286.0], [287.0]], p1: [288.0, 289.0]), s0(p0: [[290.0], [291.0], [292.0]], p1: [293.0, 294.0])], p1: [s0(p0: [[295.0], [296.0], [297.0]], p1: [298.0, 299.0]), s0(p0: [[300.0], [301.0], [302.0]], p1: [303.0, 304.0])])], [s1(p0: [s0(p0: [[305.0], [306.0], [307.0]], p1: [308.0, 309.0]), s0(p0: [[310.0], [311.0], [312.0]], p1: [313.0, 314.0]), s0(p0: [[315.0], [316.0], [317.0]], p1: [318.0, 319.0])], p1: [s0(p0: [[320.0], [321.0], [322.0]], p1: [323.0, 324.0]), s0(p0: [[325.0], [326.0], [327.0]], p1: [328.0, 329.0])])]])
    let v2: Double = 330.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 330.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
