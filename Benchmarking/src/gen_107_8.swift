  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  }
  struct s3 {
    var p0: [s0]
    var p1: [s1]
  }
  struct s4 {
    var p0: [s3]
    var p1: [s1]
  }
  struct s6 {
    var p0: s4
    var p1: s4
  }
  struct s11 {
    var p0: [s1]
    var p1: s6
  }
  @inline(never)
  func f0(_ v0: s11, _ v1: Double) -> Double {
    let v4: s6 = v0.p1
    let v3: s4 = v4.p1
    var v6: s4 = v3
    let v5: [s1] = v0.p0
    var v10: [s1] = v5
    var v11: [s1] = v5
    let v25: s1 = v10[0]
    let v9: s1 = v11[0]
    v11[0] = v9
    let v27: s1 = v10[0]
    let v23: [[s0]] = v9.p0
    v11[0] = v27
    var v30: s1 = v9
    v10[0] = v27
    v10[0] = v25
    let v20: s1 = v11[0]
    let v29: [s0] = v23[0]
    v11[0] = v27
    let v22: s0 = v29[0]
    v10[0] = v27
    let v43: [[Double]] = v22.p1
    v30.p1 = v22
    let v81: [s1] = v6.p1
    let v56: [Double] = v43[0]
    var v21: s1 = v30
    v11[0] = v21
    let v83: Double = v56[0]
    v10[0] = v20
    v10[0] = v27
    let v52: s1 = v81[0]
    v11[0] = v9
    v30 = v52
    return v83
  }
  func benchmark() {
    let v0: s11 = s11(p0: [s1(p0: [[s0(p0: [[0.0], [1.0]], p1: [[2.0]])]], p1: s0(p0: [[3.0], [4.0]], p1: [[5.0]]))], p1: s6(p0: s4(p0: [s3(p0: [s0(p0: [[6.0], [7.0]], p1: [[8.0]]), s0(p0: [[9.0], [10.0]], p1: [[11.0]]), s0(p0: [[12.0], [13.0]], p1: [[14.0]])], p1: [s1(p0: [[s0(p0: [[15.0], [16.0]], p1: [[17.0]])]], p1: s0(p0: [[18.0], [19.0]], p1: [[20.0]]))]), s3(p0: [s0(p0: [[21.0], [22.0]], p1: [[23.0]]), s0(p0: [[24.0], [25.0]], p1: [[26.0]]), s0(p0: [[27.0], [28.0]], p1: [[29.0]])], p1: [s1(p0: [[s0(p0: [[30.0], [31.0]], p1: [[32.0]])]], p1: s0(p0: [[33.0], [34.0]], p1: [[35.0]]))]), s3(p0: [s0(p0: [[36.0], [37.0]], p1: [[38.0]]), s0(p0: [[39.0], [40.0]], p1: [[41.0]]), s0(p0: [[42.0], [43.0]], p1: [[44.0]])], p1: [s1(p0: [[s0(p0: [[45.0], [46.0]], p1: [[47.0]])]], p1: s0(p0: [[48.0], [49.0]], p1: [[50.0]]))])], p1: [s1(p0: [[s0(p0: [[51.0], [52.0]], p1: [[53.0]])]], p1: s0(p0: [[54.0], [55.0]], p1: [[56.0]])), s1(p0: [[s0(p0: [[57.0], [58.0]], p1: [[59.0]])]], p1: s0(p0: [[60.0], [61.0]], p1: [[62.0]]))]), p1: s4(p0: [s3(p0: [s0(p0: [[63.0], [64.0]], p1: [[65.0]]), s0(p0: [[66.0], [67.0]], p1: [[68.0]]), s0(p0: [[69.0], [70.0]], p1: [[71.0]])], p1: [s1(p0: [[s0(p0: [[72.0], [73.0]], p1: [[74.0]])]], p1: s0(p0: [[75.0], [76.0]], p1: [[77.0]]))]), s3(p0: [s0(p0: [[78.0], [79.0]], p1: [[80.0]]), s0(p0: [[81.0], [82.0]], p1: [[83.0]]), s0(p0: [[84.0], [85.0]], p1: [[86.0]])], p1: [s1(p0: [[s0(p0: [[87.0], [88.0]], p1: [[89.0]])]], p1: s0(p0: [[90.0], [91.0]], p1: [[92.0]]))]), s3(p0: [s0(p0: [[93.0], [94.0]], p1: [[95.0]]), s0(p0: [[96.0], [97.0]], p1: [[98.0]]), s0(p0: [[99.0], [100.0]], p1: [[101.0]])], p1: [s1(p0: [[s0(p0: [[102.0], [103.0]], p1: [[104.0]])]], p1: s0(p0: [[105.0], [106.0]], p1: [[107.0]]))])], p1: [s1(p0: [[s0(p0: [[108.0], [109.0]], p1: [[110.0]])]], p1: s0(p0: [[111.0], [112.0]], p1: [[113.0]])), s1(p0: [[s0(p0: [[114.0], [115.0]], p1: [[116.0]])]], p1: s0(p0: [[117.0], [118.0]], p1: [[119.0]]))])))
    let v1: Double = 120.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 120.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
