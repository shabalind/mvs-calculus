  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s0
    var p1: s1
  } in
  struct s8 {
    var p0: [s0]
    var p1: s0
  } in
  let f98: (s2) -> s2 = (v0: s2) -> s2 {
    let v7: s0 = v0.p0 in
    let v3: s1 = v0.p1 in
    let v6: s1 = v0.p1 in
    var v5: s1 = v6 in
    v5 = v3 in
    var v4: s1 = v6 in
    v5 = v6 in
    v4.p0 = v7 in
    v4.p0 = v7 in
    v4.p0 = v7 in
    let v8: s0 = v0.p0 in
    v4.p0 = v8 in
    var v1: s0 = v8 in
    var v13: s0 = v1 in
    let v11: s0 = v4.p0 in
    v4.p0 = v11 in
    let v27: s1 = v0.p1 in
    v13 = v8 in
    let v14: s0 = v27.p1 in
    let v24: s0 = v27.p0 in
    let v30: [[Float]] = v8.p1 in
    let v15: [[Float]] = v24.p0 in
    let v19: s2 = s2(v14, v5) in
    var v34: [[Float]] = v15 in
    v1.p1 = v30 in
    var v28: [[Float]] = v30 in
    v5.p1 = v11 in
    v1.p0 = v15 in
    let v73: [Float] = v15[1] in
    v28[0] = v73 in
    v13.p1 = v28 in
    let v65: [Float] = v34[1] in
    v5.p1 = v14 in
    v4.p0 = v13 in
    v34[0] = v73 in
    var v38: [[Float]] = v34 in
    v38[0] = v65 in
    v1.p0 = v38 in
    v19
  } in
  let f84: (s0) -> s0 = (v0: s0) -> s0 {
    let v6: [[Float]] = v0.p1 in
    let v24: [[Float]] = v0.p0 in
    var v10: s0 = v0 in
    v10.p1 = v6 in
    v10.p0 = v24 in
    let v19: [[Float]] = v10.p1 in
    let v30: s1 = s1(v0, v10) in
    let v27: s0 = v30.p1 in
    v10.p1 = v19 in
    let v40: s2 = s2(v27, v30) in
    var v38: s2 = v40 in
    let v23: s2 = f98(v38) in
    v10.p1 = v19 in
    v38.p1 = v30 in
    let v88: s0 = v30.p0 in
    let v78: s1 = v23.p1 in
    let v97: s0 = v78.p0 in
    v38.p0 = v88 in
    v38.p0 = v88 in
    v10.p0 = v24 in
    v97
  } in
  let noinline_f0: (s2, [[s8]], Float) -> Float = (v0: s2, v1: [[s8]], v2: Float) -> Float {
    let v6: [s8] = v1[0] in
    let v4: s8 = v6[0] in
    let v8: s0 = v4.p1 in
    let v3: s0 = f84(v8) in
    let v13: [[Float]] = v3.p1 in
    let v35: [Float] = v13[0] in
    let v49: Float = v35[0] in
    let v71: Float = v49 + v2 in
    let v111: [Float] = [v49, v71] in
    var v87: [Float] = v111 in
    let v83: Float = v87[0] in
    v83
  } in
  fun loop(i: Int, v0: s2, v1: [[s8]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]), s1(s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]]), s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]]))) in
    let v1: [[s8]] = [[s8([s0([[15.0], [16.0]], [[17.0], [18.0], [19.0]])], s0([[20.0], [21.0]], [[22.0], [23.0], [24.0]]))]] in
    let v2: Float = 25.0 in
    let initialResult: Float = 25.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()