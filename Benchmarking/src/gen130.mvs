  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: [s0]
    var p1: s1
  } in
  struct s3 {
    var p0: s2
    var p1: s2
  } in
  struct s7 {
    var p0: [s0]
    var p1: s1
  } in
  let f34: (Float, [[s7]]) -> Float = (v0: Float, v1: [[s7]]) -> Float {
    var v7: Float = v0 in
    v7
  } in
  let noinline_f0: ([s7], s3, Float) -> Float = (v0: [s7], v1: s3, v2: Float) -> Float {
    let v10: s7 = v0[0] in
    let v7: [s0] = v10.p0 in
    let v29: Float = v2 / v2 in
    var v43: Float = v29 in
    var v32: [s7] = v0 in
    let v33: s0 = v7[0] in
    let v45: [[Float]] = v33.p0 in
    let v52: [Float] = v45[1] in
    let v39: [[s7]] = [v32] in
    var v74: [[s7]] = v39 in
    let v101: Float = v52[0] in
    var v182: [[s7]] = v74 in
    let v150: Float = f34(v43, v182) in
    let v158: Float = v101 / v150 in
    v158
  } in
  fun loop(i: Int, v0: [s7], v1: s3, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s7] = [s7([s0([[0.0], [1.0]], [[2.0], [3.0]]), s0([[4.0], [5.0]], [[6.0], [7.0]])], s1(s0([[8.0], [9.0]], [[10.0], [11.0]]), [s0([[12.0], [13.0]], [[14.0], [15.0]]), s0([[16.0], [17.0]], [[18.0], [19.0]])]))] in
    let v1: s3 = s3(s2([s0([[20.0], [21.0]], [[22.0], [23.0]]), s0([[24.0], [25.0]], [[26.0], [27.0]])], s1(s0([[28.0], [29.0]], [[30.0], [31.0]]), [s0([[32.0], [33.0]], [[34.0], [35.0]]), s0([[36.0], [37.0]], [[38.0], [39.0]])])), s2([s0([[40.0], [41.0]], [[42.0], [43.0]]), s0([[44.0], [45.0]], [[46.0], [47.0]])], s1(s0([[48.0], [49.0]], [[50.0], [51.0]]), [s0([[52.0], [53.0]], [[54.0], [55.0]]), s0([[56.0], [57.0]], [[58.0], [59.0]])]))) in
    let v2: Float = 60.0 in
    let initialResult: Float = 60.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()