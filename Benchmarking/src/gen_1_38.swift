  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
    var p2: [s0]
    var p3: [s0]
    var p4: [s0]
  }
  struct s2 {
    var p0: s1
    var p1: s1
  }
  struct s3 {
    var p0: s0
    var p1: s0
  }
  struct s5 {
    var p0: s2
    var p1: [s3]
  }
  func f9(_ v0: s5, _ v1: Double, _ v2: s3) -> s3 {
    let v4: [s3] = v0.p1
    let v17: [[s3]] = [v4]
    let v34: [[[s3]]] = [v17, v17, v17, v17, v17, v17]
    let v47: [[s3]] = v34[3]
    let v90: [s3] = v47[0]
    let v122: s3 = v90[1]
    return v122
  }
  @inline(never)
  func f0(_ v0: [[s3]], _ v1: s5, _ v2: Double) -> Double {
    let v7: [s3] = v0[1]
    let v9: s3 = v7[0]
    let v11: s3 = f9(v1, v2, v9)
    let v19: s0 = v11.p0
    let v78: [[Double]] = v19.p0
    let v109: [Double] = v78[0]
    let v143: Double = v109[0]
    return v143
  }
  func benchmark() {
    let v0: [[s3]] = [[s3(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0], [4.0]]), p1: s0(p0: [[5.0], [6.0]], p1: [[7.0], [8.0], [9.0]]))], [s3(p0: s0(p0: [[10.0], [11.0]], p1: [[12.0], [13.0], [14.0]]), p1: s0(p0: [[15.0], [16.0]], p1: [[17.0], [18.0], [19.0]]))]]
    let v1: s5 = s5(p0: s2(p0: s1(p0: [s0(p0: [[20.0], [21.0]], p1: [[22.0], [23.0], [24.0]]), s0(p0: [[25.0], [26.0]], p1: [[27.0], [28.0], [29.0]])], p1: [s0(p0: [[30.0], [31.0]], p1: [[32.0], [33.0], [34.0]]), s0(p0: [[35.0], [36.0]], p1: [[37.0], [38.0], [39.0]])], p2: [s0(p0: [[40.0], [41.0]], p1: [[42.0], [43.0], [44.0]]), s0(p0: [[45.0], [46.0]], p1: [[47.0], [48.0], [49.0]])], p3: [s0(p0: [[50.0], [51.0]], p1: [[52.0], [53.0], [54.0]]), s0(p0: [[55.0], [56.0]], p1: [[57.0], [58.0], [59.0]])], p4: [s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0], [64.0]])]), p1: s1(p0: [s0(p0: [[65.0], [66.0]], p1: [[67.0], [68.0], [69.0]]), s0(p0: [[70.0], [71.0]], p1: [[72.0], [73.0], [74.0]])], p1: [s0(p0: [[75.0], [76.0]], p1: [[77.0], [78.0], [79.0]]), s0(p0: [[80.0], [81.0]], p1: [[82.0], [83.0], [84.0]])], p2: [s0(p0: [[85.0], [86.0]], p1: [[87.0], [88.0], [89.0]]), s0(p0: [[90.0], [91.0]], p1: [[92.0], [93.0], [94.0]])], p3: [s0(p0: [[95.0], [96.0]], p1: [[97.0], [98.0], [99.0]]), s0(p0: [[100.0], [101.0]], p1: [[102.0], [103.0], [104.0]])], p4: [s0(p0: [[105.0], [106.0]], p1: [[107.0], [108.0], [109.0]])])), p1: [s3(p0: s0(p0: [[110.0], [111.0]], p1: [[112.0], [113.0], [114.0]]), p1: s0(p0: [[115.0], [116.0]], p1: [[117.0], [118.0], [119.0]])), s3(p0: s0(p0: [[120.0], [121.0]], p1: [[122.0], [123.0], [124.0]]), p1: s0(p0: [[125.0], [126.0]], p1: [[127.0], [128.0], [129.0]])), s3(p0: s0(p0: [[130.0], [131.0]], p1: [[132.0], [133.0], [134.0]]), p1: s0(p0: [[135.0], [136.0]], p1: [[137.0], [138.0], [139.0]]))])
    let v2: Double = 140.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 140.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
