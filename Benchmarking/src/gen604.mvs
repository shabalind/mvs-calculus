  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s2 {
    var p0: [Float]
    var p1: s0
  } in
  struct s3 {
    var p0: [s0]
    var p1: s2
  } in
  struct s4 {
    var p0: s2
    var p1: [s3]
  } in
  struct s6 {
    var p0: s2
    var p1: s2
  } in
  let f57: (s4) -> s4 = (v0: s4) -> s4 {
    v0
  } in
  let f10: (s4, s4) -> s4 = (v0: s4, v1: s4) -> s4 {
    let v7: s2 = v0.p0 in
    var v3: s2 = v7 in
    let v9: s2 = v1.p0 in
    var v5: s2 = v3 in
    let v4: s4 = f57(v0) in
    v3 = v9 in
    var v19: s4 = v4 in
    var v17: s4 = v19 in
    let v44: [s3] = v1.p1 in
    v19.p0 = v3 in
    v17.p1 = v44 in
    let v22: s0 = v5.p1 in
    var v23: s0 = v22 in
    var v40: s0 = v22 in
    let v55: [[Float]] = v22.p0 in
    let v36: [[Float]] = v23.p1 in
    v17.p0 = v5 in
    v5.p1 = v40 in
    v40.p0 = v55 in
    let v74: s4 = f57(v17) in
    v40.p1 = v36 in
    v74
  } in
  let noinline_f0: ([[s6]], s4, Float) -> Float = (v0: [[s6]], v1: s4, v2: Float) -> Float {
    var v7: s4 = v1 in
    let v10: s4 = f10(v1, v7) in
    var v8: s4 = v10 in
    let v5: s2 = v8.p0 in
    let v13: s2 = v10.p0 in
    let v23: s0 = v5.p1 in
    v7.p0 = v5 in
    let v28: [[Float]] = v23.p0 in
    var v39: [[Float]] = v28 in
    v7.p0 = v13 in
    v8.p0 = v13 in
    v7.p0 = v5 in
    let v29: [Float] = v39[1] in
    v8.p0 = v5 in
    v7.p0 = v5 in
    let v41: Float = v29[0] in
    v39[1] = v29 in
    v41
  } in
  fun loop(i: Int, v0: [[s6]], v1: s4, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s6]] = [[s6(s2([0.0, 1.0], s0([[2.0], [3.0]], [[4.0], [5.0], [6.0]])), s2([7.0, 8.0], s0([[9.0], [10.0]], [[11.0], [12.0], [13.0]])))]] in
    let v1: s4 = s4(s2([14.0, 15.0], s0([[16.0], [17.0]], [[18.0], [19.0], [20.0]])), [s3([s0([[21.0], [22.0]], [[23.0], [24.0], [25.0]]), s0([[26.0], [27.0]], [[28.0], [29.0], [30.0]]), s0([[31.0], [32.0]], [[33.0], [34.0], [35.0]])], s2([36.0, 37.0], s0([[38.0], [39.0]], [[40.0], [41.0], [42.0]]))), s3([s0([[43.0], [44.0]], [[45.0], [46.0], [47.0]]), s0([[48.0], [49.0]], [[50.0], [51.0], [52.0]]), s0([[53.0], [54.0]], [[55.0], [56.0], [57.0]])], s2([58.0, 59.0], s0([[60.0], [61.0]], [[62.0], [63.0], [64.0]]))), s3([s0([[65.0], [66.0]], [[67.0], [68.0], [69.0]]), s0([[70.0], [71.0]], [[72.0], [73.0], [74.0]]), s0([[75.0], [76.0]], [[77.0], [78.0], [79.0]])], s2([80.0, 81.0], s0([[82.0], [83.0]], [[84.0], [85.0], [86.0]])))]) in
    let v2: Float = 87.0 in
    let initialResult: Float = 87.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()