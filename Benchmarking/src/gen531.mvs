  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: Float
  } in
  struct s2 {
    var p0: [s1]
  } in
  struct s4 {
    var p0: s1
    var p1: s2
  } in
  struct s8 {
    var p0: s0
    var p1: s4
  } in
  let f24: (Float) -> Float = (v0: Float) -> Float {
    let v1: [Float] = [v0] in
    var v5: Float = v0 in
    let v3: Float = v1[0] in
    var v8: [Float] = v1 in
    var v7: [Float] = v8 in
    var v2: [Float] = v8 in
    v2[0] = v0 in
    var v9: Float = v3 in
    let v6: Float = v1[0] in
    v2[0] = v6 in
    var v4: [Float] = v7 in
    let v13: Float = v8[0] in
    var v34: [Float] = v4 in
    var v18: [Float] = v8 in
    let v12: Float = v4[0] in
    var v17: Float = v6 in
    v8[0] = v12 in
    let v23: Float = v34[0] in
    var v16: Float = v13 in
    let v31: Float = v2[0] in
    v34[0] = v13 in
    v8[0] = v5 in
    v18[0] = v31 in
    let v27: Float = v18[0] in
    v8 = v4 in
    v18[0] = v27 in
    let v14: [Float] = [v17, v27] in
    var v28: [Float] = v4 in
    v4[0] = v16 in
    var v40: [Float] = v28 in
    var v37: [Float] = v2 in
    v7[0] = v0 in
    let v22: Float = v18[0] in
    var v59: [Float] = v40 in
    var v79: [Float] = v14 in
    var v41: Float = v22 in
    let v38: Float = v2[0] in
    v8[0] = v6 in
    let v35: Float = v79[0] in
    let v89: Float = v7[0] in
    let v119: [[Float]] = [v59, v37, v40, v34, v7] in
    v7[0] = v27 in
    v7[0] = v35 in
    v4[0] = v89 in
    v2[0] = v41 in
    v37[0] = v38 in
    v34[0] = v27 in
    v34[0] = v23 in
    var v51: [Float] = v14 in
    let v117: [Float] = v119[2] in
    v8[0] = v12 in
    let v63: Float = v51[0] in
    v37[0] = v63 in
    v2[0] = v9 in
    v40[0] = v13 in
    v40[0] = v35 in
    v51[0] = v38 in
    let v125: Float = v117[0] in
    v125
  } in
  let noinline_f0: ([s8], Float) -> Float = (v0: [s8], v1: Float) -> Float {
    let v8: s8 = v0[1] in
    let v2: s0 = v8.p0 in
    let v13: [[Float]] = v2.p0 in
    let v15: [Float] = v13[0] in
    let v73: Float = v15[0] in
    let v45: Float = f24(v73) in
    let v48: Float = f24(v45) in
    v48
  } in
  fun loop(i: Int, v0: [s8], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s8] = [s8(s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]), s4(s1(s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]]), 10.0), s2([s1(s0([[11.0], [12.0]], [[13.0], [14.0], [15.0]]), 16.0)]))), s8(s0([[17.0], [18.0]], [[19.0], [20.0], [21.0]]), s4(s1(s0([[22.0], [23.0]], [[24.0], [25.0], [26.0]]), 27.0), s2([s1(s0([[28.0], [29.0]], [[30.0], [31.0], [32.0]]), 33.0)]))), s8(s0([[34.0], [35.0]], [[36.0], [37.0], [38.0]]), s4(s1(s0([[39.0], [40.0]], [[41.0], [42.0], [43.0]]), 44.0), s2([s1(s0([[45.0], [46.0]], [[47.0], [48.0], [49.0]]), 50.0)])))] in
    let v1: Float = 51.0 in
    let initialResult: Float = 51.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()