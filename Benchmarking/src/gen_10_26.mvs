  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s5 {
    var p0: s1
    var p1: [s1]
    var p2: [[s0]]
  } in
  let f43: (Float) -> Float = (v0: Float) -> Float {
    var v3: Float = v0 in
    var v7: Float = v0 in
    let v6: [Float] = [v0, v0, v7, v3, v3, v0] in
    var v2: [Float] = v6 in
    let v9: Float = v2[1] in
    v9
  } in
  let f9: (Float) -> Float = (v0: Float) -> Float {
    var v12: Float = v0 in
    var v8: Float = v12 in
    v8
  } in
  let noinline_f0: ([[s1]], s5, Float) -> Float = (v0: [[s1]], v1: s5, v2: Float) -> Float {
    var v11: Float = v2 in
    var v48: Float = v2 in
    let v28: Float = f9(v11) in
    var v29: Float = v11 in
    let v39: Float = f9(v28) in
    let v70: Float = f43(v39) in
    let v56: Float = v48 - v70 in
    v11 = v29 in
    v56
  } in
  fun loop(i: Int, v0: [[s1]], v1: s5, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s1]] = [[s1(s0([[0.0]], [[1.0]]), [s0([[2.0]], [[3.0]]), s0([[4.0]], [[5.0]])])], [s1(s0([[6.0]], [[7.0]]), [s0([[8.0]], [[9.0]]), s0([[10.0]], [[11.0]])])]] in
    let v1: s5 = s5(s1(s0([[12.0]], [[13.0]]), [s0([[14.0]], [[15.0]]), s0([[16.0]], [[17.0]])]), [s1(s0([[18.0]], [[19.0]]), [s0([[20.0]], [[21.0]]), s0([[22.0]], [[23.0]])])], [[s0([[24.0]], [[25.0]])], [s0([[26.0]], [[27.0]])]]) in
    let v2: Float = 28.0 in
    let initialResult: Float = 28.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()