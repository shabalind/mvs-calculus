  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s0
    var p1: s1
  } in
  let f21: (s0) -> s0 = (v0: s0) -> s0 {
    var v4: s0 = v0 in
    var v6: s0 = v4 in
    let v2: [[Float]] = v0.p0 in
    var v1: [[Float]] = v2 in
    var v3: [[Float]] = v1 in
    let v7: [Float] = v3[0] in
    var v5: [Float] = v7 in
    let v9: [[Float]] = v0.p1 in
    v1[0] = v5 in
    let v11: [[Float]] = v6.p1 in
    v1[0] = v5 in
    v1[0] = v7 in
    v4.p1 = v11 in
    let v16: Float = v7[0] in
    v4.p1 = v9 in
    let v20: [[Float]] = v4.p0 in
    v1[0] = v7 in
    v5[0] = v16 in
    v4.p0 = v1 in
    let v23: [Float] = v20[0] in
    v3[0] = v5 in
    v3[0] = v23 in
    v4
  } in
  let f11: (s0) -> s0 = (v0: s0) -> s0 {
    let v18: s0 = f21(v0) in
    let v13: s0 = f21(v18) in
    v13
  } in
  let f4: (s0) -> s0 = (v0: s0) -> s0 {
    let v7: s0 = f21(v0) in
    var v2: s0 = v7 in
    var v6: s0 = v0 in
    let v5: [s0] = [v7, v6, v7, v7, v2] in
    let v4: s0 = v5[0] in
    let v3: s0 = v5[1] in
    let v13: [[Float]] = v2.p1 in
    v6.p0 = v13 in
    var v9: [s0] = v5 in
    let v19: s0 = v9[0] in
    let v15: [[Float]] = v4.p0 in
    let v28: s0 = v9[3] in
    let v11: [[s0]] = [v5, v5, v9, v9, v9] in
    let v33: [[Float]] = v28.p0 in
    v2.p0 = v33 in
    let v17: s0 = f11(v4) in
    var v38: [[s0]] = v11 in
    v38[2] = v9 in
    let v34: s0 = f21(v4) in
    let v30: [[Float]] = v19.p0 in
    var v27: s0 = v3 in
    var v37: [s0] = v5 in
    let v53: s0 = f21(v7) in
    let v51: [[Float]] = v27.p1 in
    v27.p0 = v30 in
    let v36: s0 = v37[2] in
    v2 = v7 in
    v37[3] = v28 in
    let v104: [[Float]] = v36.p1 in
    v6.p1 = v104 in
    let v56: s0 = f11(v4) in
    v2 = v7 in
    v6.p0 = v51 in
    v37[1] = v34 in
    let v73: [s0] = v38[2] in
    v6.p1 = v15 in
    let v144: [[Float]] = v17.p1 in
    let v170: [[Float]] = v53.p0 in
    v9 = v73 in
    let v87: s0 = f21(v56) in
    let v109: [s0] = v11[1] in
    v27.p1 = v51 in
    let v118: s0 = v109[3] in
    v27.p0 = v170 in
    var v92: [[Float]] = v144 in
    v9[0] = v6 in
    v9[0] = v87 in
    v2.p0 = v92 in
    v118
  } in
  let noinline_f0: ([s0], s2, Float) -> Float = (v0: [s0], v1: s2, v2: Float) -> Float {
    let v6: s1 = v1.p1 in
    let v8: s0 = v6.p1 in
    let v15: s0 = f4(v8) in
    let v35: [[Float]] = v15.p1 in
    let v64: [Float] = v35[0] in
    let v70: Float = v64[0] in
    v70
  } in
  fun loop(i: Int, v0: [s0], v1: s2, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0]], [[1.0]]), s0([[2.0]], [[3.0]]), s0([[4.0]], [[5.0]])] in
    let v1: s2 = s2(s0([[6.0]], [[7.0]]), s1(s0([[8.0]], [[9.0]]), s0([[10.0]], [[11.0]]))) in
    let v2: Float = 12.0 in
    let initialResult: Float = 12.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()