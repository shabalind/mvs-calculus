  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
    var p2: [[s0]]
  } in
  struct s2 {
    var p0: s1
    var p1: s1
  } in
  struct s3 {
    var p0: s0
    var p1: s2
  } in
  struct s6 {
    var p0: s0
    var p1: s2
  } in
  struct s11 {
    var p0: s2
    var p1: s2
  } in
  let f21: (s3) -> s3 = (v0: s3) -> s3 {
    let v5: s2 = v0.p1 in
    var v6: s2 = v5 in
    let v4: s1 = v6.p1 in
    let v2: s2 = s2(v4, v4) in
    let v7: [[s0]] = v4.p2 in
    v6 = v5 in
    v6.p0 = v4 in
    v6.p1 = v4 in
    let v9: [s0] = v7[0] in
    let v12: s11 = s11(v5, v2) in
    v6.p0 = v4 in
    let v16: s0 = v9[0] in
    v6.p0 = v4 in
    let v11: s2 = v0.p1 in
    v6.p1 = v4 in
    let v21: [s0] = [v16, v16, v16] in
    v6.p1 = v4 in
    v6.p1 = v4 in
    var v15: s3 = v0 in
    let v19: s1 = v2.p1 in
    v15.p1 = v11 in
    v6.p0 = v19 in
    let v30: s2 = v12.p1 in
    let v28: s0 = v21[0] in
    let v35: s1 = v30.p0 in
    v15.p1 = v6 in
    let v53: s0 = v21[2] in
    v15.p1 = v6 in
    v6.p0 = v19 in
    var v41: s3 = v15 in
    v41.p0 = v53 in
    v15.p1 = v11 in
    let v58: s0 = v21[1] in
    v6.p1 = v35 in
    v41.p0 = v28 in
    var v82: s3 = v41 in
    v41.p0 = v58 in
    v82.p0 = v16 in
    v82
  } in
  let noinline_f0: ([s6], [[s3]], Float) -> Float = (v0: [s6], v1: [[s3]], v2: Float) -> Float {
    let v5: [s3] = v1[2] in
    let v4: s3 = v5[0] in
    let v3: s3 = f21(v4) in
    let v8: s0 = v3.p0 in
    let v14: [[Float]] = v8.p0 in
    let v20: [Float] = v14[0] in
    var v23: [Float] = v20 in
    let v24: Float = v23[0] in
    v24
  } in
  fun loop(i: Int, v0: [s6], v1: [[s3]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s6] = [s6(s0([[0.0], [1.0]], [[2.0], [3.0]]), s2(s1(s0([[4.0], [5.0]], [[6.0], [7.0]]), [[s0([[8.0], [9.0]], [[10.0], [11.0]])]], [[s0([[12.0], [13.0]], [[14.0], [15.0]])], [s0([[16.0], [17.0]], [[18.0], [19.0]])]]), s1(s0([[20.0], [21.0]], [[22.0], [23.0]]), [[s0([[24.0], [25.0]], [[26.0], [27.0]])]], [[s0([[28.0], [29.0]], [[30.0], [31.0]])], [s0([[32.0], [33.0]], [[34.0], [35.0]])]])))] in
    let v1: [[s3]] = [[s3(s0([[36.0], [37.0]], [[38.0], [39.0]]), s2(s1(s0([[40.0], [41.0]], [[42.0], [43.0]]), [[s0([[44.0], [45.0]], [[46.0], [47.0]])]], [[s0([[48.0], [49.0]], [[50.0], [51.0]])], [s0([[52.0], [53.0]], [[54.0], [55.0]])]]), s1(s0([[56.0], [57.0]], [[58.0], [59.0]]), [[s0([[60.0], [61.0]], [[62.0], [63.0]])]], [[s0([[64.0], [65.0]], [[66.0], [67.0]])], [s0([[68.0], [69.0]], [[70.0], [71.0]])]])))], [s3(s0([[72.0], [73.0]], [[74.0], [75.0]]), s2(s1(s0([[76.0], [77.0]], [[78.0], [79.0]]), [[s0([[80.0], [81.0]], [[82.0], [83.0]])]], [[s0([[84.0], [85.0]], [[86.0], [87.0]])], [s0([[88.0], [89.0]], [[90.0], [91.0]])]]), s1(s0([[92.0], [93.0]], [[94.0], [95.0]]), [[s0([[96.0], [97.0]], [[98.0], [99.0]])]], [[s0([[100.0], [101.0]], [[102.0], [103.0]])], [s0([[104.0], [105.0]], [[106.0], [107.0]])]])))], [s3(s0([[108.0], [109.0]], [[110.0], [111.0]]), s2(s1(s0([[112.0], [113.0]], [[114.0], [115.0]]), [[s0([[116.0], [117.0]], [[118.0], [119.0]])]], [[s0([[120.0], [121.0]], [[122.0], [123.0]])], [s0([[124.0], [125.0]], [[126.0], [127.0]])]]), s1(s0([[128.0], [129.0]], [[130.0], [131.0]]), [[s0([[132.0], [133.0]], [[134.0], [135.0]])]], [[s0([[136.0], [137.0]], [[138.0], [139.0]])], [s0([[140.0], [141.0]], [[142.0], [143.0]])]])))]] in
    let v2: Float = 144.0 in
    let initialResult: Float = 144.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()