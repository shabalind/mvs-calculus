  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: s0
    var p2: [[s0]]
    var p3: s0
    var p4: [s0]
  }
  struct s6 {
    var p0: [s1]
    var p1: s1
  }
  struct s9 {
    var p0: s6
    var p1: s0
  }
  func f35(_ v0: Double) -> Double {
    var v2: Double = v0
    var v1: Double = v0
    let v6: Double = v2 - v0
    var v8: Double = v0
    var v5: Double = v6
    var v13: Double = v1
    let v7: [Double] = [v13, v0, v5]
    var v10: [Double] = v7
    var v22: Double = v0
    v10[0] = v5
    var v14: [Double] = v10
    v10[0] = v0
    v10[1] = v13
    v14[2] = v2
    v10[0] = v8
    v14 = v7
    v10[2] = v22
    v10[1] = v5
    var v17: [Double] = v7
    let v31: Double = v14[1]
    let v36: Double = v17[2]
    var v58: [Double] = v7
    v2 = v0
    let v23: Double = v58[1]
    let v26: Double = v5 * v23
    v13 = v36
    v58[1] = v31
    return v26
  }
  @inline(never)
  func f0(_ v0: s9, _ v1: Double) -> Double {
    var v7: s9 = v0
    let v5: [s9] = [v7, v7, v0, v7, v0, v0, v7]
    let v9: s9 = v5[1]
    let v3: s0 = v7.p1
    let v8: [[Double]] = v3.p0
    let v14: Double = f35(v1)
    let v10: [[s9]] = [v5]
    let v21: Double = f35(v14)
    let v13: [s9] = v10[0]
    let v11: s6 = v7.p0
    var v17: [s9] = v5
    v7.p1 = v3
    v17 = v13
    v17[0] = v9
    let v16: s9 = v17[0]
    let v26: s6 = v16.p0
    let v25: Double = f35(v21)
    v7.p0 = v26
    let v35: [Double] = v8[1]
    let v42: Double = v35[0]
    let v24: s9 = v5[2]
    let v18: Double = f35(v42)
    let v49: s1 = v11.p1
    let v33: s9 = v5[1]
    var v82: [s9] = v5
    let v44: s9 = v13[6]
    let v57: Double = v25 * v18
    let v40: s9 = v82[1]
    let v47: s0 = v40.p1
    let v43: Double = f35(v57)
    v17[6] = v24
    var v38: s9 = v44
    let v70: s6 = v44.p0
    v38.p0 = v11
    v7.p0 = v70
    v82[5] = v33
    v17[3] = v38
    var v131: s1 = v49
    var v91: s9 = v7
    v82[4] = v91
    let v125: s0 = v49.p3
    v91.p1 = v47
    v38.p1 = v125
    let v176: [s0] = v131.p0
    v91.p0 = v11
    v17[5] = v91
    let v207: s0 = v176[0]
    v7.p1 = v207
    let v150: Double = f35(v43)
    v131.p4 = v176
    return v150
  }
  func benchmark() {
    let v0: s9 = s9(p0: s6(p0: [s1(p0: [s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0], [5.0]]), s0(p0: [[6.0], [7.0], [8.0]], p1: [[9.0], [10.0], [11.0]])], p1: s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0], [16.0], [17.0]]), p2: [[s0(p0: [[18.0], [19.0], [20.0]], p1: [[21.0], [22.0], [23.0]])]], p3: s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0], [28.0], [29.0]]), p4: [s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0], [35.0]]), s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0], [40.0], [41.0]])]), s1(p0: [s0(p0: [[42.0], [43.0], [44.0]], p1: [[45.0], [46.0], [47.0]]), s0(p0: [[48.0], [49.0], [50.0]], p1: [[51.0], [52.0], [53.0]])], p1: s0(p0: [[54.0], [55.0], [56.0]], p1: [[57.0], [58.0], [59.0]]), p2: [[s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0], [64.0], [65.0]])]], p3: s0(p0: [[66.0], [67.0], [68.0]], p1: [[69.0], [70.0], [71.0]]), p4: [s0(p0: [[72.0], [73.0], [74.0]], p1: [[75.0], [76.0], [77.0]]), s0(p0: [[78.0], [79.0], [80.0]], p1: [[81.0], [82.0], [83.0]])]), s1(p0: [s0(p0: [[84.0], [85.0], [86.0]], p1: [[87.0], [88.0], [89.0]]), s0(p0: [[90.0], [91.0], [92.0]], p1: [[93.0], [94.0], [95.0]])], p1: s0(p0: [[96.0], [97.0], [98.0]], p1: [[99.0], [100.0], [101.0]]), p2: [[s0(p0: [[102.0], [103.0], [104.0]], p1: [[105.0], [106.0], [107.0]])]], p3: s0(p0: [[108.0], [109.0], [110.0]], p1: [[111.0], [112.0], [113.0]]), p4: [s0(p0: [[114.0], [115.0], [116.0]], p1: [[117.0], [118.0], [119.0]]), s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0], [124.0], [125.0]])])], p1: s1(p0: [s0(p0: [[126.0], [127.0], [128.0]], p1: [[129.0], [130.0], [131.0]]), s0(p0: [[132.0], [133.0], [134.0]], p1: [[135.0], [136.0], [137.0]])], p1: s0(p0: [[138.0], [139.0], [140.0]], p1: [[141.0], [142.0], [143.0]]), p2: [[s0(p0: [[144.0], [145.0], [146.0]], p1: [[147.0], [148.0], [149.0]])]], p3: s0(p0: [[150.0], [151.0], [152.0]], p1: [[153.0], [154.0], [155.0]]), p4: [s0(p0: [[156.0], [157.0], [158.0]], p1: [[159.0], [160.0], [161.0]]), s0(p0: [[162.0], [163.0], [164.0]], p1: [[165.0], [166.0], [167.0]])])), p1: s0(p0: [[168.0], [169.0], [170.0]], p1: [[171.0], [172.0], [173.0]]))
    let v1: Double = 174.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 174.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
