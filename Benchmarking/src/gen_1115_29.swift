  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  }
  struct s2 {
    var p0: s0
    var p1: s1
  }
  struct s3 {
    var p0: s1
    var p1: [s1]
  }
  struct s4 {
    var p0: [s3]
    var p1: [s2]
  }
  func f72(_ v0: s2, _ v1: s2) -> s2 {
    let v6: s1 = v1.p1
    let v18: [[s0]] = v6.p0
    let v15: [s0] = v18[0]
    var v8: s1 = v6
    let v24: s0 = v15[0]
    let v17: s2 = s2(p0: v24, p1: v8)
    return v17
  }
  @inline(never)
  func f0(_ v0: s2, _ v1: s4, _ v2: Double) -> Double {
    let v5: [s2] = v1.p1
    let v6: s2 = v5[0]
    let v3: s2 = f72(v6, v0)
    var v13: Double = v2
    let v19: s1 = v3.p1
    let v38: s0 = v19.p1
    let v21: Double = v13 - v13
    let v27: [[Double]] = v38.p0
    let v35: [Double] = [v2, v21, v13, v13, v2]
    let v41: [Double] = v27[0]
    var v47: [[Double]] = v27
    v47[0] = v41
    v47[0] = v41
    let v74: Double = v35[2]
    let v56: [Double] = v47[0]
    let v131: Double = v56[0]
    let v391: Double = v74 * v131
    return v391
  }
  func benchmark() {
    let v0: s2 = s2(p0: s0(p0: [[0.0]], p1: [[1.0], [2.0], [3.0]]), p1: s1(p0: [[s0(p0: [[4.0]], p1: [[5.0], [6.0], [7.0]])], [s0(p0: [[8.0]], p1: [[9.0], [10.0], [11.0]])]], p1: s0(p0: [[12.0]], p1: [[13.0], [14.0], [15.0]])))
    let v1: s4 = s4(p0: [s3(p0: s1(p0: [[s0(p0: [[16.0]], p1: [[17.0], [18.0], [19.0]])], [s0(p0: [[20.0]], p1: [[21.0], [22.0], [23.0]])]], p1: s0(p0: [[24.0]], p1: [[25.0], [26.0], [27.0]])), p1: [s1(p0: [[s0(p0: [[28.0]], p1: [[29.0], [30.0], [31.0]])], [s0(p0: [[32.0]], p1: [[33.0], [34.0], [35.0]])]], p1: s0(p0: [[36.0]], p1: [[37.0], [38.0], [39.0]])), s1(p0: [[s0(p0: [[40.0]], p1: [[41.0], [42.0], [43.0]])], [s0(p0: [[44.0]], p1: [[45.0], [46.0], [47.0]])]], p1: s0(p0: [[48.0]], p1: [[49.0], [50.0], [51.0]])), s1(p0: [[s0(p0: [[52.0]], p1: [[53.0], [54.0], [55.0]])], [s0(p0: [[56.0]], p1: [[57.0], [58.0], [59.0]])]], p1: s0(p0: [[60.0]], p1: [[61.0], [62.0], [63.0]]))]), s3(p0: s1(p0: [[s0(p0: [[64.0]], p1: [[65.0], [66.0], [67.0]])], [s0(p0: [[68.0]], p1: [[69.0], [70.0], [71.0]])]], p1: s0(p0: [[72.0]], p1: [[73.0], [74.0], [75.0]])), p1: [s1(p0: [[s0(p0: [[76.0]], p1: [[77.0], [78.0], [79.0]])], [s0(p0: [[80.0]], p1: [[81.0], [82.0], [83.0]])]], p1: s0(p0: [[84.0]], p1: [[85.0], [86.0], [87.0]])), s1(p0: [[s0(p0: [[88.0]], p1: [[89.0], [90.0], [91.0]])], [s0(p0: [[92.0]], p1: [[93.0], [94.0], [95.0]])]], p1: s0(p0: [[96.0]], p1: [[97.0], [98.0], [99.0]])), s1(p0: [[s0(p0: [[100.0]], p1: [[101.0], [102.0], [103.0]])], [s0(p0: [[104.0]], p1: [[105.0], [106.0], [107.0]])]], p1: s0(p0: [[108.0]], p1: [[109.0], [110.0], [111.0]]))]), s3(p0: s1(p0: [[s0(p0: [[112.0]], p1: [[113.0], [114.0], [115.0]])], [s0(p0: [[116.0]], p1: [[117.0], [118.0], [119.0]])]], p1: s0(p0: [[120.0]], p1: [[121.0], [122.0], [123.0]])), p1: [s1(p0: [[s0(p0: [[124.0]], p1: [[125.0], [126.0], [127.0]])], [s0(p0: [[128.0]], p1: [[129.0], [130.0], [131.0]])]], p1: s0(p0: [[132.0]], p1: [[133.0], [134.0], [135.0]])), s1(p0: [[s0(p0: [[136.0]], p1: [[137.0], [138.0], [139.0]])], [s0(p0: [[140.0]], p1: [[141.0], [142.0], [143.0]])]], p1: s0(p0: [[144.0]], p1: [[145.0], [146.0], [147.0]])), s1(p0: [[s0(p0: [[148.0]], p1: [[149.0], [150.0], [151.0]])], [s0(p0: [[152.0]], p1: [[153.0], [154.0], [155.0]])]], p1: s0(p0: [[156.0]], p1: [[157.0], [158.0], [159.0]]))])], p1: [s2(p0: s0(p0: [[160.0]], p1: [[161.0], [162.0], [163.0]]), p1: s1(p0: [[s0(p0: [[164.0]], p1: [[165.0], [166.0], [167.0]])], [s0(p0: [[168.0]], p1: [[169.0], [170.0], [171.0]])]], p1: s0(p0: [[172.0]], p1: [[173.0], [174.0], [175.0]])))])
    let v2: Double = 176.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 176.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
