  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  func f19(_ v0: s1, _ v1: Double, _ v2: s0, _ v3: [s0]) -> Double {
    let v4: [s0] = v0.p1
    let v6: s0 = v4[1]
    let v39: [[Double]] = v6.p0
    let v20: [Double] = v39[1]
    var v38: Double = v1
    var v42: [Double] = v20
    let v90: Double = v42[0]
    let v80: Double = v38 + v90
    return v80
  }
  @inline(never)
  func f0(_ v0: s0, _ v1: [[s1]], _ v2: s1, _ v3: s1, _ v4: [[s0]], _ v5: s1, _ v6: [[s0]], _ v7: [[s0]], _ v8: Double) -> Double {
    let v10: [s0] = v2.p1
    let v12: s0 = v10[1]
    let v15: [s0] = v7[0]
    let v37: Double = f19(v2, v8, v12, v15)
    return v37
  }
  func benchmark() {
    let v0: s0 = s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0]])
    let v1: [[s1]] = [[s1(p0: s0(p0: [[5.0], [6.0], [7.0]], p1: [[8.0], [9.0]]), p1: [s0(p0: [[10.0], [11.0], [12.0]], p1: [[13.0], [14.0]]), s0(p0: [[15.0], [16.0], [17.0]], p1: [[18.0], [19.0]]), s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0], [24.0]])])]]
    let v2: s1 = s1(p0: s0(p0: [[25.0], [26.0], [27.0]], p1: [[28.0], [29.0]]), p1: [s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0]]), s0(p0: [[35.0], [36.0], [37.0]], p1: [[38.0], [39.0]]), s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0], [44.0]])])
    let v3: s1 = s1(p0: s0(p0: [[45.0], [46.0], [47.0]], p1: [[48.0], [49.0]]), p1: [s0(p0: [[50.0], [51.0], [52.0]], p1: [[53.0], [54.0]]), s0(p0: [[55.0], [56.0], [57.0]], p1: [[58.0], [59.0]]), s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0], [64.0]])])
    let v4: [[s0]] = [[s0(p0: [[65.0], [66.0], [67.0]], p1: [[68.0], [69.0]])], [s0(p0: [[70.0], [71.0], [72.0]], p1: [[73.0], [74.0]])]]
    let v5: s1 = s1(p0: s0(p0: [[75.0], [76.0], [77.0]], p1: [[78.0], [79.0]]), p1: [s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0], [84.0]]), s0(p0: [[85.0], [86.0], [87.0]], p1: [[88.0], [89.0]]), s0(p0: [[90.0], [91.0], [92.0]], p1: [[93.0], [94.0]])])
    let v6: [[s0]] = [[s0(p0: [[95.0], [96.0], [97.0]], p1: [[98.0], [99.0]])], [s0(p0: [[100.0], [101.0], [102.0]], p1: [[103.0], [104.0]])], [s0(p0: [[105.0], [106.0], [107.0]], p1: [[108.0], [109.0]])]]
    let v7: [[s0]] = [[s0(p0: [[110.0], [111.0], [112.0]], p1: [[113.0], [114.0]])]]
    let v8: Double = 115.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 115.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4, v5, v6, v7, v8)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
