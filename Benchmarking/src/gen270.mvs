  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: (s0, s0, Float) -> Float = (v0: s0, v1: s0, v2: Float) -> Float {
    let v3: [[Float]] = v0.p1 in
    var v10: Float = v2 in
    var v23: Float = v2 in
    let v9: [Float] = v3[0] in
    let v24: Float = v9[0] in
    v10 = v24 in
    let v49: [Float] = [v24, v10, v2, v10, v10] in
    var v35: [Float] = v49 in
    v10 = v24 in
    let v36: Float = v9[0] in
    var v67: [Float] = v35 in
    var v34: Float = v36 in
    var v29: Float = v36 in
    let v55: Float = v29 + v10 in
    var v44: Float = v34 in
    v35[2] = v44 in
    let v64: Float = v49[3] in
    v67[1] = v55 in
    v67[1] = v23 in
    let v93: Float = v67[2] in
    v35[2] = v64 in
    v93
  } in
  fun loop(i: Int, v0: s0, v1: s0, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0]], [[1.0]]) in
    let v1: s0 = s0([[2.0]], [[3.0]]) in
    let v2: Float = 4.0 in
    let initialResult: Float = 4.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()