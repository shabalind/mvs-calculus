  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s3 {
    var p0: s1
    var p1: [s0]
  } in
  let f35: (s1) -> s1 = (v0: s1) -> s1 {
    var v1: s1 = v0 in
    var v2: s1 = v0 in
    let v7: [s0] = v0.p1 in
    let v4: s0 = v7[0] in
    let v3: s0 = v7[0] in
    var v9: s1 = v1 in
    v1.p1 = v7 in
    var v8: s1 = v0 in
    var v16: s0 = v4 in
    v9.p0 = v16 in
    v9 = v0 in
    var v12: s1 = v1 in
    v9 = v2 in
    v2.p0 = v3 in
    let v22: [[Float]] = v3.p0 in
    let v28: [s0] = v12.p1 in
    v9.p1 = v28 in
    let v17: [[Float]] = v3.p1 in
    let v34: s0 = v7[0] in
    v1.p0 = v34 in
    let v52: s0 = v9.p0 in
    let v64: s0 = v1.p0 in
    v16.p1 = v17 in
    v12.p0 = v64 in
    v12.p0 = v34 in
    v16.p0 = v22 in
    v9 = v8 in
    v9.p0 = v64 in
    v16 = v52 in
    v9
  } in
  let f20: (s1) -> s1 = (v0: s1) -> s1 {
    let v1: s1 = f35(v0) in
    let v5: s1 = f35(v1) in
    let v11: s1 = f35(v0) in
    let v3: s1 = f35(v1) in
    var v9: s1 = v11 in
    let v6: [s1] = [v1, v3, v5] in
    let v4: [s0] = v9.p1 in
    let v10: s1 = f35(v5) in
    let v2: [s1] = [v10, v3, v3, v11, v11] in
    let v14: s1 = f35(v11) in
    var v22: [s0] = v4 in
    let v43: s1 = v6[2] in
    v9.p1 = v22 in
    var v31: [s1] = v2 in
    v31[4] = v43 in
    let v42: s1 = f35(v14) in
    let v59: s1 = v31[2] in
    let v147: s1 = f35(v59) in
    let v49: s0 = v42.p0 in
    v9.p1 = v4 in
    v22[0] = v49 in
    let v98: s0 = v147.p0 in
    let v226: s1 = s1(v98, v22) in
    v226
  } in
  let f3: (s1) -> s1 = (v0: s1) -> s1 {
    let v3: s1 = f20(v0) in
    let v4: s1 = f20(v0) in
    var v2: s1 = v0 in
    let v8: [s0] = v3.p1 in
    let v6: s0 = v0.p0 in
    let v1: s1 = f35(v0) in
    let v5: s1 = s1(v6, v8) in
    let v7: [s1] = [v3, v0, v5, v1, v1, v5, v0] in
    let v10: [s0] = v2.p1 in
    let v13: s1 = f20(v2) in
    v2.p1 = v10 in
    let v15: s1 = f35(v13) in
    var v21: [s1] = v7 in
    v21[3] = v2 in
    v2.p1 = v10 in
    var v14: [s1] = v21 in
    v21[0] = v0 in
    let v32: [s0] = v1.p1 in
    let v22: s1 = v14[1] in
    var v27: s1 = v22 in
    v21[1] = v15 in
    let v56: s1 = v14[2] in
    v21 = v7 in
    v14[6] = v4 in
    v2.p0 = v6 in
    var v67: [s1] = v14 in
    var v98: [s1] = v67 in
    let v47: [s0] = v22.p1 in
    v27.p1 = v8 in
    v2.p1 = v32 in
    let v51: s1 = f20(v27) in
    v27.p1 = v10 in
    var v145: [s1] = v98 in
    v14[1] = v56 in
    v21[5] = v1 in
    v14 = v145 in
    v2.p1 = v47 in
    v51
  } in
  let noinline_f0: ([s0], s1, Float) -> Float = (v0: [s0], v1: s1, v2: Float) -> Float {
    let v5: s0 = v1.p0 in
    let v6: s0 = v1.p0 in
    let v7: Float = v2 + v2 in
    var v9: s1 = v1 in
    let v17: s0 = v0[2] in
    let v10: s3 = s3(v9, v0) in
    v9.p0 = v6 in
    var v11: s0 = v5 in
    v9.p0 = v17 in
    var v30: [s0] = v0 in
    let v16: s0 = v30[0] in
    v9.p0 = v16 in
    let v19: s1 = v10.p0 in
    let v41: Float = v7 + v7 in
    v30[2] = v16 in
    let v24: s0 = v19.p0 in
    v9.p0 = v5 in
    let v29: s1 = f3(v9) in
    v30[1] = v6 in
    let v26: [s0] = v29.p1 in
    v30[2] = v11 in
    var v32: Float = v2 in
    var v39: Float = v2 in
    let v60: [[s0]] = [v30, v30, v30, v30, v0, v0] in
    var v44: [[s0]] = v60 in
    let v50: [[Float]] = v24.p0 in
    let v85: s0 = v30[2] in
    let v54: [s0] = v44[5] in
    v11.p0 = v50 in
    let v74: Float = v2 / v41 in
    let v149: s0 = v26[0] in
    let v51: [[s0]] = [v0, v0, v54, v30, v0, v0, v0] in
    v44[2] = v54 in
    let v33: [s0] = v51[4] in
    v9.p0 = v85 in
    let v121: [Float] = v50[0] in
    v44[1] = v30 in
    let v89: [s0] = v51[6] in
    let v61: Float = v121[0] in
    var v75: Float = v61 in
    let v168: [[Float]] = v5.p1 in
    v9.p0 = v16 in
    v9.p0 = v149 in
    let v108: s0 = s0(v50, v168) in
    let v115: Float = v74 / v32 in
    v30 = v33 in
    let v65: Float = v75 - v39 in
    v9.p0 = v108 in
    v44[0] = v89 in
    let v197: Float = v65 / v115 in
    v197
  } in
  fun loop(i: Int, v0: [s0], v1: s1, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]]), s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]]), s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]])] in
    let v1: s1 = s1(s0([[15.0], [16.0], [17.0]], [[18.0], [19.0]]), [s0([[20.0], [21.0], [22.0]], [[23.0], [24.0]])]) in
    let v2: Float = 25.0 in
    let initialResult: Float = 25.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()