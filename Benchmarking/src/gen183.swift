  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s2 {
    var p0: [[s0]]
    var p1: [s0]
  }
  struct s3 {
    var p0: s0
  }
  struct s4 {
    var p0: [[s0]]
    var p1: s2
  }
  struct s7 {
    var p0: [s4]
    var p1: [[s4]]
  }
  struct s8 {
    var p0: [s7]
  }
  @inline(never)
  func f0(_ v0: [[s3]], _ v1: s0, _ v2: [[s3]], _ v3: s8, _ v4: Double) -> Double {
    var v6: Double = v4
    let v14: [[Double]] = v1.p1
    var v10: [[Double]] = v14
    let v19: [[Double]] = v1.p0
    let v21: [Double] = v19[0]
    v10[0] = v21
    v10[0] = v21
    let v22: [Double] = v10[0]
    let v50: Double = v22[0]
    let v56: Double = v50 + v6
    let v51: Double = v6 + v56
    return v51
  }
  func benchmark() {
    let v0: [[s3]] = [[s3(p0: s0(p0: [[0.0]], p1: [[1.0]]))]]
    let v1: s0 = s0(p0: [[2.0]], p1: [[3.0]])
    let v2: [[s3]] = [[s3(p0: s0(p0: [[4.0]], p1: [[5.0]]))]]
    let v3: s8 = s8(p0: [s7(p0: [s4(p0: [[s0(p0: [[6.0]], p1: [[7.0]])], [s0(p0: [[8.0]], p1: [[9.0]])]], p1: s2(p0: [[s0(p0: [[10.0]], p1: [[11.0]])]], p1: [s0(p0: [[12.0]], p1: [[13.0]])])), s4(p0: [[s0(p0: [[14.0]], p1: [[15.0]])], [s0(p0: [[16.0]], p1: [[17.0]])]], p1: s2(p0: [[s0(p0: [[18.0]], p1: [[19.0]])]], p1: [s0(p0: [[20.0]], p1: [[21.0]])])), s4(p0: [[s0(p0: [[22.0]], p1: [[23.0]])], [s0(p0: [[24.0]], p1: [[25.0]])]], p1: s2(p0: [[s0(p0: [[26.0]], p1: [[27.0]])]], p1: [s0(p0: [[28.0]], p1: [[29.0]])]))], p1: [[s4(p0: [[s0(p0: [[30.0]], p1: [[31.0]])], [s0(p0: [[32.0]], p1: [[33.0]])]], p1: s2(p0: [[s0(p0: [[34.0]], p1: [[35.0]])]], p1: [s0(p0: [[36.0]], p1: [[37.0]])]))], [s4(p0: [[s0(p0: [[38.0]], p1: [[39.0]])], [s0(p0: [[40.0]], p1: [[41.0]])]], p1: s2(p0: [[s0(p0: [[42.0]], p1: [[43.0]])]], p1: [s0(p0: [[44.0]], p1: [[45.0]])]))], [s4(p0: [[s0(p0: [[46.0]], p1: [[47.0]])], [s0(p0: [[48.0]], p1: [[49.0]])]], p1: s2(p0: [[s0(p0: [[50.0]], p1: [[51.0]])]], p1: [s0(p0: [[52.0]], p1: [[53.0]])]))]]), s7(p0: [s4(p0: [[s0(p0: [[54.0]], p1: [[55.0]])], [s0(p0: [[56.0]], p1: [[57.0]])]], p1: s2(p0: [[s0(p0: [[58.0]], p1: [[59.0]])]], p1: [s0(p0: [[60.0]], p1: [[61.0]])])), s4(p0: [[s0(p0: [[62.0]], p1: [[63.0]])], [s0(p0: [[64.0]], p1: [[65.0]])]], p1: s2(p0: [[s0(p0: [[66.0]], p1: [[67.0]])]], p1: [s0(p0: [[68.0]], p1: [[69.0]])])), s4(p0: [[s0(p0: [[70.0]], p1: [[71.0]])], [s0(p0: [[72.0]], p1: [[73.0]])]], p1: s2(p0: [[s0(p0: [[74.0]], p1: [[75.0]])]], p1: [s0(p0: [[76.0]], p1: [[77.0]])]))], p1: [[s4(p0: [[s0(p0: [[78.0]], p1: [[79.0]])], [s0(p0: [[80.0]], p1: [[81.0]])]], p1: s2(p0: [[s0(p0: [[82.0]], p1: [[83.0]])]], p1: [s0(p0: [[84.0]], p1: [[85.0]])]))], [s4(p0: [[s0(p0: [[86.0]], p1: [[87.0]])], [s0(p0: [[88.0]], p1: [[89.0]])]], p1: s2(p0: [[s0(p0: [[90.0]], p1: [[91.0]])]], p1: [s0(p0: [[92.0]], p1: [[93.0]])]))], [s4(p0: [[s0(p0: [[94.0]], p1: [[95.0]])], [s0(p0: [[96.0]], p1: [[97.0]])]], p1: s2(p0: [[s0(p0: [[98.0]], p1: [[99.0]])]], p1: [s0(p0: [[100.0]], p1: [[101.0]])]))]])])
    let v4: Double = 102.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 102.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
