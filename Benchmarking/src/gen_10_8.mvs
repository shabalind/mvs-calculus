  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: (s0, s0, Float) -> Float = (v0: s0, v1: s0, v2: Float) -> Float {
    let v10: [[Float]] = v1.p1 in
    let v21: [Float] = v10[1] in
    let v42: Float = v21[0] in
    var v18: [Float] = v21 in
    let v41: Float = v18[0] in
    let v48: Float = v41 - v42 in
    var v103: [Float] = v21 in
    var v64: Float = v48 in
    let v100: Float = v103[0] in
    v103[0] = v41 in
    let v133: Float = v100 - v64 in
    v133
  } in
  fun loop(i: Int, v0: s0, v1: s0, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0]], [[1.0], [2.0]]) in
    let v1: s0 = s0([[3.0]], [[4.0], [5.0]]) in
    let v2: Float = 6.0 in
    let initialResult: Float = 6.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()