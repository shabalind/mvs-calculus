  struct s0 {
    var p0: [[Float]]
    var p1: [Float]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
    var p2: [[s0]]
    var p3: s0
  } in
  struct s2 {
    var p0: s0
    var p1: s0
  } in
  struct s6 {
    var p0: [[s0]]
    var p1: [s2]
  } in
  let f27: (Float) -> Float = (v0: Float) -> Float {
    var v3: Float = v0 in
    var v5: Float = v0 in
    var v2: Float = v3 in
    v5 = v3 in
    let v13: Float = v0 + v2 in
    var v6: Float = v3 in
    var v8: Float = v13 in
    let v7: Float = v2 * v0 in
    var v1: Float = v6 in
    var v10: Float = v3 in
    var v11: Float = v0 in
    v2 = v13 in
    var v4: Float = v5 in
    var v14: Float = v4 in
    let v9: [Float] = [v7, v7, v3, v10, v11] in
    var v12: [Float] = v9 in
    var v17: [Float] = v12 in
    var v23: Float = v1 in
    v17[3] = v6 in
    v17[0] = v23 in
    var v42: Float = v0 in
    v10 = v42 in
    v17[2] = v8 in
    let v27: Float = v17[1] in
    v17[3] = v14 in
    v27
  } in
  let noinline_f0: (s6, [s1], Float) -> Float = (v0: s6, v1: [s1], v2: Float) -> Float {
    var v8: Float = v2 in
    let v30: Float = v8 / v8 in
    let v41: Float = f27(v2) in
    let v68: Float = v30 + v41 in
    var v182: Float = v41 in
    let v175: Float = v68 * v182 in
    v175
  } in
  fun loop(i: Int, v0: s6, v1: [s1], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s6 = s6([[s0([[0.0]], [1.0])]], [s2(s0([[2.0]], [3.0]), s0([[4.0]], [5.0]))]) in
    let v1: [s1] = [s1(s0([[6.0]], [7.0]), s0([[8.0]], [9.0]), [[s0([[10.0]], [11.0])], [s0([[12.0]], [13.0])], [s0([[14.0]], [15.0])]], s0([[16.0]], [17.0])), s1(s0([[18.0]], [19.0]), s0([[20.0]], [21.0]), [[s0([[22.0]], [23.0])], [s0([[24.0]], [25.0])], [s0([[26.0]], [27.0])]], s0([[28.0]], [29.0])), s1(s0([[30.0]], [31.0]), s0([[32.0]], [33.0]), [[s0([[34.0]], [35.0])], [s0([[36.0]], [37.0])], [s0([[38.0]], [39.0])]], s0([[40.0]], [41.0]))] in
    let v2: Float = 42.0 in
    let initialResult: Float = 42.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()