  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: [s1]
    var p1: [Float]
  } in
  struct s3 {
    var p0: [s2]
    var p1: s2
  } in
  let f51: (s2) -> s2 = (v0: s2) -> s2 {
    var v4: s2 = v0 in
    var v2: s2 = v0 in
    let v8: [Float] = v4.p1 in
    let v12: [s1] = v0.p0 in
    v4.p1 = v8 in
    let v3: [Float] = v4.p1 in
    v2.p1 = v3 in
    v2.p1 = v8 in
    let v7: s1 = v12[1] in
    v4.p1 = v8 in
    let v11: [Float] = v4.p1 in
    let v18: [Float] = v0.p1 in
    let v10: [s1] = v4.p0 in
    v2.p1 = v18 in
    let v17: [Float] = v4.p1 in
    v2.p1 = v3 in
    let v20: Float = v11[1] in
    v2.p0 = v10 in
    v2.p1 = v3 in
    let v22: [s1] = v2.p0 in
    v4.p1 = v11 in
    var v35: Float = v20 in
    let v24: s1 = v10[1] in
    v4.p1 = v3 in
    let v60: Float = v35 / v35 in
    v4.p0 = v12 in
    v2.p1 = v17 in
    v2.p1 = v11 in
    let v42: [Float] = v4.p1 in
    v4.p0 = v22 in
    var v37: [s1] = v22 in
    var v25: [Float] = v8 in
    let v49: s2 = s2(v37, v11) in
    v2.p1 = v42 in
    v4.p1 = v25 in
    v37[0] = v24 in
    v4 = v49 in
    v2.p1 = v18 in
    let v46: [s1] = v0.p0 in
    v25[0] = v60 in
    v2.p0 = v46 in
    v4.p0 = v46 in
    v4.p1 = v18 in
    v37[1] = v7 in
    v4.p1 = v17 in
    v2
  } in
  let f40: (s3) -> s3 = (v0: s3) -> s3 {
    let v4: s2 = v0.p1 in
    var v3: s2 = v4 in
    let v1: s2 = f51(v4) in
    var v7: s3 = v0 in
    var v6: s2 = v4 in
    var v2: s3 = v7 in
    v7.p1 = v6 in
    let v9: s2 = f51(v1) in
    let v15: [Float] = v9.p1 in
    var v18: s3 = v2 in
    v18.p1 = v3 in
    v3.p1 = v15 in
    v7 = v18 in
    v7
  } in
  let f36: (s2) -> s2 = (v0: s2) -> s2 {
    let v7: s2 = f51(v0) in
    let v6: s2 = f51(v0) in
    var v1: s2 = v0 in
    let v2: [s1] = v1.p0 in
    let v8: s2 = f51(v1) in
    let v4: s2 = f51(v6) in
    let v10: [Float] = v7.p1 in
    var v3: [Float] = v10 in
    let v5: [s1] = v6.p0 in
    let v9: [Float] = v7.p1 in
    var v12: [s1] = v2 in
    v1.p0 = v12 in
    let v13: Float = v10[1] in
    var v18: Float = v13 in
    v3[1] = v18 in
    v1.p1 = v9 in
    let v17: s2 = f51(v8) in
    v3[0] = v13 in
    v1.p0 = v5 in
    v1.p0 = v2 in
    let v15: s2 = f51(v17) in
    v3[1] = v13 in
    v1.p0 = v5 in
    var v34: [Float] = v3 in
    v1.p1 = v3 in
    var v29: s2 = v4 in
    v29 = v15 in
    let v30: [Float] = v17.p1 in
    v29.p1 = v30 in
    v1.p1 = v34 in
    v1.p0 = v2 in
    v29
  } in
  let f29: (s3) -> s3 = (v0: s3) -> s3 {
    var v1: s3 = v0 in
    let v8: s3 = f40(v0) in
    let v6: s3 = f40(v8) in
    let v3: [s2] = v8.p0 in
    let v2: [s2] = v6.p0 in
    let v4: s2 = v2[0] in
    let v10: s2 = f36(v4) in
    let v20: s2 = f36(v10) in
    var v33: s3 = v1 in
    v33.p1 = v20 in
    v33.p1 = v4 in
    v33.p0 = v3 in
    v33
  } in
  let noinline_f0: (s3, Float) -> Float = (v0: s3, v1: Float) -> Float {
    let v4: s3 = f29(v0) in
    let v7: s2 = v4.p1 in
    let v11: [Float] = v7.p1 in
    let v19: [[Float]] = [v11, v11, v11, v11, v11, v11] in
    let v57: [Float] = v19[1] in
    var v28: [[Float]] = v19 in
    let v46: [Float] = v28[3] in
    v28[4] = v57 in
    let v108: Float = v46[0] in
    v108
  } in
  fun loop(i: Int, v0: s3, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3([s2([s1(s0([[0.0], [1.0]], [[2.0]]), [s0([[3.0], [4.0]], [[5.0]]), s0([[6.0], [7.0]], [[8.0]]), s0([[9.0], [10.0]], [[11.0]])]), s1(s0([[12.0], [13.0]], [[14.0]]), [s0([[15.0], [16.0]], [[17.0]]), s0([[18.0], [19.0]], [[20.0]]), s0([[21.0], [22.0]], [[23.0]])])], [24.0, 25.0])], s2([s1(s0([[26.0], [27.0]], [[28.0]]), [s0([[29.0], [30.0]], [[31.0]]), s0([[32.0], [33.0]], [[34.0]]), s0([[35.0], [36.0]], [[37.0]])]), s1(s0([[38.0], [39.0]], [[40.0]]), [s0([[41.0], [42.0]], [[43.0]]), s0([[44.0], [45.0]], [[46.0]]), s0([[47.0], [48.0]], [[49.0]])])], [50.0, 51.0])) in
    let v1: Float = 52.0 in
    let initialResult: Float = 52.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()