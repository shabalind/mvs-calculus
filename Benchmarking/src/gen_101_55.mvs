  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  let f1: (Float, [s1]) -> Float = (v0: Float, v1: [s1]) -> Float {
    v0
  } in
  let noinline_f0: ([s1], Float) -> Float = (v0: [s1], v1: Float) -> Float {
    let v4: Float = f1(v1, v0) in
    let v6: [[s1]] = [v0, v0, v0, v0] in
    var v3: Float = v4 in
    var v9: Float = v3 in
    var v22: [[s1]] = v6 in
    v22[3] = v0 in
    v22[0] = v0 in
    let v31: Float = f1(v9, v0) in
    let v68: [s1] = v22[2] in
    var v43: [[s1]] = v22 in
    let v40: Float = f1(v31, v68) in
    v22 = v43 in
    v40
  } in
  fun loop(i: Int, v0: [s1], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1(s0([[0.0], [1.0]], [[2.0], [3.0]], [[4.0]]), [s0([[5.0], [6.0]], [[7.0], [8.0]], [[9.0]]), s0([[10.0], [11.0]], [[12.0], [13.0]], [[14.0]])]), s1(s0([[15.0], [16.0]], [[17.0], [18.0]], [[19.0]]), [s0([[20.0], [21.0]], [[22.0], [23.0]], [[24.0]]), s0([[25.0], [26.0]], [[27.0], [28.0]], [[29.0]])])] in
    let v1: Float = 30.0 in
    let initialResult: Float = 30.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()