  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: ([s0], [s0], Float) -> Float = (v0: [s0], v1: [s0], v2: Float) -> Float {
    let v9: s0 = v1[0] in
    let v5: [[Float]] = v9.p1 in
    var v14: [[Float]] = v5 in
    let v17: [Float] = v14[2] in
    var v16: [[Float]] = v14 in
    let v41: Float = v17[0] in
    let v35: Float = v41 / v2 in
    v16[1] = v17 in
    let v56: Float = v35 / v35 in
    let v64: [Float] = v16[0] in
    v14[1] = v64 in
    v56
  } in
  fun loop(i: Int, v0: [s0], v1: [s0], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]]), s0([[6.0], [7.0], [8.0]], [[9.0], [10.0], [11.0]])] in
    let v1: [s0] = [s0([[12.0], [13.0], [14.0]], [[15.0], [16.0], [17.0]]), s0([[18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0]])] in
    let v2: Float = 24.0 in
    let initialResult: Float = 24.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()