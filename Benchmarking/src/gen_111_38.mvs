  let noinline_f0: ([[Float]], Float) -> Float = (v0: [[Float]], v1: Float) -> Float {
    var v7: Float = v1 in
    let v5: [Float] = [v1, v7, v1] in
    v7 = v1 in
    var v6: [Float] = v5 in
    v6[0] = v1 in
    v6 = v5 in
    let v13: Float = v6[1] in
    v6[2] = v7 in
    v6[1] = v13 in
    v6[1] = v1 in
    var v14: [Float] = v6 in
    let v22: Float = v5[2] in
    let v20: Float = v6[1] in
    v6[0] = v1 in
    let v34: Float = v6[0] in
    v6[2] = v34 in
    v7 = v20 in
    var v46: [Float] = v14 in
    v6[0] = v22 in
    let v62: Float = v46[0] in
    v62
  } in
  fun loop(i: Int, v0: [[Float]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0]] in
    let v1: Float = 1.0 in
    let initialResult: Float = 1.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()