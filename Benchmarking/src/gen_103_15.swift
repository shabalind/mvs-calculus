  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: Double
  }
  struct s2 {
    var p0: s0
    var p1: [s0]
    var p2: [[s1]]
  }
  struct s3 {
    var p0: [[s1]]
    var p1: s0
  }
  struct s4 {
    var p0: s1
    var p1: s0
    var p2: [s1]
  }
  struct s5 {
    var p0: s1
    var p1: [[s3]]
  }
  struct s6 {
    var p0: s4
    var p1: [[s1]]
  }
  struct s8 {
    var p0: s5
    var p1: [s5]
  }
  struct s10 {
    var p0: [[s3]]
    var p1: s3
  }
  struct s11 {
    var p0: s6
    var p1: [[s0]]
  }
  struct s12 {
    var p0: s8
    var p1: [s10]
  }
  struct s13 {
    var p0: s11
    var p1: s1
  }
  func f63(_ v0: s0) -> s0 {
    var v5: s0 = v0
    let v9: [[Double]] = v0.p0
    var v6: s0 = v5
    let v15: [[Double]] = v0.p0
    v5.p0 = v15
    v6.p0 = v9
    v5.p0 = v15
    v5 = v0
    return v6
  }
  @inline(never)
  func f0(_ v0: s5, _ v1: [s12], _ v2: [[s13]], _ v3: s2, _ v4: Double) -> Double {
    let v8: s1 = v0.p0
    var v11: Double = v4
    let v9: s0 = v8.p0
    let v17: s0 = f63(v9)
    let v23: [[Double]] = v17.p0
    let v28: [Double] = v23[1]
    let v27: Double = v28[0]
    var v46: Double = v27
    let v57: [[Double]] = v17.p0
    let v167: Double = v46 * v11
    let v52: [Double] = v57[0]
    let v118: Double = v52[0]
    let v287: Double = v118 - v167
    return v287
  }
  func benchmark() {
    let v0: s5 = s5(p0: s1(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0]]), p1: 3.0), p1: [[s3(p0: [[s1(p0: s0(p0: [[4.0], [5.0]], p1: [[6.0]]), p1: 7.0)], [s1(p0: s0(p0: [[8.0], [9.0]], p1: [[10.0]]), p1: 11.0)], [s1(p0: s0(p0: [[12.0], [13.0]], p1: [[14.0]]), p1: 15.0)]], p1: s0(p0: [[16.0], [17.0]], p1: [[18.0]]))], [s3(p0: [[s1(p0: s0(p0: [[19.0], [20.0]], p1: [[21.0]]), p1: 22.0)], [s1(p0: s0(p0: [[23.0], [24.0]], p1: [[25.0]]), p1: 26.0)], [s1(p0: s0(p0: [[27.0], [28.0]], p1: [[29.0]]), p1: 30.0)]], p1: s0(p0: [[31.0], [32.0]], p1: [[33.0]]))]])
    let v1: [s12] = [s12(p0: s8(p0: s5(p0: s1(p0: s0(p0: [[34.0], [35.0]], p1: [[36.0]]), p1: 37.0), p1: [[s3(p0: [[s1(p0: s0(p0: [[38.0], [39.0]], p1: [[40.0]]), p1: 41.0)], [s1(p0: s0(p0: [[42.0], [43.0]], p1: [[44.0]]), p1: 45.0)], [s1(p0: s0(p0: [[46.0], [47.0]], p1: [[48.0]]), p1: 49.0)]], p1: s0(p0: [[50.0], [51.0]], p1: [[52.0]]))], [s3(p0: [[s1(p0: s0(p0: [[53.0], [54.0]], p1: [[55.0]]), p1: 56.0)], [s1(p0: s0(p0: [[57.0], [58.0]], p1: [[59.0]]), p1: 60.0)], [s1(p0: s0(p0: [[61.0], [62.0]], p1: [[63.0]]), p1: 64.0)]], p1: s0(p0: [[65.0], [66.0]], p1: [[67.0]]))]]), p1: [s5(p0: s1(p0: s0(p0: [[68.0], [69.0]], p1: [[70.0]]), p1: 71.0), p1: [[s3(p0: [[s1(p0: s0(p0: [[72.0], [73.0]], p1: [[74.0]]), p1: 75.0)], [s1(p0: s0(p0: [[76.0], [77.0]], p1: [[78.0]]), p1: 79.0)], [s1(p0: s0(p0: [[80.0], [81.0]], p1: [[82.0]]), p1: 83.0)]], p1: s0(p0: [[84.0], [85.0]], p1: [[86.0]]))], [s3(p0: [[s1(p0: s0(p0: [[87.0], [88.0]], p1: [[89.0]]), p1: 90.0)], [s1(p0: s0(p0: [[91.0], [92.0]], p1: [[93.0]]), p1: 94.0)], [s1(p0: s0(p0: [[95.0], [96.0]], p1: [[97.0]]), p1: 98.0)]], p1: s0(p0: [[99.0], [100.0]], p1: [[101.0]]))]]), s5(p0: s1(p0: s0(p0: [[102.0], [103.0]], p1: [[104.0]]), p1: 105.0), p1: [[s3(p0: [[s1(p0: s0(p0: [[106.0], [107.0]], p1: [[108.0]]), p1: 109.0)], [s1(p0: s0(p0: [[110.0], [111.0]], p1: [[112.0]]), p1: 113.0)], [s1(p0: s0(p0: [[114.0], [115.0]], p1: [[116.0]]), p1: 117.0)]], p1: s0(p0: [[118.0], [119.0]], p1: [[120.0]]))], [s3(p0: [[s1(p0: s0(p0: [[121.0], [122.0]], p1: [[123.0]]), p1: 124.0)], [s1(p0: s0(p0: [[125.0], [126.0]], p1: [[127.0]]), p1: 128.0)], [s1(p0: s0(p0: [[129.0], [130.0]], p1: [[131.0]]), p1: 132.0)]], p1: s0(p0: [[133.0], [134.0]], p1: [[135.0]]))]])]), p1: [s10(p0: [[s3(p0: [[s1(p0: s0(p0: [[136.0], [137.0]], p1: [[138.0]]), p1: 139.0)], [s1(p0: s0(p0: [[140.0], [141.0]], p1: [[142.0]]), p1: 143.0)], [s1(p0: s0(p0: [[144.0], [145.0]], p1: [[146.0]]), p1: 147.0)]], p1: s0(p0: [[148.0], [149.0]], p1: [[150.0]]))], [s3(p0: [[s1(p0: s0(p0: [[151.0], [152.0]], p1: [[153.0]]), p1: 154.0)], [s1(p0: s0(p0: [[155.0], [156.0]], p1: [[157.0]]), p1: 158.0)], [s1(p0: s0(p0: [[159.0], [160.0]], p1: [[161.0]]), p1: 162.0)]], p1: s0(p0: [[163.0], [164.0]], p1: [[165.0]]))], [s3(p0: [[s1(p0: s0(p0: [[166.0], [167.0]], p1: [[168.0]]), p1: 169.0)], [s1(p0: s0(p0: [[170.0], [171.0]], p1: [[172.0]]), p1: 173.0)], [s1(p0: s0(p0: [[174.0], [175.0]], p1: [[176.0]]), p1: 177.0)]], p1: s0(p0: [[178.0], [179.0]], p1: [[180.0]]))]], p1: s3(p0: [[s1(p0: s0(p0: [[181.0], [182.0]], p1: [[183.0]]), p1: 184.0)], [s1(p0: s0(p0: [[185.0], [186.0]], p1: [[187.0]]), p1: 188.0)], [s1(p0: s0(p0: [[189.0], [190.0]], p1: [[191.0]]), p1: 192.0)]], p1: s0(p0: [[193.0], [194.0]], p1: [[195.0]]))), s10(p0: [[s3(p0: [[s1(p0: s0(p0: [[196.0], [197.0]], p1: [[198.0]]), p1: 199.0)], [s1(p0: s0(p0: [[200.0], [201.0]], p1: [[202.0]]), p1: 203.0)], [s1(p0: s0(p0: [[204.0], [205.0]], p1: [[206.0]]), p1: 207.0)]], p1: s0(p0: [[208.0], [209.0]], p1: [[210.0]]))], [s3(p0: [[s1(p0: s0(p0: [[211.0], [212.0]], p1: [[213.0]]), p1: 214.0)], [s1(p0: s0(p0: [[215.0], [216.0]], p1: [[217.0]]), p1: 218.0)], [s1(p0: s0(p0: [[219.0], [220.0]], p1: [[221.0]]), p1: 222.0)]], p1: s0(p0: [[223.0], [224.0]], p1: [[225.0]]))], [s3(p0: [[s1(p0: s0(p0: [[226.0], [227.0]], p1: [[228.0]]), p1: 229.0)], [s1(p0: s0(p0: [[230.0], [231.0]], p1: [[232.0]]), p1: 233.0)], [s1(p0: s0(p0: [[234.0], [235.0]], p1: [[236.0]]), p1: 237.0)]], p1: s0(p0: [[238.0], [239.0]], p1: [[240.0]]))]], p1: s3(p0: [[s1(p0: s0(p0: [[241.0], [242.0]], p1: [[243.0]]), p1: 244.0)], [s1(p0: s0(p0: [[245.0], [246.0]], p1: [[247.0]]), p1: 248.0)], [s1(p0: s0(p0: [[249.0], [250.0]], p1: [[251.0]]), p1: 252.0)]], p1: s0(p0: [[253.0], [254.0]], p1: [[255.0]]))), s10(p0: [[s3(p0: [[s1(p0: s0(p0: [[256.0], [257.0]], p1: [[258.0]]), p1: 259.0)], [s1(p0: s0(p0: [[260.0], [261.0]], p1: [[262.0]]), p1: 263.0)], [s1(p0: s0(p0: [[264.0], [265.0]], p1: [[266.0]]), p1: 267.0)]], p1: s0(p0: [[268.0], [269.0]], p1: [[270.0]]))], [s3(p0: [[s1(p0: s0(p0: [[271.0], [272.0]], p1: [[273.0]]), p1: 274.0)], [s1(p0: s0(p0: [[275.0], [276.0]], p1: [[277.0]]), p1: 278.0)], [s1(p0: s0(p0: [[279.0], [280.0]], p1: [[281.0]]), p1: 282.0)]], p1: s0(p0: [[283.0], [284.0]], p1: [[285.0]]))], [s3(p0: [[s1(p0: s0(p0: [[286.0], [287.0]], p1: [[288.0]]), p1: 289.0)], [s1(p0: s0(p0: [[290.0], [291.0]], p1: [[292.0]]), p1: 293.0)], [s1(p0: s0(p0: [[294.0], [295.0]], p1: [[296.0]]), p1: 297.0)]], p1: s0(p0: [[298.0], [299.0]], p1: [[300.0]]))]], p1: s3(p0: [[s1(p0: s0(p0: [[301.0], [302.0]], p1: [[303.0]]), p1: 304.0)], [s1(p0: s0(p0: [[305.0], [306.0]], p1: [[307.0]]), p1: 308.0)], [s1(p0: s0(p0: [[309.0], [310.0]], p1: [[311.0]]), p1: 312.0)]], p1: s0(p0: [[313.0], [314.0]], p1: [[315.0]])))]), s12(p0: s8(p0: s5(p0: s1(p0: s0(p0: [[316.0], [317.0]], p1: [[318.0]]), p1: 319.0), p1: [[s3(p0: [[s1(p0: s0(p0: [[320.0], [321.0]], p1: [[322.0]]), p1: 323.0)], [s1(p0: s0(p0: [[324.0], [325.0]], p1: [[326.0]]), p1: 327.0)], [s1(p0: s0(p0: [[328.0], [329.0]], p1: [[330.0]]), p1: 331.0)]], p1: s0(p0: [[332.0], [333.0]], p1: [[334.0]]))], [s3(p0: [[s1(p0: s0(p0: [[335.0], [336.0]], p1: [[337.0]]), p1: 338.0)], [s1(p0: s0(p0: [[339.0], [340.0]], p1: [[341.0]]), p1: 342.0)], [s1(p0: s0(p0: [[343.0], [344.0]], p1: [[345.0]]), p1: 346.0)]], p1: s0(p0: [[347.0], [348.0]], p1: [[349.0]]))]]), p1: [s5(p0: s1(p0: s0(p0: [[350.0], [351.0]], p1: [[352.0]]), p1: 353.0), p1: [[s3(p0: [[s1(p0: s0(p0: [[354.0], [355.0]], p1: [[356.0]]), p1: 357.0)], [s1(p0: s0(p0: [[358.0], [359.0]], p1: [[360.0]]), p1: 361.0)], [s1(p0: s0(p0: [[362.0], [363.0]], p1: [[364.0]]), p1: 365.0)]], p1: s0(p0: [[366.0], [367.0]], p1: [[368.0]]))], [s3(p0: [[s1(p0: s0(p0: [[369.0], [370.0]], p1: [[371.0]]), p1: 372.0)], [s1(p0: s0(p0: [[373.0], [374.0]], p1: [[375.0]]), p1: 376.0)], [s1(p0: s0(p0: [[377.0], [378.0]], p1: [[379.0]]), p1: 380.0)]], p1: s0(p0: [[381.0], [382.0]], p1: [[383.0]]))]]), s5(p0: s1(p0: s0(p0: [[384.0], [385.0]], p1: [[386.0]]), p1: 387.0), p1: [[s3(p0: [[s1(p0: s0(p0: [[388.0], [389.0]], p1: [[390.0]]), p1: 391.0)], [s1(p0: s0(p0: [[392.0], [393.0]], p1: [[394.0]]), p1: 395.0)], [s1(p0: s0(p0: [[396.0], [397.0]], p1: [[398.0]]), p1: 399.0)]], p1: s0(p0: [[400.0], [401.0]], p1: [[402.0]]))], [s3(p0: [[s1(p0: s0(p0: [[403.0], [404.0]], p1: [[405.0]]), p1: 406.0)], [s1(p0: s0(p0: [[407.0], [408.0]], p1: [[409.0]]), p1: 410.0)], [s1(p0: s0(p0: [[411.0], [412.0]], p1: [[413.0]]), p1: 414.0)]], p1: s0(p0: [[415.0], [416.0]], p1: [[417.0]]))]])]), p1: [s10(p0: [[s3(p0: [[s1(p0: s0(p0: [[418.0], [419.0]], p1: [[420.0]]), p1: 421.0)], [s1(p0: s0(p0: [[422.0], [423.0]], p1: [[424.0]]), p1: 425.0)], [s1(p0: s0(p0: [[426.0], [427.0]], p1: [[428.0]]), p1: 429.0)]], p1: s0(p0: [[430.0], [431.0]], p1: [[432.0]]))], [s3(p0: [[s1(p0: s0(p0: [[433.0], [434.0]], p1: [[435.0]]), p1: 436.0)], [s1(p0: s0(p0: [[437.0], [438.0]], p1: [[439.0]]), p1: 440.0)], [s1(p0: s0(p0: [[441.0], [442.0]], p1: [[443.0]]), p1: 444.0)]], p1: s0(p0: [[445.0], [446.0]], p1: [[447.0]]))], [s3(p0: [[s1(p0: s0(p0: [[448.0], [449.0]], p1: [[450.0]]), p1: 451.0)], [s1(p0: s0(p0: [[452.0], [453.0]], p1: [[454.0]]), p1: 455.0)], [s1(p0: s0(p0: [[456.0], [457.0]], p1: [[458.0]]), p1: 459.0)]], p1: s0(p0: [[460.0], [461.0]], p1: [[462.0]]))]], p1: s3(p0: [[s1(p0: s0(p0: [[463.0], [464.0]], p1: [[465.0]]), p1: 466.0)], [s1(p0: s0(p0: [[467.0], [468.0]], p1: [[469.0]]), p1: 470.0)], [s1(p0: s0(p0: [[471.0], [472.0]], p1: [[473.0]]), p1: 474.0)]], p1: s0(p0: [[475.0], [476.0]], p1: [[477.0]]))), s10(p0: [[s3(p0: [[s1(p0: s0(p0: [[478.0], [479.0]], p1: [[480.0]]), p1: 481.0)], [s1(p0: s0(p0: [[482.0], [483.0]], p1: [[484.0]]), p1: 485.0)], [s1(p0: s0(p0: [[486.0], [487.0]], p1: [[488.0]]), p1: 489.0)]], p1: s0(p0: [[490.0], [491.0]], p1: [[492.0]]))], [s3(p0: [[s1(p0: s0(p0: [[493.0], [494.0]], p1: [[495.0]]), p1: 496.0)], [s1(p0: s0(p0: [[497.0], [498.0]], p1: [[499.0]]), p1: 500.0)], [s1(p0: s0(p0: [[501.0], [502.0]], p1: [[503.0]]), p1: 504.0)]], p1: s0(p0: [[505.0], [506.0]], p1: [[507.0]]))], [s3(p0: [[s1(p0: s0(p0: [[508.0], [509.0]], p1: [[510.0]]), p1: 511.0)], [s1(p0: s0(p0: [[512.0], [513.0]], p1: [[514.0]]), p1: 515.0)], [s1(p0: s0(p0: [[516.0], [517.0]], p1: [[518.0]]), p1: 519.0)]], p1: s0(p0: [[520.0], [521.0]], p1: [[522.0]]))]], p1: s3(p0: [[s1(p0: s0(p0: [[523.0], [524.0]], p1: [[525.0]]), p1: 526.0)], [s1(p0: s0(p0: [[527.0], [528.0]], p1: [[529.0]]), p1: 530.0)], [s1(p0: s0(p0: [[531.0], [532.0]], p1: [[533.0]]), p1: 534.0)]], p1: s0(p0: [[535.0], [536.0]], p1: [[537.0]]))), s10(p0: [[s3(p0: [[s1(p0: s0(p0: [[538.0], [539.0]], p1: [[540.0]]), p1: 541.0)], [s1(p0: s0(p0: [[542.0], [543.0]], p1: [[544.0]]), p1: 545.0)], [s1(p0: s0(p0: [[546.0], [547.0]], p1: [[548.0]]), p1: 549.0)]], p1: s0(p0: [[550.0], [551.0]], p1: [[552.0]]))], [s3(p0: [[s1(p0: s0(p0: [[553.0], [554.0]], p1: [[555.0]]), p1: 556.0)], [s1(p0: s0(p0: [[557.0], [558.0]], p1: [[559.0]]), p1: 560.0)], [s1(p0: s0(p0: [[561.0], [562.0]], p1: [[563.0]]), p1: 564.0)]], p1: s0(p0: [[565.0], [566.0]], p1: [[567.0]]))], [s3(p0: [[s1(p0: s0(p0: [[568.0], [569.0]], p1: [[570.0]]), p1: 571.0)], [s1(p0: s0(p0: [[572.0], [573.0]], p1: [[574.0]]), p1: 575.0)], [s1(p0: s0(p0: [[576.0], [577.0]], p1: [[578.0]]), p1: 579.0)]], p1: s0(p0: [[580.0], [581.0]], p1: [[582.0]]))]], p1: s3(p0: [[s1(p0: s0(p0: [[583.0], [584.0]], p1: [[585.0]]), p1: 586.0)], [s1(p0: s0(p0: [[587.0], [588.0]], p1: [[589.0]]), p1: 590.0)], [s1(p0: s0(p0: [[591.0], [592.0]], p1: [[593.0]]), p1: 594.0)]], p1: s0(p0: [[595.0], [596.0]], p1: [[597.0]])))])]
    let v2: [[s13]] = [[s13(p0: s11(p0: s6(p0: s4(p0: s1(p0: s0(p0: [[598.0], [599.0]], p1: [[600.0]]), p1: 601.0), p1: s0(p0: [[602.0], [603.0]], p1: [[604.0]]), p2: [s1(p0: s0(p0: [[605.0], [606.0]], p1: [[607.0]]), p1: 608.0)]), p1: [[s1(p0: s0(p0: [[609.0], [610.0]], p1: [[611.0]]), p1: 612.0)]]), p1: [[s0(p0: [[613.0], [614.0]], p1: [[615.0]])], [s0(p0: [[616.0], [617.0]], p1: [[618.0]])], [s0(p0: [[619.0], [620.0]], p1: [[621.0]])]]), p1: s1(p0: s0(p0: [[622.0], [623.0]], p1: [[624.0]]), p1: 625.0))]]
    let v3: s2 = s2(p0: s0(p0: [[626.0], [627.0]], p1: [[628.0]]), p1: [s0(p0: [[629.0], [630.0]], p1: [[631.0]])], p2: [[s1(p0: s0(p0: [[632.0], [633.0]], p1: [[634.0]]), p1: 635.0)], [s1(p0: s0(p0: [[636.0], [637.0]], p1: [[638.0]]), p1: 639.0)]])
    let v4: Double = 640.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 640.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
