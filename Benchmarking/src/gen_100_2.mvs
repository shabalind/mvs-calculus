  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: ([s0], s0, Float) -> Float = (v0: [s0], v1: s0, v2: Float) -> Float {
    let v8: s0 = v0[0] in
    let v21: Float = v2 * v2 in
    let v10: [[Float]] = v8.p1 in
    let v14: Float = v21 / v21 in
    let v15: [Float] = v10[0] in
    let v18: Float = v15[0] in
    var v54: [Float] = v15 in
    let v30: Float = v54[0] in
    var v40: Float = v30 in
    let v66: Float = v30 / v2 in
    v54[0] = v40 in
    let v32: Float = v66 + v14 in
    v54[0] = v18 in
    v32
  } in
  fun loop(i: Int, v0: [s0], v1: s0, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0]], [[1.0]])] in
    let v1: s0 = s0([[2.0]], [[3.0]]) in
    let v2: Float = 4.0 in
    let initialResult: Float = 4.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()