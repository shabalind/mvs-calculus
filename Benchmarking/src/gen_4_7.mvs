  struct s0 {
    var p0: [[Float]]
    var p1: [Float]
  } in
  struct s3 {
    var p0: [s0]
    var p1: s0
  } in
  let f22: (s3) -> s3 = (v0: s3) -> s3 {
    var v5: s3 = v0 in
    var v7: s3 = v5 in
    let v4: [s3] = [v5, v7] in
    let v3: s0 = v5.p1 in
    let v8: [s0] = v7.p0 in
    let v12: s0 = v8[1] in
    let v14: s3 = s3(v8, v3) in
    v5.p0 = v8 in
    v7.p1 = v12 in
    let v13: s3 = v4[0] in
    let v15: s0 = v13.p1 in
    v5.p1 = v15 in
    v14
  } in
  let f9: ([s0]) -> [s0] = (v0: [s0]) -> [s0] {
    let v5: s0 = v0[2] in
    let v1: [[Float]] = v5.p0 in
    let v4: s0 = v0[2] in
    let v2: [Float] = v5.p1 in
    var v13: s0 = v5 in
    let v11: s0 = v0[0] in
    var v17: [s0] = v0 in
    v13.p0 = v1 in
    let v10: [Float] = v11.p1 in
    v13.p0 = v1 in
    v17[2] = v13 in
    v13.p1 = v10 in
    v13.p1 = v2 in
    let v56: s3 = s3(v17, v4) in
    let v34: s3 = f22(v56) in
    let v49: s3 = f22(v34) in
    let v93: s3 = f22(v49) in
    let v59: s3 = f22(v93) in
    v17 = v0 in
    let v63: s3 = f22(v59) in
    let v123: s3 = f22(v63) in
    let v111: [s0] = v123.p0 in
    v111
  } in
  let f3: (Float) -> Float = (v0: Float) -> Float {
    var v6: Float = v0 in
    var v7: Float = v0 in
    var v3: Float = v6 in
    var v5: Float = v6 in
    var v10: Float = v5 in
    var v12: Float = v10 in
    v12 = v3 in
    v12 = v7 in
    v12
  } in
  let noinline_f0: (s3, Float) -> Float = (v0: s3, v1: Float) -> Float {
    var v7: s3 = v0 in
    let v6: Float = f3(v1) in
    let v3: s0 = v7.p1 in
    v7.p1 = v3 in
    v7.p1 = v3 in
    v7.p1 = v3 in
    let v20: s3 = f22(v0) in
    var v11: s0 = v3 in
    let v12: [Float] = v3.p1 in
    let v14: [[Float]] = v3.p0 in
    let v17: [Float] = v14[1] in
    var v32: [Float] = v17 in
    var v22: s0 = v3 in
    var v21: s0 = v3 in
    let v35: s0 = v20.p1 in
    var v25: [[Float]] = v14 in
    var v28: s0 = v35 in
    let v27: [s0] = v7.p0 in
    v28.p0 = v14 in
    var v75: [[Float]] = v14 in
    let v52: s0 = v27[2] in
    var v43: [Float] = v32 in
    var v61: [[Float]] = v75 in
    let v44: [[Float]] = v11.p0 in
    v75 = v44 in
    var v60: s0 = v21 in
    let v81: [s0] = f9(v27) in
    let v69: s0 = v27[1] in
    v75[0] = v43 in
    v32[0] = v6 in
    v7.p1 = v22 in
    v25[2] = v17 in
    v22.p1 = v12 in
    var v49: s0 = v28 in
    v21.p0 = v25 in
    let v70: [Float] = v11.p1 in
    let v53: [Float] = v69.p1 in
    var v48: s0 = v52 in
    let v110: s0 = v81[1] in
    let v56: [Float] = v110.p1 in
    v7.p1 = v60 in
    v21.p1 = v56 in
    v28.p0 = v14 in
    var v68: [Float] = v17 in
    v49.p1 = v70 in
    let v100: [Float] = v49.p1 in
    v28.p0 = v25 in
    v75[0] = v68 in
    v21.p1 = v100 in
    v75[2] = v17 in
    let v74: Float = v100[0] in
    v25[0] = v32 in
    v28.p0 = v61 in
    v60 = v69 in
    v28.p1 = v53 in
    v7.p1 = v48 in
    v74
  } in
  fun loop(i: Int, v0: s3, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3([s0([[0.0], [1.0], [2.0]], [3.0, 4.0]), s0([[5.0], [6.0], [7.0]], [8.0, 9.0]), s0([[10.0], [11.0], [12.0]], [13.0, 14.0])], s0([[15.0], [16.0], [17.0]], [18.0, 19.0])) in
    let v1: Float = 20.0 in
    let initialResult: Float = 20.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()