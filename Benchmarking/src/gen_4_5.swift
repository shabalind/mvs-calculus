  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  }
  struct s2 {
    var p0: [s1]
    var p1: [[s1]]
  }
  struct s3 {
    var p0: s1
    var p1: [s0]
  }
  struct s4 {
    var p0: s0
    var p1: s0
  }
  struct s5 {
    var p0: s4
    var p1: Double
  }
  struct s9 {
    var p0: [s2]
    var p1: s5
  }
  struct s10 {
    var p0: [[s4]]
    var p1: [s9]
  }
  func f22(_ v0: s9) -> s9 {
    return v0
  }
  func f21(_ v0: s10) -> s10 {
    var v1: s10 = v0
    var v3: s10 = v0
    var v8: s10 = v1
    let v4: [[s4]] = v8.p0
    var v6: [[s4]] = v4
    v3.p0 = v4
    var v14: s10 = v0
    v14.p0 = v4
    v14.p0 = v6
    let v17: [[s4]] = v3.p0
    v8.p0 = v6
    v3.p0 = v17
    v8.p0 = v17
    v8.p0 = v6
    let v46: [s9] = v1.p1
    v3.p1 = v46
    v14.p1 = v46
    return v14
  }
  func f14(_ v0: s10) -> s10 {
    var v2: s10 = v0
    let v1: s10 = f21(v2)
    let v7: [s9] = v1.p1
    let v5: s9 = v7[0]
    let v9: [s9] = v1.p1
    let v10: [[s4]] = v2.p0
    var v8: s10 = v0
    let v14: s10 = f21(v8)
    v8.p0 = v10
    v2.p1 = v7
    let v18: [s4] = v10[0]
    let v15: [s4] = v10[0]
    v8.p1 = v9
    v2.p1 = v9
    v8.p1 = v7
    let v35: s4 = v15[0]
    var v26: s4 = v35
    var v39: [s4] = v15
    v8.p0 = v10
    let v51: [s4] = v10[0]
    v39[0] = v35
    v8.p0 = v10
    v39[0] = v35
    let v21: s9 = f22(v5)
    v39[0] = v26
    let v58: [s4] = v10[0]
    let v57: s0 = v26.p1
    var v30: [[s4]] = v10
    let v69: s0 = v26.p0
    var v78: [[s4]] = v30
    v78[0] = v39
    v26.p1 = v69
    let v59: s5 = v21.p1
    v26.p0 = v57
    v39[0] = v35
    v30[0] = v51
    let v88: s10 = f21(v14)
    v39[0] = v26
    v30 = v78
    v8.p0 = v30
    let v52: s10 = f21(v88)
    let v102: s4 = v59.p0
    v30[0] = v58
    v30[0] = v18
    v39[0] = v102
    v30[0] = v15
    v8.p0 = v10
    return v52
  }
  func f4(_ v0: [s10], _ v1: Double) -> Double {
    var v4: Double = v1
    return v4
  }
  @inline(never)
  func f0(_ v0: s3, _ v1: [[s10]], _ v2: Double) -> Double {
    let v4: [s10] = v1[0]
    let v5: s10 = v4[0]
    let v8: s10 = v4[0]
    let v7: Double = f4(v4, v2)
    let v13: s10 = f21(v5)
    var v18: [s10] = v4
    let v11: s10 = f21(v5)
    let v24: [s10] = v1[0]
    let v22: s10 = f14(v11)
    v18[0] = v13
    let v15: [[s10]] = [v18, v24, v4, v4, v4]
    let v33: [s10] = v15[4]
    var v19: [[s10]] = v15
    let v14: [s9] = v22.p1
    var v36: [s9] = v14
    var v30: [[s10]] = v19
    var v61: [s10] = v33
    var v73: s10 = v8
    let v83: s10 = f14(v73)
    var v64: [s10] = v61
    let v59: [s10] = v30[3]
    v73.p1 = v14
    let v75: s10 = v18[0]
    let v127: s9 = v14[0]
    v64 = v59
    let v111: s10 = f21(v83)
    v73.p1 = v36
    v64[0] = v83
    let v120: Double = f4(v64, v7)
    v36[0] = v127
    let v150: s10 = f14(v75)
    v61[0] = v111
    v18[0] = v5
    v64[0] = v150
    return v120
  }
  func benchmark() {
    let v0: s3 = s3(p0: s1(p0: [[s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0]])]], p1: s0(p0: [[4.0], [5.0], [6.0]], p1: [[7.0]])), p1: [s0(p0: [[8.0], [9.0], [10.0]], p1: [[11.0]]), s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0]])])
    let v1: [[s10]] = [[s10(p0: [[s4(p0: s0(p0: [[16.0], [17.0], [18.0]], p1: [[19.0]]), p1: s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0]]))]], p1: [s9(p0: [s2(p0: [s1(p0: [[s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0]])]], p1: s0(p0: [[28.0], [29.0], [30.0]], p1: [[31.0]])), s1(p0: [[s0(p0: [[32.0], [33.0], [34.0]], p1: [[35.0]])]], p1: s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0]])), s1(p0: [[s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0]])]], p1: s0(p0: [[44.0], [45.0], [46.0]], p1: [[47.0]]))], p1: [[s1(p0: [[s0(p0: [[48.0], [49.0], [50.0]], p1: [[51.0]])]], p1: s0(p0: [[52.0], [53.0], [54.0]], p1: [[55.0]]))]]), s2(p0: [s1(p0: [[s0(p0: [[56.0], [57.0], [58.0]], p1: [[59.0]])]], p1: s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0]])), s1(p0: [[s0(p0: [[64.0], [65.0], [66.0]], p1: [[67.0]])]], p1: s0(p0: [[68.0], [69.0], [70.0]], p1: [[71.0]])), s1(p0: [[s0(p0: [[72.0], [73.0], [74.0]], p1: [[75.0]])]], p1: s0(p0: [[76.0], [77.0], [78.0]], p1: [[79.0]]))], p1: [[s1(p0: [[s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0]])]], p1: s0(p0: [[84.0], [85.0], [86.0]], p1: [[87.0]]))]]), s2(p0: [s1(p0: [[s0(p0: [[88.0], [89.0], [90.0]], p1: [[91.0]])]], p1: s0(p0: [[92.0], [93.0], [94.0]], p1: [[95.0]])), s1(p0: [[s0(p0: [[96.0], [97.0], [98.0]], p1: [[99.0]])]], p1: s0(p0: [[100.0], [101.0], [102.0]], p1: [[103.0]])), s1(p0: [[s0(p0: [[104.0], [105.0], [106.0]], p1: [[107.0]])]], p1: s0(p0: [[108.0], [109.0], [110.0]], p1: [[111.0]]))], p1: [[s1(p0: [[s0(p0: [[112.0], [113.0], [114.0]], p1: [[115.0]])]], p1: s0(p0: [[116.0], [117.0], [118.0]], p1: [[119.0]]))]])], p1: s5(p0: s4(p0: s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0]]), p1: s0(p0: [[124.0], [125.0], [126.0]], p1: [[127.0]])), p1: 128.0))])], [s10(p0: [[s4(p0: s0(p0: [[129.0], [130.0], [131.0]], p1: [[132.0]]), p1: s0(p0: [[133.0], [134.0], [135.0]], p1: [[136.0]]))]], p1: [s9(p0: [s2(p0: [s1(p0: [[s0(p0: [[137.0], [138.0], [139.0]], p1: [[140.0]])]], p1: s0(p0: [[141.0], [142.0], [143.0]], p1: [[144.0]])), s1(p0: [[s0(p0: [[145.0], [146.0], [147.0]], p1: [[148.0]])]], p1: s0(p0: [[149.0], [150.0], [151.0]], p1: [[152.0]])), s1(p0: [[s0(p0: [[153.0], [154.0], [155.0]], p1: [[156.0]])]], p1: s0(p0: [[157.0], [158.0], [159.0]], p1: [[160.0]]))], p1: [[s1(p0: [[s0(p0: [[161.0], [162.0], [163.0]], p1: [[164.0]])]], p1: s0(p0: [[165.0], [166.0], [167.0]], p1: [[168.0]]))]]), s2(p0: [s1(p0: [[s0(p0: [[169.0], [170.0], [171.0]], p1: [[172.0]])]], p1: s0(p0: [[173.0], [174.0], [175.0]], p1: [[176.0]])), s1(p0: [[s0(p0: [[177.0], [178.0], [179.0]], p1: [[180.0]])]], p1: s0(p0: [[181.0], [182.0], [183.0]], p1: [[184.0]])), s1(p0: [[s0(p0: [[185.0], [186.0], [187.0]], p1: [[188.0]])]], p1: s0(p0: [[189.0], [190.0], [191.0]], p1: [[192.0]]))], p1: [[s1(p0: [[s0(p0: [[193.0], [194.0], [195.0]], p1: [[196.0]])]], p1: s0(p0: [[197.0], [198.0], [199.0]], p1: [[200.0]]))]]), s2(p0: [s1(p0: [[s0(p0: [[201.0], [202.0], [203.0]], p1: [[204.0]])]], p1: s0(p0: [[205.0], [206.0], [207.0]], p1: [[208.0]])), s1(p0: [[s0(p0: [[209.0], [210.0], [211.0]], p1: [[212.0]])]], p1: s0(p0: [[213.0], [214.0], [215.0]], p1: [[216.0]])), s1(p0: [[s0(p0: [[217.0], [218.0], [219.0]], p1: [[220.0]])]], p1: s0(p0: [[221.0], [222.0], [223.0]], p1: [[224.0]]))], p1: [[s1(p0: [[s0(p0: [[225.0], [226.0], [227.0]], p1: [[228.0]])]], p1: s0(p0: [[229.0], [230.0], [231.0]], p1: [[232.0]]))]])], p1: s5(p0: s4(p0: s0(p0: [[233.0], [234.0], [235.0]], p1: [[236.0]]), p1: s0(p0: [[237.0], [238.0], [239.0]], p1: [[240.0]])), p1: 241.0))])]]
    let v2: Double = 242.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 242.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
