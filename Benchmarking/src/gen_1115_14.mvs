  let f72: ([Float]) -> [Float] = (v0: [Float]) -> [Float] {
    var v1: [Float] = v0 in
    var v7: [Float] = v0 in
    var v8: [Float] = v7 in
    let v3: Float = v8[0] in
    let v9: Float = v8[0] in
    let v4: Float = v3 + v3 in
    let v10: Float = v7[0] in
    let v11: Float = v1[0] in
    let v17: Float = v8[0] in
    var v12: Float = v9 in
    v8[0] = v12 in
    v1[0] = v12 in
    let v6: [Float] = [v4, v3, v4, v12, v17, v3, v10] in
    var v18: [Float] = v6 in
    let v13: Float = v18[4] in
    var v25: [Float] = v7 in
    var v21: [Float] = v25 in
    var v32: [Float] = v21 in
    v21[0] = v13 in
    v18[0] = v4 in
    v18[2] = v11 in
    v8[0] = v11 in
    var v119: [Float] = v32 in
    var v201: [Float] = v119 in
    v7[0] = v11 in
    v201
  } in
  let noinline_f0: (Float) -> Float = (v0: Float) -> Float {
    var v5: Float = v0 in
    let v7: [Float] = [v5, v0] in
    var v4: Float = v0 in
    let v2: Float = v7[1] in
    var v6: [Float] = v7 in
    let v8: Float = v6[1] in
    var v10: [Float] = v7 in
    let v1: Float = v6[1] in
    let v21: Float = v6[1] in
    v6[0] = v5 in
    v10[0] = v21 in
    let v15: Float = v7[0] in
    let v14: Float = v5 - v1 in
    var v12: [Float] = v10 in
    v6[0] = v5 in
    var v17: [Float] = v7 in
    let v24: Float = v12[0] in
    var v28: [Float] = v17 in
    v17 = v7 in
    var v18: [Float] = v17 in
    var v31: [Float] = v10 in
    v6[1] = v5 in
    var v27: Float = v15 in
    v10[0] = v2 in
    var v39: Float = v5 in
    let v35: Float = v10[1] in
    v10[0] = v21 in
    var v22: [Float] = v6 in
    var v79: [Float] = v22 in
    var v29: [Float] = v12 in
    v29[1] = v24 in
    let v43: Float = v29[1] in
    v79[0] = v4 in
    var v46: Float = v27 in
    var v26: Float = v27 in
    let v60: Float = v31[1] in
    v18[0] = v14 in
    v27 = v46 in
    let v41: Float = v12[1] in
    var v38: [Float] = v79 in
    let v66: Float = v29[1] in
    v79[1] = v60 in
    var v56: [Float] = v17 in
    let v82: [[Float]] = [v18, v29, v17, v28, v56, v38, v18] in
    v31[1] = v41 in
    var v76: [Float] = v29 in
    v17[1] = v43 in
    var v25: [[Float]] = v82 in
    v22[0] = v39 in
    var v50: Float = v26 in
    var v45: [[Float]] = v25 in
    let v69: [Float] = v45[0] in
    let v159: Float = v69[1] in
    let v163: [Float] = [v159] in
    let v129: [Float] = f72(v163) in
    let v166: Float = v129[0] in
    v17[1] = v50 in
    v25[5] = v76 in
    v76[1] = v66 in
    v12[0] = v8 in
    v38[0] = v35 in
    v166
  } in
  fun loop(i: Int, v0: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0) in
      loop(i + 1, v0, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: Float = 0.0 in
    let initialResult: Float = 0.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()