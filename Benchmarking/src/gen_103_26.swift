  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [Double]
  }
  struct s1 {
    var p0: [s0]
    var p1: s0
  }
  struct s2 {
    var p0: [[s1]]
    var p1: [s1]
    var p2: Double
    var p3: [s1]
  }
  struct s3 {
    var p0: [[s0]]
    var p1: s0
  }
  struct s4 {
    var p0: [[s1]]
    var p1: [s3]
  }
  struct s5 {
    var p0: [s1]
    var p1: [s0]
  }
  struct s7 {
    var p0: [s1]
    var p1: s4
    var p2: [[s5]]
  }
  @inline(never)
  func f0(_ v0: [s5], _ v1: [Double], _ v2: [s3], _ v3: s2, _ v4: s2, _ v5: [s7], _ v6: Double) -> Double {
    let v8: s3 = v2[0]
    var v12: s3 = v8
    let v16: [[s0]] = v12.p0
    v12.p0 = v16
    let v13: s0 = v12.p1
    var v25: [[s0]] = v16
    let v61: [Double] = v13.p1
    let v37: s0 = v12.p1
    let v69: [s0] = v16[0]
    let v34: Double = v61[0]
    v25[0] = v69
    v12.p1 = v37
    v12.p0 = v25
    return v34
  }
  func benchmark() {
    let v0: [s5] = [s5(p0: [s1(p0: [s0(p0: [[0.0], [1.0]], p1: [2.0])], p1: s0(p0: [[3.0], [4.0]], p1: [5.0]))], p1: [s0(p0: [[6.0], [7.0]], p1: [8.0]), s0(p0: [[9.0], [10.0]], p1: [11.0]), s0(p0: [[12.0], [13.0]], p1: [14.0])]), s5(p0: [s1(p0: [s0(p0: [[15.0], [16.0]], p1: [17.0])], p1: s0(p0: [[18.0], [19.0]], p1: [20.0]))], p1: [s0(p0: [[21.0], [22.0]], p1: [23.0]), s0(p0: [[24.0], [25.0]], p1: [26.0]), s0(p0: [[27.0], [28.0]], p1: [29.0])]), s5(p0: [s1(p0: [s0(p0: [[30.0], [31.0]], p1: [32.0])], p1: s0(p0: [[33.0], [34.0]], p1: [35.0]))], p1: [s0(p0: [[36.0], [37.0]], p1: [38.0]), s0(p0: [[39.0], [40.0]], p1: [41.0]), s0(p0: [[42.0], [43.0]], p1: [44.0])])]
    let v1: [Double] = [45.0, 46.0, 47.0]
    let v2: [s3] = [s3(p0: [[s0(p0: [[48.0], [49.0]], p1: [50.0])]], p1: s0(p0: [[51.0], [52.0]], p1: [53.0])), s3(p0: [[s0(p0: [[54.0], [55.0]], p1: [56.0])]], p1: s0(p0: [[57.0], [58.0]], p1: [59.0])), s3(p0: [[s0(p0: [[60.0], [61.0]], p1: [62.0])]], p1: s0(p0: [[63.0], [64.0]], p1: [65.0]))]
    let v3: s2 = s2(p0: [[s1(p0: [s0(p0: [[66.0], [67.0]], p1: [68.0])], p1: s0(p0: [[69.0], [70.0]], p1: [71.0]))]], p1: [s1(p0: [s0(p0: [[72.0], [73.0]], p1: [74.0])], p1: s0(p0: [[75.0], [76.0]], p1: [77.0])), s1(p0: [s0(p0: [[78.0], [79.0]], p1: [80.0])], p1: s0(p0: [[81.0], [82.0]], p1: [83.0])), s1(p0: [s0(p0: [[84.0], [85.0]], p1: [86.0])], p1: s0(p0: [[87.0], [88.0]], p1: [89.0]))], p2: 90.0, p3: [s1(p0: [s0(p0: [[91.0], [92.0]], p1: [93.0])], p1: s0(p0: [[94.0], [95.0]], p1: [96.0]))])
    let v4: s2 = s2(p0: [[s1(p0: [s0(p0: [[97.0], [98.0]], p1: [99.0])], p1: s0(p0: [[100.0], [101.0]], p1: [102.0]))]], p1: [s1(p0: [s0(p0: [[103.0], [104.0]], p1: [105.0])], p1: s0(p0: [[106.0], [107.0]], p1: [108.0])), s1(p0: [s0(p0: [[109.0], [110.0]], p1: [111.0])], p1: s0(p0: [[112.0], [113.0]], p1: [114.0])), s1(p0: [s0(p0: [[115.0], [116.0]], p1: [117.0])], p1: s0(p0: [[118.0], [119.0]], p1: [120.0]))], p2: 121.0, p3: [s1(p0: [s0(p0: [[122.0], [123.0]], p1: [124.0])], p1: s0(p0: [[125.0], [126.0]], p1: [127.0]))])
    let v5: [s7] = [s7(p0: [s1(p0: [s0(p0: [[128.0], [129.0]], p1: [130.0])], p1: s0(p0: [[131.0], [132.0]], p1: [133.0]))], p1: s4(p0: [[s1(p0: [s0(p0: [[134.0], [135.0]], p1: [136.0])], p1: s0(p0: [[137.0], [138.0]], p1: [139.0]))]], p1: [s3(p0: [[s0(p0: [[140.0], [141.0]], p1: [142.0])]], p1: s0(p0: [[143.0], [144.0]], p1: [145.0])), s3(p0: [[s0(p0: [[146.0], [147.0]], p1: [148.0])]], p1: s0(p0: [[149.0], [150.0]], p1: [151.0]))]), p2: [[s5(p0: [s1(p0: [s0(p0: [[152.0], [153.0]], p1: [154.0])], p1: s0(p0: [[155.0], [156.0]], p1: [157.0]))], p1: [s0(p0: [[158.0], [159.0]], p1: [160.0]), s0(p0: [[161.0], [162.0]], p1: [163.0]), s0(p0: [[164.0], [165.0]], p1: [166.0])])]])]
    let v6: Double = 167.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 167.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4, v5, v6)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
