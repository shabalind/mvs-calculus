  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [Double]
  }
  struct s2 {
    var p0: s1
    var p1: s0
  }
  struct s3 {
    var p0: [s2]
    var p1: s2
  }
  struct s4 {
    var p0: [[s3]]
    var p1: [s0]
  }
  struct s5 {
    var p0: s4
    var p1: s4
  }
  struct s6 {
    var p0: [[s5]]
    var p1: s4
  }
  @inline(never)
  func f0(_ v0: [s6], _ v1: Double) -> Double {
    let v2: s6 = v0[1]
    let v6: s4 = v2.p1
    let v18: [[s3]] = v6.p0
    let v17: [s3] = v18[0]
    let v29: s3 = v17[0]
    let v46: [s2] = v29.p0
    let v49: s2 = v46[0]
    let v65: s0 = v49.p1
    let v92: [[Double]] = v65.p1
    var v60: [[Double]] = v92
    let v97: [Double] = v60[0]
    let v128: Double = v97[0]
    return v128
  }
  func benchmark() {
    let v0: [s6] = [s6(p0: [[s5(p0: s4(p0: [[s3(p0: [s2(p0: s1(p0: [s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0], [4.0]]), s0(p0: [[5.0], [6.0]], p1: [[7.0], [8.0], [9.0]])], p1: [10.0]), p1: s0(p0: [[11.0], [12.0]], p1: [[13.0], [14.0], [15.0]])), s2(p0: s1(p0: [s0(p0: [[16.0], [17.0]], p1: [[18.0], [19.0], [20.0]]), s0(p0: [[21.0], [22.0]], p1: [[23.0], [24.0], [25.0]])], p1: [26.0]), p1: s0(p0: [[27.0], [28.0]], p1: [[29.0], [30.0], [31.0]]))], p1: s2(p0: s1(p0: [s0(p0: [[32.0], [33.0]], p1: [[34.0], [35.0], [36.0]]), s0(p0: [[37.0], [38.0]], p1: [[39.0], [40.0], [41.0]])], p1: [42.0]), p1: s0(p0: [[43.0], [44.0]], p1: [[45.0], [46.0], [47.0]])))]], p1: [s0(p0: [[48.0], [49.0]], p1: [[50.0], [51.0], [52.0]]), s0(p0: [[53.0], [54.0]], p1: [[55.0], [56.0], [57.0]]), s0(p0: [[58.0], [59.0]], p1: [[60.0], [61.0], [62.0]])]), p1: s4(p0: [[s3(p0: [s2(p0: s1(p0: [s0(p0: [[63.0], [64.0]], p1: [[65.0], [66.0], [67.0]]), s0(p0: [[68.0], [69.0]], p1: [[70.0], [71.0], [72.0]])], p1: [73.0]), p1: s0(p0: [[74.0], [75.0]], p1: [[76.0], [77.0], [78.0]])), s2(p0: s1(p0: [s0(p0: [[79.0], [80.0]], p1: [[81.0], [82.0], [83.0]]), s0(p0: [[84.0], [85.0]], p1: [[86.0], [87.0], [88.0]])], p1: [89.0]), p1: s0(p0: [[90.0], [91.0]], p1: [[92.0], [93.0], [94.0]]))], p1: s2(p0: s1(p0: [s0(p0: [[95.0], [96.0]], p1: [[97.0], [98.0], [99.0]]), s0(p0: [[100.0], [101.0]], p1: [[102.0], [103.0], [104.0]])], p1: [105.0]), p1: s0(p0: [[106.0], [107.0]], p1: [[108.0], [109.0], [110.0]])))]], p1: [s0(p0: [[111.0], [112.0]], p1: [[113.0], [114.0], [115.0]]), s0(p0: [[116.0], [117.0]], p1: [[118.0], [119.0], [120.0]]), s0(p0: [[121.0], [122.0]], p1: [[123.0], [124.0], [125.0]])]))]], p1: s4(p0: [[s3(p0: [s2(p0: s1(p0: [s0(p0: [[126.0], [127.0]], p1: [[128.0], [129.0], [130.0]]), s0(p0: [[131.0], [132.0]], p1: [[133.0], [134.0], [135.0]])], p1: [136.0]), p1: s0(p0: [[137.0], [138.0]], p1: [[139.0], [140.0], [141.0]])), s2(p0: s1(p0: [s0(p0: [[142.0], [143.0]], p1: [[144.0], [145.0], [146.0]]), s0(p0: [[147.0], [148.0]], p1: [[149.0], [150.0], [151.0]])], p1: [152.0]), p1: s0(p0: [[153.0], [154.0]], p1: [[155.0], [156.0], [157.0]]))], p1: s2(p0: s1(p0: [s0(p0: [[158.0], [159.0]], p1: [[160.0], [161.0], [162.0]]), s0(p0: [[163.0], [164.0]], p1: [[165.0], [166.0], [167.0]])], p1: [168.0]), p1: s0(p0: [[169.0], [170.0]], p1: [[171.0], [172.0], [173.0]])))]], p1: [s0(p0: [[174.0], [175.0]], p1: [[176.0], [177.0], [178.0]]), s0(p0: [[179.0], [180.0]], p1: [[181.0], [182.0], [183.0]]), s0(p0: [[184.0], [185.0]], p1: [[186.0], [187.0], [188.0]])])), s6(p0: [[s5(p0: s4(p0: [[s3(p0: [s2(p0: s1(p0: [s0(p0: [[189.0], [190.0]], p1: [[191.0], [192.0], [193.0]]), s0(p0: [[194.0], [195.0]], p1: [[196.0], [197.0], [198.0]])], p1: [199.0]), p1: s0(p0: [[200.0], [201.0]], p1: [[202.0], [203.0], [204.0]])), s2(p0: s1(p0: [s0(p0: [[205.0], [206.0]], p1: [[207.0], [208.0], [209.0]]), s0(p0: [[210.0], [211.0]], p1: [[212.0], [213.0], [214.0]])], p1: [215.0]), p1: s0(p0: [[216.0], [217.0]], p1: [[218.0], [219.0], [220.0]]))], p1: s2(p0: s1(p0: [s0(p0: [[221.0], [222.0]], p1: [[223.0], [224.0], [225.0]]), s0(p0: [[226.0], [227.0]], p1: [[228.0], [229.0], [230.0]])], p1: [231.0]), p1: s0(p0: [[232.0], [233.0]], p1: [[234.0], [235.0], [236.0]])))]], p1: [s0(p0: [[237.0], [238.0]], p1: [[239.0], [240.0], [241.0]]), s0(p0: [[242.0], [243.0]], p1: [[244.0], [245.0], [246.0]]), s0(p0: [[247.0], [248.0]], p1: [[249.0], [250.0], [251.0]])]), p1: s4(p0: [[s3(p0: [s2(p0: s1(p0: [s0(p0: [[252.0], [253.0]], p1: [[254.0], [255.0], [256.0]]), s0(p0: [[257.0], [258.0]], p1: [[259.0], [260.0], [261.0]])], p1: [262.0]), p1: s0(p0: [[263.0], [264.0]], p1: [[265.0], [266.0], [267.0]])), s2(p0: s1(p0: [s0(p0: [[268.0], [269.0]], p1: [[270.0], [271.0], [272.0]]), s0(p0: [[273.0], [274.0]], p1: [[275.0], [276.0], [277.0]])], p1: [278.0]), p1: s0(p0: [[279.0], [280.0]], p1: [[281.0], [282.0], [283.0]]))], p1: s2(p0: s1(p0: [s0(p0: [[284.0], [285.0]], p1: [[286.0], [287.0], [288.0]]), s0(p0: [[289.0], [290.0]], p1: [[291.0], [292.0], [293.0]])], p1: [294.0]), p1: s0(p0: [[295.0], [296.0]], p1: [[297.0], [298.0], [299.0]])))]], p1: [s0(p0: [[300.0], [301.0]], p1: [[302.0], [303.0], [304.0]]), s0(p0: [[305.0], [306.0]], p1: [[307.0], [308.0], [309.0]]), s0(p0: [[310.0], [311.0]], p1: [[312.0], [313.0], [314.0]])]))]], p1: s4(p0: [[s3(p0: [s2(p0: s1(p0: [s0(p0: [[315.0], [316.0]], p1: [[317.0], [318.0], [319.0]]), s0(p0: [[320.0], [321.0]], p1: [[322.0], [323.0], [324.0]])], p1: [325.0]), p1: s0(p0: [[326.0], [327.0]], p1: [[328.0], [329.0], [330.0]])), s2(p0: s1(p0: [s0(p0: [[331.0], [332.0]], p1: [[333.0], [334.0], [335.0]]), s0(p0: [[336.0], [337.0]], p1: [[338.0], [339.0], [340.0]])], p1: [341.0]), p1: s0(p0: [[342.0], [343.0]], p1: [[344.0], [345.0], [346.0]]))], p1: s2(p0: s1(p0: [s0(p0: [[347.0], [348.0]], p1: [[349.0], [350.0], [351.0]]), s0(p0: [[352.0], [353.0]], p1: [[354.0], [355.0], [356.0]])], p1: [357.0]), p1: s0(p0: [[358.0], [359.0]], p1: [[360.0], [361.0], [362.0]])))]], p1: [s0(p0: [[363.0], [364.0]], p1: [[365.0], [366.0], [367.0]]), s0(p0: [[368.0], [369.0]], p1: [[370.0], [371.0], [372.0]]), s0(p0: [[373.0], [374.0]], p1: [[375.0], [376.0], [377.0]])]))]
    let v1: Double = 378.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 378.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
