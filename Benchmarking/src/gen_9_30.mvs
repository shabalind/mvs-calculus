  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s2 {
    var p0: s0
    var p1: s1
  } in
  struct s3 {
    var p0: s2
    var p1: [s0]
  } in
  struct s5 {
    var p0: s3
    var p1: [s3]
  } in
  let noinline_f0: (s1, s5, s5, s2, Float) -> Float = (v0: s1, v1: s5, v2: s5, v3: s2, v4: Float) -> Float {
    let v11: s0 = v3.p0 in
    let v13: [[Float]] = v11.p1 in
    let v23: [Float] = v13[2] in
    let v29: [Float] = v13[1] in
    var v22: [[Float]] = v13 in
    var v57: [[Float]] = v13 in
    let v50: [Float] = v22[2] in
    let v41: [Float] = v57[0] in
    let v44: [[Float]] = [v41, v50, v29, v23, v41] in
    let v94: [Float] = v44[4] in
    v22[2] = v94 in
    let v116: [Float] = v44[3] in
    let v158: Float = v116[0] in
    v158
  } in
  fun loop(i: Int, v0: s1, v1: s5, v2: s5, v3: s2, v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]])], s0([[6.0], [7.0], [8.0]], [[9.0], [10.0], [11.0]])) in
    let v1: s5 = s5(s3(s2(s0([[12.0], [13.0], [14.0]], [[15.0], [16.0], [17.0]]), s1([s0([[18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0]])], s0([[24.0], [25.0], [26.0]], [[27.0], [28.0], [29.0]]))), [s0([[30.0], [31.0], [32.0]], [[33.0], [34.0], [35.0]]), s0([[36.0], [37.0], [38.0]], [[39.0], [40.0], [41.0]])]), [s3(s2(s0([[42.0], [43.0], [44.0]], [[45.0], [46.0], [47.0]]), s1([s0([[48.0], [49.0], [50.0]], [[51.0], [52.0], [53.0]])], s0([[54.0], [55.0], [56.0]], [[57.0], [58.0], [59.0]]))), [s0([[60.0], [61.0], [62.0]], [[63.0], [64.0], [65.0]]), s0([[66.0], [67.0], [68.0]], [[69.0], [70.0], [71.0]])])]) in
    let v2: s5 = s5(s3(s2(s0([[72.0], [73.0], [74.0]], [[75.0], [76.0], [77.0]]), s1([s0([[78.0], [79.0], [80.0]], [[81.0], [82.0], [83.0]])], s0([[84.0], [85.0], [86.0]], [[87.0], [88.0], [89.0]]))), [s0([[90.0], [91.0], [92.0]], [[93.0], [94.0], [95.0]]), s0([[96.0], [97.0], [98.0]], [[99.0], [100.0], [101.0]])]), [s3(s2(s0([[102.0], [103.0], [104.0]], [[105.0], [106.0], [107.0]]), s1([s0([[108.0], [109.0], [110.0]], [[111.0], [112.0], [113.0]])], s0([[114.0], [115.0], [116.0]], [[117.0], [118.0], [119.0]]))), [s0([[120.0], [121.0], [122.0]], [[123.0], [124.0], [125.0]]), s0([[126.0], [127.0], [128.0]], [[129.0], [130.0], [131.0]])])]) in
    let v3: s2 = s2(s0([[132.0], [133.0], [134.0]], [[135.0], [136.0], [137.0]]), s1([s0([[138.0], [139.0], [140.0]], [[141.0], [142.0], [143.0]])], s0([[144.0], [145.0], [146.0]], [[147.0], [148.0], [149.0]]))) in
    let v4: Float = 150.0 in
    let initialResult: Float = 150.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()