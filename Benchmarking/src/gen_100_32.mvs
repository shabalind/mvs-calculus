  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: s0
    var p1: s1
  } in
  let noinline_f0: (s2, Float) -> Float = (v0: s2, v1: Float) -> Float {
    let v6: [s2] = [v0, v0, v0, v0, v0] in
    let v3: s2 = v6[2] in
    let v10: s0 = v3.p0 in
    let v36: s1 = v3.p1 in
    let v25: [[Float]] = v10.p2 in
    let v33: [Float] = v25[2] in
    let v21: Float = v33[0] in
    let v40: s0 = v36.p0 in
    let v34: [[Float]] = v40.p0 in
    let v82: [Float] = v34[0] in
    let v44: Float = v82[0] in
    let v53: Float = v44 / v21 in
    v53
  } in
  fun loop(i: Int, v0: s2, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(s0([[0.0], [1.0]], [[2.0], [3.0]], [[4.0], [5.0], [6.0]]), s1(s0([[7.0], [8.0]], [[9.0], [10.0]], [[11.0], [12.0], [13.0]]), [s0([[14.0], [15.0]], [[16.0], [17.0]], [[18.0], [19.0], [20.0]])])) in
    let v1: Float = 21.0 in
    let initialResult: Float = 21.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()