  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s0
    var p1: [s1]
  } in
  struct s3 {
    var p0: [[s2]]
  } in
  struct s4 {
    var p0: s0
  } in
  struct s5 {
    var p0: s0
    var p1: s4
  } in
  struct s7 {
    var p0: Float
    var p1: s1
  } in
  struct s8 {
    var p0: [[s4]]
    var p1: s3
  } in
  let f95: (s0) -> s0 = (v0: s0) -> s0 {
    v0
  } in
  let f60: (s1, s1) -> s1 = (v0: s1, v1: s1) -> s1 {
    let v7: s0 = v1.p0 in
    var v6: s1 = v1 in
    var v4: s1 = v6 in
    v6.p0 = v7 in
    var v2: s1 = v6 in
    let v8: s0 = f95(v7) in
    v4.p0 = v8 in
    v6.p1 = v7 in
    let v14: s0 = v2.p0 in
    v4.p1 = v14 in
    v2.p1 = v8 in
    let v21: s0 = f95(v7) in
    let v25: s0 = f95(v21) in
    let v48: s0 = v2.p1 in
    var v29: s1 = v4 in
    let v65: [s1] = [v6, v1, v29, v29, v2] in
    let v94: s1 = v65[4] in
    var v40: [s1] = v65 in
    let v56: s1 = v40[3] in
    let v68: s0 = v94.p1 in
    var v79: s1 = v0 in
    v79 = v56 in
    v6.p1 = v68 in
    v2.p0 = v48 in
    v29.p0 = v25 in
    v79
  } in
  let f54: (s1) -> s1 = (v0: s1) -> s1 {
    let v7: s1 = f60(v0, v0) in
    let v6: s1 = f60(v0, v0) in
    let v10: s1 = f60(v0, v7) in
    let v41: s1 = f60(v6, v10) in
    let v35: s1 = f60(v41, v6) in
    var v34: s1 = v35 in
    v34
  } in
  let f36: (s0) -> s0 = (v0: s0) -> s0 {
    let v4: s0 = f95(v0) in
    let v61: s0 = f95(v4) in
    let v77: s1 = s1(v4, v61) in
    let v35: s1 = f54(v77) in
    let v50: s1 = f60(v35, v77) in
    let v66: s1 = f60(v50, v50) in
    let v93: s0 = v66.p1 in
    v93
  } in
  let f18: (s1) -> s1 = (v0: s1) -> s1 {
    let v4: s1 = f54(v0) in
    let v7: s0 = v4.p1 in
    let v3: [[Float]] = v7.p1 in
    var v1: s1 = v0 in
    let v6: s0 = f36(v7) in
    let v9: s0 = v1.p1 in
    v1.p1 = v9 in
    var v8: s0 = v6 in
    let v17: [Float] = v3[0] in
    var v13: [[Float]] = v3 in
    var v12: s0 = v8 in
    var v33: s1 = v1 in
    let v16: s0 = f95(v9) in
    v12.p0 = v13 in
    v13[0] = v17 in
    let v26: s0 = f36(v16) in
    v33.p0 = v12 in
    v33.p1 = v26 in
    v33
  } in
  let noinline_f0: (Float, [s5], s2, [[s7]], s7, [s8]) -> Float = (v0: Float, v1: [s5], v2: s2, v3: [[s7]], v4: s7, v5: [s8]) -> Float {
    let v8: s0 = v2.p0 in
    let v9: s0 = f36(v8) in
    let v23: s1 = s1(v9, v8) in
    let v31: s1 = f18(v23) in
    let v43: s0 = v31.p0 in
    let v66: [[Float]] = v43.p0 in
    let v89: [Float] = v66[0] in
    let v115: Float = v89[0] in
    v115
  } in
  fun loop(i: Int, v0: Float, v1: [s5], v2: s2, v3: [[s7]], v4: s7, v5: [s8], result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4, v5) in
      loop(i + 1, v0, v1, v2, v3, v4, v5, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: Float = 0.0 in
    let v1: [s5] = [s5(s0([[1.0]], [[2.0]]), s4(s0([[3.0]], [[4.0]]))), s5(s0([[5.0]], [[6.0]]), s4(s0([[7.0]], [[8.0]]))), s5(s0([[9.0]], [[10.0]]), s4(s0([[11.0]], [[12.0]])))] in
    let v2: s2 = s2(s0([[13.0]], [[14.0]]), [s1(s0([[15.0]], [[16.0]]), s0([[17.0]], [[18.0]])), s1(s0([[19.0]], [[20.0]]), s0([[21.0]], [[22.0]])), s1(s0([[23.0]], [[24.0]]), s0([[25.0]], [[26.0]]))]) in
    let v3: [[s7]] = [[s7(27.0, s1(s0([[28.0]], [[29.0]]), s0([[30.0]], [[31.0]])))], [s7(32.0, s1(s0([[33.0]], [[34.0]]), s0([[35.0]], [[36.0]])))]] in
    let v4: s7 = s7(37.0, s1(s0([[38.0]], [[39.0]]), s0([[40.0]], [[41.0]]))) in
    let v5: [s8] = [s8([[s4(s0([[42.0]], [[43.0]]))]], s3([[s2(s0([[44.0]], [[45.0]]), [s1(s0([[46.0]], [[47.0]]), s0([[48.0]], [[49.0]])), s1(s0([[50.0]], [[51.0]]), s0([[52.0]], [[53.0]])), s1(s0([[54.0]], [[55.0]]), s0([[56.0]], [[57.0]]))])]]))] in
    let initialResult: Float = [s8([[s4(s0([[42.0]], [[43.0]]))]], s3([[s2(s0([[44.0]], [[45.0]]), [s1(s0([[46.0]], [[47.0]]), s0([[48.0]], [[49.0]])), s1(s0([[50.0]], [[51.0]]), s0([[52.0]], [[53.0]])), s1(s0([[54.0]], [[55.0]]), s0([[56.0]], [[57.0]]))])]]))] in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, v5, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()