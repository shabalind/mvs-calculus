  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: [[s0]]
    var p1: s0
  } in
  struct s5 {
    var p0: s1
    var p1: [s0]
  } in
  let noinline_f0: ([s5], s2, Float) -> Float = (v0: [s5], v1: s2, v2: Float) -> Float {
    let v9: [[s0]] = v1.p0 in
    let v25: [s0] = v9[0] in
    let v35: s0 = v25[0] in
    let v63: [[Float]] = v35.p0 in
    let v62: [Float] = v63[1] in
    var v138: [Float] = v62 in
    let v89: Float = v138[0] in
    var v135: [Float] = v62 in
    let v173: Float = v135[0] in
    let v457: Float = v89 / v173 in
    v457
  } in
  fun loop(i: Int, v0: [s5], v1: s2, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s5] = [s5(s1(s0([[0.0], [1.0]], [[2.0]]), [[s0([[3.0], [4.0]], [[5.0]])]]), [s0([[6.0], [7.0]], [[8.0]]), s0([[9.0], [10.0]], [[11.0]])])] in
    let v1: s2 = s2([[s0([[12.0], [13.0]], [[14.0]])]], s0([[15.0], [16.0]], [[17.0]])) in
    let v2: Float = 18.0 in
    let initialResult: Float = 18.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()