  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s2 {
    var p0: [[s1]]
    var p1: [[s0]]
  }
  struct s3 {
    var p0: [[Double]]
    var p1: s1
    var p2: [[s0]]
    var p3: s1
  }
  struct s4 {
    var p0: s0
    var p1: [s2]
  }
  struct s5 {
    var p0: s3
    var p1: s1
  }
  struct s6 {
    var p0: s3
    var p1: s2
  }
  struct s7 {
    var p0: [[s2]]
    var p1: s2
  }
  struct s8 {
    var p0: s6
    var p1: s1
  }
  struct s10 {
    var p0: [[s8]]
    var p1: s8
  }
  func f21(_ v0: s5) -> s5 {
    var v6: s5 = v0
    let v4: [s5] = [v0, v6, v6]
    let v5: s5 = v4[1]
    let v2: s3 = v5.p0
    let v3: s1 = v5.p1
    let v9: s1 = v5.p1
    let v7: [s0] = v9.p1
    v6.p0 = v2
    let v11: s0 = v7[1]
    v6.p1 = v3
    let v1: s3 = v5.p0
    let v16: s1 = v1.p3
    var v17: s5 = v6
    let v18: [s0] = v3.p0
    v17.p0 = v2
    let v24: s0 = v18[0]
    let v27: [s0] = v16.p0
    var v21: s3 = v1
    var v33: s1 = v3
    var v31: [s0] = v7
    let v34: s1 = v1.p1
    let v72: s0 = v27[0]
    v6.p1 = v9
    let v45: [[s0]] = v21.p2
    var v53: s1 = v34
    let v28: s0 = v27[0]
    let v42: [s0] = v45[0]
    v31[0] = v28
    v31[1] = v11
    var v77: [s0] = v7
    v53.p0 = v42
    v17.p0 = v21
    v77[0] = v72
    let v37: s0 = v7[0]
    v6.p1 = v33
    v33.p1 = v31
    v31[1] = v24
    v31[0] = v72
    var v43: [s5] = v4
    v21.p3 = v53
    v33 = v9
    var v101: [s5] = v43
    v21.p1 = v16
    v31[0] = v37
    v31 = v77
    var v120: [s5] = v101
    v6.p1 = v3
    let v76: s5 = v120[2]
    v101[1] = v17
    var v166: s5 = v76
    v77[0] = v11
    return v166
  }
  @inline(never)
  func f0(_ v0: [s7], _ v1: [s10], _ v2: s4, _ v3: s5, _ v4: s1, _ v5: Double) -> Double {
    let v11: s5 = f21(v3)
    let v22: s3 = v11.p0
    let v17: s1 = v22.p1
    let v95: [s0] = v17.p0
    let v36: s0 = v95[0]
    let v77: [[Double]] = v36.p1
    let v57: [Double] = v77[0]
    let v135: Double = v57[0]
    return v135
  }
  func benchmark() {
    let v0: [s7] = [s7(p0: [[s2(p0: [[s1(p0: [s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0], [5.0]])], p1: [s0(p0: [[6.0], [7.0], [8.0]], p1: [[9.0], [10.0], [11.0]]), s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0], [16.0], [17.0]])])], [s1(p0: [s0(p0: [[18.0], [19.0], [20.0]], p1: [[21.0], [22.0], [23.0]])], p1: [s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0], [28.0], [29.0]]), s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0], [35.0]])])]], p1: [[s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0], [40.0], [41.0]])]])]], p1: s2(p0: [[s1(p0: [s0(p0: [[42.0], [43.0], [44.0]], p1: [[45.0], [46.0], [47.0]])], p1: [s0(p0: [[48.0], [49.0], [50.0]], p1: [[51.0], [52.0], [53.0]]), s0(p0: [[54.0], [55.0], [56.0]], p1: [[57.0], [58.0], [59.0]])])], [s1(p0: [s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0], [64.0], [65.0]])], p1: [s0(p0: [[66.0], [67.0], [68.0]], p1: [[69.0], [70.0], [71.0]]), s0(p0: [[72.0], [73.0], [74.0]], p1: [[75.0], [76.0], [77.0]])])]], p1: [[s0(p0: [[78.0], [79.0], [80.0]], p1: [[81.0], [82.0], [83.0]])]]))]
    let v1: [s10] = [s10(p0: [[s8(p0: s6(p0: s3(p0: [[84.0]], p1: s1(p0: [s0(p0: [[85.0], [86.0], [87.0]], p1: [[88.0], [89.0], [90.0]])], p1: [s0(p0: [[91.0], [92.0], [93.0]], p1: [[94.0], [95.0], [96.0]]), s0(p0: [[97.0], [98.0], [99.0]], p1: [[100.0], [101.0], [102.0]])]), p2: [[s0(p0: [[103.0], [104.0], [105.0]], p1: [[106.0], [107.0], [108.0]])]], p3: s1(p0: [s0(p0: [[109.0], [110.0], [111.0]], p1: [[112.0], [113.0], [114.0]])], p1: [s0(p0: [[115.0], [116.0], [117.0]], p1: [[118.0], [119.0], [120.0]]), s0(p0: [[121.0], [122.0], [123.0]], p1: [[124.0], [125.0], [126.0]])])), p1: s2(p0: [[s1(p0: [s0(p0: [[127.0], [128.0], [129.0]], p1: [[130.0], [131.0], [132.0]])], p1: [s0(p0: [[133.0], [134.0], [135.0]], p1: [[136.0], [137.0], [138.0]]), s0(p0: [[139.0], [140.0], [141.0]], p1: [[142.0], [143.0], [144.0]])])], [s1(p0: [s0(p0: [[145.0], [146.0], [147.0]], p1: [[148.0], [149.0], [150.0]])], p1: [s0(p0: [[151.0], [152.0], [153.0]], p1: [[154.0], [155.0], [156.0]]), s0(p0: [[157.0], [158.0], [159.0]], p1: [[160.0], [161.0], [162.0]])])]], p1: [[s0(p0: [[163.0], [164.0], [165.0]], p1: [[166.0], [167.0], [168.0]])]])), p1: s1(p0: [s0(p0: [[169.0], [170.0], [171.0]], p1: [[172.0], [173.0], [174.0]])], p1: [s0(p0: [[175.0], [176.0], [177.0]], p1: [[178.0], [179.0], [180.0]]), s0(p0: [[181.0], [182.0], [183.0]], p1: [[184.0], [185.0], [186.0]])]))], [s8(p0: s6(p0: s3(p0: [[187.0]], p1: s1(p0: [s0(p0: [[188.0], [189.0], [190.0]], p1: [[191.0], [192.0], [193.0]])], p1: [s0(p0: [[194.0], [195.0], [196.0]], p1: [[197.0], [198.0], [199.0]]), s0(p0: [[200.0], [201.0], [202.0]], p1: [[203.0], [204.0], [205.0]])]), p2: [[s0(p0: [[206.0], [207.0], [208.0]], p1: [[209.0], [210.0], [211.0]])]], p3: s1(p0: [s0(p0: [[212.0], [213.0], [214.0]], p1: [[215.0], [216.0], [217.0]])], p1: [s0(p0: [[218.0], [219.0], [220.0]], p1: [[221.0], [222.0], [223.0]]), s0(p0: [[224.0], [225.0], [226.0]], p1: [[227.0], [228.0], [229.0]])])), p1: s2(p0: [[s1(p0: [s0(p0: [[230.0], [231.0], [232.0]], p1: [[233.0], [234.0], [235.0]])], p1: [s0(p0: [[236.0], [237.0], [238.0]], p1: [[239.0], [240.0], [241.0]]), s0(p0: [[242.0], [243.0], [244.0]], p1: [[245.0], [246.0], [247.0]])])], [s1(p0: [s0(p0: [[248.0], [249.0], [250.0]], p1: [[251.0], [252.0], [253.0]])], p1: [s0(p0: [[254.0], [255.0], [256.0]], p1: [[257.0], [258.0], [259.0]]), s0(p0: [[260.0], [261.0], [262.0]], p1: [[263.0], [264.0], [265.0]])])]], p1: [[s0(p0: [[266.0], [267.0], [268.0]], p1: [[269.0], [270.0], [271.0]])]])), p1: s1(p0: [s0(p0: [[272.0], [273.0], [274.0]], p1: [[275.0], [276.0], [277.0]])], p1: [s0(p0: [[278.0], [279.0], [280.0]], p1: [[281.0], [282.0], [283.0]]), s0(p0: [[284.0], [285.0], [286.0]], p1: [[287.0], [288.0], [289.0]])]))], [s8(p0: s6(p0: s3(p0: [[290.0]], p1: s1(p0: [s0(p0: [[291.0], [292.0], [293.0]], p1: [[294.0], [295.0], [296.0]])], p1: [s0(p0: [[297.0], [298.0], [299.0]], p1: [[300.0], [301.0], [302.0]]), s0(p0: [[303.0], [304.0], [305.0]], p1: [[306.0], [307.0], [308.0]])]), p2: [[s0(p0: [[309.0], [310.0], [311.0]], p1: [[312.0], [313.0], [314.0]])]], p3: s1(p0: [s0(p0: [[315.0], [316.0], [317.0]], p1: [[318.0], [319.0], [320.0]])], p1: [s0(p0: [[321.0], [322.0], [323.0]], p1: [[324.0], [325.0], [326.0]]), s0(p0: [[327.0], [328.0], [329.0]], p1: [[330.0], [331.0], [332.0]])])), p1: s2(p0: [[s1(p0: [s0(p0: [[333.0], [334.0], [335.0]], p1: [[336.0], [337.0], [338.0]])], p1: [s0(p0: [[339.0], [340.0], [341.0]], p1: [[342.0], [343.0], [344.0]]), s0(p0: [[345.0], [346.0], [347.0]], p1: [[348.0], [349.0], [350.0]])])], [s1(p0: [s0(p0: [[351.0], [352.0], [353.0]], p1: [[354.0], [355.0], [356.0]])], p1: [s0(p0: [[357.0], [358.0], [359.0]], p1: [[360.0], [361.0], [362.0]]), s0(p0: [[363.0], [364.0], [365.0]], p1: [[366.0], [367.0], [368.0]])])]], p1: [[s0(p0: [[369.0], [370.0], [371.0]], p1: [[372.0], [373.0], [374.0]])]])), p1: s1(p0: [s0(p0: [[375.0], [376.0], [377.0]], p1: [[378.0], [379.0], [380.0]])], p1: [s0(p0: [[381.0], [382.0], [383.0]], p1: [[384.0], [385.0], [386.0]]), s0(p0: [[387.0], [388.0], [389.0]], p1: [[390.0], [391.0], [392.0]])]))]], p1: s8(p0: s6(p0: s3(p0: [[393.0]], p1: s1(p0: [s0(p0: [[394.0], [395.0], [396.0]], p1: [[397.0], [398.0], [399.0]])], p1: [s0(p0: [[400.0], [401.0], [402.0]], p1: [[403.0], [404.0], [405.0]]), s0(p0: [[406.0], [407.0], [408.0]], p1: [[409.0], [410.0], [411.0]])]), p2: [[s0(p0: [[412.0], [413.0], [414.0]], p1: [[415.0], [416.0], [417.0]])]], p3: s1(p0: [s0(p0: [[418.0], [419.0], [420.0]], p1: [[421.0], [422.0], [423.0]])], p1: [s0(p0: [[424.0], [425.0], [426.0]], p1: [[427.0], [428.0], [429.0]]), s0(p0: [[430.0], [431.0], [432.0]], p1: [[433.0], [434.0], [435.0]])])), p1: s2(p0: [[s1(p0: [s0(p0: [[436.0], [437.0], [438.0]], p1: [[439.0], [440.0], [441.0]])], p1: [s0(p0: [[442.0], [443.0], [444.0]], p1: [[445.0], [446.0], [447.0]]), s0(p0: [[448.0], [449.0], [450.0]], p1: [[451.0], [452.0], [453.0]])])], [s1(p0: [s0(p0: [[454.0], [455.0], [456.0]], p1: [[457.0], [458.0], [459.0]])], p1: [s0(p0: [[460.0], [461.0], [462.0]], p1: [[463.0], [464.0], [465.0]]), s0(p0: [[466.0], [467.0], [468.0]], p1: [[469.0], [470.0], [471.0]])])]], p1: [[s0(p0: [[472.0], [473.0], [474.0]], p1: [[475.0], [476.0], [477.0]])]])), p1: s1(p0: [s0(p0: [[478.0], [479.0], [480.0]], p1: [[481.0], [482.0], [483.0]])], p1: [s0(p0: [[484.0], [485.0], [486.0]], p1: [[487.0], [488.0], [489.0]]), s0(p0: [[490.0], [491.0], [492.0]], p1: [[493.0], [494.0], [495.0]])])))]
    let v2: s4 = s4(p0: s0(p0: [[496.0], [497.0], [498.0]], p1: [[499.0], [500.0], [501.0]]), p1: [s2(p0: [[s1(p0: [s0(p0: [[502.0], [503.0], [504.0]], p1: [[505.0], [506.0], [507.0]])], p1: [s0(p0: [[508.0], [509.0], [510.0]], p1: [[511.0], [512.0], [513.0]]), s0(p0: [[514.0], [515.0], [516.0]], p1: [[517.0], [518.0], [519.0]])])], [s1(p0: [s0(p0: [[520.0], [521.0], [522.0]], p1: [[523.0], [524.0], [525.0]])], p1: [s0(p0: [[526.0], [527.0], [528.0]], p1: [[529.0], [530.0], [531.0]]), s0(p0: [[532.0], [533.0], [534.0]], p1: [[535.0], [536.0], [537.0]])])]], p1: [[s0(p0: [[538.0], [539.0], [540.0]], p1: [[541.0], [542.0], [543.0]])]]), s2(p0: [[s1(p0: [s0(p0: [[544.0], [545.0], [546.0]], p1: [[547.0], [548.0], [549.0]])], p1: [s0(p0: [[550.0], [551.0], [552.0]], p1: [[553.0], [554.0], [555.0]]), s0(p0: [[556.0], [557.0], [558.0]], p1: [[559.0], [560.0], [561.0]])])], [s1(p0: [s0(p0: [[562.0], [563.0], [564.0]], p1: [[565.0], [566.0], [567.0]])], p1: [s0(p0: [[568.0], [569.0], [570.0]], p1: [[571.0], [572.0], [573.0]]), s0(p0: [[574.0], [575.0], [576.0]], p1: [[577.0], [578.0], [579.0]])])]], p1: [[s0(p0: [[580.0], [581.0], [582.0]], p1: [[583.0], [584.0], [585.0]])]]), s2(p0: [[s1(p0: [s0(p0: [[586.0], [587.0], [588.0]], p1: [[589.0], [590.0], [591.0]])], p1: [s0(p0: [[592.0], [593.0], [594.0]], p1: [[595.0], [596.0], [597.0]]), s0(p0: [[598.0], [599.0], [600.0]], p1: [[601.0], [602.0], [603.0]])])], [s1(p0: [s0(p0: [[604.0], [605.0], [606.0]], p1: [[607.0], [608.0], [609.0]])], p1: [s0(p0: [[610.0], [611.0], [612.0]], p1: [[613.0], [614.0], [615.0]]), s0(p0: [[616.0], [617.0], [618.0]], p1: [[619.0], [620.0], [621.0]])])]], p1: [[s0(p0: [[622.0], [623.0], [624.0]], p1: [[625.0], [626.0], [627.0]])]])])
    let v3: s5 = s5(p0: s3(p0: [[628.0]], p1: s1(p0: [s0(p0: [[629.0], [630.0], [631.0]], p1: [[632.0], [633.0], [634.0]])], p1: [s0(p0: [[635.0], [636.0], [637.0]], p1: [[638.0], [639.0], [640.0]]), s0(p0: [[641.0], [642.0], [643.0]], p1: [[644.0], [645.0], [646.0]])]), p2: [[s0(p0: [[647.0], [648.0], [649.0]], p1: [[650.0], [651.0], [652.0]])]], p3: s1(p0: [s0(p0: [[653.0], [654.0], [655.0]], p1: [[656.0], [657.0], [658.0]])], p1: [s0(p0: [[659.0], [660.0], [661.0]], p1: [[662.0], [663.0], [664.0]]), s0(p0: [[665.0], [666.0], [667.0]], p1: [[668.0], [669.0], [670.0]])])), p1: s1(p0: [s0(p0: [[671.0], [672.0], [673.0]], p1: [[674.0], [675.0], [676.0]])], p1: [s0(p0: [[677.0], [678.0], [679.0]], p1: [[680.0], [681.0], [682.0]]), s0(p0: [[683.0], [684.0], [685.0]], p1: [[686.0], [687.0], [688.0]])]))
    let v4: s1 = s1(p0: [s0(p0: [[689.0], [690.0], [691.0]], p1: [[692.0], [693.0], [694.0]])], p1: [s0(p0: [[695.0], [696.0], [697.0]], p1: [[698.0], [699.0], [700.0]]), s0(p0: [[701.0], [702.0], [703.0]], p1: [[704.0], [705.0], [706.0]])])
    let v5: Double = 707.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 707.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4, v5)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
