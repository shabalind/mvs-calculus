  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: [s0]
    var p2: [s0]
    var p3: s0
    var p4: [s0]
    var p5: s0
    var p6: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: [s1]
  } in
  struct s3 {
    var p0: s2
    var p1: s0
  } in
  let f47: (s3, s3) -> s3 = (v0: s3, v1: s3) -> s3 {
    let v4: s2 = v0.p0 in
    let v5: [s0] = v4.p0 in
    var v7: s2 = v4 in
    let v6: s0 = v5[0] in
    let v18: [s0] = v7.p0 in
    v7.p0 = v18 in
    v7.p0 = v5 in
    let v56: s3 = s3(v7, v6) in
    v56
  } in
  let noinline_f0: (s3, Float) -> Float = (v0: s3, v1: Float) -> Float {
    let v5: s3 = f47(v0, v0) in
    var v2: Float = v1 in
    let v7: [s3] = [v5] in
    let v3: s3 = v7[0] in
    let v11: s2 = v3.p0 in
    var v32: s2 = v11 in
    let v18: Float = v1 - v1 in
    let v24: [s1] = v32.p1 in
    let v22: s1 = v24[0] in
    let v37: [s0] = v32.p0 in
    let v38: Float = v2 + v18 in
    v32.p0 = v37 in
    let v43: s0 = v22.p3 in
    let v63: [[Float]] = v43.p0 in
    v32.p1 = v24 in
    var v42: [s0] = v37 in
    let v48: [Float] = v63[2] in
    let v36: Float = v48[0] in
    v32.p0 = v42 in
    let v145: Float = v36 * v38 in
    v145
  } in
  fun loop(i: Int, v0: s3, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(s2([s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]])], [s1([[s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]])]], [s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]])], [s0([[15.0], [16.0], [17.0]], [[18.0], [19.0]]), s0([[20.0], [21.0], [22.0]], [[23.0], [24.0]]), s0([[25.0], [26.0], [27.0]], [[28.0], [29.0]])], s0([[30.0], [31.0], [32.0]], [[33.0], [34.0]]), [s0([[35.0], [36.0], [37.0]], [[38.0], [39.0]]), s0([[40.0], [41.0], [42.0]], [[43.0], [44.0]])], s0([[45.0], [46.0], [47.0]], [[48.0], [49.0]]), s0([[50.0], [51.0], [52.0]], [[53.0], [54.0]]))]), s0([[55.0], [56.0], [57.0]], [[58.0], [59.0]])) in
    let v1: Float = 60.0 in
    let initialResult: Float = 60.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()