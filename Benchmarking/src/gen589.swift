  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: s1
    var p1: s1
  }
  struct s3 {
    var p0: s2
    var p1: s2
  }
  struct s4 {
    var p0: [s0]
    var p1: [s2]
  }
  struct s5 {
    var p0: [s3]
    var p1: [[s0]]
  }
  struct s6 {
    var p0: [[s4]]
    var p1: [[s5]]
  }
  struct s7 {
    var p0: s4
    var p1: [s0]
  }
  struct s8 {
    var p0: [s6]
    var p1: s6
  }
  struct s9 {
    var p0: s7
    var p1: s8
  }
  func f13(_ v0: s0) -> s0 {
    let v2: [[Double]] = v0.p2
    var v3: s0 = v0
    v3.p2 = v2
    let v13: s1 = s1(p0: v3, p1: v0)
    v3.p2 = v2
    let v61: s0 = v13.p1
    return v61
  }
  @inline(never)
  func f0(_ v0: s9, _ v1: [[s6]], _ v2: s1, _ v3: Double) -> Double {
    let v12: s0 = v2.p0
    let v9: s0 = f13(v12)
    let v29: [[Double]] = v9.p1
    let v34: [Double] = v29[0]
    let v51: Double = v34[0]
    return v51
  }
  func benchmark() {
    let v0: s9 = s9(p0: s7(p0: s4(p0: [s0(p0: [[0.0], [1.0]], p1: [[2.0]], p2: [[3.0], [4.0], [5.0]])], p1: [s2(p0: s1(p0: s0(p0: [[6.0], [7.0]], p1: [[8.0]], p2: [[9.0], [10.0], [11.0]]), p1: s0(p0: [[12.0], [13.0]], p1: [[14.0]], p2: [[15.0], [16.0], [17.0]])), p1: s1(p0: s0(p0: [[18.0], [19.0]], p1: [[20.0]], p2: [[21.0], [22.0], [23.0]]), p1: s0(p0: [[24.0], [25.0]], p1: [[26.0]], p2: [[27.0], [28.0], [29.0]])))]), p1: [s0(p0: [[30.0], [31.0]], p1: [[32.0]], p2: [[33.0], [34.0], [35.0]]), s0(p0: [[36.0], [37.0]], p1: [[38.0]], p2: [[39.0], [40.0], [41.0]])]), p1: s8(p0: [s6(p0: [[s4(p0: [s0(p0: [[42.0], [43.0]], p1: [[44.0]], p2: [[45.0], [46.0], [47.0]])], p1: [s2(p0: s1(p0: s0(p0: [[48.0], [49.0]], p1: [[50.0]], p2: [[51.0], [52.0], [53.0]]), p1: s0(p0: [[54.0], [55.0]], p1: [[56.0]], p2: [[57.0], [58.0], [59.0]])), p1: s1(p0: s0(p0: [[60.0], [61.0]], p1: [[62.0]], p2: [[63.0], [64.0], [65.0]]), p1: s0(p0: [[66.0], [67.0]], p1: [[68.0]], p2: [[69.0], [70.0], [71.0]])))])], [s4(p0: [s0(p0: [[72.0], [73.0]], p1: [[74.0]], p2: [[75.0], [76.0], [77.0]])], p1: [s2(p0: s1(p0: s0(p0: [[78.0], [79.0]], p1: [[80.0]], p2: [[81.0], [82.0], [83.0]]), p1: s0(p0: [[84.0], [85.0]], p1: [[86.0]], p2: [[87.0], [88.0], [89.0]])), p1: s1(p0: s0(p0: [[90.0], [91.0]], p1: [[92.0]], p2: [[93.0], [94.0], [95.0]]), p1: s0(p0: [[96.0], [97.0]], p1: [[98.0]], p2: [[99.0], [100.0], [101.0]])))])]], p1: [[s5(p0: [s3(p0: s2(p0: s1(p0: s0(p0: [[102.0], [103.0]], p1: [[104.0]], p2: [[105.0], [106.0], [107.0]]), p1: s0(p0: [[108.0], [109.0]], p1: [[110.0]], p2: [[111.0], [112.0], [113.0]])), p1: s1(p0: s0(p0: [[114.0], [115.0]], p1: [[116.0]], p2: [[117.0], [118.0], [119.0]]), p1: s0(p0: [[120.0], [121.0]], p1: [[122.0]], p2: [[123.0], [124.0], [125.0]]))), p1: s2(p0: s1(p0: s0(p0: [[126.0], [127.0]], p1: [[128.0]], p2: [[129.0], [130.0], [131.0]]), p1: s0(p0: [[132.0], [133.0]], p1: [[134.0]], p2: [[135.0], [136.0], [137.0]])), p1: s1(p0: s0(p0: [[138.0], [139.0]], p1: [[140.0]], p2: [[141.0], [142.0], [143.0]]), p1: s0(p0: [[144.0], [145.0]], p1: [[146.0]], p2: [[147.0], [148.0], [149.0]])))), s3(p0: s2(p0: s1(p0: s0(p0: [[150.0], [151.0]], p1: [[152.0]], p2: [[153.0], [154.0], [155.0]]), p1: s0(p0: [[156.0], [157.0]], p1: [[158.0]], p2: [[159.0], [160.0], [161.0]])), p1: s1(p0: s0(p0: [[162.0], [163.0]], p1: [[164.0]], p2: [[165.0], [166.0], [167.0]]), p1: s0(p0: [[168.0], [169.0]], p1: [[170.0]], p2: [[171.0], [172.0], [173.0]]))), p1: s2(p0: s1(p0: s0(p0: [[174.0], [175.0]], p1: [[176.0]], p2: [[177.0], [178.0], [179.0]]), p1: s0(p0: [[180.0], [181.0]], p1: [[182.0]], p2: [[183.0], [184.0], [185.0]])), p1: s1(p0: s0(p0: [[186.0], [187.0]], p1: [[188.0]], p2: [[189.0], [190.0], [191.0]]), p1: s0(p0: [[192.0], [193.0]], p1: [[194.0]], p2: [[195.0], [196.0], [197.0]]))))], p1: [[s0(p0: [[198.0], [199.0]], p1: [[200.0]], p2: [[201.0], [202.0], [203.0]])], [s0(p0: [[204.0], [205.0]], p1: [[206.0]], p2: [[207.0], [208.0], [209.0]])]])]])], p1: s6(p0: [[s4(p0: [s0(p0: [[210.0], [211.0]], p1: [[212.0]], p2: [[213.0], [214.0], [215.0]])], p1: [s2(p0: s1(p0: s0(p0: [[216.0], [217.0]], p1: [[218.0]], p2: [[219.0], [220.0], [221.0]]), p1: s0(p0: [[222.0], [223.0]], p1: [[224.0]], p2: [[225.0], [226.0], [227.0]])), p1: s1(p0: s0(p0: [[228.0], [229.0]], p1: [[230.0]], p2: [[231.0], [232.0], [233.0]]), p1: s0(p0: [[234.0], [235.0]], p1: [[236.0]], p2: [[237.0], [238.0], [239.0]])))])], [s4(p0: [s0(p0: [[240.0], [241.0]], p1: [[242.0]], p2: [[243.0], [244.0], [245.0]])], p1: [s2(p0: s1(p0: s0(p0: [[246.0], [247.0]], p1: [[248.0]], p2: [[249.0], [250.0], [251.0]]), p1: s0(p0: [[252.0], [253.0]], p1: [[254.0]], p2: [[255.0], [256.0], [257.0]])), p1: s1(p0: s0(p0: [[258.0], [259.0]], p1: [[260.0]], p2: [[261.0], [262.0], [263.0]]), p1: s0(p0: [[264.0], [265.0]], p1: [[266.0]], p2: [[267.0], [268.0], [269.0]])))])]], p1: [[s5(p0: [s3(p0: s2(p0: s1(p0: s0(p0: [[270.0], [271.0]], p1: [[272.0]], p2: [[273.0], [274.0], [275.0]]), p1: s0(p0: [[276.0], [277.0]], p1: [[278.0]], p2: [[279.0], [280.0], [281.0]])), p1: s1(p0: s0(p0: [[282.0], [283.0]], p1: [[284.0]], p2: [[285.0], [286.0], [287.0]]), p1: s0(p0: [[288.0], [289.0]], p1: [[290.0]], p2: [[291.0], [292.0], [293.0]]))), p1: s2(p0: s1(p0: s0(p0: [[294.0], [295.0]], p1: [[296.0]], p2: [[297.0], [298.0], [299.0]]), p1: s0(p0: [[300.0], [301.0]], p1: [[302.0]], p2: [[303.0], [304.0], [305.0]])), p1: s1(p0: s0(p0: [[306.0], [307.0]], p1: [[308.0]], p2: [[309.0], [310.0], [311.0]]), p1: s0(p0: [[312.0], [313.0]], p1: [[314.0]], p2: [[315.0], [316.0], [317.0]])))), s3(p0: s2(p0: s1(p0: s0(p0: [[318.0], [319.0]], p1: [[320.0]], p2: [[321.0], [322.0], [323.0]]), p1: s0(p0: [[324.0], [325.0]], p1: [[326.0]], p2: [[327.0], [328.0], [329.0]])), p1: s1(p0: s0(p0: [[330.0], [331.0]], p1: [[332.0]], p2: [[333.0], [334.0], [335.0]]), p1: s0(p0: [[336.0], [337.0]], p1: [[338.0]], p2: [[339.0], [340.0], [341.0]]))), p1: s2(p0: s1(p0: s0(p0: [[342.0], [343.0]], p1: [[344.0]], p2: [[345.0], [346.0], [347.0]]), p1: s0(p0: [[348.0], [349.0]], p1: [[350.0]], p2: [[351.0], [352.0], [353.0]])), p1: s1(p0: s0(p0: [[354.0], [355.0]], p1: [[356.0]], p2: [[357.0], [358.0], [359.0]]), p1: s0(p0: [[360.0], [361.0]], p1: [[362.0]], p2: [[363.0], [364.0], [365.0]]))))], p1: [[s0(p0: [[366.0], [367.0]], p1: [[368.0]], p2: [[369.0], [370.0], [371.0]])], [s0(p0: [[372.0], [373.0]], p1: [[374.0]], p2: [[375.0], [376.0], [377.0]])]])]])))
    let v1: [[s6]] = [[s6(p0: [[s4(p0: [s0(p0: [[378.0], [379.0]], p1: [[380.0]], p2: [[381.0], [382.0], [383.0]])], p1: [s2(p0: s1(p0: s0(p0: [[384.0], [385.0]], p1: [[386.0]], p2: [[387.0], [388.0], [389.0]]), p1: s0(p0: [[390.0], [391.0]], p1: [[392.0]], p2: [[393.0], [394.0], [395.0]])), p1: s1(p0: s0(p0: [[396.0], [397.0]], p1: [[398.0]], p2: [[399.0], [400.0], [401.0]]), p1: s0(p0: [[402.0], [403.0]], p1: [[404.0]], p2: [[405.0], [406.0], [407.0]])))])], [s4(p0: [s0(p0: [[408.0], [409.0]], p1: [[410.0]], p2: [[411.0], [412.0], [413.0]])], p1: [s2(p0: s1(p0: s0(p0: [[414.0], [415.0]], p1: [[416.0]], p2: [[417.0], [418.0], [419.0]]), p1: s0(p0: [[420.0], [421.0]], p1: [[422.0]], p2: [[423.0], [424.0], [425.0]])), p1: s1(p0: s0(p0: [[426.0], [427.0]], p1: [[428.0]], p2: [[429.0], [430.0], [431.0]]), p1: s0(p0: [[432.0], [433.0]], p1: [[434.0]], p2: [[435.0], [436.0], [437.0]])))])]], p1: [[s5(p0: [s3(p0: s2(p0: s1(p0: s0(p0: [[438.0], [439.0]], p1: [[440.0]], p2: [[441.0], [442.0], [443.0]]), p1: s0(p0: [[444.0], [445.0]], p1: [[446.0]], p2: [[447.0], [448.0], [449.0]])), p1: s1(p0: s0(p0: [[450.0], [451.0]], p1: [[452.0]], p2: [[453.0], [454.0], [455.0]]), p1: s0(p0: [[456.0], [457.0]], p1: [[458.0]], p2: [[459.0], [460.0], [461.0]]))), p1: s2(p0: s1(p0: s0(p0: [[462.0], [463.0]], p1: [[464.0]], p2: [[465.0], [466.0], [467.0]]), p1: s0(p0: [[468.0], [469.0]], p1: [[470.0]], p2: [[471.0], [472.0], [473.0]])), p1: s1(p0: s0(p0: [[474.0], [475.0]], p1: [[476.0]], p2: [[477.0], [478.0], [479.0]]), p1: s0(p0: [[480.0], [481.0]], p1: [[482.0]], p2: [[483.0], [484.0], [485.0]])))), s3(p0: s2(p0: s1(p0: s0(p0: [[486.0], [487.0]], p1: [[488.0]], p2: [[489.0], [490.0], [491.0]]), p1: s0(p0: [[492.0], [493.0]], p1: [[494.0]], p2: [[495.0], [496.0], [497.0]])), p1: s1(p0: s0(p0: [[498.0], [499.0]], p1: [[500.0]], p2: [[501.0], [502.0], [503.0]]), p1: s0(p0: [[504.0], [505.0]], p1: [[506.0]], p2: [[507.0], [508.0], [509.0]]))), p1: s2(p0: s1(p0: s0(p0: [[510.0], [511.0]], p1: [[512.0]], p2: [[513.0], [514.0], [515.0]]), p1: s0(p0: [[516.0], [517.0]], p1: [[518.0]], p2: [[519.0], [520.0], [521.0]])), p1: s1(p0: s0(p0: [[522.0], [523.0]], p1: [[524.0]], p2: [[525.0], [526.0], [527.0]]), p1: s0(p0: [[528.0], [529.0]], p1: [[530.0]], p2: [[531.0], [532.0], [533.0]]))))], p1: [[s0(p0: [[534.0], [535.0]], p1: [[536.0]], p2: [[537.0], [538.0], [539.0]])], [s0(p0: [[540.0], [541.0]], p1: [[542.0]], p2: [[543.0], [544.0], [545.0]])]])]])], [s6(p0: [[s4(p0: [s0(p0: [[546.0], [547.0]], p1: [[548.0]], p2: [[549.0], [550.0], [551.0]])], p1: [s2(p0: s1(p0: s0(p0: [[552.0], [553.0]], p1: [[554.0]], p2: [[555.0], [556.0], [557.0]]), p1: s0(p0: [[558.0], [559.0]], p1: [[560.0]], p2: [[561.0], [562.0], [563.0]])), p1: s1(p0: s0(p0: [[564.0], [565.0]], p1: [[566.0]], p2: [[567.0], [568.0], [569.0]]), p1: s0(p0: [[570.0], [571.0]], p1: [[572.0]], p2: [[573.0], [574.0], [575.0]])))])], [s4(p0: [s0(p0: [[576.0], [577.0]], p1: [[578.0]], p2: [[579.0], [580.0], [581.0]])], p1: [s2(p0: s1(p0: s0(p0: [[582.0], [583.0]], p1: [[584.0]], p2: [[585.0], [586.0], [587.0]]), p1: s0(p0: [[588.0], [589.0]], p1: [[590.0]], p2: [[591.0], [592.0], [593.0]])), p1: s1(p0: s0(p0: [[594.0], [595.0]], p1: [[596.0]], p2: [[597.0], [598.0], [599.0]]), p1: s0(p0: [[600.0], [601.0]], p1: [[602.0]], p2: [[603.0], [604.0], [605.0]])))])]], p1: [[s5(p0: [s3(p0: s2(p0: s1(p0: s0(p0: [[606.0], [607.0]], p1: [[608.0]], p2: [[609.0], [610.0], [611.0]]), p1: s0(p0: [[612.0], [613.0]], p1: [[614.0]], p2: [[615.0], [616.0], [617.0]])), p1: s1(p0: s0(p0: [[618.0], [619.0]], p1: [[620.0]], p2: [[621.0], [622.0], [623.0]]), p1: s0(p0: [[624.0], [625.0]], p1: [[626.0]], p2: [[627.0], [628.0], [629.0]]))), p1: s2(p0: s1(p0: s0(p0: [[630.0], [631.0]], p1: [[632.0]], p2: [[633.0], [634.0], [635.0]]), p1: s0(p0: [[636.0], [637.0]], p1: [[638.0]], p2: [[639.0], [640.0], [641.0]])), p1: s1(p0: s0(p0: [[642.0], [643.0]], p1: [[644.0]], p2: [[645.0], [646.0], [647.0]]), p1: s0(p0: [[648.0], [649.0]], p1: [[650.0]], p2: [[651.0], [652.0], [653.0]])))), s3(p0: s2(p0: s1(p0: s0(p0: [[654.0], [655.0]], p1: [[656.0]], p2: [[657.0], [658.0], [659.0]]), p1: s0(p0: [[660.0], [661.0]], p1: [[662.0]], p2: [[663.0], [664.0], [665.0]])), p1: s1(p0: s0(p0: [[666.0], [667.0]], p1: [[668.0]], p2: [[669.0], [670.0], [671.0]]), p1: s0(p0: [[672.0], [673.0]], p1: [[674.0]], p2: [[675.0], [676.0], [677.0]]))), p1: s2(p0: s1(p0: s0(p0: [[678.0], [679.0]], p1: [[680.0]], p2: [[681.0], [682.0], [683.0]]), p1: s0(p0: [[684.0], [685.0]], p1: [[686.0]], p2: [[687.0], [688.0], [689.0]])), p1: s1(p0: s0(p0: [[690.0], [691.0]], p1: [[692.0]], p2: [[693.0], [694.0], [695.0]]), p1: s0(p0: [[696.0], [697.0]], p1: [[698.0]], p2: [[699.0], [700.0], [701.0]]))))], p1: [[s0(p0: [[702.0], [703.0]], p1: [[704.0]], p2: [[705.0], [706.0], [707.0]])], [s0(p0: [[708.0], [709.0]], p1: [[710.0]], p2: [[711.0], [712.0], [713.0]])]])]])]]
    let v2: s1 = s1(p0: s0(p0: [[714.0], [715.0]], p1: [[716.0]], p2: [[717.0], [718.0], [719.0]]), p1: s0(p0: [[720.0], [721.0]], p1: [[722.0]], p2: [[723.0], [724.0], [725.0]]))
    let v3: Double = 726.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 726.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
