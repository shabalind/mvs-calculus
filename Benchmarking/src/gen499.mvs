  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: [s0]
    var p1: [s1]
  } in
  struct s7 {
    var p0: s2
    var p1: [s0]
  } in
  let f28: (s0) -> s0 = (v0: s0) -> s0 {
    v0
  } in
  let f19: (s0) -> s0 = (v0: s0) -> s0 {
    let v3: s0 = f28(v0) in
    var v4: s0 = v3 in
    v4 = v3 in
    let v8: [[Float]] = v4.p1 in
    v4.p1 = v8 in
    v4.p0 = v8 in
    v4
  } in
  let f2: (s0) -> s0 = (v0: s0) -> s0 {
    let v6: [[Float]] = v0.p0 in
    let v7: [Float] = v6[0] in
    let v3: s0 = f19(v0) in
    let v5: [[Float]] = v3.p1 in
    let v4: [Float] = v5[0] in
    let v9: s0 = f28(v0) in
    var v12: [[Float]] = v5 in
    v12[0] = v4 in
    let v31: Float = v7[0] in
    var v40: [Float] = v7 in
    v40 = v4 in
    v12[0] = v40 in
    v12[0] = v4 in
    v40[0] = v31 in
    v12[0] = v4 in
    v40 = v7 in
    let v44: [[Float]] = v9.p1 in
    let v85: s0 = s0(v12, v44) in
    v85
  } in
  let noinline_f0: (s2, [s0], [s7], Float) -> Float = (v0: s2, v1: [s0], v2: [s7], v3: Float) -> Float {
    var v5: Float = v3 in
    let v4: s0 = v1[0] in
    let v11: s0 = f2(v4) in
    let v9: [[Float]] = v11.p1 in
    var v8: [[Float]] = v9 in
    var v17: [[Float]] = v9 in
    let v19: [Float] = v17[0] in
    v17[0] = v19 in
    let v31: [Float] = v8[0] in
    v17[0] = v19 in
    let v24: [Float] = v8[0] in
    v17[0] = v31 in
    let v46: [Float] = v17[0] in
    v8[0] = v19 in
    let v112: Float = v24[0] in
    let v72: Float = v5 - v112 in
    v17[0] = v24 in
    v8[0] = v46 in
    let v186: Float = v3 / v72 in
    v8[0] = v24 in
    v186
  } in
  fun loop(i: Int, v0: s2, v1: [s0], v2: [s7], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2([s0([[0.0]], [[1.0]]), s0([[2.0]], [[3.0]])], [s1(s0([[4.0]], [[5.0]]), [s0([[6.0]], [[7.0]])]), s1(s0([[8.0]], [[9.0]]), [s0([[10.0]], [[11.0]])])]) in
    let v1: [s0] = [s0([[12.0]], [[13.0]]), s0([[14.0]], [[15.0]]), s0([[16.0]], [[17.0]])] in
    let v2: [s7] = [s7(s2([s0([[18.0]], [[19.0]]), s0([[20.0]], [[21.0]])], [s1(s0([[22.0]], [[23.0]]), [s0([[24.0]], [[25.0]])]), s1(s0([[26.0]], [[27.0]]), [s0([[28.0]], [[29.0]])])]), [s0([[30.0]], [[31.0]]), s0([[32.0]], [[33.0]])]), s7(s2([s0([[34.0]], [[35.0]]), s0([[36.0]], [[37.0]])], [s1(s0([[38.0]], [[39.0]]), [s0([[40.0]], [[41.0]])]), s1(s0([[42.0]], [[43.0]]), [s0([[44.0]], [[45.0]])])]), [s0([[46.0]], [[47.0]]), s0([[48.0]], [[49.0]])])] in
    let v3: Float = 50.0 in
    let initialResult: Float = 50.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()