  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
    var p2: [s0]
    var p3: [s0]
  } in
  struct s2 {
    var p0: [[s1]]
    var p1: [[s1]]
  } in
  let f14: (Float) -> Float = (v0: Float) -> Float {
    var v6: Float = v0 in
    var v4: Float = v0 in
    var v1: Float = v6 in
    var v7: Float = v0 in
    var v8: Float = v4 in
    v1 = v7 in
    var v5: Float = v4 in
    var v3: Float = v7 in
    var v11: Float = v3 in
    var v2: Float = v8 in
    let v13: [Float] = [v8, v5, v2, v8, v6, v1] in
    v1 = v11 in
    let v10: Float = v13[5] in
    let v14: Float = v13[2] in
    var v34: [Float] = v13 in
    let v32: Float = v34[2] in
    v34[3] = v14 in
    v34[3] = v10 in
    v34[3] = v0 in
    v34[2] = v2 in
    v32
  } in
  let noinline_f0: (s2, Float) -> Float = (v0: s2, v1: Float) -> Float {
    var v8: Float = v1 in
    let v9: Float = f14(v8) in
    var v7: Float = v8 in
    let v11: Float = f14(v9) in
    v8 = v7 in
    let v142: Float = v11 * v11 in
    v142
  } in
  fun loop(i: Int, v0: s2, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2([[s1(s0([[0.0], [1.0]], [[2.0]]), s0([[3.0], [4.0]], [[5.0]]), [s0([[6.0], [7.0]], [[8.0]]), s0([[9.0], [10.0]], [[11.0]])], [s0([[12.0], [13.0]], [[14.0]]), s0([[15.0], [16.0]], [[17.0]]), s0([[18.0], [19.0]], [[20.0]])])], [s1(s0([[21.0], [22.0]], [[23.0]]), s0([[24.0], [25.0]], [[26.0]]), [s0([[27.0], [28.0]], [[29.0]]), s0([[30.0], [31.0]], [[32.0]])], [s0([[33.0], [34.0]], [[35.0]]), s0([[36.0], [37.0]], [[38.0]]), s0([[39.0], [40.0]], [[41.0]])])]], [[s1(s0([[42.0], [43.0]], [[44.0]]), s0([[45.0], [46.0]], [[47.0]]), [s0([[48.0], [49.0]], [[50.0]]), s0([[51.0], [52.0]], [[53.0]])], [s0([[54.0], [55.0]], [[56.0]]), s0([[57.0], [58.0]], [[59.0]]), s0([[60.0], [61.0]], [[62.0]])])]]) in
    let v1: Float = 63.0 in
    let initialResult: Float = 63.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()