  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  let f82: (s0) -> s0 = (v0: s0) -> s0 {
    v0
  } in
  let noinline_f0: (s0, Float) -> Float = (v0: s0, v1: Float) -> Float {
    let v9: [[Float]] = v0.p1 in
    let v7: [Float] = v9[2] in
    var v10: [[Float]] = v9 in
    let v18: s0 = f82(v0) in
    let v15: [[Float]] = v18.p2 in
    let v27: [Float] = v10[0] in
    let v37: [Float] = v15[0] in
    v10[1] = v7 in
    var v75: [Float] = v37 in
    let v74: Float = v27[0] in
    let v86: Float = v75[0] in
    var v77: Float = v74 in
    let v82: Float = v77 - v86 in
    v82
  } in
  fun loop(i: Int, v0: s0, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0]], [[1.0], [2.0], [3.0]], [[4.0]]) in
    let v1: Float = 5.0 in
    let initialResult: Float = 5.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()