  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s1
    var p1: s1
  } in
  struct s3 {
    var p0: s2
    var p1: s0
  } in
  struct s4 {
    var p0: s3
    var p1: s0
    var p2: s3
    var p3: [s2]
  } in
  struct s5 {
    var p0: s4
    var p1: [s0]
  } in
  struct s7 {
    var p0: s1
    var p1: s5
  } in
  struct s8 {
    var p0: s7
    var p1: [s0]
  } in
  let f22: (Float) -> Float = (v0: Float) -> Float {
    var v2: Float = v0 in
    var v5: Float = v2 in
    v5 = v0 in
    var v3: Float = v5 in
    var v8: Float = v0 in
    var v7: Float = v2 in
    var v1: Float = v8 in
    let v11: Float = v2 / v1 in
    var v6: Float = v3 in
    var v12: Float = v0 in
    var v10: Float = v11 in
    let v4: [Float] = [v8, v2, v8, v2, v6, v10] in
    let v22: Float = v4[5] in
    var v9: [Float] = v4 in
    var v16: Float = v3 in
    let v21: Float = v4[1] in
    v9[0] = v12 in
    var v13: Float = v21 in
    var v20: Float = v6 in
    v9[5] = v7 in
    v9 = v4 in
    let v18: Float = v4[5] in
    var v29: [Float] = v4 in
    v9[3] = v13 in
    v29[4] = v7 in
    let v38: Float = v4[0] in
    v29[4] = v18 in
    v29[1] = v38 in
    let v37: Float = v29[2] in
    var v19: Float = v21 in
    var v14: [Float] = v9 in
    var v24: Float = v2 in
    v14[4] = v22 in
    v20 = v19 in
    var v51: Float = v1 in
    let v58: Float = v9[3] in
    let v47: Float = v14[0] in
    v9[4] = v20 in
    v14[3] = v0 in
    var v73: Float = v11 in
    var v40: [Float] = v4 in
    var v85: [Float] = v14 in
    v29[2] = v1 in
    var v39: [Float] = v4 in
    v9[5] = v37 in
    var v48: Float = v24 in
    let v137: Float = v4[3] in
    let v59: Float = v40[3] in
    let v72: Float = v14[2] in
    let v114: Float = v29[4] in
    let v143: Float = v39[3] in
    v85[0] = v51 in
    v85[0] = v73 in
    v9[1] = v114 in
    v40[3] = v47 in
    let v95: Float = v59 + v137 in
    v9[4] = v72 in
    v14[3] = v12 in
    v85[0] = v21 in
    var v88: [Float] = v85 in
    v39[0] = v48 in
    v40 = v88 in
    v40[5] = v58 in
    var v68: Float = v143 in
    v29[5] = v16 in
    v29[2] = v68 in
    v95
  } in
  let noinline_f0: ([[s8]], Float) -> Float = (v0: [[s8]], v1: Float) -> Float {
    let v6: Float = v1 / v1 in
    let v15: Float = f22(v1) in
    let v28: Float = f22(v15) in
    let v39: Float = v15 + v28 in
    let v110: Float = v39 / v6 in
    v110
  } in
  fun loop(i: Int, v0: [[s8]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s8]] = [[s8(s7(s1(s0([[0.0]], [[1.0], [2.0], [3.0]]), s0([[4.0]], [[5.0], [6.0], [7.0]])), s5(s4(s3(s2(s1(s0([[8.0]], [[9.0], [10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0], [15.0]])), s1(s0([[16.0]], [[17.0], [18.0], [19.0]]), s0([[20.0]], [[21.0], [22.0], [23.0]]))), s0([[24.0]], [[25.0], [26.0], [27.0]])), s0([[28.0]], [[29.0], [30.0], [31.0]]), s3(s2(s1(s0([[32.0]], [[33.0], [34.0], [35.0]]), s0([[36.0]], [[37.0], [38.0], [39.0]])), s1(s0([[40.0]], [[41.0], [42.0], [43.0]]), s0([[44.0]], [[45.0], [46.0], [47.0]]))), s0([[48.0]], [[49.0], [50.0], [51.0]])), [s2(s1(s0([[52.0]], [[53.0], [54.0], [55.0]]), s0([[56.0]], [[57.0], [58.0], [59.0]])), s1(s0([[60.0]], [[61.0], [62.0], [63.0]]), s0([[64.0]], [[65.0], [66.0], [67.0]]))), s2(s1(s0([[68.0]], [[69.0], [70.0], [71.0]]), s0([[72.0]], [[73.0], [74.0], [75.0]])), s1(s0([[76.0]], [[77.0], [78.0], [79.0]]), s0([[80.0]], [[81.0], [82.0], [83.0]]))), s2(s1(s0([[84.0]], [[85.0], [86.0], [87.0]]), s0([[88.0]], [[89.0], [90.0], [91.0]])), s1(s0([[92.0]], [[93.0], [94.0], [95.0]]), s0([[96.0]], [[97.0], [98.0], [99.0]])))]), [s0([[100.0]], [[101.0], [102.0], [103.0]]), s0([[104.0]], [[105.0], [106.0], [107.0]])])), [s0([[108.0]], [[109.0], [110.0], [111.0]]), s0([[112.0]], [[113.0], [114.0], [115.0]]), s0([[116.0]], [[117.0], [118.0], [119.0]])])]] in
    let v1: Float = 120.0 in
    let initialResult: Float = 120.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()