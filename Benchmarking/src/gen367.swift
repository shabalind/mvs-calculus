  import Dispatch
  struct s0 {
    var p0: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s2 {
    var p0: s1
    var p1: s1
  }
  struct s3 {
    var p0: s1
    var p1: [[s0]]
  }
  struct s4 {
    var p0: [s3]
    var p1: [s2]
  }
  struct s5 {
    var p0: [s1]
    var p1: Double
  }
  func f7(_ v0: s5) -> s5 {
    var v5: s5 = v0
    var v4: s5 = v5
    let v7: [s1] = v4.p0
    v4.p0 = v7
    return v4
  }
  @inline(never)
  func f0(_ v0: [[s2]], _ v1: [[s1]], _ v2: s5, _ v3: s4, _ v4: Double) -> Double {
    let v7: [s1] = v2.p0
    let v12: s5 = f7(v2)
    let v23: s5 = f7(v2)
    let v40: Double = v23.p1
    let v37: Double = v4 * v40
    var v65: s5 = v12
    let v119: Double = v65.p1
    v65.p0 = v7
    let v39: Double = v119 - v37
    var v225: Double = v39
    return v225
  }
  func benchmark() {
    let v0: [[s2]] = [[s2(p0: s1(p0: [s0(p0: [[0.0], [1.0], [2.0]]), s0(p0: [[3.0], [4.0], [5.0]]), s0(p0: [[6.0], [7.0], [8.0]])], p1: [s0(p0: [[9.0], [10.0], [11.0]]), s0(p0: [[12.0], [13.0], [14.0]])]), p1: s1(p0: [s0(p0: [[15.0], [16.0], [17.0]]), s0(p0: [[18.0], [19.0], [20.0]]), s0(p0: [[21.0], [22.0], [23.0]])], p1: [s0(p0: [[24.0], [25.0], [26.0]]), s0(p0: [[27.0], [28.0], [29.0]])]))], [s2(p0: s1(p0: [s0(p0: [[30.0], [31.0], [32.0]]), s0(p0: [[33.0], [34.0], [35.0]]), s0(p0: [[36.0], [37.0], [38.0]])], p1: [s0(p0: [[39.0], [40.0], [41.0]]), s0(p0: [[42.0], [43.0], [44.0]])]), p1: s1(p0: [s0(p0: [[45.0], [46.0], [47.0]]), s0(p0: [[48.0], [49.0], [50.0]]), s0(p0: [[51.0], [52.0], [53.0]])], p1: [s0(p0: [[54.0], [55.0], [56.0]]), s0(p0: [[57.0], [58.0], [59.0]])]))]]
    let v1: [[s1]] = [[s1(p0: [s0(p0: [[60.0], [61.0], [62.0]]), s0(p0: [[63.0], [64.0], [65.0]]), s0(p0: [[66.0], [67.0], [68.0]])], p1: [s0(p0: [[69.0], [70.0], [71.0]]), s0(p0: [[72.0], [73.0], [74.0]])])]]
    let v2: s5 = s5(p0: [s1(p0: [s0(p0: [[75.0], [76.0], [77.0]]), s0(p0: [[78.0], [79.0], [80.0]]), s0(p0: [[81.0], [82.0], [83.0]])], p1: [s0(p0: [[84.0], [85.0], [86.0]]), s0(p0: [[87.0], [88.0], [89.0]])]), s1(p0: [s0(p0: [[90.0], [91.0], [92.0]]), s0(p0: [[93.0], [94.0], [95.0]]), s0(p0: [[96.0], [97.0], [98.0]])], p1: [s0(p0: [[99.0], [100.0], [101.0]]), s0(p0: [[102.0], [103.0], [104.0]])]), s1(p0: [s0(p0: [[105.0], [106.0], [107.0]]), s0(p0: [[108.0], [109.0], [110.0]]), s0(p0: [[111.0], [112.0], [113.0]])], p1: [s0(p0: [[114.0], [115.0], [116.0]]), s0(p0: [[117.0], [118.0], [119.0]])])], p1: 120.0)
    let v3: s4 = s4(p0: [s3(p0: s1(p0: [s0(p0: [[121.0], [122.0], [123.0]]), s0(p0: [[124.0], [125.0], [126.0]]), s0(p0: [[127.0], [128.0], [129.0]])], p1: [s0(p0: [[130.0], [131.0], [132.0]]), s0(p0: [[133.0], [134.0], [135.0]])]), p1: [[s0(p0: [[136.0], [137.0], [138.0]])], [s0(p0: [[139.0], [140.0], [141.0]])]])], p1: [s2(p0: s1(p0: [s0(p0: [[142.0], [143.0], [144.0]]), s0(p0: [[145.0], [146.0], [147.0]]), s0(p0: [[148.0], [149.0], [150.0]])], p1: [s0(p0: [[151.0], [152.0], [153.0]]), s0(p0: [[154.0], [155.0], [156.0]])]), p1: s1(p0: [s0(p0: [[157.0], [158.0], [159.0]]), s0(p0: [[160.0], [161.0], [162.0]]), s0(p0: [[163.0], [164.0], [165.0]])], p1: [s0(p0: [[166.0], [167.0], [168.0]]), s0(p0: [[169.0], [170.0], [171.0]])])), s2(p0: s1(p0: [s0(p0: [[172.0], [173.0], [174.0]]), s0(p0: [[175.0], [176.0], [177.0]]), s0(p0: [[178.0], [179.0], [180.0]])], p1: [s0(p0: [[181.0], [182.0], [183.0]]), s0(p0: [[184.0], [185.0], [186.0]])]), p1: s1(p0: [s0(p0: [[187.0], [188.0], [189.0]]), s0(p0: [[190.0], [191.0], [192.0]]), s0(p0: [[193.0], [194.0], [195.0]])], p1: [s0(p0: [[196.0], [197.0], [198.0]]), s0(p0: [[199.0], [200.0], [201.0]])]))])
    let v4: Double = 202.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 202.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
