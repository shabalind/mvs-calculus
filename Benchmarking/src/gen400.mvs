  let noinline_f0: (Float) -> Float = (v0: Float) -> Float {
    var v5: Float = v0 in
    var v1: Float = v5 in
    var v7: Float = v1 in
    var v13: Float = v7 in
    var v2: Float = v13 in
    var v9: Float = v5 in
    var v11: Float = v0 in
    var v12: Float = v1 in
    var v14: Float = v9 in
    var v20: Float = v1 in
    var v18: Float = v9 in
    var v32: Float = v12 in
    var v15: Float = v20 in
    var v24: Float = v20 in
    var v21: Float = v24 in
    var v29: Float = v7 in
    var v39: Float = v21 in
    let v26: [Float] = [v21, v15, v29, v18, v14, v11, v39] in
    let v31: Float = v26[1] in
    var v22: [Float] = v26 in
    let v57: Float = v22[6] in
    var v46: [Float] = v26 in
    var v36: Float = v2 in
    v46[5] = v57 in
    v1 = v57 in
    v18 = v31 in
    let v55: Float = v46[4] in
    let v97: [Float] = [v36, v55] in
    var v80: [Float] = v97 in
    var v79: [Float] = v80 in
    v24 = v32 in
    var v64: [Float] = v79 in
    let v76: Float = v22[0] in
    let v66: Float = v64[0] in
    v5 = v76 in
    v66
  } in
  fun loop(i: Int, v0: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0) in
      loop(i + 1, v0, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: Float = 0.0 in
    let initialResult: Float = 0.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()