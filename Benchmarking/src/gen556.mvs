  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s1]
    var p1: s1
  } in
  struct s5 {
    var p0: [s0]
    var p1: [s1]
  } in
  struct s6 {
    var p0: s0
    var p1: Float
    var p2: s5
    var p3: s1
  } in
  struct s10 {
    var p0: [s1]
    var p1: [s2]
  } in
  struct s11 {
    var p0: [s6]
    var p1: [s10]
  } in
  let f24: (Float) -> Float = (v0: Float) -> Float {
    let v3: [Float] = [v0, v0, v0] in
    let v4: Float = v3[2] in
    let v7: Float = v3[2] in
    var v6: [Float] = v3 in
    var v8: [Float] = v6 in
    let v2: Float = v6[2] in
    var v12: [Float] = v6 in
    var v13: [Float] = v12 in
    v8[2] = v7 in
    let v5: Float = v12[1] in
    var v11: [Float] = v13 in
    var v14: [Float] = v6 in
    var v18: [Float] = v8 in
    var v24: [Float] = v11 in
    let v73: Float = v18[2] in
    let v23: Float = v14[2] in
    let v49: Float = v2 / v73 in
    var v43: [Float] = v6 in
    v14[2] = v5 in
    let v103: Float = v43[1] in
    let v83: Float = v24[2] in
    v11[1] = v4 in
    let v128: [Float] = [v49, v83, v5, v23, v49, v103] in
    let v116: [[Float]] = [v128, v128, v128, v128, v128, v128, v128] in
    let v97: [Float] = v116[3] in
    var v154: [Float] = v97 in
    var v112: [Float] = v154 in
    let v106: Float = v112[3] in
    v106
  } in
  let noinline_f0: ([[s11]], Float) -> Float = (v0: [[s11]], v1: Float) -> Float {
    let v7: Float = f24(v1) in
    let v49: Float = f24(v1) in
    let v44: Float = f24(v49) in
    let v46: Float = v44 * v7 in
    v46
  } in
  fun loop(i: Int, v0: [[s11]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s11]] = [[s11([s6(s0([[0.0], [1.0]], [[2.0], [3.0]], [[4.0], [5.0]]), 6.0, s5([s0([[7.0], [8.0]], [[9.0], [10.0]], [[11.0], [12.0]]), s0([[13.0], [14.0]], [[15.0], [16.0]], [[17.0], [18.0]]), s0([[19.0], [20.0]], [[21.0], [22.0]], [[23.0], [24.0]])], [s1(s0([[25.0], [26.0]], [[27.0], [28.0]], [[29.0], [30.0]]), s0([[31.0], [32.0]], [[33.0], [34.0]], [[35.0], [36.0]])), s1(s0([[37.0], [38.0]], [[39.0], [40.0]], [[41.0], [42.0]]), s0([[43.0], [44.0]], [[45.0], [46.0]], [[47.0], [48.0]])), s1(s0([[49.0], [50.0]], [[51.0], [52.0]], [[53.0], [54.0]]), s0([[55.0], [56.0]], [[57.0], [58.0]], [[59.0], [60.0]]))]), s1(s0([[61.0], [62.0]], [[63.0], [64.0]], [[65.0], [66.0]]), s0([[67.0], [68.0]], [[69.0], [70.0]], [[71.0], [72.0]]))), s6(s0([[73.0], [74.0]], [[75.0], [76.0]], [[77.0], [78.0]]), 79.0, s5([s0([[80.0], [81.0]], [[82.0], [83.0]], [[84.0], [85.0]]), s0([[86.0], [87.0]], [[88.0], [89.0]], [[90.0], [91.0]]), s0([[92.0], [93.0]], [[94.0], [95.0]], [[96.0], [97.0]])], [s1(s0([[98.0], [99.0]], [[100.0], [101.0]], [[102.0], [103.0]]), s0([[104.0], [105.0]], [[106.0], [107.0]], [[108.0], [109.0]])), s1(s0([[110.0], [111.0]], [[112.0], [113.0]], [[114.0], [115.0]]), s0([[116.0], [117.0]], [[118.0], [119.0]], [[120.0], [121.0]])), s1(s0([[122.0], [123.0]], [[124.0], [125.0]], [[126.0], [127.0]]), s0([[128.0], [129.0]], [[130.0], [131.0]], [[132.0], [133.0]]))]), s1(s0([[134.0], [135.0]], [[136.0], [137.0]], [[138.0], [139.0]]), s0([[140.0], [141.0]], [[142.0], [143.0]], [[144.0], [145.0]])))], [s10([s1(s0([[146.0], [147.0]], [[148.0], [149.0]], [[150.0], [151.0]]), s0([[152.0], [153.0]], [[154.0], [155.0]], [[156.0], [157.0]]))], [s2([s1(s0([[158.0], [159.0]], [[160.0], [161.0]], [[162.0], [163.0]]), s0([[164.0], [165.0]], [[166.0], [167.0]], [[168.0], [169.0]])), s1(s0([[170.0], [171.0]], [[172.0], [173.0]], [[174.0], [175.0]]), s0([[176.0], [177.0]], [[178.0], [179.0]], [[180.0], [181.0]])), s1(s0([[182.0], [183.0]], [[184.0], [185.0]], [[186.0], [187.0]]), s0([[188.0], [189.0]], [[190.0], [191.0]], [[192.0], [193.0]]))], s1(s0([[194.0], [195.0]], [[196.0], [197.0]], [[198.0], [199.0]]), s0([[200.0], [201.0]], [[202.0], [203.0]], [[204.0], [205.0]])))])])], [s11([s6(s0([[206.0], [207.0]], [[208.0], [209.0]], [[210.0], [211.0]]), 212.0, s5([s0([[213.0], [214.0]], [[215.0], [216.0]], [[217.0], [218.0]]), s0([[219.0], [220.0]], [[221.0], [222.0]], [[223.0], [224.0]]), s0([[225.0], [226.0]], [[227.0], [228.0]], [[229.0], [230.0]])], [s1(s0([[231.0], [232.0]], [[233.0], [234.0]], [[235.0], [236.0]]), s0([[237.0], [238.0]], [[239.0], [240.0]], [[241.0], [242.0]])), s1(s0([[243.0], [244.0]], [[245.0], [246.0]], [[247.0], [248.0]]), s0([[249.0], [250.0]], [[251.0], [252.0]], [[253.0], [254.0]])), s1(s0([[255.0], [256.0]], [[257.0], [258.0]], [[259.0], [260.0]]), s0([[261.0], [262.0]], [[263.0], [264.0]], [[265.0], [266.0]]))]), s1(s0([[267.0], [268.0]], [[269.0], [270.0]], [[271.0], [272.0]]), s0([[273.0], [274.0]], [[275.0], [276.0]], [[277.0], [278.0]]))), s6(s0([[279.0], [280.0]], [[281.0], [282.0]], [[283.0], [284.0]]), 285.0, s5([s0([[286.0], [287.0]], [[288.0], [289.0]], [[290.0], [291.0]]), s0([[292.0], [293.0]], [[294.0], [295.0]], [[296.0], [297.0]]), s0([[298.0], [299.0]], [[300.0], [301.0]], [[302.0], [303.0]])], [s1(s0([[304.0], [305.0]], [[306.0], [307.0]], [[308.0], [309.0]]), s0([[310.0], [311.0]], [[312.0], [313.0]], [[314.0], [315.0]])), s1(s0([[316.0], [317.0]], [[318.0], [319.0]], [[320.0], [321.0]]), s0([[322.0], [323.0]], [[324.0], [325.0]], [[326.0], [327.0]])), s1(s0([[328.0], [329.0]], [[330.0], [331.0]], [[332.0], [333.0]]), s0([[334.0], [335.0]], [[336.0], [337.0]], [[338.0], [339.0]]))]), s1(s0([[340.0], [341.0]], [[342.0], [343.0]], [[344.0], [345.0]]), s0([[346.0], [347.0]], [[348.0], [349.0]], [[350.0], [351.0]])))], [s10([s1(s0([[352.0], [353.0]], [[354.0], [355.0]], [[356.0], [357.0]]), s0([[358.0], [359.0]], [[360.0], [361.0]], [[362.0], [363.0]]))], [s2([s1(s0([[364.0], [365.0]], [[366.0], [367.0]], [[368.0], [369.0]]), s0([[370.0], [371.0]], [[372.0], [373.0]], [[374.0], [375.0]])), s1(s0([[376.0], [377.0]], [[378.0], [379.0]], [[380.0], [381.0]]), s0([[382.0], [383.0]], [[384.0], [385.0]], [[386.0], [387.0]])), s1(s0([[388.0], [389.0]], [[390.0], [391.0]], [[392.0], [393.0]]), s0([[394.0], [395.0]], [[396.0], [397.0]], [[398.0], [399.0]]))], s1(s0([[400.0], [401.0]], [[402.0], [403.0]], [[404.0], [405.0]]), s0([[406.0], [407.0]], [[408.0], [409.0]], [[410.0], [411.0]])))])])]] in
    let v1: Float = 412.0 in
    let initialResult: Float = 412.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()