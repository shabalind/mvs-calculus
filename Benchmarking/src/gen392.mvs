  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: s1
  } in
  let f110: (s1, s1) -> s1 = (v0: s1, v1: s1) -> s1 {
    var v6: s1 = v0 in
    var v3: s1 = v6 in
    var v7: s1 = v1 in
    let v8: s0 = v3.p1 in
    let v11: s0 = v7.p1 in
    let v4: [s1] = [v6, v6, v7, v3, v0] in
    var v10: s0 = v8 in
    v6.p1 = v11 in
    var v18: [s1] = v4 in
    let v13: s1 = v18[2] in
    let v20: [[Float]] = v8.p1 in
    v6.p1 = v8 in
    v10.p1 = v20 in
    v3.p1 = v11 in
    v6.p1 = v10 in
    v10.p0 = v20 in
    v18[1] = v6 in
    v13
  } in
  let f104: (s1) -> s1 = (v0: s1) -> s1 {
    let v7: s0 = v0.p1 in
    var v1: s1 = v0 in
    let v6: s1 = f110(v1, v0) in
    v1.p1 = v7 in
    var v3: s1 = v6 in
    let v11: s1 = f110(v3, v0) in
    let v9: s1 = f110(v6, v0) in
    let v22: s1 = f110(v1, v9) in
    let v20: s1 = f110(v22, v9) in
    let v38: s1 = f110(v20, v9) in
    var v23: s1 = v11 in
    let v61: s1 = f110(v23, v38) in
    v61
  } in
  let noinline_f0: (s2, [s2], Float) -> Float = (v0: s2, v1: [s2], v2: Float) -> Float {
    let v7: s1 = v0.p1 in
    let v6: s1 = f104(v7) in
    let v9: s0 = v6.p0 in
    let v10: [[Float]] = v9.p0 in
    var v17: [[Float]] = v10 in
    let v22: [Float] = v10[0] in
    let v20: [Float] = v17[1] in
    v17[0] = v20 in
    var v56: [[Float]] = v17 in
    v17[1] = v22 in
    let v37: Float = v20[0] in
    var v67: [Float] = v22 in
    v56[0] = v20 in
    v17 = v56 in
    v56[0] = v67 in
    let v104: Float = v37 / v37 in
    v104
  } in
  fun loop(i: Int, v0: s2, v1: [s2], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2([s0([[0.0], [1.0]], [[2.0], [3.0]]), s0([[4.0], [5.0]], [[6.0], [7.0]]), s0([[8.0], [9.0]], [[10.0], [11.0]])], s1(s0([[12.0], [13.0]], [[14.0], [15.0]]), s0([[16.0], [17.0]], [[18.0], [19.0]]))) in
    let v1: [s2] = [s2([s0([[20.0], [21.0]], [[22.0], [23.0]]), s0([[24.0], [25.0]], [[26.0], [27.0]]), s0([[28.0], [29.0]], [[30.0], [31.0]])], s1(s0([[32.0], [33.0]], [[34.0], [35.0]]), s0([[36.0], [37.0]], [[38.0], [39.0]]))), s2([s0([[40.0], [41.0]], [[42.0], [43.0]]), s0([[44.0], [45.0]], [[46.0], [47.0]]), s0([[48.0], [49.0]], [[50.0], [51.0]])], s1(s0([[52.0], [53.0]], [[54.0], [55.0]]), s0([[56.0], [57.0]], [[58.0], [59.0]]))), s2([s0([[60.0], [61.0]], [[62.0], [63.0]]), s0([[64.0], [65.0]], [[66.0], [67.0]]), s0([[68.0], [69.0]], [[70.0], [71.0]])], s1(s0([[72.0], [73.0]], [[74.0], [75.0]]), s0([[76.0], [77.0]], [[78.0], [79.0]])))] in
    let v2: Float = 80.0 in
    let initialResult: Float = 80.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()