  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let f63: (Float, s0) -> Float = (v0: Float, v1: s0) -> Float {
    let v6: Float = v0 / v0 in
    var v16: Float = v6 in
    v16
  } in
  let noinline_f0: ([s0], Float) -> Float = (v0: [s0], v1: Float) -> Float {
    var v7: Float = v1 in
    let v2: Float = v1 * v7 in
    var v3: Float = v1 in
    v3 = v7 in
    let v11: s0 = v0[0] in
    let v15: Float = f63(v1, v11) in
    let v17: [Float] = [v2, v1, v15, v7, v15, v1] in
    v7 = v3 in
    let v49: Float = v17[4] in
    v49
  } in
  fun loop(i: Int, v0: [s0], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]])] in
    let v1: Float = 6.0 in
    let initialResult: Float = 6.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()