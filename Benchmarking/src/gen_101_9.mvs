  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s1
  } in
  let noinline_f0: (s2, s0, [[s0]], Float) -> Float = (v0: s2, v1: s0, v2: [[s0]], v3: Float) -> Float {
    let v7: [[Float]] = v1.p1 in
    let v10: [[Float]] = v1.p0 in
    let v20: Float = v3 / v3 in
    let v11: [Float] = v10[0] in
    let v18: [Float] = v7[0] in
    let v37: Float = v18[0] in
    var v55: [Float] = v11 in
    var v40: [Float] = v55 in
    v55[0] = v3 in
    let v81: Float = v40[0] in
    let v56: Float = v81 * v37 in
    v55[0] = v81 in
    v40[0] = v20 in
    v55 = v40 in
    v56
  } in
  fun loop(i: Int, v0: s2, v1: s0, v2: [[s0]], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(s1(s0([[0.0]], [[1.0], [2.0], [3.0]]), s0([[4.0]], [[5.0], [6.0], [7.0]]))) in
    let v1: s0 = s0([[8.0]], [[9.0], [10.0], [11.0]]) in
    let v2: [[s0]] = [[s0([[12.0]], [[13.0], [14.0], [15.0]])], [s0([[16.0]], [[17.0], [18.0], [19.0]])], [s0([[20.0]], [[21.0], [22.0], [23.0]])]] in
    let v3: Float = 24.0 in
    let initialResult: Float = 24.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()