  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s3 {
    var p0: s0
    var p1: s1
  } in
  let f43: (s3) -> s3 = (v0: s3) -> s3 {
    let v5: [s3] = [v0] in
    let v3: s3 = v5[0] in
    let v12: s3 = v5[0] in
    var v8: [s3] = v5 in
    v8[0] = v12 in
    v8[0] = v0 in
    v8[0] = v3 in
    var v25: [s3] = v8 in
    var v188: [s3] = v25 in
    let v145: s3 = v188[0] in
    v145
  } in
  let noinline_f0: ([[s3]], Float) -> Float = (v0: [[s3]], v1: Float) -> Float {
    let v4: [s3] = v0[0] in
    let v5: s3 = v4[0] in
    let v12: [Float] = [v1] in
    let v6: s3 = f43(v5) in
    let v8: Float = v12[0] in
    let v14: s0 = v6.p0 in
    var v15: [Float] = v12 in
    let v9: [[Float]] = v14.p1 in
    let v21: [Float] = v9[2] in
    let v23: Float = v21[0] in
    v15[0] = v23 in
    let v29: Float = v8 + v8 in
    v15 = v21 in
    var v58: [Float] = v21 in
    let v43: Float = v58[0] in
    v58[0] = v8 in
    v58[0] = v29 in
    let v105: Float = v15[0] in
    let v118: Float = v23 + v105 in
    v15[0] = v29 in
    let v185: Float = v118 / v43 in
    v185
  } in
  fun loop(i: Int, v0: [[s3]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s3]] = [[s3(s0([[0.0]], [[1.0], [2.0], [3.0]]), s1(s0([[4.0]], [[5.0], [6.0], [7.0]]), [s0([[8.0]], [[9.0], [10.0], [11.0]])]))], [s3(s0([[12.0]], [[13.0], [14.0], [15.0]]), s1(s0([[16.0]], [[17.0], [18.0], [19.0]]), [s0([[20.0]], [[21.0], [22.0], [23.0]])]))]] in
    let v1: Float = 24.0 in
    let initialResult: Float = 24.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()