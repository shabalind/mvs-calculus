  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
    var p2: [[s0]]
  } in
  struct s2 {
    var p0: [s0]
    var p1: s1
  } in
  struct s3 {
    var p0: [s1]
    var p1: s2
  } in
  struct s4 {
    var p0: s3
    var p1: s1
  } in
  let f105: (s3) -> s3 = (v0: s3) -> s3 {
    let v4: [s1] = v0.p0 in
    var v9: [s1] = v4 in
    let v8: [s1] = v0.p0 in
    let v2: [s1] = v0.p0 in
    let v7: s1 = v8[1] in
    v9 = v4 in
    let v6: s1 = v9[1] in
    let v11: s1 = v2[1] in
    let v12: [[s0]] = v6.p2 in
    let v14: [s1] = v0.p0 in
    var v15: [s1] = v8 in
    let v19: s2 = v0.p1 in
    let v37: s3 = s3(v14, v19) in
    v15[0] = v7 in
    let v27: [s0] = v12[1] in
    let v24: [s0] = v6.p0 in
    var v13: s2 = v19 in
    let v16: s0 = v27[0] in
    let v25: [[s0]] = v7.p2 in
    let v39: s1 = v13.p1 in
    v13.p1 = v39 in
    v13.p1 = v11 in
    v15 = v8 in
    v15[0] = v6 in
    v13.p0 = v27 in
    v9[1] = v7 in
    var v21: s1 = v39 in
    var v44: [s0] = v24 in
    var v35: s2 = v19 in
    let v90: s1 = v19.p1 in
    v35.p1 = v6 in
    v21.p0 = v24 in
    var v59: s1 = v21 in
    let v65: [s0] = v25[1] in
    let v47: [[s0]] = [v44, v24] in
    var v71: s1 = v59 in
    v35.p1 = v71 in
    var v73: s3 = v37 in
    v9 = v15 in
    var v124: s3 = v73 in
    v35.p1 = v90 in
    v9[0] = v11 in
    let v62: [s0] = v47[1] in
    v124.p0 = v15 in
    v35.p0 = v65 in
    v59.p0 = v62 in
    v73.p1 = v35 in
    v44[2] = v16 in
    v124
  } in
  let f103: ([s1]) -> [s1] = (v0: [s1]) -> [s1] {
    var v6: [s1] = v0 in
    let v5: s1 = v6[0] in
    let v8: [[s0]] = v5.p2 in
    v6[1] = v5 in
    let v12: [s0] = v5.p0 in
    let v16: [s0] = v8[2] in
    let v18: s0 = v16[0] in
    let v24: [[s0]] = v5.p2 in
    v6[0] = v5 in
    let v13: s1 = s1(v12, v18, v24) in
    let v17: [s0] = v8[0] in
    let v48: s2 = s2(v17, v13) in
    let v113: s3 = s3(v6, v48) in
    let v169: s3 = f105(v113) in
    let v262: s3 = f105(v169) in
    let v121: s3 = f105(v262) in
    let v209: [s1] = v121.p0 in
    v209
  } in
  let f79: (s4) -> s4 = (v0: s4) -> s4 {
    var v1: s4 = v0 in
    let v3: s3 = v1.p0 in
    let v6: [s1] = v3.p0 in
    let v2: [s1] = f103(v6) in
    var v10: s4 = v1 in
    let v7: s1 = v2[0] in
    v1.p1 = v7 in
    v10
  } in
  let noinline_f0: ([s4], Float) -> Float = (v0: [s4], v1: Float) -> Float {
    let v4: s4 = v0[0] in
    let v6: s4 = f79(v4) in
    let v5: s3 = v6.p0 in
    let v39: [s1] = v5.p0 in
    let v33: s1 = v39[1] in
    let v40: s0 = v33.p1 in
    let v34: [[Float]] = v40.p1 in
    let v32: [Float] = [v1, v1, v1] in
    let v44: Float = v32[1] in
    let v61: Float = v32[0] in
    let v47: [Float] = v34[0] in
    let v174: Float = v1 / v44 in
    var v138: [Float] = v47 in
    v138[0] = v61 in
    v138[0] = v174 in
    let v283: Float = v47[0] in
    let v166: Float = v138[0] in
    let v380: Float = v166 + v283 in
    v380
  } in
  fun loop(i: Int, v0: [s4], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s4] = [s4(s3([s1([s0([[0.0], [1.0]], [[2.0], [3.0]]), s0([[4.0], [5.0]], [[6.0], [7.0]]), s0([[8.0], [9.0]], [[10.0], [11.0]])], s0([[12.0], [13.0]], [[14.0], [15.0]]), [[s0([[16.0], [17.0]], [[18.0], [19.0]])], [s0([[20.0], [21.0]], [[22.0], [23.0]])], [s0([[24.0], [25.0]], [[26.0], [27.0]])]]), s1([s0([[28.0], [29.0]], [[30.0], [31.0]]), s0([[32.0], [33.0]], [[34.0], [35.0]]), s0([[36.0], [37.0]], [[38.0], [39.0]])], s0([[40.0], [41.0]], [[42.0], [43.0]]), [[s0([[44.0], [45.0]], [[46.0], [47.0]])], [s0([[48.0], [49.0]], [[50.0], [51.0]])], [s0([[52.0], [53.0]], [[54.0], [55.0]])]])], s2([s0([[56.0], [57.0]], [[58.0], [59.0]])], s1([s0([[60.0], [61.0]], [[62.0], [63.0]]), s0([[64.0], [65.0]], [[66.0], [67.0]]), s0([[68.0], [69.0]], [[70.0], [71.0]])], s0([[72.0], [73.0]], [[74.0], [75.0]]), [[s0([[76.0], [77.0]], [[78.0], [79.0]])], [s0([[80.0], [81.0]], [[82.0], [83.0]])], [s0([[84.0], [85.0]], [[86.0], [87.0]])]]))), s1([s0([[88.0], [89.0]], [[90.0], [91.0]]), s0([[92.0], [93.0]], [[94.0], [95.0]]), s0([[96.0], [97.0]], [[98.0], [99.0]])], s0([[100.0], [101.0]], [[102.0], [103.0]]), [[s0([[104.0], [105.0]], [[106.0], [107.0]])], [s0([[108.0], [109.0]], [[110.0], [111.0]])], [s0([[112.0], [113.0]], [[114.0], [115.0]])]])), s4(s3([s1([s0([[116.0], [117.0]], [[118.0], [119.0]]), s0([[120.0], [121.0]], [[122.0], [123.0]]), s0([[124.0], [125.0]], [[126.0], [127.0]])], s0([[128.0], [129.0]], [[130.0], [131.0]]), [[s0([[132.0], [133.0]], [[134.0], [135.0]])], [s0([[136.0], [137.0]], [[138.0], [139.0]])], [s0([[140.0], [141.0]], [[142.0], [143.0]])]]), s1([s0([[144.0], [145.0]], [[146.0], [147.0]]), s0([[148.0], [149.0]], [[150.0], [151.0]]), s0([[152.0], [153.0]], [[154.0], [155.0]])], s0([[156.0], [157.0]], [[158.0], [159.0]]), [[s0([[160.0], [161.0]], [[162.0], [163.0]])], [s0([[164.0], [165.0]], [[166.0], [167.0]])], [s0([[168.0], [169.0]], [[170.0], [171.0]])]])], s2([s0([[172.0], [173.0]], [[174.0], [175.0]])], s1([s0([[176.0], [177.0]], [[178.0], [179.0]]), s0([[180.0], [181.0]], [[182.0], [183.0]]), s0([[184.0], [185.0]], [[186.0], [187.0]])], s0([[188.0], [189.0]], [[190.0], [191.0]]), [[s0([[192.0], [193.0]], [[194.0], [195.0]])], [s0([[196.0], [197.0]], [[198.0], [199.0]])], [s0([[200.0], [201.0]], [[202.0], [203.0]])]]))), s1([s0([[204.0], [205.0]], [[206.0], [207.0]]), s0([[208.0], [209.0]], [[210.0], [211.0]]), s0([[212.0], [213.0]], [[214.0], [215.0]])], s0([[216.0], [217.0]], [[218.0], [219.0]]), [[s0([[220.0], [221.0]], [[222.0], [223.0]])], [s0([[224.0], [225.0]], [[226.0], [227.0]])], [s0([[228.0], [229.0]], [[230.0], [231.0]])]])), s4(s3([s1([s0([[232.0], [233.0]], [[234.0], [235.0]]), s0([[236.0], [237.0]], [[238.0], [239.0]]), s0([[240.0], [241.0]], [[242.0], [243.0]])], s0([[244.0], [245.0]], [[246.0], [247.0]]), [[s0([[248.0], [249.0]], [[250.0], [251.0]])], [s0([[252.0], [253.0]], [[254.0], [255.0]])], [s0([[256.0], [257.0]], [[258.0], [259.0]])]]), s1([s0([[260.0], [261.0]], [[262.0], [263.0]]), s0([[264.0], [265.0]], [[266.0], [267.0]]), s0([[268.0], [269.0]], [[270.0], [271.0]])], s0([[272.0], [273.0]], [[274.0], [275.0]]), [[s0([[276.0], [277.0]], [[278.0], [279.0]])], [s0([[280.0], [281.0]], [[282.0], [283.0]])], [s0([[284.0], [285.0]], [[286.0], [287.0]])]])], s2([s0([[288.0], [289.0]], [[290.0], [291.0]])], s1([s0([[292.0], [293.0]], [[294.0], [295.0]]), s0([[296.0], [297.0]], [[298.0], [299.0]]), s0([[300.0], [301.0]], [[302.0], [303.0]])], s0([[304.0], [305.0]], [[306.0], [307.0]]), [[s0([[308.0], [309.0]], [[310.0], [311.0]])], [s0([[312.0], [313.0]], [[314.0], [315.0]])], [s0([[316.0], [317.0]], [[318.0], [319.0]])]]))), s1([s0([[320.0], [321.0]], [[322.0], [323.0]]), s0([[324.0], [325.0]], [[326.0], [327.0]]), s0([[328.0], [329.0]], [[330.0], [331.0]])], s0([[332.0], [333.0]], [[334.0], [335.0]]), [[s0([[336.0], [337.0]], [[338.0], [339.0]])], [s0([[340.0], [341.0]], [[342.0], [343.0]])], [s0([[344.0], [345.0]], [[346.0], [347.0]])]]))] in
    let v1: Float = 348.0 in
    let initialResult: Float = 348.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()