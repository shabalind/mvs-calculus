  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s3 {
    var p0: Float
  } in
  struct s4 {
    var p0: s0
    var p1: [s0]
  } in
  struct s7 {
    var p0: s4
    var p1: s3
  } in
  let noinline_f0: ([s7], Float) -> Float = (v0: [s7], v1: Float) -> Float {
    let v5: s3 = s3(v1) in
    var v12: Float = v1 in
    let v13: Float = v5.p0 in
    var v14: Float = v12 in
    var v30: s3 = v5 in
    let v40: Float = v30.p0 in
    let v32: Float = v1 - v14 in
    v30.p0 = v13 in
    let v45: Float = v12 / v12 in
    let v31: Float = v40 / v12 in
    v30.p0 = v32 in
    let v99: [Float] = [v31, v32, v32, v45] in
    v30.p0 = v45 in
    let v128: Float = v99[0] in
    v128
  } in
  fun loop(i: Int, v0: [s7], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s7] = [s7(s4(s0([[0.0]], [[1.0], [2.0], [3.0]]), [s0([[4.0]], [[5.0], [6.0], [7.0]]), s0([[8.0]], [[9.0], [10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0], [15.0]])]), s3(16.0)), s7(s4(s0([[17.0]], [[18.0], [19.0], [20.0]]), [s0([[21.0]], [[22.0], [23.0], [24.0]]), s0([[25.0]], [[26.0], [27.0], [28.0]]), s0([[29.0]], [[30.0], [31.0], [32.0]])]), s3(33.0)), s7(s4(s0([[34.0]], [[35.0], [36.0], [37.0]]), [s0([[38.0]], [[39.0], [40.0], [41.0]]), s0([[42.0]], [[43.0], [44.0], [45.0]]), s0([[46.0]], [[47.0], [48.0], [49.0]])]), s3(50.0))] in
    let v1: Float = 51.0 in
    let initialResult: Float = 51.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()