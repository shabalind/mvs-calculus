  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: s1
  } in
  struct s3 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s4 {
    var p0: s3
    var p1: [[s0]]
  } in
  struct s5 {
    var p0: [s1]
    var p1: [s4]
    var p2: [s2]
    var p3: s1
    var p4: [s3]
  } in
  let f120: (s3) -> s3 = (v0: s3) -> s3 {
    var v7: s3 = v0 in
    var v4: s3 = v0 in
    let v6: [s0] = v0.p0 in
    var v3: [s0] = v6 in
    let v8: [s0] = v0.p1 in
    v4 = v7 in
    v7.p0 = v6 in
    let v1: [s0] = v0.p1 in
    let v2: s0 = v3[1] in
    v3[1] = v2 in
    var v30: [s0] = v6 in
    v7.p1 = v1 in
    v4.p0 = v30 in
    v7.p1 = v8 in
    v7.p0 = v6 in
    v30[1] = v2 in
    v7.p0 = v30 in
    var v52: s3 = v4 in
    let v33: [s0] = v0.p0 in
    let v84: s0 = v30[1] in
    var v67: [s0] = v33 in
    v7.p0 = v33 in
    v52.p0 = v67 in
    v4.p1 = v1 in
    v30[1] = v84 in
    v4.p0 = v30 in
    v52 = v4 in
    var v154: [s0] = v30 in
    v7.p0 = v154 in
    v52
  } in
  let f119: (s1) -> s1 = (v0: s1) -> s1 {
    let v4: s0 = v0.p1 in
    let v8: [[Float]] = v4.p0 in
    let v2: s0 = v0.p0 in
    let v7: [Float] = v8[0] in
    let v5: [[Float]] = v4.p0 in
    let v9: [[Float]] = v2.p0 in
    let v1: Float = v7[0] in
    let v15: Float = v7[0] in
    let v10: [[Float]] = v2.p1 in
    var v6: s1 = v0 in
    var v16: [[Float]] = v10 in
    let v11: [s0] = [v2, v2, v4, v2, v4] in
    v6.p1 = v2 in
    let v12: s2 = s2(v0) in
    var v33: [s0] = v11 in
    v6.p0 = v4 in
    var v14: [Float] = v7 in
    let v13: s0 = v11[2] in
    let v35: s0 = v11[1] in
    v33 = v11 in
    let v18: s0 = v6.p1 in
    let v52: Float = v1 * v1 in
    var v38: [[Float]] = v10 in
    v6.p1 = v4 in
    v14[0] = v15 in
    v16[0] = v7 in
    v33[3] = v35 in
    v38[0] = v14 in
    var v22: s1 = v6 in
    let v53: s1 = v12.p0 in
    v22.p0 = v18 in
    v14[0] = v52 in
    let v24: s0 = v22.p1 in
    let v19: [Float] = v16[0] in
    let v23: [s1] = [v22, v0, v0, v0, v0, v53] in
    v22 = v6 in
    v14[0] = v15 in
    let v34: [[Float]] = v35.p0 in
    let v100: [[Float]] = v13.p0 in
    let v29: s0 = v33[3] in
    var v37: [[Float]] = v16 in
    v33[1] = v13 in
    let v39: s0 = v22.p1 in
    let v43: [[[Float]]] = [v38] in
    v6.p0 = v13 in
    let v58: s0 = v53.p1 in
    let v55: s0 = v6.p0 in
    let v36: s0 = s0(v9, v37) in
    v22.p0 = v29 in
    v22.p0 = v18 in
    v22.p0 = v36 in
    let v62: [Float] = v5[1] in
    v38 = v37 in
    let v44: [[Float]] = v43[0] in
    v14[0] = v52 in
    v6.p1 = v58 in
    let v101: s1 = v23[0] in
    let v128: [Float] = v44[0] in
    v22.p1 = v29 in
    v16[0] = v62 in
    v22.p1 = v18 in
    let v175: s2 = s2(v101) in
    var v91: s0 = v24 in
    v37[0] = v19 in
    let v83: [[Float]] = v36.p1 in
    v33[0] = v35 in
    v91.p0 = v8 in
    v91.p0 = v100 in
    v22.p0 = v39 in
    var v103: s0 = v39 in
    v22.p1 = v103 in
    v16[0] = v128 in
    let v56: s1 = v175.p0 in
    v22.p0 = v91 in
    v6.p0 = v55 in
    v91.p0 = v34 in
    v91.p1 = v83 in
    let v216: s0 = v53.p1 in
    v6.p0 = v216 in
    v56
  } in
  let f114: (s0) -> s0 = (v0: s0) -> s0 {
    var v1: s0 = v0 in
    let v4: [[Float]] = v1.p1 in
    let v8: [[Float]] = v0.p0 in
    v1.p0 = v8 in
    let v7: [Float] = v4[0] in
    v1.p0 = v8 in
    let v2: s0 = s0(v8, v4) in
    let v10: [[Float]] = v1.p0 in
    let v25: [[Float]] = v1.p1 in
    var v11: [[Float]] = v10 in
    v11[1] = v7 in
    let v17: Float = v7[0] in
    let v23: [[Float]] = v2.p1 in
    var v13: Float = v17 in
    let v24: [[Float]] = v1.p1 in
    let v39: [Float] = v8[1] in
    var v30: [Float] = v7 in
    v30[0] = v17 in
    let v22: s0 = s0(v8, v23) in
    let v47: [Float] = v24[0] in
    let v29: [[Float]] = v22.p0 in
    var v41: s0 = v0 in
    v41.p1 = v25 in
    let v31: s1 = s1(v22, v0) in
    let v75: s1 = f119(v31) in
    v1.p0 = v11 in
    v11[0] = v47 in
    v1.p0 = v29 in
    let v58: s0 = v75.p1 in
    var v43: Float = v13 in
    v11[1] = v39 in
    v30[0] = v43 in
    var v135: s1 = v75 in
    v135.p1 = v58 in
    let v98: [[Float]] = v41.p0 in
    v135.p1 = v41 in
    let v84: s0 = v135.p1 in
    v1.p1 = v23 in
    v11[0] = v30 in
    v1.p0 = v98 in
    v84
  } in
  let f99: (s0) -> s0 = (v0: s0) -> s0 {
    let v5: [[Float]] = v0.p0 in
    let v14: [Float] = v5[0] in
    var v16: [[Float]] = v5 in
    var v2: [Float] = v14 in
    let v1: [Float] = v16[0] in
    let v18: [[Float]] = v0.p1 in
    var v10: [[Float]] = v5 in
    let v15: Float = v1[0] in
    var v19: Float = v15 in
    let v20: [Float] = v18[0] in
    v16 = v10 in
    v2[0] = v19 in
    let v25: [Float] = v18[0] in
    v16[1] = v14 in
    var v51: Float = v19 in
    var v33: [[Float]] = v18 in
    let v26: [Float] = v33[0] in
    v16[1] = v26 in
    var v38: [[Float]] = v33 in
    var v50: [[Float]] = v5 in
    let v45: Float = v51 / v19 in
    let v70: [[[Float]]] = [v50, v50] in
    let v66: [Float] = v33[0] in
    v10[1] = v66 in
    let v65: [[Float]] = v70[1] in
    var v58: [[Float]] = v65 in
    v16[0] = v1 in
    var v75: [[Float]] = v38 in
    v16 = v58 in
    v33[0] = v25 in
    let v71: s0 = s0(v65, v75) in
    let v81: [Float] = v38[0] in
    v75[0] = v20 in
    var v245: s0 = v71 in
    v245.p0 = v16 in
    v16[1] = v2 in
    v50[0] = v81 in
    v75[0] = v81 in
    v2[0] = v45 in
    v245
  } in
  let f64: (s3) -> s3 = (v0: s3) -> s3 {
    let v7: [s0] = v0.p0 in
    let v5: [[s0]] = [v7] in
    let v1: s3 = f120(v0) in
    let v6: s3 = f120(v1) in
    let v10: s3 = f120(v0) in
    let v13: [s0] = v0.p0 in
    let v8: s3 = f120(v6) in
    let v12: s3 = f120(v10) in
    let v16: s3 = f120(v1) in
    let v37: [s0] = v5[0] in
    let v64: s3 = f120(v8) in
    let v53: [s3] = [v6, v16, v12, v64, v0, v16, v16] in
    var v55: [[s0]] = v5 in
    v55[0] = v13 in
    v55[0] = v37 in
    let v84: s3 = v53[6] in
    v55[0] = v37 in
    let v139: [s0] = v84.p1 in
    let v276: [s0] = v55[0] in
    let v194: s3 = s3(v276, v139) in
    v194
  } in
  let f42: (s0) -> s0 = (v0: s0) -> s0 {
    let v2: s0 = f99(v0) in
    let v7: s0 = f114(v2) in
    let v6: [[Float]] = v7.p0 in
    let v1: s0 = f99(v7) in
    let v3: [[Float]] = v1.p0 in
    let v8: s0 = f114(v7) in
    let v11: [[[Float]]] = [v6, v3, v3, v3, v3] in
    let v20: [[Float]] = v8.p1 in
    let v27: [[Float]] = v8.p0 in
    var v23: [[[Float]]] = v11 in
    let v39: [[[[Float]]]] = [v23, v11, v11, v23, v23] in
    let v95: [[[Float]]] = v39[1] in
    v23 = v95 in
    var v43: [[[Float]]] = v95 in
    let v71: [[Float]] = v43[3] in
    v43[2] = v27 in
    let v77: s0 = s0(v71, v20) in
    v77
  } in
  let f19: (s3) -> s3 = (v0: s3) -> s3 {
    var v6: s3 = v0 in
    var v4: s3 = v0 in
    let v1: [s0] = v4.p0 in
    var v3: s3 = v6 in
    let v13: [s0] = v3.p1 in
    v4 = v6 in
    v6.p1 = v13 in
    let v15: [s0] = v4.p0 in
    let v25: [s0] = v3.p0 in
    v4.p0 = v25 in
    let v14: [s0] = v6.p1 in
    let v19: [[s0]] = [v25, v15, v1] in
    let v38: s3 = f64(v3) in
    let v48: [s0] = v19[2] in
    var v36: [s0] = v14 in
    v4 = v38 in
    let v55: s3 = s3(v15, v36) in
    v6.p0 = v1 in
    v6.p0 = v48 in
    v55
  } in
  let f2: (Float, s0) -> Float = (v0: Float, v1: s0) -> Float {
    let v3: s0 = f42(v1) in
    let v14: [[Float]] = v3.p0 in
    let v5: [Float] = v14[1] in
    let v12: Float = v5[0] in
    v12
  } in
  let noinline_f0: ([s5], [[s4]], [s4], s3, Float) -> Float = (v0: [s5], v1: [[s4]], v2: [s4], v3: s3, v4: Float) -> Float {
    let v24: s3 = f19(v3) in
    let v40: [s0] = v24.p0 in
    let v51: s0 = v40[1] in
    let v23: Float = f2(v4, v51) in
    let v42: Float = v4 / v4 in
    let v100: Float = v42 + v23 in
    var v54: Float = v100 in
    v54
  } in
  fun loop(i: Int, v0: [s5], v1: [[s4]], v2: [s4], v3: s3, v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s5] = [s5([s1(s0([[0.0], [1.0]], [[2.0]]), s0([[3.0], [4.0]], [[5.0]]))], [s4(s3([s0([[6.0], [7.0]], [[8.0]]), s0([[9.0], [10.0]], [[11.0]])], [s0([[12.0], [13.0]], [[14.0]])]), [[s0([[15.0], [16.0]], [[17.0]])], [s0([[18.0], [19.0]], [[20.0]])]]), s4(s3([s0([[21.0], [22.0]], [[23.0]]), s0([[24.0], [25.0]], [[26.0]])], [s0([[27.0], [28.0]], [[29.0]])]), [[s0([[30.0], [31.0]], [[32.0]])], [s0([[33.0], [34.0]], [[35.0]])]]), s4(s3([s0([[36.0], [37.0]], [[38.0]]), s0([[39.0], [40.0]], [[41.0]])], [s0([[42.0], [43.0]], [[44.0]])]), [[s0([[45.0], [46.0]], [[47.0]])], [s0([[48.0], [49.0]], [[50.0]])]])], [s2(s1(s0([[51.0], [52.0]], [[53.0]]), s0([[54.0], [55.0]], [[56.0]]))), s2(s1(s0([[57.0], [58.0]], [[59.0]]), s0([[60.0], [61.0]], [[62.0]]))), s2(s1(s0([[63.0], [64.0]], [[65.0]]), s0([[66.0], [67.0]], [[68.0]])))], s1(s0([[69.0], [70.0]], [[71.0]]), s0([[72.0], [73.0]], [[74.0]])), [s3([s0([[75.0], [76.0]], [[77.0]]), s0([[78.0], [79.0]], [[80.0]])], [s0([[81.0], [82.0]], [[83.0]])])]), s5([s1(s0([[84.0], [85.0]], [[86.0]]), s0([[87.0], [88.0]], [[89.0]]))], [s4(s3([s0([[90.0], [91.0]], [[92.0]]), s0([[93.0], [94.0]], [[95.0]])], [s0([[96.0], [97.0]], [[98.0]])]), [[s0([[99.0], [100.0]], [[101.0]])], [s0([[102.0], [103.0]], [[104.0]])]]), s4(s3([s0([[105.0], [106.0]], [[107.0]]), s0([[108.0], [109.0]], [[110.0]])], [s0([[111.0], [112.0]], [[113.0]])]), [[s0([[114.0], [115.0]], [[116.0]])], [s0([[117.0], [118.0]], [[119.0]])]]), s4(s3([s0([[120.0], [121.0]], [[122.0]]), s0([[123.0], [124.0]], [[125.0]])], [s0([[126.0], [127.0]], [[128.0]])]), [[s0([[129.0], [130.0]], [[131.0]])], [s0([[132.0], [133.0]], [[134.0]])]])], [s2(s1(s0([[135.0], [136.0]], [[137.0]]), s0([[138.0], [139.0]], [[140.0]]))), s2(s1(s0([[141.0], [142.0]], [[143.0]]), s0([[144.0], [145.0]], [[146.0]]))), s2(s1(s0([[147.0], [148.0]], [[149.0]]), s0([[150.0], [151.0]], [[152.0]])))], s1(s0([[153.0], [154.0]], [[155.0]]), s0([[156.0], [157.0]], [[158.0]])), [s3([s0([[159.0], [160.0]], [[161.0]]), s0([[162.0], [163.0]], [[164.0]])], [s0([[165.0], [166.0]], [[167.0]])])]), s5([s1(s0([[168.0], [169.0]], [[170.0]]), s0([[171.0], [172.0]], [[173.0]]))], [s4(s3([s0([[174.0], [175.0]], [[176.0]]), s0([[177.0], [178.0]], [[179.0]])], [s0([[180.0], [181.0]], [[182.0]])]), [[s0([[183.0], [184.0]], [[185.0]])], [s0([[186.0], [187.0]], [[188.0]])]]), s4(s3([s0([[189.0], [190.0]], [[191.0]]), s0([[192.0], [193.0]], [[194.0]])], [s0([[195.0], [196.0]], [[197.0]])]), [[s0([[198.0], [199.0]], [[200.0]])], [s0([[201.0], [202.0]], [[203.0]])]]), s4(s3([s0([[204.0], [205.0]], [[206.0]]), s0([[207.0], [208.0]], [[209.0]])], [s0([[210.0], [211.0]], [[212.0]])]), [[s0([[213.0], [214.0]], [[215.0]])], [s0([[216.0], [217.0]], [[218.0]])]])], [s2(s1(s0([[219.0], [220.0]], [[221.0]]), s0([[222.0], [223.0]], [[224.0]]))), s2(s1(s0([[225.0], [226.0]], [[227.0]]), s0([[228.0], [229.0]], [[230.0]]))), s2(s1(s0([[231.0], [232.0]], [[233.0]]), s0([[234.0], [235.0]], [[236.0]])))], s1(s0([[237.0], [238.0]], [[239.0]]), s0([[240.0], [241.0]], [[242.0]])), [s3([s0([[243.0], [244.0]], [[245.0]]), s0([[246.0], [247.0]], [[248.0]])], [s0([[249.0], [250.0]], [[251.0]])])])] in
    let v1: [[s4]] = [[s4(s3([s0([[252.0], [253.0]], [[254.0]]), s0([[255.0], [256.0]], [[257.0]])], [s0([[258.0], [259.0]], [[260.0]])]), [[s0([[261.0], [262.0]], [[263.0]])], [s0([[264.0], [265.0]], [[266.0]])]])], [s4(s3([s0([[267.0], [268.0]], [[269.0]]), s0([[270.0], [271.0]], [[272.0]])], [s0([[273.0], [274.0]], [[275.0]])]), [[s0([[276.0], [277.0]], [[278.0]])], [s0([[279.0], [280.0]], [[281.0]])]])]] in
    let v2: [s4] = [s4(s3([s0([[282.0], [283.0]], [[284.0]]), s0([[285.0], [286.0]], [[287.0]])], [s0([[288.0], [289.0]], [[290.0]])]), [[s0([[291.0], [292.0]], [[293.0]])], [s0([[294.0], [295.0]], [[296.0]])]]), s4(s3([s0([[297.0], [298.0]], [[299.0]]), s0([[300.0], [301.0]], [[302.0]])], [s0([[303.0], [304.0]], [[305.0]])]), [[s0([[306.0], [307.0]], [[308.0]])], [s0([[309.0], [310.0]], [[311.0]])]])] in
    let v3: s3 = s3([s0([[312.0], [313.0]], [[314.0]]), s0([[315.0], [316.0]], [[317.0]])], [s0([[318.0], [319.0]], [[320.0]])]) in
    let v4: Float = 321.0 in
    let initialResult: Float = 321.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()