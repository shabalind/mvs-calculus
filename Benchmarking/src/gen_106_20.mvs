  struct s0 {
    var p0: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  let f49: (s1) -> s1 = (v0: s1) -> s1 {
    let v3: [s0] = v0.p1 in
    let v4: s0 = v0.p0 in
    let v8: [s0] = v0.p1 in
    let v1: [[Float]] = v4.p0 in
    var v5: s1 = v0 in
    let v10: [Float] = v1[0] in
    v5.p1 = v3 in
    v5.p1 = v3 in
    let v2: [[s0]] = [v8, v3, v8] in
    v5.p1 = v3 in
    var v14: [[Float]] = v1 in
    let v16: [s0] = v0.p1 in
    v14[0] = v10 in
    let v33: [s0] = v5.p1 in
    let v43: s0 = s0(v14) in
    v14[0] = v10 in
    let v20: [s0] = v2[2] in
    let v32: s1 = s1(v43, v20) in
    v5.p1 = v8 in
    let v48: s0 = v5.p0 in
    let v44: [[Float]] = v48.p0 in
    v14 = v44 in
    let v70: s0 = v16[1] in
    v5.p1 = v33 in
    let v74: [s0] = v32.p1 in
    var v80: s1 = v5 in
    v80.p1 = v3 in
    v5.p0 = v70 in
    v5.p1 = v74 in
    v80
  } in
  let f31: (s1, s1) -> s1 = (v0: s1, v1: s1) -> s1 {
    let v3: s1 = f49(v1) in
    let v8: s0 = v1.p0 in
    var v12: s1 = v3 in
    v12.p0 = v8 in
    v12
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    var v3: s1 = v0 in
    let v2: s1 = f49(v3) in
    var v5: s1 = v2 in
    let v11: s1 = f31(v0, v3) in
    let v4: s0 = v11.p0 in
    let v10: [s0] = v5.p1 in
    let v15: [[Float]] = v4.p0 in
    var v29: [[Float]] = v15 in
    v3.p1 = v10 in
    let v16: [Float] = v29[0] in
    var v40: [[Float]] = v15 in
    v40[0] = v16 in
    let v79: [Float] = v40[0] in
    v5.p1 = v10 in
    v3.p0 = v4 in
    let v135: Float = v79[0] in
    v135
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1(s0([[0.0]]), [s0([[1.0]]), s0([[2.0]])]) in
    let v1: Float = 3.0 in
    let initialResult: Float = 3.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()