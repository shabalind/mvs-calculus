  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: Float
    var p1: s0
  } in
  struct s2 {
    var p0: [s0]
    var p1: [s1]
  } in
  struct s3 {
    var p0: s1
    var p1: s2
    var p2: s0
    var p3: s2
    var p4: [s0]
    var p5: [s1]
    var p6: s2
    var p7: s1
  } in
  struct s4 {
    var p0: s0
    var p1: s0
  } in
  struct s5 {
    var p0: [[s4]]
    var p1: [s3]
  } in
  struct s8 {
    var p0: s1
    var p1: s2
  } in
  let f2: ([s1], s5) -> [s1] = (v0: [s1], v1: s5) -> [s1] {
    var v149: [s1] = v0 in
    v149
  } in
  let noinline_f0: (s8, [[s5]], Float) -> Float = (v0: s8, v1: [[s5]], v2: Float) -> Float {
    let v7: [s5] = v1[2] in
    let v3: s5 = v7[0] in
    let v4: [s5] = v1[2] in
    let v14: s5 = v4[0] in
    let v16: [s3] = v14.p1 in
    var v9: Float = v2 in
    let v13: [Float] = [v2, v2, v9, v9, v2, v2, v2] in
    let v21: s2 = v0.p1 in
    v9 = v2 in
    let v20: s3 = v16[0] in
    let v12: s3 = v16[0] in
    var v36: s3 = v12 in
    v36 = v20 in
    let v24: s2 = v36.p3 in
    let v50: [s1] = v21.p1 in
    let v94: [s1] = f2(v50, v3) in
    let v37: [s0] = v24.p0 in
    v36.p1 = v21 in
    let v67: Float = v13[2] in
    let v29: s0 = v37[1] in
    let v95: [[Float]] = v29.p1 in
    var v73: [[Float]] = v95 in
    let v65: [Float] = v73[1] in
    let v76: s1 = v94[2] in
    let v184: Float = v76.p0 in
    let v189: Float = v184 - v67 in
    let v93: Float = v65[0] in
    let v160: Float = v189 - v93 in
    v160
  } in
  fun loop(i: Int, v0: s8, v1: [[s5]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s8 = s8(s1(0.0, s0([[1.0], [2.0]], [[3.0], [4.0], [5.0]])), s2([s0([[6.0], [7.0]], [[8.0], [9.0], [10.0]]), s0([[11.0], [12.0]], [[13.0], [14.0], [15.0]])], [s1(16.0, s0([[17.0], [18.0]], [[19.0], [20.0], [21.0]])), s1(22.0, s0([[23.0], [24.0]], [[25.0], [26.0], [27.0]])), s1(28.0, s0([[29.0], [30.0]], [[31.0], [32.0], [33.0]]))])) in
    let v1: [[s5]] = [[s5([[s4(s0([[34.0], [35.0]], [[36.0], [37.0], [38.0]]), s0([[39.0], [40.0]], [[41.0], [42.0], [43.0]]))], [s4(s0([[44.0], [45.0]], [[46.0], [47.0], [48.0]]), s0([[49.0], [50.0]], [[51.0], [52.0], [53.0]]))]], [s3(s1(54.0, s0([[55.0], [56.0]], [[57.0], [58.0], [59.0]])), s2([s0([[60.0], [61.0]], [[62.0], [63.0], [64.0]]), s0([[65.0], [66.0]], [[67.0], [68.0], [69.0]])], [s1(70.0, s0([[71.0], [72.0]], [[73.0], [74.0], [75.0]])), s1(76.0, s0([[77.0], [78.0]], [[79.0], [80.0], [81.0]])), s1(82.0, s0([[83.0], [84.0]], [[85.0], [86.0], [87.0]]))]), s0([[88.0], [89.0]], [[90.0], [91.0], [92.0]]), s2([s0([[93.0], [94.0]], [[95.0], [96.0], [97.0]]), s0([[98.0], [99.0]], [[100.0], [101.0], [102.0]])], [s1(103.0, s0([[104.0], [105.0]], [[106.0], [107.0], [108.0]])), s1(109.0, s0([[110.0], [111.0]], [[112.0], [113.0], [114.0]])), s1(115.0, s0([[116.0], [117.0]], [[118.0], [119.0], [120.0]]))]), [s0([[121.0], [122.0]], [[123.0], [124.0], [125.0]])], [s1(126.0, s0([[127.0], [128.0]], [[129.0], [130.0], [131.0]])), s1(132.0, s0([[133.0], [134.0]], [[135.0], [136.0], [137.0]]))], s2([s0([[138.0], [139.0]], [[140.0], [141.0], [142.0]]), s0([[143.0], [144.0]], [[145.0], [146.0], [147.0]])], [s1(148.0, s0([[149.0], [150.0]], [[151.0], [152.0], [153.0]])), s1(154.0, s0([[155.0], [156.0]], [[157.0], [158.0], [159.0]])), s1(160.0, s0([[161.0], [162.0]], [[163.0], [164.0], [165.0]]))]), s1(166.0, s0([[167.0], [168.0]], [[169.0], [170.0], [171.0]])))])], [s5([[s4(s0([[172.0], [173.0]], [[174.0], [175.0], [176.0]]), s0([[177.0], [178.0]], [[179.0], [180.0], [181.0]]))], [s4(s0([[182.0], [183.0]], [[184.0], [185.0], [186.0]]), s0([[187.0], [188.0]], [[189.0], [190.0], [191.0]]))]], [s3(s1(192.0, s0([[193.0], [194.0]], [[195.0], [196.0], [197.0]])), s2([s0([[198.0], [199.0]], [[200.0], [201.0], [202.0]]), s0([[203.0], [204.0]], [[205.0], [206.0], [207.0]])], [s1(208.0, s0([[209.0], [210.0]], [[211.0], [212.0], [213.0]])), s1(214.0, s0([[215.0], [216.0]], [[217.0], [218.0], [219.0]])), s1(220.0, s0([[221.0], [222.0]], [[223.0], [224.0], [225.0]]))]), s0([[226.0], [227.0]], [[228.0], [229.0], [230.0]]), s2([s0([[231.0], [232.0]], [[233.0], [234.0], [235.0]]), s0([[236.0], [237.0]], [[238.0], [239.0], [240.0]])], [s1(241.0, s0([[242.0], [243.0]], [[244.0], [245.0], [246.0]])), s1(247.0, s0([[248.0], [249.0]], [[250.0], [251.0], [252.0]])), s1(253.0, s0([[254.0], [255.0]], [[256.0], [257.0], [258.0]]))]), [s0([[259.0], [260.0]], [[261.0], [262.0], [263.0]])], [s1(264.0, s0([[265.0], [266.0]], [[267.0], [268.0], [269.0]])), s1(270.0, s0([[271.0], [272.0]], [[273.0], [274.0], [275.0]]))], s2([s0([[276.0], [277.0]], [[278.0], [279.0], [280.0]]), s0([[281.0], [282.0]], [[283.0], [284.0], [285.0]])], [s1(286.0, s0([[287.0], [288.0]], [[289.0], [290.0], [291.0]])), s1(292.0, s0([[293.0], [294.0]], [[295.0], [296.0], [297.0]])), s1(298.0, s0([[299.0], [300.0]], [[301.0], [302.0], [303.0]]))]), s1(304.0, s0([[305.0], [306.0]], [[307.0], [308.0], [309.0]])))])], [s5([[s4(s0([[310.0], [311.0]], [[312.0], [313.0], [314.0]]), s0([[315.0], [316.0]], [[317.0], [318.0], [319.0]]))], [s4(s0([[320.0], [321.0]], [[322.0], [323.0], [324.0]]), s0([[325.0], [326.0]], [[327.0], [328.0], [329.0]]))]], [s3(s1(330.0, s0([[331.0], [332.0]], [[333.0], [334.0], [335.0]])), s2([s0([[336.0], [337.0]], [[338.0], [339.0], [340.0]]), s0([[341.0], [342.0]], [[343.0], [344.0], [345.0]])], [s1(346.0, s0([[347.0], [348.0]], [[349.0], [350.0], [351.0]])), s1(352.0, s0([[353.0], [354.0]], [[355.0], [356.0], [357.0]])), s1(358.0, s0([[359.0], [360.0]], [[361.0], [362.0], [363.0]]))]), s0([[364.0], [365.0]], [[366.0], [367.0], [368.0]]), s2([s0([[369.0], [370.0]], [[371.0], [372.0], [373.0]]), s0([[374.0], [375.0]], [[376.0], [377.0], [378.0]])], [s1(379.0, s0([[380.0], [381.0]], [[382.0], [383.0], [384.0]])), s1(385.0, s0([[386.0], [387.0]], [[388.0], [389.0], [390.0]])), s1(391.0, s0([[392.0], [393.0]], [[394.0], [395.0], [396.0]]))]), [s0([[397.0], [398.0]], [[399.0], [400.0], [401.0]])], [s1(402.0, s0([[403.0], [404.0]], [[405.0], [406.0], [407.0]])), s1(408.0, s0([[409.0], [410.0]], [[411.0], [412.0], [413.0]]))], s2([s0([[414.0], [415.0]], [[416.0], [417.0], [418.0]]), s0([[419.0], [420.0]], [[421.0], [422.0], [423.0]])], [s1(424.0, s0([[425.0], [426.0]], [[427.0], [428.0], [429.0]])), s1(430.0, s0([[431.0], [432.0]], [[433.0], [434.0], [435.0]])), s1(436.0, s0([[437.0], [438.0]], [[439.0], [440.0], [441.0]]))]), s1(442.0, s0([[443.0], [444.0]], [[445.0], [446.0], [447.0]])))])]] in
    let v2: Float = 448.0 in
    let initialResult: Float = 448.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()