  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s3 {
    var p0: s0
    var p1: s1
  } in
  let f55: (s3) -> s3 = (v0: s3) -> s3 {
    let v2: s1 = v0.p1 in
    let v6: s0 = v0.p0 in
    var v15: s0 = v6 in
    var v5: s3 = v0 in
    let v1: s0 = v5.p0 in
    let v7: [[Float]] = v1.p1 in
    v15.p0 = v7 in
    v5.p0 = v6 in
    var v9: s0 = v15 in
    v5.p1 = v2 in
    let v18: s0 = v0.p0 in
    var v11: s1 = v2 in
    var v25: s1 = v11 in
    let v23: s0 = v11.p1 in
    let v16: [s0] = v25.p0 in
    let v13: [s0] = [v23, v15] in
    let v29: s0 = v13[1] in
    v15 = v9 in
    let v27: [[s0]] = [v16, v16, v16, v16] in
    let v37: [s0] = v27[1] in
    v11.p1 = v18 in
    v11.p0 = v37 in
    v5.p1 = v25 in
    v5.p0 = v29 in
    v5
  } in
  let f31: (s3, s3) -> s3 = (v0: s3, v1: s3) -> s3 {
    let v7: s3 = f55(v1) in
    let v5: s1 = v0.p1 in
    var v19: s1 = v5 in
    var v24: s3 = v7 in
    v24.p1 = v19 in
    v24
  } in
  let noinline_f0: (s3, Float) -> Float = (v0: s3, v1: Float) -> Float {
    let v3: s3 = f31(v0, v0) in
    let v6: s1 = v3.p1 in
    let v11: s0 = v6.p1 in
    let v22: [[Float]] = v11.p1 in
    var v35: [[Float]] = v22 in
    let v62: [Float] = v35[0] in
    let v72: Float = v62[0] in
    v35[1] = v62 in
    v72
  } in
  fun loop(i: Int, v0: s3, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(s0([[0.0], [1.0]], [[2.0], [3.0]]), s1([s0([[4.0], [5.0]], [[6.0], [7.0]])], s0([[8.0], [9.0]], [[10.0], [11.0]]))) in
    let v1: Float = 12.0 in
    let initialResult: Float = 12.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()