  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: [s1]
    var p1: s1
  }
  struct s3 {
    var p0: [s2]
    var p1: s0
  }
  struct s5 {
    var p0: s2
    var p1: [s2]
  }
  func f88(_ v0: Double) -> Double {
    var v7: Double = v0
    let v4: Double = v7 + v0
    let v1: Double = v7 + v4
    var v6: Double = v1
    var v10: Double = v1
    var v9: Double = v1
    var v3: Double = v7
    let v2: Double = v3 + v6
    var v11: Double = v3
    var v5: Double = v2
    var v21: Double = v1
    var v14: Double = v0
    var v13: Double = v1
    var v15: Double = v5
    var v19: Double = v15
    v10 = v11
    v11 = v21
    var v20: Double = v13
    var v48: Double = v21
    var v16: Double = v1
    var v22: Double = v9
    v7 = v19
    var v27: Double = v15
    var v50: Double = v14
    let v51: [Double] = [v2, v20]
    var v99: [Double] = v51
    v99[1] = v50
    v99[0] = v22
    var v39: [Double] = v99
    var v43: [Double] = v39
    v43[1] = v4
    var v34: [Double] = v39
    v99[1] = v16
    let v37: Double = v34[1]
    let v44: Double = v51[1]
    var v170: Double = v44
    v34[1] = v1
    v99[1] = v20
    let v70: Double = v48 * v10
    var v53: [Double] = v51
    var v71: Double = v170
    let v82: Double = v99[0]
    let v102: Double = v43[0]
    v99[1] = v37
    let v124: Double = v39[1]
    var v68: Double = v124
    let v57: Double = v53[1]
    v99[0] = v70
    v53[1] = v68
    var v56: Double = v82
    let v179: Double = v27 * v102
    v99[0] = v57
    let v81: Double = v51[0]
    v53[1] = v71
    v21 = v81
    v6 = v56
    return v179
  }
  @inline(never)
  func f0(_ v0: [s3], _ v1: s5, _ v2: s5, _ v3: Double) -> Double {
    var v6: Double = v3
    var v5: Double = v6
    let v4: Double = f88(v5)
    v5 = v3
    v5 = v3
    let v43: [Double] = [v5]
    var v52: [Double] = v43
    let v61: Double = v52[0]
    let v150: Double = v52[0]
    v52[0] = v61
    v52[0] = v61
    let v184: Double = v150 / v4
    return v184
  }
  func benchmark() {
    let v0: [s3] = [s3(p0: [s2(p0: [s1(p0: s0(p0: [[0.0]], p1: [[1.0], [2.0]]), p1: s0(p0: [[3.0]], p1: [[4.0], [5.0]])), s1(p0: s0(p0: [[6.0]], p1: [[7.0], [8.0]]), p1: s0(p0: [[9.0]], p1: [[10.0], [11.0]])), s1(p0: s0(p0: [[12.0]], p1: [[13.0], [14.0]]), p1: s0(p0: [[15.0]], p1: [[16.0], [17.0]]))], p1: s1(p0: s0(p0: [[18.0]], p1: [[19.0], [20.0]]), p1: s0(p0: [[21.0]], p1: [[22.0], [23.0]]))), s2(p0: [s1(p0: s0(p0: [[24.0]], p1: [[25.0], [26.0]]), p1: s0(p0: [[27.0]], p1: [[28.0], [29.0]])), s1(p0: s0(p0: [[30.0]], p1: [[31.0], [32.0]]), p1: s0(p0: [[33.0]], p1: [[34.0], [35.0]])), s1(p0: s0(p0: [[36.0]], p1: [[37.0], [38.0]]), p1: s0(p0: [[39.0]], p1: [[40.0], [41.0]]))], p1: s1(p0: s0(p0: [[42.0]], p1: [[43.0], [44.0]]), p1: s0(p0: [[45.0]], p1: [[46.0], [47.0]])))], p1: s0(p0: [[48.0]], p1: [[49.0], [50.0]])), s3(p0: [s2(p0: [s1(p0: s0(p0: [[51.0]], p1: [[52.0], [53.0]]), p1: s0(p0: [[54.0]], p1: [[55.0], [56.0]])), s1(p0: s0(p0: [[57.0]], p1: [[58.0], [59.0]]), p1: s0(p0: [[60.0]], p1: [[61.0], [62.0]])), s1(p0: s0(p0: [[63.0]], p1: [[64.0], [65.0]]), p1: s0(p0: [[66.0]], p1: [[67.0], [68.0]]))], p1: s1(p0: s0(p0: [[69.0]], p1: [[70.0], [71.0]]), p1: s0(p0: [[72.0]], p1: [[73.0], [74.0]]))), s2(p0: [s1(p0: s0(p0: [[75.0]], p1: [[76.0], [77.0]]), p1: s0(p0: [[78.0]], p1: [[79.0], [80.0]])), s1(p0: s0(p0: [[81.0]], p1: [[82.0], [83.0]]), p1: s0(p0: [[84.0]], p1: [[85.0], [86.0]])), s1(p0: s0(p0: [[87.0]], p1: [[88.0], [89.0]]), p1: s0(p0: [[90.0]], p1: [[91.0], [92.0]]))], p1: s1(p0: s0(p0: [[93.0]], p1: [[94.0], [95.0]]), p1: s0(p0: [[96.0]], p1: [[97.0], [98.0]])))], p1: s0(p0: [[99.0]], p1: [[100.0], [101.0]]))]
    let v1: s5 = s5(p0: s2(p0: [s1(p0: s0(p0: [[102.0]], p1: [[103.0], [104.0]]), p1: s0(p0: [[105.0]], p1: [[106.0], [107.0]])), s1(p0: s0(p0: [[108.0]], p1: [[109.0], [110.0]]), p1: s0(p0: [[111.0]], p1: [[112.0], [113.0]])), s1(p0: s0(p0: [[114.0]], p1: [[115.0], [116.0]]), p1: s0(p0: [[117.0]], p1: [[118.0], [119.0]]))], p1: s1(p0: s0(p0: [[120.0]], p1: [[121.0], [122.0]]), p1: s0(p0: [[123.0]], p1: [[124.0], [125.0]]))), p1: [s2(p0: [s1(p0: s0(p0: [[126.0]], p1: [[127.0], [128.0]]), p1: s0(p0: [[129.0]], p1: [[130.0], [131.0]])), s1(p0: s0(p0: [[132.0]], p1: [[133.0], [134.0]]), p1: s0(p0: [[135.0]], p1: [[136.0], [137.0]])), s1(p0: s0(p0: [[138.0]], p1: [[139.0], [140.0]]), p1: s0(p0: [[141.0]], p1: [[142.0], [143.0]]))], p1: s1(p0: s0(p0: [[144.0]], p1: [[145.0], [146.0]]), p1: s0(p0: [[147.0]], p1: [[148.0], [149.0]])))])
    let v2: s5 = s5(p0: s2(p0: [s1(p0: s0(p0: [[150.0]], p1: [[151.0], [152.0]]), p1: s0(p0: [[153.0]], p1: [[154.0], [155.0]])), s1(p0: s0(p0: [[156.0]], p1: [[157.0], [158.0]]), p1: s0(p0: [[159.0]], p1: [[160.0], [161.0]])), s1(p0: s0(p0: [[162.0]], p1: [[163.0], [164.0]]), p1: s0(p0: [[165.0]], p1: [[166.0], [167.0]]))], p1: s1(p0: s0(p0: [[168.0]], p1: [[169.0], [170.0]]), p1: s0(p0: [[171.0]], p1: [[172.0], [173.0]]))), p1: [s2(p0: [s1(p0: s0(p0: [[174.0]], p1: [[175.0], [176.0]]), p1: s0(p0: [[177.0]], p1: [[178.0], [179.0]])), s1(p0: s0(p0: [[180.0]], p1: [[181.0], [182.0]]), p1: s0(p0: [[183.0]], p1: [[184.0], [185.0]])), s1(p0: s0(p0: [[186.0]], p1: [[187.0], [188.0]]), p1: s0(p0: [[189.0]], p1: [[190.0], [191.0]]))], p1: s1(p0: s0(p0: [[192.0]], p1: [[193.0], [194.0]]), p1: s0(p0: [[195.0]], p1: [[196.0], [197.0]])))])
    let v3: Double = 198.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 198.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
