  struct s0 {
    var p0: Float
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  let noinline_f0: ([Float], [[s1]], s0, Float) -> Float = (v0: [Float], v1: [[s1]], v2: s0, v3: Float) -> Float {
    var v7: [Float] = v0 in
    v7[0] = v3 in
    var v4: Float = v3 in
    v7[0] = v4 in
    v7[0] = v4 in
    v7[0] = v4 in
    var v6: [Float] = v7 in
    let v12: Float = v2.p0 in
    let v5: [[Float]] = v2.p1 in
    let v21: [[[Float]]] = [v5, v5, v5, v5] in
    let v19: [[Float]] = v21[2] in
    let v23: Float = v0[0] in
    v6[0] = v4 in
    v6[0] = v23 in
    let v56: [Float] = v19[0] in
    v6[0] = v23 in
    let v42: Float = v12 / v3 in
    var v37: [Float] = v56 in
    v37 = v6 in
    let v194: Float = v37[0] in
    v37[0] = v42 in
    v194
  } in
  fun loop(i: Int, v0: [Float], v1: [[s1]], v2: s0, v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [Float] = [0.0] in
    let v1: [[s1]] = [[s1(s0(1.0, [[2.0], [3.0], [4.0]]), [s0(5.0, [[6.0], [7.0], [8.0]])])]] in
    let v2: s0 = s0(9.0, [[10.0], [11.0], [12.0]]) in
    let v3: Float = 13.0 in
    let initialResult: Float = 13.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()