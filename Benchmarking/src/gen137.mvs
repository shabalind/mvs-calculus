  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
  } in
  struct s2 {
    var p0: [s1]
    var p1: s0
  } in
  struct s7 {
    var p0: [s2]
    var p1: s0
  } in
  let f90: (s0) -> s0 = (v0: s0) -> s0 {
    let v6: [[Float]] = v0.p0 in
    let v9: [[Float]] = v0.p1 in
    let v4: s0 = s0(v6, v9) in
    let v12: [s0] = [v0, v0, v4] in
    var v7: [s0] = v12 in
    v7[0] = v4 in
    let v10: s0 = v7[1] in
    let v33: s0 = v12[2] in
    let v26: s0 = v12[0] in
    let v22: [s0] = [v33, v26, v0, v10, v4, v26] in
    let v83: s0 = v22[5] in
    v7[0] = v4 in
    v83
  } in
  let f15: (s0) -> s0 = (v0: s0) -> s0 {
    let v5: s0 = f90(v0) in
    let v9: s0 = f90(v5) in
    let v7: s0 = f90(v9) in
    let v51: [[Float]] = v9.p1 in
    var v28: s0 = v7 in
    v28.p0 = v51 in
    v28
  } in
  let noinline_f0: (s7, Float) -> Float = (v0: s7, v1: Float) -> Float {
    let v7: s0 = v0.p1 in
    var v9: Float = v1 in
    let v26: s0 = f15(v7) in
    let v20: s0 = f90(v26) in
    var v27: Float = v9 in
    let v58: [[Float]] = v20.p0 in
    let v72: [Float] = v58[1] in
    let v34: Float = v72[0] in
    let v54: Float = v27 - v9 in
    var v79: Float = v54 in
    let v163: Float = v79 / v34 in
    v163
  } in
  fun loop(i: Int, v0: s7, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s7 = s7([s2([s1(s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]]), s0([[6.0], [7.0], [8.0]], [[9.0], [10.0], [11.0]]))], s0([[12.0], [13.0], [14.0]], [[15.0], [16.0], [17.0]]))], s0([[18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0]])) in
    let v1: Float = 24.0 in
    let initialResult: Float = 24.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()