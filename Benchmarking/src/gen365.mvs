  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: s0
    var p2: s0
    var p3: s0
  } in
  struct s4 {
    var p0: s1
    var p1: s1
  } in
  let f93: (s4) -> s4 = (v0: s4) -> s4 {
    var v3: s4 = v0 in
    var v1: s4 = v0 in
    var v9: s4 = v3 in
    var v4: s4 = v3 in
    let v13: s1 = v9.p1 in
    var v2: s4 = v1 in
    var v12: s1 = v13 in
    var v14: s1 = v13 in
    let v6: s1 = v2.p0 in
    let v11: [s1] = [v6, v6, v14, v6] in
    var v8: s1 = v12 in
    let v17: s0 = v6.p3 in
    let v16: s1 = v4.p1 in
    let v10: s1 = v11[3] in
    v3.p0 = v16 in
    var v18: s4 = v4 in
    let v25: s1 = v11[0] in
    v14.p1 = v17 in
    let v36: s1 = v11[0] in
    v8.p1 = v17 in
    v4.p1 = v8 in
    v18.p1 = v25 in
    v2.p1 = v10 in
    v1.p0 = v36 in
    v18
  } in
  let f89: (s1) -> s1 = (v0: s1) -> s1 {
    let v4: s0 = v0.p3 in
    var v1: s1 = v0 in
    v1.p2 = v4 in
    v1.p2 = v4 in
    var v2: s1 = v1 in
    v2
  } in
  let f82: (s1) -> s1 = (v0: s1) -> s1 {
    let v5: s1 = f89(v0) in
    var v25: s1 = v5 in
    v25
  } in
  let noinline_f0: (s4, Float) -> Float = (v0: s4, v1: Float) -> Float {
    let v7: s4 = f93(v0) in
    var v6: s4 = v0 in
    let v3: s1 = v6.p0 in
    v6 = v7 in
    var v2: s4 = v7 in
    let v5: s0 = v3.p1 in
    let v15: s0 = v3.p3 in
    v2.p0 = v3 in
    var v12: s4 = v7 in
    let v10: s0 = v3.p0 in
    var v13: s1 = v3 in
    v6.p1 = v13 in
    var v24: s0 = v10 in
    let v17: [[Float]] = v24.p2 in
    var v20: Float = v1 in
    let v18: [[Float]] = v10.p2 in
    v24.p2 = v18 in
    let v14: s1 = v2.p0 in
    let v32: [[Float]] = v15.p0 in
    let v25: s1 = f89(v14) in
    let v34: [Float] = v32[0] in
    var v29: s0 = v5 in
    v13.p1 = v29 in
    var v31: [Float] = v34 in
    let v30: Float = v1 + v20 in
    let v53: s1 = v12.p0 in
    v31[0] = v30 in
    let v119: s1 = f82(v13) in
    var v44: s1 = v119 in
    let v70: Float = v31[0] in
    v12.p0 = v44 in
    v13.p3 = v24 in
    v24.p2 = v17 in
    v6.p0 = v25 in
    v6.p0 = v53 in
    v2.p1 = v53 in
    v70
  } in
  fun loop(i: Int, v0: s4, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s4 = s4(s1(s0([[0.0]], [[1.0]], [[2.0], [3.0]]), s0([[4.0]], [[5.0]], [[6.0], [7.0]]), s0([[8.0]], [[9.0]], [[10.0], [11.0]]), s0([[12.0]], [[13.0]], [[14.0], [15.0]])), s1(s0([[16.0]], [[17.0]], [[18.0], [19.0]]), s0([[20.0]], [[21.0]], [[22.0], [23.0]]), s0([[24.0]], [[25.0]], [[26.0], [27.0]]), s0([[28.0]], [[29.0]], [[30.0], [31.0]]))) in
    let v1: Float = 32.0 in
    let initialResult: Float = 32.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()