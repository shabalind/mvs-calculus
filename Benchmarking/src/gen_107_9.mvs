  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
  } in
  let f17: (Float) -> Float = (v0: Float) -> Float {
    var v5: Float = v0 in
    var v6: Float = v0 in
    v5 = v6 in
    var v3: Float = v5 in
    var v1: Float = v3 in
    let v2: [Float] = [v1] in
    v5 = v3 in
    let v4: Float = v2[0] in
    let v10: [Float] = [v3, v4, v3, v4, v4, v3] in
    let v9: Float = v2[0] in
    let v17: Float = v2[0] in
    let v16: Float = v10[4] in
    let v28: Float = v10[5] in
    let v41: [Float] = [v16, v4] in
    var v26: [Float] = v41 in
    let v48: Float = v26[0] in
    v26[1] = v17 in
    let v22: [Float] = [v48, v9, v5, v16, v1, v1, v4] in
    var v29: [Float] = v22 in
    let v33: Float = v29[2] in
    var v53: [Float] = v10 in
    v53[3] = v33 in
    let v124: [[Float]] = [v10] in
    var v63: [[Float]] = v124 in
    v26[1] = v28 in
    v53[4] = v28 in
    var v88: [[Float]] = v63 in
    var v45: [[Float]] = v88 in
    let v80: [Float] = v45[0] in
    var v169: [Float] = v80 in
    let v123: [Float] = v88[0] in
    v63[0] = v123 in
    v88[0] = v53 in
    let v203: Float = v169[0] in
    v203
  } in
  let noinline_f0: ([s1], s1, s0, Float) -> Float = (v0: [s1], v1: s1, v2: s0, v3: Float) -> Float {
    var v6: Float = v3 in
    let v11: [[Float]] = v2.p0 in
    let v13: [Float] = v11[0] in
    let v10: Float = f17(v6) in
    let v41: Float = v13[0] in
    var v34: Float = v10 in
    let v81: [Float] = v11[2] in
    let v51: Float = v81[0] in
    let v107: Float = v13[0] in
    let v114: Float = v41 + v34 in
    let v164: [Float] = [v107, v3, v114, v10, v51, v107] in
    let v104: Float = v164[1] in
    v104
  } in
  fun loop(i: Int, v0: [s1], v1: s1, v2: s0, v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s1] = [s1([s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]])], [[s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]])], [s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]])]]), s1([s0([[15.0], [16.0], [17.0]], [[18.0], [19.0]])], [[s0([[20.0], [21.0], [22.0]], [[23.0], [24.0]])], [s0([[25.0], [26.0], [27.0]], [[28.0], [29.0]])]])] in
    let v1: s1 = s1([s0([[30.0], [31.0], [32.0]], [[33.0], [34.0]])], [[s0([[35.0], [36.0], [37.0]], [[38.0], [39.0]])], [s0([[40.0], [41.0], [42.0]], [[43.0], [44.0]])]]) in
    let v2: s0 = s0([[45.0], [46.0], [47.0]], [[48.0], [49.0]]) in
    let v3: Float = 50.0 in
    let initialResult: Float = 50.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()