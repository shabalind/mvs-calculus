  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    let v4: s0 = v0.p0 in
    let v3: [[Float]] = v4.p1 in
    let v11: [[Float]] = v4.p0 in
    var v10: [[Float]] = v3 in
    let v22: [Float] = v10[0] in
    var v27: [[Float]] = v10 in
    let v18: [Float] = v11[0] in
    let v14: [Float] = v10[0] in
    let v36: [Float] = v27[0] in
    let v28: [Float] = v10[0] in
    let v40: Float = v14[0] in
    v10[0] = v28 in
    v10[0] = v22 in
    let v42: Float = v1 * v40 in
    let v55: Float = v36[0] in
    v27[0] = v18 in
    let v99: Float = v42 - v42 in
    let v88: Float = v99 + v55 in
    v88
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1(s0([[0.0], [1.0], [2.0]], [[3.0]]), [s0([[4.0], [5.0], [6.0]], [[7.0]]), s0([[8.0], [9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0], [14.0]], [[15.0]])]) in
    let v1: Float = 16.0 in
    let initialResult: Float = 16.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()