  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
    var p2: s0
  } in
  struct s2 {
    var p0: s1
    var p1: s0
  } in
  struct s3 {
    var p0: [Float]
  } in
  struct s6 {
    var p0: [s2]
    var p1: s2
    var p2: Float
    var p3: s2
    var p4: s2
    var p5: s3
  } in
  let f84: (Float) -> Float = (v0: Float) -> Float {
    var v3: Float = v0 in
    var v7: Float = v3 in
    var v4: Float = v3 in
    let v5: [Float] = [v7, v0, v7, v3, v3, v4] in
    let v2: Float = v5[3] in
    var v6: Float = v4 in
    var v35: [Float] = v5 in
    var v25: [Float] = v35 in
    let v33: Float = v35[3] in
    v35[4] = v2 in
    let v22: Float = v25[1] in
    let v47: [[Float]] = [v5, v25] in
    let v23: [[[Float]]] = [v47] in
    v35[5] = v22 in
    let v36: [[Float]] = v23[0] in
    v35[2] = v0 in
    let v31: [[Float]] = v23[0] in
    v25[4] = v6 in
    let v124: [Float] = v31[0] in
    let v41: Float = v124[5] in
    let v96: [Float] = v36[1] in
    v25 = v96 in
    let v205: [Float] = [v41, v0, v33] in
    var v71: [Float] = v205 in
    let v147: Float = v71[0] in
    v147
  } in
  let noinline_f0: ([s6], Float) -> Float = (v0: [s6], v1: Float) -> Float {
    let v4: s6 = v0[1] in
    let v7: s2 = v4.p3 in
    let v2: s0 = v7.p1 in
    let v11: [[Float]] = v2.p0 in
    let v35: Float = f84(v1) in
    let v69: [Float] = v11[0] in
    let v127: Float = v69[0] in
    let v52: [Float] = [v35, v127, v35, v127, v35] in
    let v84: Float = v52[2] in
    let v87: Float = f84(v84) in
    v87
  } in
  fun loop(i: Int, v0: [s6], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s6] = [s6([s2(s1(s0([[0.0]], [[1.0], [2.0]]), [[s0([[3.0]], [[4.0], [5.0]])], [s0([[6.0]], [[7.0], [8.0]])], [s0([[9.0]], [[10.0], [11.0]])]], s0([[12.0]], [[13.0], [14.0]])), s0([[15.0]], [[16.0], [17.0]])), s2(s1(s0([[18.0]], [[19.0], [20.0]]), [[s0([[21.0]], [[22.0], [23.0]])], [s0([[24.0]], [[25.0], [26.0]])], [s0([[27.0]], [[28.0], [29.0]])]], s0([[30.0]], [[31.0], [32.0]])), s0([[33.0]], [[34.0], [35.0]]))], s2(s1(s0([[36.0]], [[37.0], [38.0]]), [[s0([[39.0]], [[40.0], [41.0]])], [s0([[42.0]], [[43.0], [44.0]])], [s0([[45.0]], [[46.0], [47.0]])]], s0([[48.0]], [[49.0], [50.0]])), s0([[51.0]], [[52.0], [53.0]])), 54.0, s2(s1(s0([[55.0]], [[56.0], [57.0]]), [[s0([[58.0]], [[59.0], [60.0]])], [s0([[61.0]], [[62.0], [63.0]])], [s0([[64.0]], [[65.0], [66.0]])]], s0([[67.0]], [[68.0], [69.0]])), s0([[70.0]], [[71.0], [72.0]])), s2(s1(s0([[73.0]], [[74.0], [75.0]]), [[s0([[76.0]], [[77.0], [78.0]])], [s0([[79.0]], [[80.0], [81.0]])], [s0([[82.0]], [[83.0], [84.0]])]], s0([[85.0]], [[86.0], [87.0]])), s0([[88.0]], [[89.0], [90.0]])), s3([91.0, 92.0])), s6([s2(s1(s0([[93.0]], [[94.0], [95.0]]), [[s0([[96.0]], [[97.0], [98.0]])], [s0([[99.0]], [[100.0], [101.0]])], [s0([[102.0]], [[103.0], [104.0]])]], s0([[105.0]], [[106.0], [107.0]])), s0([[108.0]], [[109.0], [110.0]])), s2(s1(s0([[111.0]], [[112.0], [113.0]]), [[s0([[114.0]], [[115.0], [116.0]])], [s0([[117.0]], [[118.0], [119.0]])], [s0([[120.0]], [[121.0], [122.0]])]], s0([[123.0]], [[124.0], [125.0]])), s0([[126.0]], [[127.0], [128.0]]))], s2(s1(s0([[129.0]], [[130.0], [131.0]]), [[s0([[132.0]], [[133.0], [134.0]])], [s0([[135.0]], [[136.0], [137.0]])], [s0([[138.0]], [[139.0], [140.0]])]], s0([[141.0]], [[142.0], [143.0]])), s0([[144.0]], [[145.0], [146.0]])), 147.0, s2(s1(s0([[148.0]], [[149.0], [150.0]]), [[s0([[151.0]], [[152.0], [153.0]])], [s0([[154.0]], [[155.0], [156.0]])], [s0([[157.0]], [[158.0], [159.0]])]], s0([[160.0]], [[161.0], [162.0]])), s0([[163.0]], [[164.0], [165.0]])), s2(s1(s0([[166.0]], [[167.0], [168.0]]), [[s0([[169.0]], [[170.0], [171.0]])], [s0([[172.0]], [[173.0], [174.0]])], [s0([[175.0]], [[176.0], [177.0]])]], s0([[178.0]], [[179.0], [180.0]])), s0([[181.0]], [[182.0], [183.0]])), s3([184.0, 185.0])), s6([s2(s1(s0([[186.0]], [[187.0], [188.0]]), [[s0([[189.0]], [[190.0], [191.0]])], [s0([[192.0]], [[193.0], [194.0]])], [s0([[195.0]], [[196.0], [197.0]])]], s0([[198.0]], [[199.0], [200.0]])), s0([[201.0]], [[202.0], [203.0]])), s2(s1(s0([[204.0]], [[205.0], [206.0]]), [[s0([[207.0]], [[208.0], [209.0]])], [s0([[210.0]], [[211.0], [212.0]])], [s0([[213.0]], [[214.0], [215.0]])]], s0([[216.0]], [[217.0], [218.0]])), s0([[219.0]], [[220.0], [221.0]]))], s2(s1(s0([[222.0]], [[223.0], [224.0]]), [[s0([[225.0]], [[226.0], [227.0]])], [s0([[228.0]], [[229.0], [230.0]])], [s0([[231.0]], [[232.0], [233.0]])]], s0([[234.0]], [[235.0], [236.0]])), s0([[237.0]], [[238.0], [239.0]])), 240.0, s2(s1(s0([[241.0]], [[242.0], [243.0]]), [[s0([[244.0]], [[245.0], [246.0]])], [s0([[247.0]], [[248.0], [249.0]])], [s0([[250.0]], [[251.0], [252.0]])]], s0([[253.0]], [[254.0], [255.0]])), s0([[256.0]], [[257.0], [258.0]])), s2(s1(s0([[259.0]], [[260.0], [261.0]]), [[s0([[262.0]], [[263.0], [264.0]])], [s0([[265.0]], [[266.0], [267.0]])], [s0([[268.0]], [[269.0], [270.0]])]], s0([[271.0]], [[272.0], [273.0]])), s0([[274.0]], [[275.0], [276.0]])), s3([277.0, 278.0]))] in
    let v1: Float = 279.0 in
    let initialResult: Float = 279.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()