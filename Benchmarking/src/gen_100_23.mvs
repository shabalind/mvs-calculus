  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s3 {
    var p0: s1
    var p1: [s0]
  } in
  struct s6 {
    var p0: [s1]
    var p1: s3
  } in
  struct s7 {
    var p0: s3
    var p1: [s6]
  } in
  let f17: (Float) -> Float = (v0: Float) -> Float {
    var v3: Float = v0 in
    var v2: Float = v0 in
    var v7: Float = v0 in
    var v6: Float = v7 in
    var v8: Float = v6 in
    var v4: Float = v6 in
    let v5: Float = v7 - v2 in
    var v10: Float = v3 in
    var v1: Float = v10 in
    var v11: Float = v7 in
    var v12: Float = v6 in
    var v9: Float = v12 in
    var v13: Float = v5 in
    var v18: Float = v12 in
    var v15: Float = v11 in
    var v20: Float = v3 in
    let v14: [Float] = [v18, v2, v7, v6, v6, v15, v20] in
    var v17: [Float] = v14 in
    v17[6] = v13 in
    v17[2] = v1 in
    var v40: Float = v18 in
    var v29: [Float] = v17 in
    var v25: [Float] = v29 in
    v40 = v7 in
    v29[1] = v40 in
    let v55: [[Float]] = [v14, v25, v17, v25, v29] in
    let v57: [Float] = v55[3] in
    v17[3] = v9 in
    v17[4] = v4 in
    v17[3] = v8 in
    v25[4] = v20 in
    let v124: Float = v57[5] in
    v29[4] = v11 in
    v124
  } in
  let noinline_f0: ([s7], Float) -> Float = (v0: [s7], v1: Float) -> Float {
    let v28: Float = v1 + v1 in
    let v34: Float = f17(v28) in
    var v20: Float = v34 in
    let v19: Float = f17(v34) in
    let v31: [Float] = [v20, v1, v19, v20, v34] in
    var v44: [Float] = v31 in
    let v67: Float = v44[0] in
    v67
  } in
  fun loop(i: Int, v0: [s7], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s7] = [s7(s3(s1(s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]), [s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]])]), [s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]]), s0([[15.0], [16.0]], [[17.0], [18.0], [19.0]])]), [s6([s1(s0([[20.0], [21.0]], [[22.0], [23.0], [24.0]]), [s0([[25.0], [26.0]], [[27.0], [28.0], [29.0]])]), s1(s0([[30.0], [31.0]], [[32.0], [33.0], [34.0]]), [s0([[35.0], [36.0]], [[37.0], [38.0], [39.0]])]), s1(s0([[40.0], [41.0]], [[42.0], [43.0], [44.0]]), [s0([[45.0], [46.0]], [[47.0], [48.0], [49.0]])])], s3(s1(s0([[50.0], [51.0]], [[52.0], [53.0], [54.0]]), [s0([[55.0], [56.0]], [[57.0], [58.0], [59.0]])]), [s0([[60.0], [61.0]], [[62.0], [63.0], [64.0]]), s0([[65.0], [66.0]], [[67.0], [68.0], [69.0]])])), s6([s1(s0([[70.0], [71.0]], [[72.0], [73.0], [74.0]]), [s0([[75.0], [76.0]], [[77.0], [78.0], [79.0]])]), s1(s0([[80.0], [81.0]], [[82.0], [83.0], [84.0]]), [s0([[85.0], [86.0]], [[87.0], [88.0], [89.0]])]), s1(s0([[90.0], [91.0]], [[92.0], [93.0], [94.0]]), [s0([[95.0], [96.0]], [[97.0], [98.0], [99.0]])])], s3(s1(s0([[100.0], [101.0]], [[102.0], [103.0], [104.0]]), [s0([[105.0], [106.0]], [[107.0], [108.0], [109.0]])]), [s0([[110.0], [111.0]], [[112.0], [113.0], [114.0]]), s0([[115.0], [116.0]], [[117.0], [118.0], [119.0]])]))])] in
    let v1: Float = 120.0 in
    let initialResult: Float = 120.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()