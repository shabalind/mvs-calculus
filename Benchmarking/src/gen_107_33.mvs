  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s2 {
    var p0: [[s0]]
    var p1: s0
  } in
  struct s3 {
    var p0: s2
    var p1: s1
  } in
  let noinline_f0: ([s3], [s0], s0, [[s2]], Float) -> Float = (v0: [s3], v1: [s0], v2: s0, v3: [[s2]], v4: Float) -> Float {
    let v8: [[Float]] = v2.p1 in
    let v6: [Float] = v8[1] in
    let v9: Float = v6[0] in
    let v20: [[Float]] = v2.p1 in
    let v33: [Float] = [v9, v4, v4, v9, v4, v4, v9] in
    var v24: [Float] = v33 in
    let v43: [Float] = v20[1] in
    let v15: Float = v43[0] in
    var v53: [Float] = v6 in
    let v40: Float = v53[0] in
    v24[0] = v40 in
    let v105: Float = v24[0] in
    v53[0] = v15 in
    v105
  } in
  fun loop(i: Int, v0: [s3], v1: [s0], v2: s0, v3: [[s2]], v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s3] = [s3(s2([[s0([[0.0], [1.0], [2.0]], [[3.0], [4.0]])], [s0([[5.0], [6.0], [7.0]], [[8.0], [9.0]])]], s0([[10.0], [11.0], [12.0]], [[13.0], [14.0]])), s1([s0([[15.0], [16.0], [17.0]], [[18.0], [19.0]]), s0([[20.0], [21.0], [22.0]], [[23.0], [24.0]]), s0([[25.0], [26.0], [27.0]], [[28.0], [29.0]])], [s0([[30.0], [31.0], [32.0]], [[33.0], [34.0]]), s0([[35.0], [36.0], [37.0]], [[38.0], [39.0]]), s0([[40.0], [41.0], [42.0]], [[43.0], [44.0]])]))] in
    let v1: [s0] = [s0([[45.0], [46.0], [47.0]], [[48.0], [49.0]])] in
    let v2: s0 = s0([[50.0], [51.0], [52.0]], [[53.0], [54.0]]) in
    let v3: [[s2]] = [[s2([[s0([[55.0], [56.0], [57.0]], [[58.0], [59.0]])], [s0([[60.0], [61.0], [62.0]], [[63.0], [64.0]])]], s0([[65.0], [66.0], [67.0]], [[68.0], [69.0]]))]] in
    let v4: Float = 70.0 in
    let initialResult: Float = 70.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()