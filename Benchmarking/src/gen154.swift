  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
    var p2: [[s0]]
    var p3: [s0]
  }
  struct s2 {
    var p0: s1
    var p1: s1
  }
  struct s3 {
    var p0: [[s2]]
    var p1: s2
  }
  struct s4 {
    var p0: [s2]
    var p1: [s0]
  }
  struct s7 {
    var p0: s4
    var p1: [s3]
  }
  @inline(never)
  func f0(_ v0: s1, _ v1: [s7], _ v2: Double) -> Double {
    let v5: s0 = v0.p0
    var v4: Double = v2
    let v8: [[Double]] = v5.p1
    let v6: [Double] = v8[0]
    let v16: [[Double]] = v5.p0
    var v17: [Double] = v6
    let v21: Double = v2 / v4
    v17[0] = v21
    v17[0] = v2
    var v30: [[Double]] = v16
    let v20: Double = v17[0]
    let v54: [[Double]] = v5.p1
    let v51: [Double] = v30[0]
    v17[0] = v21
    var v79: [[Double]] = v8
    let v42: [Double] = v79[0]
    let v75: Double = v42[0]
    let v40: [Double] = v54[0]
    v79[0] = v51
    let v101: Double = v75 - v20
    var v150: [Double] = v40
    v79[0] = v150
    v79[0] = v51
    return v101
  }
  func benchmark() {
    let v0: s1 = s1(p0: s0(p0: [[0.0]], p1: [[1.0]]), p1: [s0(p0: [[2.0]], p1: [[3.0]]), s0(p0: [[4.0]], p1: [[5.0]])], p2: [[s0(p0: [[6.0]], p1: [[7.0]])]], p3: [s0(p0: [[8.0]], p1: [[9.0]]), s0(p0: [[10.0]], p1: [[11.0]])])
    let v1: [s7] = [s7(p0: s4(p0: [s2(p0: s1(p0: s0(p0: [[12.0]], p1: [[13.0]]), p1: [s0(p0: [[14.0]], p1: [[15.0]]), s0(p0: [[16.0]], p1: [[17.0]])], p2: [[s0(p0: [[18.0]], p1: [[19.0]])]], p3: [s0(p0: [[20.0]], p1: [[21.0]]), s0(p0: [[22.0]], p1: [[23.0]])]), p1: s1(p0: s0(p0: [[24.0]], p1: [[25.0]]), p1: [s0(p0: [[26.0]], p1: [[27.0]]), s0(p0: [[28.0]], p1: [[29.0]])], p2: [[s0(p0: [[30.0]], p1: [[31.0]])]], p3: [s0(p0: [[32.0]], p1: [[33.0]]), s0(p0: [[34.0]], p1: [[35.0]])])), s2(p0: s1(p0: s0(p0: [[36.0]], p1: [[37.0]]), p1: [s0(p0: [[38.0]], p1: [[39.0]]), s0(p0: [[40.0]], p1: [[41.0]])], p2: [[s0(p0: [[42.0]], p1: [[43.0]])]], p3: [s0(p0: [[44.0]], p1: [[45.0]]), s0(p0: [[46.0]], p1: [[47.0]])]), p1: s1(p0: s0(p0: [[48.0]], p1: [[49.0]]), p1: [s0(p0: [[50.0]], p1: [[51.0]]), s0(p0: [[52.0]], p1: [[53.0]])], p2: [[s0(p0: [[54.0]], p1: [[55.0]])]], p3: [s0(p0: [[56.0]], p1: [[57.0]]), s0(p0: [[58.0]], p1: [[59.0]])]))], p1: [s0(p0: [[60.0]], p1: [[61.0]]), s0(p0: [[62.0]], p1: [[63.0]]), s0(p0: [[64.0]], p1: [[65.0]])]), p1: [s3(p0: [[s2(p0: s1(p0: s0(p0: [[66.0]], p1: [[67.0]]), p1: [s0(p0: [[68.0]], p1: [[69.0]]), s0(p0: [[70.0]], p1: [[71.0]])], p2: [[s0(p0: [[72.0]], p1: [[73.0]])]], p3: [s0(p0: [[74.0]], p1: [[75.0]]), s0(p0: [[76.0]], p1: [[77.0]])]), p1: s1(p0: s0(p0: [[78.0]], p1: [[79.0]]), p1: [s0(p0: [[80.0]], p1: [[81.0]]), s0(p0: [[82.0]], p1: [[83.0]])], p2: [[s0(p0: [[84.0]], p1: [[85.0]])]], p3: [s0(p0: [[86.0]], p1: [[87.0]]), s0(p0: [[88.0]], p1: [[89.0]])]))]], p1: s2(p0: s1(p0: s0(p0: [[90.0]], p1: [[91.0]]), p1: [s0(p0: [[92.0]], p1: [[93.0]]), s0(p0: [[94.0]], p1: [[95.0]])], p2: [[s0(p0: [[96.0]], p1: [[97.0]])]], p3: [s0(p0: [[98.0]], p1: [[99.0]]), s0(p0: [[100.0]], p1: [[101.0]])]), p1: s1(p0: s0(p0: [[102.0]], p1: [[103.0]]), p1: [s0(p0: [[104.0]], p1: [[105.0]]), s0(p0: [[106.0]], p1: [[107.0]])], p2: [[s0(p0: [[108.0]], p1: [[109.0]])]], p3: [s0(p0: [[110.0]], p1: [[111.0]]), s0(p0: [[112.0]], p1: [[113.0]])]))), s3(p0: [[s2(p0: s1(p0: s0(p0: [[114.0]], p1: [[115.0]]), p1: [s0(p0: [[116.0]], p1: [[117.0]]), s0(p0: [[118.0]], p1: [[119.0]])], p2: [[s0(p0: [[120.0]], p1: [[121.0]])]], p3: [s0(p0: [[122.0]], p1: [[123.0]]), s0(p0: [[124.0]], p1: [[125.0]])]), p1: s1(p0: s0(p0: [[126.0]], p1: [[127.0]]), p1: [s0(p0: [[128.0]], p1: [[129.0]]), s0(p0: [[130.0]], p1: [[131.0]])], p2: [[s0(p0: [[132.0]], p1: [[133.0]])]], p3: [s0(p0: [[134.0]], p1: [[135.0]]), s0(p0: [[136.0]], p1: [[137.0]])]))]], p1: s2(p0: s1(p0: s0(p0: [[138.0]], p1: [[139.0]]), p1: [s0(p0: [[140.0]], p1: [[141.0]]), s0(p0: [[142.0]], p1: [[143.0]])], p2: [[s0(p0: [[144.0]], p1: [[145.0]])]], p3: [s0(p0: [[146.0]], p1: [[147.0]]), s0(p0: [[148.0]], p1: [[149.0]])]), p1: s1(p0: s0(p0: [[150.0]], p1: [[151.0]]), p1: [s0(p0: [[152.0]], p1: [[153.0]]), s0(p0: [[154.0]], p1: [[155.0]])], p2: [[s0(p0: [[156.0]], p1: [[157.0]])]], p3: [s0(p0: [[158.0]], p1: [[159.0]]), s0(p0: [[160.0]], p1: [[161.0]])])))]), s7(p0: s4(p0: [s2(p0: s1(p0: s0(p0: [[162.0]], p1: [[163.0]]), p1: [s0(p0: [[164.0]], p1: [[165.0]]), s0(p0: [[166.0]], p1: [[167.0]])], p2: [[s0(p0: [[168.0]], p1: [[169.0]])]], p3: [s0(p0: [[170.0]], p1: [[171.0]]), s0(p0: [[172.0]], p1: [[173.0]])]), p1: s1(p0: s0(p0: [[174.0]], p1: [[175.0]]), p1: [s0(p0: [[176.0]], p1: [[177.0]]), s0(p0: [[178.0]], p1: [[179.0]])], p2: [[s0(p0: [[180.0]], p1: [[181.0]])]], p3: [s0(p0: [[182.0]], p1: [[183.0]]), s0(p0: [[184.0]], p1: [[185.0]])])), s2(p0: s1(p0: s0(p0: [[186.0]], p1: [[187.0]]), p1: [s0(p0: [[188.0]], p1: [[189.0]]), s0(p0: [[190.0]], p1: [[191.0]])], p2: [[s0(p0: [[192.0]], p1: [[193.0]])]], p3: [s0(p0: [[194.0]], p1: [[195.0]]), s0(p0: [[196.0]], p1: [[197.0]])]), p1: s1(p0: s0(p0: [[198.0]], p1: [[199.0]]), p1: [s0(p0: [[200.0]], p1: [[201.0]]), s0(p0: [[202.0]], p1: [[203.0]])], p2: [[s0(p0: [[204.0]], p1: [[205.0]])]], p3: [s0(p0: [[206.0]], p1: [[207.0]]), s0(p0: [[208.0]], p1: [[209.0]])]))], p1: [s0(p0: [[210.0]], p1: [[211.0]]), s0(p0: [[212.0]], p1: [[213.0]]), s0(p0: [[214.0]], p1: [[215.0]])]), p1: [s3(p0: [[s2(p0: s1(p0: s0(p0: [[216.0]], p1: [[217.0]]), p1: [s0(p0: [[218.0]], p1: [[219.0]]), s0(p0: [[220.0]], p1: [[221.0]])], p2: [[s0(p0: [[222.0]], p1: [[223.0]])]], p3: [s0(p0: [[224.0]], p1: [[225.0]]), s0(p0: [[226.0]], p1: [[227.0]])]), p1: s1(p0: s0(p0: [[228.0]], p1: [[229.0]]), p1: [s0(p0: [[230.0]], p1: [[231.0]]), s0(p0: [[232.0]], p1: [[233.0]])], p2: [[s0(p0: [[234.0]], p1: [[235.0]])]], p3: [s0(p0: [[236.0]], p1: [[237.0]]), s0(p0: [[238.0]], p1: [[239.0]])]))]], p1: s2(p0: s1(p0: s0(p0: [[240.0]], p1: [[241.0]]), p1: [s0(p0: [[242.0]], p1: [[243.0]]), s0(p0: [[244.0]], p1: [[245.0]])], p2: [[s0(p0: [[246.0]], p1: [[247.0]])]], p3: [s0(p0: [[248.0]], p1: [[249.0]]), s0(p0: [[250.0]], p1: [[251.0]])]), p1: s1(p0: s0(p0: [[252.0]], p1: [[253.0]]), p1: [s0(p0: [[254.0]], p1: [[255.0]]), s0(p0: [[256.0]], p1: [[257.0]])], p2: [[s0(p0: [[258.0]], p1: [[259.0]])]], p3: [s0(p0: [[260.0]], p1: [[261.0]]), s0(p0: [[262.0]], p1: [[263.0]])]))), s3(p0: [[s2(p0: s1(p0: s0(p0: [[264.0]], p1: [[265.0]]), p1: [s0(p0: [[266.0]], p1: [[267.0]]), s0(p0: [[268.0]], p1: [[269.0]])], p2: [[s0(p0: [[270.0]], p1: [[271.0]])]], p3: [s0(p0: [[272.0]], p1: [[273.0]]), s0(p0: [[274.0]], p1: [[275.0]])]), p1: s1(p0: s0(p0: [[276.0]], p1: [[277.0]]), p1: [s0(p0: [[278.0]], p1: [[279.0]]), s0(p0: [[280.0]], p1: [[281.0]])], p2: [[s0(p0: [[282.0]], p1: [[283.0]])]], p3: [s0(p0: [[284.0]], p1: [[285.0]]), s0(p0: [[286.0]], p1: [[287.0]])]))]], p1: s2(p0: s1(p0: s0(p0: [[288.0]], p1: [[289.0]]), p1: [s0(p0: [[290.0]], p1: [[291.0]]), s0(p0: [[292.0]], p1: [[293.0]])], p2: [[s0(p0: [[294.0]], p1: [[295.0]])]], p3: [s0(p0: [[296.0]], p1: [[297.0]]), s0(p0: [[298.0]], p1: [[299.0]])]), p1: s1(p0: s0(p0: [[300.0]], p1: [[301.0]]), p1: [s0(p0: [[302.0]], p1: [[303.0]]), s0(p0: [[304.0]], p1: [[305.0]])], p2: [[s0(p0: [[306.0]], p1: [[307.0]])]], p3: [s0(p0: [[308.0]], p1: [[309.0]]), s0(p0: [[310.0]], p1: [[311.0]])])))])]
    let v2: Double = 312.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 312.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
