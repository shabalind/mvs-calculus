  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  let noinline_f0: (s1, s1, Float) -> Float = (v0: s1, v1: s1, v2: Float) -> Float {
    var v4: Float = v2 in
    var v3: Float = v4 in
    var v15: Float = v3 in
    let v7: Float = v3 + v15 in
    let v14: [Float] = [v15, v3] in
    let v29: Float = v14[1] in
    var v33: [Float] = v14 in
    let v20: [[Float]] = [v33, v14, v14] in
    v33[0] = v7 in
    v33[1] = v29 in
    var v48: [[Float]] = v20 in
    let v42: [Float] = v20[1] in
    v33 = v42 in
    let v56: [Float] = v48[2] in
    v48[2] = v42 in
    var v144: [Float] = v56 in
    v48[1] = v144 in
    let v81: Float = v56[0] in
    v48[0] = v33 in
    v144[0] = v7 in
    v81
  } in
  fun loop(i: Int, v0: s1, v1: s1, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1(s0([[0.0], [1.0], [2.0]], [[3.0]]), [s0([[4.0], [5.0], [6.0]], [[7.0]]), s0([[8.0], [9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0], [14.0]], [[15.0]])]) in
    let v1: s1 = s1(s0([[16.0], [17.0], [18.0]], [[19.0]]), [s0([[20.0], [21.0], [22.0]], [[23.0]]), s0([[24.0], [25.0], [26.0]], [[27.0]]), s0([[28.0], [29.0], [30.0]], [[31.0]])]) in
    let v2: Float = 32.0 in
    let initialResult: Float = 32.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()