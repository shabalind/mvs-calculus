  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
    var p2: s0
  } in
  struct s2 {
    var p0: [[s1]]
    var p1: s1
  } in
  struct s5 {
    var p0: s1
    var p1: s2
  } in
  let f94: (Float) -> Float = (v0: Float) -> Float {
    let v4: [Float] = [v0] in
    let v3: Float = v4[0] in
    let v5: Float = v4[0] in
    var v1: [Float] = v4 in
    v1[0] = v3 in
    var v8: [Float] = v4 in
    let v21: Float = v4[0] in
    v1[0] = v5 in
    var v16: [Float] = v1 in
    let v25: Float = v16[0] in
    let v45: [[Float]] = [v16, v4, v8, v16] in
    v8[0] = v25 in
    var v69: Float = v21 in
    let v26: [Float] = v45[3] in
    v1[0] = v69 in
    let v73: Float = v26[0] in
    v73
  } in
  let noinline_f0: ([[s1]], s5, Float) -> Float = (v0: [[s1]], v1: s5, v2: Float) -> Float {
    var v4: Float = v2 in
    let v9: Float = f94(v4) in
    let v50: Float = v2 * v4 in
    let v113: [Float] = [v2, v2, v2, v50, v9, v4] in
    let v145: Float = v113[0] in
    let v179: Float = v50 * v145 in
    v179
  } in
  fun loop(i: Int, v0: [[s1]], v1: s5, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s1]] = [[s1([s0([[0.0], [1.0]], [[2.0], [3.0]])], s0([[4.0], [5.0]], [[6.0], [7.0]]), s0([[8.0], [9.0]], [[10.0], [11.0]]))], [s1([s0([[12.0], [13.0]], [[14.0], [15.0]])], s0([[16.0], [17.0]], [[18.0], [19.0]]), s0([[20.0], [21.0]], [[22.0], [23.0]]))]] in
    let v1: s5 = s5(s1([s0([[24.0], [25.0]], [[26.0], [27.0]])], s0([[28.0], [29.0]], [[30.0], [31.0]]), s0([[32.0], [33.0]], [[34.0], [35.0]])), s2([[s1([s0([[36.0], [37.0]], [[38.0], [39.0]])], s0([[40.0], [41.0]], [[42.0], [43.0]]), s0([[44.0], [45.0]], [[46.0], [47.0]]))], [s1([s0([[48.0], [49.0]], [[50.0], [51.0]])], s0([[52.0], [53.0]], [[54.0], [55.0]]), s0([[56.0], [57.0]], [[58.0], [59.0]]))]], s1([s0([[60.0], [61.0]], [[62.0], [63.0]])], s0([[64.0], [65.0]], [[66.0], [67.0]]), s0([[68.0], [69.0]], [[70.0], [71.0]])))) in
    let v2: Float = 72.0 in
    let initialResult: Float = 72.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()