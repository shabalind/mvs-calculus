  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: [[s0]]
    var p1: s0
  }
  struct s3 {
    var p0: s2
    var p1: s0
  }
  struct s4 {
    var p0: s0
  }
  struct s5 {
    var p0: s0
    var p1: s2
  }
  struct s6 {
    var p0: s4
    var p1: [s3]
  }
  struct s7 {
    var p0: s6
    var p1: s6
  }
  struct s9 {
    var p0: [s7]
    var p1: [[s5]]
  }
  struct s10 {
    var p0: s5
    var p1: [s1]
  }
  struct s12 {
    var p0: Double
    var p1: [[s10]]
  }
  @inline(never)
  func f0(_ v0: [[s9]], _ v1: s12, _ v2: s12, _ v3: Double) -> Double {
    let v5: Double = v2.p0
    let v7: Double = v2.p0
    let v24: [[s10]] = v1.p1
    let v14: [[s10]] = v2.p1
    let v9: s12 = s12(p0: v7, p1: v14)
    let v12: [Double] = [v5, v3, v5]
    let v20: Double = v9.p0
    var v25: s12 = v2
    v25.p1 = v14
    let v37: s12 = s12(p0: v7, p1: v24)
    var v86: s12 = v37
    v25.p0 = v5
    let v53: Double = v12[0]
    v25.p0 = v53
    v25.p1 = v24
    v25.p0 = v20
    let v79: [[s10]] = v86.p1
    let v186: Double = v25.p0
    v25.p1 = v79
    return v186
  }
  func benchmark() {
    let v0: [[s9]] = [[s9(p0: [s7(p0: s6(p0: s4(p0: s0(p0: [[0.0], [1.0]], p1: [[2.0], [3.0]])), p1: [s3(p0: s2(p0: [[s0(p0: [[4.0], [5.0]], p1: [[6.0], [7.0]])]], p1: s0(p0: [[8.0], [9.0]], p1: [[10.0], [11.0]])), p1: s0(p0: [[12.0], [13.0]], p1: [[14.0], [15.0]]))]), p1: s6(p0: s4(p0: s0(p0: [[16.0], [17.0]], p1: [[18.0], [19.0]])), p1: [s3(p0: s2(p0: [[s0(p0: [[20.0], [21.0]], p1: [[22.0], [23.0]])]], p1: s0(p0: [[24.0], [25.0]], p1: [[26.0], [27.0]])), p1: s0(p0: [[28.0], [29.0]], p1: [[30.0], [31.0]]))])), s7(p0: s6(p0: s4(p0: s0(p0: [[32.0], [33.0]], p1: [[34.0], [35.0]])), p1: [s3(p0: s2(p0: [[s0(p0: [[36.0], [37.0]], p1: [[38.0], [39.0]])]], p1: s0(p0: [[40.0], [41.0]], p1: [[42.0], [43.0]])), p1: s0(p0: [[44.0], [45.0]], p1: [[46.0], [47.0]]))]), p1: s6(p0: s4(p0: s0(p0: [[48.0], [49.0]], p1: [[50.0], [51.0]])), p1: [s3(p0: s2(p0: [[s0(p0: [[52.0], [53.0]], p1: [[54.0], [55.0]])]], p1: s0(p0: [[56.0], [57.0]], p1: [[58.0], [59.0]])), p1: s0(p0: [[60.0], [61.0]], p1: [[62.0], [63.0]]))]))], p1: [[s5(p0: s0(p0: [[64.0], [65.0]], p1: [[66.0], [67.0]]), p1: s2(p0: [[s0(p0: [[68.0], [69.0]], p1: [[70.0], [71.0]])]], p1: s0(p0: [[72.0], [73.0]], p1: [[74.0], [75.0]])))], [s5(p0: s0(p0: [[76.0], [77.0]], p1: [[78.0], [79.0]]), p1: s2(p0: [[s0(p0: [[80.0], [81.0]], p1: [[82.0], [83.0]])]], p1: s0(p0: [[84.0], [85.0]], p1: [[86.0], [87.0]])))], [s5(p0: s0(p0: [[88.0], [89.0]], p1: [[90.0], [91.0]]), p1: s2(p0: [[s0(p0: [[92.0], [93.0]], p1: [[94.0], [95.0]])]], p1: s0(p0: [[96.0], [97.0]], p1: [[98.0], [99.0]])))]])]]
    let v1: s12 = s12(p0: 100.0, p1: [[s10(p0: s5(p0: s0(p0: [[101.0], [102.0]], p1: [[103.0], [104.0]]), p1: s2(p0: [[s0(p0: [[105.0], [106.0]], p1: [[107.0], [108.0]])]], p1: s0(p0: [[109.0], [110.0]], p1: [[111.0], [112.0]]))), p1: [s1(p0: s0(p0: [[113.0], [114.0]], p1: [[115.0], [116.0]]), p1: [s0(p0: [[117.0], [118.0]], p1: [[119.0], [120.0]]), s0(p0: [[121.0], [122.0]], p1: [[123.0], [124.0]]), s0(p0: [[125.0], [126.0]], p1: [[127.0], [128.0]])])])]])
    let v2: s12 = s12(p0: 129.0, p1: [[s10(p0: s5(p0: s0(p0: [[130.0], [131.0]], p1: [[132.0], [133.0]]), p1: s2(p0: [[s0(p0: [[134.0], [135.0]], p1: [[136.0], [137.0]])]], p1: s0(p0: [[138.0], [139.0]], p1: [[140.0], [141.0]]))), p1: [s1(p0: s0(p0: [[142.0], [143.0]], p1: [[144.0], [145.0]]), p1: [s0(p0: [[146.0], [147.0]], p1: [[148.0], [149.0]]), s0(p0: [[150.0], [151.0]], p1: [[152.0], [153.0]]), s0(p0: [[154.0], [155.0]], p1: [[156.0], [157.0]])])])]])
    let v3: Double = 158.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 158.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
