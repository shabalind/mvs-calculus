  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s6 {
    var p0: [s0]
    var p1: s1
  } in
  let f58: (Float) -> Float = (v0: Float) -> Float {
    var v7: Float = v0 in
    var v4: Float = v0 in
    var v1: Float = v7 in
    var v5: Float = v0 in
    var v2: Float = v5 in
    var v3: Float = v1 in
    v7 = v5 in
    var v11: Float = v3 in
    var v13: Float = v11 in
    var v8: Float = v11 in
    var v6: Float = v2 in
    v5 = v3 in
    v7 = v0 in
    var v17: Float = v8 in
    v5 = v7 in
    var v37: Float = v11 in
    let v16: [Float] = [v6, v2, v5, v17] in
    let v27: Float = v16[0] in
    let v48: Float = v16[0] in
    let v36: [Float] = [v48, v4, v27, v17, v13, v37] in
    let v43: Float = v36[4] in
    v43
  } in
  let noinline_f0: ([[s6]], Float) -> Float = (v0: [[s6]], v1: Float) -> Float {
    let v2: Float = f58(v1) in
    let v5: Float = v2 * v2 in
    let v13: Float = f58(v5) in
    v13
  } in
  fun loop(i: Int, v0: [[s6]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s6]] = [[s6([s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]])], s1(s0([[5.0], [6.0]], [[7.0], [8.0], [9.0]]), [[s0([[10.0], [11.0]], [[12.0], [13.0], [14.0]])]]))], [s6([s0([[15.0], [16.0]], [[17.0], [18.0], [19.0]])], s1(s0([[20.0], [21.0]], [[22.0], [23.0], [24.0]]), [[s0([[25.0], [26.0]], [[27.0], [28.0], [29.0]])]]))], [s6([s0([[30.0], [31.0]], [[32.0], [33.0], [34.0]])], s1(s0([[35.0], [36.0]], [[37.0], [38.0], [39.0]]), [[s0([[40.0], [41.0]], [[42.0], [43.0], [44.0]])]]))]] in
    let v1: Float = 45.0 in
    let initialResult: Float = 45.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()