  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
    var p3: [[Float]]
  } in
  struct s3 {
    var p0: [[s0]]
    var p1: [[s0]]
  } in
  let f3: ([[s0]]) -> [[s0]] = (v0: [[s0]]) -> [[s0]] {
    var v2: [[s0]] = v0 in
    let v6: [s0] = v0[0] in
    let v7: s0 = v6[0] in
    v2[0] = v6 in
    var v4: [[s0]] = v2 in
    v2[0] = v6 in
    var v1: s0 = v7 in
    var v9: [[s0]] = v4 in
    var v15: [s0] = v6 in
    let v25: [[Float]] = v1.p0 in
    let v30: [[Float]] = v1.p1 in
    v15[0] = v1 in
    var v13: [[Float]] = v25 in
    v1.p3 = v13 in
    v2[0] = v15 in
    v1.p1 = v30 in
    v2 = v4 in
    v9
  } in
  let noinline_f0: (s3, Float) -> Float = (v0: s3, v1: Float) -> Float {
    var v11: s3 = v0 in
    var v2: s3 = v11 in
    let v4: [[s0]] = v0.p1 in
    let v7: [[s0]] = v11.p0 in
    let v8: [s0] = v7[2] in
    let v9: [[s0]] = f3(v4) in
    v11.p1 = v4 in
    let v17: [[s0]] = f3(v4) in
    var v23: [[s0]] = v17 in
    let v18: [s0] = v7[0] in
    v23 = v4 in
    var v14: [[s0]] = v7 in
    let v29: s0 = v8[0] in
    var v35: [[s0]] = v9 in
    let v43: [[Float]] = v29.p3 in
    v35[0] = v18 in
    let v24: [Float] = v43[1] in
    let v21: [[s0]] = f3(v35) in
    let v31: [s0] = v14[1] in
    let v36: [[s0]] = f3(v23) in
    let v49: [s0] = v7[2] in
    v35[0] = v31 in
    let v39: [[s0]] = f3(v36) in
    let v73: [s0] = v23[0] in
    var v48: [Float] = v24 in
    v35[0] = v49 in
    let v41: [[s0]] = f3(v39) in
    v35[0] = v31 in
    v2.p1 = v21 in
    v2.p1 = v9 in
    let v87: [[s0]] = f3(v41) in
    let v99: Float = v48[0] in
    var v129: s3 = v2 in
    let v57: [s0] = v87[0] in
    let v100: Float = v99 * v99 in
    v48[0] = v1 in
    var v92: [[s0]] = v14 in
    v92[2] = v57 in
    v11 = v129 in
    v23[0] = v73 in
    v2.p0 = v92 in
    v100
  } in
  fun loop(i: Int, v0: s3, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3([[s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]], [[5.0], [6.0]], [[7.0], [8.0]])], [s0([[9.0], [10.0]], [[11.0], [12.0], [13.0]], [[14.0], [15.0]], [[16.0], [17.0]])], [s0([[18.0], [19.0]], [[20.0], [21.0], [22.0]], [[23.0], [24.0]], [[25.0], [26.0]])]], [[s0([[27.0], [28.0]], [[29.0], [30.0], [31.0]], [[32.0], [33.0]], [[34.0], [35.0]])]]) in
    let v1: Float = 36.0 in
    let initialResult: Float = 36.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()