  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s2 {
    var p0: [s1]
    var p1: [[s1]]
  } in
  let f11: (s0) -> s0 = (v0: s0) -> s0 {
    var v4: s0 = v0 in
    var v2: s0 = v4 in
    var v3: s0 = v4 in
    let v11: [[Float]] = v3.p0 in
    v2.p0 = v11 in
    let v6: [Float] = v11[0] in
    let v5: [[Float]] = v4.p0 in
    let v8: [Float] = v5[1] in
    let v9: [[Float]] = v2.p0 in
    var v10: [Float] = v6 in
    let v7: [[Float]] = v0.p0 in
    var v24: [[Float]] = v9 in
    let v16: [[Float]] = v2.p0 in
    let v28: Float = v8[0] in
    v2.p0 = v7 in
    var v17: Float = v28 in
    v4.p0 = v11 in
    v24[1] = v10 in
    v4.p0 = v16 in
    var v26: Float = v17 in
    v10[0] = v28 in
    v24[0] = v8 in
    let v22: s0 = s0(v24, v24) in
    v4 = v22 in
    v10[0] = v26 in
    v10[0] = v28 in
    v22
  } in
  let noinline_f0: (s2, Float) -> Float = (v0: s2, v1: Float) -> Float {
    var v6: s2 = v0 in
    let v10: [[s1]] = v6.p1 in
    let v7: [[s1]] = v0.p1 in
    let v9: [s1] = v10[0] in
    let v15: [s1] = v10[1] in
    v6.p1 = v7 in
    let v5: s1 = v9[0] in
    var v30: s2 = v0 in
    let v11: [s2] = [v6, v6, v30, v6, v30, v30] in
    let v36: s2 = v11[3] in
    var v22: s1 = v5 in
    let v18: [[s1]] = v6.p1 in
    let v23: [s0] = v22.p0 in
    let v34: [[s1]] = v36.p1 in
    let v20: [s1] = v34[2] in
    let v38: s1 = v9[0] in
    v22.p0 = v23 in
    let v53: s0 = v23[1] in
    let v51: [[Float]] = v53.p0 in
    let v54: s0 = v23[1] in
    var v28: s1 = v22 in
    v22 = v28 in
    v28 = v22 in
    let v24: [Float] = v51[1] in
    let v37: s0 = v5.p1 in
    let v55: [s0] = v5.p0 in
    let v103: s0 = f11(v37) in
    let v65: s0 = f11(v54) in
    v6.p0 = v20 in
    var v40: [s0] = v55 in
    v30.p1 = v18 in
    let v57: s0 = f11(v37) in
    v6.p1 = v34 in
    let v71: s0 = f11(v65) in
    v28.p0 = v40 in
    v40[1] = v57 in
    let v73: s0 = f11(v103) in
    v6.p1 = v10 in
    var v44: s1 = v38 in
    v40[0] = v103 in
    v28.p1 = v71 in
    let v80: [s0] = v44.p0 in
    v28.p0 = v80 in
    let v56: s1 = v15[0] in
    v22.p1 = v71 in
    let v116: s0 = v56.p1 in
    v40[0] = v73 in
    let v157: Float = v24[0] in
    v22.p1 = v116 in
    v157
  } in
  fun loop(i: Int, v0: s2, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2([s1([s0([[0.0], [1.0]], [[2.0], [3.0]]), s0([[4.0], [5.0]], [[6.0], [7.0]])], s0([[8.0], [9.0]], [[10.0], [11.0]]))], [[s1([s0([[12.0], [13.0]], [[14.0], [15.0]]), s0([[16.0], [17.0]], [[18.0], [19.0]])], s0([[20.0], [21.0]], [[22.0], [23.0]]))], [s1([s0([[24.0], [25.0]], [[26.0], [27.0]]), s0([[28.0], [29.0]], [[30.0], [31.0]])], s0([[32.0], [33.0]], [[34.0], [35.0]]))], [s1([s0([[36.0], [37.0]], [[38.0], [39.0]]), s0([[40.0], [41.0]], [[42.0], [43.0]])], s0([[44.0], [45.0]], [[46.0], [47.0]]))]]) in
    let v1: Float = 48.0 in
    let initialResult: Float = 48.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()