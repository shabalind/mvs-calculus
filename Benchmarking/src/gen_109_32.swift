  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: Double
  }
  struct s1 {
    var p0: [[s0]]
    var p1: Double
  }
  struct s2 {
    var p0: Double
    var p1: [[s1]]
  }
  struct s3 {
    var p0: s0
    var p1: [s1]
  }
  struct s6 {
    var p0: [s2]
    var p1: [s3]
  }
  @inline(never)
  func f0(_ v0: [s6], _ v1: Double) -> Double {
    let v8: s6 = v0[1]
    let v6: s6 = v0[2]
    let v4: [s2] = v6.p0
    let v7: [s3] = v8.p1
    let v10: s2 = v4[0]
    var v5: [s3] = v7
    let v17: s3 = v5[0]
    v5[2] = v17
    let v21: s0 = v17.p0
    let v22: Double = v10.p0
    let v33: Double = v21.p1
    let v44: Double = v22 - v33
    return v44
  }
  func benchmark() {
    let v0: [s6] = [s6(p0: [s2(p0: 0.0, p1: [[s1(p0: [[s0(p0: [[1.0], [2.0], [3.0]], p1: 4.0)]], p1: 5.0)], [s1(p0: [[s0(p0: [[6.0], [7.0], [8.0]], p1: 9.0)]], p1: 10.0)]])], p1: [s3(p0: s0(p0: [[11.0], [12.0], [13.0]], p1: 14.0), p1: [s1(p0: [[s0(p0: [[15.0], [16.0], [17.0]], p1: 18.0)]], p1: 19.0), s1(p0: [[s0(p0: [[20.0], [21.0], [22.0]], p1: 23.0)]], p1: 24.0)]), s3(p0: s0(p0: [[25.0], [26.0], [27.0]], p1: 28.0), p1: [s1(p0: [[s0(p0: [[29.0], [30.0], [31.0]], p1: 32.0)]], p1: 33.0), s1(p0: [[s0(p0: [[34.0], [35.0], [36.0]], p1: 37.0)]], p1: 38.0)]), s3(p0: s0(p0: [[39.0], [40.0], [41.0]], p1: 42.0), p1: [s1(p0: [[s0(p0: [[43.0], [44.0], [45.0]], p1: 46.0)]], p1: 47.0), s1(p0: [[s0(p0: [[48.0], [49.0], [50.0]], p1: 51.0)]], p1: 52.0)])]), s6(p0: [s2(p0: 53.0, p1: [[s1(p0: [[s0(p0: [[54.0], [55.0], [56.0]], p1: 57.0)]], p1: 58.0)], [s1(p0: [[s0(p0: [[59.0], [60.0], [61.0]], p1: 62.0)]], p1: 63.0)]])], p1: [s3(p0: s0(p0: [[64.0], [65.0], [66.0]], p1: 67.0), p1: [s1(p0: [[s0(p0: [[68.0], [69.0], [70.0]], p1: 71.0)]], p1: 72.0), s1(p0: [[s0(p0: [[73.0], [74.0], [75.0]], p1: 76.0)]], p1: 77.0)]), s3(p0: s0(p0: [[78.0], [79.0], [80.0]], p1: 81.0), p1: [s1(p0: [[s0(p0: [[82.0], [83.0], [84.0]], p1: 85.0)]], p1: 86.0), s1(p0: [[s0(p0: [[87.0], [88.0], [89.0]], p1: 90.0)]], p1: 91.0)]), s3(p0: s0(p0: [[92.0], [93.0], [94.0]], p1: 95.0), p1: [s1(p0: [[s0(p0: [[96.0], [97.0], [98.0]], p1: 99.0)]], p1: 100.0), s1(p0: [[s0(p0: [[101.0], [102.0], [103.0]], p1: 104.0)]], p1: 105.0)])]), s6(p0: [s2(p0: 106.0, p1: [[s1(p0: [[s0(p0: [[107.0], [108.0], [109.0]], p1: 110.0)]], p1: 111.0)], [s1(p0: [[s0(p0: [[112.0], [113.0], [114.0]], p1: 115.0)]], p1: 116.0)]])], p1: [s3(p0: s0(p0: [[117.0], [118.0], [119.0]], p1: 120.0), p1: [s1(p0: [[s0(p0: [[121.0], [122.0], [123.0]], p1: 124.0)]], p1: 125.0), s1(p0: [[s0(p0: [[126.0], [127.0], [128.0]], p1: 129.0)]], p1: 130.0)]), s3(p0: s0(p0: [[131.0], [132.0], [133.0]], p1: 134.0), p1: [s1(p0: [[s0(p0: [[135.0], [136.0], [137.0]], p1: 138.0)]], p1: 139.0), s1(p0: [[s0(p0: [[140.0], [141.0], [142.0]], p1: 143.0)]], p1: 144.0)]), s3(p0: s0(p0: [[145.0], [146.0], [147.0]], p1: 148.0), p1: [s1(p0: [[s0(p0: [[149.0], [150.0], [151.0]], p1: 152.0)]], p1: 153.0), s1(p0: [[s0(p0: [[154.0], [155.0], [156.0]], p1: 157.0)]], p1: 158.0)])])]
    let v1: Double = 159.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 159.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
