  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
  }
  struct s2 {
    var p0: s0
    var p1: [[s1]]
  }
  @inline(never)
  func f0(_ v0: s2, _ v1: s2, _ v2: s0, _ v3: s2, _ v4: Double) -> Double {
    let v7: [[Double]] = v2.p0
    let v5: [[s1]] = v0.p1
    let v9: [s1] = v5[1]
    let v6: s1 = v9[0]
    let v13: [s0] = v6.p0
    let v22: [Double] = v7[2]
    let v31: s0 = v13[2]
    let v37: Double = v22[0]
    let v39: [[Double]] = v31.p1
    let v48: [Double] = v39[2]
    var v80: [Double] = v48
    let v167: Double = v80[0]
    let v193: Double = v167 + v37
    return v193
  }
  func benchmark() {
    let v0: s2 = s2(p0: s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0], [5.0]], p2: [[6.0]]), p1: [[s1(p0: [s0(p0: [[7.0], [8.0], [9.0]], p1: [[10.0], [11.0], [12.0]], p2: [[13.0]]), s0(p0: [[14.0], [15.0], [16.0]], p1: [[17.0], [18.0], [19.0]], p2: [[20.0]]), s0(p0: [[21.0], [22.0], [23.0]], p1: [[24.0], [25.0], [26.0]], p2: [[27.0]])], p1: [[s0(p0: [[28.0], [29.0], [30.0]], p1: [[31.0], [32.0], [33.0]], p2: [[34.0]])]])], [s1(p0: [s0(p0: [[35.0], [36.0], [37.0]], p1: [[38.0], [39.0], [40.0]], p2: [[41.0]]), s0(p0: [[42.0], [43.0], [44.0]], p1: [[45.0], [46.0], [47.0]], p2: [[48.0]]), s0(p0: [[49.0], [50.0], [51.0]], p1: [[52.0], [53.0], [54.0]], p2: [[55.0]])], p1: [[s0(p0: [[56.0], [57.0], [58.0]], p1: [[59.0], [60.0], [61.0]], p2: [[62.0]])]])]])
    let v1: s2 = s2(p0: s0(p0: [[63.0], [64.0], [65.0]], p1: [[66.0], [67.0], [68.0]], p2: [[69.0]]), p1: [[s1(p0: [s0(p0: [[70.0], [71.0], [72.0]], p1: [[73.0], [74.0], [75.0]], p2: [[76.0]]), s0(p0: [[77.0], [78.0], [79.0]], p1: [[80.0], [81.0], [82.0]], p2: [[83.0]]), s0(p0: [[84.0], [85.0], [86.0]], p1: [[87.0], [88.0], [89.0]], p2: [[90.0]])], p1: [[s0(p0: [[91.0], [92.0], [93.0]], p1: [[94.0], [95.0], [96.0]], p2: [[97.0]])]])], [s1(p0: [s0(p0: [[98.0], [99.0], [100.0]], p1: [[101.0], [102.0], [103.0]], p2: [[104.0]]), s0(p0: [[105.0], [106.0], [107.0]], p1: [[108.0], [109.0], [110.0]], p2: [[111.0]]), s0(p0: [[112.0], [113.0], [114.0]], p1: [[115.0], [116.0], [117.0]], p2: [[118.0]])], p1: [[s0(p0: [[119.0], [120.0], [121.0]], p1: [[122.0], [123.0], [124.0]], p2: [[125.0]])]])]])
    let v2: s0 = s0(p0: [[126.0], [127.0], [128.0]], p1: [[129.0], [130.0], [131.0]], p2: [[132.0]])
    let v3: s2 = s2(p0: s0(p0: [[133.0], [134.0], [135.0]], p1: [[136.0], [137.0], [138.0]], p2: [[139.0]]), p1: [[s1(p0: [s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0], [144.0], [145.0]], p2: [[146.0]]), s0(p0: [[147.0], [148.0], [149.0]], p1: [[150.0], [151.0], [152.0]], p2: [[153.0]]), s0(p0: [[154.0], [155.0], [156.0]], p1: [[157.0], [158.0], [159.0]], p2: [[160.0]])], p1: [[s0(p0: [[161.0], [162.0], [163.0]], p1: [[164.0], [165.0], [166.0]], p2: [[167.0]])]])], [s1(p0: [s0(p0: [[168.0], [169.0], [170.0]], p1: [[171.0], [172.0], [173.0]], p2: [[174.0]]), s0(p0: [[175.0], [176.0], [177.0]], p1: [[178.0], [179.0], [180.0]], p2: [[181.0]]), s0(p0: [[182.0], [183.0], [184.0]], p1: [[185.0], [186.0], [187.0]], p2: [[188.0]])], p1: [[s0(p0: [[189.0], [190.0], [191.0]], p1: [[192.0], [193.0], [194.0]], p2: [[195.0]])]])]])
    let v4: Double = 196.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 196.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
