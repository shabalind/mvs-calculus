  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: (s0, Float) -> Float = (v0: s0, v1: Float) -> Float {
    let v7: [Float] = [v1, v1, v1, v1, v1] in
    let v10: Float = v7[2] in
    let v11: Float = v7[4] in
    var v9: Float = v11 in
    var v13: Float = v1 in
    let v29: [Float] = [v13, v11, v10, v11, v11, v1] in
    var v18: [Float] = v29 in
    let v15: [[Float]] = [v29, v29, v18, v18, v18, v18] in
    v18[4] = v9 in
    v18[0] = v13 in
    v18[4] = v13 in
    let v35: [Float] = v15[0] in
    var v26: [Float] = v35 in
    v26 = v35 in
    let v46: Float = v26[1] in
    v46
  } in
  fun loop(i: Int, v0: s0, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0]], [[2.0], [3.0], [4.0]]) in
    let v1: Float = 5.0 in
    let initialResult: Float = 5.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()