  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  }
  struct s2 {
    var p0: s1
    var p1: [s1]
  }
  struct s3 {
    var p0: [s2]
    var p1: s0
  }
  struct s4 {
    var p0: [[s3]]
    var p1: [s3]
  }
  struct s5 {
    var p0: [s1]
    var p1: s4
  }
  struct s6 {
    var p0: [s3]
    var p1: [[s3]]
  }
  func f15(_ v0: s0) -> s0 {
    var v4: s0 = v0
    let v3: [[Double]] = v0.p1
    let v1: [Double] = v3[1]
    var v2: [[Double]] = v3
    let v8: [Double] = v3[1]
    v2[0] = v8
    let v5: [Double] = v2[0]
    v4.p1 = v2
    let v9: [[Double]] = v0.p1
    let v6: [[Double]] = v0.p1
    let v11: [Double] = v2[0]
    let v16: [Double] = v3[0]
    let v33: [[Double]] = v4.p1
    v2[1] = v8
    v4.p1 = v3
    let v15: [[Double]] = v0.p1
    v4.p1 = v9
    v2[0] = v1
    var v17: s0 = v0
    let v21: [[Double]] = v17.p1
    let v38: [[Double]] = [v11, v5, v1, v8]
    let v14: [[Double]] = v0.p0
    var v30: [[Double]] = v14
    v30[0] = v16
    let v24: [Double] = v38[1]
    v4.p0 = v30
    let v23: [[Double]] = v17.p0
    v2[1] = v11
    v2[0] = v11
    v2[1] = v11
    let v40: [[Double]] = v4.p0
    v4.p0 = v30
    let v37: [[Double]] = [v24, v8]
    v17.p1 = v2
    var v61: s0 = v4
    let v25: s0 = s0(p0: v30, p1: v3)
    let v22: [[Double]] = v4.p1
    v17.p0 = v23
    v17.p0 = v23
    v4.p1 = v3
    v61.p1 = v21
    v30[0] = v8
    let v35: s0 = s0(p0: v14, p1: v3)
    let v34: [[Double]] = v61.p0
    v61.p0 = v14
    let v51: [[Double]] = v4.p0
    let v43: [[Double]] = v4.p1
    v2[0] = v16
    let v59: [[[Double]]] = [v33, v6, v2]
    v4.p1 = v22
    let v58: [[Double]] = v25.p0
    let v78: [[Double]] = v25.p1
    v30[0] = v1
    v4.p0 = v34
    let v88: [s0] = [v4, v4, v4, v17, v25]
    let v91: [[Double]] = v0.p1
    let v74: [[Double]] = v0.p0
    var v98: [[[Double]]] = v59
    let v84: [[Double]] = v98[2]
    let v71: s0 = v88[2]
    v17.p0 = v14
    let v123: [Double] = v74[0]
    v4.p1 = v37
    let v63: [[Double]] = v71.p0
    v4.p0 = v63
    v17.p0 = v51
    v17.p0 = v40
    let v150: [[Double]] = v98[1]
    v4.p1 = v33
    let v297: [[Double]] = v35.p0
    var v111: [[Double]] = v43
    v2[1] = v123
    let v80: [[Double]] = v0.p1
    v4.p1 = v91
    var v100: [s0] = v88
    v61.p1 = v33
    v17.p1 = v78
    v98[2] = v111
    v17.p1 = v80
    v61.p1 = v150
    v30[0] = v8
    v17.p0 = v58
    v4.p1 = v84
    var v220: [s0] = v100
    let v216: s0 = v220[2]
    v61.p0 = v297
    v61.p0 = v14
    v4.p1 = v15
    v220[2] = v71
    v17.p0 = v14
    return v216
  }
  @inline(never)
  func f0(_ v0: s5, _ v1: s0, _ v2: s6, _ v3: Double) -> Double {
    let v4: [[Double]] = v1.p1
    let v8: s0 = f15(v1)
    var v7: [[Double]] = v4
    let v10: [Double] = v7[0]
    v7[1] = v10
    v7[1] = v10
    let v26: [[Double]] = v8.p1
    v7 = v4
    v7[1] = v10
    let v35: [Double] = v26[1]
    v7[0] = v10
    v7[0] = v35
    let v193: Double = v10[0]
    return v193
  }
  func benchmark() {
    let v0: s5 = s5(p0: [s1(p0: s0(p0: [[0.0]], p1: [[1.0], [2.0]]), p1: [[s0(p0: [[3.0]], p1: [[4.0], [5.0]])], [s0(p0: [[6.0]], p1: [[7.0], [8.0]])], [s0(p0: [[9.0]], p1: [[10.0], [11.0]])]]), s1(p0: s0(p0: [[12.0]], p1: [[13.0], [14.0]]), p1: [[s0(p0: [[15.0]], p1: [[16.0], [17.0]])], [s0(p0: [[18.0]], p1: [[19.0], [20.0]])], [s0(p0: [[21.0]], p1: [[22.0], [23.0]])]])], p1: s4(p0: [[s3(p0: [s2(p0: s1(p0: s0(p0: [[24.0]], p1: [[25.0], [26.0]]), p1: [[s0(p0: [[27.0]], p1: [[28.0], [29.0]])], [s0(p0: [[30.0]], p1: [[31.0], [32.0]])], [s0(p0: [[33.0]], p1: [[34.0], [35.0]])]]), p1: [s1(p0: s0(p0: [[36.0]], p1: [[37.0], [38.0]]), p1: [[s0(p0: [[39.0]], p1: [[40.0], [41.0]])], [s0(p0: [[42.0]], p1: [[43.0], [44.0]])], [s0(p0: [[45.0]], p1: [[46.0], [47.0]])]]), s1(p0: s0(p0: [[48.0]], p1: [[49.0], [50.0]]), p1: [[s0(p0: [[51.0]], p1: [[52.0], [53.0]])], [s0(p0: [[54.0]], p1: [[55.0], [56.0]])], [s0(p0: [[57.0]], p1: [[58.0], [59.0]])]]), s1(p0: s0(p0: [[60.0]], p1: [[61.0], [62.0]]), p1: [[s0(p0: [[63.0]], p1: [[64.0], [65.0]])], [s0(p0: [[66.0]], p1: [[67.0], [68.0]])], [s0(p0: [[69.0]], p1: [[70.0], [71.0]])]])])], p1: s0(p0: [[72.0]], p1: [[73.0], [74.0]]))], [s3(p0: [s2(p0: s1(p0: s0(p0: [[75.0]], p1: [[76.0], [77.0]]), p1: [[s0(p0: [[78.0]], p1: [[79.0], [80.0]])], [s0(p0: [[81.0]], p1: [[82.0], [83.0]])], [s0(p0: [[84.0]], p1: [[85.0], [86.0]])]]), p1: [s1(p0: s0(p0: [[87.0]], p1: [[88.0], [89.0]]), p1: [[s0(p0: [[90.0]], p1: [[91.0], [92.0]])], [s0(p0: [[93.0]], p1: [[94.0], [95.0]])], [s0(p0: [[96.0]], p1: [[97.0], [98.0]])]]), s1(p0: s0(p0: [[99.0]], p1: [[100.0], [101.0]]), p1: [[s0(p0: [[102.0]], p1: [[103.0], [104.0]])], [s0(p0: [[105.0]], p1: [[106.0], [107.0]])], [s0(p0: [[108.0]], p1: [[109.0], [110.0]])]]), s1(p0: s0(p0: [[111.0]], p1: [[112.0], [113.0]]), p1: [[s0(p0: [[114.0]], p1: [[115.0], [116.0]])], [s0(p0: [[117.0]], p1: [[118.0], [119.0]])], [s0(p0: [[120.0]], p1: [[121.0], [122.0]])]])])], p1: s0(p0: [[123.0]], p1: [[124.0], [125.0]]))], [s3(p0: [s2(p0: s1(p0: s0(p0: [[126.0]], p1: [[127.0], [128.0]]), p1: [[s0(p0: [[129.0]], p1: [[130.0], [131.0]])], [s0(p0: [[132.0]], p1: [[133.0], [134.0]])], [s0(p0: [[135.0]], p1: [[136.0], [137.0]])]]), p1: [s1(p0: s0(p0: [[138.0]], p1: [[139.0], [140.0]]), p1: [[s0(p0: [[141.0]], p1: [[142.0], [143.0]])], [s0(p0: [[144.0]], p1: [[145.0], [146.0]])], [s0(p0: [[147.0]], p1: [[148.0], [149.0]])]]), s1(p0: s0(p0: [[150.0]], p1: [[151.0], [152.0]]), p1: [[s0(p0: [[153.0]], p1: [[154.0], [155.0]])], [s0(p0: [[156.0]], p1: [[157.0], [158.0]])], [s0(p0: [[159.0]], p1: [[160.0], [161.0]])]]), s1(p0: s0(p0: [[162.0]], p1: [[163.0], [164.0]]), p1: [[s0(p0: [[165.0]], p1: [[166.0], [167.0]])], [s0(p0: [[168.0]], p1: [[169.0], [170.0]])], [s0(p0: [[171.0]], p1: [[172.0], [173.0]])]])])], p1: s0(p0: [[174.0]], p1: [[175.0], [176.0]]))]], p1: [s3(p0: [s2(p0: s1(p0: s0(p0: [[177.0]], p1: [[178.0], [179.0]]), p1: [[s0(p0: [[180.0]], p1: [[181.0], [182.0]])], [s0(p0: [[183.0]], p1: [[184.0], [185.0]])], [s0(p0: [[186.0]], p1: [[187.0], [188.0]])]]), p1: [s1(p0: s0(p0: [[189.0]], p1: [[190.0], [191.0]]), p1: [[s0(p0: [[192.0]], p1: [[193.0], [194.0]])], [s0(p0: [[195.0]], p1: [[196.0], [197.0]])], [s0(p0: [[198.0]], p1: [[199.0], [200.0]])]]), s1(p0: s0(p0: [[201.0]], p1: [[202.0], [203.0]]), p1: [[s0(p0: [[204.0]], p1: [[205.0], [206.0]])], [s0(p0: [[207.0]], p1: [[208.0], [209.0]])], [s0(p0: [[210.0]], p1: [[211.0], [212.0]])]]), s1(p0: s0(p0: [[213.0]], p1: [[214.0], [215.0]]), p1: [[s0(p0: [[216.0]], p1: [[217.0], [218.0]])], [s0(p0: [[219.0]], p1: [[220.0], [221.0]])], [s0(p0: [[222.0]], p1: [[223.0], [224.0]])]])])], p1: s0(p0: [[225.0]], p1: [[226.0], [227.0]]))]))
    let v1: s0 = s0(p0: [[228.0]], p1: [[229.0], [230.0]])
    let v2: s6 = s6(p0: [s3(p0: [s2(p0: s1(p0: s0(p0: [[231.0]], p1: [[232.0], [233.0]]), p1: [[s0(p0: [[234.0]], p1: [[235.0], [236.0]])], [s0(p0: [[237.0]], p1: [[238.0], [239.0]])], [s0(p0: [[240.0]], p1: [[241.0], [242.0]])]]), p1: [s1(p0: s0(p0: [[243.0]], p1: [[244.0], [245.0]]), p1: [[s0(p0: [[246.0]], p1: [[247.0], [248.0]])], [s0(p0: [[249.0]], p1: [[250.0], [251.0]])], [s0(p0: [[252.0]], p1: [[253.0], [254.0]])]]), s1(p0: s0(p0: [[255.0]], p1: [[256.0], [257.0]]), p1: [[s0(p0: [[258.0]], p1: [[259.0], [260.0]])], [s0(p0: [[261.0]], p1: [[262.0], [263.0]])], [s0(p0: [[264.0]], p1: [[265.0], [266.0]])]]), s1(p0: s0(p0: [[267.0]], p1: [[268.0], [269.0]]), p1: [[s0(p0: [[270.0]], p1: [[271.0], [272.0]])], [s0(p0: [[273.0]], p1: [[274.0], [275.0]])], [s0(p0: [[276.0]], p1: [[277.0], [278.0]])]])])], p1: s0(p0: [[279.0]], p1: [[280.0], [281.0]])), s3(p0: [s2(p0: s1(p0: s0(p0: [[282.0]], p1: [[283.0], [284.0]]), p1: [[s0(p0: [[285.0]], p1: [[286.0], [287.0]])], [s0(p0: [[288.0]], p1: [[289.0], [290.0]])], [s0(p0: [[291.0]], p1: [[292.0], [293.0]])]]), p1: [s1(p0: s0(p0: [[294.0]], p1: [[295.0], [296.0]]), p1: [[s0(p0: [[297.0]], p1: [[298.0], [299.0]])], [s0(p0: [[300.0]], p1: [[301.0], [302.0]])], [s0(p0: [[303.0]], p1: [[304.0], [305.0]])]]), s1(p0: s0(p0: [[306.0]], p1: [[307.0], [308.0]]), p1: [[s0(p0: [[309.0]], p1: [[310.0], [311.0]])], [s0(p0: [[312.0]], p1: [[313.0], [314.0]])], [s0(p0: [[315.0]], p1: [[316.0], [317.0]])]]), s1(p0: s0(p0: [[318.0]], p1: [[319.0], [320.0]]), p1: [[s0(p0: [[321.0]], p1: [[322.0], [323.0]])], [s0(p0: [[324.0]], p1: [[325.0], [326.0]])], [s0(p0: [[327.0]], p1: [[328.0], [329.0]])]])])], p1: s0(p0: [[330.0]], p1: [[331.0], [332.0]])), s3(p0: [s2(p0: s1(p0: s0(p0: [[333.0]], p1: [[334.0], [335.0]]), p1: [[s0(p0: [[336.0]], p1: [[337.0], [338.0]])], [s0(p0: [[339.0]], p1: [[340.0], [341.0]])], [s0(p0: [[342.0]], p1: [[343.0], [344.0]])]]), p1: [s1(p0: s0(p0: [[345.0]], p1: [[346.0], [347.0]]), p1: [[s0(p0: [[348.0]], p1: [[349.0], [350.0]])], [s0(p0: [[351.0]], p1: [[352.0], [353.0]])], [s0(p0: [[354.0]], p1: [[355.0], [356.0]])]]), s1(p0: s0(p0: [[357.0]], p1: [[358.0], [359.0]]), p1: [[s0(p0: [[360.0]], p1: [[361.0], [362.0]])], [s0(p0: [[363.0]], p1: [[364.0], [365.0]])], [s0(p0: [[366.0]], p1: [[367.0], [368.0]])]]), s1(p0: s0(p0: [[369.0]], p1: [[370.0], [371.0]]), p1: [[s0(p0: [[372.0]], p1: [[373.0], [374.0]])], [s0(p0: [[375.0]], p1: [[376.0], [377.0]])], [s0(p0: [[378.0]], p1: [[379.0], [380.0]])]])])], p1: s0(p0: [[381.0]], p1: [[382.0], [383.0]]))], p1: [[s3(p0: [s2(p0: s1(p0: s0(p0: [[384.0]], p1: [[385.0], [386.0]]), p1: [[s0(p0: [[387.0]], p1: [[388.0], [389.0]])], [s0(p0: [[390.0]], p1: [[391.0], [392.0]])], [s0(p0: [[393.0]], p1: [[394.0], [395.0]])]]), p1: [s1(p0: s0(p0: [[396.0]], p1: [[397.0], [398.0]]), p1: [[s0(p0: [[399.0]], p1: [[400.0], [401.0]])], [s0(p0: [[402.0]], p1: [[403.0], [404.0]])], [s0(p0: [[405.0]], p1: [[406.0], [407.0]])]]), s1(p0: s0(p0: [[408.0]], p1: [[409.0], [410.0]]), p1: [[s0(p0: [[411.0]], p1: [[412.0], [413.0]])], [s0(p0: [[414.0]], p1: [[415.0], [416.0]])], [s0(p0: [[417.0]], p1: [[418.0], [419.0]])]]), s1(p0: s0(p0: [[420.0]], p1: [[421.0], [422.0]]), p1: [[s0(p0: [[423.0]], p1: [[424.0], [425.0]])], [s0(p0: [[426.0]], p1: [[427.0], [428.0]])], [s0(p0: [[429.0]], p1: [[430.0], [431.0]])]])])], p1: s0(p0: [[432.0]], p1: [[433.0], [434.0]]))], [s3(p0: [s2(p0: s1(p0: s0(p0: [[435.0]], p1: [[436.0], [437.0]]), p1: [[s0(p0: [[438.0]], p1: [[439.0], [440.0]])], [s0(p0: [[441.0]], p1: [[442.0], [443.0]])], [s0(p0: [[444.0]], p1: [[445.0], [446.0]])]]), p1: [s1(p0: s0(p0: [[447.0]], p1: [[448.0], [449.0]]), p1: [[s0(p0: [[450.0]], p1: [[451.0], [452.0]])], [s0(p0: [[453.0]], p1: [[454.0], [455.0]])], [s0(p0: [[456.0]], p1: [[457.0], [458.0]])]]), s1(p0: s0(p0: [[459.0]], p1: [[460.0], [461.0]]), p1: [[s0(p0: [[462.0]], p1: [[463.0], [464.0]])], [s0(p0: [[465.0]], p1: [[466.0], [467.0]])], [s0(p0: [[468.0]], p1: [[469.0], [470.0]])]]), s1(p0: s0(p0: [[471.0]], p1: [[472.0], [473.0]]), p1: [[s0(p0: [[474.0]], p1: [[475.0], [476.0]])], [s0(p0: [[477.0]], p1: [[478.0], [479.0]])], [s0(p0: [[480.0]], p1: [[481.0], [482.0]])]])])], p1: s0(p0: [[483.0]], p1: [[484.0], [485.0]]))], [s3(p0: [s2(p0: s1(p0: s0(p0: [[486.0]], p1: [[487.0], [488.0]]), p1: [[s0(p0: [[489.0]], p1: [[490.0], [491.0]])], [s0(p0: [[492.0]], p1: [[493.0], [494.0]])], [s0(p0: [[495.0]], p1: [[496.0], [497.0]])]]), p1: [s1(p0: s0(p0: [[498.0]], p1: [[499.0], [500.0]]), p1: [[s0(p0: [[501.0]], p1: [[502.0], [503.0]])], [s0(p0: [[504.0]], p1: [[505.0], [506.0]])], [s0(p0: [[507.0]], p1: [[508.0], [509.0]])]]), s1(p0: s0(p0: [[510.0]], p1: [[511.0], [512.0]]), p1: [[s0(p0: [[513.0]], p1: [[514.0], [515.0]])], [s0(p0: [[516.0]], p1: [[517.0], [518.0]])], [s0(p0: [[519.0]], p1: [[520.0], [521.0]])]]), s1(p0: s0(p0: [[522.0]], p1: [[523.0], [524.0]]), p1: [[s0(p0: [[525.0]], p1: [[526.0], [527.0]])], [s0(p0: [[528.0]], p1: [[529.0], [530.0]])], [s0(p0: [[531.0]], p1: [[532.0], [533.0]])]])])], p1: s0(p0: [[534.0]], p1: [[535.0], [536.0]]))]])
    let v3: Double = 537.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 537.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
