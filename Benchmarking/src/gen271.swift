  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s2 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s3 {
    var p0: s2
    var p1: [s2]
  }
  struct s4 {
    var p0: s3
    var p1: [s3]
  }
  struct s5 {
    var p0: s0
    var p1: [s4]
  }
  @inline(never)
  func f0(_ v0: [[s2]], _ v1: [[Double]], _ v2: s5, _ v3: Double) -> Double {
    let v10: Double = v3 + v3
    let v12: [Double] = v1[0]
    let v70: [Double] = v1[1]
    var v69: [Double] = v12
    let v57: Double = v3 * v3
    v69 = v70
    v69[0] = v10
    v69[0] = v57
    let v100: Double = v69[0]
    let v170: Double = v70[0]
    let v265: Double = v100 + v170
    return v265
  }
  func benchmark() {
    let v0: [[s2]] = [[s2(p0: [s0(p0: [[0.0]], p1: [[1.0]]), s0(p0: [[2.0]], p1: [[3.0]]), s0(p0: [[4.0]], p1: [[5.0]])], p1: [s0(p0: [[6.0]], p1: [[7.0]]), s0(p0: [[8.0]], p1: [[9.0]]), s0(p0: [[10.0]], p1: [[11.0]])])]]
    let v1: [[Double]] = [[12.0], [13.0], [14.0]]
    let v2: s5 = s5(p0: s0(p0: [[15.0]], p1: [[16.0]]), p1: [s4(p0: s3(p0: s2(p0: [s0(p0: [[17.0]], p1: [[18.0]]), s0(p0: [[19.0]], p1: [[20.0]]), s0(p0: [[21.0]], p1: [[22.0]])], p1: [s0(p0: [[23.0]], p1: [[24.0]]), s0(p0: [[25.0]], p1: [[26.0]]), s0(p0: [[27.0]], p1: [[28.0]])]), p1: [s2(p0: [s0(p0: [[29.0]], p1: [[30.0]]), s0(p0: [[31.0]], p1: [[32.0]]), s0(p0: [[33.0]], p1: [[34.0]])], p1: [s0(p0: [[35.0]], p1: [[36.0]]), s0(p0: [[37.0]], p1: [[38.0]]), s0(p0: [[39.0]], p1: [[40.0]])]), s2(p0: [s0(p0: [[41.0]], p1: [[42.0]]), s0(p0: [[43.0]], p1: [[44.0]]), s0(p0: [[45.0]], p1: [[46.0]])], p1: [s0(p0: [[47.0]], p1: [[48.0]]), s0(p0: [[49.0]], p1: [[50.0]]), s0(p0: [[51.0]], p1: [[52.0]])])]), p1: [s3(p0: s2(p0: [s0(p0: [[53.0]], p1: [[54.0]]), s0(p0: [[55.0]], p1: [[56.0]]), s0(p0: [[57.0]], p1: [[58.0]])], p1: [s0(p0: [[59.0]], p1: [[60.0]]), s0(p0: [[61.0]], p1: [[62.0]]), s0(p0: [[63.0]], p1: [[64.0]])]), p1: [s2(p0: [s0(p0: [[65.0]], p1: [[66.0]]), s0(p0: [[67.0]], p1: [[68.0]]), s0(p0: [[69.0]], p1: [[70.0]])], p1: [s0(p0: [[71.0]], p1: [[72.0]]), s0(p0: [[73.0]], p1: [[74.0]]), s0(p0: [[75.0]], p1: [[76.0]])]), s2(p0: [s0(p0: [[77.0]], p1: [[78.0]]), s0(p0: [[79.0]], p1: [[80.0]]), s0(p0: [[81.0]], p1: [[82.0]])], p1: [s0(p0: [[83.0]], p1: [[84.0]]), s0(p0: [[85.0]], p1: [[86.0]]), s0(p0: [[87.0]], p1: [[88.0]])])]), s3(p0: s2(p0: [s0(p0: [[89.0]], p1: [[90.0]]), s0(p0: [[91.0]], p1: [[92.0]]), s0(p0: [[93.0]], p1: [[94.0]])], p1: [s0(p0: [[95.0]], p1: [[96.0]]), s0(p0: [[97.0]], p1: [[98.0]]), s0(p0: [[99.0]], p1: [[100.0]])]), p1: [s2(p0: [s0(p0: [[101.0]], p1: [[102.0]]), s0(p0: [[103.0]], p1: [[104.0]]), s0(p0: [[105.0]], p1: [[106.0]])], p1: [s0(p0: [[107.0]], p1: [[108.0]]), s0(p0: [[109.0]], p1: [[110.0]]), s0(p0: [[111.0]], p1: [[112.0]])]), s2(p0: [s0(p0: [[113.0]], p1: [[114.0]]), s0(p0: [[115.0]], p1: [[116.0]]), s0(p0: [[117.0]], p1: [[118.0]])], p1: [s0(p0: [[119.0]], p1: [[120.0]]), s0(p0: [[121.0]], p1: [[122.0]]), s0(p0: [[123.0]], p1: [[124.0]])])]), s3(p0: s2(p0: [s0(p0: [[125.0]], p1: [[126.0]]), s0(p0: [[127.0]], p1: [[128.0]]), s0(p0: [[129.0]], p1: [[130.0]])], p1: [s0(p0: [[131.0]], p1: [[132.0]]), s0(p0: [[133.0]], p1: [[134.0]]), s0(p0: [[135.0]], p1: [[136.0]])]), p1: [s2(p0: [s0(p0: [[137.0]], p1: [[138.0]]), s0(p0: [[139.0]], p1: [[140.0]]), s0(p0: [[141.0]], p1: [[142.0]])], p1: [s0(p0: [[143.0]], p1: [[144.0]]), s0(p0: [[145.0]], p1: [[146.0]]), s0(p0: [[147.0]], p1: [[148.0]])]), s2(p0: [s0(p0: [[149.0]], p1: [[150.0]]), s0(p0: [[151.0]], p1: [[152.0]]), s0(p0: [[153.0]], p1: [[154.0]])], p1: [s0(p0: [[155.0]], p1: [[156.0]]), s0(p0: [[157.0]], p1: [[158.0]]), s0(p0: [[159.0]], p1: [[160.0]])])])]), s4(p0: s3(p0: s2(p0: [s0(p0: [[161.0]], p1: [[162.0]]), s0(p0: [[163.0]], p1: [[164.0]]), s0(p0: [[165.0]], p1: [[166.0]])], p1: [s0(p0: [[167.0]], p1: [[168.0]]), s0(p0: [[169.0]], p1: [[170.0]]), s0(p0: [[171.0]], p1: [[172.0]])]), p1: [s2(p0: [s0(p0: [[173.0]], p1: [[174.0]]), s0(p0: [[175.0]], p1: [[176.0]]), s0(p0: [[177.0]], p1: [[178.0]])], p1: [s0(p0: [[179.0]], p1: [[180.0]]), s0(p0: [[181.0]], p1: [[182.0]]), s0(p0: [[183.0]], p1: [[184.0]])]), s2(p0: [s0(p0: [[185.0]], p1: [[186.0]]), s0(p0: [[187.0]], p1: [[188.0]]), s0(p0: [[189.0]], p1: [[190.0]])], p1: [s0(p0: [[191.0]], p1: [[192.0]]), s0(p0: [[193.0]], p1: [[194.0]]), s0(p0: [[195.0]], p1: [[196.0]])])]), p1: [s3(p0: s2(p0: [s0(p0: [[197.0]], p1: [[198.0]]), s0(p0: [[199.0]], p1: [[200.0]]), s0(p0: [[201.0]], p1: [[202.0]])], p1: [s0(p0: [[203.0]], p1: [[204.0]]), s0(p0: [[205.0]], p1: [[206.0]]), s0(p0: [[207.0]], p1: [[208.0]])]), p1: [s2(p0: [s0(p0: [[209.0]], p1: [[210.0]]), s0(p0: [[211.0]], p1: [[212.0]]), s0(p0: [[213.0]], p1: [[214.0]])], p1: [s0(p0: [[215.0]], p1: [[216.0]]), s0(p0: [[217.0]], p1: [[218.0]]), s0(p0: [[219.0]], p1: [[220.0]])]), s2(p0: [s0(p0: [[221.0]], p1: [[222.0]]), s0(p0: [[223.0]], p1: [[224.0]]), s0(p0: [[225.0]], p1: [[226.0]])], p1: [s0(p0: [[227.0]], p1: [[228.0]]), s0(p0: [[229.0]], p1: [[230.0]]), s0(p0: [[231.0]], p1: [[232.0]])])]), s3(p0: s2(p0: [s0(p0: [[233.0]], p1: [[234.0]]), s0(p0: [[235.0]], p1: [[236.0]]), s0(p0: [[237.0]], p1: [[238.0]])], p1: [s0(p0: [[239.0]], p1: [[240.0]]), s0(p0: [[241.0]], p1: [[242.0]]), s0(p0: [[243.0]], p1: [[244.0]])]), p1: [s2(p0: [s0(p0: [[245.0]], p1: [[246.0]]), s0(p0: [[247.0]], p1: [[248.0]]), s0(p0: [[249.0]], p1: [[250.0]])], p1: [s0(p0: [[251.0]], p1: [[252.0]]), s0(p0: [[253.0]], p1: [[254.0]]), s0(p0: [[255.0]], p1: [[256.0]])]), s2(p0: [s0(p0: [[257.0]], p1: [[258.0]]), s0(p0: [[259.0]], p1: [[260.0]]), s0(p0: [[261.0]], p1: [[262.0]])], p1: [s0(p0: [[263.0]], p1: [[264.0]]), s0(p0: [[265.0]], p1: [[266.0]]), s0(p0: [[267.0]], p1: [[268.0]])])]), s3(p0: s2(p0: [s0(p0: [[269.0]], p1: [[270.0]]), s0(p0: [[271.0]], p1: [[272.0]]), s0(p0: [[273.0]], p1: [[274.0]])], p1: [s0(p0: [[275.0]], p1: [[276.0]]), s0(p0: [[277.0]], p1: [[278.0]]), s0(p0: [[279.0]], p1: [[280.0]])]), p1: [s2(p0: [s0(p0: [[281.0]], p1: [[282.0]]), s0(p0: [[283.0]], p1: [[284.0]]), s0(p0: [[285.0]], p1: [[286.0]])], p1: [s0(p0: [[287.0]], p1: [[288.0]]), s0(p0: [[289.0]], p1: [[290.0]]), s0(p0: [[291.0]], p1: [[292.0]])]), s2(p0: [s0(p0: [[293.0]], p1: [[294.0]]), s0(p0: [[295.0]], p1: [[296.0]]), s0(p0: [[297.0]], p1: [[298.0]])], p1: [s0(p0: [[299.0]], p1: [[300.0]]), s0(p0: [[301.0]], p1: [[302.0]]), s0(p0: [[303.0]], p1: [[304.0]])])])])])
    let v3: Double = 305.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 305.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
