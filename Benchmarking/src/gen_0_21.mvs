  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: Float
    var p1: s0
  } in
  struct s2 {
    var p0: s1
    var p1: [[s1]]
  } in
  struct s3 {
    var p0: [s1]
    var p1: s0
  } in
  let noinline_f0: (s2, [s0], s2, [s3], Float) -> Float = (v0: s2, v1: [s0], v2: s2, v3: [s3], v4: Float) -> Float {
    let v5: Float = v4 * v4 in
    var v15: Float = v5 in
    let v6: [[s1]] = v0.p1 in
    let v16: Float = v5 * v15 in
    let v27: [s1] = v6[0] in
    let v24: Float = v5 + v16 in
    let v14: s1 = v27[0] in
    var v34: Float = v16 in
    let v42: Float = v5 - v24 in
    var v127: Float = v34 in
    let v102: Float = v14.p0 in
    let v74: Float = v102 - v42 in
    let v159: Float = v127 + v74 in
    v159
  } in
  fun loop(i: Int, v0: s2, v1: [s0], v2: s2, v3: [s3], v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s2 = s2(s1(0.0, s0([[1.0]], [[2.0]])), [[s1(3.0, s0([[4.0]], [[5.0]]))], [s1(6.0, s0([[7.0]], [[8.0]]))]]) in
    let v1: [s0] = [s0([[9.0]], [[10.0]]), s0([[11.0]], [[12.0]])] in
    let v2: s2 = s2(s1(13.0, s0([[14.0]], [[15.0]])), [[s1(16.0, s0([[17.0]], [[18.0]]))], [s1(19.0, s0([[20.0]], [[21.0]]))]]) in
    let v3: [s3] = [s3([s1(22.0, s0([[23.0]], [[24.0]]))], s0([[25.0]], [[26.0]])), s3([s1(27.0, s0([[28.0]], [[29.0]]))], s0([[30.0]], [[31.0]])), s3([s1(32.0, s0([[33.0]], [[34.0]]))], s0([[35.0]], [[36.0]]))] in
    let v4: Float = 37.0 in
    let initialResult: Float = 37.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()