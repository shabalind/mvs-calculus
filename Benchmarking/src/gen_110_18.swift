  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: s0
  }
  struct s2 {
    var p0: s0
    var p1: s1
  }
  struct s3 {
    var p0: s2
    var p1: [s2]
  }
  struct s8 {
    var p0: s3
    var p1: [s2]
  }
  struct s11 {
    var p0: s8
    var p1: s3
  }
  func f90(_ v0: Double) -> Double {
    var v6: Double = v0
    var v2: Double = v0
    var v7: Double = v6
    var v1: Double = v7
    var v3: Double = v6
    var v4: Double = v3
    let v18: Double = v7 - v4
    var v9: Double = v7
    v3 = v18
    var v15: Double = v7
    v4 = v1
    var v13: Double = v15
    var v8: Double = v15
    var v11: Double = v9
    var v10: Double = v4
    var v14: Double = v3
    var v16: Double = v8
    var v34: Double = v11
    var v24: Double = v7
    var v21: Double = v18
    var v20: Double = v9
    let v40: [Double] = [v16, v16, v24]
    var v30: [Double] = v40
    v30[0] = v14
    var v42: Double = v34
    var v39: [Double] = v30
    let v32: Double = v39[0]
    var v82: [Double] = v40
    var v58: [Double] = v40
    v82[2] = v10
    v58[1] = v16
    v58[0] = v6
    var v45: [Double] = v58
    v30[2] = v34
    var v84: [Double] = v40
    v30[2] = v1
    let v22: [[Double]] = [v40]
    var v41: [[Double]] = v22
    let v75: [Double] = v41[0]
    let v76: [[Double]] = [v84, v75, v82, v58, v84, v40]
    v84[1] = v9
    v14 = v0
    v41[0] = v45
    let v71: [Double] = v76[2]
    v84[2] = v32
    v82[2] = v21
    v30[2] = v42
    v30[0] = v15
    v41[0] = v39
    v58 = v82
    let v162: Double = v71[0]
    v7 = v20
    v58[0] = v13
    v58[1] = v2
    return v162
  }
  func f31(_ v0: Double) -> Double {
    var v1: Double = v0
    var v3: Double = v0
    let v7: Double = f90(v1)
    var v2: Double = v3
    var v4: Double = v7
    v3 = v7
    var v6: Double = v4
    let v5: Double = f90(v2)
    let v8: Double = f90(v5)
    var v14: Double = v3
    let v18: [Double] = [v8, v6, v14, v0, v5]
    var v23: [Double] = v18
    let v13: Double = v23[2]
    return v13
  }
  @inline(never)
  func f0(_ v0: [[s11]], _ v1: s3, _ v2: Double) -> Double {
    var v5: Double = v2
    let v15: Double = f90(v5)
    var v14: Double = v15
    v14 = v5
    let v25: Double = f31(v15)
    let v29: Double = f90(v25)
    let v21: [Double] = [v14, v25, v15]
    var v83: [Double] = v21
    let v52: Double = v83[1]
    v83[0] = v14
    let v132: Double = f31(v29)
    let v66: Double = v52 + v132
    let v120: Double = f90(v52)
    v83[2] = v120
    return v66
  }
  func benchmark() {
    let v0: [[s11]] = [[s11(p0: s8(p0: s3(p0: s2(p0: s0(p0: [[0.0]], p1: [[1.0], [2.0]]), p1: s1(p0: [s0(p0: [[3.0]], p1: [[4.0], [5.0]])], p1: s0(p0: [[6.0]], p1: [[7.0], [8.0]]))), p1: [s2(p0: s0(p0: [[9.0]], p1: [[10.0], [11.0]]), p1: s1(p0: [s0(p0: [[12.0]], p1: [[13.0], [14.0]])], p1: s0(p0: [[15.0]], p1: [[16.0], [17.0]]))), s2(p0: s0(p0: [[18.0]], p1: [[19.0], [20.0]]), p1: s1(p0: [s0(p0: [[21.0]], p1: [[22.0], [23.0]])], p1: s0(p0: [[24.0]], p1: [[25.0], [26.0]]))), s2(p0: s0(p0: [[27.0]], p1: [[28.0], [29.0]]), p1: s1(p0: [s0(p0: [[30.0]], p1: [[31.0], [32.0]])], p1: s0(p0: [[33.0]], p1: [[34.0], [35.0]])))]), p1: [s2(p0: s0(p0: [[36.0]], p1: [[37.0], [38.0]]), p1: s1(p0: [s0(p0: [[39.0]], p1: [[40.0], [41.0]])], p1: s0(p0: [[42.0]], p1: [[43.0], [44.0]]))), s2(p0: s0(p0: [[45.0]], p1: [[46.0], [47.0]]), p1: s1(p0: [s0(p0: [[48.0]], p1: [[49.0], [50.0]])], p1: s0(p0: [[51.0]], p1: [[52.0], [53.0]])))]), p1: s3(p0: s2(p0: s0(p0: [[54.0]], p1: [[55.0], [56.0]]), p1: s1(p0: [s0(p0: [[57.0]], p1: [[58.0], [59.0]])], p1: s0(p0: [[60.0]], p1: [[61.0], [62.0]]))), p1: [s2(p0: s0(p0: [[63.0]], p1: [[64.0], [65.0]]), p1: s1(p0: [s0(p0: [[66.0]], p1: [[67.0], [68.0]])], p1: s0(p0: [[69.0]], p1: [[70.0], [71.0]]))), s2(p0: s0(p0: [[72.0]], p1: [[73.0], [74.0]]), p1: s1(p0: [s0(p0: [[75.0]], p1: [[76.0], [77.0]])], p1: s0(p0: [[78.0]], p1: [[79.0], [80.0]]))), s2(p0: s0(p0: [[81.0]], p1: [[82.0], [83.0]]), p1: s1(p0: [s0(p0: [[84.0]], p1: [[85.0], [86.0]])], p1: s0(p0: [[87.0]], p1: [[88.0], [89.0]])))]))], [s11(p0: s8(p0: s3(p0: s2(p0: s0(p0: [[90.0]], p1: [[91.0], [92.0]]), p1: s1(p0: [s0(p0: [[93.0]], p1: [[94.0], [95.0]])], p1: s0(p0: [[96.0]], p1: [[97.0], [98.0]]))), p1: [s2(p0: s0(p0: [[99.0]], p1: [[100.0], [101.0]]), p1: s1(p0: [s0(p0: [[102.0]], p1: [[103.0], [104.0]])], p1: s0(p0: [[105.0]], p1: [[106.0], [107.0]]))), s2(p0: s0(p0: [[108.0]], p1: [[109.0], [110.0]]), p1: s1(p0: [s0(p0: [[111.0]], p1: [[112.0], [113.0]])], p1: s0(p0: [[114.0]], p1: [[115.0], [116.0]]))), s2(p0: s0(p0: [[117.0]], p1: [[118.0], [119.0]]), p1: s1(p0: [s0(p0: [[120.0]], p1: [[121.0], [122.0]])], p1: s0(p0: [[123.0]], p1: [[124.0], [125.0]])))]), p1: [s2(p0: s0(p0: [[126.0]], p1: [[127.0], [128.0]]), p1: s1(p0: [s0(p0: [[129.0]], p1: [[130.0], [131.0]])], p1: s0(p0: [[132.0]], p1: [[133.0], [134.0]]))), s2(p0: s0(p0: [[135.0]], p1: [[136.0], [137.0]]), p1: s1(p0: [s0(p0: [[138.0]], p1: [[139.0], [140.0]])], p1: s0(p0: [[141.0]], p1: [[142.0], [143.0]])))]), p1: s3(p0: s2(p0: s0(p0: [[144.0]], p1: [[145.0], [146.0]]), p1: s1(p0: [s0(p0: [[147.0]], p1: [[148.0], [149.0]])], p1: s0(p0: [[150.0]], p1: [[151.0], [152.0]]))), p1: [s2(p0: s0(p0: [[153.0]], p1: [[154.0], [155.0]]), p1: s1(p0: [s0(p0: [[156.0]], p1: [[157.0], [158.0]])], p1: s0(p0: [[159.0]], p1: [[160.0], [161.0]]))), s2(p0: s0(p0: [[162.0]], p1: [[163.0], [164.0]]), p1: s1(p0: [s0(p0: [[165.0]], p1: [[166.0], [167.0]])], p1: s0(p0: [[168.0]], p1: [[169.0], [170.0]]))), s2(p0: s0(p0: [[171.0]], p1: [[172.0], [173.0]]), p1: s1(p0: [s0(p0: [[174.0]], p1: [[175.0], [176.0]])], p1: s0(p0: [[177.0]], p1: [[178.0], [179.0]])))]))]]
    let v1: s3 = s3(p0: s2(p0: s0(p0: [[180.0]], p1: [[181.0], [182.0]]), p1: s1(p0: [s0(p0: [[183.0]], p1: [[184.0], [185.0]])], p1: s0(p0: [[186.0]], p1: [[187.0], [188.0]]))), p1: [s2(p0: s0(p0: [[189.0]], p1: [[190.0], [191.0]]), p1: s1(p0: [s0(p0: [[192.0]], p1: [[193.0], [194.0]])], p1: s0(p0: [[195.0]], p1: [[196.0], [197.0]]))), s2(p0: s0(p0: [[198.0]], p1: [[199.0], [200.0]]), p1: s1(p0: [s0(p0: [[201.0]], p1: [[202.0], [203.0]])], p1: s0(p0: [[204.0]], p1: [[205.0], [206.0]]))), s2(p0: s0(p0: [[207.0]], p1: [[208.0], [209.0]]), p1: s1(p0: [s0(p0: [[210.0]], p1: [[211.0], [212.0]])], p1: s0(p0: [[213.0]], p1: [[214.0], [215.0]])))])
    let v2: Double = 216.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 216.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
