  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: s1
    var p1: [s1]
    var p2: s0
  } in
  struct s4 {
    var p0: s0
  } in
  struct s5 {
    var p0: [[s2]]
    var p1: s0
  } in
  let f65: (s0) -> s0 = (v0: s0) -> s0 {
    var v4: s0 = v0 in
    let v3: [[Float]] = v0.p1 in
    v4.p1 = v3 in
    v4.p1 = v3 in
    v4.p1 = v3 in
    v4.p1 = v3 in
    v4.p1 = v3 in
    v4
  } in
  let f60: (s0) -> s0 = (v0: s0) -> s0 {
    let v7: [[Float]] = v0.p1 in
    var v5: [[Float]] = v7 in
    let v6: s0 = f65(v0) in
    let v4: [[Float]] = v6.p1 in
    let v1: s0 = f65(v0) in
    var v3: [[Float]] = v5 in
    var v30: s0 = v0 in
    let v16: s0 = f65(v0) in
    v30.p1 = v5 in
    v30.p1 = v5 in
    let v14: s4 = s4(v1) in
    let v17: s0 = v14.p0 in
    let v8: [[Float]] = v17.p1 in
    let v10: s0 = f65(v30) in
    let v13: s0 = f65(v10) in
    var v25: [[Float]] = v5 in
    v30.p1 = v7 in
    v30.p1 = v4 in
    let v29: s4 = s4(v30) in
    let v46: s0 = v29.p0 in
    let v22: [[Float]] = v10.p1 in
    let v19: s0 = f65(v13) in
    let v24: [Float] = v3[1] in
    v30.p1 = v22 in
    let v38: s0 = f65(v16) in
    v5[1] = v24 in
    v30.p1 = v25 in
    let v27: s0 = f65(v38) in
    let v26: s0 = f65(v27) in
    let v34: s0 = f65(v46) in
    v30.p1 = v22 in
    v30.p1 = v8 in
    let v73: s0 = v14.p0 in
    let v32: [[Float]] = v19.p1 in
    v30.p1 = v4 in
    let v37: [[Float]] = v1.p0 in
    let v171: [s0] = [v6, v13, v0, v10, v26, v73, v34] in
    let v75: [Float] = v37[0] in
    v3[0] = v75 in
    let v48: s0 = f65(v34) in
    var v63: [s0] = v171 in
    v30.p1 = v32 in
    v63[2] = v30 in
    let v93: s0 = v63[2] in
    v63[2] = v48 in
    let v141: s0 = f65(v93) in
    v141
  } in
  let noinline_f0: ([s5], Float) -> Float = (v0: [s5], v1: Float) -> Float {
    let v4: s5 = v0[2] in
    let v2: s0 = v4.p1 in
    let v12: s0 = f60(v2) in
    let v5: [[Float]] = v12.p1 in
    let v14: [Float] = v5[0] in
    let v21: Float = v14[0] in
    var v30: Float = v21 in
    var v36: Float = v30 in
    let v26: Float = v36 + v30 in
    v26
  } in
  fun loop(i: Int, v0: [s5], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s5] = [s5([[s2(s1(s0([[0.0]], [[1.0], [2.0]]), [s0([[3.0]], [[4.0], [5.0]]), s0([[6.0]], [[7.0], [8.0]]), s0([[9.0]], [[10.0], [11.0]])]), [s1(s0([[12.0]], [[13.0], [14.0]]), [s0([[15.0]], [[16.0], [17.0]]), s0([[18.0]], [[19.0], [20.0]]), s0([[21.0]], [[22.0], [23.0]])]), s1(s0([[24.0]], [[25.0], [26.0]]), [s0([[27.0]], [[28.0], [29.0]]), s0([[30.0]], [[31.0], [32.0]]), s0([[33.0]], [[34.0], [35.0]])]), s1(s0([[36.0]], [[37.0], [38.0]]), [s0([[39.0]], [[40.0], [41.0]]), s0([[42.0]], [[43.0], [44.0]]), s0([[45.0]], [[46.0], [47.0]])])], s0([[48.0]], [[49.0], [50.0]]))], [s2(s1(s0([[51.0]], [[52.0], [53.0]]), [s0([[54.0]], [[55.0], [56.0]]), s0([[57.0]], [[58.0], [59.0]]), s0([[60.0]], [[61.0], [62.0]])]), [s1(s0([[63.0]], [[64.0], [65.0]]), [s0([[66.0]], [[67.0], [68.0]]), s0([[69.0]], [[70.0], [71.0]]), s0([[72.0]], [[73.0], [74.0]])]), s1(s0([[75.0]], [[76.0], [77.0]]), [s0([[78.0]], [[79.0], [80.0]]), s0([[81.0]], [[82.0], [83.0]]), s0([[84.0]], [[85.0], [86.0]])]), s1(s0([[87.0]], [[88.0], [89.0]]), [s0([[90.0]], [[91.0], [92.0]]), s0([[93.0]], [[94.0], [95.0]]), s0([[96.0]], [[97.0], [98.0]])])], s0([[99.0]], [[100.0], [101.0]]))]], s0([[102.0]], [[103.0], [104.0]])), s5([[s2(s1(s0([[105.0]], [[106.0], [107.0]]), [s0([[108.0]], [[109.0], [110.0]]), s0([[111.0]], [[112.0], [113.0]]), s0([[114.0]], [[115.0], [116.0]])]), [s1(s0([[117.0]], [[118.0], [119.0]]), [s0([[120.0]], [[121.0], [122.0]]), s0([[123.0]], [[124.0], [125.0]]), s0([[126.0]], [[127.0], [128.0]])]), s1(s0([[129.0]], [[130.0], [131.0]]), [s0([[132.0]], [[133.0], [134.0]]), s0([[135.0]], [[136.0], [137.0]]), s0([[138.0]], [[139.0], [140.0]])]), s1(s0([[141.0]], [[142.0], [143.0]]), [s0([[144.0]], [[145.0], [146.0]]), s0([[147.0]], [[148.0], [149.0]]), s0([[150.0]], [[151.0], [152.0]])])], s0([[153.0]], [[154.0], [155.0]]))], [s2(s1(s0([[156.0]], [[157.0], [158.0]]), [s0([[159.0]], [[160.0], [161.0]]), s0([[162.0]], [[163.0], [164.0]]), s0([[165.0]], [[166.0], [167.0]])]), [s1(s0([[168.0]], [[169.0], [170.0]]), [s0([[171.0]], [[172.0], [173.0]]), s0([[174.0]], [[175.0], [176.0]]), s0([[177.0]], [[178.0], [179.0]])]), s1(s0([[180.0]], [[181.0], [182.0]]), [s0([[183.0]], [[184.0], [185.0]]), s0([[186.0]], [[187.0], [188.0]]), s0([[189.0]], [[190.0], [191.0]])]), s1(s0([[192.0]], [[193.0], [194.0]]), [s0([[195.0]], [[196.0], [197.0]]), s0([[198.0]], [[199.0], [200.0]]), s0([[201.0]], [[202.0], [203.0]])])], s0([[204.0]], [[205.0], [206.0]]))]], s0([[207.0]], [[208.0], [209.0]])), s5([[s2(s1(s0([[210.0]], [[211.0], [212.0]]), [s0([[213.0]], [[214.0], [215.0]]), s0([[216.0]], [[217.0], [218.0]]), s0([[219.0]], [[220.0], [221.0]])]), [s1(s0([[222.0]], [[223.0], [224.0]]), [s0([[225.0]], [[226.0], [227.0]]), s0([[228.0]], [[229.0], [230.0]]), s0([[231.0]], [[232.0], [233.0]])]), s1(s0([[234.0]], [[235.0], [236.0]]), [s0([[237.0]], [[238.0], [239.0]]), s0([[240.0]], [[241.0], [242.0]]), s0([[243.0]], [[244.0], [245.0]])]), s1(s0([[246.0]], [[247.0], [248.0]]), [s0([[249.0]], [[250.0], [251.0]]), s0([[252.0]], [[253.0], [254.0]]), s0([[255.0]], [[256.0], [257.0]])])], s0([[258.0]], [[259.0], [260.0]]))], [s2(s1(s0([[261.0]], [[262.0], [263.0]]), [s0([[264.0]], [[265.0], [266.0]]), s0([[267.0]], [[268.0], [269.0]]), s0([[270.0]], [[271.0], [272.0]])]), [s1(s0([[273.0]], [[274.0], [275.0]]), [s0([[276.0]], [[277.0], [278.0]]), s0([[279.0]], [[280.0], [281.0]]), s0([[282.0]], [[283.0], [284.0]])]), s1(s0([[285.0]], [[286.0], [287.0]]), [s0([[288.0]], [[289.0], [290.0]]), s0([[291.0]], [[292.0], [293.0]]), s0([[294.0]], [[295.0], [296.0]])]), s1(s0([[297.0]], [[298.0], [299.0]]), [s0([[300.0]], [[301.0], [302.0]]), s0([[303.0]], [[304.0], [305.0]]), s0([[306.0]], [[307.0], [308.0]])])], s0([[309.0]], [[310.0], [311.0]]))]], s0([[312.0]], [[313.0], [314.0]]))] in
    let v1: Float = 315.0 in
    let initialResult: Float = 315.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()