  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: [s0]
    var p1: s0
  }
  struct s2 {
    var p0: [s1]
    var p1: [s0]
  }
  func f18(_ v0: s0, _ v1: s0, _ v2: [s2]) -> s0 {
    let v26: [[Double]] = v1.p0
    let v39: [[Double]] = v0.p0
    var v20: s0 = v0
    let v18: [[Double]] = v20.p1
    v20.p1 = v26
    let v38: [[Double]] = v20.p0
    var v76: s0 = v0
    v76.p1 = v38
    v76 = v1
    v20.p0 = v26
    v20.p0 = v39
    v20.p0 = v18
    v76.p1 = v26
    return v76
  }
  func f16(_ v0: s2) -> s2 {
    var v8: s2 = v0
    return v8
  }
  func f15(_ v0: s0, _ v1: [[s2]]) -> s0 {
    let v4: [[[s2]]] = [v1, v1, v1, v1, v1]
    var v6: s0 = v0
    let v5: [s2] = v1[1]
    let v2: [[Double]] = v0.p1
    var v7: [s2] = v5
    let v3: [[Double]] = v6.p0
    let v13: s0 = f18(v0, v6, v7)
    v6.p1 = v2
    let v11: s0 = f18(v13, v6, v7)
    let v14: s0 = f18(v13, v11, v5)
    let v15: s0 = f18(v11, v0, v7)
    v6.p1 = v2
    let v19: s0 = f18(v13, v14, v7)
    let v36: [[Double]] = v19.p1
    v6.p1 = v36
    let v20: s2 = v7[0]
    var v21: [[[s2]]] = v4
    let v22: s2 = f16(v20)
    v7[0] = v22
    var v35: s2 = v22
    let v55: [s2] = v1[0]
    let v30: [s1] = v20.p0
    let v24: [[s2]] = v21[4]
    v35.p0 = v30
    let v32: s0 = s0(p0: v2, p1: v36)
    let v49: [s1] = v35.p0
    let v23: s1 = v30[1]
    v35.p0 = v49
    v6.p0 = v36
    let v50: s0 = v23.p1
    v6.p0 = v2
    v6.p0 = v3
    let v26: s0 = f18(v15, v32, v55)
    v7[0] = v35
    let v68: [s2] = v24[0]
    let v66: [s0] = v20.p1
    let v64: [[s2]] = v21[4]
    let v59: s0 = v66[0]
    v6.p1 = v3
    let v82: [s2] = v64[1]
    let v77: s0 = f18(v59, v50, v68)
    v35.p0 = v49
    let v114: s0 = f18(v26, v77, v82)
    return v114
  }
  func f13(_ v0: s0, _ v1: s0) -> s0 {
    var v5: s0 = v1
    v5 = v1
    var v4: s0 = v0
    v5 = v0
    let v2: [[Double]] = v5.p1
    v4.p1 = v2
    var v13: [[Double]] = v2
    let v6: [Double] = v2[2]
    var v9: [[Double]] = v13
    var v7: s0 = v5
    let v8: [Double] = v2[0]
    let v11: [[Double]] = v5.p1
    v9[1] = v8
    var v15: s0 = v0
    var v3: [[Double]] = v13
    let v24: Double = v6[0]
    v5.p0 = v3
    v4.p1 = v13
    v9[1] = v6
    let v14: [[Double]] = v5.p0
    let v31: Double = v8[0]
    v9[2] = v6
    let v16: [Double] = v14[0]
    v7.p0 = v11
    var v22: [[Double]] = v9
    let v28: [[Double]] = v0.p1
    let v12: [[Double]] = v7.p1
    v13 = v3
    var v19: [Double] = v6
    v13[1] = v8
    let v18: [Double] = [v24, v31, v24, v31, v24, v31, v31]
    v5.p1 = v3
    var v32: Double = v31
    let v40: [[Double]] = v0.p0
    v7.p0 = v11
    let v25: [[Double]] = v15.p1
    var v29: [[Double]] = v3
    var v56: [[Double]] = v29
    v5.p0 = v28
    let v76: [Double] = v2[0]
    let v43: Double = v18[5]
    v13[0] = v8
    let v79: [[Double]] = v4.p1
    let v70: Double = v31 * v43
    v7.p0 = v79
    v56[0] = v16
    v19[0] = v24
    let v53: [[Double]] = v0.p0
    v4.p1 = v56
    v19 = v76
    var v48: Double = v70
    v56[2] = v8
    v5 = v4
    var v81: [Double] = v76
    var v34: Double = v32
    v22[1] = v81
    v5.p1 = v29
    v4.p1 = v22
    var v33: Double = v34
    v19[0] = v32
    var v63: [Double] = v16
    var v58: Double = v32
    let v51: [[[Double]]] = [v12, v25, v2, v56, v56, v13, v25]
    v29[1] = v8
    v4.p1 = v11
    v81[0] = v33
    v56[0] = v16
    let v35: [[Double]] = v51[6]
    let v99: [Double] = v35[1]
    let v41: [[Double]] = v51[0]
    let v50: [[Double]] = v4.p1
    v4.p0 = v40
    let v122: [Double] = v41[1]
    let v88: [Double] = v13[0]
    v19[0] = v33
    v19[0] = v43
    v81[0] = v43
    v13[2] = v88
    v15.p1 = v79
    let v100: s0 = s0(p0: v56, p1: v41)
    let v156: [[Double]] = v100.p1
    var v171: [[[Double]]] = v51
    let v84: [[Double]] = v171[1]
    let v141: [[Double]] = v0.p1
    v33 = v58
    v4.p0 = v50
    let v80: [[Double]] = v4.p1
    v5.p0 = v53
    v4.p1 = v141
    let v123: [[Double]] = v171[0]
    v15.p0 = v84
    let v125: s0 = s0(p0: v156, p1: v123)
    v3[0] = v63
    v9[2] = v19
    v4.p1 = v80
    v22[2] = v99
    v19[0] = v48
    var v134: [Double] = v122
    v29[1] = v134
    return v125
  }
  func f4(_ v0: s0) -> s0 {
    let v2: s0 = f13(v0, v0)
    let v5: [[Double]] = v0.p0
    var v9: [[Double]] = v5
    let v7: s0 = s0(p0: v9, p1: v9)
    var v11: s0 = v0
    let v18: s0 = f13(v7, v11)
    let v12: [[Double]] = v2.p1
    let v21: [[Double]] = v2.p0
    v11.p0 = v21
    let v19: [Double] = v5[2]
    let v44: s0 = f13(v0, v18)
    v9[1] = v19
    let v34: [Double] = v12[2]
    v9[2] = v34
    let v25: s0 = f13(v44, v7)
    return v25
  }
  @inline(never)
  func f0(_ v0: s2, _ v1: [[s2]], _ v2: [[Double]], _ v3: Double) -> Double {
    let v8: [s0] = v0.p1
    var v4: [[s2]] = v1
    v4 = v1
    let v13: s0 = v8[2]
    let v11: [[Double]] = v13.p0
    v4 = v1
    let v17: [[Double]] = v13.p1
    let v28: s0 = f4(v13)
    let v23: s0 = f15(v28, v4)
    var v35: [[Double]] = v11
    let v30: [[Double]] = v23.p1
    let v21: [Double] = v30[1]
    v35 = v17
    v35[0] = v21
    v35 = v2
    v35[0] = v21
    v35[1] = v21
    let v80: [Double] = v35[2]
    v35[0] = v21
    let v77: Double = v80[0]
    let v73: Double = v3 + v77
    return v73
  }
  func benchmark() {
    let v0: s2 = s2(p0: [s1(p0: [s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0], [5.0]]), s0(p0: [[6.0], [7.0], [8.0]], p1: [[9.0], [10.0], [11.0]]), s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0], [16.0], [17.0]])], p1: s0(p0: [[18.0], [19.0], [20.0]], p1: [[21.0], [22.0], [23.0]])), s1(p0: [s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0], [28.0], [29.0]]), s0(p0: [[30.0], [31.0], [32.0]], p1: [[33.0], [34.0], [35.0]]), s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0], [40.0], [41.0]])], p1: s0(p0: [[42.0], [43.0], [44.0]], p1: [[45.0], [46.0], [47.0]]))], p1: [s0(p0: [[48.0], [49.0], [50.0]], p1: [[51.0], [52.0], [53.0]]), s0(p0: [[54.0], [55.0], [56.0]], p1: [[57.0], [58.0], [59.0]]), s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0], [64.0], [65.0]])])
    let v1: [[s2]] = [[s2(p0: [s1(p0: [s0(p0: [[66.0], [67.0], [68.0]], p1: [[69.0], [70.0], [71.0]]), s0(p0: [[72.0], [73.0], [74.0]], p1: [[75.0], [76.0], [77.0]]), s0(p0: [[78.0], [79.0], [80.0]], p1: [[81.0], [82.0], [83.0]])], p1: s0(p0: [[84.0], [85.0], [86.0]], p1: [[87.0], [88.0], [89.0]])), s1(p0: [s0(p0: [[90.0], [91.0], [92.0]], p1: [[93.0], [94.0], [95.0]]), s0(p0: [[96.0], [97.0], [98.0]], p1: [[99.0], [100.0], [101.0]]), s0(p0: [[102.0], [103.0], [104.0]], p1: [[105.0], [106.0], [107.0]])], p1: s0(p0: [[108.0], [109.0], [110.0]], p1: [[111.0], [112.0], [113.0]]))], p1: [s0(p0: [[114.0], [115.0], [116.0]], p1: [[117.0], [118.0], [119.0]]), s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0], [124.0], [125.0]]), s0(p0: [[126.0], [127.0], [128.0]], p1: [[129.0], [130.0], [131.0]])])], [s2(p0: [s1(p0: [s0(p0: [[132.0], [133.0], [134.0]], p1: [[135.0], [136.0], [137.0]]), s0(p0: [[138.0], [139.0], [140.0]], p1: [[141.0], [142.0], [143.0]]), s0(p0: [[144.0], [145.0], [146.0]], p1: [[147.0], [148.0], [149.0]])], p1: s0(p0: [[150.0], [151.0], [152.0]], p1: [[153.0], [154.0], [155.0]])), s1(p0: [s0(p0: [[156.0], [157.0], [158.0]], p1: [[159.0], [160.0], [161.0]]), s0(p0: [[162.0], [163.0], [164.0]], p1: [[165.0], [166.0], [167.0]]), s0(p0: [[168.0], [169.0], [170.0]], p1: [[171.0], [172.0], [173.0]])], p1: s0(p0: [[174.0], [175.0], [176.0]], p1: [[177.0], [178.0], [179.0]]))], p1: [s0(p0: [[180.0], [181.0], [182.0]], p1: [[183.0], [184.0], [185.0]]), s0(p0: [[186.0], [187.0], [188.0]], p1: [[189.0], [190.0], [191.0]]), s0(p0: [[192.0], [193.0], [194.0]], p1: [[195.0], [196.0], [197.0]])])], [s2(p0: [s1(p0: [s0(p0: [[198.0], [199.0], [200.0]], p1: [[201.0], [202.0], [203.0]]), s0(p0: [[204.0], [205.0], [206.0]], p1: [[207.0], [208.0], [209.0]]), s0(p0: [[210.0], [211.0], [212.0]], p1: [[213.0], [214.0], [215.0]])], p1: s0(p0: [[216.0], [217.0], [218.0]], p1: [[219.0], [220.0], [221.0]])), s1(p0: [s0(p0: [[222.0], [223.0], [224.0]], p1: [[225.0], [226.0], [227.0]]), s0(p0: [[228.0], [229.0], [230.0]], p1: [[231.0], [232.0], [233.0]]), s0(p0: [[234.0], [235.0], [236.0]], p1: [[237.0], [238.0], [239.0]])], p1: s0(p0: [[240.0], [241.0], [242.0]], p1: [[243.0], [244.0], [245.0]]))], p1: [s0(p0: [[246.0], [247.0], [248.0]], p1: [[249.0], [250.0], [251.0]]), s0(p0: [[252.0], [253.0], [254.0]], p1: [[255.0], [256.0], [257.0]]), s0(p0: [[258.0], [259.0], [260.0]], p1: [[261.0], [262.0], [263.0]])])]]
    let v2: [[Double]] = [[264.0], [265.0], [266.0]]
    let v3: Double = 267.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 267.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
