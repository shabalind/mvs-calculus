  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let f13: (s0) -> s0 = (v0: s0) -> s0 {
    var v6: s0 = v0 in
    let v1: [[Float]] = v6.p0 in
    var v2: s0 = v6 in
    v2.p1 = v1 in
    let v9: [Float] = v1[0] in
    let v8: [[Float]] = v6.p1 in
    let v7: [Float] = v8[0] in
    let v13: [[Float]] = v0.p1 in
    var v4: s0 = v2 in
    let v12: [[Float]] = v2.p1 in
    let v16: [[Float]] = v0.p0 in
    v4.p0 = v8 in
    var v21: [Float] = v9 in
    var v10: [[Float]] = v13 in
    v2.p0 = v16 in
    let v23: Float = v7[0] in
    v10[0] = v21 in
    v21[0] = v23 in
    v2 = v4 in
    let v24: [Float] = v1[0] in
    let v54: [[Float]] = v2.p0 in
    let v55: s0 = s0(v8, v54) in
    v4.p1 = v16 in
    v6 = v55 in
    let v34: s0 = s0(v12, v10) in
    v2.p0 = v10 in
    v10[0] = v24 in
    v34
  } in
  let noinline_f0: (s0, [s0], Float) -> Float = (v0: s0, v1: [s0], v2: Float) -> Float {
    let v7: s0 = v1[0] in
    let v4: s0 = f13(v7) in
    let v6: [[Float]] = v4.p0 in
    let v12: [Float] = v6[0] in
    let v40: Float = v12[0] in
    v40
  } in
  fun loop(i: Int, v0: s0, v1: [s0], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0]], [[1.0]]) in
    let v1: [s0] = [s0([[2.0]], [[3.0]])] in
    let v2: Float = 4.0 in
    let initialResult: Float = 4.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()