  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [Float]
    var p1: s0
  } in
  struct s2 {
    var p0: s0
    var p1: s0
  } in
  let noinline_f0: (s0, s1, s1, s2, Float) -> Float = (v0: s0, v1: s1, v2: s1, v3: s2, v4: Float) -> Float {
    let v7: [[Float]] = v0.p1 in
    let v6: [Float] = v7[0] in
    let v8: [[Float]] = v0.p1 in
    let v13: Float = v6[0] in
    let v25: [Float] = v8[0] in
    let v56: Float = v25[0] in
    let v49: Float = v13 * v56 in
    let v75: Float = v6[0] in
    var v48: Float = v49 in
    v48 = v75 in
    v48
  } in
  fun loop(i: Int, v0: s0, v1: s1, v2: s1, v3: s2, v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0]], [[2.0]]) in
    let v1: s1 = s1([3.0, 4.0], s0([[5.0], [6.0]], [[7.0]])) in
    let v2: s1 = s1([8.0, 9.0], s0([[10.0], [11.0]], [[12.0]])) in
    let v3: s2 = s2(s0([[13.0], [14.0]], [[15.0]]), s0([[16.0], [17.0]], [[18.0]])) in
    let v4: Float = 19.0 in
    let initialResult: Float = 19.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()