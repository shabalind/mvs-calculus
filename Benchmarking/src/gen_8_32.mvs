  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: ([[s0]], Float) -> Float = (v0: [[s0]], v1: Float) -> Float {
    var v5: [[s0]] = v0 in
    var v8: [[s0]] = v5 in
    let v9: [[[s0]]] = [v8, v5] in
    let v2: [s0] = v0[1] in
    let v3: [[s0]] = v9[0] in
    v5[1] = v2 in
    let v15: [s0] = v3[2] in
    let v13: s0 = v15[0] in
    let v11: [[Float]] = v13.p1 in
    let v21: [Float] = v11[0] in
    let v68: Float = v21[0] in
    v8[1] = v2 in
    v5[1] = v15 in
    v68
  } in
  fun loop(i: Int, v0: [[s0]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s0]] = [[s0([[0.0]], [[1.0], [2.0], [3.0]])], [s0([[4.0]], [[5.0], [6.0], [7.0]])], [s0([[8.0]], [[9.0], [10.0], [11.0]])]] in
    let v1: Float = 12.0 in
    let initialResult: Float = 12.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()