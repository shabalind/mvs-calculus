  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: s0
  } in
  struct s3 {
    var p0: s1
    var p1: [[s2]]
  } in
  let noinline_f0: ([s3], s0, Float) -> Float = (v0: [s3], v1: s0, v2: Float) -> Float {
    let v7: [Float] = [v2, v2, v2, v2, v2] in
    var v5: [Float] = v7 in
    let v9: Float = v7[2] in
    var v11: Float = v2 in
    v5[1] = v9 in
    var v12: Float = v9 in
    v5[1] = v11 in
    let v18: Float = v5[2] in
    v5[2] = v18 in
    v5[3] = v18 in
    v5[3] = v12 in
    v5[3] = v12 in
    v5[4] = v2 in
    let v46: Float = v5[0] in
    let v41: Float = v9 * v11 in
    var v50: Float = v18 in
    v5[1] = v41 in
    v5[3] = v46 in
    v12 = v46 in
    v50
  } in
  fun loop(i: Int, v0: [s3], v1: s0, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s3] = [s3(s1(s0([[0.0], [1.0]], [[2.0], [3.0]]), [s0([[4.0], [5.0]], [[6.0], [7.0]])]), [[s2(s0([[8.0], [9.0]], [[10.0], [11.0]]))]])] in
    let v1: s0 = s0([[12.0], [13.0]], [[14.0], [15.0]]) in
    let v2: Float = 16.0 in
    let initialResult: Float = 16.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()