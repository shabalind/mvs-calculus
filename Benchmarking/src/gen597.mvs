  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  let f15: (s0) -> s0 = (v0: s0) -> s0 {
    let v4: [s0] = [v0, v0, v0, v0, v0] in
    let v1: [s0] = [v0, v0, v0, v0, v0, v0, v0] in
    let v6: s0 = v4[1] in
    var v19: [s0] = v1 in
    let v23: s0 = v19[0] in
    v19[4] = v6 in
    var v61: s0 = v23 in
    v61
  } in
  let noinline_f0: (s0, s1, Float) -> Float = (v0: s0, v1: s1, v2: Float) -> Float {
    let v9: s0 = f15(v0) in
    let v13: [[Float]] = v9.p0 in
    let v57: [Float] = v13[1] in
    let v87: Float = v57[0] in
    v87
  } in
  fun loop(i: Int, v0: s0, v1: s1, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0], [2.0]], [[3.0]]) in
    let v1: s1 = s1([s0([[4.0], [5.0], [6.0]], [[7.0]])], [s0([[8.0], [9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0], [14.0]], [[15.0]]), s0([[16.0], [17.0], [18.0]], [[19.0]])]) in
    let v2: Float = 20.0 in
    let initialResult: Float = 20.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()