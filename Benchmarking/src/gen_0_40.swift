  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  }
  struct s2 {
    var p0: [s1]
    var p1: [Double]
  }
  struct s4 {
    var p0: s0
    var p1: s0
  }
  func f81(_ v0: Double) -> Double {
    var v7: Double = v0
    v7 = v0
    var v5: Double = v0
    var v2: Double = v5
    let v4: Double = v0 / v7
    var v9: Double = v0
    var v3: Double = v5
    v5 = v4
    var v10: Double = v9
    var v12: Double = v3
    var v41: Double = v2
    let v32: Double = v41 + v12
    var v46: Double = v32
    let v18: Double = v46 / v32
    v2 = v10
    return v18
  }
  @inline(never)
  func f0(_ v0: [[s2]], _ v1: [s1], _ v2: [[s4]], _ v3: [s2], _ v4: Double) -> Double {
    let v7: s2 = v3[0]
    let v16: [Double] = v7.p1
    var v26: [Double] = v16
    v26[2] = v4
    let v28: Double = v26[1]
    let v14: Double = f81(v4)
    v26[1] = v28
    v26[0] = v28
    v26[0] = v14
    v26[0] = v4
    v26[0] = v14
    let v23: Double = f81(v28)
    let v39: Double = v23 + v28
    return v39
  }
  func benchmark() {
    let v0: [[s2]] = [[s2(p0: [s1(p0: s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0]]), p1: [[s0(p0: [[5.0], [6.0], [7.0]], p1: [[8.0], [9.0]])]]), s1(p0: s0(p0: [[10.0], [11.0], [12.0]], p1: [[13.0], [14.0]]), p1: [[s0(p0: [[15.0], [16.0], [17.0]], p1: [[18.0], [19.0]])]])], p1: [20.0, 21.0, 22.0])], [s2(p0: [s1(p0: s0(p0: [[23.0], [24.0], [25.0]], p1: [[26.0], [27.0]]), p1: [[s0(p0: [[28.0], [29.0], [30.0]], p1: [[31.0], [32.0]])]]), s1(p0: s0(p0: [[33.0], [34.0], [35.0]], p1: [[36.0], [37.0]]), p1: [[s0(p0: [[38.0], [39.0], [40.0]], p1: [[41.0], [42.0]])]])], p1: [43.0, 44.0, 45.0])], [s2(p0: [s1(p0: s0(p0: [[46.0], [47.0], [48.0]], p1: [[49.0], [50.0]]), p1: [[s0(p0: [[51.0], [52.0], [53.0]], p1: [[54.0], [55.0]])]]), s1(p0: s0(p0: [[56.0], [57.0], [58.0]], p1: [[59.0], [60.0]]), p1: [[s0(p0: [[61.0], [62.0], [63.0]], p1: [[64.0], [65.0]])]])], p1: [66.0, 67.0, 68.0])]]
    let v1: [s1] = [s1(p0: s0(p0: [[69.0], [70.0], [71.0]], p1: [[72.0], [73.0]]), p1: [[s0(p0: [[74.0], [75.0], [76.0]], p1: [[77.0], [78.0]])]]), s1(p0: s0(p0: [[79.0], [80.0], [81.0]], p1: [[82.0], [83.0]]), p1: [[s0(p0: [[84.0], [85.0], [86.0]], p1: [[87.0], [88.0]])]])]
    let v2: [[s4]] = [[s4(p0: s0(p0: [[89.0], [90.0], [91.0]], p1: [[92.0], [93.0]]), p1: s0(p0: [[94.0], [95.0], [96.0]], p1: [[97.0], [98.0]]))]]
    let v3: [s2] = [s2(p0: [s1(p0: s0(p0: [[99.0], [100.0], [101.0]], p1: [[102.0], [103.0]]), p1: [[s0(p0: [[104.0], [105.0], [106.0]], p1: [[107.0], [108.0]])]]), s1(p0: s0(p0: [[109.0], [110.0], [111.0]], p1: [[112.0], [113.0]]), p1: [[s0(p0: [[114.0], [115.0], [116.0]], p1: [[117.0], [118.0]])]])], p1: [119.0, 120.0, 121.0])]
    let v4: Double = 122.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 122.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
