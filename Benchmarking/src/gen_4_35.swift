  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [Double]
    var p2: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: s0
  }
  struct s2 {
    var p0: [s1]
    var p1: [s0]
    var p2: s0
    var p3: [s1]
  }
  struct s4 {
    var p0: s2
    var p1: [s0]
  }
  struct s6 {
    var p0: [s4]
    var p1: s2
  }
  func f18(_ v0: Double) -> Double {
    var v3: Double = v0
    v3 = v0
    let v6: Double = v0 + v3
    let v5: Double = v6 / v3
    var v2: Double = v5
    var v14: Double = v2
    return v14
  }
  @inline(never)
  func f0(_ v0: s6, _ v1: Double) -> Double {
    let v2: Double = f18(v1)
    let v11: Double = f18(v2)
    var v31: Double = v2
    v31 = v11
    return v31
  }
  func benchmark() {
    let v0: s6 = s6(p0: [s4(p0: s2(p0: [s1(p0: s0(p0: [[0.0], [1.0]], p1: [2.0], p2: [[3.0]]), p1: s0(p0: [[4.0], [5.0]], p1: [6.0], p2: [[7.0]])), s1(p0: s0(p0: [[8.0], [9.0]], p1: [10.0], p2: [[11.0]]), p1: s0(p0: [[12.0], [13.0]], p1: [14.0], p2: [[15.0]])), s1(p0: s0(p0: [[16.0], [17.0]], p1: [18.0], p2: [[19.0]]), p1: s0(p0: [[20.0], [21.0]], p1: [22.0], p2: [[23.0]]))], p1: [s0(p0: [[24.0], [25.0]], p1: [26.0], p2: [[27.0]]), s0(p0: [[28.0], [29.0]], p1: [30.0], p2: [[31.0]]), s0(p0: [[32.0], [33.0]], p1: [34.0], p2: [[35.0]])], p2: s0(p0: [[36.0], [37.0]], p1: [38.0], p2: [[39.0]]), p3: [s1(p0: s0(p0: [[40.0], [41.0]], p1: [42.0], p2: [[43.0]]), p1: s0(p0: [[44.0], [45.0]], p1: [46.0], p2: [[47.0]])), s1(p0: s0(p0: [[48.0], [49.0]], p1: [50.0], p2: [[51.0]]), p1: s0(p0: [[52.0], [53.0]], p1: [54.0], p2: [[55.0]]))]), p1: [s0(p0: [[56.0], [57.0]], p1: [58.0], p2: [[59.0]]), s0(p0: [[60.0], [61.0]], p1: [62.0], p2: [[63.0]]), s0(p0: [[64.0], [65.0]], p1: [66.0], p2: [[67.0]])])], p1: s2(p0: [s1(p0: s0(p0: [[68.0], [69.0]], p1: [70.0], p2: [[71.0]]), p1: s0(p0: [[72.0], [73.0]], p1: [74.0], p2: [[75.0]])), s1(p0: s0(p0: [[76.0], [77.0]], p1: [78.0], p2: [[79.0]]), p1: s0(p0: [[80.0], [81.0]], p1: [82.0], p2: [[83.0]])), s1(p0: s0(p0: [[84.0], [85.0]], p1: [86.0], p2: [[87.0]]), p1: s0(p0: [[88.0], [89.0]], p1: [90.0], p2: [[91.0]]))], p1: [s0(p0: [[92.0], [93.0]], p1: [94.0], p2: [[95.0]]), s0(p0: [[96.0], [97.0]], p1: [98.0], p2: [[99.0]]), s0(p0: [[100.0], [101.0]], p1: [102.0], p2: [[103.0]])], p2: s0(p0: [[104.0], [105.0]], p1: [106.0], p2: [[107.0]]), p3: [s1(p0: s0(p0: [[108.0], [109.0]], p1: [110.0], p2: [[111.0]]), p1: s0(p0: [[112.0], [113.0]], p1: [114.0], p2: [[115.0]])), s1(p0: s0(p0: [[116.0], [117.0]], p1: [118.0], p2: [[119.0]]), p1: s0(p0: [[120.0], [121.0]], p1: [122.0], p2: [[123.0]]))]))
    let v1: Double = 124.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 124.0
    for _ in 1...1000 {
      result = f0(v0, v1)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
