  struct s0 {
    var p0: Float
    var p1: [[Float]]
  } in
  let noinline_f0: (s0, Float) -> Float = (v0: s0, v1: Float) -> Float {
    var v3: s0 = v0 in
    v3.p0 = v1 in
    var v10: Float = v1 in
    v3.p0 = v10 in
    var v6: s0 = v3 in
    let v13: Float = v3.p0 in
    v6.p0 = v13 in
    var v11: Float = v10 in
    var v27: s0 = v6 in
    v3.p0 = v11 in
    let v33: Float = v6.p0 in
    var v16: s0 = v27 in
    v16.p0 = v11 in
    var v66: s0 = v16 in
    v66.p0 = v33 in
    let v89: Float = v66.p0 in
    v27.p0 = v33 in
    v89
  } in
  fun loop(i: Int, v0: s0, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0(0.0, [[1.0], [2.0]]) in
    let v1: Float = 3.0 in
    let initialResult: Float = 3.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()