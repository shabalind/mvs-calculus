  let noinline_f0: ([[Float]], [[Float]], Float) -> Float = (v0: [[Float]], v1: [[Float]], v2: Float) -> Float {
    var v8: [[Float]] = v1 in
    let v5: [Float] = v8[0] in
    let v4: Float = v5[0] in
    var v3: Float = v2 in
    let v13: [Float] = v8[0] in
    var v26: Float = v2 in
    var v20: [Float] = v13 in
    let v36: Float = v20[0] in
    var v46: Float = v26 in
    let v41: Float = v36 - v4 in
    var v28: [Float] = v5 in
    v28[0] = v41 in
    v28[0] = v46 in
    v8[0] = v28 in
    v20[0] = v3 in
    var v178: Float = v41 in
    v178
  } in
  fun loop(i: Int, v0: [[Float]], v1: [[Float]], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0], [1.0]] in
    let v1: [[Float]] = [[2.0]] in
    let v2: Float = 3.0 in
    let initialResult: Float = 3.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()