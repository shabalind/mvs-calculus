  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s5 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s7 {
    var p0: [s0]
    var p1: [s5]
  } in
  let f75: (s7) -> s7 = (v0: s7) -> s7 {
    var v121: s7 = v0 in
    v121
  } in
  let noinline_f0: (s7, Float) -> Float = (v0: s7, v1: Float) -> Float {
    let v2: s7 = f75(v0) in
    let v3: [s0] = v2.p0 in
    let v9: s0 = v3[0] in
    let v20: [[Float]] = v9.p1 in
    let v19: [Float] = v20[1] in
    let v14: [[Float]] = v9.p1 in
    let v59: [Float] = v14[1] in
    let v54: [Float] = v14[1] in
    let v70: [[Float]] = [v59, v59, v54, v59, v19, v59, v19] in
    let v132: [Float] = v70[3] in
    let v168: Float = v132[0] in
    v168
  } in
  fun loop(i: Int, v0: s7, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s7 = s7([s0([[0.0], [1.0]], [[2.0], [3.0]])], [s5([s0([[4.0], [5.0]], [[6.0], [7.0]]), s0([[8.0], [9.0]], [[10.0], [11.0]]), s0([[12.0], [13.0]], [[14.0], [15.0]])], [s0([[16.0], [17.0]], [[18.0], [19.0]]), s0([[20.0], [21.0]], [[22.0], [23.0]]), s0([[24.0], [25.0]], [[26.0], [27.0]])]), s5([s0([[28.0], [29.0]], [[30.0], [31.0]]), s0([[32.0], [33.0]], [[34.0], [35.0]]), s0([[36.0], [37.0]], [[38.0], [39.0]])], [s0([[40.0], [41.0]], [[42.0], [43.0]]), s0([[44.0], [45.0]], [[46.0], [47.0]]), s0([[48.0], [49.0]], [[50.0], [51.0]])])]) in
    let v1: Float = 52.0 in
    let initialResult: Float = 52.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()