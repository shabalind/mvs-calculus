  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  let f50: (s1) -> s1 = (v0: s1) -> s1 {
    var v37: s1 = v0 in
    v37
  } in
  let f41: (s0) -> s0 = (v0: s0) -> s0 {
    var v7: s0 = v0 in
    var v8: s0 = v0 in
    var v2: s0 = v7 in
    var v3: s0 = v8 in
    let v10: [[Float]] = v3.p1 in
    let v4: [[Float]] = v2.p1 in
    v7.p1 = v4 in
    var v1: [[Float]] = v10 in
    var v12: [[Float]] = v4 in
    var v6: [[Float]] = v12 in
    let v22: [s0] = [v8, v0, v0, v7, v2, v2] in
    let v31: [[Float]] = v2.p0 in
    let v19: [Float] = v1[0] in
    let v28: [[Float]] = v0.p0 in
    v2 = v7 in
    v1[0] = v19 in
    var v18: [s0] = v22 in
    let v16: [Float] = v4[0] in
    v7.p0 = v31 in
    v18[2] = v0 in
    let v24: [[Float]] = v3.p0 in
    var v21: [Float] = v16 in
    v18[0] = v3 in
    let v37: [[Float]] = v8.p1 in
    let v29: s0 = v22[4] in
    v7.p1 = v6 in
    let v60: [Float] = v4[0] in
    let v62: [[Float]] = v2.p0 in
    let v35: [[Float]] = v7.p1 in
    v6[0] = v19 in
    let v39: Float = v19[0] in
    v1[0] = v21 in
    v7.p1 = v35 in
    v3.p0 = v24 in
    var v32: [[Float]] = v62 in
    v3.p0 = v62 in
    v2.p0 = v28 in
    v3.p0 = v32 in
    let v57: [[Float]] = v0.p1 in
    v6[0] = v60 in
    var v40: Float = v39 in
    let v61: [[Float]] = v29.p1 in
    v2.p1 = v37 in
    v7.p0 = v32 in
    v7.p1 = v35 in
    v7.p1 = v57 in
    v2.p1 = v61 in
    v21[0] = v40 in
    let v74: s0 = v18[5] in
    v2.p0 = v31 in
    v74
  } in
  let f21: (s1, s1) -> s1 = (v0: s1, v1: s1) -> s1 {
    var v3: s1 = v1 in
    var v7: s1 = v3 in
    let v5: [s0] = v7.p0 in
    let v9: s1 = f50(v7) in
    var v10: [s0] = v5 in
    v3.p0 = v10 in
    v9
  } in
  let f13: (s0) -> s0 = (v0: s0) -> s0 {
    var v6: s0 = v0 in
    let v3: [[Float]] = v0.p0 in
    v6.p0 = v3 in
    var v12: s0 = v0 in
    let v20: s0 = f41(v6) in
    v6 = v12 in
    let v25: s0 = f41(v20) in
    v25
  } in
  let noinline_f0: ([s0], [s0], Float) -> Float = (v0: [s0], v1: [s0], v2: Float) -> Float {
    var v8: [s0] = v0 in
    v8 = v0 in
    let v12: s0 = v8[0] in
    v8[0] = v12 in
    v8 = v0 in
    let v11: s0 = f13(v12) in
    let v17: [[Float]] = v11.p1 in
    v8[0] = v11 in
    let v24: s0 = v8[0] in
    let v68: [Float] = v17[0] in
    let v19: s0 = v8[0] in
    v8[0] = v19 in
    let v23: s1 = s1(v0, v11) in
    let v50: s0 = f13(v24) in
    v8[0] = v50 in
    var v73: [Float] = v68 in
    let v30: s1 = f21(v23, v23) in
    var v32: Float = v2 in
    let v47: Float = v68[0] in
    v73[0] = v47 in
    v8[0] = v12 in
    let v84: Float = v73[0] in
    let v80: s0 = v30.p1 in
    v8[0] = v80 in
    let v98: Float = v84 + v32 in
    v98
  } in
  fun loop(i: Int, v0: [s0], v1: [s0], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s0] = [s0([[0.0], [1.0], [2.0]], [[3.0]])] in
    let v1: [s0] = [s0([[4.0], [5.0], [6.0]], [[7.0]]), s0([[8.0], [9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0], [14.0]], [[15.0]])] in
    let v2: Float = 16.0 in
    let initialResult: Float = 16.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()