  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
  } in
  struct s5 {
    var p0: s1
    var p1: [s0]
  } in
  let noinline_f0: (s5, Float) -> Float = (v0: s5, v1: Float) -> Float {
    let v6: s1 = v0.p0 in
    let v13: [[s0]] = v6.p1 in
    var v11: [[s0]] = v13 in
    var v21: [[s0]] = v13 in
    let v23: [s0] = v11[1] in
    let v18: [s0] = v21[2] in
    let v22: s0 = v23[0] in
    let v24: [[Float]] = v22.p0 in
    let v56: [Float] = v24[0] in
    let v44: [[Float]] = [v56, v56, v56] in
    var v42: [[Float]] = v44 in
    let v79: [Float] = v42[1] in
    v42 = v44 in
    let v125: Float = v79[0] in
    var v285: [[Float]] = v44 in
    let v167: [Float] = v285[2] in
    v11[2] = v18 in
    v42 = v285 in
    v285[2] = v167 in
    v125
  } in
  fun loop(i: Int, v0: s5, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s5 = s5(s1([s0([[0.0]], [[1.0], [2.0]])], [[s0([[3.0]], [[4.0], [5.0]])], [s0([[6.0]], [[7.0], [8.0]])], [s0([[9.0]], [[10.0], [11.0]])]]), [s0([[12.0]], [[13.0], [14.0]]), s0([[15.0]], [[16.0], [17.0]]), s0([[18.0]], [[19.0], [20.0]])]) in
    let v1: Float = 21.0 in
    let initialResult: Float = 21.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()