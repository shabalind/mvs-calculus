  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: Float
    var p1: [s0]
  } in
  struct s2 {
    var p0: s0
  } in
  struct s3 {
    var p0: s1
    var p1: [s1]
  } in
  struct s5 {
    var p0: [[s3]]
    var p1: [[s0]]
  } in
  let f42: (s0) -> s0 = (v0: s0) -> s0 {
    let v1: [s0] = [v0, v0, v0, v0, v0, v0, v0] in
    let v2: s2 = s2(v0) in
    let v7: s0 = v1[4] in
    let v5: s0 = v2.p0 in
    let v14: [[Float]] = v5.p0 in
    var v19: [s0] = v1 in
    let v18: [[Float]] = v7.p0 in
    let v45: [[[Float]]] = [v18, v14, v18, v18] in
    let v36: s0 = v19[1] in
    let v122: [[Float]] = v45[1] in
    let v114: [[Float]] = v36.p1 in
    let v161: s0 = s0(v122, v114) in
    v161
  } in
  let noinline_f0: ([s5], [s2], Float) -> Float = (v0: [s5], v1: [s2], v2: Float) -> Float {
    var v4: [s2] = v1 in
    var v12: Float = v2 in
    let v37: s2 = v4[0] in
    let v43: s0 = v37.p0 in
    let v58: s0 = f42(v43) in
    let v45: s0 = f42(v58) in
    let v209: [[Float]] = v45.p0 in
    let v84: [Float] = v209[2] in
    let v105: Float = v84[0] in
    let v149: Float = v105 + v12 in
    v149
  } in
  fun loop(i: Int, v0: [s5], v1: [s2], v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s5] = [s5([[s3(s1(0.0, [s0([[1.0], [2.0], [3.0]], [[4.0], [5.0]]), s0([[6.0], [7.0], [8.0]], [[9.0], [10.0]]), s0([[11.0], [12.0], [13.0]], [[14.0], [15.0]])]), [s1(16.0, [s0([[17.0], [18.0], [19.0]], [[20.0], [21.0]]), s0([[22.0], [23.0], [24.0]], [[25.0], [26.0]]), s0([[27.0], [28.0], [29.0]], [[30.0], [31.0]])]), s1(32.0, [s0([[33.0], [34.0], [35.0]], [[36.0], [37.0]]), s0([[38.0], [39.0], [40.0]], [[41.0], [42.0]]), s0([[43.0], [44.0], [45.0]], [[46.0], [47.0]])]), s1(48.0, [s0([[49.0], [50.0], [51.0]], [[52.0], [53.0]]), s0([[54.0], [55.0], [56.0]], [[57.0], [58.0]]), s0([[59.0], [60.0], [61.0]], [[62.0], [63.0]])])])], [s3(s1(64.0, [s0([[65.0], [66.0], [67.0]], [[68.0], [69.0]]), s0([[70.0], [71.0], [72.0]], [[73.0], [74.0]]), s0([[75.0], [76.0], [77.0]], [[78.0], [79.0]])]), [s1(80.0, [s0([[81.0], [82.0], [83.0]], [[84.0], [85.0]]), s0([[86.0], [87.0], [88.0]], [[89.0], [90.0]]), s0([[91.0], [92.0], [93.0]], [[94.0], [95.0]])]), s1(96.0, [s0([[97.0], [98.0], [99.0]], [[100.0], [101.0]]), s0([[102.0], [103.0], [104.0]], [[105.0], [106.0]]), s0([[107.0], [108.0], [109.0]], [[110.0], [111.0]])]), s1(112.0, [s0([[113.0], [114.0], [115.0]], [[116.0], [117.0]]), s0([[118.0], [119.0], [120.0]], [[121.0], [122.0]]), s0([[123.0], [124.0], [125.0]], [[126.0], [127.0]])])])], [s3(s1(128.0, [s0([[129.0], [130.0], [131.0]], [[132.0], [133.0]]), s0([[134.0], [135.0], [136.0]], [[137.0], [138.0]]), s0([[139.0], [140.0], [141.0]], [[142.0], [143.0]])]), [s1(144.0, [s0([[145.0], [146.0], [147.0]], [[148.0], [149.0]]), s0([[150.0], [151.0], [152.0]], [[153.0], [154.0]]), s0([[155.0], [156.0], [157.0]], [[158.0], [159.0]])]), s1(160.0, [s0([[161.0], [162.0], [163.0]], [[164.0], [165.0]]), s0([[166.0], [167.0], [168.0]], [[169.0], [170.0]]), s0([[171.0], [172.0], [173.0]], [[174.0], [175.0]])]), s1(176.0, [s0([[177.0], [178.0], [179.0]], [[180.0], [181.0]]), s0([[182.0], [183.0], [184.0]], [[185.0], [186.0]]), s0([[187.0], [188.0], [189.0]], [[190.0], [191.0]])])])]], [[s0([[192.0], [193.0], [194.0]], [[195.0], [196.0]])], [s0([[197.0], [198.0], [199.0]], [[200.0], [201.0]])]]), s5([[s3(s1(202.0, [s0([[203.0], [204.0], [205.0]], [[206.0], [207.0]]), s0([[208.0], [209.0], [210.0]], [[211.0], [212.0]]), s0([[213.0], [214.0], [215.0]], [[216.0], [217.0]])]), [s1(218.0, [s0([[219.0], [220.0], [221.0]], [[222.0], [223.0]]), s0([[224.0], [225.0], [226.0]], [[227.0], [228.0]]), s0([[229.0], [230.0], [231.0]], [[232.0], [233.0]])]), s1(234.0, [s0([[235.0], [236.0], [237.0]], [[238.0], [239.0]]), s0([[240.0], [241.0], [242.0]], [[243.0], [244.0]]), s0([[245.0], [246.0], [247.0]], [[248.0], [249.0]])]), s1(250.0, [s0([[251.0], [252.0], [253.0]], [[254.0], [255.0]]), s0([[256.0], [257.0], [258.0]], [[259.0], [260.0]]), s0([[261.0], [262.0], [263.0]], [[264.0], [265.0]])])])], [s3(s1(266.0, [s0([[267.0], [268.0], [269.0]], [[270.0], [271.0]]), s0([[272.0], [273.0], [274.0]], [[275.0], [276.0]]), s0([[277.0], [278.0], [279.0]], [[280.0], [281.0]])]), [s1(282.0, [s0([[283.0], [284.0], [285.0]], [[286.0], [287.0]]), s0([[288.0], [289.0], [290.0]], [[291.0], [292.0]]), s0([[293.0], [294.0], [295.0]], [[296.0], [297.0]])]), s1(298.0, [s0([[299.0], [300.0], [301.0]], [[302.0], [303.0]]), s0([[304.0], [305.0], [306.0]], [[307.0], [308.0]]), s0([[309.0], [310.0], [311.0]], [[312.0], [313.0]])]), s1(314.0, [s0([[315.0], [316.0], [317.0]], [[318.0], [319.0]]), s0([[320.0], [321.0], [322.0]], [[323.0], [324.0]]), s0([[325.0], [326.0], [327.0]], [[328.0], [329.0]])])])], [s3(s1(330.0, [s0([[331.0], [332.0], [333.0]], [[334.0], [335.0]]), s0([[336.0], [337.0], [338.0]], [[339.0], [340.0]]), s0([[341.0], [342.0], [343.0]], [[344.0], [345.0]])]), [s1(346.0, [s0([[347.0], [348.0], [349.0]], [[350.0], [351.0]]), s0([[352.0], [353.0], [354.0]], [[355.0], [356.0]]), s0([[357.0], [358.0], [359.0]], [[360.0], [361.0]])]), s1(362.0, [s0([[363.0], [364.0], [365.0]], [[366.0], [367.0]]), s0([[368.0], [369.0], [370.0]], [[371.0], [372.0]]), s0([[373.0], [374.0], [375.0]], [[376.0], [377.0]])]), s1(378.0, [s0([[379.0], [380.0], [381.0]], [[382.0], [383.0]]), s0([[384.0], [385.0], [386.0]], [[387.0], [388.0]]), s0([[389.0], [390.0], [391.0]], [[392.0], [393.0]])])])]], [[s0([[394.0], [395.0], [396.0]], [[397.0], [398.0]])], [s0([[399.0], [400.0], [401.0]], [[402.0], [403.0]])]]), s5([[s3(s1(404.0, [s0([[405.0], [406.0], [407.0]], [[408.0], [409.0]]), s0([[410.0], [411.0], [412.0]], [[413.0], [414.0]]), s0([[415.0], [416.0], [417.0]], [[418.0], [419.0]])]), [s1(420.0, [s0([[421.0], [422.0], [423.0]], [[424.0], [425.0]]), s0([[426.0], [427.0], [428.0]], [[429.0], [430.0]]), s0([[431.0], [432.0], [433.0]], [[434.0], [435.0]])]), s1(436.0, [s0([[437.0], [438.0], [439.0]], [[440.0], [441.0]]), s0([[442.0], [443.0], [444.0]], [[445.0], [446.0]]), s0([[447.0], [448.0], [449.0]], [[450.0], [451.0]])]), s1(452.0, [s0([[453.0], [454.0], [455.0]], [[456.0], [457.0]]), s0([[458.0], [459.0], [460.0]], [[461.0], [462.0]]), s0([[463.0], [464.0], [465.0]], [[466.0], [467.0]])])])], [s3(s1(468.0, [s0([[469.0], [470.0], [471.0]], [[472.0], [473.0]]), s0([[474.0], [475.0], [476.0]], [[477.0], [478.0]]), s0([[479.0], [480.0], [481.0]], [[482.0], [483.0]])]), [s1(484.0, [s0([[485.0], [486.0], [487.0]], [[488.0], [489.0]]), s0([[490.0], [491.0], [492.0]], [[493.0], [494.0]]), s0([[495.0], [496.0], [497.0]], [[498.0], [499.0]])]), s1(500.0, [s0([[501.0], [502.0], [503.0]], [[504.0], [505.0]]), s0([[506.0], [507.0], [508.0]], [[509.0], [510.0]]), s0([[511.0], [512.0], [513.0]], [[514.0], [515.0]])]), s1(516.0, [s0([[517.0], [518.0], [519.0]], [[520.0], [521.0]]), s0([[522.0], [523.0], [524.0]], [[525.0], [526.0]]), s0([[527.0], [528.0], [529.0]], [[530.0], [531.0]])])])], [s3(s1(532.0, [s0([[533.0], [534.0], [535.0]], [[536.0], [537.0]]), s0([[538.0], [539.0], [540.0]], [[541.0], [542.0]]), s0([[543.0], [544.0], [545.0]], [[546.0], [547.0]])]), [s1(548.0, [s0([[549.0], [550.0], [551.0]], [[552.0], [553.0]]), s0([[554.0], [555.0], [556.0]], [[557.0], [558.0]]), s0([[559.0], [560.0], [561.0]], [[562.0], [563.0]])]), s1(564.0, [s0([[565.0], [566.0], [567.0]], [[568.0], [569.0]]), s0([[570.0], [571.0], [572.0]], [[573.0], [574.0]]), s0([[575.0], [576.0], [577.0]], [[578.0], [579.0]])]), s1(580.0, [s0([[581.0], [582.0], [583.0]], [[584.0], [585.0]]), s0([[586.0], [587.0], [588.0]], [[589.0], [590.0]]), s0([[591.0], [592.0], [593.0]], [[594.0], [595.0]])])])]], [[s0([[596.0], [597.0], [598.0]], [[599.0], [600.0]])], [s0([[601.0], [602.0], [603.0]], [[604.0], [605.0]])]])] in
    let v1: [s2] = [s2(s0([[606.0], [607.0], [608.0]], [[609.0], [610.0]]))] in
    let v2: Float = 611.0 in
    let initialResult: Float = 611.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()