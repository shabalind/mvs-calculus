  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s4 {
    var p0: s1
    var p1: [s1]
  } in
  let f33: (s1) -> s1 = (v0: s1) -> s1 {
    var v4: s1 = v0 in
    var v8: s1 = v0 in
    let v6: [s0] = v4.p1 in
    v8.p1 = v6 in
    var v3: [s0] = v6 in
    let v5: [s0] = v8.p1 in
    let v1: s0 = v5[0] in
    let v7: [s0] = v0.p1 in
    v3 = v7 in
    var v10: s0 = v1 in
    var v2: s0 = v1 in
    v3[0] = v10 in
    v3[0] = v2 in
    v4.p1 = v3 in
    v8.p1 = v3 in
    v8.p1 = v5 in
    v4.p1 = v5 in
    v8
  } in
  let noinline_f0: (s4, Float) -> Float = (v0: s4, v1: Float) -> Float {
    var v5: Float = v1 in
    let v10: s1 = v0.p0 in
    let v3: s1 = f33(v10) in
    let v8: [s0] = v3.p0 in
    let v9: s0 = v8[0] in
    let v20: [[Float]] = v9.p1 in
    var v16: Float = v1 in
    let v23: [Float] = v20[0] in
    let v25: Float = v5 - v16 in
    var v53: [Float] = v23 in
    v53[0] = v25 in
    var v43: Float = v16 in
    let v120: Float = v53[0] in
    v53[0] = v1 in
    v53[0] = v43 in
    v120
  } in
  fun loop(i: Int, v0: s4, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s4 = s4(s1([s0([[0.0], [1.0]], [[2.0]]), s0([[3.0], [4.0]], [[5.0]])], [s0([[6.0], [7.0]], [[8.0]])]), [s1([s0([[9.0], [10.0]], [[11.0]]), s0([[12.0], [13.0]], [[14.0]])], [s0([[15.0], [16.0]], [[17.0]])])]) in
    let v1: Float = 18.0 in
    let initialResult: Float = 18.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()