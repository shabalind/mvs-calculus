  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  let noinline_f0: (s0, s0, s0, [s0], Float) -> Float = (v0: s0, v1: s0, v2: s0, v3: [s0], v4: Float) -> Float {
    let v6: [[Float]] = v2.p1 in
    let v5: s0 = v3[1] in
    let v16: [[Float]] = v5.p0 in
    let v13: [Float] = v6[0] in
    let v17: [Float] = v16[1] in
    let v20: Float = v13[0] in
    let v32: Float = v17[0] in
    let v43: Float = v20 / v32 in
    let v24: Float = v43 / v43 in
    let v59: Float = v17[0] in
    let v48: Float = v24 + v59 in
    v48
  } in
  fun loop(i: Int, v0: s0, v1: s0, v2: s0, v3: [s0], v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0], [2.0]], [[3.0], [4.0], [5.0]]) in
    let v1: s0 = s0([[6.0], [7.0], [8.0]], [[9.0], [10.0], [11.0]]) in
    let v2: s0 = s0([[12.0], [13.0], [14.0]], [[15.0], [16.0], [17.0]]) in
    let v3: [s0] = [s0([[18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0]]), s0([[24.0], [25.0], [26.0]], [[27.0], [28.0], [29.0]])] in
    let v4: Float = 30.0 in
    let initialResult: Float = 30.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()