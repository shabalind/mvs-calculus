  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [[s0]]
    var p2: [s0]
    var p3: s0
  }
  struct s2 {
    var p0: s1
    var p1: [s0]
  }
  struct s3 {
    var p0: [s2]
    var p1: s0
  }
  struct s6 {
    var p0: s2
    var p1: s3
  }
  func f51(_ v0: Double) -> Double {
    var v7: Double = v0
    var v5: Double = v7
    var v6: Double = v5
    var v2: Double = v0
    var v8: Double = v2
    var v3: Double = v5
    var v10: Double = v8
    var v1: Double = v8
    let v11: [Double] = [v10, v6]
    var v14: [Double] = v11
    var v20: [Double] = v14
    var v21: [Double] = v20
    v14[0] = v1
    v20[1] = v2
    v14[0] = v5
    let v26: [[Double]] = [v11, v21, v11, v21, v21]
    var v57: [[Double]] = v26
    v20[1] = v3
    v21[1] = v3
    let v37: [Double] = v26[3]
    let v50: [Double] = v57[1]
    v20 = v50
    v1 = v5
    var v122: Double = v10
    var v86: [[Double]] = v57
    var v53: [Double] = v37
    v86[3] = v53
    v14[0] = v122
    let v43: [Double] = v86[2]
    var v52: [Double] = v43
    let v130: Double = v52[0]
    return v130
  }
  @inline(never)
  func f0(_ v0: s6, _ v1: [s6], _ v2: [s2], _ v3: Double) -> Double {
    let v29: Double = f51(v3)
    let v28: Double = v29 - v3
    return v28
  }
  func benchmark() {
    let v0: s6 = s6(p0: s2(p0: s1(p0: s0(p0: [[0.0]], p1: [[1.0], [2.0], [3.0]], p2: [[4.0], [5.0]]), p1: [[s0(p0: [[6.0]], p1: [[7.0], [8.0], [9.0]], p2: [[10.0], [11.0]])], [s0(p0: [[12.0]], p1: [[13.0], [14.0], [15.0]], p2: [[16.0], [17.0]])]], p2: [s0(p0: [[18.0]], p1: [[19.0], [20.0], [21.0]], p2: [[22.0], [23.0]])], p3: s0(p0: [[24.0]], p1: [[25.0], [26.0], [27.0]], p2: [[28.0], [29.0]])), p1: [s0(p0: [[30.0]], p1: [[31.0], [32.0], [33.0]], p2: [[34.0], [35.0]]), s0(p0: [[36.0]], p1: [[37.0], [38.0], [39.0]], p2: [[40.0], [41.0]]), s0(p0: [[42.0]], p1: [[43.0], [44.0], [45.0]], p2: [[46.0], [47.0]])]), p1: s3(p0: [s2(p0: s1(p0: s0(p0: [[48.0]], p1: [[49.0], [50.0], [51.0]], p2: [[52.0], [53.0]]), p1: [[s0(p0: [[54.0]], p1: [[55.0], [56.0], [57.0]], p2: [[58.0], [59.0]])], [s0(p0: [[60.0]], p1: [[61.0], [62.0], [63.0]], p2: [[64.0], [65.0]])]], p2: [s0(p0: [[66.0]], p1: [[67.0], [68.0], [69.0]], p2: [[70.0], [71.0]])], p3: s0(p0: [[72.0]], p1: [[73.0], [74.0], [75.0]], p2: [[76.0], [77.0]])), p1: [s0(p0: [[78.0]], p1: [[79.0], [80.0], [81.0]], p2: [[82.0], [83.0]]), s0(p0: [[84.0]], p1: [[85.0], [86.0], [87.0]], p2: [[88.0], [89.0]]), s0(p0: [[90.0]], p1: [[91.0], [92.0], [93.0]], p2: [[94.0], [95.0]])])], p1: s0(p0: [[96.0]], p1: [[97.0], [98.0], [99.0]], p2: [[100.0], [101.0]])))
    let v1: [s6] = [s6(p0: s2(p0: s1(p0: s0(p0: [[102.0]], p1: [[103.0], [104.0], [105.0]], p2: [[106.0], [107.0]]), p1: [[s0(p0: [[108.0]], p1: [[109.0], [110.0], [111.0]], p2: [[112.0], [113.0]])], [s0(p0: [[114.0]], p1: [[115.0], [116.0], [117.0]], p2: [[118.0], [119.0]])]], p2: [s0(p0: [[120.0]], p1: [[121.0], [122.0], [123.0]], p2: [[124.0], [125.0]])], p3: s0(p0: [[126.0]], p1: [[127.0], [128.0], [129.0]], p2: [[130.0], [131.0]])), p1: [s0(p0: [[132.0]], p1: [[133.0], [134.0], [135.0]], p2: [[136.0], [137.0]]), s0(p0: [[138.0]], p1: [[139.0], [140.0], [141.0]], p2: [[142.0], [143.0]]), s0(p0: [[144.0]], p1: [[145.0], [146.0], [147.0]], p2: [[148.0], [149.0]])]), p1: s3(p0: [s2(p0: s1(p0: s0(p0: [[150.0]], p1: [[151.0], [152.0], [153.0]], p2: [[154.0], [155.0]]), p1: [[s0(p0: [[156.0]], p1: [[157.0], [158.0], [159.0]], p2: [[160.0], [161.0]])], [s0(p0: [[162.0]], p1: [[163.0], [164.0], [165.0]], p2: [[166.0], [167.0]])]], p2: [s0(p0: [[168.0]], p1: [[169.0], [170.0], [171.0]], p2: [[172.0], [173.0]])], p3: s0(p0: [[174.0]], p1: [[175.0], [176.0], [177.0]], p2: [[178.0], [179.0]])), p1: [s0(p0: [[180.0]], p1: [[181.0], [182.0], [183.0]], p2: [[184.0], [185.0]]), s0(p0: [[186.0]], p1: [[187.0], [188.0], [189.0]], p2: [[190.0], [191.0]]), s0(p0: [[192.0]], p1: [[193.0], [194.0], [195.0]], p2: [[196.0], [197.0]])])], p1: s0(p0: [[198.0]], p1: [[199.0], [200.0], [201.0]], p2: [[202.0], [203.0]]))), s6(p0: s2(p0: s1(p0: s0(p0: [[204.0]], p1: [[205.0], [206.0], [207.0]], p2: [[208.0], [209.0]]), p1: [[s0(p0: [[210.0]], p1: [[211.0], [212.0], [213.0]], p2: [[214.0], [215.0]])], [s0(p0: [[216.0]], p1: [[217.0], [218.0], [219.0]], p2: [[220.0], [221.0]])]], p2: [s0(p0: [[222.0]], p1: [[223.0], [224.0], [225.0]], p2: [[226.0], [227.0]])], p3: s0(p0: [[228.0]], p1: [[229.0], [230.0], [231.0]], p2: [[232.0], [233.0]])), p1: [s0(p0: [[234.0]], p1: [[235.0], [236.0], [237.0]], p2: [[238.0], [239.0]]), s0(p0: [[240.0]], p1: [[241.0], [242.0], [243.0]], p2: [[244.0], [245.0]]), s0(p0: [[246.0]], p1: [[247.0], [248.0], [249.0]], p2: [[250.0], [251.0]])]), p1: s3(p0: [s2(p0: s1(p0: s0(p0: [[252.0]], p1: [[253.0], [254.0], [255.0]], p2: [[256.0], [257.0]]), p1: [[s0(p0: [[258.0]], p1: [[259.0], [260.0], [261.0]], p2: [[262.0], [263.0]])], [s0(p0: [[264.0]], p1: [[265.0], [266.0], [267.0]], p2: [[268.0], [269.0]])]], p2: [s0(p0: [[270.0]], p1: [[271.0], [272.0], [273.0]], p2: [[274.0], [275.0]])], p3: s0(p0: [[276.0]], p1: [[277.0], [278.0], [279.0]], p2: [[280.0], [281.0]])), p1: [s0(p0: [[282.0]], p1: [[283.0], [284.0], [285.0]], p2: [[286.0], [287.0]]), s0(p0: [[288.0]], p1: [[289.0], [290.0], [291.0]], p2: [[292.0], [293.0]]), s0(p0: [[294.0]], p1: [[295.0], [296.0], [297.0]], p2: [[298.0], [299.0]])])], p1: s0(p0: [[300.0]], p1: [[301.0], [302.0], [303.0]], p2: [[304.0], [305.0]]))), s6(p0: s2(p0: s1(p0: s0(p0: [[306.0]], p1: [[307.0], [308.0], [309.0]], p2: [[310.0], [311.0]]), p1: [[s0(p0: [[312.0]], p1: [[313.0], [314.0], [315.0]], p2: [[316.0], [317.0]])], [s0(p0: [[318.0]], p1: [[319.0], [320.0], [321.0]], p2: [[322.0], [323.0]])]], p2: [s0(p0: [[324.0]], p1: [[325.0], [326.0], [327.0]], p2: [[328.0], [329.0]])], p3: s0(p0: [[330.0]], p1: [[331.0], [332.0], [333.0]], p2: [[334.0], [335.0]])), p1: [s0(p0: [[336.0]], p1: [[337.0], [338.0], [339.0]], p2: [[340.0], [341.0]]), s0(p0: [[342.0]], p1: [[343.0], [344.0], [345.0]], p2: [[346.0], [347.0]]), s0(p0: [[348.0]], p1: [[349.0], [350.0], [351.0]], p2: [[352.0], [353.0]])]), p1: s3(p0: [s2(p0: s1(p0: s0(p0: [[354.0]], p1: [[355.0], [356.0], [357.0]], p2: [[358.0], [359.0]]), p1: [[s0(p0: [[360.0]], p1: [[361.0], [362.0], [363.0]], p2: [[364.0], [365.0]])], [s0(p0: [[366.0]], p1: [[367.0], [368.0], [369.0]], p2: [[370.0], [371.0]])]], p2: [s0(p0: [[372.0]], p1: [[373.0], [374.0], [375.0]], p2: [[376.0], [377.0]])], p3: s0(p0: [[378.0]], p1: [[379.0], [380.0], [381.0]], p2: [[382.0], [383.0]])), p1: [s0(p0: [[384.0]], p1: [[385.0], [386.0], [387.0]], p2: [[388.0], [389.0]]), s0(p0: [[390.0]], p1: [[391.0], [392.0], [393.0]], p2: [[394.0], [395.0]]), s0(p0: [[396.0]], p1: [[397.0], [398.0], [399.0]], p2: [[400.0], [401.0]])])], p1: s0(p0: [[402.0]], p1: [[403.0], [404.0], [405.0]], p2: [[406.0], [407.0]])))]
    let v2: [s2] = [s2(p0: s1(p0: s0(p0: [[408.0]], p1: [[409.0], [410.0], [411.0]], p2: [[412.0], [413.0]]), p1: [[s0(p0: [[414.0]], p1: [[415.0], [416.0], [417.0]], p2: [[418.0], [419.0]])], [s0(p0: [[420.0]], p1: [[421.0], [422.0], [423.0]], p2: [[424.0], [425.0]])]], p2: [s0(p0: [[426.0]], p1: [[427.0], [428.0], [429.0]], p2: [[430.0], [431.0]])], p3: s0(p0: [[432.0]], p1: [[433.0], [434.0], [435.0]], p2: [[436.0], [437.0]])), p1: [s0(p0: [[438.0]], p1: [[439.0], [440.0], [441.0]], p2: [[442.0], [443.0]]), s0(p0: [[444.0]], p1: [[445.0], [446.0], [447.0]], p2: [[448.0], [449.0]]), s0(p0: [[450.0]], p1: [[451.0], [452.0], [453.0]], p2: [[454.0], [455.0]])])]
    let v3: Double = 456.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 456.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
