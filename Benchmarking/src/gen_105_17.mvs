  let noinline_f0: ([[Float]], Float) -> Float = (v0: [[Float]], v1: Float) -> Float {
    var v6: Float = v1 in
    var v4: Float = v6 in
    let v10: [Float] = [v6, v1, v6, v4, v1, v1, v6] in
    v6 = v1 in
    var v17: [Float] = v10 in
    let v32: Float = v10[5] in
    let v42: Float = v4 * v32 in
    v17[1] = v42 in
    var v26: [Float] = v17 in
    let v97: Float = v26[3] in
    v26[4] = v1 in
    v97
  } in
  fun loop(i: Int, v0: [[Float]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0], [1.0], [2.0]] in
    let v1: Float = 3.0 in
    let initialResult: Float = 3.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()