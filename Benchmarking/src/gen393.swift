  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
  }
  struct s2 {
    var p0: [[s0]]
    var p1: [s1]
  }
  struct s3 {
    var p0: s0
    var p1: [s0]
  }
  struct s5 {
    var p0: [s3]
    var p1: s1
  }
  struct s7 {
    var p0: [s2]
    var p1: s2
  }
  struct s8 {
    var p0: s7
    var p1: [[s5]]
  }
  func f86(_ v0: Double) -> Double {
    var v6: Double = v0
    var v7: Double = v6
    var v1: Double = v6
    var v4: Double = v1
    var v8: Double = v7
    var v3: Double = v6
    var v9: Double = v0
    var v5: Double = v9
    var v2: Double = v3
    var v12: Double = v4
    var v13: Double = v8
    var v16: Double = v1
    var v10: Double = v6
    var v11: Double = v10
    var v24: Double = v12
    let v22: [Double] = [v12]
    var v14: [Double] = v22
    var v26: [Double] = v22
    v14[0] = v5
    let v29: Double = v26[0]
    var v33: Double = v2
    v26[0] = v13
    var v20: [Double] = v14
    let v21: Double = v26[0]
    let v38: [Double] = [v16, v3, v3, v11, v12]
    var v17: [Double] = v38
    v20[0] = v11
    v1 = v33
    v14[0] = v3
    var v37: [Double] = v38
    v17[1] = v24
    let v82: [[Double]] = [v17, v38, v17, v38, v38, v17, v37]
    var v45: [[Double]] = v82
    let v43: [[[Double]]] = [v45, v45, v82, v82, v82, v82, v45]
    var v84: [[[Double]]] = v43
    let v103: [[Double]] = v84[4]
    v84[5] = v82
    v17[4] = v21
    let v99: Double = v21 + v3
    let v48: Double = v26[0]
    let v77: [[Double]] = v43[2]
    let v134: [[Double]] = v84[4]
    let v73: Double = v38[1]
    let v75: Double = v20[0]
    var v208: [Double] = v20
    let v67: [Double] = v103[3]
    v37[2] = v29
    var v66: [Double] = v22
    let v104: Double = v67[2]
    let v86: Double = v66[0]
    let v190: [Double] = [v99, v104, v13, v73, v75, v9, v86]
    v45 = v77
    let v137: Double = v208[0]
    var v94: [Double] = v190
    v17[2] = v137
    v84[3] = v134
    var v170: [Double] = v94
    let v506: Double = v170[2]
    v208[0] = v48
    v6 = v75
    return v506
  }
  func f81(_ v0: Double) -> Double {
    let v1: Double = f86(v0)
    var v7: Double = v1
    let v4: [Double] = [v0, v0, v0, v0, v7]
    let v15: [[Double]] = [v4, v4, v4, v4, v4, v4, v4]
    let v10: [Double] = v15[6]
    let v11: Double = v10[2]
    return v11
  }
  @inline(never)
  func f0(_ v0: [s0], _ v1: [s8], _ v2: Double) -> Double {
    let v5: Double = f81(v2)
    let v6: Double = f81(v5)
    let v24: Double = f86(v6)
    let v27: Double = v24 - v24
    return v27
  }
  func benchmark() {
    let v0: [s0] = [s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0]], p2: [[4.0], [5.0], [6.0]]), s0(p0: [[7.0], [8.0], [9.0]], p1: [[10.0]], p2: [[11.0], [12.0], [13.0]])]
    let v1: [s8] = [s8(p0: s7(p0: [s2(p0: [[s0(p0: [[14.0], [15.0], [16.0]], p1: [[17.0]], p2: [[18.0], [19.0], [20.0]])], [s0(p0: [[21.0], [22.0], [23.0]], p1: [[24.0]], p2: [[25.0], [26.0], [27.0]])], [s0(p0: [[28.0], [29.0], [30.0]], p1: [[31.0]], p2: [[32.0], [33.0], [34.0]])]], p1: [s1(p0: s0(p0: [[35.0], [36.0], [37.0]], p1: [[38.0]], p2: [[39.0], [40.0], [41.0]]), p1: [s0(p0: [[42.0], [43.0], [44.0]], p1: [[45.0]], p2: [[46.0], [47.0], [48.0]]), s0(p0: [[49.0], [50.0], [51.0]], p1: [[52.0]], p2: [[53.0], [54.0], [55.0]]), s0(p0: [[56.0], [57.0], [58.0]], p1: [[59.0]], p2: [[60.0], [61.0], [62.0]])]), s1(p0: s0(p0: [[63.0], [64.0], [65.0]], p1: [[66.0]], p2: [[67.0], [68.0], [69.0]]), p1: [s0(p0: [[70.0], [71.0], [72.0]], p1: [[73.0]], p2: [[74.0], [75.0], [76.0]]), s0(p0: [[77.0], [78.0], [79.0]], p1: [[80.0]], p2: [[81.0], [82.0], [83.0]]), s0(p0: [[84.0], [85.0], [86.0]], p1: [[87.0]], p2: [[88.0], [89.0], [90.0]])])]), s2(p0: [[s0(p0: [[91.0], [92.0], [93.0]], p1: [[94.0]], p2: [[95.0], [96.0], [97.0]])], [s0(p0: [[98.0], [99.0], [100.0]], p1: [[101.0]], p2: [[102.0], [103.0], [104.0]])], [s0(p0: [[105.0], [106.0], [107.0]], p1: [[108.0]], p2: [[109.0], [110.0], [111.0]])]], p1: [s1(p0: s0(p0: [[112.0], [113.0], [114.0]], p1: [[115.0]], p2: [[116.0], [117.0], [118.0]]), p1: [s0(p0: [[119.0], [120.0], [121.0]], p1: [[122.0]], p2: [[123.0], [124.0], [125.0]]), s0(p0: [[126.0], [127.0], [128.0]], p1: [[129.0]], p2: [[130.0], [131.0], [132.0]]), s0(p0: [[133.0], [134.0], [135.0]], p1: [[136.0]], p2: [[137.0], [138.0], [139.0]])]), s1(p0: s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0]], p2: [[144.0], [145.0], [146.0]]), p1: [s0(p0: [[147.0], [148.0], [149.0]], p1: [[150.0]], p2: [[151.0], [152.0], [153.0]]), s0(p0: [[154.0], [155.0], [156.0]], p1: [[157.0]], p2: [[158.0], [159.0], [160.0]]), s0(p0: [[161.0], [162.0], [163.0]], p1: [[164.0]], p2: [[165.0], [166.0], [167.0]])])]), s2(p0: [[s0(p0: [[168.0], [169.0], [170.0]], p1: [[171.0]], p2: [[172.0], [173.0], [174.0]])], [s0(p0: [[175.0], [176.0], [177.0]], p1: [[178.0]], p2: [[179.0], [180.0], [181.0]])], [s0(p0: [[182.0], [183.0], [184.0]], p1: [[185.0]], p2: [[186.0], [187.0], [188.0]])]], p1: [s1(p0: s0(p0: [[189.0], [190.0], [191.0]], p1: [[192.0]], p2: [[193.0], [194.0], [195.0]]), p1: [s0(p0: [[196.0], [197.0], [198.0]], p1: [[199.0]], p2: [[200.0], [201.0], [202.0]]), s0(p0: [[203.0], [204.0], [205.0]], p1: [[206.0]], p2: [[207.0], [208.0], [209.0]]), s0(p0: [[210.0], [211.0], [212.0]], p1: [[213.0]], p2: [[214.0], [215.0], [216.0]])]), s1(p0: s0(p0: [[217.0], [218.0], [219.0]], p1: [[220.0]], p2: [[221.0], [222.0], [223.0]]), p1: [s0(p0: [[224.0], [225.0], [226.0]], p1: [[227.0]], p2: [[228.0], [229.0], [230.0]]), s0(p0: [[231.0], [232.0], [233.0]], p1: [[234.0]], p2: [[235.0], [236.0], [237.0]]), s0(p0: [[238.0], [239.0], [240.0]], p1: [[241.0]], p2: [[242.0], [243.0], [244.0]])])])], p1: s2(p0: [[s0(p0: [[245.0], [246.0], [247.0]], p1: [[248.0]], p2: [[249.0], [250.0], [251.0]])], [s0(p0: [[252.0], [253.0], [254.0]], p1: [[255.0]], p2: [[256.0], [257.0], [258.0]])], [s0(p0: [[259.0], [260.0], [261.0]], p1: [[262.0]], p2: [[263.0], [264.0], [265.0]])]], p1: [s1(p0: s0(p0: [[266.0], [267.0], [268.0]], p1: [[269.0]], p2: [[270.0], [271.0], [272.0]]), p1: [s0(p0: [[273.0], [274.0], [275.0]], p1: [[276.0]], p2: [[277.0], [278.0], [279.0]]), s0(p0: [[280.0], [281.0], [282.0]], p1: [[283.0]], p2: [[284.0], [285.0], [286.0]]), s0(p0: [[287.0], [288.0], [289.0]], p1: [[290.0]], p2: [[291.0], [292.0], [293.0]])]), s1(p0: s0(p0: [[294.0], [295.0], [296.0]], p1: [[297.0]], p2: [[298.0], [299.0], [300.0]]), p1: [s0(p0: [[301.0], [302.0], [303.0]], p1: [[304.0]], p2: [[305.0], [306.0], [307.0]]), s0(p0: [[308.0], [309.0], [310.0]], p1: [[311.0]], p2: [[312.0], [313.0], [314.0]]), s0(p0: [[315.0], [316.0], [317.0]], p1: [[318.0]], p2: [[319.0], [320.0], [321.0]])])])), p1: [[s5(p0: [s3(p0: s0(p0: [[322.0], [323.0], [324.0]], p1: [[325.0]], p2: [[326.0], [327.0], [328.0]]), p1: [s0(p0: [[329.0], [330.0], [331.0]], p1: [[332.0]], p2: [[333.0], [334.0], [335.0]]), s0(p0: [[336.0], [337.0], [338.0]], p1: [[339.0]], p2: [[340.0], [341.0], [342.0]]), s0(p0: [[343.0], [344.0], [345.0]], p1: [[346.0]], p2: [[347.0], [348.0], [349.0]])])], p1: s1(p0: s0(p0: [[350.0], [351.0], [352.0]], p1: [[353.0]], p2: [[354.0], [355.0], [356.0]]), p1: [s0(p0: [[357.0], [358.0], [359.0]], p1: [[360.0]], p2: [[361.0], [362.0], [363.0]]), s0(p0: [[364.0], [365.0], [366.0]], p1: [[367.0]], p2: [[368.0], [369.0], [370.0]]), s0(p0: [[371.0], [372.0], [373.0]], p1: [[374.0]], p2: [[375.0], [376.0], [377.0]])]))], [s5(p0: [s3(p0: s0(p0: [[378.0], [379.0], [380.0]], p1: [[381.0]], p2: [[382.0], [383.0], [384.0]]), p1: [s0(p0: [[385.0], [386.0], [387.0]], p1: [[388.0]], p2: [[389.0], [390.0], [391.0]]), s0(p0: [[392.0], [393.0], [394.0]], p1: [[395.0]], p2: [[396.0], [397.0], [398.0]]), s0(p0: [[399.0], [400.0], [401.0]], p1: [[402.0]], p2: [[403.0], [404.0], [405.0]])])], p1: s1(p0: s0(p0: [[406.0], [407.0], [408.0]], p1: [[409.0]], p2: [[410.0], [411.0], [412.0]]), p1: [s0(p0: [[413.0], [414.0], [415.0]], p1: [[416.0]], p2: [[417.0], [418.0], [419.0]]), s0(p0: [[420.0], [421.0], [422.0]], p1: [[423.0]], p2: [[424.0], [425.0], [426.0]]), s0(p0: [[427.0], [428.0], [429.0]], p1: [[430.0]], p2: [[431.0], [432.0], [433.0]])]))], [s5(p0: [s3(p0: s0(p0: [[434.0], [435.0], [436.0]], p1: [[437.0]], p2: [[438.0], [439.0], [440.0]]), p1: [s0(p0: [[441.0], [442.0], [443.0]], p1: [[444.0]], p2: [[445.0], [446.0], [447.0]]), s0(p0: [[448.0], [449.0], [450.0]], p1: [[451.0]], p2: [[452.0], [453.0], [454.0]]), s0(p0: [[455.0], [456.0], [457.0]], p1: [[458.0]], p2: [[459.0], [460.0], [461.0]])])], p1: s1(p0: s0(p0: [[462.0], [463.0], [464.0]], p1: [[465.0]], p2: [[466.0], [467.0], [468.0]]), p1: [s0(p0: [[469.0], [470.0], [471.0]], p1: [[472.0]], p2: [[473.0], [474.0], [475.0]]), s0(p0: [[476.0], [477.0], [478.0]], p1: [[479.0]], p2: [[480.0], [481.0], [482.0]]), s0(p0: [[483.0], [484.0], [485.0]], p1: [[486.0]], p2: [[487.0], [488.0], [489.0]])]))]]), s8(p0: s7(p0: [s2(p0: [[s0(p0: [[490.0], [491.0], [492.0]], p1: [[493.0]], p2: [[494.0], [495.0], [496.0]])], [s0(p0: [[497.0], [498.0], [499.0]], p1: [[500.0]], p2: [[501.0], [502.0], [503.0]])], [s0(p0: [[504.0], [505.0], [506.0]], p1: [[507.0]], p2: [[508.0], [509.0], [510.0]])]], p1: [s1(p0: s0(p0: [[511.0], [512.0], [513.0]], p1: [[514.0]], p2: [[515.0], [516.0], [517.0]]), p1: [s0(p0: [[518.0], [519.0], [520.0]], p1: [[521.0]], p2: [[522.0], [523.0], [524.0]]), s0(p0: [[525.0], [526.0], [527.0]], p1: [[528.0]], p2: [[529.0], [530.0], [531.0]]), s0(p0: [[532.0], [533.0], [534.0]], p1: [[535.0]], p2: [[536.0], [537.0], [538.0]])]), s1(p0: s0(p0: [[539.0], [540.0], [541.0]], p1: [[542.0]], p2: [[543.0], [544.0], [545.0]]), p1: [s0(p0: [[546.0], [547.0], [548.0]], p1: [[549.0]], p2: [[550.0], [551.0], [552.0]]), s0(p0: [[553.0], [554.0], [555.0]], p1: [[556.0]], p2: [[557.0], [558.0], [559.0]]), s0(p0: [[560.0], [561.0], [562.0]], p1: [[563.0]], p2: [[564.0], [565.0], [566.0]])])]), s2(p0: [[s0(p0: [[567.0], [568.0], [569.0]], p1: [[570.0]], p2: [[571.0], [572.0], [573.0]])], [s0(p0: [[574.0], [575.0], [576.0]], p1: [[577.0]], p2: [[578.0], [579.0], [580.0]])], [s0(p0: [[581.0], [582.0], [583.0]], p1: [[584.0]], p2: [[585.0], [586.0], [587.0]])]], p1: [s1(p0: s0(p0: [[588.0], [589.0], [590.0]], p1: [[591.0]], p2: [[592.0], [593.0], [594.0]]), p1: [s0(p0: [[595.0], [596.0], [597.0]], p1: [[598.0]], p2: [[599.0], [600.0], [601.0]]), s0(p0: [[602.0], [603.0], [604.0]], p1: [[605.0]], p2: [[606.0], [607.0], [608.0]]), s0(p0: [[609.0], [610.0], [611.0]], p1: [[612.0]], p2: [[613.0], [614.0], [615.0]])]), s1(p0: s0(p0: [[616.0], [617.0], [618.0]], p1: [[619.0]], p2: [[620.0], [621.0], [622.0]]), p1: [s0(p0: [[623.0], [624.0], [625.0]], p1: [[626.0]], p2: [[627.0], [628.0], [629.0]]), s0(p0: [[630.0], [631.0], [632.0]], p1: [[633.0]], p2: [[634.0], [635.0], [636.0]]), s0(p0: [[637.0], [638.0], [639.0]], p1: [[640.0]], p2: [[641.0], [642.0], [643.0]])])]), s2(p0: [[s0(p0: [[644.0], [645.0], [646.0]], p1: [[647.0]], p2: [[648.0], [649.0], [650.0]])], [s0(p0: [[651.0], [652.0], [653.0]], p1: [[654.0]], p2: [[655.0], [656.0], [657.0]])], [s0(p0: [[658.0], [659.0], [660.0]], p1: [[661.0]], p2: [[662.0], [663.0], [664.0]])]], p1: [s1(p0: s0(p0: [[665.0], [666.0], [667.0]], p1: [[668.0]], p2: [[669.0], [670.0], [671.0]]), p1: [s0(p0: [[672.0], [673.0], [674.0]], p1: [[675.0]], p2: [[676.0], [677.0], [678.0]]), s0(p0: [[679.0], [680.0], [681.0]], p1: [[682.0]], p2: [[683.0], [684.0], [685.0]]), s0(p0: [[686.0], [687.0], [688.0]], p1: [[689.0]], p2: [[690.0], [691.0], [692.0]])]), s1(p0: s0(p0: [[693.0], [694.0], [695.0]], p1: [[696.0]], p2: [[697.0], [698.0], [699.0]]), p1: [s0(p0: [[700.0], [701.0], [702.0]], p1: [[703.0]], p2: [[704.0], [705.0], [706.0]]), s0(p0: [[707.0], [708.0], [709.0]], p1: [[710.0]], p2: [[711.0], [712.0], [713.0]]), s0(p0: [[714.0], [715.0], [716.0]], p1: [[717.0]], p2: [[718.0], [719.0], [720.0]])])])], p1: s2(p0: [[s0(p0: [[721.0], [722.0], [723.0]], p1: [[724.0]], p2: [[725.0], [726.0], [727.0]])], [s0(p0: [[728.0], [729.0], [730.0]], p1: [[731.0]], p2: [[732.0], [733.0], [734.0]])], [s0(p0: [[735.0], [736.0], [737.0]], p1: [[738.0]], p2: [[739.0], [740.0], [741.0]])]], p1: [s1(p0: s0(p0: [[742.0], [743.0], [744.0]], p1: [[745.0]], p2: [[746.0], [747.0], [748.0]]), p1: [s0(p0: [[749.0], [750.0], [751.0]], p1: [[752.0]], p2: [[753.0], [754.0], [755.0]]), s0(p0: [[756.0], [757.0], [758.0]], p1: [[759.0]], p2: [[760.0], [761.0], [762.0]]), s0(p0: [[763.0], [764.0], [765.0]], p1: [[766.0]], p2: [[767.0], [768.0], [769.0]])]), s1(p0: s0(p0: [[770.0], [771.0], [772.0]], p1: [[773.0]], p2: [[774.0], [775.0], [776.0]]), p1: [s0(p0: [[777.0], [778.0], [779.0]], p1: [[780.0]], p2: [[781.0], [782.0], [783.0]]), s0(p0: [[784.0], [785.0], [786.0]], p1: [[787.0]], p2: [[788.0], [789.0], [790.0]]), s0(p0: [[791.0], [792.0], [793.0]], p1: [[794.0]], p2: [[795.0], [796.0], [797.0]])])])), p1: [[s5(p0: [s3(p0: s0(p0: [[798.0], [799.0], [800.0]], p1: [[801.0]], p2: [[802.0], [803.0], [804.0]]), p1: [s0(p0: [[805.0], [806.0], [807.0]], p1: [[808.0]], p2: [[809.0], [810.0], [811.0]]), s0(p0: [[812.0], [813.0], [814.0]], p1: [[815.0]], p2: [[816.0], [817.0], [818.0]]), s0(p0: [[819.0], [820.0], [821.0]], p1: [[822.0]], p2: [[823.0], [824.0], [825.0]])])], p1: s1(p0: s0(p0: [[826.0], [827.0], [828.0]], p1: [[829.0]], p2: [[830.0], [831.0], [832.0]]), p1: [s0(p0: [[833.0], [834.0], [835.0]], p1: [[836.0]], p2: [[837.0], [838.0], [839.0]]), s0(p0: [[840.0], [841.0], [842.0]], p1: [[843.0]], p2: [[844.0], [845.0], [846.0]]), s0(p0: [[847.0], [848.0], [849.0]], p1: [[850.0]], p2: [[851.0], [852.0], [853.0]])]))], [s5(p0: [s3(p0: s0(p0: [[854.0], [855.0], [856.0]], p1: [[857.0]], p2: [[858.0], [859.0], [860.0]]), p1: [s0(p0: [[861.0], [862.0], [863.0]], p1: [[864.0]], p2: [[865.0], [866.0], [867.0]]), s0(p0: [[868.0], [869.0], [870.0]], p1: [[871.0]], p2: [[872.0], [873.0], [874.0]]), s0(p0: [[875.0], [876.0], [877.0]], p1: [[878.0]], p2: [[879.0], [880.0], [881.0]])])], p1: s1(p0: s0(p0: [[882.0], [883.0], [884.0]], p1: [[885.0]], p2: [[886.0], [887.0], [888.0]]), p1: [s0(p0: [[889.0], [890.0], [891.0]], p1: [[892.0]], p2: [[893.0], [894.0], [895.0]]), s0(p0: [[896.0], [897.0], [898.0]], p1: [[899.0]], p2: [[900.0], [901.0], [902.0]]), s0(p0: [[903.0], [904.0], [905.0]], p1: [[906.0]], p2: [[907.0], [908.0], [909.0]])]))], [s5(p0: [s3(p0: s0(p0: [[910.0], [911.0], [912.0]], p1: [[913.0]], p2: [[914.0], [915.0], [916.0]]), p1: [s0(p0: [[917.0], [918.0], [919.0]], p1: [[920.0]], p2: [[921.0], [922.0], [923.0]]), s0(p0: [[924.0], [925.0], [926.0]], p1: [[927.0]], p2: [[928.0], [929.0], [930.0]]), s0(p0: [[931.0], [932.0], [933.0]], p1: [[934.0]], p2: [[935.0], [936.0], [937.0]])])], p1: s1(p0: s0(p0: [[938.0], [939.0], [940.0]], p1: [[941.0]], p2: [[942.0], [943.0], [944.0]]), p1: [s0(p0: [[945.0], [946.0], [947.0]], p1: [[948.0]], p2: [[949.0], [950.0], [951.0]]), s0(p0: [[952.0], [953.0], [954.0]], p1: [[955.0]], p2: [[956.0], [957.0], [958.0]]), s0(p0: [[959.0], [960.0], [961.0]], p1: [[962.0]], p2: [[963.0], [964.0], [965.0]])]))]])]
    let v2: Double = 966.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 966.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
