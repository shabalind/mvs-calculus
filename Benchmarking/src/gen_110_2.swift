  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: Double
    var p2: [[Double]]
    var p3: [[Double]]
  }
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  }
  struct s2 {
    var p0: [s1]
    var p1: [s1]
    var p2: s0
    var p3: s1
  }
  struct s4 {
    var p0: [s0]
    var p1: [s2]
  }
  func f22(_ v0: s0) -> s0 {
    var v3: s0 = v0
    let v2: [[Double]] = v0.p3
    var v4: s0 = v3
    let v7: [[Double]] = v0.p0
    let v8: [Double] = v2[1]
    let v6: [s0] = [v4, v4, v4, v0, v0, v3]
    var v5: s0 = v0
    var v11: [Double] = v8
    let v1: s0 = v6[2]
    let v9: Double = v11[0]
    var v10: [[Double]] = v2
    let v14: Double = v9 / v9
    let v28: [[Double]] = v1.p3
    let v17: [Double] = v28[2]
    let v13: [[Double]] = v1.p0
    let v22: s0 = v6[0]
    v10[1] = v17
    let v29: Double = v17[0]
    v3.p0 = v7
    let v19: s0 = v6[4]
    v4.p0 = v13
    v4.p3 = v10
    v11[0] = v9
    var v15: Double = v29
    let v40: [[Double]] = v5.p0
    v11[0] = v15
    v3.p0 = v13
    v3.p0 = v13
    let v47: [[Double]] = v0.p0
    v4.p1 = v14
    v5.p3 = v28
    v3.p2 = v47
    let v49: [[Double]] = v19.p2
    v3.p2 = v49
    v4.p0 = v40
    v11[0] = v15
    var v89: s0 = v22
    return v89
  }
  @inline(never)
  func f0(_ v0: [s2], _ v1: s0, _ v2: s4, _ v3: Double) -> Double {
    let v4: s0 = f22(v1)
    let v18: [[Double]] = v4.p2
    let v38: [Double] = v18[1]
    let v66: Double = v38[0]
    return v66
  }
  func benchmark() {
    let v0: [s2] = [s2(p0: [s1(p0: [[s0(p0: [[0.0], [1.0]], p1: 2.0, p2: [[3.0], [4.0]], p3: [[5.0], [6.0], [7.0]])], [s0(p0: [[8.0], [9.0]], p1: 10.0, p2: [[11.0], [12.0]], p3: [[13.0], [14.0], [15.0]])]], p1: s0(p0: [[16.0], [17.0]], p1: 18.0, p2: [[19.0], [20.0]], p3: [[21.0], [22.0], [23.0]]))], p1: [s1(p0: [[s0(p0: [[24.0], [25.0]], p1: 26.0, p2: [[27.0], [28.0]], p3: [[29.0], [30.0], [31.0]])], [s0(p0: [[32.0], [33.0]], p1: 34.0, p2: [[35.0], [36.0]], p3: [[37.0], [38.0], [39.0]])]], p1: s0(p0: [[40.0], [41.0]], p1: 42.0, p2: [[43.0], [44.0]], p3: [[45.0], [46.0], [47.0]])), s1(p0: [[s0(p0: [[48.0], [49.0]], p1: 50.0, p2: [[51.0], [52.0]], p3: [[53.0], [54.0], [55.0]])], [s0(p0: [[56.0], [57.0]], p1: 58.0, p2: [[59.0], [60.0]], p3: [[61.0], [62.0], [63.0]])]], p1: s0(p0: [[64.0], [65.0]], p1: 66.0, p2: [[67.0], [68.0]], p3: [[69.0], [70.0], [71.0]])), s1(p0: [[s0(p0: [[72.0], [73.0]], p1: 74.0, p2: [[75.0], [76.0]], p3: [[77.0], [78.0], [79.0]])], [s0(p0: [[80.0], [81.0]], p1: 82.0, p2: [[83.0], [84.0]], p3: [[85.0], [86.0], [87.0]])]], p1: s0(p0: [[88.0], [89.0]], p1: 90.0, p2: [[91.0], [92.0]], p3: [[93.0], [94.0], [95.0]]))], p2: s0(p0: [[96.0], [97.0]], p1: 98.0, p2: [[99.0], [100.0]], p3: [[101.0], [102.0], [103.0]]), p3: s1(p0: [[s0(p0: [[104.0], [105.0]], p1: 106.0, p2: [[107.0], [108.0]], p3: [[109.0], [110.0], [111.0]])], [s0(p0: [[112.0], [113.0]], p1: 114.0, p2: [[115.0], [116.0]], p3: [[117.0], [118.0], [119.0]])]], p1: s0(p0: [[120.0], [121.0]], p1: 122.0, p2: [[123.0], [124.0]], p3: [[125.0], [126.0], [127.0]])))]
    let v1: s0 = s0(p0: [[128.0], [129.0]], p1: 130.0, p2: [[131.0], [132.0]], p3: [[133.0], [134.0], [135.0]])
    let v2: s4 = s4(p0: [s0(p0: [[136.0], [137.0]], p1: 138.0, p2: [[139.0], [140.0]], p3: [[141.0], [142.0], [143.0]]), s0(p0: [[144.0], [145.0]], p1: 146.0, p2: [[147.0], [148.0]], p3: [[149.0], [150.0], [151.0]]), s0(p0: [[152.0], [153.0]], p1: 154.0, p2: [[155.0], [156.0]], p3: [[157.0], [158.0], [159.0]])], p1: [s2(p0: [s1(p0: [[s0(p0: [[160.0], [161.0]], p1: 162.0, p2: [[163.0], [164.0]], p3: [[165.0], [166.0], [167.0]])], [s0(p0: [[168.0], [169.0]], p1: 170.0, p2: [[171.0], [172.0]], p3: [[173.0], [174.0], [175.0]])]], p1: s0(p0: [[176.0], [177.0]], p1: 178.0, p2: [[179.0], [180.0]], p3: [[181.0], [182.0], [183.0]]))], p1: [s1(p0: [[s0(p0: [[184.0], [185.0]], p1: 186.0, p2: [[187.0], [188.0]], p3: [[189.0], [190.0], [191.0]])], [s0(p0: [[192.0], [193.0]], p1: 194.0, p2: [[195.0], [196.0]], p3: [[197.0], [198.0], [199.0]])]], p1: s0(p0: [[200.0], [201.0]], p1: 202.0, p2: [[203.0], [204.0]], p3: [[205.0], [206.0], [207.0]])), s1(p0: [[s0(p0: [[208.0], [209.0]], p1: 210.0, p2: [[211.0], [212.0]], p3: [[213.0], [214.0], [215.0]])], [s0(p0: [[216.0], [217.0]], p1: 218.0, p2: [[219.0], [220.0]], p3: [[221.0], [222.0], [223.0]])]], p1: s0(p0: [[224.0], [225.0]], p1: 226.0, p2: [[227.0], [228.0]], p3: [[229.0], [230.0], [231.0]])), s1(p0: [[s0(p0: [[232.0], [233.0]], p1: 234.0, p2: [[235.0], [236.0]], p3: [[237.0], [238.0], [239.0]])], [s0(p0: [[240.0], [241.0]], p1: 242.0, p2: [[243.0], [244.0]], p3: [[245.0], [246.0], [247.0]])]], p1: s0(p0: [[248.0], [249.0]], p1: 250.0, p2: [[251.0], [252.0]], p3: [[253.0], [254.0], [255.0]]))], p2: s0(p0: [[256.0], [257.0]], p1: 258.0, p2: [[259.0], [260.0]], p3: [[261.0], [262.0], [263.0]]), p3: s1(p0: [[s0(p0: [[264.0], [265.0]], p1: 266.0, p2: [[267.0], [268.0]], p3: [[269.0], [270.0], [271.0]])], [s0(p0: [[272.0], [273.0]], p1: 274.0, p2: [[275.0], [276.0]], p3: [[277.0], [278.0], [279.0]])]], p1: s0(p0: [[280.0], [281.0]], p1: 282.0, p2: [[283.0], [284.0]], p3: [[285.0], [286.0], [287.0]])))])
    let v3: Double = 288.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 288.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
