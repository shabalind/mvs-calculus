  let f1: (Float) -> Float = (v0: Float) -> Float {
    var v5: Float = v0 in
    var v3: Float = v5 in
    var v6: Float = v3 in
    let v9: Float = v6 * v0 in
    var v1: Float = v3 in
    var v16: Float = v6 in
    let v2: Float = v5 + v6 in
    var v8: Float = v9 in
    let v21: [Float] = [v9, v1, v2] in
    let v11: Float = v21[2] in
    var v17: [Float] = v21 in
    var v12: Float = v11 in
    let v15: Float = v21[1] in
    var v22: Float = v6 in
    v8 = v9 in
    v17[0] = v22 in
    let v43: Float = v21[0] in
    var v18: [Float] = v21 in
    var v28: [Float] = v18 in
    var v37: Float = v1 in
    var v42: [Float] = v28 in
    let v32: Float = v42[1] in
    let v35: Float = v18[1] in
    var v56: [Float] = v17 in
    v28[2] = v35 in
    var v23: [Float] = v21 in
    v42[0] = v15 in
    v18[0] = v37 in
    let v38: [[Float]] = [v56, v17, v17, v42, v28, v42] in
    let v34: [Float] = v38[1] in
    v28[2] = v1 in
    var v48: Float = v8 in
    v42[2] = v2 in
    let v40: Float = v34[1] in
    v28[0] = v12 in
    v28[0] = v16 in
    let v67: Float = v23[0] in
    v42[0] = v32 in
    let v110: [Float] = [v35, v40, v15, v48, v67, v67, v48] in
    v18[1] = v43 in
    var v83: [Float] = v110 in
    let v73: Float = v83[0] in
    v42[2] = v40 in
    v56[1] = v67 in
    v73
  } in
  let noinline_f0: ([[Float]], Float) -> Float = (v0: [[Float]], v1: Float) -> Float {
    var v3: Float = v1 in
    var v2: [[Float]] = v0 in
    let v9: [Float] = v2[0] in
    let v7: Float = v9[0] in
    let v11: [Float] = v0[2] in
    var v20: Float = v3 in
    var v6: Float = v7 in
    v2[0] = v11 in
    let v18: Float = v9[0] in
    v2[1] = v9 in
    var v28: [Float] = v9 in
    let v29: Float = v28[0] in
    let v16: Float = f1(v20) in
    v28[0] = v3 in
    v2[1] = v9 in
    v28[0] = v6 in
    v28[0] = v18 in
    let v78: Float = v29 / v16 in
    v78
  } in
  fun loop(i: Int, v0: [[Float]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[Float]] = [[0.0], [1.0], [2.0]] in
    let v1: Float = 3.0 in
    let initialResult: Float = 3.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()