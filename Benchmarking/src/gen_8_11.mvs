  struct s0 {
    var p0: [[Float]]
    var p1: [Float]
    var p2: [[Float]]
    var p3: [[Float]]
    var p4: [[Float]]
  } in
  let noinline_f0: (s0, Float) -> Float = (v0: s0, v1: Float) -> Float {
    let v8: [[Float]] = v0.p0 in
    let v14: [Float] = v8[0] in
    let v10: Float = v1 * v1 in
    var v16: [Float] = v14 in
    v16[0] = v1 in
    let v17: Float = v16[0] in
    let v38: Float = v14[0] in
    v16[0] = v38 in
    let v122: Float = v10 * v17 in
    let v91: Float = v1 + v122 in
    v91
  } in
  fun loop(i: Int, v0: s0, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([[0.0], [1.0], [2.0]], [3.0, 4.0], [[5.0], [6.0], [7.0]], [[8.0], [9.0]], [[10.0]]) in
    let v1: Float = 11.0 in
    let initialResult: Float = 11.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()