  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  let noinline_f0: ([[s1]], s0, Float) -> Float = (v0: [[s1]], v1: s0, v2: Float) -> Float {
    let v7: [s1] = v0[0] in
    let v4: s1 = v7[0] in
    let v12: [s0] = v4.p0 in
    let v20: s1 = s1(v12, v1) in
    let v29: s0 = v20.p1 in
    let v16: [[Float]] = v29.p1 in
    let v19: [Float] = v16[2] in
    let v71: [Float] = v16[0] in
    let v75: [[Float]] = [v71, v19] in
    let v82: [Float] = v75[0] in
    let v105: Float = v82[0] in
    v105
  } in
  fun loop(i: Int, v0: [[s1]], v1: s0, v2: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2) in
      loop(i + 1, v0, v1, v2, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s1]] = [[s1([s0([[0.0]], [[1.0], [2.0], [3.0]]), s0([[4.0]], [[5.0], [6.0], [7.0]])], s0([[8.0]], [[9.0], [10.0], [11.0]]))], [s1([s0([[12.0]], [[13.0], [14.0], [15.0]]), s0([[16.0]], [[17.0], [18.0], [19.0]])], s0([[20.0]], [[21.0], [22.0], [23.0]]))], [s1([s0([[24.0]], [[25.0], [26.0], [27.0]]), s0([[28.0]], [[29.0], [30.0], [31.0]])], s0([[32.0]], [[33.0], [34.0], [35.0]]))]] in
    let v1: s0 = s0([[36.0]], [[37.0], [38.0], [39.0]]) in
    let v2: Float = 40.0 in
    let initialResult: Float = 40.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()