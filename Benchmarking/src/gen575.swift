  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
  }
  struct s1 {
    var p0: s0
    var p1: [s0]
    var p2: [s0]
  }
  struct s2 {
    var p0: [s0]
    var p1: s0
  }
  struct s3 {
    var p0: [[s2]]
    var p1: s1
  }
  struct s4 {
    var p0: s2
    var p1: s3
  }
  struct s5 {
    var p0: [s3]
    var p1: [[s3]]
  }
  struct s6 {
    var p0: s2
    var p1: s2
  }
  func f3(_ v0: Double) -> Double {
    var v4: Double = v0
    var v7: Double = v0
    var v3: Double = v0
    v4 = v7
    v4 = v0
    var v8: Double = v7
    var v2: Double = v3
    var v14: Double = v8
    v7 = v4
    var v12: Double = v14
    var v11: Double = v14
    let v28: [Double] = [v3, v0, v12, v8, v4]
    v3 = v11
    let v15: Double = v28[2]
    var v16: [Double] = v28
    v16[4] = v15
    var v26: Double = v3
    v16[2] = v2
    let v30: Double = v28[0]
    v16[0] = v30
    v16[2] = v26
    var v22: [Double] = v16
    let v23: Double = v22[2]
    return v23
  }
  @inline(never)
  func f0(_ v0: [[s6]], _ v1: [[s4]], _ v2: s1, _ v3: s5, _ v4: Double, _ v5: s0, _ v6: [s0]) -> Double {
    var v12: Double = v4
    let v25: Double = f3(v12)
    let v43: Double = f3(v25)
    let v131: Double = v43 + v4
    return v131
  }
  func benchmark() {
    let v0: [[s6]] = [[s6(p0: s2(p0: [s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0]]), s0(p0: [[4.0], [5.0], [6.0]], p1: [[7.0]])], p1: s0(p0: [[8.0], [9.0], [10.0]], p1: [[11.0]])), p1: s2(p0: [s0(p0: [[12.0], [13.0], [14.0]], p1: [[15.0]]), s0(p0: [[16.0], [17.0], [18.0]], p1: [[19.0]])], p1: s0(p0: [[20.0], [21.0], [22.0]], p1: [[23.0]])))], [s6(p0: s2(p0: [s0(p0: [[24.0], [25.0], [26.0]], p1: [[27.0]]), s0(p0: [[28.0], [29.0], [30.0]], p1: [[31.0]])], p1: s0(p0: [[32.0], [33.0], [34.0]], p1: [[35.0]])), p1: s2(p0: [s0(p0: [[36.0], [37.0], [38.0]], p1: [[39.0]]), s0(p0: [[40.0], [41.0], [42.0]], p1: [[43.0]])], p1: s0(p0: [[44.0], [45.0], [46.0]], p1: [[47.0]])))]]
    let v1: [[s4]] = [[s4(p0: s2(p0: [s0(p0: [[48.0], [49.0], [50.0]], p1: [[51.0]]), s0(p0: [[52.0], [53.0], [54.0]], p1: [[55.0]])], p1: s0(p0: [[56.0], [57.0], [58.0]], p1: [[59.0]])), p1: s3(p0: [[s2(p0: [s0(p0: [[60.0], [61.0], [62.0]], p1: [[63.0]]), s0(p0: [[64.0], [65.0], [66.0]], p1: [[67.0]])], p1: s0(p0: [[68.0], [69.0], [70.0]], p1: [[71.0]]))], [s2(p0: [s0(p0: [[72.0], [73.0], [74.0]], p1: [[75.0]]), s0(p0: [[76.0], [77.0], [78.0]], p1: [[79.0]])], p1: s0(p0: [[80.0], [81.0], [82.0]], p1: [[83.0]]))], [s2(p0: [s0(p0: [[84.0], [85.0], [86.0]], p1: [[87.0]]), s0(p0: [[88.0], [89.0], [90.0]], p1: [[91.0]])], p1: s0(p0: [[92.0], [93.0], [94.0]], p1: [[95.0]]))]], p1: s1(p0: s0(p0: [[96.0], [97.0], [98.0]], p1: [[99.0]]), p1: [s0(p0: [[100.0], [101.0], [102.0]], p1: [[103.0]])], p2: [s0(p0: [[104.0], [105.0], [106.0]], p1: [[107.0]]), s0(p0: [[108.0], [109.0], [110.0]], p1: [[111.0]]), s0(p0: [[112.0], [113.0], [114.0]], p1: [[115.0]])])))], [s4(p0: s2(p0: [s0(p0: [[116.0], [117.0], [118.0]], p1: [[119.0]]), s0(p0: [[120.0], [121.0], [122.0]], p1: [[123.0]])], p1: s0(p0: [[124.0], [125.0], [126.0]], p1: [[127.0]])), p1: s3(p0: [[s2(p0: [s0(p0: [[128.0], [129.0], [130.0]], p1: [[131.0]]), s0(p0: [[132.0], [133.0], [134.0]], p1: [[135.0]])], p1: s0(p0: [[136.0], [137.0], [138.0]], p1: [[139.0]]))], [s2(p0: [s0(p0: [[140.0], [141.0], [142.0]], p1: [[143.0]]), s0(p0: [[144.0], [145.0], [146.0]], p1: [[147.0]])], p1: s0(p0: [[148.0], [149.0], [150.0]], p1: [[151.0]]))], [s2(p0: [s0(p0: [[152.0], [153.0], [154.0]], p1: [[155.0]]), s0(p0: [[156.0], [157.0], [158.0]], p1: [[159.0]])], p1: s0(p0: [[160.0], [161.0], [162.0]], p1: [[163.0]]))]], p1: s1(p0: s0(p0: [[164.0], [165.0], [166.0]], p1: [[167.0]]), p1: [s0(p0: [[168.0], [169.0], [170.0]], p1: [[171.0]])], p2: [s0(p0: [[172.0], [173.0], [174.0]], p1: [[175.0]]), s0(p0: [[176.0], [177.0], [178.0]], p1: [[179.0]]), s0(p0: [[180.0], [181.0], [182.0]], p1: [[183.0]])])))]]
    let v2: s1 = s1(p0: s0(p0: [[184.0], [185.0], [186.0]], p1: [[187.0]]), p1: [s0(p0: [[188.0], [189.0], [190.0]], p1: [[191.0]])], p2: [s0(p0: [[192.0], [193.0], [194.0]], p1: [[195.0]]), s0(p0: [[196.0], [197.0], [198.0]], p1: [[199.0]]), s0(p0: [[200.0], [201.0], [202.0]], p1: [[203.0]])])
    let v3: s5 = s5(p0: [s3(p0: [[s2(p0: [s0(p0: [[204.0], [205.0], [206.0]], p1: [[207.0]]), s0(p0: [[208.0], [209.0], [210.0]], p1: [[211.0]])], p1: s0(p0: [[212.0], [213.0], [214.0]], p1: [[215.0]]))], [s2(p0: [s0(p0: [[216.0], [217.0], [218.0]], p1: [[219.0]]), s0(p0: [[220.0], [221.0], [222.0]], p1: [[223.0]])], p1: s0(p0: [[224.0], [225.0], [226.0]], p1: [[227.0]]))], [s2(p0: [s0(p0: [[228.0], [229.0], [230.0]], p1: [[231.0]]), s0(p0: [[232.0], [233.0], [234.0]], p1: [[235.0]])], p1: s0(p0: [[236.0], [237.0], [238.0]], p1: [[239.0]]))]], p1: s1(p0: s0(p0: [[240.0], [241.0], [242.0]], p1: [[243.0]]), p1: [s0(p0: [[244.0], [245.0], [246.0]], p1: [[247.0]])], p2: [s0(p0: [[248.0], [249.0], [250.0]], p1: [[251.0]]), s0(p0: [[252.0], [253.0], [254.0]], p1: [[255.0]]), s0(p0: [[256.0], [257.0], [258.0]], p1: [[259.0]])]))], p1: [[s3(p0: [[s2(p0: [s0(p0: [[260.0], [261.0], [262.0]], p1: [[263.0]]), s0(p0: [[264.0], [265.0], [266.0]], p1: [[267.0]])], p1: s0(p0: [[268.0], [269.0], [270.0]], p1: [[271.0]]))], [s2(p0: [s0(p0: [[272.0], [273.0], [274.0]], p1: [[275.0]]), s0(p0: [[276.0], [277.0], [278.0]], p1: [[279.0]])], p1: s0(p0: [[280.0], [281.0], [282.0]], p1: [[283.0]]))], [s2(p0: [s0(p0: [[284.0], [285.0], [286.0]], p1: [[287.0]]), s0(p0: [[288.0], [289.0], [290.0]], p1: [[291.0]])], p1: s0(p0: [[292.0], [293.0], [294.0]], p1: [[295.0]]))]], p1: s1(p0: s0(p0: [[296.0], [297.0], [298.0]], p1: [[299.0]]), p1: [s0(p0: [[300.0], [301.0], [302.0]], p1: [[303.0]])], p2: [s0(p0: [[304.0], [305.0], [306.0]], p1: [[307.0]]), s0(p0: [[308.0], [309.0], [310.0]], p1: [[311.0]]), s0(p0: [[312.0], [313.0], [314.0]], p1: [[315.0]])]))], [s3(p0: [[s2(p0: [s0(p0: [[316.0], [317.0], [318.0]], p1: [[319.0]]), s0(p0: [[320.0], [321.0], [322.0]], p1: [[323.0]])], p1: s0(p0: [[324.0], [325.0], [326.0]], p1: [[327.0]]))], [s2(p0: [s0(p0: [[328.0], [329.0], [330.0]], p1: [[331.0]]), s0(p0: [[332.0], [333.0], [334.0]], p1: [[335.0]])], p1: s0(p0: [[336.0], [337.0], [338.0]], p1: [[339.0]]))], [s2(p0: [s0(p0: [[340.0], [341.0], [342.0]], p1: [[343.0]]), s0(p0: [[344.0], [345.0], [346.0]], p1: [[347.0]])], p1: s0(p0: [[348.0], [349.0], [350.0]], p1: [[351.0]]))]], p1: s1(p0: s0(p0: [[352.0], [353.0], [354.0]], p1: [[355.0]]), p1: [s0(p0: [[356.0], [357.0], [358.0]], p1: [[359.0]])], p2: [s0(p0: [[360.0], [361.0], [362.0]], p1: [[363.0]]), s0(p0: [[364.0], [365.0], [366.0]], p1: [[367.0]]), s0(p0: [[368.0], [369.0], [370.0]], p1: [[371.0]])]))], [s3(p0: [[s2(p0: [s0(p0: [[372.0], [373.0], [374.0]], p1: [[375.0]]), s0(p0: [[376.0], [377.0], [378.0]], p1: [[379.0]])], p1: s0(p0: [[380.0], [381.0], [382.0]], p1: [[383.0]]))], [s2(p0: [s0(p0: [[384.0], [385.0], [386.0]], p1: [[387.0]]), s0(p0: [[388.0], [389.0], [390.0]], p1: [[391.0]])], p1: s0(p0: [[392.0], [393.0], [394.0]], p1: [[395.0]]))], [s2(p0: [s0(p0: [[396.0], [397.0], [398.0]], p1: [[399.0]]), s0(p0: [[400.0], [401.0], [402.0]], p1: [[403.0]])], p1: s0(p0: [[404.0], [405.0], [406.0]], p1: [[407.0]]))]], p1: s1(p0: s0(p0: [[408.0], [409.0], [410.0]], p1: [[411.0]]), p1: [s0(p0: [[412.0], [413.0], [414.0]], p1: [[415.0]])], p2: [s0(p0: [[416.0], [417.0], [418.0]], p1: [[419.0]]), s0(p0: [[420.0], [421.0], [422.0]], p1: [[423.0]]), s0(p0: [[424.0], [425.0], [426.0]], p1: [[427.0]])]))]])
    let v4: Double = 428.0
    let v5: s0 = s0(p0: [[429.0], [430.0], [431.0]], p1: [[432.0]])
    let v6: [s0] = [s0(p0: [[433.0], [434.0], [435.0]], p1: [[436.0]]), s0(p0: [[437.0], [438.0], [439.0]], p1: [[440.0]]), s0(p0: [[441.0], [442.0], [443.0]], p1: [[444.0]])]
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = [StructValue(Name(str='s0', ty=None), [[[433.0], [434.0], [435.0]], [[436.0]]]), StructValue(Name(str='s0', ty=None), [[[437.0], [438.0], [439.0]], [[440.0]]]), StructValue(Name(str='s0', ty=None), [[[441.0], [442.0], [443.0]], [[444.0]]])]
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4, v5, v6)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
