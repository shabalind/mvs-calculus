  import Dispatch
  struct s0 {
    var p0: [[Double]]
    var p1: [[Double]]
    var p2: [[Double]]
    var p3: [[Double]]
    var p4: [[Double]]
    var p5: Double
  }
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  }
  struct s2 {
    var p0: [s0]
    var p1: s1
  }
  struct s4 {
    var p0: [s2]
    var p1: s0
  }
  struct s5 {
    var p0: s4
    var p1: s4
  }
  struct s6 {
    var p0: s5
    var p1: [s4]
  }
  struct s8 {
    var p0: [s0]
    var p1: [s1]
  }
  @inline(never)
  func f0(_ v0: s0, _ v1: s6, _ v2: s8, _ v3: [s8], _ v4: Double) -> Double {
    let v7: [[Double]] = v0.p1
    let v9: [[[Double]]] = [v7]
    let v11: [Double] = v7[0]
    let v16: Double = v11[0]
    let v27: [Double] = v7[0]
    let v23: [[Double]] = v9[0]
    var v28: [Double] = v27
    let v29: Double = v28[0]
    let v64: [Double] = v23[0]
    v28[0] = v29
    v28[0] = v16
    v28[0] = v16
    let v67: Double = v64[0]
    let v181: Double = v29 / v67
    return v181
  }
  func benchmark() {
    let v0: s0 = s0(p0: [[0.0], [1.0], [2.0]], p1: [[3.0], [4.0]], p2: [[5.0], [6.0]], p3: [[7.0], [8.0]], p4: [[9.0]], p5: 10.0)
    let v1: s6 = s6(p0: s5(p0: s4(p0: [s2(p0: [s0(p0: [[11.0], [12.0], [13.0]], p1: [[14.0], [15.0]], p2: [[16.0], [17.0]], p3: [[18.0], [19.0]], p4: [[20.0]], p5: 21.0)], p1: s1(p0: [s0(p0: [[22.0], [23.0], [24.0]], p1: [[25.0], [26.0]], p2: [[27.0], [28.0]], p3: [[29.0], [30.0]], p4: [[31.0]], p5: 32.0)], p1: [s0(p0: [[33.0], [34.0], [35.0]], p1: [[36.0], [37.0]], p2: [[38.0], [39.0]], p3: [[40.0], [41.0]], p4: [[42.0]], p5: 43.0), s0(p0: [[44.0], [45.0], [46.0]], p1: [[47.0], [48.0]], p2: [[49.0], [50.0]], p3: [[51.0], [52.0]], p4: [[53.0]], p5: 54.0)]))], p1: s0(p0: [[55.0], [56.0], [57.0]], p1: [[58.0], [59.0]], p2: [[60.0], [61.0]], p3: [[62.0], [63.0]], p4: [[64.0]], p5: 65.0)), p1: s4(p0: [s2(p0: [s0(p0: [[66.0], [67.0], [68.0]], p1: [[69.0], [70.0]], p2: [[71.0], [72.0]], p3: [[73.0], [74.0]], p4: [[75.0]], p5: 76.0)], p1: s1(p0: [s0(p0: [[77.0], [78.0], [79.0]], p1: [[80.0], [81.0]], p2: [[82.0], [83.0]], p3: [[84.0], [85.0]], p4: [[86.0]], p5: 87.0)], p1: [s0(p0: [[88.0], [89.0], [90.0]], p1: [[91.0], [92.0]], p2: [[93.0], [94.0]], p3: [[95.0], [96.0]], p4: [[97.0]], p5: 98.0), s0(p0: [[99.0], [100.0], [101.0]], p1: [[102.0], [103.0]], p2: [[104.0], [105.0]], p3: [[106.0], [107.0]], p4: [[108.0]], p5: 109.0)]))], p1: s0(p0: [[110.0], [111.0], [112.0]], p1: [[113.0], [114.0]], p2: [[115.0], [116.0]], p3: [[117.0], [118.0]], p4: [[119.0]], p5: 120.0))), p1: [s4(p0: [s2(p0: [s0(p0: [[121.0], [122.0], [123.0]], p1: [[124.0], [125.0]], p2: [[126.0], [127.0]], p3: [[128.0], [129.0]], p4: [[130.0]], p5: 131.0)], p1: s1(p0: [s0(p0: [[132.0], [133.0], [134.0]], p1: [[135.0], [136.0]], p2: [[137.0], [138.0]], p3: [[139.0], [140.0]], p4: [[141.0]], p5: 142.0)], p1: [s0(p0: [[143.0], [144.0], [145.0]], p1: [[146.0], [147.0]], p2: [[148.0], [149.0]], p3: [[150.0], [151.0]], p4: [[152.0]], p5: 153.0), s0(p0: [[154.0], [155.0], [156.0]], p1: [[157.0], [158.0]], p2: [[159.0], [160.0]], p3: [[161.0], [162.0]], p4: [[163.0]], p5: 164.0)]))], p1: s0(p0: [[165.0], [166.0], [167.0]], p1: [[168.0], [169.0]], p2: [[170.0], [171.0]], p3: [[172.0], [173.0]], p4: [[174.0]], p5: 175.0))])
    let v2: s8 = s8(p0: [s0(p0: [[176.0], [177.0], [178.0]], p1: [[179.0], [180.0]], p2: [[181.0], [182.0]], p3: [[183.0], [184.0]], p4: [[185.0]], p5: 186.0), s0(p0: [[187.0], [188.0], [189.0]], p1: [[190.0], [191.0]], p2: [[192.0], [193.0]], p3: [[194.0], [195.0]], p4: [[196.0]], p5: 197.0), s0(p0: [[198.0], [199.0], [200.0]], p1: [[201.0], [202.0]], p2: [[203.0], [204.0]], p3: [[205.0], [206.0]], p4: [[207.0]], p5: 208.0)], p1: [s1(p0: [s0(p0: [[209.0], [210.0], [211.0]], p1: [[212.0], [213.0]], p2: [[214.0], [215.0]], p3: [[216.0], [217.0]], p4: [[218.0]], p5: 219.0)], p1: [s0(p0: [[220.0], [221.0], [222.0]], p1: [[223.0], [224.0]], p2: [[225.0], [226.0]], p3: [[227.0], [228.0]], p4: [[229.0]], p5: 230.0), s0(p0: [[231.0], [232.0], [233.0]], p1: [[234.0], [235.0]], p2: [[236.0], [237.0]], p3: [[238.0], [239.0]], p4: [[240.0]], p5: 241.0)]), s1(p0: [s0(p0: [[242.0], [243.0], [244.0]], p1: [[245.0], [246.0]], p2: [[247.0], [248.0]], p3: [[249.0], [250.0]], p4: [[251.0]], p5: 252.0)], p1: [s0(p0: [[253.0], [254.0], [255.0]], p1: [[256.0], [257.0]], p2: [[258.0], [259.0]], p3: [[260.0], [261.0]], p4: [[262.0]], p5: 263.0), s0(p0: [[264.0], [265.0], [266.0]], p1: [[267.0], [268.0]], p2: [[269.0], [270.0]], p3: [[271.0], [272.0]], p4: [[273.0]], p5: 274.0)])])
    let v3: [s8] = [s8(p0: [s0(p0: [[275.0], [276.0], [277.0]], p1: [[278.0], [279.0]], p2: [[280.0], [281.0]], p3: [[282.0], [283.0]], p4: [[284.0]], p5: 285.0), s0(p0: [[286.0], [287.0], [288.0]], p1: [[289.0], [290.0]], p2: [[291.0], [292.0]], p3: [[293.0], [294.0]], p4: [[295.0]], p5: 296.0), s0(p0: [[297.0], [298.0], [299.0]], p1: [[300.0], [301.0]], p2: [[302.0], [303.0]], p3: [[304.0], [305.0]], p4: [[306.0]], p5: 307.0)], p1: [s1(p0: [s0(p0: [[308.0], [309.0], [310.0]], p1: [[311.0], [312.0]], p2: [[313.0], [314.0]], p3: [[315.0], [316.0]], p4: [[317.0]], p5: 318.0)], p1: [s0(p0: [[319.0], [320.0], [321.0]], p1: [[322.0], [323.0]], p2: [[324.0], [325.0]], p3: [[326.0], [327.0]], p4: [[328.0]], p5: 329.0), s0(p0: [[330.0], [331.0], [332.0]], p1: [[333.0], [334.0]], p2: [[335.0], [336.0]], p3: [[337.0], [338.0]], p4: [[339.0]], p5: 340.0)]), s1(p0: [s0(p0: [[341.0], [342.0], [343.0]], p1: [[344.0], [345.0]], p2: [[346.0], [347.0]], p3: [[348.0], [349.0]], p4: [[350.0]], p5: 351.0)], p1: [s0(p0: [[352.0], [353.0], [354.0]], p1: [[355.0], [356.0]], p2: [[357.0], [358.0]], p3: [[359.0], [360.0]], p4: [[361.0]], p5: 362.0), s0(p0: [[363.0], [364.0], [365.0]], p1: [[366.0], [367.0]], p2: [[368.0], [369.0]], p3: [[370.0], [371.0]], p4: [[372.0]], p5: 373.0)])]), s8(p0: [s0(p0: [[374.0], [375.0], [376.0]], p1: [[377.0], [378.0]], p2: [[379.0], [380.0]], p3: [[381.0], [382.0]], p4: [[383.0]], p5: 384.0), s0(p0: [[385.0], [386.0], [387.0]], p1: [[388.0], [389.0]], p2: [[390.0], [391.0]], p3: [[392.0], [393.0]], p4: [[394.0]], p5: 395.0), s0(p0: [[396.0], [397.0], [398.0]], p1: [[399.0], [400.0]], p2: [[401.0], [402.0]], p3: [[403.0], [404.0]], p4: [[405.0]], p5: 406.0)], p1: [s1(p0: [s0(p0: [[407.0], [408.0], [409.0]], p1: [[410.0], [411.0]], p2: [[412.0], [413.0]], p3: [[414.0], [415.0]], p4: [[416.0]], p5: 417.0)], p1: [s0(p0: [[418.0], [419.0], [420.0]], p1: [[421.0], [422.0]], p2: [[423.0], [424.0]], p3: [[425.0], [426.0]], p4: [[427.0]], p5: 428.0), s0(p0: [[429.0], [430.0], [431.0]], p1: [[432.0], [433.0]], p2: [[434.0], [435.0]], p3: [[436.0], [437.0]], p4: [[438.0]], p5: 439.0)]), s1(p0: [s0(p0: [[440.0], [441.0], [442.0]], p1: [[443.0], [444.0]], p2: [[445.0], [446.0]], p3: [[447.0], [448.0]], p4: [[449.0]], p5: 450.0)], p1: [s0(p0: [[451.0], [452.0], [453.0]], p1: [[454.0], [455.0]], p2: [[456.0], [457.0]], p3: [[458.0], [459.0]], p4: [[460.0]], p5: 461.0), s0(p0: [[462.0], [463.0], [464.0]], p1: [[465.0], [466.0]], p2: [[467.0], [468.0]], p3: [[469.0], [470.0]], p4: [[471.0]], p5: 472.0)])]), s8(p0: [s0(p0: [[473.0], [474.0], [475.0]], p1: [[476.0], [477.0]], p2: [[478.0], [479.0]], p3: [[480.0], [481.0]], p4: [[482.0]], p5: 483.0), s0(p0: [[484.0], [485.0], [486.0]], p1: [[487.0], [488.0]], p2: [[489.0], [490.0]], p3: [[491.0], [492.0]], p4: [[493.0]], p5: 494.0), s0(p0: [[495.0], [496.0], [497.0]], p1: [[498.0], [499.0]], p2: [[500.0], [501.0]], p3: [[502.0], [503.0]], p4: [[504.0]], p5: 505.0)], p1: [s1(p0: [s0(p0: [[506.0], [507.0], [508.0]], p1: [[509.0], [510.0]], p2: [[511.0], [512.0]], p3: [[513.0], [514.0]], p4: [[515.0]], p5: 516.0)], p1: [s0(p0: [[517.0], [518.0], [519.0]], p1: [[520.0], [521.0]], p2: [[522.0], [523.0]], p3: [[524.0], [525.0]], p4: [[526.0]], p5: 527.0), s0(p0: [[528.0], [529.0], [530.0]], p1: [[531.0], [532.0]], p2: [[533.0], [534.0]], p3: [[535.0], [536.0]], p4: [[537.0]], p5: 538.0)]), s1(p0: [s0(p0: [[539.0], [540.0], [541.0]], p1: [[542.0], [543.0]], p2: [[544.0], [545.0]], p3: [[546.0], [547.0]], p4: [[548.0]], p5: 549.0)], p1: [s0(p0: [[550.0], [551.0], [552.0]], p1: [[553.0], [554.0]], p2: [[555.0], [556.0]], p3: [[557.0], [558.0]], p4: [[559.0]], p5: 560.0), s0(p0: [[561.0], [562.0], [563.0]], p1: [[564.0], [565.0]], p2: [[566.0], [567.0]], p3: [[568.0], [569.0]], p4: [[570.0]], p5: 571.0)])])]
    let v4: Double = 572.0
    let start = DispatchTime.now().uptimeNanoseconds
    var result: Double = 572.0
    for _ in 1...1000 {
      result = f0(v0, v1, v2, v3, v4)
    }
    let end = DispatchTime.now().uptimeNanoseconds
    print(result)
    print(end - start)
  }
  benchmark()
