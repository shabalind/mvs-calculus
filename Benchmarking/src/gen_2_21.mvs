  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [s0]
  } in
  struct s2 {
    var p0: [[s0]]
    var p1: [s0]
  } in
  struct s3 {
    var p0: s2
    var p1: s1
    var p2: [s1]
  } in
  let noinline_f0: ([[s3]], Float) -> Float = (v0: [[s3]], v1: Float) -> Float {
    var v5: [[s3]] = v0 in
    let v3: [s3] = v5[0] in
    let v4: s3 = v3[0] in
    let v6: s2 = v4.p0 in
    let v8: [s0] = v6.p1 in
    let v2: s0 = v8[1] in
    var v12: [[s3]] = v0 in
    v5 = v12 in
    v12[0] = v3 in
    var v19: s0 = v2 in
    v5[0] = v3 in
    let v29: s0 = v8[2] in
    let v26: [[Float]] = v19.p0 in
    let v57: [s3] = v12[0] in
    v5[0] = v57 in
    v19.p0 = v26 in
    let v74: [Float] = v26[0] in
    let v39: Float = v74[0] in
    let v50: [[Float]] = v29.p1 in
    v19.p1 = v50 in
    v5 = v0 in
    v39
  } in
  fun loop(i: Int, v0: [[s3]], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [[s3]] = [[s3(s2([[s0([[0.0], [1.0]], [[2.0]])]], [s0([[3.0], [4.0]], [[5.0]]), s0([[6.0], [7.0]], [[8.0]]), s0([[9.0], [10.0]], [[11.0]])]), s1(s0([[12.0], [13.0]], [[14.0]]), [s0([[15.0], [16.0]], [[17.0]])]), [s1(s0([[18.0], [19.0]], [[20.0]]), [s0([[21.0], [22.0]], [[23.0]])]), s1(s0([[24.0], [25.0]], [[26.0]]), [s0([[27.0], [28.0]], [[29.0]])])])]] in
    let v1: Float = 30.0 in
    let initialResult: Float = 30.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()