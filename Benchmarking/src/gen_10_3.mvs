  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [[s0]]
  } in
  struct s3 {
    var p0: s1
    var p1: [[s1]]
  } in
  let f78: (s0) -> s0 = (v0: s0) -> s0 {
    var v4: s0 = v0 in
    let v7: [[Float]] = v4.p0 in
    let v1: [[Float]] = v4.p1 in
    v4 = v0 in
    v4.p1 = v1 in
    v4.p0 = v7 in
    let v34: [[Float]] = v4.p0 in
    let v29: [[Float]] = v0.p1 in
    let v20: [[Float]] = v0.p0 in
    v4.p1 = v1 in
    v4.p0 = v20 in
    v4.p1 = v29 in
    v4.p0 = v34 in
    let v28: [[Float]] = v0.p1 in
    v4.p1 = v28 in
    var v83: s0 = v4 in
    v83
  } in
  let f68: ([s0]) -> [s0] = (v0: [s0]) -> [s0] {
    let v6: s0 = v0[0] in
    let v7: [[Float]] = v6.p1 in
    var v8: [[Float]] = v7 in
    var v3: s0 = v6 in
    let v4: [[Float]] = v3.p0 in
    var v5: [s0] = v0 in
    v3 = v6 in
    var v12: [s0] = v5 in
    let v15: s0 = f78(v6) in
    let v19: [Float] = v4[1] in
    let v9: [[Float]] = v6.p0 in
    let v17: s0 = f78(v6) in
    v12[0] = v6 in
    let v14: s0 = v0[0] in
    v3.p1 = v7 in
    var v34: [Float] = v19 in
    var v16: s0 = v14 in
    let v30: [[Float]] = v15.p0 in
    let v21: s0 = v12[0] in
    var v33: [[Float]] = v30 in
    v12[0] = v6 in
    v33[0] = v34 in
    v16.p1 = v8 in
    let v32: [[Float]] = v21.p0 in
    v8[0] = v34 in
    v12[0] = v3 in
    v3.p0 = v32 in
    v16.p0 = v9 in
    v12[0] = v21 in
    v3.p0 = v33 in
    let v97: [[Float]] = v17.p1 in
    v3.p0 = v32 in
    v5[0] = v16 in
    v16.p1 = v97 in
    var v169: [s0] = v12 in
    v169
  } in
  let f33: (s3, s0) -> s0 = (v0: s3, v1: s0) -> s0 {
    let v5: s0 = f78(v1) in
    var v7: s0 = v1 in
    let v12: [[Float]] = v1.p1 in
    v7.p1 = v12 in
    let v25: [[Float]] = v5.p0 in
    v7.p1 = v12 in
    v7.p0 = v25 in
    v7
  } in
  let noinline_f0: ([s3], Float) -> Float = (v0: [s3], v1: Float) -> Float {
    let v5: s3 = v0[0] in
    let v3: s1 = v5.p0 in
    let v12: [[s0]] = v3.p1 in
    let v8: [s0] = v12[0] in
    let v6: s0 = v8[0] in
    let v9: [s0] = f68(v8) in
    let v16: s0 = v9[0] in
    var v11: [s0] = v9 in
    v11[0] = v16 in
    let v19: s0 = v11[0] in
    v11 = v9 in
    let v25: [[s0]] = v3.p1 in
    let v78: [[Float]] = v19.p1 in
    v11[0] = v6 in
    let v60: [s0] = v25[0] in
    v11 = v60 in
    let v22: s0 = f33(v5, v19) in
    v11[0] = v6 in
    v11[0] = v19 in
    var v47: [[Float]] = v78 in
    v11[0] = v22 in
    v11[0] = v16 in
    let v113: [Float] = v47[0] in
    let v79: Float = v113[0] in
    v79
  } in
  fun loop(i: Int, v0: [s3], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s3] = [s3(s1([s0([[0.0], [1.0]], [[2.0]])], [[s0([[3.0], [4.0]], [[5.0]])], [s0([[6.0], [7.0]], [[8.0]])]]), [[s1([s0([[9.0], [10.0]], [[11.0]])], [[s0([[12.0], [13.0]], [[14.0]])], [s0([[15.0], [16.0]], [[17.0]])]])]])] in
    let v1: Float = 18.0 in
    let initialResult: Float = 18.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()