  struct s0 {
    var p0: [[Float]]
    var p1: Float
    var p2: [[Float]]
    var p3: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  } in
  struct s2 {
    var p0: [s1]
    var p1: [s1]
    var p2: s0
    var p3: s1
  } in
  struct s4 {
    var p0: [s0]
    var p1: [s2]
  } in
  let f22: (s0) -> s0 = (v0: s0) -> s0 {
    var v3: s0 = v0 in
    let v2: [[Float]] = v0.p3 in
    var v4: s0 = v3 in
    let v7: [[Float]] = v0.p0 in
    let v8: [Float] = v2[1] in
    let v6: [s0] = [v4, v4, v4, v0, v0, v3] in
    var v5: s0 = v0 in
    var v11: [Float] = v8 in
    let v1: s0 = v6[2] in
    let v9: Float = v11[0] in
    var v10: [[Float]] = v2 in
    let v14: Float = v9 / v9 in
    let v28: [[Float]] = v1.p3 in
    let v17: [Float] = v28[2] in
    let v13: [[Float]] = v1.p0 in
    let v22: s0 = v6[0] in
    v10[1] = v17 in
    let v29: Float = v17[0] in
    v3.p0 = v7 in
    let v19: s0 = v6[4] in
    v4.p0 = v13 in
    v4.p3 = v10 in
    v11[0] = v9 in
    var v15: Float = v29 in
    let v40: [[Float]] = v5.p0 in
    v11[0] = v15 in
    v3.p0 = v13 in
    v3.p0 = v13 in
    let v47: [[Float]] = v0.p0 in
    v4.p1 = v14 in
    v5.p3 = v28 in
    v3.p2 = v47 in
    let v49: [[Float]] = v19.p2 in
    v3.p2 = v49 in
    v4.p0 = v40 in
    v11[0] = v15 in
    var v89: s0 = v22 in
    v89
  } in
  let noinline_f0: ([s2], s0, s4, Float) -> Float = (v0: [s2], v1: s0, v2: s4, v3: Float) -> Float {
    let v4: s0 = f22(v1) in
    let v18: [[Float]] = v4.p2 in
    let v38: [Float] = v18[1] in
    let v66: Float = v38[0] in
    v66
  } in
  fun loop(i: Int, v0: [s2], v1: s0, v2: s4, v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2([s1([[s0([[0.0], [1.0]], 2.0, [[3.0], [4.0]], [[5.0], [6.0], [7.0]])], [s0([[8.0], [9.0]], 10.0, [[11.0], [12.0]], [[13.0], [14.0], [15.0]])]], s0([[16.0], [17.0]], 18.0, [[19.0], [20.0]], [[21.0], [22.0], [23.0]]))], [s1([[s0([[24.0], [25.0]], 26.0, [[27.0], [28.0]], [[29.0], [30.0], [31.0]])], [s0([[32.0], [33.0]], 34.0, [[35.0], [36.0]], [[37.0], [38.0], [39.0]])]], s0([[40.0], [41.0]], 42.0, [[43.0], [44.0]], [[45.0], [46.0], [47.0]])), s1([[s0([[48.0], [49.0]], 50.0, [[51.0], [52.0]], [[53.0], [54.0], [55.0]])], [s0([[56.0], [57.0]], 58.0, [[59.0], [60.0]], [[61.0], [62.0], [63.0]])]], s0([[64.0], [65.0]], 66.0, [[67.0], [68.0]], [[69.0], [70.0], [71.0]])), s1([[s0([[72.0], [73.0]], 74.0, [[75.0], [76.0]], [[77.0], [78.0], [79.0]])], [s0([[80.0], [81.0]], 82.0, [[83.0], [84.0]], [[85.0], [86.0], [87.0]])]], s0([[88.0], [89.0]], 90.0, [[91.0], [92.0]], [[93.0], [94.0], [95.0]]))], s0([[96.0], [97.0]], 98.0, [[99.0], [100.0]], [[101.0], [102.0], [103.0]]), s1([[s0([[104.0], [105.0]], 106.0, [[107.0], [108.0]], [[109.0], [110.0], [111.0]])], [s0([[112.0], [113.0]], 114.0, [[115.0], [116.0]], [[117.0], [118.0], [119.0]])]], s0([[120.0], [121.0]], 122.0, [[123.0], [124.0]], [[125.0], [126.0], [127.0]])))] in
    let v1: s0 = s0([[128.0], [129.0]], 130.0, [[131.0], [132.0]], [[133.0], [134.0], [135.0]]) in
    let v2: s4 = s4([s0([[136.0], [137.0]], 138.0, [[139.0], [140.0]], [[141.0], [142.0], [143.0]]), s0([[144.0], [145.0]], 146.0, [[147.0], [148.0]], [[149.0], [150.0], [151.0]]), s0([[152.0], [153.0]], 154.0, [[155.0], [156.0]], [[157.0], [158.0], [159.0]])], [s2([s1([[s0([[160.0], [161.0]], 162.0, [[163.0], [164.0]], [[165.0], [166.0], [167.0]])], [s0([[168.0], [169.0]], 170.0, [[171.0], [172.0]], [[173.0], [174.0], [175.0]])]], s0([[176.0], [177.0]], 178.0, [[179.0], [180.0]], [[181.0], [182.0], [183.0]]))], [s1([[s0([[184.0], [185.0]], 186.0, [[187.0], [188.0]], [[189.0], [190.0], [191.0]])], [s0([[192.0], [193.0]], 194.0, [[195.0], [196.0]], [[197.0], [198.0], [199.0]])]], s0([[200.0], [201.0]], 202.0, [[203.0], [204.0]], [[205.0], [206.0], [207.0]])), s1([[s0([[208.0], [209.0]], 210.0, [[211.0], [212.0]], [[213.0], [214.0], [215.0]])], [s0([[216.0], [217.0]], 218.0, [[219.0], [220.0]], [[221.0], [222.0], [223.0]])]], s0([[224.0], [225.0]], 226.0, [[227.0], [228.0]], [[229.0], [230.0], [231.0]])), s1([[s0([[232.0], [233.0]], 234.0, [[235.0], [236.0]], [[237.0], [238.0], [239.0]])], [s0([[240.0], [241.0]], 242.0, [[243.0], [244.0]], [[245.0], [246.0], [247.0]])]], s0([[248.0], [249.0]], 250.0, [[251.0], [252.0]], [[253.0], [254.0], [255.0]]))], s0([[256.0], [257.0]], 258.0, [[259.0], [260.0]], [[261.0], [262.0], [263.0]]), s1([[s0([[264.0], [265.0]], 266.0, [[267.0], [268.0]], [[269.0], [270.0], [271.0]])], [s0([[272.0], [273.0]], 274.0, [[275.0], [276.0]], [[277.0], [278.0], [279.0]])]], s0([[280.0], [281.0]], 282.0, [[283.0], [284.0]], [[285.0], [286.0], [287.0]])))]) in
    let v3: Float = 288.0 in
    let initialResult: Float = 288.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()