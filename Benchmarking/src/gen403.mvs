  struct s0 {
    var p0: [Float]
  } in
  let noinline_f0: (s0, s0, s0, Float) -> Float = (v0: s0, v1: s0, v2: s0, v3: Float) -> Float {
    var v5: s0 = v2 in
    let v4: [Float] = v5.p0 in
    let v9: [Float] = v1.p0 in
    let v7: Float = v4[0] in
    let v13: [Float] = v1.p0 in
    let v6: Float = v3 - v7 in
    let v11: Float = v13[0] in
    var v12: [Float] = v4 in
    let v34: Float = v4[0] in
    var v21: [Float] = v4 in
    var v15: Float = v6 in
    v12[0] = v34 in
    v21[0] = v11 in
    v5.p0 = v9 in
    v21[0] = v11 in
    let v28: Float = v12[0] in
    v21[0] = v28 in
    v5.p0 = v12 in
    let v29: Float = v21[0] in
    let v57: Float = v15 / v29 in
    v12[0] = v11 in
    v5.p0 = v12 in
    v57
  } in
  fun loop(i: Int, v0: s0, v1: s0, v2: s0, v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s0 = s0([0.0]) in
    let v1: s0 = s0([1.0]) in
    let v2: s0 = s0([2.0]) in
    let v3: Float = 3.0 in
    let initialResult: Float = 3.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()