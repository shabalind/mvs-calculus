  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s4 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s5 {
    var p0: [s0]
    var p1: [[s4]]
  } in
  let f26: (s5, s0) -> s0 = (v0: s5, v1: s0) -> s0 {
    let v5: [s5] = [v0, v0, v0, v0, v0] in
    let v10: s5 = v5[3] in
    let v11: [[s4]] = v10.p1 in
    let v14: [s4] = v11[1] in
    let v24: s4 = v14[0] in
    let v41: s4 = v14[0] in
    var v38: s4 = v41 in
    let v87: [s0] = v38.p1 in
    let v56: [s0] = v24.p1 in
    v38.p1 = v87 in
    let v119: [s0] = v38.p0 in
    v38.p1 = v56 in
    let v90: s0 = v119[0] in
    v90
  } in
  let noinline_f0: (s4, s5, s0, Float) -> Float = (v0: s4, v1: s5, v2: s0, v3: Float) -> Float {
    let v9: s0 = f26(v1, v2) in
    let v40: [[Float]] = v9.p1 in
    let v149: [Float] = v40[1] in
    let v157: Float = v149[0] in
    v157
  } in
  fun loop(i: Int, v0: s4, v1: s5, v2: s0, v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s4 = s4([s0([[0.0], [1.0]], [[2.0], [3.0]]), s0([[4.0], [5.0]], [[6.0], [7.0]])], [s0([[8.0], [9.0]], [[10.0], [11.0]])]) in
    let v1: s5 = s5([s0([[12.0], [13.0]], [[14.0], [15.0]]), s0([[16.0], [17.0]], [[18.0], [19.0]]), s0([[20.0], [21.0]], [[22.0], [23.0]])], [[s4([s0([[24.0], [25.0]], [[26.0], [27.0]]), s0([[28.0], [29.0]], [[30.0], [31.0]])], [s0([[32.0], [33.0]], [[34.0], [35.0]])])], [s4([s0([[36.0], [37.0]], [[38.0], [39.0]]), s0([[40.0], [41.0]], [[42.0], [43.0]])], [s0([[44.0], [45.0]], [[46.0], [47.0]])])]]) in
    let v2: s0 = s0([[48.0], [49.0]], [[50.0], [51.0]]) in
    let v3: Float = 52.0 in
    let initialResult: Float = 52.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()