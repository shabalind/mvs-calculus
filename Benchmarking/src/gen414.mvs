  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: s0
    var p1: [[s0]]
  } in
  struct s2 {
    var p0: s0
    var p1: s0
  } in
  struct s5 {
    var p0: s1
  } in
  let f32: (s0, s1) -> s0 = (v0: s0, v1: s1) -> s0 {
    let v4: [[s0]] = v1.p1 in
    var v5: [[s0]] = v4 in
    let v7: [s0] = v5[2] in
    let v6: [s0] = v5[1] in
    v5[1] = v7 in
    let v10: s0 = v1.p0 in
    var v24: [s0] = v6 in
    v24[0] = v10 in
    let v59: s0 = v24[0] in
    v24[0] = v10 in
    v59
  } in
  let noinline_f0: ([s2], [s5], s1, s2, Float) -> Float = (v0: [s2], v1: [s5], v2: s1, v3: s2, v4: Float) -> Float {
    var v8: s1 = v2 in
    let v10: s0 = v3.p0 in
    let v13: s0 = f32(v10, v8) in
    let v16: s0 = f32(v13, v8) in
    let v34: [[Float]] = v16.p0 in
    var v98: [[Float]] = v34 in
    let v124: [Float] = v98[0] in
    var v82: [Float] = v124 in
    let v78: Float = v82[0] in
    v78
  } in
  fun loop(i: Int, v0: [s2], v1: [s5], v2: s1, v3: s2, v4: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3, v4) in
      loop(i + 1, v0, v1, v2, v3, v4, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s2] = [s2(s0([[0.0], [1.0]], [[2.0]]), s0([[3.0], [4.0]], [[5.0]])), s2(s0([[6.0], [7.0]], [[8.0]]), s0([[9.0], [10.0]], [[11.0]]))] in
    let v1: [s5] = [s5(s1(s0([[12.0], [13.0]], [[14.0]]), [[s0([[15.0], [16.0]], [[17.0]])], [s0([[18.0], [19.0]], [[20.0]])], [s0([[21.0], [22.0]], [[23.0]])]]))] in
    let v2: s1 = s1(s0([[24.0], [25.0]], [[26.0]]), [[s0([[27.0], [28.0]], [[29.0]])], [s0([[30.0], [31.0]], [[32.0]])], [s0([[33.0], [34.0]], [[35.0]])]]) in
    let v3: s2 = s2(s0([[36.0], [37.0]], [[38.0]]), s0([[39.0], [40.0]], [[41.0]])) in
    let v4: Float = 42.0 in
    let initialResult: Float = 42.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, v4, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()