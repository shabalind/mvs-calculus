  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: [s0]
  } in
  struct s3 {
    var p0: [s0]
    var p1: s1
  } in
  struct s6 {
    var p0: s3
    var p1: [Float]
  } in
  let noinline_f0: ([s6], Float) -> Float = (v0: [s6], v1: Float) -> Float {
    let v6: s6 = v0[0] in
    var v7: Float = v1 in
    let v4: [Float] = v6.p1 in
    let v8: Float = v4[0] in
    var v13: [Float] = v4 in
    v13[0] = v7 in
    let v12: Float = v7 / v1 in
    v13 = v4 in
    let v38: Float = v4[1] in
    v7 = v12 in
    v13[0] = v8 in
    v13[0] = v38 in
    let v83: Float = v13[1] in
    let v97: Float = v83 / v12 in
    v97
  } in
  fun loop(i: Int, v0: [s6], v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: [s6] = [s6(s3([s0([[0.0]], [[1.0], [2.0], [3.0]])], s1([s0([[4.0]], [[5.0], [6.0], [7.0]]), s0([[8.0]], [[9.0], [10.0], [11.0]]), s0([[12.0]], [[13.0], [14.0], [15.0]])], [s0([[16.0]], [[17.0], [18.0], [19.0]])])), [20.0, 21.0]), s6(s3([s0([[22.0]], [[23.0], [24.0], [25.0]])], s1([s0([[26.0]], [[27.0], [28.0], [29.0]]), s0([[30.0]], [[31.0], [32.0], [33.0]]), s0([[34.0]], [[35.0], [36.0], [37.0]])], [s0([[38.0]], [[39.0], [40.0], [41.0]])])), [42.0, 43.0])] in
    let v1: Float = 44.0 in
    let initialResult: Float = 44.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()