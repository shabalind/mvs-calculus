  struct s0 {
    var p0: [[Float]]
    var p1: [[Float]]
    var p2: [[Float]]
    var p3: [[Float]]
    var p4: [[Float]]
    var p5: [Float]
    var p6: [[Float]]
  } in
  struct s1 {
    var p0: [[s0]]
    var p1: s0
  } in
  let noinline_f0: (s1, Float) -> Float = (v0: s1, v1: Float) -> Float {
    var v7: Float = v1 in
    let v6: [[s0]] = v0.p0 in
    let v15: [s0] = v6[0] in
    var v31: Float = v7 in
    let v13: [Float] = [v31, v1, v31, v1, v1] in
    let v46: s0 = v15[0] in
    let v55: [[Float]] = v46.p2 in
    let v53: [Float] = v55[0] in
    let v52: Float = v13[0] in
    let v74: Float = v13[4] in
    let v149: Float = v53[0] in
    let v116: Float = v53[0] in
    var v109: Float = v52 in
    let v312: Float = v116 - v74 in
    v31 = v149 in
    let v347: Float = v109 - v312 in
    v347
  } in
  fun loop(i: Int, v0: s1, v1: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1) in
      loop(i + 1, v0, v1, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s1 = s1([[s0([[0.0]], [[1.0], [2.0], [3.0]], [[4.0], [5.0]], [[6.0], [7.0]], [[8.0], [9.0], [10.0]], [11.0, 12.0, 13.0], [[14.0], [15.0]])]], s0([[16.0]], [[17.0], [18.0], [19.0]], [[20.0], [21.0]], [[22.0], [23.0]], [[24.0], [25.0], [26.0]], [27.0, 28.0, 29.0], [[30.0], [31.0]])) in
    let v1: Float = 32.0 in
    let initialResult: Float = 32.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()