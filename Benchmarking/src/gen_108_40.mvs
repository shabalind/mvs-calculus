  struct s0 {
    var p0: [[Float]]
  } in
  struct s1 {
    var p0: [s0]
    var p1: s0
  } in
  struct s3 {
    var p0: s0
    var p1: s0
  } in
  struct s4 {
    var p0: [s1]
    var p1: [[s3]]
  } in
  struct s6 {
    var p0: [s0]
    var p1: [[s4]]
  } in
  struct s7 {
    var p0: [s6]
    var p1: s3
  } in
  struct s9 {
    var p0: [Float]
    var p1: [s6]
  } in
  struct s10 {
    var p0: [[s1]]
    var p1: [s9]
  } in
  let f11: (s3) -> s3 = (v0: s3) -> s3 {
    let v2: s0 = v0.p0 in
    var v7: s3 = v0 in
    let v8: s0 = v7.p0 in
    var v9: s3 = v7 in
    let v1: [[Float]] = v8.p0 in
    let v3: s0 = v7.p0 in
    let v5: [Float] = v1[0] in
    var v6: [Float] = v5 in
    v9.p1 = v8 in
    v9.p0 = v8 in
    var v12: s0 = v8 in
    let v14: Float = v5[0] in
    let v10: [[Float]] = v3.p0 in
    var v16: Float = v14 in
    var v4: [[Float]] = v1 in
    let v20: [Float] = v10[0] in
    v7.p1 = v12 in
    var v15: s0 = v2 in
    v4[0] = v20 in
    let v13: s3 = s3(v15, v15) in
    v9.p0 = v15 in
    var v17: Float = v16 in
    let v30: [[Float]] = v15.p0 in
    let v51: [s3] = [v9, v9, v9, v9] in
    v12.p0 = v30 in
    v7.p0 = v15 in
    var v24: s3 = v13 in
    v6[0] = v14 in
    var v40: [Float] = v6 in
    let v29: s3 = v51[3] in
    let v26: s0 = v13.p1 in
    var v22: [s3] = v51 in
    let v42: s0 = v0.p0 in
    v15.p0 = v10 in
    let v32: s0 = v29.p0 in
    var v43: s3 = v0 in
    var v28: s3 = v24 in
    var v46: Float = v16 in
    var v58: [s3] = v51 in
    var v44: [Float] = v40 in
    let v61: s0 = v0.p0 in
    v40[0] = v46 in
    var v72: s3 = v0 in
    v44[0] = v17 in
    var v48: [s3] = v22 in
    let v50: s3 = s3(v15, v12) in
    var v59: [s3] = v58 in
    var v45: [[Float]] = v1 in
    v43.p0 = v32 in
    let v41: [[Float]] = v3.p0 in
    v45 = v4 in
    v9.p1 = v61 in
    v58[1] = v72 in
    let v37: s3 = v59[0] in
    v4[0] = v44 in
    v24.p0 = v3 in
    var v113: [s3] = v48 in
    var v62: s3 = v29 in
    v62.p1 = v61 in
    let v89: s3 = v48[2] in
    v113[0] = v89 in
    var v125: [s3] = v113 in
    v7.p0 = v42 in
    v113[1] = v37 in
    v6[0] = v14 in
    let v63: s0 = v24.p1 in
    v9.p1 = v63 in
    let v274: s3 = v125[2] in
    v113[1] = v62 in
    v62.p1 = v42 in
    let v153: [[Float]] = v26.p0 in
    v12.p0 = v4 in
    v12.p0 = v153 in
    v15.p0 = v45 in
    v15.p0 = v41 in
    v9 = v50 in
    v58[3] = v28 in
    v125[0] = v13 in
    v72.p1 = v32 in
    v58[3] = v43 in
    v274
  } in
  let noinline_f0: (s3, [[s10]], [s7], Float) -> Float = (v0: s3, v1: [[s10]], v2: [s7], v3: Float) -> Float {
    let v10: s3 = f11(v0) in
    let v8: s0 = v10.p0 in
    let v11: [s0] = [v8, v8, v8, v8, v8, v8] in
    let v9: s0 = v11[2] in
    let v30: Float = v3 * v3 in
    let v52: [[Float]] = v9.p0 in
    let v49: [Float] = v52[0] in
    let v87: Float = v49[0] in
    let v152: Float = v30 - v87 in
    var v114: Float = v152 in
    v114
  } in
  fun loop(i: Int, v0: s3, v1: [[s10]], v2: [s7], v3: Float, result: Float) -> Float {
    if i >= 1000 ? result ! (
      let newResult: Float = noinline_f0(v0, v1, v2, v3) in
      loop(i + 1, v0, v1, v2, v3, newResult)
    )
  } in
  let main: () -> Float = () -> Float {
    let v0: s3 = s3(s0([[0.0]]), s0([[1.0]])) in
    let v1: [[s10]] = [[s10([[s1([s0([[2.0]]), s0([[3.0]])], s0([[4.0]]))]], [s9([5.0], [s6([s0([[6.0]]), s0([[7.0]])], [[s4([s1([s0([[8.0]]), s0([[9.0]])], s0([[10.0]])), s1([s0([[11.0]]), s0([[12.0]])], s0([[13.0]])), s1([s0([[14.0]]), s0([[15.0]])], s0([[16.0]]))], [[s3(s0([[17.0]]), s0([[18.0]]))], [s3(s0([[19.0]]), s0([[20.0]]))], [s3(s0([[21.0]]), s0([[22.0]]))]])]])]), s9([23.0], [s6([s0([[24.0]]), s0([[25.0]])], [[s4([s1([s0([[26.0]]), s0([[27.0]])], s0([[28.0]])), s1([s0([[29.0]]), s0([[30.0]])], s0([[31.0]])), s1([s0([[32.0]]), s0([[33.0]])], s0([[34.0]]))], [[s3(s0([[35.0]]), s0([[36.0]]))], [s3(s0([[37.0]]), s0([[38.0]]))], [s3(s0([[39.0]]), s0([[40.0]]))]])]])]), s9([41.0], [s6([s0([[42.0]]), s0([[43.0]])], [[s4([s1([s0([[44.0]]), s0([[45.0]])], s0([[46.0]])), s1([s0([[47.0]]), s0([[48.0]])], s0([[49.0]])), s1([s0([[50.0]]), s0([[51.0]])], s0([[52.0]]))], [[s3(s0([[53.0]]), s0([[54.0]]))], [s3(s0([[55.0]]), s0([[56.0]]))], [s3(s0([[57.0]]), s0([[58.0]]))]])]])])])], [s10([[s1([s0([[59.0]]), s0([[60.0]])], s0([[61.0]]))]], [s9([62.0], [s6([s0([[63.0]]), s0([[64.0]])], [[s4([s1([s0([[65.0]]), s0([[66.0]])], s0([[67.0]])), s1([s0([[68.0]]), s0([[69.0]])], s0([[70.0]])), s1([s0([[71.0]]), s0([[72.0]])], s0([[73.0]]))], [[s3(s0([[74.0]]), s0([[75.0]]))], [s3(s0([[76.0]]), s0([[77.0]]))], [s3(s0([[78.0]]), s0([[79.0]]))]])]])]), s9([80.0], [s6([s0([[81.0]]), s0([[82.0]])], [[s4([s1([s0([[83.0]]), s0([[84.0]])], s0([[85.0]])), s1([s0([[86.0]]), s0([[87.0]])], s0([[88.0]])), s1([s0([[89.0]]), s0([[90.0]])], s0([[91.0]]))], [[s3(s0([[92.0]]), s0([[93.0]]))], [s3(s0([[94.0]]), s0([[95.0]]))], [s3(s0([[96.0]]), s0([[97.0]]))]])]])]), s9([98.0], [s6([s0([[99.0]]), s0([[100.0]])], [[s4([s1([s0([[101.0]]), s0([[102.0]])], s0([[103.0]])), s1([s0([[104.0]]), s0([[105.0]])], s0([[106.0]])), s1([s0([[107.0]]), s0([[108.0]])], s0([[109.0]]))], [[s3(s0([[110.0]]), s0([[111.0]]))], [s3(s0([[112.0]]), s0([[113.0]]))], [s3(s0([[114.0]]), s0([[115.0]]))]])]])])])], [s10([[s1([s0([[116.0]]), s0([[117.0]])], s0([[118.0]]))]], [s9([119.0], [s6([s0([[120.0]]), s0([[121.0]])], [[s4([s1([s0([[122.0]]), s0([[123.0]])], s0([[124.0]])), s1([s0([[125.0]]), s0([[126.0]])], s0([[127.0]])), s1([s0([[128.0]]), s0([[129.0]])], s0([[130.0]]))], [[s3(s0([[131.0]]), s0([[132.0]]))], [s3(s0([[133.0]]), s0([[134.0]]))], [s3(s0([[135.0]]), s0([[136.0]]))]])]])]), s9([137.0], [s6([s0([[138.0]]), s0([[139.0]])], [[s4([s1([s0([[140.0]]), s0([[141.0]])], s0([[142.0]])), s1([s0([[143.0]]), s0([[144.0]])], s0([[145.0]])), s1([s0([[146.0]]), s0([[147.0]])], s0([[148.0]]))], [[s3(s0([[149.0]]), s0([[150.0]]))], [s3(s0([[151.0]]), s0([[152.0]]))], [s3(s0([[153.0]]), s0([[154.0]]))]])]])]), s9([155.0], [s6([s0([[156.0]]), s0([[157.0]])], [[s4([s1([s0([[158.0]]), s0([[159.0]])], s0([[160.0]])), s1([s0([[161.0]]), s0([[162.0]])], s0([[163.0]])), s1([s0([[164.0]]), s0([[165.0]])], s0([[166.0]]))], [[s3(s0([[167.0]]), s0([[168.0]]))], [s3(s0([[169.0]]), s0([[170.0]]))], [s3(s0([[171.0]]), s0([[172.0]]))]])]])])])]] in
    let v2: [s7] = [s7([s6([s0([[173.0]]), s0([[174.0]])], [[s4([s1([s0([[175.0]]), s0([[176.0]])], s0([[177.0]])), s1([s0([[178.0]]), s0([[179.0]])], s0([[180.0]])), s1([s0([[181.0]]), s0([[182.0]])], s0([[183.0]]))], [[s3(s0([[184.0]]), s0([[185.0]]))], [s3(s0([[186.0]]), s0([[187.0]]))], [s3(s0([[188.0]]), s0([[189.0]]))]])]]), s6([s0([[190.0]]), s0([[191.0]])], [[s4([s1([s0([[192.0]]), s0([[193.0]])], s0([[194.0]])), s1([s0([[195.0]]), s0([[196.0]])], s0([[197.0]])), s1([s0([[198.0]]), s0([[199.0]])], s0([[200.0]]))], [[s3(s0([[201.0]]), s0([[202.0]]))], [s3(s0([[203.0]]), s0([[204.0]]))], [s3(s0([[205.0]]), s0([[206.0]]))]])]])], s3(s0([[207.0]]), s0([[208.0]])))] in
    let v3: Float = 209.0 in
    let initialResult: Float = 209.0 in
    let start: Float = uptime() in
    let result: Float = loop(0, v0, v1, v2, v3, initialResult) in
    let end: Float = uptime() in
    end - start
  } in
main()