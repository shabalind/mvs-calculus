struct State {
  var freeRows: [Int]
  var freeMaxs: [Int]
  var freeMins: [Int]
  var queenRows: [Int]   
} in

fun getRowColumn(state: inout State, r: Int, c: Int) -> Int { 
  iand(iand(state.freeRows[r], state.freeMaxs[c + r]), state.freeMins[c - r + 7])
} in

fun setRowColumn(state: inout State, r: Int, c: Int, v: Int) -> Int {
  state.freeRows[r] = v in
  state.freeMaxs[c + r] = v in 
  state.freeMins[c - r + 7] = v in
  0
} in

fun placeQueen(state: inout State, c: Int) -> Int {
  fun loop(state: inout State, c: Int, r: Int) -> Int {
    if r < 8 ? (
      if getRowColumn(&state, r, c) ? (
        state.queenRows[r] = c in
        let dummy0: Int = setRowColumn(&state, r, c, 0) in

        if c == 7 ? 1 ! (
          if placeQueen(&state, c + 1) ? 1 ! (
            let dummy1: Int = setRowColumn(&state, r, c, 1) in
            loop(&state, c, r + 1)
          )
        )
      ) ! (
        loop(&state, c, r + 1)
      )
    ) ! 0
  } in

  loop(&state, c, 0)
} in

fun run(n: Int) -> Int {
  var state = State(
    [1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1]) in

  placeQueen(&state, 0)
} in

run(0)
